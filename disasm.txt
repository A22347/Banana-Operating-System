
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0b 6d 00 00       	call   c0006d2b <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d5 b9 01 00       	call   c001b9fa <_init>
c0000025:	c3                   	ret    
c0000026:	bb 96 c4 01 c0       	mov    ebx,0xc001c496
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a0 c4 01 c0    	cmp    ebx,0xc001c4a0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 f0 01 c0       	mov    eax,0xc001f038
c0000049:	3d 38 f0 01 c0       	cmp    eax,0xc001f038
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 f0 01 c0       	push   0xc001f038
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 f0 01 c0       	mov    eax,0xc001f038
c0000075:	2d 38 f0 01 c0       	sub    eax,0xc001f038
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 f0 01 c0       	push   0xc001f038
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c0 f1 01 c0 00 	cmp    BYTE PTR ds:0xc001f1c0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a8 c4 01 c0       	mov    ebx,0xc001c4a8
c00000bb:	81 eb a4 c4 01 c0    	sub    ebx,0xc001c4a4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a4 c4 01 c0       	mov    esi,0xc001c4a4
c00000ca:	a1 c4 f1 01 c0       	mov    eax,ds:0xc001f1c4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 c4 f1 01 c0       	mov    ds:0xc001f1c4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 c4 f1 01 c0       	mov    eax,ds:0xc001f1c4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 f0 01 c0       	push   0xc001f038
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c0 f1 01 c0 01 	mov    BYTE PTR ds:0xc001f1c0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 c8 f1 01 c0       	push   0xc001f1c8
c000012c:	68 38 f0 01 c0       	push   0xc001f038
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 50 20 01 00       	call   c0012320 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 40 95 00 00       	call   c0009828 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 2e 20 01 00       	call   c0012320 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 ff 24 01 00       	call   c0012810 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 4e 2b 01 00       	call   c0012e68 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 10 f6 01 c0 	lgdtd  ds:0xc001f610
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 60 58 00 00       	jmp    c0005c02 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 e0 f1 01 c0       	mov    ds:0xc001f1e0,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 e0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e0,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d e0 f1 01 c0    	mov    ebx,DWORD PTR ds:0xc001f1e0
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 c0 c4 01 c0 02 	test   BYTE PTR [edx-0x3ffe3b40],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 c0 c4 01 c0 01 	test   BYTE PTR [edx-0x3ffe3b40],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 c0 c4 01 c0 08 	test   BYTE PTR [edx-0x3ffe3b40],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 c0 c4 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3b40],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 c0 c4 01 c0 01 	test   BYTE PTR [edx-0x3ffe3b40],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 00 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f200
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 00 f2 01 c0    	mov    DWORD PTR ds:0xc001f200,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 04 f2 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0dfc]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 04 f2 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0dfc],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 00 f2 01 c0    	mov    DWORD PTR ds:0xc001f200,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 2c f2 01 c0    	cmp    DWORD PTR ds:0xc001f22c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 3c f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f23c
c0000d5d:	c7 42 0c 34 f2 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f234
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 3c f2 01 c0    	mov    DWORD PTR ds:0xc001f23c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 2c f2 01 c0    	mov    DWORD PTR ds:0xc001f22c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 00 f2 01 c0 02 	test   BYTE PTR ds:0xc001f200,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 fe 5c 00 00       	call   c0006b3c <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 40 5c 00 00       	call   c0006b3c <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 2a 5c 00 00       	call   c0006b3c <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 06 5c 00 00       	call   c0006b3c <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 00 f2 01 c0    	mov    edi,DWORD PTR ds:0xc001f200
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 04 f2 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0dfc]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 04 f2 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0dfc],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 34 f2 01 c0 	lea    edx,[eax*8-0x3ffe0dcc]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d 40 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f240
c00010df:	81 fb 34 f2 01 c0    	cmp    ebx,0xc001f234
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 34 f2 01 c0       	cmp    eax,0xc001f234
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 30 f2 01 c0    	cmp    DWORD PTR ds:0xc001f230,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 3c f2 01 c0       	mov    ds:0xc001f23c,eax
c000111b:	a3 40 f2 01 c0       	mov    ds:0xc001f240,eax
c0001120:	a3 30 f2 01 c0       	mov    ds:0xc001f230,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 34 f2 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f234
c000112e:	c7 40 0c 34 f2 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f234
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 40 f2 01 c0       	mov    ds:0xc001f240,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 34 f2 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f234
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 f8 f1 01 c0 	lea    ebp,[edx*4-0x3ffe0e08]
c000117f:	8b 14 95 00 f2 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0e00]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 00 f2 01 c0 	lea    ecx,[edx*4-0x3ffe0e00]
c000119a:	8b 14 95 00 f2 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0e00]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 34 f5 01 c0 	or     DWORD PTR [edi*4-0x3ffe0acc],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 34 f2 01 c0 	lea    eax,[eax*8-0x3ffe0dcc]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 3c f2 01 c0    	mov    DWORD PTR ds:0xc001f23c,ecx
c0001254:	89 0d 40 f2 01 c0    	mov    DWORD PTR ds:0xc001f240,ecx
c000125a:	c7 41 08 34 f2 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f234
c0001261:	c7 41 0c 34 f2 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f234
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 2c f2 01 c0 	lea    edx,[ecx*8-0x3ffe0dd4]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 34 f5 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0acc]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 34 f5 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0acc]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 2c f2 01 c0 	lea    edx,[eax*4-0x3ffe0dd4]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 34 f5 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0acc],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 3c f2 01 c0    	mov    DWORD PTR ds:0xc001f23c,edi
c0001327:	89 3d 40 f2 01 c0    	mov    DWORD PTR ds:0xc001f240,edi
c000132d:	c7 47 08 34 f2 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f234
c0001334:	c7 47 0c 34 f2 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f234
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 30 f2 01 c0    	mov    DWORD PTR ds:0xc001f230,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 2c f2 01 c0       	mov    eax,ds:0xc001f22c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 2c f2 01 c0    	mov    DWORD PTR ds:0xc001f22c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 00 f2 01 c0       	mov    edx,0xc001f200
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 00 f2 01 c0 00 	cmp    DWORD PTR ds:0xc001f200,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d 54 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f554
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 54 f5 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f554,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d 54 f5 01 c0    	mov    DWORD PTR ds:0xc001f554,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 2c f2 01 c0    	cmp    DWORD PTR ds:0xc001f22c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 2c f2 01 c0    	mov    DWORD PTR ds:0xc001f22c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 00 f2 01 c0 00 	cmp    DWORD PTR ds:0xc001f200,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 5c f5 01 c0    	push   DWORD PTR ds:0xc001f55c
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 00 f2 01 c0 00 	cmp    DWORD PTR ds:0xc001f200,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 5c f5 01 c0       	mov    eax,ds:0xc001f55c
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 2c f2 01 c0 00 	cmp    DWORD PTR ds:0xc001f22c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 2c f2 01 c0       	mov    eax,ds:0xc001f22c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 04 f2 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0dfc]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 34 f2 01 c0       	mov    eax,0xc001f234
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 2c f5 01 c0       	cmp    eax,0xc001f52c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 68 f5 01 c0       	mov    eax,ds:0xc001f568
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 50 f5 01 c0    	mov    esi,DWORD PTR ds:0xc001f550
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 64 f5 01 c0    	mov    esi,DWORD PTR ds:0xc001f564
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 74 f5 01 c0    	mov    esi,DWORD PTR ds:0xc001f574
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 c4 c5 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe3a3c]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 00 f2 01 c0       	mov    eax,ds:0xc001f200
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 00 f2 01 c0       	mov    ds:0xc001f200,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d 44 f5 01 c0    	mov    DWORD PTR ds:0xc001f544,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d 48 f5 01 c0    	mov    DWORD PTR ds:0xc001f548,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d 4c f5 01 c0    	mov    DWORD PTR ds:0xc001f54c,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 54 f5 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f554,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    

c0001afb <disk_status>:
c0001afb:	31 c0                	xor    eax,eax
c0001afd:	c3                   	ret    

c0001afe <disk_initialize>:
c0001afe:	31 c0                	xor    eax,eax
c0001b00:	c3                   	ret    

c0001b01 <disk_read>:
c0001b01:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b06:	0f b6 04 85 40 2c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd3c0]
c0001b0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b12:	e9 61 45 01 00       	jmp    c0016078 <fatWrapperReadDisk>

c0001b17 <disk_write>:
c0001b17:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b1c:	0f b6 04 85 40 2c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd3c0]
c0001b24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b28:	e9 8f 45 01 00       	jmp    c00160bc <fatWrapperWriteDisk>

c0001b2d <disk_ioctl>:
c0001b2d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 40 2c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd3c0]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 b4 45 01 00       	jmp    c0016100 <fatWrapperIoctl>

c0001b4c <ld_word>:
c0001b4c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b53:	c1 e2 08             	shl    edx,0x8
c0001b56:	09 d0                	or     eax,edx
c0001b58:	c3                   	ret    

c0001b59 <ld_dword>:
c0001b59:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b5d:	89 d1                	mov    ecx,edx
c0001b5f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b63:	c1 e1 08             	shl    ecx,0x8
c0001b66:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b69:	09 ca                	or     edx,ecx
c0001b6b:	c1 e2 08             	shl    edx,0x8
c0001b6e:	09 d0                	or     eax,edx
c0001b70:	c3                   	ret    

c0001b71 <st_word>:
c0001b71:	66 89 10             	mov    WORD PTR [eax],dx
c0001b74:	c3                   	ret    

c0001b75 <st_dword>:
c0001b75:	89 10                	mov    DWORD PTR [eax],edx
c0001b77:	c3                   	ret    

c0001b78 <mem_cpy>:
c0001b78:	85 c9                	test   ecx,ecx
c0001b7a:	74 10                	je     c0001b8c <mem_cpy+0x14>
c0001b7c:	57                   	push   edi
c0001b7d:	01 c1                	add    ecx,eax
c0001b7f:	56                   	push   esi
c0001b80:	89 c7                	mov    edi,eax
c0001b82:	89 d6                	mov    esi,edx
c0001b84:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001b85:	39 f9                	cmp    ecx,edi
c0001b87:	75 fb                	jne    c0001b84 <mem_cpy+0xc>
c0001b89:	5e                   	pop    esi
c0001b8a:	5f                   	pop    edi
c0001b8b:	c3                   	ret    
c0001b8c:	c3                   	ret    

c0001b8d <mem_set>:
c0001b8d:	01 c1                	add    ecx,eax
c0001b8f:	40                   	inc    eax
c0001b90:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001b93:	39 c8                	cmp    eax,ecx
c0001b95:	75 f8                	jne    c0001b8f <mem_set+0x2>
c0001b97:	c3                   	ret    

c0001b98 <mem_cmp>:
c0001b98:	57                   	push   edi
c0001b99:	56                   	push   esi
c0001b9a:	89 c6                	mov    esi,eax
c0001b9c:	53                   	push   ebx
c0001b9d:	46                   	inc    esi
c0001b9e:	42                   	inc    edx
c0001b9f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ba3:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ba7:	29 fb                	sub    ebx,edi
c0001ba9:	89 cf                	mov    edi,ecx
c0001bab:	29 f7                	sub    edi,esi
c0001bad:	01 c7                	add    edi,eax
c0001baf:	74 04                	je     c0001bb5 <mem_cmp+0x1d>
c0001bb1:	85 db                	test   ebx,ebx
c0001bb3:	74 e8                	je     c0001b9d <mem_cmp+0x5>
c0001bb5:	89 d8                	mov    eax,ebx
c0001bb7:	5b                   	pop    ebx
c0001bb8:	5e                   	pop    esi
c0001bb9:	5f                   	pop    edi
c0001bba:	c3                   	ret    

c0001bbb <chk_chr>:
c0001bbb:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001bbe:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001bc1:	74 07                	je     c0001bca <chk_chr+0xf>
c0001bc3:	39 d1                	cmp    ecx,edx
c0001bc5:	74 03                	je     c0001bca <chk_chr+0xf>
c0001bc7:	40                   	inc    eax
c0001bc8:	eb f1                	jmp    c0001bbb <chk_chr>
c0001bca:	89 c8                	mov    eax,ecx
c0001bcc:	c3                   	ret    

c0001bcd <dbc_1st>:
c0001bcd:	31 c0                	xor    eax,eax
c0001bcf:	c3                   	ret    

c0001bd0 <dbc_2nd>:
c0001bd0:	31 c0                	xor    eax,eax
c0001bd2:	c3                   	ret    

c0001bd3 <tchar2uni>:
c0001bd3:	57                   	push   edi
c0001bd4:	89 c7                	mov    edi,eax
c0001bd6:	56                   	push   esi
c0001bd7:	53                   	push   ebx
c0001bd8:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001bda:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001bdc:	8d 73 01             	lea    esi,[ebx+0x1]
c0001bdf:	84 c9                	test   cl,cl
c0001be1:	78 0a                	js     c0001bed <tchar2uni+0x1a>
c0001be3:	0f b6 d1             	movzx  edx,cl
c0001be6:	89 f3                	mov    ebx,esi
c0001be8:	e9 9f 00 00 00       	jmp    c0001c8c <tchar2uni+0xb9>
c0001bed:	88 ca                	mov    dl,cl
c0001bef:	83 e2 e0             	and    edx,0xffffffe0
c0001bf2:	80 fa c0             	cmp    dl,0xc0
c0001bf5:	75 0c                	jne    c0001c03 <tchar2uni+0x30>
c0001bf7:	89 ca                	mov    edx,ecx
c0001bf9:	b9 01 00 00 00       	mov    ecx,0x1
c0001bfe:	83 e2 1f             	and    edx,0x1f
c0001c01:	eb 2e                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c03:	88 ca                	mov    dl,cl
c0001c05:	83 e2 f0             	and    edx,0xfffffff0
c0001c08:	80 fa e0             	cmp    dl,0xe0
c0001c0b:	75 0c                	jne    c0001c19 <tchar2uni+0x46>
c0001c0d:	89 ca                	mov    edx,ecx
c0001c0f:	b9 02 00 00 00       	mov    ecx,0x2
c0001c14:	83 e2 0f             	and    edx,0xf
c0001c17:	eb 18                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c19:	88 ca                	mov    dl,cl
c0001c1b:	83 e2 f8             	and    edx,0xfffffff8
c0001c1e:	88 d0                	mov    al,dl
c0001c20:	83 ca ff             	or     edx,0xffffffff
c0001c23:	3c f0                	cmp    al,0xf0
c0001c25:	75 6c                	jne    c0001c93 <tchar2uni+0xc0>
c0001c27:	89 ca                	mov    edx,ecx
c0001c29:	b9 03 00 00 00       	mov    ecx,0x3
c0001c2e:	83 e2 07             	and    edx,0x7
c0001c31:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c35:	46                   	inc    esi
c0001c36:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c39:	88 c8                	mov    al,cl
c0001c3b:	83 e0 c0             	and    eax,0xffffffc0
c0001c3e:	3c 80                	cmp    al,0x80
c0001c40:	75 4e                	jne    c0001c90 <tchar2uni+0xbd>
c0001c42:	c1 e2 06             	shl    edx,0x6
c0001c45:	83 e1 3f             	and    ecx,0x3f
c0001c48:	09 ca                	or     edx,ecx
c0001c4a:	39 de                	cmp    esi,ebx
c0001c4c:	75 e7                	jne    c0001c35 <tchar2uni+0x62>
c0001c4e:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001c51:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001c57:	77 37                	ja     c0001c90 <tchar2uni+0xbd>
c0001c59:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001c5f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c65:	76 29                	jbe    c0001c90 <tchar2uni+0xbd>
c0001c67:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001c6d:	76 1d                	jbe    c0001c8c <tchar2uni+0xb9>
c0001c6f:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001c75:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001c7b:	c1 e1 06             	shl    ecx,0x6
c0001c7e:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001c84:	09 ca                	or     edx,ecx
c0001c86:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001c8c:	89 1f                	mov    DWORD PTR [edi],ebx
c0001c8e:	eb 03                	jmp    c0001c93 <tchar2uni+0xc0>
c0001c90:	83 ca ff             	or     edx,0xffffffff
c0001c93:	5b                   	pop    ebx
c0001c94:	89 d0                	mov    eax,edx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <put_utf>:
c0001c99:	53                   	push   ebx
c0001c9a:	83 f8 7f             	cmp    eax,0x7f
c0001c9d:	89 c3                	mov    ebx,eax
c0001c9f:	b0 00                	mov    al,0x0
c0001ca1:	77 11                	ja     c0001cb4 <put_utf+0x1b>
c0001ca3:	85 c9                	test   ecx,ecx
c0001ca5:	0f 84 e5 00 00 00    	je     c0001d90 <put_utf+0xf7>
c0001cab:	88 1a                	mov    BYTE PTR [edx],bl
c0001cad:	b0 01                	mov    al,0x1
c0001caf:	e9 dc 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cb4:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001cba:	77 23                	ja     c0001cdf <put_utf+0x46>
c0001cbc:	83 f9 01             	cmp    ecx,0x1
c0001cbf:	0f 86 cb 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cc5:	89 d8                	mov    eax,ebx
c0001cc7:	83 e3 3f             	and    ebx,0x3f
c0001cca:	c1 e8 06             	shr    eax,0x6
c0001ccd:	83 cb 80             	or     ebx,0xffffff80
c0001cd0:	83 c8 c0             	or     eax,0xffffffc0
c0001cd3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001cd6:	88 02                	mov    BYTE PTR [edx],al
c0001cd8:	b0 02                	mov    al,0x2
c0001cda:	e9 b1 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cdf:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ce5:	77 40                	ja     c0001d27 <put_utf+0x8e>
c0001ce7:	83 f9 02             	cmp    ecx,0x2
c0001cea:	0f 86 a0 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cf0:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001cf6:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cfc:	0f 86 8e 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001d02:	89 d8                	mov    eax,ebx
c0001d04:	c1 e8 0c             	shr    eax,0xc
c0001d07:	83 c8 e0             	or     eax,0xffffffe0
c0001d0a:	88 02                	mov    BYTE PTR [edx],al
c0001d0c:	89 d8                	mov    eax,ebx
c0001d0e:	83 e3 3f             	and    ebx,0x3f
c0001d11:	c1 e8 06             	shr    eax,0x6
c0001d14:	83 cb 80             	or     ebx,0xffffff80
c0001d17:	83 e0 3f             	and    eax,0x3f
c0001d1a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d1d:	83 c8 80             	or     eax,0xffffff80
c0001d20:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d23:	b0 03                	mov    al,0x3
c0001d25:	eb 69                	jmp    c0001d90 <put_utf+0xf7>
c0001d27:	83 f9 03             	cmp    ecx,0x3
c0001d2a:	76 64                	jbe    c0001d90 <put_utf+0xf7>
c0001d2c:	89 d9                	mov    ecx,ebx
c0001d2e:	0f b7 c3             	movzx  eax,bx
c0001d31:	66 31 c9             	xor    cx,cx
c0001d34:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d3a:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d40:	c1 e9 06             	shr    ecx,0x6
c0001d43:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001d49:	77 43                	ja     c0001d8e <put_utf+0xf5>
c0001d4b:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001d51:	77 3b                	ja     c0001d8e <put_utf+0xf5>
c0001d53:	09 cb                	or     ebx,ecx
c0001d55:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001d5b:	89 d8                	mov    eax,ebx
c0001d5d:	c1 e8 12             	shr    eax,0x12
c0001d60:	83 c8 f0             	or     eax,0xfffffff0
c0001d63:	88 02                	mov    BYTE PTR [edx],al
c0001d65:	89 d8                	mov    eax,ebx
c0001d67:	c1 e8 0c             	shr    eax,0xc
c0001d6a:	83 e0 3f             	and    eax,0x3f
c0001d6d:	83 c8 80             	or     eax,0xffffff80
c0001d70:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d73:	89 d8                	mov    eax,ebx
c0001d75:	83 e3 3f             	and    ebx,0x3f
c0001d78:	c1 e8 06             	shr    eax,0x6
c0001d7b:	83 cb 80             	or     ebx,0xffffff80
c0001d7e:	83 e0 3f             	and    eax,0x3f
c0001d81:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001d84:	83 c8 80             	or     eax,0xffffff80
c0001d87:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001d8a:	b0 04                	mov    al,0x4
c0001d8c:	eb 02                	jmp    c0001d90 <put_utf+0xf7>
c0001d8e:	31 c0                	xor    eax,eax
c0001d90:	5b                   	pop    ebx
c0001d91:	c3                   	ret    

c0001d92 <clst2sect>:
c0001d92:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001d95:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001d98:	83 ea 02             	sub    edx,0x2
c0001d9b:	39 ca                	cmp    edx,ecx
c0001d9d:	76 0d                	jbe    c0001dac <clst2sect+0x1a>
c0001d9f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001da3:	0f af d1             	imul   edx,ecx
c0001da6:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001da9:	89 d0                	mov    eax,edx
c0001dab:	c3                   	ret    
c0001dac:	31 c0                	xor    eax,eax
c0001dae:	c3                   	ret    

c0001daf <pick_lfn>:
c0001daf:	55                   	push   ebp
c0001db0:	57                   	push   edi
c0001db1:	56                   	push   esi
c0001db2:	89 d6                	mov    esi,edx
c0001db4:	53                   	push   ebx
c0001db5:	89 c3                	mov    ebx,eax
c0001db7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dba:	e8 8d fd ff ff       	call   c0001b4c <ld_word>
c0001dbf:	66 85 c0             	test   ax,ax
c0001dc2:	74 04                	je     c0001dc8 <pick_lfn+0x19>
c0001dc4:	31 c0                	xor    eax,eax
c0001dc6:	eb 5c                	jmp    c0001e24 <pick_lfn+0x75>
c0001dc8:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001dcb:	bd 01 00 00 00       	mov    ebp,0x1
c0001dd0:	83 e1 bf             	and    ecx,0xffffffbf
c0001dd3:	31 ff                	xor    edi,edi
c0001dd5:	49                   	dec    ecx
c0001dd6:	6b c9 0d             	imul   ecx,ecx,0xd
c0001dd9:	0f b6 87 20 c7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe38e0]
c0001de0:	01 f0                	add    eax,esi
c0001de2:	e8 65 fd ff ff       	call   c0001b4c <ld_word>
c0001de7:	66 85 ed             	test   bp,bp
c0001dea:	74 11                	je     c0001dfd <pick_lfn+0x4e>
c0001dec:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001df2:	77 d0                	ja     c0001dc4 <pick_lfn+0x15>
c0001df4:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001df8:	89 c5                	mov    ebp,eax
c0001dfa:	41                   	inc    ecx
c0001dfb:	eb 04                	jmp    c0001e01 <pick_lfn+0x52>
c0001dfd:	66 40                	inc    ax
c0001dff:	75 c3                	jne    c0001dc4 <pick_lfn+0x15>
c0001e01:	47                   	inc    edi
c0001e02:	83 ff 0d             	cmp    edi,0xd
c0001e05:	75 d2                	jne    c0001dd9 <pick_lfn+0x2a>
c0001e07:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001e0a:	74 13                	je     c0001e1f <pick_lfn+0x70>
c0001e0c:	66 85 ed             	test   bp,bp
c0001e0f:	74 0e                	je     c0001e1f <pick_lfn+0x70>
c0001e11:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e17:	77 ab                	ja     c0001dc4 <pick_lfn+0x15>
c0001e19:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001e1f:	b8 01 00 00 00       	mov    eax,0x1
c0001e24:	5b                   	pop    ebx
c0001e25:	5e                   	pop    esi
c0001e26:	5f                   	pop    edi
c0001e27:	5d                   	pop    ebp
c0001e28:	c3                   	ret    

c0001e29 <put_lfn>:
c0001e29:	55                   	push   ebp
c0001e2a:	31 ed                	xor    ebp,ebp
c0001e2c:	57                   	push   edi
c0001e2d:	89 d7                	mov    edi,edx
c0001e2f:	56                   	push   esi
c0001e30:	31 f6                	xor    esi,esi
c0001e32:	53                   	push   ebx
c0001e33:	83 ec 08             	sub    esp,0x8
c0001e36:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e39:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001e3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001e41:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001e47:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001e4a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e4d:	31 d2                	xor    edx,edx
c0001e4f:	e8 1d fd ff ff       	call   c0001b71 <st_word>
c0001e54:	0f b6 d9             	movzx  ebx,cl
c0001e57:	4b                   	dec    ebx
c0001e58:	6b db 0d             	imul   ebx,ebx,0xd
c0001e5b:	66 83 fe ff          	cmp    si,0xffff
c0001e5f:	74 08                	je     c0001e69 <put_lfn+0x40>
c0001e61:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e64:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e68:	43                   	inc    ebx
c0001e69:	0f b6 85 20 c7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe38e0]
c0001e70:	0f b7 d6             	movzx  edx,si
c0001e73:	01 f8                	add    eax,edi
c0001e75:	e8 f7 fc ff ff       	call   c0001b71 <st_word>
c0001e7a:	66 85 f6             	test   si,si
c0001e7d:	75 03                	jne    c0001e82 <put_lfn+0x59>
c0001e7f:	83 ce ff             	or     esi,0xffffffff
c0001e82:	45                   	inc    ebp
c0001e83:	83 fd 0d             	cmp    ebp,0xd
c0001e86:	75 d3                	jne    c0001e5b <put_lfn+0x32>
c0001e88:	66 46                	inc    si
c0001e8a:	74 0a                	je     c0001e96 <put_lfn+0x6d>
c0001e8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e94:	75 09                	jne    c0001e9f <put_lfn+0x76>
c0001e96:	88 c8                	mov    al,cl
c0001e98:	83 c8 40             	or     eax,0x40
c0001e9b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e9f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001ea3:	88 07                	mov    BYTE PTR [edi],al
c0001ea5:	83 c4 08             	add    esp,0x8
c0001ea8:	5b                   	pop    ebx
c0001ea9:	5e                   	pop    esi
c0001eaa:	5f                   	pop    edi
c0001eab:	5d                   	pop    ebp
c0001eac:	c3                   	ret    

c0001ead <gen_numname>:
c0001ead:	57                   	push   edi
c0001eae:	89 cf                	mov    edi,ecx
c0001eb0:	56                   	push   esi
c0001eb1:	b9 0b 00 00 00       	mov    ecx,0xb
c0001eb6:	53                   	push   ebx
c0001eb7:	89 c6                	mov    esi,eax
c0001eb9:	83 ec 10             	sub    esp,0x10
c0001ebc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001ec0:	e8 b3 fc ff ff       	call   c0001b78 <mem_cpy>
c0001ec5:	83 fb 05             	cmp    ebx,0x5
c0001ec8:	76 2d                	jbe    c0001ef7 <gen_numname+0x4a>
c0001eca:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001ecd:	66 85 c0             	test   ax,ax
c0001ed0:	74 25                	je     c0001ef7 <gen_numname+0x4a>
c0001ed2:	83 c7 02             	add    edi,0x2
c0001ed5:	ba 10 00 00 00       	mov    edx,0x10
c0001eda:	01 db                	add    ebx,ebx
c0001edc:	89 c1                	mov    ecx,eax
c0001ede:	66 d1 e8             	shr    ax,1
c0001ee1:	83 e1 01             	and    ecx,0x1
c0001ee4:	01 cb                	add    ebx,ecx
c0001ee6:	0f ba e3 10          	bt     ebx,0x10
c0001eea:	73 06                	jae    c0001ef2 <gen_numname+0x45>
c0001eec:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001ef2:	4a                   	dec    edx
c0001ef3:	75 e5                	jne    c0001eda <gen_numname+0x2d>
c0001ef5:	eb d3                	jmp    c0001eca <gen_numname+0x1d>
c0001ef7:	b8 07 00 00 00       	mov    eax,0x7
c0001efc:	88 d9                	mov    cl,bl
c0001efe:	83 e1 0f             	and    ecx,0xf
c0001f01:	8d 51 30             	lea    edx,[ecx+0x30]
c0001f04:	80 fa 39             	cmp    dl,0x39
c0001f07:	76 03                	jbe    c0001f0c <gen_numname+0x5f>
c0001f09:	8d 51 37             	lea    edx,[ecx+0x37]
c0001f0c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001f0f:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001f13:	89 da                	mov    edx,ebx
c0001f15:	c1 ea 04             	shr    edx,0x4
c0001f18:	83 fb 0f             	cmp    ebx,0xf
c0001f1b:	76 06                	jbe    c0001f23 <gen_numname+0x76>
c0001f1d:	89 c8                	mov    eax,ecx
c0001f1f:	89 d3                	mov    ebx,edx
c0001f21:	eb d9                	jmp    c0001efc <gen_numname+0x4f>
c0001f23:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001f28:	31 d2                	xor    edx,edx
c0001f2a:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001f2d:	8d 04 16             	lea    eax,[esi+edx*1]
c0001f30:	39 ca                	cmp    edx,ecx
c0001f32:	73 18                	jae    c0001f4c <gen_numname+0x9f>
c0001f34:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f37:	3c 20                	cmp    al,0x20
c0001f39:	74 11                	je     c0001f4c <gen_numname+0x9f>
c0001f3b:	e8 8d fc ff ff       	call   c0001bcd <dbc_1st>
c0001f40:	85 c0                	test   eax,eax
c0001f42:	74 05                	je     c0001f49 <gen_numname+0x9c>
c0001f44:	39 d3                	cmp    ebx,edx
c0001f46:	74 04                	je     c0001f4c <gen_numname+0x9f>
c0001f48:	42                   	inc    edx
c0001f49:	42                   	inc    edx
c0001f4a:	eb e1                	jmp    c0001f2d <gen_numname+0x80>
c0001f4c:	b0 20                	mov    al,0x20
c0001f4e:	83 f9 07             	cmp    ecx,0x7
c0001f51:	77 05                	ja     c0001f58 <gen_numname+0xab>
c0001f53:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f57:	41                   	inc    ecx
c0001f58:	42                   	inc    edx
c0001f59:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f5d:	83 fa 07             	cmp    edx,0x7
c0001f60:	76 ea                	jbe    c0001f4c <gen_numname+0x9f>
c0001f62:	83 c4 10             	add    esp,0x10
c0001f65:	5b                   	pop    ebx
c0001f66:	5e                   	pop    esi
c0001f67:	5f                   	pop    edi
c0001f68:	c3                   	ret    

c0001f69 <sum_sfn>:
c0001f69:	31 c9                	xor    ecx,ecx
c0001f6b:	31 d2                	xor    edx,edx
c0001f6d:	d0 ca                	ror    dl,1
c0001f6f:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f72:	41                   	inc    ecx
c0001f73:	83 f9 0b             	cmp    ecx,0xb
c0001f76:	75 f5                	jne    c0001f6d <sum_sfn+0x4>
c0001f78:	88 d0                	mov    al,dl
c0001f7a:	c3                   	ret    

c0001f7b <get_ldnumber>:
c0001f7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f7d:	85 d2                	test   edx,edx
c0001f7f:	74 14                	je     c0001f95 <get_ldnumber+0x1a>
c0001f81:	56                   	push   esi
c0001f82:	53                   	push   ebx
c0001f83:	89 d3                	mov    ebx,edx
c0001f85:	43                   	inc    ebx
c0001f86:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f89:	80 f9 1f             	cmp    cl,0x1f
c0001f8c:	76 0d                	jbe    c0001f9b <get_ldnumber+0x20>
c0001f8e:	80 f9 3a             	cmp    cl,0x3a
c0001f91:	75 f2                	jne    c0001f85 <get_ldnumber+0xa>
c0001f93:	eb 0a                	jmp    c0001f9f <get_ldnumber+0x24>
c0001f95:	83 c9 ff             	or     ecx,0xffffffff
c0001f98:	89 c8                	mov    eax,ecx
c0001f9a:	c3                   	ret    
c0001f9b:	31 c9                	xor    ecx,ecx
c0001f9d:	eb 24                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001f9f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001fa2:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001fa5:	80 f9 09             	cmp    cl,0x9
c0001fa8:	77 16                	ja     c0001fc0 <get_ldnumber+0x45>
c0001faa:	83 c2 02             	add    edx,0x2
c0001fad:	83 c9 ff             	or     ecx,0xffffffff
c0001fb0:	39 d3                	cmp    ebx,edx
c0001fb2:	75 0f                	jne    c0001fc3 <get_ldnumber+0x48>
c0001fb4:	89 f2                	mov    edx,esi
c0001fb6:	89 18                	mov    DWORD PTR [eax],ebx
c0001fb8:	0f be ca             	movsx  ecx,dl
c0001fbb:	83 e9 30             	sub    ecx,0x30
c0001fbe:	eb 03                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001fc0:	83 c9 ff             	or     ecx,0xffffffff
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	5b                   	pop    ebx
c0001fc6:	5e                   	pop    esi
c0001fc7:	c3                   	ret    

c0001fc8 <validate>:
c0001fc8:	56                   	push   esi
c0001fc9:	53                   	push   ebx
c0001fca:	89 d6                	mov    esi,edx
c0001fcc:	51                   	push   ecx
c0001fcd:	85 c0                	test   eax,eax
c0001fcf:	75 09                	jne    c0001fda <validate+0x12>
c0001fd1:	b8 09 00 00 00       	mov    eax,0x9
c0001fd6:	31 c9                	xor    ecx,ecx
c0001fd8:	eb 2f                	jmp    c0002009 <validate+0x41>
c0001fda:	89 c3                	mov    ebx,eax
c0001fdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0001fde:	85 c0                	test   eax,eax
c0001fe0:	74 ef                	je     c0001fd1 <validate+0x9>
c0001fe2:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001fe5:	74 ea                	je     c0001fd1 <validate+0x9>
c0001fe7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0001feb:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0001fef:	75 e0                	jne    c0001fd1 <validate+0x9>
c0001ff1:	83 ec 0c             	sub    esp,0xc
c0001ff4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001ff8:	50                   	push   eax
c0001ff9:	e8 fd fa ff ff       	call   c0001afb <disk_status>
c0001ffe:	83 c4 10             	add    esp,0x10
c0002001:	a8 01                	test   al,0x1
c0002003:	75 cc                	jne    c0001fd1 <validate+0x9>
c0002005:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002007:	31 c0                	xor    eax,eax
c0002009:	89 0e                	mov    DWORD PTR [esi],ecx
c000200b:	5a                   	pop    edx
c000200c:	5b                   	pop    ebx
c000200d:	5e                   	pop    esi
c000200e:	c3                   	ret    

c000200f <sync_window>:
c000200f:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002013:	74 58                	je     c000206d <sync_window+0x5e>
c0002015:	56                   	push   esi
c0002016:	53                   	push   ebx
c0002017:	8d 70 34             	lea    esi,[eax+0x34]
c000201a:	51                   	push   ecx
c000201b:	89 c3                	mov    ebx,eax
c000201d:	6a 01                	push   0x1
c000201f:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002022:	56                   	push   esi
c0002023:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002027:	50                   	push   eax
c0002028:	e8 ea fa ff ff       	call   c0001b17 <disk_write>
c000202d:	83 c4 10             	add    esp,0x10
c0002030:	ba 01 00 00 00       	mov    edx,0x1
c0002035:	85 c0                	test   eax,eax
c0002037:	75 2e                	jne    c0002067 <sync_window+0x58>
c0002039:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000203c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000203f:	89 c1                	mov    ecx,eax
c0002041:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002045:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002048:	39 d1                	cmp    ecx,edx
c000204a:	73 19                	jae    c0002065 <sync_window+0x56>
c000204c:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002050:	75 13                	jne    c0002065 <sync_window+0x56>
c0002052:	6a 01                	push   0x1
c0002054:	01 d0                	add    eax,edx
c0002056:	50                   	push   eax
c0002057:	56                   	push   esi
c0002058:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000205c:	50                   	push   eax
c000205d:	e8 b5 fa ff ff       	call   c0001b17 <disk_write>
c0002062:	83 c4 10             	add    esp,0x10
c0002065:	31 d2                	xor    edx,edx
c0002067:	89 d0                	mov    eax,edx
c0002069:	5a                   	pop    edx
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    
c000206d:	31 d2                	xor    edx,edx
c000206f:	89 d0                	mov    eax,edx
c0002071:	c3                   	ret    

c0002072 <move_window>:
c0002072:	57                   	push   edi
c0002073:	56                   	push   esi
c0002074:	31 f6                	xor    esi,esi
c0002076:	53                   	push   ebx
c0002077:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000207a:	74 32                	je     c00020ae <move_window+0x3c>
c000207c:	89 c3                	mov    ebx,eax
c000207e:	89 d7                	mov    edi,edx
c0002080:	e8 8a ff ff ff       	call   c000200f <sync_window>
c0002085:	89 c6                	mov    esi,eax
c0002087:	85 c0                	test   eax,eax
c0002089:	75 23                	jne    c00020ae <move_window+0x3c>
c000208b:	6a 01                	push   0x1
c000208d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002090:	57                   	push   edi
c0002091:	50                   	push   eax
c0002092:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002096:	50                   	push   eax
c0002097:	e8 65 fa ff ff       	call   c0001b01 <disk_read>
c000209c:	83 c4 10             	add    esp,0x10
c000209f:	85 c0                	test   eax,eax
c00020a1:	74 08                	je     c00020ab <move_window+0x39>
c00020a3:	be 01 00 00 00       	mov    esi,0x1
c00020a8:	83 cf ff             	or     edi,0xffffffff
c00020ab:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00020ae:	89 f0                	mov    eax,esi
c00020b0:	5b                   	pop    ebx
c00020b1:	5e                   	pop    esi
c00020b2:	5f                   	pop    edi
c00020b3:	c3                   	ret    

c00020b4 <check_fs>:
c00020b4:	53                   	push   ebx
c00020b5:	89 c3                	mov    ebx,eax
c00020b7:	83 ec 08             	sub    esp,0x8
c00020ba:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00020be:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00020c5:	e8 a8 ff ff ff       	call   c0002072 <move_window>
c00020ca:	ba 04 00 00 00       	mov    edx,0x4
c00020cf:	85 c0                	test   eax,eax
c00020d1:	75 68                	jne    c000213b <check_fs+0x87>
c00020d3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00020d9:	e8 6e fa ff ff       	call   c0001b4c <ld_word>
c00020de:	ba 03 00 00 00       	mov    edx,0x3
c00020e3:	66 3d 55 aa          	cmp    ax,0xaa55
c00020e7:	75 52                	jne    c000213b <check_fs+0x87>
c00020e9:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00020ec:	8d 50 18             	lea    edx,[eax+0x18]
c00020ef:	80 fa 01             	cmp    dl,0x1
c00020f2:	76 09                	jbe    c00020fd <check_fs+0x49>
c00020f4:	ba 02 00 00 00       	mov    edx,0x2
c00020f9:	3c eb                	cmp    al,0xeb
c00020fb:	75 3e                	jne    c000213b <check_fs+0x87>
c00020fd:	ba 74 e6 01 c0       	mov    edx,0xc001e674
c0002102:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002105:	b9 03 00 00 00       	mov    ecx,0x3
c000210a:	e8 89 fa ff ff       	call   c0001b98 <mem_cmp>
c000210f:	31 d2                	xor    edx,edx
c0002111:	85 c0                	test   eax,eax
c0002113:	74 26                	je     c000213b <check_fs+0x87>
c0002115:	ba dc c5 01 c0       	mov    edx,0xc001c5dc
c000211a:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002120:	b9 05 00 00 00       	mov    ecx,0x5
c0002125:	e8 6e fa ff ff       	call   c0001b98 <mem_cmp>
c000212a:	31 d2                	xor    edx,edx
c000212c:	85 c0                	test   eax,eax
c000212e:	74 0b                	je     c000213b <check_fs+0x87>
c0002130:	31 d2                	xor    edx,edx
c0002132:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002136:	0f 95 c2             	setne  dl
c0002139:	01 d2                	add    edx,edx
c000213b:	89 d0                	mov    eax,edx
c000213d:	83 c4 08             	add    esp,0x8
c0002140:	5b                   	pop    ebx
c0002141:	c3                   	ret    

c0002142 <find_volume>:
c0002142:	55                   	push   ebp
c0002143:	57                   	push   edi
c0002144:	56                   	push   esi
c0002145:	89 c6                	mov    esi,eax
c0002147:	53                   	push   ebx
c0002148:	89 d3                	mov    ebx,edx
c000214a:	83 ec 2c             	sub    esp,0x2c
c000214d:	31 d2                	xor    edx,edx
c000214f:	e8 60 ff ff ff       	call   c00020b4 <check_fs>
c0002154:	83 f8 02             	cmp    eax,0x2
c0002157:	74 06                	je     c000215f <find_volume+0x1d>
c0002159:	77 62                	ja     c00021bd <find_volume+0x7b>
c000215b:	85 db                	test   ebx,ebx
c000215d:	74 5e                	je     c00021bd <find_volume+0x7b>
c000215f:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002163:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002169:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000216f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002173:	89 cf                	mov    edi,ecx
c0002175:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002179:	89 e8                	mov    eax,ebp
c000217b:	83 c5 10             	add    ebp,0x10
c000217e:	e8 d6 f9 ff ff       	call   c0001b59 <ld_dword>
c0002183:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002187:	89 01                	mov    DWORD PTR [ecx],eax
c0002189:	83 c1 04             	add    ecx,0x4
c000218c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002190:	75 e3                	jne    c0002175 <find_volume+0x33>
c0002192:	31 ed                	xor    ebp,ebp
c0002194:	85 db                	test   ebx,ebx
c0002196:	74 03                	je     c000219b <find_volume+0x59>
c0002198:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000219b:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000219e:	b8 03 00 00 00       	mov    eax,0x3
c00021a3:	85 d2                	test   edx,edx
c00021a5:	74 0c                	je     c00021b3 <find_volume+0x71>
c00021a7:	89 f0                	mov    eax,esi
c00021a9:	e8 06 ff ff ff       	call   c00020b4 <check_fs>
c00021ae:	83 f8 01             	cmp    eax,0x1
c00021b1:	76 0a                	jbe    c00021bd <find_volume+0x7b>
c00021b3:	85 db                	test   ebx,ebx
c00021b5:	75 06                	jne    c00021bd <find_volume+0x7b>
c00021b7:	45                   	inc    ebp
c00021b8:	83 fd 03             	cmp    ebp,0x3
c00021bb:	76 de                	jbe    c000219b <find_volume+0x59>
c00021bd:	83 c4 2c             	add    esp,0x2c
c00021c0:	5b                   	pop    ebx
c00021c1:	5e                   	pop    esi
c00021c2:	5f                   	pop    edi
c00021c3:	5d                   	pop    ebp
c00021c4:	c3                   	ret    

c00021c5 <mount_volume>:
c00021c5:	55                   	push   ebp
c00021c6:	89 d5                	mov    ebp,edx
c00021c8:	57                   	push   edi
c00021c9:	89 cf                	mov    edi,ecx
c00021cb:	56                   	push   esi
c00021cc:	53                   	push   ebx
c00021cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00021d2:	83 ec 2c             	sub    esp,0x2c
c00021d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00021db:	e8 9b fd ff ff       	call   c0001f7b <get_ldnumber>
c00021e0:	85 c0                	test   eax,eax
c00021e2:	0f 88 d6 02 00 00    	js     c00024be <mount_volume+0x2f9>
c00021e8:	8b 34 85 a0 f5 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0a60]
c00021ef:	89 c2                	mov    edx,eax
c00021f1:	bb 0c 00 00 00       	mov    ebx,0xc
c00021f6:	85 f6                	test   esi,esi
c00021f8:	0f 84 c0 02 00 00    	je     c00024be <mount_volume+0x2f9>
c00021fe:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002201:	83 e7 fe             	and    edi,0xfffffffe
c0002204:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002207:	74 3a                	je     c0002243 <mount_volume+0x7e>
c0002209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000220d:	83 ec 0c             	sub    esp,0xc
c0002210:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002214:	50                   	push   eax
c0002215:	e8 e1 f8 ff ff       	call   c0001afb <disk_status>
c000221a:	83 c4 10             	add    esp,0x10
c000221d:	a8 01                	test   al,0x1
c000221f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002223:	75 1e                	jne    c0002243 <mount_volume+0x7e>
c0002225:	31 db                	xor    ebx,ebx
c0002227:	89 f9                	mov    ecx,edi
c0002229:	84 c9                	test   cl,cl
c000222b:	0f 84 8d 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002231:	a8 04                	test   al,0x4
c0002233:	0f 84 85 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002239:	bb 0a 00 00 00       	mov    ebx,0xa
c000223e:	e9 7b 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002243:	83 ec 0c             	sub    esp,0xc
c0002246:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002249:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000224c:	0f b6 c2             	movzx  eax,dl
c000224f:	bb 03 00 00 00       	mov    ebx,0x3
c0002254:	50                   	push   eax
c0002255:	e8 a4 f8 ff ff       	call   c0001afe <disk_initialize>
c000225a:	83 c4 10             	add    esp,0x10
c000225d:	a8 01                	test   al,0x1
c000225f:	0f 85 59 02 00 00    	jne    c00024be <mount_volume+0x2f9>
c0002265:	89 f9                	mov    ecx,edi
c0002267:	84 c9                	test   cl,cl
c0002269:	74 04                	je     c000226f <mount_volume+0xaa>
c000226b:	a8 04                	test   al,0x4
c000226d:	75 ca                	jne    c0002239 <mount_volume+0x74>
c000226f:	31 d2                	xor    edx,edx
c0002271:	89 f0                	mov    eax,esi
c0002273:	bb 01 00 00 00       	mov    ebx,0x1
c0002278:	e8 c5 fe ff ff       	call   c0002142 <find_volume>
c000227d:	83 f8 04             	cmp    eax,0x4
c0002280:	0f 84 38 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002286:	83 f8 01             	cmp    eax,0x1
c0002289:	76 0a                	jbe    c0002295 <mount_volume+0xd0>
c000228b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002290:	e9 29 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002295:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002298:	e8 af f8 ff ff       	call   c0001b4c <ld_word>
c000229d:	66 3d 00 02          	cmp    ax,0x200
c00022a1:	75 e8                	jne    c000228b <mount_volume+0xc6>
c00022a3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00022a6:	e8 a1 f8 ff ff       	call   c0001b4c <ld_word>
c00022ab:	0f b7 c0             	movzx  eax,ax
c00022ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022b2:	85 c0                	test   eax,eax
c00022b4:	75 0c                	jne    c00022c2 <mount_volume+0xfd>
c00022b6:	8d 46 58             	lea    eax,[esi+0x58]
c00022b9:	e8 9b f8 ff ff       	call   c0001b59 <ld_dword>
c00022be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022c2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00022c5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00022c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00022cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00022d0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00022d3:	89 e8                	mov    eax,ebp
c00022d5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00022d8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00022db:	3c 01                	cmp    al,0x1
c00022dd:	77 ac                	ja     c000228b <mount_volume+0xc6>
c00022df:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00022e3:	89 c3                	mov    ebx,eax
c00022e5:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00022e9:	66 85 c0             	test   ax,ax
c00022ec:	74 9d                	je     c000228b <mount_volume+0xc6>
c00022ee:	8d 40 ff             	lea    eax,[eax-0x1]
c00022f1:	85 d8                	test   eax,ebx
c00022f3:	75 96                	jne    c000228b <mount_volume+0xc6>
c00022f5:	8d 46 45             	lea    eax,[esi+0x45]
c00022f8:	e8 4f f8 ff ff       	call   c0001b4c <ld_word>
c00022fd:	89 c7                	mov    edi,eax
c00022ff:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002303:	a8 0f                	test   al,0xf
c0002305:	75 84                	jne    c000228b <mount_volume+0xc6>
c0002307:	8d 46 47             	lea    eax,[esi+0x47]
c000230a:	e8 3d f8 ff ff       	call   c0001b4c <ld_word>
c000230f:	0f b7 d0             	movzx  edx,ax
c0002312:	85 d2                	test   edx,edx
c0002314:	75 0a                	jne    c0002320 <mount_volume+0x15b>
c0002316:	8d 46 54             	lea    eax,[esi+0x54]
c0002319:	e8 3b f8 ff ff       	call   c0001b59 <ld_dword>
c000231e:	89 c2                	mov    edx,eax
c0002320:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002324:	8d 46 42             	lea    eax,[esi+0x42]
c0002327:	e8 20 f8 ff ff       	call   c0001b4c <ld_word>
c000232c:	66 85 c0             	test   ax,ax
c000232f:	0f 84 56 ff ff ff    	je     c000228b <mount_volume+0xc6>
c0002335:	89 e9                	mov    ecx,ebp
c0002337:	0f b7 c0             	movzx  eax,ax
c000233a:	0f b6 e9             	movzx  ebp,cl
c000233d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002341:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002345:	89 f8                	mov    eax,edi
c0002347:	0f af cd             	imul   ecx,ebp
c000234a:	66 c1 e8 04          	shr    ax,0x4
c000234e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002352:	0f b7 c0             	movzx  eax,ax
c0002355:	01 c8                	add    eax,ecx
c0002357:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000235b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000235f:	39 c2                	cmp    edx,eax
c0002361:	0f 82 24 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002367:	29 c2                	sub    edx,eax
c0002369:	89 d5                	mov    ebp,edx
c000236b:	89 d0                	mov    eax,edx
c000236d:	31 d2                	xor    edx,edx
c000236f:	f7 f3                	div    ebx
c0002371:	39 dd                	cmp    ebp,ebx
c0002373:	0f 82 12 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002379:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000237e:	0f 87 07 ff ff ff    	ja     c000228b <mount_volume+0xc6>
c0002384:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002389:	0f 86 1f 01 00 00    	jbe    c00024ae <mount_volume+0x2e9>
c000238f:	bb 03 00 00 00       	mov    ebx,0x3
c0002394:	8d 68 02             	lea    ebp,[eax+0x2]
c0002397:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000239b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000239f:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00023a3:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00023a6:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00023a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00023ad:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00023b0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00023b4:	83 fb 03             	cmp    ebx,0x3
c00023b7:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00023ba:	75 21                	jne    c00023dd <mount_volume+0x218>
c00023bc:	8d 46 5e             	lea    eax,[esi+0x5e]
c00023bf:	e8 88 f7 ff ff       	call   c0001b4c <ld_word>
c00023c4:	66 09 c7             	or     di,ax
c00023c7:	0f 85 be fe ff ff    	jne    c000228b <mount_volume+0xc6>
c00023cd:	8d 46 60             	lea    eax,[esi+0x60]
c00023d0:	c1 e5 02             	shl    ebp,0x2
c00023d3:	e8 81 f7 ff ff       	call   c0001b59 <ld_dword>
c00023d8:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023db:	eb 22                	jmp    c00023ff <mount_volume+0x23a>
c00023dd:	66 85 ff             	test   di,di
c00023e0:	0f 84 a5 fe ff ff    	je     c000228b <mount_volume+0xc6>
c00023e6:	01 c8                	add    eax,ecx
c00023e8:	83 fb 02             	cmp    ebx,0x2
c00023eb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023ee:	75 04                	jne    c00023f4 <mount_volume+0x22f>
c00023f0:	01 ed                	add    ebp,ebp
c00023f2:	eb 0b                	jmp    c00023ff <mount_volume+0x23a>
c00023f4:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00023f8:	83 e5 01             	and    ebp,0x1
c00023fb:	d1 e8                	shr    eax,1
c00023fd:	01 c5                	add    ebp,eax
c00023ff:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002405:	c1 ed 09             	shr    ebp,0x9
c0002408:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000240c:	0f 87 79 fe ff ff    	ja     c000228b <mount_volume+0xc6>
c0002412:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002419:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002420:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002424:	83 fb 03             	cmp    ebx,0x3
c0002427:	75 6e                	jne    c0002497 <mount_volume+0x2d2>
c0002429:	8d 46 64             	lea    eax,[esi+0x64]
c000242c:	e8 1b f7 ff ff       	call   c0001b4c <ld_word>
c0002431:	66 48                	dec    ax
c0002433:	75 62                	jne    c0002497 <mount_volume+0x2d2>
c0002435:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002439:	89 f0                	mov    eax,esi
c000243b:	42                   	inc    edx
c000243c:	e8 31 fc ff ff       	call   c0002072 <move_window>
c0002441:	85 c0                	test   eax,eax
c0002443:	75 52                	jne    c0002497 <mount_volume+0x2d2>
c0002445:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002449:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000244f:	e8 f8 f6 ff ff       	call   c0001b4c <ld_word>
c0002454:	66 3d 55 aa          	cmp    ax,0xaa55
c0002458:	75 3d                	jne    c0002497 <mount_volume+0x2d2>
c000245a:	8d 46 34             	lea    eax,[esi+0x34]
c000245d:	e8 f7 f6 ff ff       	call   c0001b59 <ld_dword>
c0002462:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002467:	75 2e                	jne    c0002497 <mount_volume+0x2d2>
c0002469:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000246f:	e8 e5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002474:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002479:	75 1c                	jne    c0002497 <mount_volume+0x2d2>
c000247b:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002481:	e8 d3 f6 ff ff       	call   c0001b59 <ld_dword>
c0002486:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002489:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000248f:	e8 c5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002494:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002497:	66 a1 80 f5 01 c0    	mov    ax,ds:0xc001f580
c000249d:	88 1e                	mov    BYTE PTR [esi],bl
c000249f:	40                   	inc    eax
c00024a0:	31 db                	xor    ebx,ebx
c00024a2:	66 a3 80 f5 01 c0    	mov    ds:0xc001f580,ax
c00024a8:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00024ac:	eb 10                	jmp    c00024be <mount_volume+0x2f9>
c00024ae:	31 db                	xor    ebx,ebx
c00024b0:	3d f5 0f 00 00       	cmp    eax,0xff5
c00024b5:	0f 97 c3             	seta   bl
c00024b8:	43                   	inc    ebx
c00024b9:	e9 d6 fe ff ff       	jmp    c0002394 <mount_volume+0x1cf>
c00024be:	83 c4 2c             	add    esp,0x2c
c00024c1:	89 d8                	mov    eax,ebx
c00024c3:	5b                   	pop    ebx
c00024c4:	5e                   	pop    esi
c00024c5:	5f                   	pop    edi
c00024c6:	5d                   	pop    ebp
c00024c7:	c3                   	ret    

c00024c8 <put_fat>:
c00024c8:	55                   	push   ebp
c00024c9:	bd 02 00 00 00       	mov    ebp,0x2
c00024ce:	57                   	push   edi
c00024cf:	56                   	push   esi
c00024d0:	53                   	push   ebx
c00024d1:	83 ec 1c             	sub    esp,0x1c
c00024d4:	83 fa 01             	cmp    edx,0x1
c00024d7:	0f 86 31 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024dd:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00024e0:	0f 86 28 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024e6:	89 c6                	mov    esi,eax
c00024e8:	89 cf                	mov    edi,ecx
c00024ea:	8a 00                	mov    al,BYTE PTR [eax]
c00024ec:	89 d3                	mov    ebx,edx
c00024ee:	3c 02                	cmp    al,0x2
c00024f0:	0f 84 ac 00 00 00    	je     c00025a2 <put_fat+0xda>
c00024f6:	3c 03                	cmp    al,0x3
c00024f8:	0f 84 d1 00 00 00    	je     c00025cf <put_fat+0x107>
c00024fe:	fe c8                	dec    al
c0002500:	0f 85 08 01 00 00    	jne    c000260e <put_fat+0x146>
c0002506:	89 d1                	mov    ecx,edx
c0002508:	89 f0                	mov    eax,esi
c000250a:	d1 e9                	shr    ecx,1
c000250c:	01 d1                	add    ecx,edx
c000250e:	89 ca                	mov    edx,ecx
c0002510:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002514:	c1 ea 09             	shr    edx,0x9
c0002517:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000251a:	e8 53 fb ff ff       	call   c0002072 <move_window>
c000251f:	89 c5                	mov    ebp,eax
c0002521:	85 c0                	test   eax,eax
c0002523:	0f 85 e5 00 00 00    	jne    c000260e <put_fat+0x146>
c0002529:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000252d:	8d 46 34             	lea    eax,[esi+0x34]
c0002530:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002534:	8d 41 01             	lea    eax,[ecx+0x1]
c0002537:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000253d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002541:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002545:	89 f8                	mov    eax,edi
c0002547:	83 e3 01             	and    ebx,0x1
c000254a:	74 0c                	je     c0002558 <put_fat+0x90>
c000254c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000254e:	89 f8                	mov    eax,edi
c0002550:	83 e2 0f             	and    edx,0xf
c0002553:	c1 e0 04             	shl    eax,0x4
c0002556:	09 d0                	or     eax,edx
c0002558:	88 01                	mov    BYTE PTR [ecx],al
c000255a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000255e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002562:	c1 ea 09             	shr    edx,0x9
c0002565:	89 f0                	mov    eax,esi
c0002567:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000256a:	e8 03 fb ff ff       	call   c0002072 <move_window>
c000256f:	89 c5                	mov    ebp,eax
c0002571:	85 c0                	test   eax,eax
c0002573:	0f 85 95 00 00 00    	jne    c000260e <put_fat+0x146>
c0002579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000257d:	25 ff 01 00 00       	and    eax,0x1ff
c0002582:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002586:	85 db                	test   ebx,ebx
c0002588:	74 07                	je     c0002591 <put_fat+0xc9>
c000258a:	c1 ef 04             	shr    edi,0x4
c000258d:	89 f9                	mov    ecx,edi
c000258f:	eb 0d                	jmp    c000259e <put_fat+0xd6>
c0002591:	8a 08                	mov    cl,BYTE PTR [eax]
c0002593:	c1 ef 08             	shr    edi,0x8
c0002596:	83 e1 f0             	and    ecx,0xfffffff0
c0002599:	83 e7 0f             	and    edi,0xf
c000259c:	09 f9                	or     ecx,edi
c000259e:	88 08                	mov    BYTE PTR [eax],cl
c00025a0:	eb 27                	jmp    c00025c9 <put_fat+0x101>
c00025a2:	c1 ea 08             	shr    edx,0x8
c00025a5:	89 f0                	mov    eax,esi
c00025a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025aa:	e8 c3 fa ff ff       	call   c0002072 <move_window>
c00025af:	89 c5                	mov    ebp,eax
c00025b1:	85 c0                	test   eax,eax
c00025b3:	75 59                	jne    c000260e <put_fat+0x146>
c00025b5:	01 db                	add    ebx,ebx
c00025b7:	0f b7 d7             	movzx  edx,di
c00025ba:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00025c0:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00025c4:	e8 a8 f5 ff ff       	call   c0001b71 <st_word>
c00025c9:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00025cd:	eb 3f                	jmp    c000260e <put_fat+0x146>
c00025cf:	c1 ea 07             	shr    edx,0x7
c00025d2:	89 f0                	mov    eax,esi
c00025d4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025d7:	e8 96 fa ff ff       	call   c0002072 <move_window>
c00025dc:	89 c5                	mov    ebp,eax
c00025de:	85 c0                	test   eax,eax
c00025e0:	75 2c                	jne    c000260e <put_fat+0x146>
c00025e2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00025e8:	c1 e3 02             	shl    ebx,0x2
c00025eb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00025f1:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00025f5:	89 d8                	mov    eax,ebx
c00025f7:	e8 5d f5 ff ff       	call   c0001b59 <ld_dword>
c00025fc:	25 00 00 00 f0       	and    eax,0xf0000000
c0002601:	09 f8                	or     eax,edi
c0002603:	89 c2                	mov    edx,eax
c0002605:	89 d8                	mov    eax,ebx
c0002607:	e8 69 f5 ff ff       	call   c0001b75 <st_dword>
c000260c:	eb bb                	jmp    c00025c9 <put_fat+0x101>
c000260e:	83 c4 1c             	add    esp,0x1c
c0002611:	89 e8                	mov    eax,ebp
c0002613:	5b                   	pop    ebx
c0002614:	5e                   	pop    esi
c0002615:	5f                   	pop    edi
c0002616:	5d                   	pop    ebp
c0002617:	c3                   	ret    

c0002618 <dir_clear>:
c0002618:	55                   	push   ebp
c0002619:	57                   	push   edi
c000261a:	56                   	push   esi
c000261b:	89 c6                	mov    esi,eax
c000261d:	53                   	push   ebx
c000261e:	83 ec 1c             	sub    esp,0x1c
c0002621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002625:	e8 e5 f9 ff ff       	call   c000200f <sync_window>
c000262a:	85 c0                	test   eax,eax
c000262c:	0f 85 c0 00 00 00    	jne    c00026f2 <dir_clear+0xda>
c0002632:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002636:	89 f0                	mov    eax,esi
c0002638:	e8 55 f7 ff ff       	call   c0001d92 <clst2sect>
c000263d:	31 d2                	xor    edx,edx
c000263f:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002642:	89 c5                	mov    ebp,eax
c0002644:	b9 00 02 00 00       	mov    ecx,0x200
c0002649:	8d 46 34             	lea    eax,[esi+0x34]
c000264c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002650:	e8 38 f5 ff ff       	call   c0001b8d <mem_set>
c0002655:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002659:	c1 e3 09             	shl    ebx,0x9
c000265c:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002662:	76 1b                	jbe    c000267f <dir_clear+0x67>
c0002664:	bb 00 80 00 00       	mov    ebx,0x8000
c0002669:	eb 14                	jmp    c000267f <dir_clear+0x67>
c000266b:	83 ec 0c             	sub    esp,0xc
c000266e:	53                   	push   ebx
c000266f:	e8 24 32 00 00       	call   c0005898 <ff_memalloc>
c0002674:	83 c4 10             	add    esp,0x10
c0002677:	89 c7                	mov    edi,eax
c0002679:	85 c0                	test   eax,eax
c000267b:	75 7c                	jne    c00026f9 <dir_clear+0xe1>
c000267d:	d1 eb                	shr    ebx,1
c000267f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002685:	77 e4                	ja     c000266b <dir_clear+0x53>
c0002687:	31 db                	xor    ebx,ebx
c0002689:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000268d:	39 d8                	cmp    eax,ebx
c000268f:	76 53                	jbe    c00026e4 <dir_clear+0xcc>
c0002691:	6a 01                	push   0x1
c0002693:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002696:	50                   	push   eax
c0002697:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000269b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000269f:	50                   	push   eax
c00026a0:	e8 72 f4 ff ff       	call   c0001b17 <disk_write>
c00026a5:	83 c4 10             	add    esp,0x10
c00026a8:	85 c0                	test   eax,eax
c00026aa:	75 38                	jne    c00026e4 <dir_clear+0xcc>
c00026ac:	43                   	inc    ebx
c00026ad:	eb da                	jmp    c0002689 <dir_clear+0x71>
c00026af:	52                   	push   edx
c00026b0:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00026b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00026b7:	50                   	push   eax
c00026b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026bc:	57                   	push   edi
c00026bd:	50                   	push   eax
c00026be:	e8 54 f4 ff ff       	call   c0001b17 <disk_write>
c00026c3:	83 c4 10             	add    esp,0x10
c00026c6:	85 c0                	test   eax,eax
c00026c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026cc:	75 0a                	jne    c00026d8 <dir_clear+0xc0>
c00026ce:	01 d3                	add    ebx,edx
c00026d0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026d4:	39 d8                	cmp    eax,ebx
c00026d6:	77 d7                	ja     c00026af <dir_clear+0x97>
c00026d8:	83 ec 0c             	sub    esp,0xc
c00026db:	57                   	push   edi
c00026dc:	e8 cf 31 00 00       	call   c00058b0 <ff_memfree>
c00026e1:	83 c4 10             	add    esp,0x10
c00026e4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026e8:	39 d8                	cmp    eax,ebx
c00026ea:	0f 95 c0             	setne  al
c00026ed:	0f b6 c0             	movzx  eax,al
c00026f0:	eb 19                	jmp    c000270b <dir_clear+0xf3>
c00026f2:	b8 01 00 00 00       	mov    eax,0x1
c00026f7:	eb 12                	jmp    c000270b <dir_clear+0xf3>
c00026f9:	89 d9                	mov    ecx,ebx
c00026fb:	31 d2                	xor    edx,edx
c00026fd:	e8 8b f4 ff ff       	call   c0001b8d <mem_set>
c0002702:	89 da                	mov    edx,ebx
c0002704:	31 db                	xor    ebx,ebx
c0002706:	c1 ea 09             	shr    edx,0x9
c0002709:	eb c5                	jmp    c00026d0 <dir_clear+0xb8>
c000270b:	83 c4 1c             	add    esp,0x1c
c000270e:	5b                   	pop    ebx
c000270f:	5e                   	pop    esi
c0002710:	5f                   	pop    edi
c0002711:	5d                   	pop    ebp
c0002712:	c3                   	ret    

c0002713 <create_name>:
c0002713:	55                   	push   ebp
c0002714:	89 d5                	mov    ebp,edx
c0002716:	57                   	push   edi
c0002717:	89 c7                	mov    edi,eax
c0002719:	56                   	push   esi
c000271a:	31 f6                	xor    esi,esi
c000271c:	53                   	push   ebx
c000271d:	83 ec 3c             	sub    esp,0x3c
c0002720:	8b 02                	mov    eax,DWORD PTR [edx]
c0002722:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002726:	8b 07                	mov    eax,DWORD PTR [edi]
c0002728:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000272b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000272f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002733:	e8 9b f4 ff ff       	call   c0001bd3 <tchar2uni>
c0002738:	89 c3                	mov    ebx,eax
c000273a:	83 f8 ff             	cmp    eax,0xffffffff
c000273d:	75 0a                	jne    c0002749 <create_name+0x36>
c000273f:	b8 06 00 00 00       	mov    eax,0x6
c0002744:	e9 9e 02 00 00       	jmp    c00029e7 <create_name+0x2d4>
c0002749:	3d ff ff 00 00       	cmp    eax,0xffff
c000274e:	76 0c                	jbe    c000275c <create_name+0x49>
c0002750:	c1 e8 10             	shr    eax,0x10
c0002753:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002757:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000275b:	46                   	inc    esi
c000275c:	66 83 fb 1f          	cmp    bx,0x1f
c0002760:	76 4f                	jbe    c00027b1 <create_name+0x9e>
c0002762:	66 83 fb 5c          	cmp    bx,0x5c
c0002766:	74 35                	je     c000279d <create_name+0x8a>
c0002768:	66 83 fb 2f          	cmp    bx,0x2f
c000276c:	74 2f                	je     c000279d <create_name+0x8a>
c000276e:	66 83 fb 7f          	cmp    bx,0x7f
c0002772:	77 11                	ja     c0002785 <create_name+0x72>
c0002774:	0f b7 d3             	movzx  edx,bx
c0002777:	b8 e2 c5 01 c0       	mov    eax,0xc001c5e2
c000277c:	e8 3a f4 ff ff       	call   c0001bbb <chk_chr>
c0002781:	85 c0                	test   eax,eax
c0002783:	75 ba                	jne    c000273f <create_name+0x2c>
c0002785:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000278b:	77 b2                	ja     c000273f <create_name+0x2c>
c000278d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002791:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002795:	46                   	inc    esi
c0002796:	eb 97                	jmp    c000272f <create_name+0x1c>
c0002798:	40                   	inc    eax
c0002799:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000279d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027a1:	8a 10                	mov    dl,BYTE PTR [eax]
c00027a3:	80 fa 2f             	cmp    dl,0x2f
c00027a6:	74 f0                	je     c0002798 <create_name+0x85>
c00027a8:	80 fa 5c             	cmp    dl,0x5c
c00027ab:	74 eb                	je     c0002798 <create_name+0x85>
c00027ad:	31 db                	xor    ebx,ebx
c00027af:	eb 02                	jmp    c00027b3 <create_name+0xa0>
c00027b1:	b3 04                	mov    bl,0x4
c00027b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00027ba:	85 f6                	test   esi,esi
c00027bc:	74 18                	je     c00027d6 <create_name+0xc3>
c00027be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027c2:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00027c7:	66 83 f8 20          	cmp    ax,0x20
c00027cb:	74 06                	je     c00027d3 <create_name+0xc0>
c00027cd:	66 83 f8 2e          	cmp    ax,0x2e
c00027d1:	75 03                	jne    c00027d6 <create_name+0xc3>
c00027d3:	4e                   	dec    esi
c00027d4:	eb e4                	jmp    c00027ba <create_name+0xa7>
c00027d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027da:	31 ed                	xor    ebp,ebp
c00027dc:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00027e2:	85 f6                	test   esi,esi
c00027e4:	0f 84 55 ff ff ff    	je     c000273f <create_name+0x2c>
c00027ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027ee:	8d 55 01             	lea    edx,[ebp+0x1]
c00027f1:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00027f5:	66 83 f8 20          	cmp    ax,0x20
c00027f9:	75 04                	jne    c00027ff <create_name+0xec>
c00027fb:	89 d5                	mov    ebp,edx
c00027fd:	eb eb                	jmp    c00027ea <create_name+0xd7>
c00027ff:	85 ed                	test   ebp,ebp
c0002801:	75 06                	jne    c0002809 <create_name+0xf6>
c0002803:	66 83 f8 2e          	cmp    ax,0x2e
c0002807:	75 08                	jne    c0002811 <create_name+0xfe>
c0002809:	83 cb 03             	or     ebx,0x3
c000280c:	eb 03                	jmp    c0002811 <create_name+0xfe>
c000280e:	4e                   	dec    esi
c000280f:	74 0c                	je     c000281d <create_name+0x10a>
c0002811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002815:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c000281b:	75 f1                	jne    c000280e <create_name+0xfb>
c000281d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002822:	8d 47 20             	lea    eax,[edi+0x20]
c0002825:	ba 20 00 00 00       	mov    edx,0x20
c000282a:	e8 5e f3 ff ff       	call   c0001b8d <mem_set>
c000282f:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002837:	31 c9                	xor    ecx,ecx
c0002839:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000283e:	8d 45 01             	lea    eax,[ebp+0x1]
c0002841:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002849:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c000284d:	66 85 ed             	test   bp,bp
c0002850:	0f 84 30 01 00 00    	je     c0002986 <create_name+0x273>
c0002856:	66 83 fd 20          	cmp    bp,0x20
c000285a:	74 10                	je     c000286c <create_name+0x159>
c000285c:	66 83 fd 2e          	cmp    bp,0x2e
c0002860:	75 13                	jne    c0002875 <create_name+0x162>
c0002862:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002866:	0f 84 6b 01 00 00    	je     c00029d7 <create_name+0x2c4>
c000286c:	83 cb 03             	or     ebx,0x3
c000286f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002873:	eb c9                	jmp    c000283e <create_name+0x12b>
c0002875:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002879:	73 0b                	jae    c0002886 <create_name+0x173>
c000287b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c000287f:	75 47                	jne    c00028c8 <create_name+0x1b5>
c0002881:	e9 51 01 00 00       	jmp    c00029d7 <create_name+0x2c4>
c0002886:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c000288b:	75 10                	jne    c000289d <create_name+0x18a>
c000288d:	83 cb 03             	or     ebx,0x3
c0002890:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002898:	e9 e9 00 00 00       	jmp    c0002986 <create_name+0x273>
c000289d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028a1:	74 0d                	je     c00028b0 <create_name+0x19d>
c00028a3:	83 cb 03             	or     ebx,0x3
c00028a6:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028aa:	0f 87 d6 00 00 00    	ja     c0002986 <create_name+0x273>
c00028b0:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c00028b5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00028b9:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c00028c1:	b9 08 00 00 00       	mov    ecx,0x8
c00028c6:	eb a7                	jmp    c000286f <create_name+0x15c>
c00028c8:	66 83 fd 7f          	cmp    bp,0x7f
c00028cc:	76 68                	jbe    c0002936 <create_name+0x223>
c00028ce:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00028d2:	88 da                	mov    dl,bl
c00028d4:	83 ca 02             	or     edx,0x2
c00028d7:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c00028db:	50                   	push   eax
c00028dc:	50                   	push   eax
c00028dd:	68 b5 01 00 00       	push   0x1b5
c00028e2:	55                   	push   ebp
c00028e3:	e8 e0 2f 00 00       	call   c00058c8 <ff_uni2oem>
c00028e8:	83 c4 10             	add    esp,0x10
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	a8 80                	test   al,0x80
c00028ef:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00028f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00028f7:	74 0c                	je     c0002905 <create_name+0x1f2>
c00028f9:	83 e5 7f             	and    ebp,0x7f
c00028fc:	0f b6 ad a0 c6 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3960]
c0002903:	eb 2a                	jmp    c000292f <create_name+0x21c>
c0002905:	66 3d ff 00          	cmp    ax,0xff
c0002909:	76 24                	jbe    c000292f <create_name+0x21c>
c000290b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000290f:	48                   	dec    eax
c0002910:	39 c8                	cmp    eax,ecx
c0002912:	77 0c                	ja     c0002920 <create_name+0x20d>
c0002914:	83 cb 03             	or     ebx,0x3
c0002917:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000291b:	e9 4f ff ff ff       	jmp    c000286f <create_name+0x15c>
c0002920:	89 e8                	mov    eax,ebp
c0002922:	88 d3                	mov    bl,dl
c0002924:	66 c1 e8 08          	shr    ax,0x8
c0002928:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c000292c:	41                   	inc    ecx
c000292d:	eb 4b                	jmp    c000297a <create_name+0x267>
c000292f:	88 d3                	mov    bl,dl
c0002931:	66 85 ed             	test   bp,bp
c0002934:	74 19                	je     c000294f <create_name+0x23c>
c0002936:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000293a:	0f b7 d5             	movzx  edx,bp
c000293d:	b8 eb c5 01 c0       	mov    eax,0xc001c5eb
c0002942:	e8 74 f2 ff ff       	call   c0001bbb <chk_chr>
c0002947:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000294b:	85 c0                	test   eax,eax
c000294d:	74 0a                	je     c0002959 <create_name+0x246>
c000294f:	83 cb 03             	or     ebx,0x3
c0002952:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002957:	eb 21                	jmp    c000297a <create_name+0x267>
c0002959:	8d 45 bf             	lea    eax,[ebp-0x41]
c000295c:	66 83 f8 19          	cmp    ax,0x19
c0002960:	77 07                	ja     c0002969 <create_name+0x256>
c0002962:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002967:	eb 11                	jmp    c000297a <create_name+0x267>
c0002969:	8d 45 9f             	lea    eax,[ebp-0x61]
c000296c:	66 83 f8 19          	cmp    ax,0x19
c0002970:	77 08                	ja     c000297a <create_name+0x267>
c0002972:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002977:	83 ed 20             	sub    ebp,0x20
c000297a:	89 e8                	mov    eax,ebp
c000297c:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002980:	41                   	inc    ecx
c0002981:	e9 e9 fe ff ff       	jmp    c000286f <create_name+0x15c>
c0002986:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c000298a:	75 04                	jne    c0002990 <create_name+0x27d>
c000298c:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002990:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002995:	75 05                	jne    c000299c <create_name+0x289>
c0002997:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c000299c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029a0:	83 e0 0c             	and    eax,0xc
c00029a3:	3c 0c                	cmp    al,0xc
c00029a5:	74 0b                	je     c00029b2 <create_name+0x29f>
c00029a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029ab:	83 e0 03             	and    eax,0x3
c00029ae:	3c 03                	cmp    al,0x3
c00029b0:	75 05                	jne    c00029b7 <create_name+0x2a4>
c00029b2:	83 cb 02             	or     ebx,0x2
c00029b5:	eb 19                	jmp    c00029d0 <create_name+0x2bd>
c00029b7:	f6 c3 02             	test   bl,0x2
c00029ba:	75 14                	jne    c00029d0 <create_name+0x2bd>
c00029bc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00029c1:	74 03                	je     c00029c6 <create_name+0x2b3>
c00029c3:	83 cb 10             	or     ebx,0x10
c00029c6:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c00029cb:	74 03                	je     c00029d0 <create_name+0x2bd>
c00029cd:	83 cb 08             	or     ebx,0x8
c00029d0:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c00029d3:	31 c0                	xor    eax,eax
c00029d5:	eb 10                	jmp    c00029e7 <create_name+0x2d4>
c00029d7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c00029dc:	0f 85 ce fe ff ff    	jne    c00028b0 <create_name+0x19d>
c00029e2:	e9 a6 fe ff ff       	jmp    c000288d <create_name+0x17a>
c00029e7:	83 c4 3c             	add    esp,0x3c
c00029ea:	5b                   	pop    ebx
c00029eb:	5e                   	pop    esi
c00029ec:	5f                   	pop    edi
c00029ed:	5d                   	pop    ebp
c00029ee:	c3                   	ret    

c00029ef <cmp_lfn>:
c00029ef:	55                   	push   ebp
c00029f0:	57                   	push   edi
c00029f1:	89 d7                	mov    edi,edx
c00029f3:	56                   	push   esi
c00029f4:	53                   	push   ebx
c00029f5:	83 ec 1c             	sub    esp,0x1c
c00029f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029fc:	8d 42 1a             	lea    eax,[edx+0x1a]
c00029ff:	e8 48 f1 ff ff       	call   c0001b4c <ld_word>
c0002a04:	66 85 c0             	test   ax,ax
c0002a07:	74 07                	je     c0002a10 <cmp_lfn+0x21>
c0002a09:	31 c0                	xor    eax,eax
c0002a0b:	e9 9a 00 00 00       	jmp    c0002aaa <cmp_lfn+0xbb>
c0002a10:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002a12:	bd 01 00 00 00       	mov    ebp,0x1
c0002a17:	83 e3 3f             	and    ebx,0x3f
c0002a1a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002a22:	4b                   	dec    ebx
c0002a23:	6b db 0d             	imul   ebx,ebx,0xd
c0002a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a2a:	0f b6 80 20 c7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe38e0]
c0002a31:	01 f8                	add    eax,edi
c0002a33:	e8 14 f1 ff ff       	call   c0001b4c <ld_word>
c0002a38:	66 85 ed             	test   bp,bp
c0002a3b:	89 c6                	mov    esi,eax
c0002a3d:	74 3c                	je     c0002a7b <cmp_lfn+0x8c>
c0002a3f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002a45:	77 c2                	ja     c0002a09 <cmp_lfn+0x1a>
c0002a47:	83 ec 0c             	sub    esp,0xc
c0002a4a:	0f b7 c0             	movzx  eax,ax
c0002a4d:	50                   	push   eax
c0002a4e:	e8 8d 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a53:	89 c5                	mov    ebp,eax
c0002a55:	8d 43 01             	lea    eax,[ebx+0x1]
c0002a58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002a5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002a60:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002a64:	89 04 24             	mov    DWORD PTR [esp],eax
c0002a67:	e8 74 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a6c:	83 c4 10             	add    esp,0x10
c0002a6f:	39 c5                	cmp    ebp,eax
c0002a71:	75 96                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a73:	89 f5                	mov    ebp,esi
c0002a75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002a79:	eb 04                	jmp    c0002a7f <cmp_lfn+0x90>
c0002a7b:	66 46                	inc    si
c0002a7d:	75 8a                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a7f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002a83:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002a88:	75 9c                	jne    c0002a26 <cmp_lfn+0x37>
c0002a8a:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002a8d:	74 16                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a8f:	66 85 ed             	test   bp,bp
c0002a92:	74 11                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a98:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002a9d:	0f 94 c0             	sete   al
c0002aa0:	0f b6 c0             	movzx  eax,al
c0002aa3:	eb 05                	jmp    c0002aaa <cmp_lfn+0xbb>
c0002aa5:	b8 01 00 00 00       	mov    eax,0x1
c0002aaa:	83 c4 1c             	add    esp,0x1c
c0002aad:	5b                   	pop    ebx
c0002aae:	5e                   	pop    esi
c0002aaf:	5f                   	pop    edi
c0002ab0:	5d                   	pop    ebp
c0002ab1:	c3                   	ret    

c0002ab2 <sync_fs>:
c0002ab2:	56                   	push   esi
c0002ab3:	53                   	push   ebx
c0002ab4:	53                   	push   ebx
c0002ab5:	89 c3                	mov    ebx,eax
c0002ab7:	e8 53 f5 ff ff       	call   c000200f <sync_window>
c0002abc:	85 c0                	test   eax,eax
c0002abe:	0f 85 9a 00 00 00    	jne    c0002b5e <sync_fs+0xac>
c0002ac4:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002ac7:	75 7b                	jne    c0002b44 <sync_fs+0x92>
c0002ac9:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002acd:	75 75                	jne    c0002b44 <sync_fs+0x92>
c0002acf:	b9 00 02 00 00       	mov    ecx,0x200
c0002ad4:	8d 73 34             	lea    esi,[ebx+0x34]
c0002ad7:	31 d2                	xor    edx,edx
c0002ad9:	89 f0                	mov    eax,esi
c0002adb:	e8 ad f0 ff ff       	call   c0001b8d <mem_set>
c0002ae0:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ae6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002aeb:	e8 81 f0 ff ff       	call   c0001b71 <st_word>
c0002af0:	ba 52 52 61 41       	mov    edx,0x41615252
c0002af5:	89 f0                	mov    eax,esi
c0002af7:	e8 79 f0 ff ff       	call   c0001b75 <st_dword>
c0002afc:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002b02:	ba 72 72 41 61       	mov    edx,0x61417272
c0002b07:	e8 69 f0 ff ff       	call   c0001b75 <st_dword>
c0002b0c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002b0f:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002b15:	e8 5b f0 ff ff       	call   c0001b75 <st_dword>
c0002b1a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002b1d:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002b23:	e8 4d f0 ff ff       	call   c0001b75 <st_dword>
c0002b28:	6a 01                	push   0x1
c0002b2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002b2d:	40                   	inc    eax
c0002b2e:	50                   	push   eax
c0002b2f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002b32:	56                   	push   esi
c0002b33:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b37:	50                   	push   eax
c0002b38:	e8 da ef ff ff       	call   c0001b17 <disk_write>
c0002b3d:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002b41:	83 c4 10             	add    esp,0x10
c0002b44:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b48:	51                   	push   ecx
c0002b49:	6a 00                	push   0x0
c0002b4b:	6a 00                	push   0x0
c0002b4d:	50                   	push   eax
c0002b4e:	e8 da ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b53:	83 c4 10             	add    esp,0x10
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 95 c0             	setne  al
c0002b5b:	0f b6 c0             	movzx  eax,al
c0002b5e:	5a                   	pop    edx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	c3                   	ret    

c0002b62 <create_partition>:
c0002b62:	55                   	push   ebp
c0002b63:	0f b6 c0             	movzx  eax,al
c0002b66:	57                   	push   edi
c0002b67:	56                   	push   esi
c0002b68:	53                   	push   ebx
c0002b69:	83 ec 40             	sub    esp,0x40
c0002b6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002b74:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b78:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002b7c:	50                   	push   eax
c0002b7d:	6a 01                	push   0x1
c0002b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002b83:	e8 a5 ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b88:	83 c4 10             	add    esp,0x10
c0002b8b:	85 c0                	test   eax,eax
c0002b8d:	0f 85 69 01 00 00    	jne    c0002cfc <create_partition+0x19a>
c0002b93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b97:	b9 05 00 00 00       	mov    ecx,0x5
c0002b9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ba0:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bb0:	f7 f3                	div    ebx
c0002bb2:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002bb7:	76 0c                	jbe    c0002bc5 <create_partition+0x63>
c0002bb9:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002bbd:	49                   	dec    ecx
c0002bbe:	75 e5                	jne    c0002ba5 <create_partition+0x43>
c0002bc0:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002bc5:	b9 00 02 00 00       	mov    ecx,0x200
c0002bca:	31 d2                	xor    edx,edx
c0002bcc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bd0:	e8 b8 ef ff ff       	call   c0001b8d <mem_set>
c0002bd5:	b9 64 00 00 00       	mov    ecx,0x64
c0002bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bde:	31 d2                	xor    edx,edx
c0002be0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002be8:	f7 f1                	div    ecx
c0002bea:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002bef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002bf3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bf7:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002bfd:	85 c9                	test   ecx,ecx
c0002bff:	75 34                	jne    c0002c35 <create_partition+0xd3>
c0002c01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002c05:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002c0a:	05 fe 01 00 00       	add    eax,0x1fe
c0002c0f:	e8 5d ef ff ff       	call   c0001b71 <st_word>
c0002c14:	6a 01                	push   0x1
c0002c16:	6a 00                	push   0x0
c0002c18:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002c20:	e8 f2 ee ff ff       	call   c0001b17 <disk_write>
c0002c25:	83 c4 10             	add    esp,0x10
c0002c28:	85 c0                	test   eax,eax
c0002c2a:	0f 95 c0             	setne  al
c0002c2d:	0f b6 c0             	movzx  eax,al
c0002c30:	e9 cc 00 00 00       	jmp    c0002d01 <create_partition+0x19f>
c0002c35:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002c39:	76 c6                	jbe    c0002c01 <create_partition+0x9f>
c0002c3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002c3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002c43:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002c46:	83 fe 64             	cmp    esi,0x64
c0002c49:	77 0d                	ja     c0002c58 <create_partition+0xf6>
c0002c4b:	74 07                	je     c0002c54 <create_partition+0xf2>
c0002c4d:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002c52:	eb 04                	jmp    c0002c58 <create_partition+0xf6>
c0002c54:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c58:	31 c0                	xor    eax,eax
c0002c5a:	89 f2                	mov    edx,esi
c0002c5c:	01 ca                	add    edx,ecx
c0002c5e:	0f 92 c0             	setb   al
c0002c61:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002c65:	77 04                	ja     c0002c6b <create_partition+0x109>
c0002c67:	85 c0                	test   eax,eax
c0002c69:	74 08                	je     c0002c73 <create_partition+0x111>
c0002c6b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c6f:	29 ce                	sub    esi,ecx
c0002c71:	eb 04                	jmp    c0002c77 <create_partition+0x115>
c0002c73:	85 f6                	test   esi,esi
c0002c75:	74 8a                	je     c0002c01 <create_partition+0x9f>
c0002c77:	89 ca                	mov    edx,ecx
c0002c79:	89 d8                	mov    eax,ebx
c0002c7b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002c80:	e8 f0 ee ff ff       	call   c0001b75 <st_dword>
c0002c85:	8d 43 04             	lea    eax,[ebx+0x4]
c0002c88:	89 f2                	mov    edx,esi
c0002c8a:	83 c3 10             	add    ebx,0x10
c0002c8d:	e8 e3 ee ff ff       	call   c0001b75 <st_dword>
c0002c92:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002c97:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002c9b:	31 d2                	xor    edx,edx
c0002c9d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002ca0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002ca4:	89 c8                	mov    eax,ecx
c0002ca6:	01 f1                	add    ecx,esi
c0002ca8:	f7 f5                	div    ebp
c0002caa:	89 d5                	mov    ebp,edx
c0002cac:	31 d2                	xor    edx,edx
c0002cae:	45                   	inc    ebp
c0002caf:	f7 f7                	div    edi
c0002cb1:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002cb4:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002cb7:	89 c2                	mov    edx,eax
c0002cb9:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002cbc:	c1 ea 02             	shr    edx,0x2
c0002cbf:	83 e2 c0             	and    edx,0xffffffc0
c0002cc2:	09 ea                	or     edx,ebp
c0002cc4:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002cc9:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ccc:	31 d2                	xor    edx,edx
c0002cce:	f7 f5                	div    ebp
c0002cd0:	89 d6                	mov    esi,edx
c0002cd2:	31 d2                	xor    edx,edx
c0002cd4:	46                   	inc    esi
c0002cd5:	f7 f7                	div    edi
c0002cd7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002cda:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002cdd:	89 c7                	mov    edi,eax
c0002cdf:	c1 ef 02             	shr    edi,0x2
c0002ce2:	83 e7 c0             	and    edi,0xffffffc0
c0002ce5:	09 fe                	or     esi,edi
c0002ce7:	89 f2                	mov    edx,esi
c0002ce9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002cec:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002cf1:	0f 85 06 ff ff ff    	jne    c0002bfd <create_partition+0x9b>
c0002cf7:	e9 05 ff ff ff       	jmp    c0002c01 <create_partition+0x9f>
c0002cfc:	b8 01 00 00 00       	mov    eax,0x1
c0002d01:	83 c4 3c             	add    esp,0x3c
c0002d04:	5b                   	pop    ebx
c0002d05:	5e                   	pop    esi
c0002d06:	5f                   	pop    edi
c0002d07:	5d                   	pop    ebp
c0002d08:	c3                   	ret    

c0002d09 <get_fileinfo>:
c0002d09:	55                   	push   ebp
c0002d0a:	57                   	push   edi
c0002d0b:	56                   	push   esi
c0002d0c:	53                   	push   ebx
c0002d0d:	83 ec 1c             	sub    esp,0x1c
c0002d10:	8b 30                	mov    esi,DWORD PTR [eax]
c0002d12:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002d16:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002d1a:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002d1e:	0f 84 c1 01 00 00    	je     c0002ee5 <get_fileinfo+0x1dc>
c0002d24:	89 d3                	mov    ebx,edx
c0002d26:	89 c6                	mov    esi,eax
c0002d28:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002d2c:	74 6a                	je     c0002d98 <get_fileinfo+0x8f>
c0002d2e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002d36:	31 ed                	xor    ebp,ebp
c0002d38:	31 ff                	xor    edi,edi
c0002d3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d45:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002d49:	66 85 d2             	test   dx,dx
c0002d4c:	74 3e                	je     c0002d8c <get_fileinfo+0x83>
c0002d4e:	66 85 ed             	test   bp,bp
c0002d51:	75 0c                	jne    c0002d5f <get_fileinfo+0x56>
c0002d53:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002d59:	66 3d ff 07          	cmp    ax,0x7ff
c0002d5d:	76 22                	jbe    c0002d81 <get_fileinfo+0x78>
c0002d5f:	b9 ff 00 00 00       	mov    ecx,0xff
c0002d64:	89 e8                	mov    eax,ebp
c0002d66:	29 f9                	sub    ecx,edi
c0002d68:	c1 e0 10             	shl    eax,0x10
c0002d6b:	09 d0                	or     eax,edx
c0002d6d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002d71:	e8 23 ef ff ff       	call   c0001c99 <put_utf>
c0002d76:	84 c0                	test   al,al
c0002d78:	74 10                	je     c0002d8a <get_fileinfo+0x81>
c0002d7a:	0f b6 c0             	movzx  eax,al
c0002d7d:	31 d2                	xor    edx,edx
c0002d7f:	01 c7                	add    edi,eax
c0002d81:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002d86:	89 d5                	mov    ebp,edx
c0002d88:	eb b0                	jmp    c0002d3a <get_fileinfo+0x31>
c0002d8a:	31 ff                	xor    edi,edi
c0002d8c:	66 85 ed             	test   bp,bp
c0002d8f:	74 02                	je     c0002d93 <get_fileinfo+0x8a>
c0002d91:	31 ff                	xor    edi,edi
c0002d93:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002d98:	31 ff                	xor    edi,edi
c0002d9a:	31 c9                	xor    ecx,ecx
c0002d9c:	83 f9 0a             	cmp    ecx,0xa
c0002d9f:	0f 87 ad 00 00 00    	ja     c0002e52 <get_fileinfo+0x149>
c0002da5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002da8:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002dab:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002daf:	66 83 fa 20          	cmp    dx,0x20
c0002db3:	0f 84 92 00 00 00    	je     c0002e4b <get_fileinfo+0x142>
c0002db9:	66 83 fa 05          	cmp    dx,0x5
c0002dbd:	75 05                	jne    c0002dc4 <get_fileinfo+0xbb>
c0002dbf:	ba e5 00 00 00       	mov    edx,0xe5
c0002dc4:	83 ff 0b             	cmp    edi,0xb
c0002dc7:	77 0b                	ja     c0002dd4 <get_fileinfo+0xcb>
c0002dc9:	83 fd 09             	cmp    ebp,0x9
c0002dcc:	75 06                	jne    c0002dd4 <get_fileinfo+0xcb>
c0002dce:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002dd3:	47                   	inc    edi
c0002dd4:	0f b7 c2             	movzx  eax,dx
c0002dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ddb:	e8 ed ed ff ff       	call   c0001bcd <dbc_1st>
c0002de0:	85 c0                	test   eax,eax
c0002de2:	74 2f                	je     c0002e13 <get_fileinfo+0x10a>
c0002de4:	83 fd 08             	cmp    ebp,0x8
c0002de7:	74 2a                	je     c0002e13 <get_fileinfo+0x10a>
c0002de9:	83 fd 0b             	cmp    ebp,0xb
c0002dec:	74 25                	je     c0002e13 <get_fileinfo+0x10a>
c0002dee:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002df1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002df5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002df9:	e8 d2 ed ff ff       	call   c0001bd0 <dbc_2nd>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	74 11                	je     c0002e13 <get_fileinfo+0x10a>
c0002e02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002e0b:	c1 e2 08             	shl    edx,0x8
c0002e0e:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002e11:	09 c2                	or     edx,eax
c0002e13:	0f b7 d2             	movzx  edx,dx
c0002e16:	50                   	push   eax
c0002e17:	50                   	push   eax
c0002e18:	68 b5 01 00 00       	push   0x1b5
c0002e1d:	52                   	push   edx
c0002e1e:	e8 45 2b 00 00       	call   c0005968 <ff_oem2uni>
c0002e23:	83 c4 10             	add    esp,0x10
c0002e26:	66 85 c0             	test   ax,ax
c0002e29:	75 04                	jne    c0002e2f <get_fileinfo+0x126>
c0002e2b:	31 ff                	xor    edi,edi
c0002e2d:	eb 23                	jmp    c0002e52 <get_fileinfo+0x149>
c0002e2f:	b9 0c 00 00 00       	mov    ecx,0xc
c0002e34:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002e38:	29 f9                	sub    ecx,edi
c0002e3a:	0f b7 c0             	movzx  eax,ax
c0002e3d:	e8 57 ee ff ff       	call   c0001c99 <put_utf>
c0002e42:	84 c0                	test   al,al
c0002e44:	74 e5                	je     c0002e2b <get_fileinfo+0x122>
c0002e46:	0f b6 c0             	movzx  eax,al
c0002e49:	01 c7                	add    edi,eax
c0002e4b:	89 e9                	mov    ecx,ebp
c0002e4d:	e9 4a ff ff ff       	jmp    c0002d9c <get_fileinfo+0x93>
c0002e52:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0002e57:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0002e5b:	75 54                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002e5d:	85 ff                	test   edi,edi
c0002e5f:	75 0b                	jne    c0002e6c <get_fileinfo+0x163>
c0002e61:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0002e65:	ba 01 00 00 00       	mov    edx,0x1
c0002e6a:	eb 33                	jmp    c0002e9f <get_fileinfo+0x196>
c0002e6c:	b1 08                	mov    cl,0x8
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0002e76:	84 c0                	test   al,al
c0002e78:	74 25                	je     c0002e9f <get_fileinfo+0x196>
c0002e7a:	66 83 f8 2e          	cmp    ax,0x2e
c0002e7e:	74 16                	je     c0002e96 <get_fileinfo+0x18d>
c0002e80:	8d 78 bf             	lea    edi,[eax-0x41]
c0002e83:	66 83 ff 19          	cmp    di,0x19
c0002e87:	77 0f                	ja     c0002e98 <get_fileinfo+0x18f>
c0002e89:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0002e8c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0002e8f:	74 07                	je     c0002e98 <get_fileinfo+0x18f>
c0002e91:	83 c0 20             	add    eax,0x20
c0002e94:	eb 02                	jmp    c0002e98 <get_fileinfo+0x18f>
c0002e96:	b1 10                	mov    cl,0x10
c0002e98:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0002e9c:	42                   	inc    edx
c0002e9d:	eb d1                	jmp    c0002e70 <get_fileinfo+0x167>
c0002e9f:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0002ea4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ea7:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0002eab:	75 04                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002ead:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0002eb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eb4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0002eb7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0002eba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ebd:	83 c0 1c             	add    eax,0x1c
c0002ec0:	e8 94 ec ff ff       	call   c0001b59 <ld_dword>
c0002ec5:	89 03                	mov    DWORD PTR [ebx],eax
c0002ec7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eca:	83 c0 16             	add    eax,0x16
c0002ecd:	e8 7a ec ff ff       	call   c0001b4c <ld_word>
c0002ed2:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0002ed6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ed9:	83 c0 18             	add    eax,0x18
c0002edc:	e8 6b ec ff ff       	call   c0001b4c <ld_word>
c0002ee1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0002ee5:	83 c4 1c             	add    esp,0x1c
c0002ee8:	5b                   	pop    ebx
c0002ee9:	5e                   	pop    esi
c0002eea:	5f                   	pop    edi
c0002eeb:	5d                   	pop    ebp
c0002eec:	c3                   	ret    

c0002eed <ld_clust.isra.0>:
c0002eed:	56                   	push   esi
c0002eee:	89 c6                	mov    esi,eax
c0002ef0:	53                   	push   ebx
c0002ef1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ef4:	89 d3                	mov    ebx,edx
c0002ef6:	e8 51 ec ff ff       	call   c0001b4c <ld_word>
c0002efb:	0f b7 c8             	movzx  ecx,ax
c0002efe:	89 f0                	mov    eax,esi
c0002f00:	3c 03                	cmp    al,0x3
c0002f02:	75 0d                	jne    c0002f11 <ld_clust.isra.0+0x24>
c0002f04:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f07:	e8 40 ec ff ff       	call   c0001b4c <ld_word>
c0002f0c:	c1 e0 10             	shl    eax,0x10
c0002f0f:	09 c1                	or     ecx,eax
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	5b                   	pop    ebx
c0002f14:	5e                   	pop    esi
c0002f15:	c3                   	ret    

c0002f16 <st_clust.isra.1>:
c0002f16:	56                   	push   esi
c0002f17:	89 c6                	mov    esi,eax
c0002f19:	53                   	push   ebx
c0002f1a:	89 d3                	mov    ebx,edx
c0002f1c:	0f b7 d1             	movzx  edx,cx
c0002f1f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0002f22:	e8 4a ec ff ff       	call   c0001b71 <st_word>
c0002f27:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0002f2a:	75 0f                	jne    c0002f3b <st_clust.isra.1+0x25>
c0002f2c:	c1 e9 10             	shr    ecx,0x10
c0002f2f:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f32:	89 ca                	mov    edx,ecx
c0002f34:	5b                   	pop    ebx
c0002f35:	5e                   	pop    esi
c0002f36:	e9 36 ec ff ff       	jmp    c0001b71 <st_word>
c0002f3b:	5b                   	pop    ebx
c0002f3c:	5e                   	pop    esi
c0002f3d:	c3                   	ret    

c0002f3e <get_fat.isra.2>:
c0002f3e:	b9 01 00 00 00       	mov    ecx,0x1
c0002f43:	83 fa 01             	cmp    edx,0x1
c0002f46:	0f 86 f1 00 00 00    	jbe    c000303d <get_fat.isra.2+0xff>
c0002f4c:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0002f4f:	0f 83 e8 00 00 00    	jae    c000303d <get_fat.isra.2+0xff>
c0002f55:	55                   	push   ebp
c0002f56:	57                   	push   edi
c0002f57:	89 c7                	mov    edi,eax
c0002f59:	56                   	push   esi
c0002f5a:	89 d6                	mov    esi,edx
c0002f5c:	53                   	push   ebx
c0002f5d:	83 ec 0c             	sub    esp,0xc
c0002f60:	8a 00                	mov    al,BYTE PTR [eax]
c0002f62:	3c 02                	cmp    al,0x2
c0002f64:	74 78                	je     c0002fde <get_fat.isra.2+0xa0>
c0002f66:	3c 03                	cmp    al,0x3
c0002f68:	0f 84 97 00 00 00    	je     c0003005 <get_fat.isra.2+0xc7>
c0002f6e:	fe c8                	dec    al
c0002f70:	0f 85 bd 00 00 00    	jne    c0003033 <get_fat.isra.2+0xf5>
c0002f76:	89 d3                	mov    ebx,edx
c0002f78:	89 f8                	mov    eax,edi
c0002f7a:	d1 eb                	shr    ebx,1
c0002f7c:	01 d3                	add    ebx,edx
c0002f7e:	89 da                	mov    edx,ebx
c0002f80:	c1 ea 09             	shr    edx,0x9
c0002f83:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002f86:	e8 e7 f0 ff ff       	call   c0002072 <move_window>
c0002f8b:	85 c0                	test   eax,eax
c0002f8d:	74 08                	je     c0002f97 <get_fat.isra.2+0x59>
c0002f8f:	83 c9 ff             	or     ecx,0xffffffff
c0002f92:	e9 9c 00 00 00       	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002f97:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f9a:	89 f8                	mov    eax,edi
c0002f9c:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002fa2:	89 ea                	mov    edx,ebp
c0002fa4:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0002fa8:	c1 ea 09             	shr    edx,0x9
c0002fab:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fae:	e8 bf f0 ff ff       	call   c0002072 <move_window>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	75 d8                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fb7:	0f b6 c3             	movzx  eax,bl
c0002fba:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002fc0:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0002fc5:	c1 e3 08             	shl    ebx,0x8
c0002fc8:	09 c3                	or     ebx,eax
c0002fca:	89 d9                	mov    ecx,ebx
c0002fcc:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002fd2:	83 e6 01             	and    esi,0x1
c0002fd5:	74 5c                	je     c0003033 <get_fat.isra.2+0xf5>
c0002fd7:	89 d9                	mov    ecx,ebx
c0002fd9:	c1 e9 04             	shr    ecx,0x4
c0002fdc:	eb 55                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002fde:	c1 ea 08             	shr    edx,0x8
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fe6:	e8 87 f0 ff ff       	call   c0002072 <move_window>
c0002feb:	85 c0                	test   eax,eax
c0002fed:	75 a0                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fef:	01 f6                	add    esi,esi
c0002ff1:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ff7:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002ffb:	e8 4c eb ff ff       	call   c0001b4c <ld_word>
c0003000:	0f b7 c8             	movzx  ecx,ax
c0003003:	eb 2e                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0003005:	c1 ea 07             	shr    edx,0x7
c0003008:	89 f8                	mov    eax,edi
c000300a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000300d:	e8 60 f0 ff ff       	call   c0002072 <move_window>
c0003012:	85 c0                	test   eax,eax
c0003014:	0f 85 75 ff ff ff    	jne    c0002f8f <get_fat.isra.2+0x51>
c000301a:	c1 e6 02             	shl    esi,0x2
c000301d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003023:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003027:	e8 2d eb ff ff       	call   c0001b59 <ld_dword>
c000302c:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003031:	89 c1                	mov    ecx,eax
c0003033:	83 c4 0c             	add    esp,0xc
c0003036:	89 c8                	mov    eax,ecx
c0003038:	5b                   	pop    ebx
c0003039:	5e                   	pop    esi
c000303a:	5f                   	pop    edi
c000303b:	5d                   	pop    ebp
c000303c:	c3                   	ret    
c000303d:	89 c8                	mov    eax,ecx
c000303f:	c3                   	ret    

c0003040 <dir_sdi>:
c0003040:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003046:	0f 87 b6 00 00 00    	ja     c0003102 <dir_sdi+0xc2>
c000304c:	55                   	push   ebp
c000304d:	57                   	push   edi
c000304e:	56                   	push   esi
c000304f:	53                   	push   ebx
c0003050:	89 d3                	mov    ebx,edx
c0003052:	83 ec 1c             	sub    esp,0x1c
c0003055:	f6 c2 1f             	test   dl,0x1f
c0003058:	74 0a                	je     c0003064 <dir_sdi+0x24>
c000305a:	b8 02 00 00 00       	mov    eax,0x2
c000305f:	e9 96 00 00 00       	jmp    c00030fa <dir_sdi+0xba>
c0003064:	89 c6                	mov    esi,eax
c0003066:	8b 38                	mov    edi,DWORD PTR [eax]
c0003068:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000306b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000306e:	85 c9                	test   ecx,ecx
c0003070:	75 23                	jne    c0003095 <dir_sdi+0x55>
c0003072:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003075:	76 07                	jbe    c000307e <dir_sdi+0x3e>
c0003077:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000307a:	85 c0                	test   eax,eax
c000307c:	75 15                	jne    c0003093 <dir_sdi+0x53>
c000307e:	89 da                	mov    edx,ebx
c0003080:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003084:	c1 ea 05             	shr    edx,0x5
c0003087:	39 c2                	cmp    edx,eax
c0003089:	73 cf                	jae    c000305a <dir_sdi+0x1a>
c000308b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000308e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003091:	eb 3d                	jmp    c00030d0 <dir_sdi+0x90>
c0003093:	89 c1                	mov    ecx,eax
c0003095:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003099:	c1 e5 09             	shl    ebp,0x9
c000309c:	89 ca                	mov    edx,ecx
c000309e:	39 eb                	cmp    ebx,ebp
c00030a0:	72 1c                	jb     c00030be <dir_sdi+0x7e>
c00030a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00030a4:	e8 95 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c00030a9:	89 c1                	mov    ecx,eax
c00030ab:	83 f8 ff             	cmp    eax,0xffffffff
c00030ae:	74 45                	je     c00030f5 <dir_sdi+0xb5>
c00030b0:	83 f8 01             	cmp    eax,0x1
c00030b3:	76 a5                	jbe    c000305a <dir_sdi+0x1a>
c00030b5:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00030b8:	76 a0                	jbe    c000305a <dir_sdi+0x1a>
c00030ba:	29 eb                	sub    ebx,ebp
c00030bc:	eb de                	jmp    c000309c <dir_sdi+0x5c>
c00030be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	e8 c9 ec ff ff       	call   c0001d92 <clst2sect>
c00030c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00030cd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030d0:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00030d3:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00030d6:	85 d2                	test   edx,edx
c00030d8:	74 80                	je     c000305a <dir_sdi+0x1a>
c00030da:	89 d8                	mov    eax,ebx
c00030dc:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00030e2:	c1 e8 09             	shr    eax,0x9
c00030e5:	01 d0                	add    eax,edx
c00030e7:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030ea:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00030ee:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00030f1:	31 c0                	xor    eax,eax
c00030f3:	eb 05                	jmp    c00030fa <dir_sdi+0xba>
c00030f5:	b8 01 00 00 00       	mov    eax,0x1
c00030fa:	83 c4 1c             	add    esp,0x1c
c00030fd:	5b                   	pop    ebx
c00030fe:	5e                   	pop    esi
c00030ff:	5f                   	pop    edi
c0003100:	5d                   	pop    ebp
c0003101:	c3                   	ret    
c0003102:	b8 02 00 00 00       	mov    eax,0x2
c0003107:	c3                   	ret    

c0003108 <create_chain>:
c0003108:	55                   	push   ebp
c0003109:	89 c5                	mov    ebp,eax
c000310b:	57                   	push   edi
c000310c:	89 d7                	mov    edi,edx
c000310e:	56                   	push   esi
c000310f:	53                   	push   ebx
c0003110:	83 ec 1c             	sub    esp,0x1c
c0003113:	85 d2                	test   edx,edx
c0003115:	8b 30                	mov    esi,DWORD PTR [eax]
c0003117:	75 0e                	jne    c0003127 <create_chain+0x1f>
c0003119:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000311c:	85 c9                	test   ecx,ecx
c000311e:	74 34                	je     c0003154 <create_chain+0x4c>
c0003120:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003123:	77 34                	ja     c0003159 <create_chain+0x51>
c0003125:	eb 2d                	jmp    c0003154 <create_chain+0x4c>
c0003127:	89 f0                	mov    eax,esi
c0003129:	e8 10 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c000312e:	89 c3                	mov    ebx,eax
c0003130:	83 f8 01             	cmp    eax,0x1
c0003133:	77 0a                	ja     c000313f <create_chain+0x37>
c0003135:	bb 01 00 00 00       	mov    ebx,0x1
c000313a:	e9 f9 00 00 00       	jmp    c0003238 <create_chain+0x130>
c000313f:	83 f8 ff             	cmp    eax,0xffffffff
c0003142:	0f 84 ed 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003148:	89 f9                	mov    ecx,edi
c000314a:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000314d:	76 0a                	jbe    c0003159 <create_chain+0x51>
c000314f:	e9 e4 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003154:	b9 01 00 00 00       	mov    ecx,0x1
c0003159:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000315d:	75 07                	jne    c0003166 <create_chain+0x5e>
c000315f:	31 db                	xor    ebx,ebx
c0003161:	e9 d2 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003166:	39 f9                	cmp    ecx,edi
c0003168:	75 46                	jne    c00031b0 <create_chain+0xa8>
c000316a:	8d 59 01             	lea    ebx,[ecx+0x1]
c000316d:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003170:	77 05                	ja     c0003177 <create_chain+0x6f>
c0003172:	bb 02 00 00 00       	mov    ebx,0x2
c0003177:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000317b:	89 da                	mov    edx,ebx
c000317d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003180:	e8 b9 fd ff ff       	call   c0002f3e <get_fat.isra.2>
c0003185:	83 f8 01             	cmp    eax,0x1
c0003188:	74 ab                	je     c0003135 <create_chain+0x2d>
c000318a:	83 f8 ff             	cmp    eax,0xffffffff
c000318d:	0f 84 a2 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003193:	85 c0                	test   eax,eax
c0003195:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003199:	74 11                	je     c00031ac <create_chain+0xa4>
c000319b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000319e:	83 f8 01             	cmp    eax,0x1
c00031a1:	76 0d                	jbe    c00031b0 <create_chain+0xa8>
c00031a3:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c00031a6:	73 08                	jae    c00031b0 <create_chain+0xa8>
c00031a8:	89 c1                	mov    ecx,eax
c00031aa:	eb 04                	jmp    c00031b0 <create_chain+0xa8>
c00031ac:	85 db                	test   ebx,ebx
c00031ae:	75 3d                	jne    c00031ed <create_chain+0xe5>
c00031b0:	89 cb                	mov    ebx,ecx
c00031b2:	43                   	inc    ebx
c00031b3:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00031b6:	77 0a                	ja     c00031c2 <create_chain+0xba>
c00031b8:	83 f9 01             	cmp    ecx,0x1
c00031bb:	76 a2                	jbe    c000315f <create_chain+0x57>
c00031bd:	bb 02 00 00 00       	mov    ebx,0x2
c00031c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00031c6:	89 da                	mov    edx,ebx
c00031c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00031cb:	e8 6e fd ff ff       	call   c0002f3e <get_fat.isra.2>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 19                	je     c00031ed <create_chain+0xe5>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	0f 84 58 ff ff ff    	je     c0003135 <create_chain+0x2d>
c00031dd:	40                   	inc    eax
c00031de:	74 55                	je     c0003235 <create_chain+0x12d>
c00031e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00031e4:	39 cb                	cmp    ebx,ecx
c00031e6:	75 ca                	jne    c00031b2 <create_chain+0xaa>
c00031e8:	e9 72 ff ff ff       	jmp    c000315f <create_chain+0x57>
c00031ed:	83 c9 ff             	or     ecx,0xffffffff
c00031f0:	89 da                	mov    edx,ebx
c00031f2:	89 f0                	mov    eax,esi
c00031f4:	e8 cf f2 ff ff       	call   c00024c8 <put_fat>
c00031f9:	85 c0                	test   eax,eax
c00031fb:	75 31                	jne    c000322e <create_chain+0x126>
c00031fd:	85 ff                	test   edi,edi
c00031ff:	75 16                	jne    c0003217 <create_chain+0x10f>
c0003201:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003204:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0003207:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000320a:	8d 57 fe             	lea    edx,[edi-0x2]
c000320d:	39 d0                	cmp    eax,edx
c000320f:	77 17                	ja     c0003228 <create_chain+0x120>
c0003211:	48                   	dec    eax
c0003212:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003215:	eb 11                	jmp    c0003228 <create_chain+0x120>
c0003217:	89 d9                	mov    ecx,ebx
c0003219:	89 fa                	mov    edx,edi
c000321b:	89 f0                	mov    eax,esi
c000321d:	e8 a6 f2 ff ff       	call   c00024c8 <put_fat>
c0003222:	85 c0                	test   eax,eax
c0003224:	74 db                	je     c0003201 <create_chain+0xf9>
c0003226:	eb 06                	jmp    c000322e <create_chain+0x126>
c0003228:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000322c:	eb 0a                	jmp    c0003238 <create_chain+0x130>
c000322e:	48                   	dec    eax
c000322f:	0f 85 00 ff ff ff    	jne    c0003135 <create_chain+0x2d>
c0003235:	83 cb ff             	or     ebx,0xffffffff
c0003238:	83 c4 1c             	add    esp,0x1c
c000323b:	89 d8                	mov    eax,ebx
c000323d:	5b                   	pop    ebx
c000323e:	5e                   	pop    esi
c000323f:	5f                   	pop    edi
c0003240:	5d                   	pop    ebp
c0003241:	c3                   	ret    

c0003242 <remove_chain>:
c0003242:	55                   	push   ebp
c0003243:	57                   	push   edi
c0003244:	56                   	push   esi
c0003245:	89 d6                	mov    esi,edx
c0003247:	53                   	push   ebx
c0003248:	83 ec 0c             	sub    esp,0xc
c000324b:	83 fa 01             	cmp    edx,0x1
c000324e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003250:	76 65                	jbe    c00032b7 <remove_chain+0x75>
c0003252:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003255:	76 60                	jbe    c00032b7 <remove_chain+0x75>
c0003257:	89 c5                	mov    ebp,eax
c0003259:	89 ca                	mov    edx,ecx
c000325b:	85 c9                	test   ecx,ecx
c000325d:	74 0e                	je     c000326d <remove_chain+0x2b>
c000325f:	83 c9 ff             	or     ecx,0xffffffff
c0003262:	89 d8                	mov    eax,ebx
c0003264:	e8 5f f2 ff ff       	call   c00024c8 <put_fat>
c0003269:	85 c0                	test   eax,eax
c000326b:	75 56                	jne    c00032c3 <remove_chain+0x81>
c000326d:	89 f2                	mov    edx,esi
c000326f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003272:	e8 c7 fc ff ff       	call   c0002f3e <get_fat.isra.2>
c0003277:	89 c7                	mov    edi,eax
c0003279:	85 c0                	test   eax,eax
c000327b:	75 04                	jne    c0003281 <remove_chain+0x3f>
c000327d:	31 c0                	xor    eax,eax
c000327f:	eb 42                	jmp    c00032c3 <remove_chain+0x81>
c0003281:	83 f8 01             	cmp    eax,0x1
c0003284:	74 31                	je     c00032b7 <remove_chain+0x75>
c0003286:	83 f8 ff             	cmp    eax,0xffffffff
c0003289:	74 33                	je     c00032be <remove_chain+0x7c>
c000328b:	31 c9                	xor    ecx,ecx
c000328d:	89 f2                	mov    edx,esi
c000328f:	89 d8                	mov    eax,ebx
c0003291:	e8 32 f2 ff ff       	call   c00024c8 <put_fat>
c0003296:	85 c0                	test   eax,eax
c0003298:	75 29                	jne    c00032c3 <remove_chain+0x81>
c000329a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000329d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00032a0:	8d 4a fe             	lea    ecx,[edx-0x2]
c00032a3:	39 c8                	cmp    eax,ecx
c00032a5:	73 08                	jae    c00032af <remove_chain+0x6d>
c00032a7:	40                   	inc    eax
c00032a8:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032ac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00032af:	89 fe                	mov    esi,edi
c00032b1:	39 fa                	cmp    edx,edi
c00032b3:	77 b8                	ja     c000326d <remove_chain+0x2b>
c00032b5:	eb c6                	jmp    c000327d <remove_chain+0x3b>
c00032b7:	b8 02 00 00 00       	mov    eax,0x2
c00032bc:	eb 05                	jmp    c00032c3 <remove_chain+0x81>
c00032be:	b8 01 00 00 00       	mov    eax,0x1
c00032c3:	83 c4 0c             	add    esp,0xc
c00032c6:	5b                   	pop    ebx
c00032c7:	5e                   	pop    esi
c00032c8:	5f                   	pop    edi
c00032c9:	5d                   	pop    ebp
c00032ca:	c3                   	ret    

c00032cb <dir_next>:
c00032cb:	55                   	push   ebp
c00032cc:	57                   	push   edi
c00032cd:	56                   	push   esi
c00032ce:	53                   	push   ebx
c00032cf:	83 ec 1c             	sub    esp,0x1c
c00032d2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00032d5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00032d7:	83 c7 20             	add    edi,0x20
c00032da:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00032e0:	76 07                	jbe    c00032e9 <dir_next+0x1e>
c00032e2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00032e9:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00032ec:	b9 04 00 00 00       	mov    ecx,0x4
c00032f1:	85 f6                	test   esi,esi
c00032f3:	0f 84 cd 00 00 00    	je     c00033c6 <dir_next+0xfb>
c00032f9:	89 c3                	mov    ebx,eax
c00032fb:	89 d1                	mov    ecx,edx
c00032fd:	89 f8                	mov    eax,edi
c00032ff:	25 ff 01 00 00       	and    eax,0x1ff
c0003304:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003308:	0f 85 a8 00 00 00    	jne    c00033b6 <dir_next+0xeb>
c000330e:	46                   	inc    esi
c000330f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003312:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003315:	85 d2                	test   edx,edx
c0003317:	75 22                	jne    c000333b <dir_next+0x70>
c0003319:	89 fa                	mov    edx,edi
c000331b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000331f:	c1 ea 05             	shr    edx,0x5
c0003322:	39 c2                	cmp    edx,eax
c0003324:	0f 82 8c 00 00 00    	jb     c00033b6 <dir_next+0xeb>
c000332a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003331:	b9 04 00 00 00       	mov    ecx,0x4
c0003336:	e9 8b 00 00 00       	jmp    c00033c6 <dir_next+0xfb>
c000333b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000333f:	89 fe                	mov    esi,edi
c0003341:	48                   	dec    eax
c0003342:	c1 ee 09             	shr    esi,0x9
c0003345:	85 f0                	test   eax,esi
c0003347:	75 6d                	jne    c00033b6 <dir_next+0xeb>
c0003349:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334d:	89 e8                	mov    eax,ebp
c000334f:	e8 ea fb ff ff       	call   c0002f3e <get_fat.isra.2>
c0003354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003358:	89 c6                	mov    esi,eax
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	77 07                	ja     c0003366 <dir_next+0x9b>
c000335f:	b9 02 00 00 00       	mov    ecx,0x2
c0003364:	eb 60                	jmp    c00033c6 <dir_next+0xfb>
c0003366:	83 f8 ff             	cmp    eax,0xffffffff
c0003369:	75 07                	jne    c0003372 <dir_next+0xa7>
c000336b:	b9 01 00 00 00       	mov    ecx,0x1
c0003370:	eb 54                	jmp    c00033c6 <dir_next+0xfb>
c0003372:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003375:	77 30                	ja     c00033a7 <dir_next+0xdc>
c0003377:	85 c9                	test   ecx,ecx
c0003379:	74 af                	je     c000332a <dir_next+0x5f>
c000337b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000337e:	89 d8                	mov    eax,ebx
c0003380:	e8 83 fd ff ff       	call   c0003108 <create_chain>
c0003385:	b9 07 00 00 00       	mov    ecx,0x7
c000338a:	89 c6                	mov    esi,eax
c000338c:	85 c0                	test   eax,eax
c000338e:	74 36                	je     c00033c6 <dir_next+0xfb>
c0003390:	83 f8 01             	cmp    eax,0x1
c0003393:	74 ca                	je     c000335f <dir_next+0x94>
c0003395:	83 f8 ff             	cmp    eax,0xffffffff
c0003398:	74 d1                	je     c000336b <dir_next+0xa0>
c000339a:	89 c2                	mov    edx,eax
c000339c:	89 e8                	mov    eax,ebp
c000339e:	e8 75 f2 ff ff       	call   c0002618 <dir_clear>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	75 c4                	jne    c000336b <dir_next+0xa0>
c00033a7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00033aa:	89 f2                	mov    edx,esi
c00033ac:	89 e8                	mov    eax,ebp
c00033ae:	e8 df e9 ff ff       	call   c0001d92 <clst2sect>
c00033b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00033b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00033ba:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00033bd:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00033c1:	31 c9                	xor    ecx,ecx
c00033c3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00033c6:	83 c4 1c             	add    esp,0x1c
c00033c9:	89 c8                	mov    eax,ecx
c00033cb:	5b                   	pop    ebx
c00033cc:	5e                   	pop    esi
c00033cd:	5f                   	pop    edi
c00033ce:	5d                   	pop    ebp
c00033cf:	c3                   	ret    

c00033d0 <dir_alloc>:
c00033d0:	55                   	push   ebp
c00033d1:	89 c5                	mov    ebp,eax
c00033d3:	57                   	push   edi
c00033d4:	89 d7                	mov    edi,edx
c00033d6:	56                   	push   esi
c00033d7:	31 d2                	xor    edx,edx
c00033d9:	53                   	push   ebx
c00033da:	83 ec 0c             	sub    esp,0xc
c00033dd:	8b 30                	mov    esi,DWORD PTR [eax]
c00033df:	e8 5c fc ff ff       	call   c0003040 <dir_sdi>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 37                	jne    c000341f <dir_alloc+0x4f>
c00033e8:	31 db                	xor    ebx,ebx
c00033ea:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00033ed:	89 f0                	mov    eax,esi
c00033ef:	e8 7e ec ff ff       	call   c0002072 <move_window>
c00033f4:	85 c0                	test   eax,eax
c00033f6:	75 27                	jne    c000341f <dir_alloc+0x4f>
c00033f8:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00033fb:	8a 12                	mov    dl,BYTE PTR [edx]
c00033fd:	84 d2                	test   dl,dl
c00033ff:	74 05                	je     c0003406 <dir_alloc+0x36>
c0003401:	80 fa e5             	cmp    dl,0xe5
c0003404:	75 07                	jne    c000340d <dir_alloc+0x3d>
c0003406:	43                   	inc    ebx
c0003407:	39 fb                	cmp    ebx,edi
c0003409:	75 04                	jne    c000340f <dir_alloc+0x3f>
c000340b:	eb 1c                	jmp    c0003429 <dir_alloc+0x59>
c000340d:	31 db                	xor    ebx,ebx
c000340f:	ba 01 00 00 00       	mov    edx,0x1
c0003414:	89 e8                	mov    eax,ebp
c0003416:	e8 b0 fe ff ff       	call   c00032cb <dir_next>
c000341b:	85 c0                	test   eax,eax
c000341d:	74 cb                	je     c00033ea <dir_alloc+0x1a>
c000341f:	83 f8 04             	cmp    eax,0x4
c0003422:	75 05                	jne    c0003429 <dir_alloc+0x59>
c0003424:	b8 07 00 00 00       	mov    eax,0x7
c0003429:	83 c4 0c             	add    esp,0xc
c000342c:	5b                   	pop    ebx
c000342d:	5e                   	pop    esi
c000342e:	5f                   	pop    edi
c000342f:	5d                   	pop    ebp
c0003430:	c3                   	ret    

c0003431 <dir_read>:
c0003431:	55                   	push   ebp
c0003432:	57                   	push   edi
c0003433:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003438:	56                   	push   esi
c0003439:	be 04 00 00 00       	mov    esi,0x4
c000343e:	53                   	push   ebx
c000343f:	89 c3                	mov    ebx,eax
c0003441:	83 ec 1c             	sub    esp,0x1c
c0003444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003448:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000344f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003452:	85 d2                	test   edx,edx
c0003454:	0f 84 d8 00 00 00    	je     c0003532 <dir_read+0x101>
c000345a:	89 e8                	mov    eax,ebp
c000345c:	e8 11 ec ff ff       	call   c0002072 <move_window>
c0003461:	89 c6                	mov    esi,eax
c0003463:	85 c0                	test   eax,eax
c0003465:	0f 85 d2 00 00 00    	jne    c000353d <dir_read+0x10c>
c000346b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000346e:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003470:	84 c9                	test   cl,cl
c0003472:	0f 84 c0 00 00 00    	je     c0003538 <dir_read+0x107>
c0003478:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000347b:	83 e0 3f             	and    eax,0x3f
c000347e:	80 f9 2e             	cmp    cl,0x2e
c0003481:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003485:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003488:	0f 84 8a 00 00 00    	je     c0003518 <dir_read+0xe7>
c000348e:	80 f9 e5             	cmp    cl,0xe5
c0003491:	0f 84 81 00 00 00    	je     c0003518 <dir_read+0xe7>
c0003497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000349b:	83 e0 1f             	and    eax,0x1f
c000349e:	83 f8 08             	cmp    eax,0x8
c00034a1:	0f 94 c0             	sete   al
c00034a4:	0f b6 c0             	movzx  eax,al
c00034a7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00034ab:	75 6b                	jne    c0003518 <dir_read+0xe7>
c00034ad:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00034b2:	75 44                	jne    c00034f8 <dir_read+0xc7>
c00034b4:	f6 c1 40             	test   cl,0x40
c00034b7:	74 12                	je     c00034cb <dir_read+0x9a>
c00034b9:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00034bc:	83 e1 bf             	and    ecx,0xffffffbf
c00034bf:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00034c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034c6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00034c9:	eb 06                	jmp    c00034d1 <dir_read+0xa0>
c00034cb:	89 f8                	mov    eax,edi
c00034cd:	38 c8                	cmp    al,cl
c00034cf:	75 47                	jne    c0003518 <dir_read+0xe7>
c00034d1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00034d5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00034da:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00034dd:	75 3e                	jne    c000351d <dir_read+0xec>
c00034df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00034e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00034e6:	e8 c4 e8 ff ff       	call   c0001daf <pick_lfn>
c00034eb:	85 c0                	test   eax,eax
c00034ed:	74 2e                	je     c000351d <dir_read+0xec>
c00034ef:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00034f3:	8d 79 ff             	lea    edi,[ecx-0x1]
c00034f6:	eb 25                	jmp    c000351d <dir_read+0xec>
c00034f8:	89 f8                	mov    eax,edi
c00034fa:	84 c0                	test   al,al
c00034fc:	75 11                	jne    c000350f <dir_read+0xde>
c00034fe:	89 d0                	mov    eax,edx
c0003500:	e8 64 ea ff ff       	call   c0001f69 <sum_sfn>
c0003505:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003509:	75 04                	jne    c000350f <dir_read+0xde>
c000350b:	31 f6                	xor    esi,esi
c000350d:	eb 35                	jmp    c0003544 <dir_read+0x113>
c000350f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003516:	eb 2c                	jmp    c0003544 <dir_read+0x113>
c0003518:	bf ff ff ff ff       	mov    edi,0xffffffff
c000351d:	31 d2                	xor    edx,edx
c000351f:	89 d8                	mov    eax,ebx
c0003521:	e8 a5 fd ff ff       	call   c00032cb <dir_next>
c0003526:	89 c6                	mov    esi,eax
c0003528:	85 c0                	test   eax,eax
c000352a:	0f 84 1f ff ff ff    	je     c000344f <dir_read+0x1e>
c0003530:	eb 0b                	jmp    c000353d <dir_read+0x10c>
c0003532:	85 f6                	test   esi,esi
c0003534:	74 d5                	je     c000350b <dir_read+0xda>
c0003536:	eb 05                	jmp    c000353d <dir_read+0x10c>
c0003538:	be 04 00 00 00       	mov    esi,0x4
c000353d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003544:	83 c4 1c             	add    esp,0x1c
c0003547:	89 f0                	mov    eax,esi
c0003549:	5b                   	pop    ebx
c000354a:	5e                   	pop    esi
c000354b:	5f                   	pop    edi
c000354c:	5d                   	pop    ebp
c000354d:	c3                   	ret    

c000354e <dir_remove>:
c000354e:	57                   	push   edi
c000354f:	56                   	push   esi
c0003550:	53                   	push   ebx
c0003551:	89 c3                	mov    ebx,eax
c0003553:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003556:	8b 30                	mov    esi,DWORD PTR [eax]
c0003558:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000355b:	83 fa ff             	cmp    edx,0xffffffff
c000355e:	74 09                	je     c0003569 <dir_remove+0x1b>
c0003560:	e8 db fa ff ff       	call   c0003040 <dir_sdi>
c0003565:	85 c0                	test   eax,eax
c0003567:	75 34                	jne    c000359d <dir_remove+0x4f>
c0003569:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000356c:	89 f0                	mov    eax,esi
c000356e:	e8 ff ea ff ff       	call   c0002072 <move_window>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 1c                	jne    c0003593 <dir_remove+0x45>
c0003577:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000357a:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000357d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003581:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003584:	73 17                	jae    c000359d <dir_remove+0x4f>
c0003586:	31 d2                	xor    edx,edx
c0003588:	89 d8                	mov    eax,ebx
c000358a:	e8 3c fd ff ff       	call   c00032cb <dir_next>
c000358f:	85 c0                	test   eax,eax
c0003591:	74 d6                	je     c0003569 <dir_remove+0x1b>
c0003593:	83 f8 04             	cmp    eax,0x4
c0003596:	75 05                	jne    c000359d <dir_remove+0x4f>
c0003598:	b8 02 00 00 00       	mov    eax,0x2
c000359d:	5b                   	pop    ebx
c000359e:	5e                   	pop    esi
c000359f:	5f                   	pop    edi
c00035a0:	c3                   	ret    

c00035a1 <dir_find>:
c00035a1:	55                   	push   ebp
c00035a2:	31 d2                	xor    edx,edx
c00035a4:	57                   	push   edi
c00035a5:	56                   	push   esi
c00035a6:	53                   	push   ebx
c00035a7:	89 c3                	mov    ebx,eax
c00035a9:	83 ec 1c             	sub    esp,0x1c
c00035ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00035ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035b2:	89 d8                	mov    eax,ebx
c00035b4:	e8 87 fa ff ff       	call   c0003040 <dir_sdi>
c00035b9:	89 c6                	mov    esi,eax
c00035bb:	85 c0                	test   eax,eax
c00035bd:	0f 85 02 01 00 00    	jne    c00036c5 <dir_find+0x124>
c00035c3:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00035ca:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00035cf:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035db:	e8 92 ea ff ff       	call   c0002072 <move_window>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	85 c0                	test   eax,eax
c00035e4:	0f 85 db 00 00 00    	jne    c00036c5 <dir_find+0x124>
c00035ea:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00035ed:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00035f0:	84 c9                	test   cl,cl
c00035f2:	0f 84 c8 00 00 00    	je     c00036c0 <dir_find+0x11f>
c00035f8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00035fb:	88 d0                	mov    al,dl
c00035fd:	83 e0 3f             	and    eax,0x3f
c0003600:	80 f9 e5             	cmp    cl,0xe5
c0003603:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003606:	0f 84 93 00 00 00    	je     c000369f <dir_find+0xfe>
c000360c:	80 e2 08             	and    dl,0x8
c000360f:	74 0a                	je     c000361b <dir_find+0x7a>
c0003611:	3c 0f                	cmp    al,0xf
c0003613:	0f 85 86 00 00 00    	jne    c000369f <dir_find+0xfe>
c0003619:	eb 04                	jmp    c000361f <dir_find+0x7e>
c000361b:	3c 0f                	cmp    al,0xf
c000361d:	75 54                	jne    c0003673 <dir_find+0xd2>
c000361f:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003623:	0f 85 82 00 00 00    	jne    c00036ab <dir_find+0x10a>
c0003629:	f6 c1 40             	test   cl,0x40
c000362c:	74 12                	je     c0003640 <dir_find+0x9f>
c000362e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003631:	83 e1 bf             	and    ecx,0xffffffbf
c0003634:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003638:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000363b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000363e:	eb 06                	jmp    c0003646 <dir_find+0xa5>
c0003640:	89 f8                	mov    eax,edi
c0003642:	38 c8                	cmp    al,cl
c0003644:	75 60                	jne    c00036a6 <dir_find+0x105>
c0003646:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000364a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000364f:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003652:	75 57                	jne    c00036ab <dir_find+0x10a>
c0003654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003658:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000365c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000365f:	89 ea                	mov    edx,ebp
c0003661:	e8 89 f3 ff ff       	call   c00029ef <cmp_lfn>
c0003666:	85 c0                	test   eax,eax
c0003668:	74 41                	je     c00036ab <dir_find+0x10a>
c000366a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000366e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003671:	eb 38                	jmp    c00036ab <dir_find+0x10a>
c0003673:	89 f8                	mov    eax,edi
c0003675:	84 c0                	test   al,al
c0003677:	75 0d                	jne    c0003686 <dir_find+0xe5>
c0003679:	89 e8                	mov    eax,ebp
c000367b:	e8 e9 e8 ff ff       	call   c0001f69 <sum_sfn>
c0003680:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003684:	74 3f                	je     c00036c5 <dir_find+0x124>
c0003686:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000368a:	75 13                	jne    c000369f <dir_find+0xfe>
c000368c:	8d 53 20             	lea    edx,[ebx+0x20]
c000368f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003694:	89 e8                	mov    eax,ebp
c0003696:	e8 fd e4 ff ff       	call   c0001b98 <mem_cmp>
c000369b:	85 c0                	test   eax,eax
c000369d:	74 26                	je     c00036c5 <dir_find+0x124>
c000369f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ab:	31 d2                	xor    edx,edx
c00036ad:	89 d8                	mov    eax,ebx
c00036af:	e8 17 fc ff ff       	call   c00032cb <dir_next>
c00036b4:	89 c6                	mov    esi,eax
c00036b6:	85 c0                	test   eax,eax
c00036b8:	0f 84 16 ff ff ff    	je     c00035d4 <dir_find+0x33>
c00036be:	eb 05                	jmp    c00036c5 <dir_find+0x124>
c00036c0:	be 04 00 00 00       	mov    esi,0x4
c00036c5:	83 c4 1c             	add    esp,0x1c
c00036c8:	89 f0                	mov    eax,esi
c00036ca:	5b                   	pop    ebx
c00036cb:	5e                   	pop    esi
c00036cc:	5f                   	pop    edi
c00036cd:	5d                   	pop    ebp
c00036ce:	c3                   	ret    

c00036cf <follow_path>:
c00036cf:	56                   	push   esi
c00036d0:	53                   	push   ebx
c00036d1:	89 c3                	mov    ebx,eax
c00036d3:	83 ec 14             	sub    esp,0x14
c00036d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036da:	8b 30                	mov    esi,DWORD PTR [eax]
c00036dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00036e0:	8a 10                	mov    dl,BYTE PTR [eax]
c00036e2:	80 fa 5c             	cmp    dl,0x5c
c00036e5:	75 07                	jne    c00036ee <follow_path+0x1f>
c00036e7:	40                   	inc    eax
c00036e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00036ec:	eb ee                	jmp    c00036dc <follow_path+0xd>
c00036ee:	80 fa 2f             	cmp    dl,0x2f
c00036f1:	74 f4                	je     c00036e7 <follow_path+0x18>
c00036f3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00036fa:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00036fd:	77 3e                	ja     c000373d <follow_path+0x6e>
c00036ff:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003703:	31 d2                	xor    edx,edx
c0003705:	89 d8                	mov    eax,ebx
c0003707:	e8 34 f9 ff ff       	call   c0003040 <dir_sdi>
c000370c:	eb 4f                	jmp    c000375d <follow_path+0x8e>
c000370e:	89 d8                	mov    eax,ebx
c0003710:	e8 8c fe ff ff       	call   c00035a1 <dir_find>
c0003715:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003718:	85 c0                	test   eax,eax
c000371a:	75 32                	jne    c000374e <follow_path+0x7f>
c000371c:	80 e2 04             	and    dl,0x4
c000371f:	75 3c                	jne    c000375d <follow_path+0x8e>
c0003721:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003725:	74 31                	je     c0003758 <follow_path+0x89>
c0003727:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000372a:	25 ff 01 00 00       	and    eax,0x1ff
c000372f:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003733:	8a 06                	mov    al,BYTE PTR [esi]
c0003735:	e8 b3 f7 ff ff       	call   c0002eed <ld_clust.isra.0>
c000373a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000373d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003741:	89 d8                	mov    eax,ebx
c0003743:	e8 cb ef ff ff       	call   c0002713 <create_name>
c0003748:	85 c0                	test   eax,eax
c000374a:	74 c2                	je     c000370e <follow_path+0x3f>
c000374c:	eb 0f                	jmp    c000375d <follow_path+0x8e>
c000374e:	83 f8 04             	cmp    eax,0x4
c0003751:	75 0a                	jne    c000375d <follow_path+0x8e>
c0003753:	80 e2 04             	and    dl,0x4
c0003756:	75 05                	jne    c000375d <follow_path+0x8e>
c0003758:	b8 05 00 00 00       	mov    eax,0x5
c000375d:	83 c4 14             	add    esp,0x14
c0003760:	5b                   	pop    ebx
c0003761:	5e                   	pop    esi
c0003762:	c3                   	ret    

c0003763 <dir_register>:
c0003763:	55                   	push   ebp
c0003764:	57                   	push   edi
c0003765:	56                   	push   esi
c0003766:	be 06 00 00 00       	mov    esi,0x6
c000376b:	53                   	push   ebx
c000376c:	83 ec 2c             	sub    esp,0x2c
c000376f:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003773:	0f 85 65 01 00 00    	jne    c00038de <dir_register+0x17b>
c0003779:	8b 38                	mov    edi,DWORD PTR [eax]
c000377b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003783:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003786:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000378a:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c000378f:	74 06                	je     c0003797 <dir_register+0x34>
c0003791:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003795:	eb ef                	jmp    c0003786 <dir_register+0x23>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	b9 0c 00 00 00       	mov    ecx,0xc
c000379e:	8d 40 20             	lea    eax,[eax+0x20]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 c2                	mov    edx,eax
c00037a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00037ab:	e8 c8 e3 ff ff       	call   c0001b78 <mem_cpy>
c00037b0:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00037b5:	74 48                	je     c00037ff <dir_register+0x9c>
c00037b7:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00037bb:	bd 01 00 00 00       	mov    ebp,0x1
c00037c0:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00037c3:	55                   	push   ebp
c00037c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00037c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00037cc:	e8 dc e6 ff ff       	call   c0001ead <gen_numname>
c00037d1:	58                   	pop    eax
c00037d2:	89 d8                	mov    eax,ebx
c00037d4:	e8 c8 fd ff ff       	call   c00035a1 <dir_find>
c00037d9:	89 c6                	mov    esi,eax
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 10                	jne    c00037ef <dir_register+0x8c>
c00037df:	45                   	inc    ebp
c00037e0:	83 fd 64             	cmp    ebp,0x64
c00037e3:	75 db                	jne    c00037c0 <dir_register+0x5d>
c00037e5:	be 07 00 00 00       	mov    esi,0x7
c00037ea:	e9 ef 00 00 00       	jmp    c00038de <dir_register+0x17b>
c00037ef:	83 f8 04             	cmp    eax,0x4
c00037f2:	0f 85 e6 00 00 00    	jne    c00038de <dir_register+0x17b>
c00037f8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00037fc:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00037ff:	bd 01 00 00 00       	mov    ebp,0x1
c0003804:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003809:	74 13                	je     c000381e <dir_register+0xbb>
c000380b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000380f:	b9 0d 00 00 00       	mov    ecx,0xd
c0003814:	83 c0 0c             	add    eax,0xc
c0003817:	31 d2                	xor    edx,edx
c0003819:	f7 f1                	div    ecx
c000381b:	8d 68 01             	lea    ebp,[eax+0x1]
c000381e:	89 ea                	mov    edx,ebp
c0003820:	89 d8                	mov    eax,ebx
c0003822:	e8 a9 fb ff ff       	call   c00033d0 <dir_alloc>
c0003827:	89 c6                	mov    esi,eax
c0003829:	85 c0                	test   eax,eax
c000382b:	0f 85 ad 00 00 00    	jne    c00038de <dir_register+0x17b>
c0003831:	4d                   	dec    ebp
c0003832:	74 6a                	je     c000389e <dir_register+0x13b>
c0003834:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003837:	89 e8                	mov    eax,ebp
c0003839:	c1 e0 05             	shl    eax,0x5
c000383c:	29 c2                	sub    edx,eax
c000383e:	89 d8                	mov    eax,ebx
c0003840:	e8 fb f7 ff ff       	call   c0003040 <dir_sdi>
c0003845:	89 c6                	mov    esi,eax
c0003847:	85 c0                	test   eax,eax
c0003849:	0f 85 8f 00 00 00    	jne    c00038de <dir_register+0x17b>
c000384f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003853:	e8 11 e7 ff ff       	call   c0001f69 <sum_sfn>
c0003858:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000385c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385f:	89 f8                	mov    eax,edi
c0003861:	e8 0c e8 ff ff       	call   c0002072 <move_window>
c0003866:	89 c6                	mov    esi,eax
c0003868:	85 c0                	test   eax,eax
c000386a:	75 72                	jne    c00038de <dir_register+0x17b>
c000386c:	83 ec 0c             	sub    esp,0xc
c000386f:	89 e8                	mov    eax,ebp
c0003871:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003876:	0f b6 c8             	movzx  ecx,al
c0003879:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000387c:	52                   	push   edx
c000387d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003880:	e8 a4 e5 ff ff       	call   c0001e29 <put_lfn>
c0003885:	31 d2                	xor    edx,edx
c0003887:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c000388b:	89 d8                	mov    eax,ebx
c000388d:	e8 39 fa ff ff       	call   c00032cb <dir_next>
c0003892:	83 c4 10             	add    esp,0x10
c0003895:	89 c6                	mov    esi,eax
c0003897:	85 c0                	test   eax,eax
c0003899:	75 43                	jne    c00038de <dir_register+0x17b>
c000389b:	4d                   	dec    ebp
c000389c:	75 be                	jne    c000385c <dir_register+0xf9>
c000389e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038a1:	89 f8                	mov    eax,edi
c00038a3:	e8 ca e7 ff ff       	call   c0002072 <move_window>
c00038a8:	89 c6                	mov    esi,eax
c00038aa:	85 c0                	test   eax,eax
c00038ac:	75 30                	jne    c00038de <dir_register+0x17b>
c00038ae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038b1:	b9 20 00 00 00       	mov    ecx,0x20
c00038b6:	31 d2                	xor    edx,edx
c00038b8:	e8 d0 e2 ff ff       	call   c0001b8d <mem_set>
c00038bd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00038c4:	b9 0b 00 00 00       	mov    ecx,0xb
c00038c9:	e8 aa e2 ff ff       	call   c0001b78 <mem_cpy>
c00038ce:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c00038d1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038d4:	83 e0 18             	and    eax,0x18
c00038d7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00038da:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00038de:	83 c4 2c             	add    esp,0x2c
c00038e1:	89 f0                	mov    eax,esi
c00038e3:	5b                   	pop    ebx
c00038e4:	5e                   	pop    esi
c00038e5:	5f                   	pop    edi
c00038e6:	5d                   	pop    ebp
c00038e7:	c3                   	ret    

c00038e8 <f_mount>:
c00038e8:	53                   	push   ebx
c00038e9:	83 ec 18             	sub    esp,0x18
c00038ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00038f0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00038f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00038fc:	e8 7a e6 ff ff       	call   c0001f7b <get_ldnumber>
c0003901:	89 c2                	mov    edx,eax
c0003903:	b8 0b 00 00 00       	mov    eax,0xb
c0003908:	85 d2                	test   edx,edx
c000390a:	78 39                	js     c0003945 <f_mount+0x5d>
c000390c:	8b 04 95 a0 f5 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0a60]
c0003913:	85 c0                	test   eax,eax
c0003915:	74 03                	je     c000391a <f_mount+0x32>
c0003917:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000391a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000391e:	85 c0                	test   eax,eax
c0003920:	74 03                	je     c0003925 <f_mount+0x3d>
c0003922:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003929:	89 04 95 a0 f5 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0a60],eax
c0003930:	31 c0                	xor    eax,eax
c0003932:	84 db                	test   bl,bl
c0003934:	74 0f                	je     c0003945 <f_mount+0x5d>
c0003936:	31 c9                	xor    ecx,ecx
c0003938:	8d 54 24 20          	lea    edx,[esp+0x20]
c000393c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003940:	e8 80 e8 ff ff       	call   c00021c5 <mount_volume>
c0003945:	83 c4 18             	add    esp,0x18
c0003948:	5b                   	pop    ebx
c0003949:	c3                   	ret    

c000394a <f_open>:
c000394a:	55                   	push   ebp
c000394b:	b8 09 00 00 00       	mov    eax,0x9
c0003950:	57                   	push   edi
c0003951:	56                   	push   esi
c0003952:	53                   	push   ebx
c0003953:	83 ec 5c             	sub    esp,0x5c
c0003956:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000395a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000395e:	85 db                	test   ebx,ebx
c0003960:	0f 84 a7 02 00 00    	je     c0003c0d <f_open+0x2c3>
c0003966:	89 fe                	mov    esi,edi
c0003968:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000396c:	83 e6 3f             	and    esi,0x3f
c000396f:	89 f0                	mov    eax,esi
c0003971:	0f b6 c8             	movzx  ecx,al
c0003974:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003978:	e8 48 e8 ff ff       	call   c00021c5 <mount_volume>
c000397d:	85 c0                	test   eax,eax
c000397f:	0f 85 82 02 00 00    	jne    c0003c07 <f_open+0x2bd>
c0003985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003989:	83 ec 0c             	sub    esp,0xc
c000398c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003990:	68 00 02 00 00       	push   0x200
c0003995:	e8 fe 1e 00 00       	call   c0005898 <ff_memalloc>
c000399a:	83 c4 10             	add    esp,0x10
c000399d:	89 c5                	mov    ebp,eax
c000399f:	b8 11 00 00 00       	mov    eax,0x11
c00039a4:	85 ed                	test   ebp,ebp
c00039a6:	0f 84 61 02 00 00    	je     c0003c0d <f_open+0x2c3>
c00039ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00039b0:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00039b4:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c00039b7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039bb:	e8 0f fd ff ff       	call   c00036cf <follow_path>
c00039c0:	85 c0                	test   eax,eax
c00039c2:	75 0c                	jne    c00039d0 <f_open+0x86>
c00039c4:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00039c9:	79 05                	jns    c00039d0 <f_open+0x86>
c00039cb:	b8 06 00 00 00       	mov    eax,0x6
c00039d0:	f7 c7 1c 00 00 00    	test   edi,0x1c
c00039d6:	0f 84 de 00 00 00    	je     c0003aba <f_open+0x170>
c00039dc:	85 c0                	test   eax,eax
c00039de:	74 1e                	je     c00039fe <f_open+0xb4>
c00039e0:	83 f8 04             	cmp    eax,0x4
c00039e3:	0f 85 06 02 00 00    	jne    c0003bef <f_open+0x2a5>
c00039e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039ed:	83 ce 08             	or     esi,0x8
c00039f0:	e8 6e fd ff ff       	call   c0003763 <dir_register>
c00039f5:	85 c0                	test   eax,eax
c00039f7:	74 2f                	je     c0003a28 <f_open+0xde>
c00039f9:	e9 f1 01 00 00       	jmp    c0003bef <f_open+0x2a5>
c00039fe:	b8 07 00 00 00       	mov    eax,0x7
c0003a03:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003a08:	0f 85 e1 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a0e:	b8 08 00 00 00       	mov    eax,0x8
c0003a13:	f7 c7 04 00 00 00    	test   edi,0x4
c0003a19:	0f 85 d0 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a1f:	83 e7 08             	and    edi,0x8
c0003a22:	0f 84 bf 00 00 00    	je     c0003ae7 <f_open+0x19d>
c0003a28:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003a2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a30:	89 ca                	mov    edx,ecx
c0003a32:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003a36:	8a 00                	mov    al,BYTE PTR [eax]
c0003a38:	e8 b0 f4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003a3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a41:	89 c7                	mov    edi,eax
c0003a43:	ba 00 00 21 50       	mov    edx,0x50210000
c0003a48:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003a4b:	e8 25 e1 ff ff       	call   c0001b75 <st_dword>
c0003a50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a54:	31 c9                	xor    ecx,ecx
c0003a56:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003a5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003a62:	e8 af f4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0003a67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a6b:	31 d2                	xor    edx,edx
c0003a6d:	83 c0 1c             	add    eax,0x1c
c0003a70:	e8 00 e1 ff ff       	call   c0001b75 <st_dword>
c0003a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a79:	85 ff                	test   edi,edi
c0003a7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a7f:	74 66                	je     c0003ae7 <f_open+0x19d>
c0003a81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a85:	31 c9                	xor    ecx,ecx
c0003a87:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003a8a:	89 fa                	mov    edx,edi
c0003a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a90:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003a94:	e8 a9 f7 ff ff       	call   c0003242 <remove_chain>
c0003a99:	85 c0                	test   eax,eax
c0003a9b:	0f 85 4e 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003aa1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003aa5:	4f                   	dec    edi
c0003aa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003aaa:	e8 c3 e5 ff ff       	call   c0002072 <move_window>
c0003aaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ab8:	eb 27                	jmp    c0003ae1 <f_open+0x197>
c0003aba:	85 c0                	test   eax,eax
c0003abc:	0f 85 2d 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ac2:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ac6:	b8 04 00 00 00       	mov    eax,0x4
c0003acb:	f6 c2 10             	test   dl,0x10
c0003ace:	0f 85 1b 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ad4:	83 e7 02             	and    edi,0x2
c0003ad7:	74 0e                	je     c0003ae7 <f_open+0x19d>
c0003ad9:	b8 07 00 00 00       	mov    eax,0x7
c0003ade:	80 e2 01             	and    dl,0x1
c0003ae1:	0f 85 08 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ae7:	f7 c6 08 00 00 00    	test   esi,0x8
c0003aed:	74 03                	je     c0003af2 <f_open+0x1a8>
c0003aef:	83 ce 40             	or     esi,0x40
c0003af2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003af6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003afa:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003afd:	89 fa                	mov    edx,edi
c0003aff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003b03:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003b06:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003b09:	8a 01                	mov    al,BYTE PTR [ecx]
c0003b0b:	e8 dd f3 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003b10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003b13:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003b16:	e8 3e e0 ff ff       	call   c0001b59 <ld_dword>
c0003b1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b1f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003b22:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003b24:	31 d2                	xor    edx,edx
c0003b26:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003b2a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003b2e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003b32:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003b39:	89 f0                	mov    eax,esi
c0003b3b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003b42:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003b45:	b9 00 02 00 00       	mov    ecx,0x200
c0003b4a:	8d 43 28             	lea    eax,[ebx+0x28]
c0003b4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003b51:	e8 37 e0 ff ff       	call   c0001b8d <mem_set>
c0003b56:	83 e6 20             	and    esi,0x20
c0003b59:	75 07                	jne    c0003b62 <f_open+0x218>
c0003b5b:	31 c0                	xor    eax,eax
c0003b5d:	e9 8d 00 00 00       	jmp    c0003bef <f_open+0x2a5>
c0003b62:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003b65:	85 ff                	test   edi,edi
c0003b67:	74 f2                	je     c0003b5b <f_open+0x211>
c0003b69:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b70:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003b73:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003b77:	c1 e6 09             	shl    esi,0x9
c0003b7a:	39 fe                	cmp    esi,edi
c0003b7c:	73 1c                	jae    c0003b9a <f_open+0x250>
c0003b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003b80:	29 f7                	sub    edi,esi
c0003b82:	e8 b7 f3 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003b87:	89 c2                	mov    edx,eax
c0003b89:	83 f8 01             	cmp    eax,0x1
c0003b8c:	76 10                	jbe    c0003b9e <f_open+0x254>
c0003b8e:	83 f8 ff             	cmp    eax,0xffffffff
c0003b91:	75 e7                	jne    c0003b7a <f_open+0x230>
c0003b93:	b8 01 00 00 00       	mov    eax,0x1
c0003b98:	eb 09                	jmp    c0003ba3 <f_open+0x259>
c0003b9a:	31 c0                	xor    eax,eax
c0003b9c:	eb 05                	jmp    c0003ba3 <f_open+0x259>
c0003b9e:	b8 02 00 00 00       	mov    eax,0x2
c0003ba3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ba6:	85 c0                	test   eax,eax
c0003ba8:	75 45                	jne    c0003bef <f_open+0x2a5>
c0003baa:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003bb0:	74 a9                	je     c0003b5b <f_open+0x211>
c0003bb2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003bb6:	89 f0                	mov    eax,esi
c0003bb8:	e8 d5 e1 ff ff       	call   c0001d92 <clst2sect>
c0003bbd:	89 c2                	mov    edx,eax
c0003bbf:	b8 02 00 00 00       	mov    eax,0x2
c0003bc4:	85 d2                	test   edx,edx
c0003bc6:	74 27                	je     c0003bef <f_open+0x2a5>
c0003bc8:	89 f9                	mov    ecx,edi
c0003bca:	c1 e9 09             	shr    ecx,0x9
c0003bcd:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003bd0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003bd3:	6a 01                	push   0x1
c0003bd5:	50                   	push   eax
c0003bd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003bda:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003bde:	50                   	push   eax
c0003bdf:	e8 1d df ff ff       	call   c0001b01 <disk_read>
c0003be4:	83 c4 10             	add    esp,0x10
c0003be7:	85 c0                	test   eax,eax
c0003be9:	0f 95 c0             	setne  al
c0003bec:	0f b6 c0             	movzx  eax,al
c0003bef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bf3:	83 ec 0c             	sub    esp,0xc
c0003bf6:	55                   	push   ebp
c0003bf7:	e8 b4 1c 00 00       	call   c00058b0 <ff_memfree>
c0003bfc:	83 c4 10             	add    esp,0x10
c0003bff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c03:	85 c0                	test   eax,eax
c0003c05:	74 06                	je     c0003c0d <f_open+0x2c3>
c0003c07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003c0d:	83 c4 5c             	add    esp,0x5c
c0003c10:	5b                   	pop    ebx
c0003c11:	5e                   	pop    esi
c0003c12:	5f                   	pop    edi
c0003c13:	5d                   	pop    ebp
c0003c14:	c3                   	ret    

c0003c15 <f_read>:
c0003c15:	55                   	push   ebp
c0003c16:	57                   	push   edi
c0003c17:	56                   	push   esi
c0003c18:	53                   	push   ebx
c0003c19:	83 ec 2c             	sub    esp,0x2c
c0003c1c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003c20:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003c24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003c2a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003c2e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c32:	89 d8                	mov    eax,ebx
c0003c34:	e8 8f e3 ff ff       	call   c0001fc8 <validate>
c0003c39:	89 c5                	mov    ebp,eax
c0003c3b:	85 c0                	test   eax,eax
c0003c3d:	0f 85 c7 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c43:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003c47:	85 ed                	test   ebp,ebp
c0003c49:	0f 85 bb 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c4f:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003c53:	0f 84 ac 01 00 00    	je     c0003e05 <f_read+0x1f0>
c0003c59:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003c5c:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003c5f:	89 c7                	mov    edi,eax
c0003c61:	39 f0                	cmp    eax,esi
c0003c63:	0f 86 ad 00 00 00    	jbe    c0003d16 <f_read+0x101>
c0003c69:	89 f7                	mov    edi,esi
c0003c6b:	e9 a6 00 00 00       	jmp    c0003d16 <f_read+0x101>
c0003c70:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003c73:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003c79:	0f 85 5b 01 00 00    	jne    c0003dda <f_read+0x1c5>
c0003c7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c83:	89 d1                	mov    ecx,edx
c0003c85:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003c89:	c1 e9 09             	shr    ecx,0x9
c0003c8c:	48                   	dec    eax
c0003c8d:	21 c8                	and    eax,ecx
c0003c8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c93:	0f 84 8a 00 00 00    	je     c0003d23 <f_read+0x10e>
c0003c99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c9d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ca0:	89 c8                	mov    eax,ecx
c0003ca2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ca6:	e8 e7 e0 ff ff       	call   c0001d92 <clst2sect>
c0003cab:	85 c0                	test   eax,eax
c0003cad:	0f 84 88 00 00 00    	je     c0003d3b <f_read+0x126>
c0003cb3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003cb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003cbf:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003cc5:	0f 86 bd 00 00 00    	jbe    c0003d88 <f_read+0x173>
c0003ccb:	89 fe                	mov    esi,edi
c0003ccd:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003cd1:	c1 ee 09             	shr    esi,0x9
c0003cd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003cd8:	01 f2                	add    edx,esi
c0003cda:	39 c2                	cmp    edx,eax
c0003cdc:	76 06                	jbe    c0003ce4 <f_read+0xcf>
c0003cde:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ce2:	89 c6                	mov    esi,eax
c0003ce4:	56                   	push   esi
c0003ce5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ce9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ced:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003cf1:	50                   	push   eax
c0003cf2:	e8 0a de ff ff       	call   c0001b01 <disk_read>
c0003cf7:	83 c4 10             	add    esp,0x10
c0003cfa:	85 c0                	test   eax,eax
c0003cfc:	75 50                	jne    c0003d4e <f_read+0x139>
c0003cfe:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d02:	78 60                	js     c0003d64 <f_read+0x14f>
c0003d04:	c1 e6 09             	shl    esi,0x9
c0003d07:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003d0b:	29 f7                	sub    edi,esi
c0003d0d:	01 30                	add    DWORD PTR [eax],esi
c0003d0f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003d13:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003d16:	85 ff                	test   edi,edi
c0003d18:	0f 85 52 ff ff ff    	jne    c0003c70 <f_read+0x5b>
c0003d1e:	e9 e7 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d23:	85 d2                	test   edx,edx
c0003d25:	75 05                	jne    c0003d2c <f_read+0x117>
c0003d27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003d2a:	eb 0a                	jmp    c0003d36 <f_read+0x121>
c0003d2c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d31:	e8 08 f2 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003d36:	83 f8 01             	cmp    eax,0x1
c0003d39:	77 0e                	ja     c0003d49 <f_read+0x134>
c0003d3b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003d3f:	bd 02 00 00 00       	mov    ebp,0x2
c0003d44:	e9 c1 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d49:	83 f8 ff             	cmp    eax,0xffffffff
c0003d4c:	75 0e                	jne    c0003d5c <f_read+0x147>
c0003d4e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003d52:	bd 01 00 00 00       	mov    ebp,0x1
c0003d57:	e9 ae 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d5c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003d5f:	e9 35 ff ff ff       	jmp    c0003c99 <f_read+0x84>
c0003d64:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d67:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003d6b:	39 f0                	cmp    eax,esi
c0003d6d:	73 95                	jae    c0003d04 <f_read+0xef>
c0003d6f:	c1 e0 09             	shl    eax,0x9
c0003d72:	8d 53 28             	lea    edx,[ebx+0x28]
c0003d75:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003d79:	b9 00 02 00 00       	mov    ecx,0x200
c0003d7e:	e8 f5 dd ff ff       	call   c0001b78 <mem_cpy>
c0003d83:	e9 7c ff ff ff       	jmp    c0003d04 <f_read+0xef>
c0003d88:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d8b:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003d8f:	74 42                	je     c0003dd3 <f_read+0x1be>
c0003d91:	8d 73 28             	lea    esi,[ebx+0x28]
c0003d94:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d98:	79 19                	jns    c0003db3 <f_read+0x19e>
c0003d9a:	6a 01                	push   0x1
c0003d9c:	50                   	push   eax
c0003d9d:	56                   	push   esi
c0003d9e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003da2:	50                   	push   eax
c0003da3:	e8 6f dd ff ff       	call   c0001b17 <disk_write>
c0003da8:	83 c4 10             	add    esp,0x10
c0003dab:	85 c0                	test   eax,eax
c0003dad:	75 9f                	jne    c0003d4e <f_read+0x139>
c0003daf:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003db3:	6a 01                	push   0x1
c0003db5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003db9:	56                   	push   esi
c0003dba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003dbe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003dc2:	50                   	push   eax
c0003dc3:	e8 39 dd ff ff       	call   c0001b01 <disk_read>
c0003dc8:	83 c4 10             	add    esp,0x10
c0003dcb:	85 c0                	test   eax,eax
c0003dcd:	0f 85 7b ff ff ff    	jne    c0003d4e <f_read+0x139>
c0003dd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dd7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dda:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003ddd:	ba 00 02 00 00       	mov    edx,0x200
c0003de2:	25 ff 01 00 00       	and    eax,0x1ff
c0003de7:	89 fe                	mov    esi,edi
c0003de9:	29 c2                	sub    edx,eax
c0003deb:	39 d7                	cmp    edi,edx
c0003ded:	76 02                	jbe    c0003df1 <f_read+0x1dc>
c0003def:	89 d6                	mov    esi,edx
c0003df1:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003df5:	89 f1                	mov    ecx,esi
c0003df7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003dfb:	e8 78 dd ff ff       	call   c0001b78 <mem_cpy>
c0003e00:	e9 02 ff ff ff       	jmp    c0003d07 <f_read+0xf2>
c0003e05:	bd 07 00 00 00       	mov    ebp,0x7
c0003e0a:	83 c4 2c             	add    esp,0x2c
c0003e0d:	89 e8                	mov    eax,ebp
c0003e0f:	5b                   	pop    ebx
c0003e10:	5e                   	pop    esi
c0003e11:	5f                   	pop    edi
c0003e12:	5d                   	pop    ebp
c0003e13:	c3                   	ret    

c0003e14 <f_write>:
c0003e14:	55                   	push   ebp
c0003e15:	57                   	push   edi
c0003e16:	56                   	push   esi
c0003e17:	53                   	push   ebx
c0003e18:	83 ec 2c             	sub    esp,0x2c
c0003e1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e2d:	89 d8                	mov    eax,ebx
c0003e2f:	e8 94 e1 ff ff       	call   c0001fc8 <validate>
c0003e34:	89 c5                	mov    ebp,eax
c0003e36:	85 c0                	test   eax,eax
c0003e38:	0f 85 00 02 00 00    	jne    c000403e <f_write+0x22a>
c0003e3e:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e42:	85 ed                	test   ebp,ebp
c0003e44:	0f 85 f4 01 00 00    	jne    c000403e <f_write+0x22a>
c0003e4a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003e4e:	0f 84 e5 01 00 00    	je     c0004039 <f_write+0x225>
c0003e54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003e57:	89 c7                	mov    edi,eax
c0003e59:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0003e5d:	0f 83 ea 00 00 00    	jae    c0003f4d <f_write+0x139>
c0003e63:	f7 d0                	not    eax
c0003e65:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0003e69:	e9 df 00 00 00       	jmp    c0003f4d <f_write+0x139>
c0003e6e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e71:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e77:	0f 85 8b 01 00 00    	jne    c0004008 <f_write+0x1f4>
c0003e7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e81:	89 d1                	mov    ecx,edx
c0003e83:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e87:	c1 e9 09             	shr    ecx,0x9
c0003e8a:	48                   	dec    eax
c0003e8b:	21 c8                	and    eax,ecx
c0003e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e91:	0f 84 c3 00 00 00    	je     c0003f5a <f_write+0x146>
c0003e97:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003e9b:	0f 88 18 01 00 00    	js     c0003fb9 <f_write+0x1a5>
c0003ea1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ea5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ea8:	89 c8                	mov    eax,ecx
c0003eaa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003eae:	e8 df de ff ff       	call   c0001d92 <clst2sect>
c0003eb3:	85 c0                	test   eax,eax
c0003eb5:	0f 84 c8 00 00 00    	je     c0003f83 <f_write+0x16f>
c0003ebb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003ebf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ec3:	01 c7                	add    edi,eax
c0003ec5:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0003ecd:	0f 86 0d 01 00 00    	jbe    c0003fe0 <f_write+0x1cc>
c0003ed3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003ed7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003edb:	c1 ee 09             	shr    esi,0x9
c0003ede:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ee2:	01 f2                	add    edx,esi
c0003ee4:	39 c2                	cmp    edx,eax
c0003ee6:	76 06                	jbe    c0003eee <f_write+0xda>
c0003ee8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eec:	89 c6                	mov    esi,eax
c0003eee:	56                   	push   esi
c0003eef:	57                   	push   edi
c0003ef0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ef4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ef8:	50                   	push   eax
c0003ef9:	e8 19 dc ff ff       	call   c0001b17 <disk_write>
c0003efe:	83 c4 10             	add    esp,0x10
c0003f01:	85 c0                	test   eax,eax
c0003f03:	0f 85 8d 00 00 00    	jne    c0003f96 <f_write+0x182>
c0003f09:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f0c:	29 fa                	sub    edx,edi
c0003f0e:	39 f2                	cmp    edx,esi
c0003f10:	73 18                	jae    c0003f2a <f_write+0x116>
c0003f12:	c1 e2 09             	shl    edx,0x9
c0003f15:	8d 43 28             	lea    eax,[ebx+0x28]
c0003f18:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0003f1c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f21:	e8 52 dc ff ff       	call   c0001b78 <mem_cpy>
c0003f26:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f2a:	c1 e6 09             	shl    esi,0x9
c0003f2d:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0003f31:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f35:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f39:	01 30                	add    DWORD PTR [eax],esi
c0003f3b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0003f3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f41:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003f44:	39 f0                	cmp    eax,esi
c0003f46:	73 02                	jae    c0003f4a <f_write+0x136>
c0003f48:	89 f0                	mov    eax,esi
c0003f4a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003f4d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0003f52:	0f 85 16 ff ff ff    	jne    c0003e6e <f_write+0x5a>
c0003f58:	eb 1b                	jmp    c0003f75 <f_write+0x161>
c0003f5a:	85 d2                	test   edx,edx
c0003f5c:	75 09                	jne    c0003f67 <f_write+0x153>
c0003f5e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f61:	85 c0                	test   eax,eax
c0003f63:	75 19                	jne    c0003f7e <f_write+0x16a>
c0003f65:	eb 03                	jmp    c0003f6a <f_write+0x156>
c0003f67:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f6a:	89 d8                	mov    eax,ebx
c0003f6c:	e8 97 f1 ff ff       	call   c0003108 <create_chain>
c0003f71:	85 c0                	test   eax,eax
c0003f73:	75 09                	jne    c0003f7e <f_write+0x16a>
c0003f75:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0003f79:	e9 c0 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f7e:	83 f8 01             	cmp    eax,0x1
c0003f81:	75 0e                	jne    c0003f91 <f_write+0x17d>
c0003f83:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f87:	bd 02 00 00 00       	mov    ebp,0x2
c0003f8c:	e9 ad 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f91:	83 f8 ff             	cmp    eax,0xffffffff
c0003f94:	75 0e                	jne    c0003fa4 <f_write+0x190>
c0003f96:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f9a:	bd 01 00 00 00       	mov    ebp,0x1
c0003f9f:	e9 9a 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003fa4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003fa7:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003fab:	0f 85 e6 fe ff ff    	jne    c0003e97 <f_write+0x83>
c0003fb1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003fb4:	e9 de fe ff ff       	jmp    c0003e97 <f_write+0x83>
c0003fb9:	6a 01                	push   0x1
c0003fbb:	8d 43 28             	lea    eax,[ebx+0x28]
c0003fbe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003fc1:	50                   	push   eax
c0003fc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fc6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fca:	50                   	push   eax
c0003fcb:	e8 47 db ff ff       	call   c0001b17 <disk_write>
c0003fd0:	83 c4 10             	add    esp,0x10
c0003fd3:	85 c0                	test   eax,eax
c0003fd5:	75 bf                	jne    c0003f96 <f_write+0x182>
c0003fd7:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fdb:	e9 c1 fe ff ff       	jmp    c0003ea1 <f_write+0x8d>
c0003fe0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0003fe3:	74 20                	je     c0004005 <f_write+0x1f1>
c0003fe5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fe8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0003feb:	76 18                	jbe    c0004005 <f_write+0x1f1>
c0003fed:	6a 01                	push   0x1
c0003fef:	8d 43 28             	lea    eax,[ebx+0x28]
c0003ff2:	57                   	push   edi
c0003ff3:	50                   	push   eax
c0003ff4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ff8:	50                   	push   eax
c0003ff9:	e8 03 db ff ff       	call   c0001b01 <disk_read>
c0003ffe:	83 c4 10             	add    esp,0x10
c0004001:	85 c0                	test   eax,eax
c0004003:	75 91                	jne    c0003f96 <f_write+0x182>
c0004005:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004008:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000400b:	ba 00 02 00 00       	mov    edx,0x200
c0004010:	25 ff 01 00 00       	and    eax,0x1ff
c0004015:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004019:	29 c2                	sub    edx,eax
c000401b:	39 d6                	cmp    esi,edx
c000401d:	76 02                	jbe    c0004021 <f_write+0x20d>
c000401f:	89 d6                	mov    esi,edx
c0004021:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004025:	89 f1                	mov    ecx,esi
c0004027:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000402b:	e8 48 db ff ff       	call   c0001b78 <mem_cpy>
c0004030:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004034:	e9 f4 fe ff ff       	jmp    c0003f2d <f_write+0x119>
c0004039:	bd 07 00 00 00       	mov    ebp,0x7
c000403e:	83 c4 2c             	add    esp,0x2c
c0004041:	89 e8                	mov    eax,ebp
c0004043:	5b                   	pop    ebx
c0004044:	5e                   	pop    esi
c0004045:	5f                   	pop    edi
c0004046:	5d                   	pop    ebp
c0004047:	c3                   	ret    

c0004048 <f_sync>:
c0004048:	56                   	push   esi
c0004049:	53                   	push   ebx
c000404a:	83 ec 14             	sub    esp,0x14
c000404d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004051:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004055:	89 d8                	mov    eax,ebx
c0004057:	e8 6c df ff ff       	call   c0001fc8 <validate>
c000405c:	85 c0                	test   eax,eax
c000405e:	0f 85 93 00 00 00    	jne    c00040f7 <f_sync+0xaf>
c0004064:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004067:	f6 c2 40             	test   dl,0x40
c000406a:	0f 84 87 00 00 00    	je     c00040f7 <f_sync+0xaf>
c0004070:	84 d2                	test   dl,dl
c0004072:	79 29                	jns    c000409d <f_sync+0x55>
c0004074:	6a 01                	push   0x1
c0004076:	8d 43 28             	lea    eax,[ebx+0x28]
c0004079:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000407c:	50                   	push   eax
c000407d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004081:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004085:	50                   	push   eax
c0004086:	e8 8c da ff ff       	call   c0001b17 <disk_write>
c000408b:	83 c4 10             	add    esp,0x10
c000408e:	89 c2                	mov    edx,eax
c0004090:	b8 01 00 00 00       	mov    eax,0x1
c0004095:	85 d2                	test   edx,edx
c0004097:	75 5e                	jne    c00040f7 <f_sync+0xaf>
c0004099:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000409d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00040a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040a4:	e8 c9 df ff ff       	call   c0002072 <move_window>
c00040a9:	85 c0                	test   eax,eax
c00040ab:	75 4a                	jne    c00040f7 <f_sync+0xaf>
c00040ad:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00040b0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00040b4:	89 f2                	mov    edx,esi
c00040b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00040b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040bb:	e8 56 ee ff ff       	call   c0002f16 <st_clust.isra.1>
c00040c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040c3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00040c6:	e8 aa da ff ff       	call   c0001b75 <st_dword>
c00040cb:	8d 46 16             	lea    eax,[esi+0x16]
c00040ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00040d3:	e8 9d da ff ff       	call   c0001b75 <st_dword>
c00040d8:	8d 46 12             	lea    eax,[esi+0x12]
c00040db:	31 d2                	xor    edx,edx
c00040dd:	e8 8f da ff ff       	call   c0001b71 <st_word>
c00040e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040e6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00040ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040ee:	e8 bf e9 ff ff       	call   c0002ab2 <sync_fs>
c00040f3:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00040f7:	83 c4 14             	add    esp,0x14
c00040fa:	5b                   	pop    ebx
c00040fb:	5e                   	pop    esi
c00040fc:	c3                   	ret    

c00040fd <f_close>:
c00040fd:	53                   	push   ebx
c00040fe:	83 ec 24             	sub    esp,0x24
c0004101:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004105:	53                   	push   ebx
c0004106:	e8 3d ff ff ff       	call   c0004048 <f_sync>
c000410b:	83 c4 10             	add    esp,0x10
c000410e:	85 c0                	test   eax,eax
c0004110:	75 15                	jne    c0004127 <f_close+0x2a>
c0004112:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004116:	89 d8                	mov    eax,ebx
c0004118:	e8 ab de ff ff       	call   c0001fc8 <validate>
c000411d:	85 c0                	test   eax,eax
c000411f:	75 06                	jne    c0004127 <f_close+0x2a>
c0004121:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004127:	83 c4 18             	add    esp,0x18
c000412a:	5b                   	pop    ebx
c000412b:	c3                   	ret    

c000412c <f_lseek>:
c000412c:	55                   	push   ebp
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	83 ec 2c             	sub    esp,0x2c
c0004133:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004137:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000413b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000413f:	89 d8                	mov    eax,ebx
c0004141:	e8 82 de ff ff       	call   c0001fc8 <validate>
c0004146:	89 c5                	mov    ebp,eax
c0004148:	85 c0                	test   eax,eax
c000414a:	0f 85 79 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c0004150:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004154:	85 ed                	test   ebp,ebp
c0004156:	0f 85 6d 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c000415c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000415f:	39 f0                	cmp    eax,esi
c0004161:	73 08                	jae    c000416b <f_lseek+0x3f>
c0004163:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004167:	75 02                	jne    c000416b <f_lseek+0x3f>
c0004169:	89 c6                	mov    esi,eax
c000416b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000416e:	85 f6                	test   esi,esi
c0004170:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004177:	75 07                	jne    c0004180 <f_lseek+0x54>
c0004179:	31 f6                	xor    esi,esi
c000417b:	e9 e2 00 00 00       	jmp    c0004262 <f_lseek+0x136>
c0004180:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004184:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004188:	c1 e7 09             	shl    edi,0x9
c000418b:	85 c9                	test   ecx,ecx
c000418d:	74 28                	je     c00041b7 <f_lseek+0x8b>
c000418f:	49                   	dec    ecx
c0004190:	31 d2                	xor    edx,edx
c0004192:	8d 46 ff             	lea    eax,[esi-0x1]
c0004195:	f7 f7                	div    edi
c0004197:	31 d2                	xor    edx,edx
c0004199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000419d:	89 c8                	mov    eax,ecx
c000419f:	f7 f7                	div    edi
c00041a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00041a5:	72 10                	jb     c00041b7 <f_lseek+0x8b>
c00041a7:	89 f8                	mov    eax,edi
c00041a9:	f7 d8                	neg    eax
c00041ab:	21 c1                	and    ecx,eax
c00041ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00041b0:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00041b3:	29 ce                	sub    esi,ecx
c00041b5:	eb 3c                	jmp    c00041f3 <f_lseek+0xc7>
c00041b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041ba:	85 c0                	test   eax,eax
c00041bc:	75 32                	jne    c00041f0 <f_lseek+0xc4>
c00041be:	31 d2                	xor    edx,edx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 41 ef ff ff       	call   c0003108 <create_chain>
c00041c7:	83 f8 01             	cmp    eax,0x1
c00041ca:	75 0e                	jne    c00041da <f_lseek+0xae>
c00041cc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041d0:	bd 02 00 00 00       	mov    ebp,0x2
c00041d5:	e9 ef 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041da:	83 f8 ff             	cmp    eax,0xffffffff
c00041dd:	75 0e                	jne    c00041ed <f_lseek+0xc1>
c00041df:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041e3:	bd 01 00 00 00       	mov    ebp,0x1
c00041e8:	e9 dc 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041ed:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041f0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00041f3:	85 c0                	test   eax,eax
c00041f5:	74 82                	je     c0004179 <f_lseek+0x4d>
c00041f7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00041fa:	39 fe                	cmp    esi,edi
c00041fc:	76 3d                	jbe    c000423b <f_lseek+0x10f>
c00041fe:	01 fa                	add    edx,edi
c0004200:	29 fe                	sub    esi,edi
c0004202:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004205:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004209:	89 c2                	mov    edx,eax
c000420b:	74 0d                	je     c000421a <f_lseek+0xee>
c000420d:	89 d8                	mov    eax,ebx
c000420f:	e8 f4 ee ff ff       	call   c0003108 <create_chain>
c0004214:	85 c0                	test   eax,eax
c0004216:	75 09                	jne    c0004221 <f_lseek+0xf5>
c0004218:	eb 1f                	jmp    c0004239 <f_lseek+0x10d>
c000421a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000421c:	e8 1d ed ff ff       	call   c0002f3e <get_fat.isra.2>
c0004221:	83 f8 ff             	cmp    eax,0xffffffff
c0004224:	74 b9                	je     c00041df <f_lseek+0xb3>
c0004226:	83 f8 01             	cmp    eax,0x1
c0004229:	76 a1                	jbe    c00041cc <f_lseek+0xa0>
c000422b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000422f:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004232:	76 98                	jbe    c00041cc <f_lseek+0xa0>
c0004234:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004237:	eb be                	jmp    c00041f7 <f_lseek+0xcb>
c0004239:	31 f6                	xor    esi,esi
c000423b:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000423e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004244:	0f 84 2f ff ff ff    	je     c0004179 <f_lseek+0x4d>
c000424a:	89 c2                	mov    edx,eax
c000424c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004250:	e8 3d db ff ff       	call   c0001d92 <clst2sect>
c0004255:	85 c0                	test   eax,eax
c0004257:	0f 84 6f ff ff ff    	je     c00041cc <f_lseek+0xa0>
c000425d:	c1 ee 09             	shr    esi,0x9
c0004260:	01 c6                	add    esi,eax
c0004262:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004265:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004268:	76 07                	jbe    c0004271 <f_lseek+0x145>
c000426a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000426d:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004271:	a9 ff 01 00 00       	test   eax,0x1ff
c0004276:	74 51                	je     c00042c9 <f_lseek+0x19d>
c0004278:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000427b:	39 f0                	cmp    eax,esi
c000427d:	74 4a                	je     c00042c9 <f_lseek+0x19d>
c000427f:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004282:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004286:	79 21                	jns    c00042a9 <f_lseek+0x17d>
c0004288:	6a 01                	push   0x1
c000428a:	50                   	push   eax
c000428b:	57                   	push   edi
c000428c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004290:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004294:	50                   	push   eax
c0004295:	e8 7d d8 ff ff       	call   c0001b17 <disk_write>
c000429a:	83 c4 10             	add    esp,0x10
c000429d:	85 c0                	test   eax,eax
c000429f:	0f 85 3a ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042a5:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00042a9:	6a 01                	push   0x1
c00042ab:	56                   	push   esi
c00042ac:	57                   	push   edi
c00042ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b5:	50                   	push   eax
c00042b6:	e8 46 d8 ff ff       	call   c0001b01 <disk_read>
c00042bb:	83 c4 10             	add    esp,0x10
c00042be:	85 c0                	test   eax,eax
c00042c0:	0f 85 19 ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042c6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00042c9:	83 c4 2c             	add    esp,0x2c
c00042cc:	89 e8                	mov    eax,ebp
c00042ce:	5b                   	pop    ebx
c00042cf:	5e                   	pop    esi
c00042d0:	5f                   	pop    edi
c00042d1:	5d                   	pop    ebp
c00042d2:	c3                   	ret    

c00042d3 <f_opendir>:
c00042d3:	56                   	push   esi
c00042d4:	b8 09 00 00 00       	mov    eax,0x9
c00042d9:	53                   	push   ebx
c00042da:	83 ec 24             	sub    esp,0x24
c00042dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00042e1:	85 db                	test   ebx,ebx
c00042e3:	0f 84 af 00 00 00    	je     c0004398 <f_opendir+0xc5>
c00042e9:	31 c9                	xor    ecx,ecx
c00042eb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042ef:	8d 44 24 34          	lea    eax,[esp+0x34]
c00042f3:	e8 cd de ff ff       	call   c00021c5 <mount_volume>
c00042f8:	85 c0                	test   eax,eax
c00042fa:	0f 85 92 00 00 00    	jne    c0004392 <f_opendir+0xbf>
c0004300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004304:	83 ec 0c             	sub    esp,0xc
c0004307:	89 03                	mov    DWORD PTR [ebx],eax
c0004309:	68 00 02 00 00       	push   0x200
c000430e:	e8 85 15 00 00       	call   c0005898 <ff_memalloc>
c0004313:	83 c4 10             	add    esp,0x10
c0004316:	89 c6                	mov    esi,eax
c0004318:	b8 11 00 00 00       	mov    eax,0x11
c000431d:	85 f6                	test   esi,esi
c000431f:	74 77                	je     c0004398 <f_opendir+0xc5>
c0004321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004325:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004329:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000432c:	89 d8                	mov    eax,ebx
c000432e:	e8 9c f3 ff ff       	call   c00036cf <follow_path>
c0004333:	85 c0                	test   eax,eax
c0004335:	75 37                	jne    c000436e <f_opendir+0x9b>
c0004337:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000433b:	78 1c                	js     c0004359 <f_opendir+0x86>
c000433d:	b8 05 00 00 00       	mov    eax,0x5
c0004342:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004346:	74 26                	je     c000436e <f_opendir+0x9b>
c0004348:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000434b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000434f:	8a 00                	mov    al,BYTE PTR [eax]
c0004351:	e8 97 eb ff ff       	call   c0002eed <ld_clust.isra.0>
c0004356:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000435d:	31 d2                	xor    edx,edx
c000435f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004363:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004367:	89 d8                	mov    eax,ebx
c0004369:	e8 d2 ec ff ff       	call   c0003040 <dir_sdi>
c000436e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004372:	83 ec 0c             	sub    esp,0xc
c0004375:	56                   	push   esi
c0004376:	e8 35 15 00 00       	call   c00058b0 <ff_memfree>
c000437b:	83 c4 10             	add    esp,0x10
c000437e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004382:	83 f8 04             	cmp    eax,0x4
c0004385:	74 06                	je     c000438d <f_opendir+0xba>
c0004387:	85 c0                	test   eax,eax
c0004389:	74 0d                	je     c0004398 <f_opendir+0xc5>
c000438b:	eb 05                	jmp    c0004392 <f_opendir+0xbf>
c000438d:	b8 05 00 00 00       	mov    eax,0x5
c0004392:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004398:	83 c4 24             	add    esp,0x24
c000439b:	5b                   	pop    ebx
c000439c:	5e                   	pop    esi
c000439d:	c3                   	ret    

c000439e <f_closedir>:
c000439e:	53                   	push   ebx
c000439f:	83 ec 18             	sub    esp,0x18
c00043a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00043a6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00043aa:	89 d8                	mov    eax,ebx
c00043ac:	e8 17 dc ff ff       	call   c0001fc8 <validate>
c00043b1:	85 c0                	test   eax,eax
c00043b3:	75 06                	jne    c00043bb <f_closedir+0x1d>
c00043b5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00043bb:	83 c4 18             	add    esp,0x18
c00043be:	5b                   	pop    ebx
c00043bf:	c3                   	ret    

c00043c0 <f_readdir>:
c00043c0:	57                   	push   edi
c00043c1:	56                   	push   esi
c00043c2:	53                   	push   ebx
c00043c3:	83 ec 20             	sub    esp,0x20
c00043c6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00043ca:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00043ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00043d2:	89 d8                	mov    eax,ebx
c00043d4:	e8 ef db ff ff       	call   c0001fc8 <validate>
c00043d9:	85 c0                	test   eax,eax
c00043db:	75 6e                	jne    c000444b <f_readdir+0x8b>
c00043dd:	85 ff                	test   edi,edi
c00043df:	75 0b                	jne    c00043ec <f_readdir+0x2c>
c00043e1:	31 d2                	xor    edx,edx
c00043e3:	89 d8                	mov    eax,ebx
c00043e5:	e8 56 ec ff ff       	call   c0003040 <dir_sdi>
c00043ea:	eb 5f                	jmp    c000444b <f_readdir+0x8b>
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	68 00 02 00 00       	push   0x200
c00043f4:	e8 9f 14 00 00       	call   c0005898 <ff_memalloc>
c00043f9:	83 c4 10             	add    esp,0x10
c00043fc:	89 c6                	mov    esi,eax
c00043fe:	b8 11 00 00 00       	mov    eax,0x11
c0004403:	85 f6                	test   esi,esi
c0004405:	74 44                	je     c000444b <f_readdir+0x8b>
c0004407:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000440b:	31 d2                	xor    edx,edx
c000440d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004410:	89 d8                	mov    eax,ebx
c0004412:	e8 1a f0 ff ff       	call   c0003431 <dir_read>
c0004417:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000441c:	75 19                	jne    c0004437 <f_readdir+0x77>
c000441e:	89 fa                	mov    edx,edi
c0004420:	89 d8                	mov    eax,ebx
c0004422:	e8 e2 e8 ff ff       	call   c0002d09 <get_fileinfo>
c0004427:	31 d2                	xor    edx,edx
c0004429:	89 d8                	mov    eax,ebx
c000442b:	e8 9b ee ff ff       	call   c00032cb <dir_next>
c0004430:	83 f8 04             	cmp    eax,0x4
c0004433:	75 02                	jne    c0004437 <f_readdir+0x77>
c0004435:	31 c0                	xor    eax,eax
c0004437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000443b:	83 ec 0c             	sub    esp,0xc
c000443e:	56                   	push   esi
c000443f:	e8 6c 14 00 00       	call   c00058b0 <ff_memfree>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000444b:	83 c4 20             	add    esp,0x20
c000444e:	5b                   	pop    ebx
c000444f:	5e                   	pop    esi
c0004450:	5f                   	pop    edi
c0004451:	c3                   	ret    

c0004452 <f_stat>:
c0004452:	57                   	push   edi
c0004453:	31 c9                	xor    ecx,ecx
c0004455:	56                   	push   esi
c0004456:	53                   	push   ebx
c0004457:	83 ec 30             	sub    esp,0x30
c000445a:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000445e:	89 e2                	mov    edx,esp
c0004460:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004464:	e8 5c dd ff ff       	call   c00021c5 <mount_volume>
c0004469:	89 c3                	mov    ebx,eax
c000446b:	85 c0                	test   eax,eax
c000446d:	75 59                	jne    c00044c8 <f_stat+0x76>
c000446f:	83 ec 0c             	sub    esp,0xc
c0004472:	bb 11 00 00 00       	mov    ebx,0x11
c0004477:	68 00 02 00 00       	push   0x200
c000447c:	e8 17 14 00 00       	call   c0005898 <ff_memalloc>
c0004481:	83 c4 10             	add    esp,0x10
c0004484:	89 c6                	mov    esi,eax
c0004486:	85 c0                	test   eax,eax
c0004488:	74 3e                	je     c00044c8 <f_stat+0x76>
c000448a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000448d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004491:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004494:	89 e0                	mov    eax,esp
c0004496:	e8 34 f2 ff ff       	call   c00036cf <follow_path>
c000449b:	89 c3                	mov    ebx,eax
c000449d:	85 c0                	test   eax,eax
c000449f:	75 1b                	jne    c00044bc <f_stat+0x6a>
c00044a1:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00044a6:	78 0f                	js     c00044b7 <f_stat+0x65>
c00044a8:	85 ff                	test   edi,edi
c00044aa:	74 10                	je     c00044bc <f_stat+0x6a>
c00044ac:	89 fa                	mov    edx,edi
c00044ae:	89 e0                	mov    eax,esp
c00044b0:	e8 54 e8 ff ff       	call   c0002d09 <get_fileinfo>
c00044b5:	eb 05                	jmp    c00044bc <f_stat+0x6a>
c00044b7:	bb 06 00 00 00       	mov    ebx,0x6
c00044bc:	83 ec 0c             	sub    esp,0xc
c00044bf:	56                   	push   esi
c00044c0:	e8 eb 13 00 00       	call   c00058b0 <ff_memfree>
c00044c5:	83 c4 10             	add    esp,0x10
c00044c8:	83 c4 30             	add    esp,0x30
c00044cb:	89 d8                	mov    eax,ebx
c00044cd:	5b                   	pop    ebx
c00044ce:	5e                   	pop    esi
c00044cf:	5f                   	pop    edi
c00044d0:	c3                   	ret    

c00044d1 <f_getfree>:
c00044d1:	55                   	push   ebp
c00044d2:	31 c9                	xor    ecx,ecx
c00044d4:	57                   	push   edi
c00044d5:	56                   	push   esi
c00044d6:	53                   	push   ebx
c00044d7:	83 ec 2c             	sub    esp,0x2c
c00044da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044de:	8d 44 24 40          	lea    eax,[esp+0x40]
c00044e2:	e8 de dc ff ff       	call   c00021c5 <mount_volume>
c00044e7:	89 c7                	mov    edi,eax
c00044e9:	85 c0                	test   eax,eax
c00044eb:	0f 85 d8 00 00 00    	jne    c00045c9 <f_getfree+0xf8>
c00044f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00044f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00044f9:	89 30                	mov    DWORD PTR [eax],esi
c00044fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00044fe:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004501:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004504:	39 d0                	cmp    eax,edx
c0004506:	77 0b                	ja     c0004513 <f_getfree+0x42>
c0004508:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000450c:	89 01                	mov    DWORD PTR [ecx],eax
c000450e:	e9 b6 00 00 00       	jmp    c00045c9 <f_getfree+0xf8>
c0004513:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004516:	75 29                	jne    c0004541 <f_getfree+0x70>
c0004518:	bd 02 00 00 00       	mov    ebp,0x2
c000451d:	31 db                	xor    ebx,ebx
c000451f:	89 ea                	mov    edx,ebp
c0004521:	89 f0                	mov    eax,esi
c0004523:	e8 16 ea ff ff       	call   c0002f3e <get_fat.isra.2>
c0004528:	83 f8 ff             	cmp    eax,0xffffffff
c000452b:	74 7b                	je     c00045a8 <f_getfree+0xd7>
c000452d:	83 f8 01             	cmp    eax,0x1
c0004530:	74 7d                	je     c00045af <f_getfree+0xde>
c0004532:	83 d3 00             	adc    ebx,0x0
c0004535:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004539:	45                   	inc    ebp
c000453a:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c000453d:	77 e0                	ja     c000451f <f_getfree+0x4e>
c000453f:	eb 77                	jmp    c00045b8 <f_getfree+0xe7>
c0004541:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004544:	31 db                	xor    ebx,ebx
c0004546:	31 f6                	xor    esi,esi
c0004548:	85 f6                	test   esi,esi
c000454a:	75 18                	jne    c0004564 <f_getfree+0x93>
c000454c:	8d 42 01             	lea    eax,[edx+0x1]
c000454f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004553:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004557:	e8 16 db ff ff       	call   c0002072 <move_window>
c000455c:	85 c0                	test   eax,eax
c000455e:	75 56                	jne    c00045b6 <f_getfree+0xe5>
c0004560:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004564:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004568:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000456c:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004570:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004573:	75 11                	jne    c0004586 <f_getfree+0xb5>
c0004575:	e8 d2 d5 ff ff       	call   c0001b4c <ld_word>
c000457a:	66 83 f8 01          	cmp    ax,0x1
c000457e:	83 d3 00             	adc    ebx,0x0
c0004581:	83 c6 02             	add    esi,0x2
c0004584:	eb 13                	jmp    c0004599 <f_getfree+0xc8>
c0004586:	e8 ce d5 ff ff       	call   c0001b59 <ld_dword>
c000458b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004590:	83 f8 01             	cmp    eax,0x1
c0004593:	83 d3 00             	adc    ebx,0x0
c0004596:	83 c6 04             	add    esi,0x4
c0004599:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000459f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00045a3:	4d                   	dec    ebp
c00045a4:	75 a2                	jne    c0004548 <f_getfree+0x77>
c00045a6:	eb 10                	jmp    c00045b8 <f_getfree+0xe7>
c00045a8:	bf 01 00 00 00       	mov    edi,0x1
c00045ad:	eb 09                	jmp    c00045b8 <f_getfree+0xe7>
c00045af:	bf 02 00 00 00       	mov    edi,0x2
c00045b4:	eb 02                	jmp    c00045b8 <f_getfree+0xe7>
c00045b6:	89 c7                	mov    edi,eax
c00045b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00045bc:	89 18                	mov    DWORD PTR [eax],ebx
c00045be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045c2:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00045c5:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00045c9:	83 c4 2c             	add    esp,0x2c
c00045cc:	89 f8                	mov    eax,edi
c00045ce:	5b                   	pop    ebx
c00045cf:	5e                   	pop    esi
c00045d0:	5f                   	pop    edi
c00045d1:	5d                   	pop    ebp
c00045d2:	c3                   	ret    

c00045d3 <f_truncate>:
c00045d3:	56                   	push   esi
c00045d4:	53                   	push   ebx
c00045d5:	83 ec 14             	sub    esp,0x14
c00045d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00045dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00045e0:	89 d8                	mov    eax,ebx
c00045e2:	e8 e1 d9 ff ff       	call   c0001fc8 <validate>
c00045e7:	89 c6                	mov    esi,eax
c00045e9:	85 c0                	test   eax,eax
c00045eb:	0f 85 be 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045f1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00045f5:	85 f6                	test   esi,esi
c00045f7:	0f 85 b2 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045fd:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004601:	0f 84 a3 00 00 00    	je     c00046aa <f_truncate+0xd7>
c0004607:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000460a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000460d:	0f 83 9c 00 00 00    	jae    c00046af <f_truncate+0xdc>
c0004613:	85 c0                	test   eax,eax
c0004615:	75 15                	jne    c000462c <f_truncate+0x59>
c0004617:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000461a:	31 c9                	xor    ecx,ecx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 1f ec ff ff       	call   c0003242 <remove_chain>
c0004623:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000462a:	eb 35                	jmp    c0004661 <f_truncate+0x8e>
c000462c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000462f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004631:	e8 08 e9 ff ff       	call   c0002f3e <get_fat.isra.2>
c0004636:	89 c2                	mov    edx,eax
c0004638:	b8 01 00 00 00       	mov    eax,0x1
c000463d:	83 fa ff             	cmp    edx,0xffffffff
c0004640:	74 1f                	je     c0004661 <f_truncate+0x8e>
c0004642:	b8 02 00 00 00       	mov    eax,0x2
c0004647:	83 fa 01             	cmp    edx,0x1
c000464a:	74 15                	je     c0004661 <f_truncate+0x8e>
c000464c:	31 c0                	xor    eax,eax
c000464e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004652:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004655:	76 0a                	jbe    c0004661 <f_truncate+0x8e>
c0004657:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000465a:	89 d8                	mov    eax,ebx
c000465c:	e8 e1 eb ff ff       	call   c0003242 <remove_chain>
c0004661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004664:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004667:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000466a:	83 ca 40             	or     edx,0x40
c000466d:	85 c0                	test   eax,eax
c000466f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004672:	75 2f                	jne    c00046a3 <f_truncate+0xd0>
c0004674:	84 d2                	test   dl,dl
c0004676:	79 37                	jns    c00046af <f_truncate+0xdc>
c0004678:	6a 01                	push   0x1
c000467a:	8d 43 28             	lea    eax,[ebx+0x28]
c000467d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004680:	50                   	push   eax
c0004681:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004685:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004689:	50                   	push   eax
c000468a:	e8 88 d4 ff ff       	call   c0001b17 <disk_write>
c000468f:	83 c4 10             	add    esp,0x10
c0004692:	85 c0                	test   eax,eax
c0004694:	75 08                	jne    c000469e <f_truncate+0xcb>
c0004696:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000469a:	31 f6                	xor    esi,esi
c000469c:	eb 11                	jmp    c00046af <f_truncate+0xdc>
c000469e:	b8 01 00 00 00       	mov    eax,0x1
c00046a3:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00046a6:	89 c6                	mov    esi,eax
c00046a8:	eb 05                	jmp    c00046af <f_truncate+0xdc>
c00046aa:	be 07 00 00 00       	mov    esi,0x7
c00046af:	89 f0                	mov    eax,esi
c00046b1:	83 c4 14             	add    esp,0x14
c00046b4:	5b                   	pop    ebx
c00046b5:	5e                   	pop    esi
c00046b6:	c3                   	ret    

c00046b7 <f_unlink>:
c00046b7:	55                   	push   ebp
c00046b8:	b9 02 00 00 00       	mov    ecx,0x2
c00046bd:	57                   	push   edi
c00046be:	56                   	push   esi
c00046bf:	53                   	push   ebx
c00046c0:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00046c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046ca:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00046d1:	e8 ef da ff ff       	call   c00021c5 <mount_volume>
c00046d6:	85 c0                	test   eax,eax
c00046d8:	0f 85 f0 00 00 00    	jne    c00047ce <f_unlink+0x117>
c00046de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046e2:	83 ec 0c             	sub    esp,0xc
c00046e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00046e9:	68 00 02 00 00       	push   0x200
c00046ee:	e8 a5 11 00 00       	call   c0005898 <ff_memalloc>
c00046f3:	83 c4 10             	add    esp,0x10
c00046f6:	89 c3                	mov    ebx,eax
c00046f8:	b8 11 00 00 00       	mov    eax,0x11
c00046fd:	85 db                	test   ebx,ebx
c00046ff:	0f 84 c9 00 00 00    	je     c00047ce <f_unlink+0x117>
c0004705:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004709:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004710:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004713:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004717:	e8 b3 ef ff ff       	call   c00036cf <follow_path>
c000471c:	85 c0                	test   eax,eax
c000471e:	0f 85 96 00 00 00    	jne    c00047ba <f_unlink+0x103>
c0004724:	b8 06 00 00 00       	mov    eax,0x6
c0004729:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000472e:	0f 88 86 00 00 00    	js     c00047ba <f_unlink+0x103>
c0004734:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004739:	f7 c5 01 00 00 00    	test   ebp,0x1
c000473f:	74 07                	je     c0004748 <f_unlink+0x91>
c0004741:	b8 07 00 00 00       	mov    eax,0x7
c0004746:	eb 72                	jmp    c00047ba <f_unlink+0x103>
c0004748:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000474c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004750:	8a 07                	mov    al,BYTE PTR [edi]
c0004752:	e8 96 e7 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004757:	83 e5 10             	and    ebp,0x10
c000475a:	89 c6                	mov    esi,eax
c000475c:	75 0f                	jne    c000476d <f_unlink+0xb6>
c000475e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004762:	e8 e7 ed ff ff       	call   c000354e <dir_remove>
c0004767:	85 c0                	test   eax,eax
c0004769:	74 2f                	je     c000479a <f_unlink+0xe3>
c000476b:	eb 4d                	jmp    c00047ba <f_unlink+0x103>
c000476d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004771:	31 d2                	xor    edx,edx
c0004773:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004777:	8d 44 24 50          	lea    eax,[esp+0x50]
c000477b:	e8 c0 e8 ff ff       	call   c0003040 <dir_sdi>
c0004780:	85 c0                	test   eax,eax
c0004782:	75 36                	jne    c00047ba <f_unlink+0x103>
c0004784:	31 d2                	xor    edx,edx
c0004786:	8d 44 24 50          	lea    eax,[esp+0x50]
c000478a:	e8 a2 ec ff ff       	call   c0003431 <dir_read>
c000478f:	85 c0                	test   eax,eax
c0004791:	74 ae                	je     c0004741 <f_unlink+0x8a>
c0004793:	83 f8 04             	cmp    eax,0x4
c0004796:	75 22                	jne    c00047ba <f_unlink+0x103>
c0004798:	eb c4                	jmp    c000475e <f_unlink+0xa7>
c000479a:	85 f6                	test   esi,esi
c000479c:	75 0b                	jne    c00047a9 <f_unlink+0xf2>
c000479e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047a2:	e8 0b e3 ff ff       	call   c0002ab2 <sync_fs>
c00047a7:	eb 11                	jmp    c00047ba <f_unlink+0x103>
c00047a9:	31 c9                	xor    ecx,ecx
c00047ab:	89 f2                	mov    edx,esi
c00047ad:	8d 44 24 20          	lea    eax,[esp+0x20]
c00047b1:	e8 8c ea ff ff       	call   c0003242 <remove_chain>
c00047b6:	85 c0                	test   eax,eax
c00047b8:	74 e4                	je     c000479e <f_unlink+0xe7>
c00047ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00047be:	83 ec 0c             	sub    esp,0xc
c00047c1:	53                   	push   ebx
c00047c2:	e8 e9 10 00 00       	call   c00058b0 <ff_memfree>
c00047c7:	83 c4 10             	add    esp,0x10
c00047ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ce:	81 c4 8c 00 00 00    	add    esp,0x8c
c00047d4:	5b                   	pop    ebx
c00047d5:	5e                   	pop    esi
c00047d6:	5f                   	pop    edi
c00047d7:	5d                   	pop    ebp
c00047d8:	c3                   	ret    

c00047d9 <f_mkdir>:
c00047d9:	57                   	push   edi
c00047da:	b9 02 00 00 00       	mov    ecx,0x2
c00047df:	56                   	push   esi
c00047e0:	53                   	push   ebx
c00047e1:	83 ec 50             	sub    esp,0x50
c00047e4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047e8:	8d 44 24 60          	lea    eax,[esp+0x60]
c00047ec:	e8 d4 d9 ff ff       	call   c00021c5 <mount_volume>
c00047f1:	89 c3                	mov    ebx,eax
c00047f3:	85 c0                	test   eax,eax
c00047f5:	0f 85 70 01 00 00    	jne    c000496b <f_mkdir+0x192>
c00047fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ff:	bb 11 00 00 00       	mov    ebx,0x11
c0004804:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004808:	83 ec 0c             	sub    esp,0xc
c000480b:	68 00 02 00 00       	push   0x200
c0004810:	e8 83 10 00 00       	call   c0005898 <ff_memalloc>
c0004815:	83 c4 10             	add    esp,0x10
c0004818:	89 c7                	mov    edi,eax
c000481a:	85 c0                	test   eax,eax
c000481c:	0f 84 49 01 00 00    	je     c000496b <f_mkdir+0x192>
c0004822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004826:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000482a:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000482d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004831:	e8 99 ee ff ff       	call   c00036cf <follow_path>
c0004836:	89 c3                	mov    ebx,eax
c0004838:	85 c0                	test   eax,eax
c000483a:	74 3e                	je     c000487a <f_mkdir+0xa1>
c000483c:	83 f8 04             	cmp    eax,0x4
c000483f:	75 3e                	jne    c000487f <f_mkdir+0xa6>
c0004841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004845:	31 d2                	xor    edx,edx
c0004847:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000484b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000484f:	e8 b4 e8 ff ff       	call   c0003108 <create_chain>
c0004854:	89 c6                	mov    esi,eax
c0004856:	85 c0                	test   eax,eax
c0004858:	74 0c                	je     c0004866 <f_mkdir+0x8d>
c000485a:	bb 02 00 00 00       	mov    ebx,0x2
c000485f:	83 f8 01             	cmp    eax,0x1
c0004862:	74 07                	je     c000486b <f_mkdir+0x92>
c0004864:	eb 2a                	jmp    c0004890 <f_mkdir+0xb7>
c0004866:	bb 07 00 00 00       	mov    ebx,0x7
c000486b:	31 c9                	xor    ecx,ecx
c000486d:	89 f2                	mov    edx,esi
c000486f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004873:	e8 ca e9 ff ff       	call   c0003242 <remove_chain>
c0004878:	eb 05                	jmp    c000487f <f_mkdir+0xa6>
c000487a:	bb 08 00 00 00       	mov    ebx,0x8
c000487f:	83 ec 0c             	sub    esp,0xc
c0004882:	57                   	push   edi
c0004883:	e8 28 10 00 00       	call   c00058b0 <ff_memfree>
c0004888:	83 c4 10             	add    esp,0x10
c000488b:	e9 db 00 00 00       	jmp    c000496b <f_mkdir+0x192>
c0004890:	bb 01 00 00 00       	mov    ebx,0x1
c0004895:	83 f8 ff             	cmp    eax,0xffffffff
c0004898:	74 d1                	je     c000486b <f_mkdir+0x92>
c000489a:	89 f2                	mov    edx,esi
c000489c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a0:	e8 73 dd ff ff       	call   c0002618 <dir_clear>
c00048a5:	89 c3                	mov    ebx,eax
c00048a7:	85 c0                	test   eax,eax
c00048a9:	75 c0                	jne    c000486b <f_mkdir+0x92>
c00048ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00048b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048b4:	ba 20 00 00 00       	mov    edx,0x20
c00048b9:	83 c0 34             	add    eax,0x34
c00048bc:	e8 cc d2 ff ff       	call   c0001b8d <mem_set>
c00048c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00048ca:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c00048ce:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c00048d2:	83 c0 4a             	add    eax,0x4a
c00048d5:	e8 9b d2 ff ff       	call   c0001b75 <st_dword>
c00048da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048de:	89 f1                	mov    ecx,esi
c00048e0:	8d 50 34             	lea    edx,[eax+0x34]
c00048e3:	e8 2e e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c00048e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048ec:	b9 20 00 00 00       	mov    ecx,0x20
c00048f1:	8d 50 34             	lea    edx,[eax+0x34]
c00048f4:	83 c0 54             	add    eax,0x54
c00048f7:	e8 7c d2 ff ff       	call   c0001b78 <mem_cpy>
c00048fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004900:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004904:	8d 50 54             	lea    edx,[eax+0x54]
c0004907:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c000490b:	e8 06 e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004914:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004918:	8d 44 24 20          	lea    eax,[esp+0x20]
c000491c:	e8 42 ee ff ff       	call   c0003763 <dir_register>
c0004921:	89 c3                	mov    ebx,eax
c0004923:	85 c0                	test   eax,eax
c0004925:	0f 85 40 ff ff ff    	jne    c000486b <f_mkdir+0x92>
c000492b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000492f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004934:	83 c0 16             	add    eax,0x16
c0004937:	e8 39 d2 ff ff       	call   c0001b75 <st_dword>
c000493c:	89 f1                	mov    ecx,esi
c000493e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004946:	e8 cb e5 ff ff       	call   c0002f16 <st_clust.isra.1>
c000494b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000494f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004953:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004957:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000495b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000495f:	e8 4e e1 ff ff       	call   c0002ab2 <sync_fs>
c0004964:	89 c3                	mov    ebx,eax
c0004966:	e9 14 ff ff ff       	jmp    c000487f <f_mkdir+0xa6>
c000496b:	83 c4 50             	add    esp,0x50
c000496e:	89 d8                	mov    eax,ebx
c0004970:	5b                   	pop    ebx
c0004971:	5e                   	pop    esi
c0004972:	5f                   	pop    edi
c0004973:	c3                   	ret    

c0004974 <f_rename>:
c0004974:	57                   	push   edi
c0004975:	56                   	push   esi
c0004976:	53                   	push   ebx
c0004977:	81 ec a0 00 00 00    	sub    esp,0xa0
c000497d:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004984:	e8 f2 d5 ff ff       	call   c0001f7b <get_ldnumber>
c0004989:	b9 02 00 00 00       	mov    ecx,0x2
c000498e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004992:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004999:	e8 27 d8 ff ff       	call   c00021c5 <mount_volume>
c000499e:	85 c0                	test   eax,eax
c00049a0:	0f 85 7a 01 00 00    	jne    c0004b20 <f_rename+0x1ac>
c00049a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049aa:	83 ec 0c             	sub    esp,0xc
c00049ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00049b1:	68 00 02 00 00       	push   0x200
c00049b6:	e8 dd 0e 00 00       	call   c0005898 <ff_memalloc>
c00049bb:	83 c4 10             	add    esp,0x10
c00049be:	89 c6                	mov    esi,eax
c00049c0:	b8 11 00 00 00       	mov    eax,0x11
c00049c5:	85 f6                	test   esi,esi
c00049c7:	0f 84 53 01 00 00    	je     c0004b20 <f_rename+0x1ac>
c00049cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d1:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c00049d8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049db:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049df:	e8 eb ec ff ff       	call   c00036cf <follow_path>
c00049e4:	85 c0                	test   eax,eax
c00049e6:	0f 85 20 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049ec:	b8 06 00 00 00       	mov    eax,0x6
c00049f1:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c00049f6:	0f 85 10 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049fc:	b9 20 00 00 00       	mov    ecx,0x20
c0004a01:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a05:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a09:	e8 6a d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a0e:	b9 30 00 00 00       	mov    ecx,0x30
c0004a13:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004a17:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a1b:	e8 58 d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a20:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004a27:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a2b:	e8 9f ec ff ff       	call   c00036cf <follow_path>
c0004a30:	85 c0                	test   eax,eax
c0004a32:	75 20                	jne    c0004a54 <f_rename+0xe0>
c0004a34:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004a38:	b8 08 00 00 00       	mov    eax,0x8
c0004a3d:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004a41:	0f 85 c5 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a47:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004a4b:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004a52:	eb 03                	jmp    c0004a57 <f_rename+0xe3>
c0004a54:	83 f8 04             	cmp    eax,0x4
c0004a57:	0f 85 af 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a5d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a61:	e8 fd ec ff ff       	call   c0003763 <dir_register>
c0004a66:	85 c0                	test   eax,eax
c0004a68:	0f 85 9e 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a6e:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004a75:	b9 13 00 00 00       	mov    ecx,0x13
c0004a7a:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004a7d:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004a81:	e8 f2 d0 ff ff       	call   c0001b78 <mem_cpy>
c0004a86:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004a8a:	a8 10                	test   al,0x10
c0004a8c:	75 03                	jne    c0004a91 <f_rename+0x11d>
c0004a8e:	83 c8 20             	or     eax,0x20
c0004a91:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004a94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a98:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004a9c:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004aa0:	74 54                	je     c0004af6 <f_rename+0x182>
c0004aa2:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004aa6:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004aaa:	74 4a                	je     c0004af6 <f_rename+0x182>
c0004aac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab0:	89 da                	mov    edx,ebx
c0004ab2:	8a 07                	mov    al,BYTE PTR [edi]
c0004ab4:	e8 34 e4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004ab9:	89 c2                	mov    edx,eax
c0004abb:	89 f8                	mov    eax,edi
c0004abd:	e8 d0 d2 ff ff       	call   c0001d92 <clst2sect>
c0004ac2:	89 c2                	mov    edx,eax
c0004ac4:	b8 02 00 00 00       	mov    eax,0x2
c0004ac9:	85 d2                	test   edx,edx
c0004acb:	74 3f                	je     c0004b0c <f_rename+0x198>
c0004acd:	89 f8                	mov    eax,edi
c0004acf:	e8 9e d5 ff ff       	call   c0002072 <move_window>
c0004ad4:	85 c0                	test   eax,eax
c0004ad6:	75 34                	jne    c0004b0c <f_rename+0x198>
c0004ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004adc:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ae0:	75 14                	jne    c0004af6 <f_rename+0x182>
c0004ae2:	8d 50 54             	lea    edx,[eax+0x54]
c0004ae5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004ae9:	e8 28 e4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004af2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004af6:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004afa:	e8 4f ea ff ff       	call   c000354e <dir_remove>
c0004aff:	85 c0                	test   eax,eax
c0004b01:	75 09                	jne    c0004b0c <f_rename+0x198>
c0004b03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b07:	e8 a6 df ff ff       	call   c0002ab2 <sync_fs>
c0004b0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b10:	83 ec 0c             	sub    esp,0xc
c0004b13:	56                   	push   esi
c0004b14:	e8 97 0d 00 00       	call   c00058b0 <ff_memfree>
c0004b19:	83 c4 10             	add    esp,0x10
c0004b1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b20:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004b26:	5b                   	pop    ebx
c0004b27:	5e                   	pop    esi
c0004b28:	5f                   	pop    edi
c0004b29:	c3                   	ret    

c0004b2a <f_chmod>:
c0004b2a:	57                   	push   edi
c0004b2b:	b9 02 00 00 00       	mov    ecx,0x2
c0004b30:	56                   	push   esi
c0004b31:	53                   	push   ebx
c0004b32:	83 ec 50             	sub    esp,0x50
c0004b35:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004b39:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004b3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b41:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b45:	e8 7b d6 ff ff       	call   c00021c5 <mount_volume>
c0004b4a:	85 c0                	test   eax,eax
c0004b4c:	75 7e                	jne    c0004bcc <f_chmod+0xa2>
c0004b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b52:	83 ec 0c             	sub    esp,0xc
c0004b55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b59:	68 00 02 00 00       	push   0x200
c0004b5e:	e8 35 0d 00 00       	call   c0005898 <ff_memalloc>
c0004b63:	83 c4 10             	add    esp,0x10
c0004b66:	89 c6                	mov    esi,eax
c0004b68:	b8 11 00 00 00       	mov    eax,0x11
c0004b6d:	85 f6                	test   esi,esi
c0004b6f:	74 5b                	je     c0004bcc <f_chmod+0xa2>
c0004b71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b75:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b79:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b80:	e8 4a eb ff ff       	call   c00036cf <follow_path>
c0004b85:	85 c0                	test   eax,eax
c0004b87:	75 2f                	jne    c0004bb8 <f_chmod+0x8e>
c0004b89:	b8 06 00 00 00       	mov    eax,0x6
c0004b8e:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004b93:	75 23                	jne    c0004bb8 <f_chmod+0x8e>
c0004b95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b99:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004b9c:	21 fb                	and    ebx,edi
c0004b9e:	83 e3 27             	and    ebx,0x27
c0004ba1:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004ba4:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004baf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bb3:	e8 fa de ff ff       	call   c0002ab2 <sync_fs>
c0004bb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbc:	83 ec 0c             	sub    esp,0xc
c0004bbf:	56                   	push   esi
c0004bc0:	e8 eb 0c 00 00       	call   c00058b0 <ff_memfree>
c0004bc5:	83 c4 10             	add    esp,0x10
c0004bc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bcc:	83 c4 50             	add    esp,0x50
c0004bcf:	5b                   	pop    ebx
c0004bd0:	5e                   	pop    esi
c0004bd1:	5f                   	pop    edi
c0004bd2:	c3                   	ret    

c0004bd3 <f_utime>:
c0004bd3:	56                   	push   esi
c0004bd4:	b9 02 00 00 00       	mov    ecx,0x2
c0004bd9:	53                   	push   ebx
c0004bda:	83 ec 54             	sub    esp,0x54
c0004bdd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004be1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004be5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004be9:	e8 d7 d5 ff ff       	call   c00021c5 <mount_volume>
c0004bee:	85 c0                	test   eax,eax
c0004bf0:	0f 85 85 00 00 00    	jne    c0004c7b <f_utime+0xa8>
c0004bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bfa:	83 ec 0c             	sub    esp,0xc
c0004bfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c01:	68 00 02 00 00       	push   0x200
c0004c06:	e8 8d 0c 00 00       	call   c0005898 <ff_memalloc>
c0004c0b:	83 c4 10             	add    esp,0x10
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	b8 11 00 00 00       	mov    eax,0x11
c0004c15:	85 db                	test   ebx,ebx
c0004c17:	74 62                	je     c0004c7b <f_utime+0xa8>
c0004c19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c1d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c21:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c24:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c28:	e8 a2 ea ff ff       	call   c00036cf <follow_path>
c0004c2d:	85 c0                	test   eax,eax
c0004c2f:	75 36                	jne    c0004c67 <f_utime+0x94>
c0004c31:	b8 06 00 00 00       	mov    eax,0x6
c0004c36:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004c3b:	75 2a                	jne    c0004c67 <f_utime+0x94>
c0004c3d:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004c41:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004c45:	c1 e2 10             	shl    edx,0x10
c0004c48:	09 c2                	or     edx,eax
c0004c4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c4e:	83 c0 16             	add    eax,0x16
c0004c51:	e8 1f cf ff ff       	call   c0001b75 <st_dword>
c0004c56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c5a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c62:	e8 4b de ff ff       	call   c0002ab2 <sync_fs>
c0004c67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6b:	83 ec 0c             	sub    esp,0xc
c0004c6e:	53                   	push   ebx
c0004c6f:	e8 3c 0c 00 00       	call   c00058b0 <ff_memfree>
c0004c74:	83 c4 10             	add    esp,0x10
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	83 c4 54             	add    esp,0x54
c0004c7e:	5b                   	pop    ebx
c0004c7f:	5e                   	pop    esi
c0004c80:	c3                   	ret    

c0004c81 <f_getlabel>:
c0004c81:	55                   	push   ebp
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	57                   	push   edi
c0004c85:	56                   	push   esi
c0004c86:	53                   	push   ebx
c0004c87:	83 ec 5c             	sub    esp,0x5c
c0004c8a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c8e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c92:	e8 2e d5 ff ff       	call   c00021c5 <mount_volume>
c0004c97:	89 c6                	mov    esi,eax
c0004c99:	85 c0                	test   eax,eax
c0004c9b:	0f 85 27 01 00 00    	jne    c0004dc8 <f_getlabel+0x147>
c0004ca1:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ca6:	0f 84 d1 00 00 00    	je     c0004d7d <f_getlabel+0xfc>
c0004cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004cb6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004cbe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc2:	e8 79 e3 ff ff       	call   c0003040 <dir_sdi>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	0f 85 a2 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ccf:	ba 01 00 00 00       	mov    edx,0x1
c0004cd4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cd8:	e8 54 e7 ff ff       	call   c0003431 <dir_read>
c0004cdd:	85 c0                	test   eax,eax
c0004cdf:	0f 85 8c 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ce5:	31 db                	xor    ebx,ebx
c0004ce7:	31 c9                	xor    ecx,ecx
c0004ce9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ced:	8d 79 01             	lea    edi,[ecx+0x1]
c0004cf0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004cf5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004cfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cfe:	e8 ca ce ff ff       	call   c0001bcd <dbc_1st>
c0004d03:	85 c0                	test   eax,eax
c0004d05:	74 16                	je     c0004d1d <f_getlabel+0x9c>
c0004d07:	83 ff 0b             	cmp    edi,0xb
c0004d0a:	74 11                	je     c0004d1d <f_getlabel+0x9c>
c0004d0c:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004d11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d15:	8d 79 02             	lea    edi,[ecx+0x2]
c0004d18:	c1 e0 08             	shl    eax,0x8
c0004d1b:	09 c2                	or     edx,eax
c0004d1d:	0f b7 d2             	movzx  edx,dx
c0004d20:	50                   	push   eax
c0004d21:	50                   	push   eax
c0004d22:	68 b5 01 00 00       	push   0x1b5
c0004d27:	52                   	push   edx
c0004d28:	e8 3b 0c 00 00       	call   c0005968 <ff_oem2uni>
c0004d2d:	83 c4 10             	add    esp,0x10
c0004d30:	66 85 c0             	test   ax,ax
c0004d33:	74 25                	je     c0004d5a <f_getlabel+0xd9>
c0004d35:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004d39:	0f b7 c0             	movzx  eax,ax
c0004d3c:	01 da                	add    edx,ebx
c0004d3e:	b9 04 00 00 00       	mov    ecx,0x4
c0004d43:	e8 51 cf ff ff       	call   c0001c99 <put_utf>
c0004d48:	84 c0                	test   al,al
c0004d4a:	74 0e                	je     c0004d5a <f_getlabel+0xd9>
c0004d4c:	0f b6 c0             	movzx  eax,al
c0004d4f:	01 c3                	add    ebx,eax
c0004d51:	83 ff 0b             	cmp    edi,0xb
c0004d54:	74 06                	je     c0004d5c <f_getlabel+0xdb>
c0004d56:	89 f9                	mov    ecx,edi
c0004d58:	eb 8f                	jmp    c0004ce9 <f_getlabel+0x68>
c0004d5a:	31 db                	xor    ebx,ebx
c0004d5c:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004d60:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004d63:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004d67:	74 14                	je     c0004d7d <f_getlabel+0xfc>
c0004d69:	4b                   	dec    ebx
c0004d6a:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004d6d:	74 f1                	je     c0004d60 <f_getlabel+0xdf>
c0004d6f:	eb 0c                	jmp    c0004d7d <f_getlabel+0xfc>
c0004d71:	83 f8 04             	cmp    eax,0x4
c0004d74:	75 50                	jne    c0004dc6 <f_getlabel+0x145>
c0004d76:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004d7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d7d:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004d82:	74 44                	je     c0004dc8 <f_getlabel+0x147>
c0004d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d88:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004d8b:	e8 e2 d2 ff ff       	call   c0002072 <move_window>
c0004d90:	89 c6                	mov    esi,eax
c0004d92:	85 c0                	test   eax,eax
c0004d94:	75 32                	jne    c0004dc8 <f_getlabel+0x147>
c0004d96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004d9a:	b8 43 00 00 00       	mov    eax,0x43
c0004d9f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004da1:	80 f9 03             	cmp    cl,0x3
c0004da4:	74 0f                	je     c0004db5 <f_getlabel+0x134>
c0004da6:	31 c0                	xor    eax,eax
c0004da8:	80 f9 04             	cmp    cl,0x4
c0004dab:	0f 94 c0             	sete   al
c0004dae:	48                   	dec    eax
c0004daf:	83 e0 c3             	and    eax,0xffffffc3
c0004db2:	83 c0 64             	add    eax,0x64
c0004db5:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004db9:	e8 9b cd ff ff       	call   c0001b59 <ld_dword>
c0004dbe:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004dc2:	89 07                	mov    DWORD PTR [edi],eax
c0004dc4:	eb 02                	jmp    c0004dc8 <f_getlabel+0x147>
c0004dc6:	89 c6                	mov    esi,eax
c0004dc8:	83 c4 5c             	add    esp,0x5c
c0004dcb:	89 f0                	mov    eax,esi
c0004dcd:	5b                   	pop    ebx
c0004dce:	5e                   	pop    esi
c0004dcf:	5f                   	pop    edi
c0004dd0:	5d                   	pop    ebp
c0004dd1:	c3                   	ret    

c0004dd2 <f_setlabel>:
c0004dd2:	56                   	push   esi
c0004dd3:	b9 02 00 00 00       	mov    ecx,0x2
c0004dd8:	53                   	push   ebx
c0004dd9:	83 ec 54             	sub    esp,0x54
c0004ddc:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004de0:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004de4:	e8 dc d3 ff ff       	call   c00021c5 <mount_volume>
c0004de9:	89 c6                	mov    esi,eax
c0004deb:	85 c0                	test   eax,eax
c0004ded:	0f 85 67 01 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004df3:	b9 0b 00 00 00       	mov    ecx,0xb
c0004df8:	ba 20 00 00 00       	mov    edx,0x20
c0004dfd:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004e01:	31 db                	xor    ebx,ebx
c0004e03:	e8 85 cd ff ff       	call   c0001b8d <mem_set>
c0004e08:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004e0c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e0f:	76 5b                	jbe    c0004e6c <f_setlabel+0x9a>
c0004e11:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e15:	e8 b9 cd ff ff       	call   c0001bd3 <tchar2uni>
c0004e1a:	3d ff ff 00 00       	cmp    eax,0xffff
c0004e1f:	76 0a                	jbe    c0004e2b <f_setlabel+0x59>
c0004e21:	be 06 00 00 00       	mov    esi,0x6
c0004e26:	e9 2f 01 00 00       	jmp    c0004f5a <f_setlabel+0x188>
c0004e2b:	83 ec 0c             	sub    esp,0xc
c0004e2e:	50                   	push   eax
c0004e2f:	e8 ac 0b 00 00       	call   c00059e0 <ff_wtoupper>
c0004e34:	5a                   	pop    edx
c0004e35:	59                   	pop    ecx
c0004e36:	68 b5 01 00 00       	push   0x1b5
c0004e3b:	50                   	push   eax
c0004e3c:	e8 87 0a 00 00       	call   c00058c8 <ff_uni2oem>
c0004e41:	83 c4 10             	add    esp,0x10
c0004e44:	89 c6                	mov    esi,eax
c0004e46:	66 85 c0             	test   ax,ax
c0004e49:	74 d6                	je     c0004e21 <f_setlabel+0x4f>
c0004e4b:	0f b7 d0             	movzx  edx,ax
c0004e4e:	b8 70 c6 01 c0       	mov    eax,0xc001c670
c0004e53:	e8 63 cd ff ff       	call   c0001bbb <chk_chr>
c0004e58:	85 c0                	test   eax,eax
c0004e5a:	75 c5                	jne    c0004e21 <f_setlabel+0x4f>
c0004e5c:	66 81 fe ff 00       	cmp    si,0xff
c0004e61:	0f 87 c9 00 00 00    	ja     c0004f30 <f_setlabel+0x15e>
c0004e67:	e9 e4 00 00 00       	jmp    c0004f50 <f_setlabel+0x17e>
c0004e6c:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0004e71:	74 ae                	je     c0004e21 <f_setlabel+0x4f>
c0004e73:	85 db                	test   ebx,ebx
c0004e75:	74 0e                	je     c0004e85 <f_setlabel+0xb3>
c0004e77:	8d 43 ff             	lea    eax,[ebx-0x1]
c0004e7a:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0004e7f:	75 04                	jne    c0004e85 <f_setlabel+0xb3>
c0004e81:	89 c3                	mov    ebx,eax
c0004e83:	eb ee                	jmp    c0004e73 <f_setlabel+0xa1>
c0004e85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004e89:	31 d2                	xor    edx,edx
c0004e8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e8f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9b:	e8 a0 e1 ff ff       	call   c0003040 <dir_sdi>
c0004ea0:	89 c6                	mov    esi,eax
c0004ea2:	85 c0                	test   eax,eax
c0004ea4:	0f 85 b0 00 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004eaa:	ba 01 00 00 00       	mov    edx,0x1
c0004eaf:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb3:	e8 79 e5 ff ff       	call   c0003431 <dir_read>
c0004eb8:	85 c0                	test   eax,eax
c0004eba:	75 18                	jne    c0004ed4 <f_setlabel+0x102>
c0004ebc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ec0:	85 db                	test   ebx,ebx
c0004ec2:	74 0b                	je     c0004ecf <f_setlabel+0xfd>
c0004ec4:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ec9:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004ecd:	eb 47                	jmp    c0004f16 <f_setlabel+0x144>
c0004ecf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0004ed2:	eb 47                	jmp    c0004f1b <f_setlabel+0x149>
c0004ed4:	83 f8 04             	cmp    eax,0x4
c0004ed7:	75 53                	jne    c0004f2c <f_setlabel+0x15a>
c0004ed9:	85 db                	test   ebx,ebx
c0004edb:	74 7d                	je     c0004f5a <f_setlabel+0x188>
c0004edd:	ba 01 00 00 00       	mov    edx,0x1
c0004ee2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ee6:	e8 e5 e4 ff ff       	call   c00033d0 <dir_alloc>
c0004eeb:	89 c6                	mov    esi,eax
c0004eed:	85 c0                	test   eax,eax
c0004eef:	75 69                	jne    c0004f5a <f_setlabel+0x188>
c0004ef1:	b9 20 00 00 00       	mov    ecx,0x20
c0004ef6:	31 d2                	xor    edx,edx
c0004ef8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004efc:	e8 8c cc ff ff       	call   c0001b8d <mem_set>
c0004f01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f05:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f0a:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0004f0e:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004f12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f16:	e8 5d cc ff ff       	call   c0001b78 <mem_cpy>
c0004f1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f27:	e8 86 db ff ff       	call   c0002ab2 <sync_fs>
c0004f2c:	89 c6                	mov    esi,eax
c0004f2e:	eb 2a                	jmp    c0004f5a <f_setlabel+0x188>
c0004f30:	83 fb 09             	cmp    ebx,0x9
c0004f33:	0f 87 e8 fe ff ff    	ja     c0004e21 <f_setlabel+0x4f>
c0004f39:	89 f0                	mov    eax,esi
c0004f3b:	66 c1 e8 08          	shr    ax,0x8
c0004f3f:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f43:	43                   	inc    ebx
c0004f44:	89 f0                	mov    eax,esi
c0004f46:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f4a:	43                   	inc    ebx
c0004f4b:	e9 b8 fe ff ff       	jmp    c0004e08 <f_setlabel+0x36>
c0004f50:	83 fb 0a             	cmp    ebx,0xa
c0004f53:	76 ef                	jbe    c0004f44 <f_setlabel+0x172>
c0004f55:	e9 c7 fe ff ff       	jmp    c0004e21 <f_setlabel+0x4f>
c0004f5a:	89 f0                	mov    eax,esi
c0004f5c:	83 c4 54             	add    esp,0x54
c0004f5f:	5b                   	pop    ebx
c0004f60:	5e                   	pop    esi
c0004f61:	c3                   	ret    

c0004f62 <f_expand>:
c0004f62:	55                   	push   ebp
c0004f63:	57                   	push   edi
c0004f64:	56                   	push   esi
c0004f65:	53                   	push   ebx
c0004f66:	83 ec 2c             	sub    esp,0x2c
c0004f69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004f71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f75:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f79:	89 d8                	mov    eax,ebx
c0004f7b:	e8 48 d0 ff ff       	call   c0001fc8 <validate>
c0004f80:	89 c6                	mov    esi,eax
c0004f82:	85 c0                	test   eax,eax
c0004f84:	0f 85 2e 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f8a:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004f8e:	85 f6                	test   esi,esi
c0004f90:	0f 85 22 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f96:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0004f9b:	75 0a                	jne    c0004fa7 <f_expand+0x45>
c0004f9d:	be 07 00 00 00       	mov    esi,0x7
c0004fa2:	e9 11 01 00 00       	jmp    c00050b8 <f_expand+0x156>
c0004fa7:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0004fab:	75 f0                	jne    c0004f9d <f_expand+0x3b>
c0004fad:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004fb1:	74 ea                	je     c0004f9d <f_expand+0x3b>
c0004fb3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004fb7:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0004fbb:	c1 e1 09             	shl    ecx,0x9
c0004fbe:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004fc1:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0004fc5:	0f 95 c0             	setne  al
c0004fc8:	31 d2                	xor    edx,edx
c0004fca:	0f b6 c0             	movzx  eax,al
c0004fcd:	89 c7                	mov    edi,eax
c0004fcf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004fd3:	f7 f1                	div    ecx
c0004fd5:	01 f8                	add    eax,edi
c0004fd7:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0004fda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004fde:	83 ff 01             	cmp    edi,0x1
c0004fe1:	76 05                	jbe    c0004fe8 <f_expand+0x86>
c0004fe3:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0004fe6:	77 05                	ja     c0004fed <f_expand+0x8b>
c0004fe8:	bf 02 00 00 00       	mov    edi,0x2
c0004fed:	89 3c 24             	mov    DWORD PTR [esp],edi
c0004ff0:	89 fd                	mov    ebp,edi
c0004ff2:	31 c9                	xor    ecx,ecx
c0004ff4:	89 ea                	mov    edx,ebp
c0004ff6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004ffa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004ffc:	45                   	inc    ebp
c0004ffd:	e8 3c df ff ff       	call   c0002f3e <get_fat.isra.2>
c0005002:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000500a:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000500d:	77 05                	ja     c0005014 <f_expand+0xb2>
c000500f:	bd 02 00 00 00       	mov    ebp,0x2
c0005014:	83 f8 01             	cmp    eax,0x1
c0005017:	74 20                	je     c0005039 <f_expand+0xd7>
c0005019:	83 f8 ff             	cmp    eax,0xffffffff
c000501c:	74 22                	je     c0005040 <f_expand+0xde>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 09                	jne    c000502b <f_expand+0xc9>
c0005022:	41                   	inc    ecx
c0005023:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005027:	75 07                	jne    c0005030 <f_expand+0xce>
c0005029:	eb 1c                	jmp    c0005047 <f_expand+0xe5>
c000502b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000502e:	31 c9                	xor    ecx,ecx
c0005030:	39 fd                	cmp    ebp,edi
c0005032:	75 c0                	jne    c0004ff4 <f_expand+0x92>
c0005034:	e9 64 ff ff ff       	jmp    c0004f9d <f_expand+0x3b>
c0005039:	be 02 00 00 00       	mov    esi,0x2
c000503e:	eb 78                	jmp    c00050b8 <f_expand+0x156>
c0005040:	be 01 00 00 00       	mov    esi,0x1
c0005045:	eb 71                	jmp    c00050b8 <f_expand+0x156>
c0005047:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000504c:	74 2b                	je     c0005079 <f_expand+0x117>
c000504e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005051:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005055:	85 ed                	test   ebp,ebp
c0005057:	74 24                	je     c000507d <f_expand+0x11b>
c0005059:	83 c9 ff             	or     ecx,0xffffffff
c000505c:	83 fd 01             	cmp    ebp,0x1
c000505f:	74 03                	je     c0005064 <f_expand+0x102>
c0005061:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005064:	89 fa                	mov    edx,edi
c0005066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000506a:	e8 59 d4 ff ff       	call   c00024c8 <put_fat>
c000506f:	85 c0                	test   eax,eax
c0005071:	75 43                	jne    c00050b6 <f_expand+0x154>
c0005073:	89 f8                	mov    eax,edi
c0005075:	4d                   	dec    ebp
c0005076:	47                   	inc    edi
c0005077:	eb dc                	jmp    c0005055 <f_expand+0xf3>
c0005079:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000507c:	48                   	dec    eax
c000507d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005081:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005086:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005089:	74 2d                	je     c00050b8 <f_expand+0x156>
c000508b:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000508f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005092:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005095:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005099:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000509c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000509f:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00050a2:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00050a5:	39 c8                	cmp    eax,ecx
c00050a7:	77 0f                	ja     c00050b8 <f_expand+0x156>
c00050a9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00050ad:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00050b1:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050b4:	eb 02                	jmp    c00050b8 <f_expand+0x156>
c00050b6:	89 c6                	mov    esi,eax
c00050b8:	83 c4 2c             	add    esp,0x2c
c00050bb:	89 f0                	mov    eax,esi
c00050bd:	5b                   	pop    ebx
c00050be:	5e                   	pop    esi
c00050bf:	5f                   	pop    edi
c00050c0:	5d                   	pop    ebp
c00050c1:	c3                   	ret    

c00050c2 <f_mkfs>:
c00050c2:	55                   	push   ebp
c00050c3:	57                   	push   edi
c00050c4:	bf 0b 00 00 00       	mov    edi,0xb
c00050c9:	56                   	push   esi
c00050ca:	53                   	push   ebx
c00050cb:	83 ec 4c             	sub    esp,0x4c
c00050ce:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00050d2:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00050d6:	8d 44 24 60          	lea    eax,[esp+0x60]
c00050da:	e8 9c ce ff ff       	call   c0001f7b <get_ldnumber>
c00050df:	85 c0                	test   eax,eax
c00050e1:	0f 88 a6 07 00 00    	js     c000588d <f_mkfs+0x7cb>
c00050e7:	8b 14 85 a0 f5 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0a60]
c00050ee:	85 d2                	test   edx,edx
c00050f0:	74 03                	je     c00050f5 <f_mkfs+0x33>
c00050f2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00050f5:	85 db                	test   ebx,ebx
c00050f7:	75 05                	jne    c00050fe <f_mkfs+0x3c>
c00050f9:	bb 60 c6 01 c0       	mov    ebx,0xc001c660
c00050fe:	83 ec 0c             	sub    esp,0xc
c0005101:	0f b6 c0             	movzx  eax,al
c0005104:	bf 03 00 00 00       	mov    edi,0x3
c0005109:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000510d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005111:	e8 e8 c9 ff ff       	call   c0001afe <disk_initialize>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	a8 01                	test   al,0x1
c000511b:	0f 85 6c 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c0005121:	bf 0a 00 00 00       	mov    edi,0xa
c0005126:	a8 04                	test   al,0x4
c0005128:	0f 85 5f 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c000512e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005131:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005135:	85 c0                	test   eax,eax
c0005137:	75 20                	jne    c0005159 <f_mkfs+0x97>
c0005139:	51                   	push   ecx
c000513a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000513e:	50                   	push   eax
c000513f:	6a 03                	push   0x3
c0005141:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005145:	e8 e3 c9 ff ff       	call   c0001b2d <disk_ioctl>
c000514a:	83 c4 10             	add    esp,0x10
c000514d:	85 c0                	test   eax,eax
c000514f:	74 08                	je     c0005159 <f_mkfs+0x97>
c0005151:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005159:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000515d:	8d 42 ff             	lea    eax,[edx-0x1]
c0005160:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005165:	77 04                	ja     c000516b <f_mkfs+0xa9>
c0005167:	85 c2                	test   edx,eax
c0005169:	74 08                	je     c0005173 <f_mkfs+0xb1>
c000516b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005173:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005176:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000517a:	48                   	dec    eax
c000517b:	3c 01                	cmp    al,0x1
c000517d:	76 05                	jbe    c0005184 <f_mkfs+0xc2>
c000517f:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005184:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518b:	48                   	dec    eax
c000518c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005191:	77 07                	ja     c000519a <f_mkfs+0xd8>
c0005193:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c0005198:	74 08                	je     c00051a2 <f_mkfs+0xe0>
c000519a:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00051a2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00051a5:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00051ab:	77 07                	ja     c00051b4 <f_mkfs+0xf2>
c00051ad:	8d 47 ff             	lea    eax,[edi-0x1]
c00051b0:	85 f8                	test   eax,edi
c00051b2:	74 02                	je     c00051b6 <f_mkfs+0xf4>
c00051b4:	31 ff                	xor    edi,edi
c00051b6:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00051be:	77 0a                	ja     c00051ca <f_mkfs+0x108>
c00051c0:	bf 11 00 00 00       	mov    edi,0x11
c00051c5:	e9 c3 06 00 00       	jmp    c000588d <f_mkfs+0x7cb>
c00051ca:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00051cc:	89 ee                	mov    esi,ebp
c00051ce:	85 ed                	test   ebp,ebp
c00051d0:	75 1b                	jne    c00051ed <f_mkfs+0x12b>
c00051d2:	83 ec 0c             	sub    esp,0xc
c00051d5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00051d9:	25 00 fe ff ff       	and    eax,0xfffffe00
c00051de:	50                   	push   eax
c00051df:	e8 b4 06 00 00       	call   c0005898 <ff_memalloc>
c00051e4:	83 c4 10             	add    esp,0x10
c00051e7:	89 c6                	mov    esi,eax
c00051e9:	85 c0                	test   eax,eax
c00051eb:	74 d3                	je     c00051c0 <f_mkfs+0xfe>
c00051ed:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00051f5:	52                   	push   edx
c00051f6:	8d 44 24 38          	lea    eax,[esp+0x38]
c00051fa:	50                   	push   eax
c00051fb:	6a 01                	push   0x1
c00051fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005201:	e8 27 c9 ff ff       	call   c0001b2d <disk_ioctl>
c0005206:	83 c4 10             	add    esp,0x10
c0005209:	85 c0                	test   eax,eax
c000520b:	0f 85 25 06 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005211:	88 d8                	mov    al,bl
c0005213:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000521b:	24 08                	and    al,0x8
c000521d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005221:	75 18                	jne    c000523b <f_mkfs+0x179>
c0005223:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005227:	83 f8 3f             	cmp    eax,0x3f
c000522a:	76 0f                	jbe    c000523b <f_mkfs+0x179>
c000522c:	83 e8 3f             	sub    eax,0x3f
c000522f:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c0005237:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000523b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000523f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005243:	83 f8 7f             	cmp    eax,0x7f
c0005246:	0f 86 52 02 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c000524c:	b9 80 00 00 00       	mov    ecx,0x80
c0005251:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005257:	77 05                	ja     c000525e <f_mkfs+0x19c>
c0005259:	89 f9                	mov    ecx,edi
c000525b:	c1 e9 09             	shr    ecx,0x9
c000525e:	88 d8                	mov    al,bl
c0005260:	83 e0 01             	and    eax,0x1
c0005263:	80 e3 02             	and    bl,0x2
c0005266:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000526a:	74 0a                	je     c0005276 <f_mkfs+0x1b4>
c000526c:	84 c0                	test   al,al
c000526e:	0f 84 4c 01 00 00    	je     c00053c0 <f_mkfs+0x2fe>
c0005274:	eb 38                	jmp    c00052ae <f_mkfs+0x1ec>
c0005276:	bf 13 00 00 00       	mov    edi,0x13
c000527b:	84 c0                	test   al,al
c000527d:	75 2f                	jne    c00052ae <f_mkfs+0x1ec>
c000527f:	e9 c9 05 00 00       	jmp    c000584d <f_mkfs+0x78b>
c0005284:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005289:	0f 85 08 02 00 00    	jne    c0005497 <f_mkfs+0x3d5>
c000528f:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005294:	0f 86 e1 01 00 00    	jbe    c000547b <f_mkfs+0x3b9>
c000529a:	85 c9                	test   ecx,ecx
c000529c:	0f 85 bd 05 00 00    	jne    c000585f <f_mkfs+0x79d>
c00052a2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00052a5:	83 f9 40             	cmp    ecx,0x40
c00052a8:	0f 87 c1 05 00 00    	ja     c000586f <f_mkfs+0x7ad>
c00052ae:	89 cf                	mov    edi,ecx
c00052b0:	85 c9                	test   ecx,ecx
c00052b2:	75 1d                	jne    c00052d1 <f_mkfs+0x20f>
c00052b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00052b8:	ba 40 c6 01 c0       	mov    edx,0xc001c640
c00052bd:	c1 eb 0c             	shr    ebx,0xc
c00052c0:	bf 01 00 00 00       	mov    edi,0x1
c00052c5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00052c8:	66 85 c0             	test   ax,ax
c00052cb:	0f 85 5f 01 00 00    	jne    c0005430 <f_mkfs+0x36e>
c00052d1:	31 d2                	xor    edx,edx
c00052d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00052d7:	f7 f7                	div    edi
c00052d9:	3d f5 0f 00 00       	cmp    eax,0xff5
c00052de:	0f 86 5e 01 00 00    	jbe    c0005442 <f_mkfs+0x380>
c00052e4:	83 c0 02             	add    eax,0x2
c00052e7:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00052ec:	01 c0                	add    eax,eax
c00052ee:	05 ff 01 00 00       	add    eax,0x1ff
c00052f3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00052fb:	c1 e8 09             	shr    eax,0x9
c00052fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005306:	c1 e0 05             	shl    eax,0x5
c0005309:	c1 e8 09             	shr    eax,0x9
c000530c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005310:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005319:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531d:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005321:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005329:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c000532e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005332:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000533a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000533e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005342:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005346:	f7 d8                	neg    eax
c0005348:	21 c3                	and    ebx,eax
c000534a:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c000534e:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005353:	0f 85 fc 00 00 00    	jne    c0005455 <f_mkfs+0x393>
c0005359:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c000535d:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005361:	89 f8                	mov    eax,edi
c0005363:	c1 e0 04             	shl    eax,0x4
c0005366:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000536a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000536e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005372:	0f 82 26 01 00 00    	jb     c000549e <f_mkfs+0x3dc>
c0005378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000537c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005380:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005384:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c0005389:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c000538d:	29 d0                	sub    eax,edx
c000538f:	31 d2                	xor    edx,edx
c0005391:	f7 f7                	div    edi
c0005393:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005398:	89 c3                	mov    ebx,eax
c000539a:	0f 85 e4 fe ff ff    	jne    c0005284 <f_mkfs+0x1c2>
c00053a0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00053a5:	0f 87 02 01 00 00    	ja     c00054ad <f_mkfs+0x3eb>
c00053ab:	85 c9                	test   ecx,ecx
c00053ad:	0f 85 eb 00 00 00    	jne    c000549e <f_mkfs+0x3dc>
c00053b3:	83 ff 01             	cmp    edi,0x1
c00053b6:	0f 86 e2 00 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c00053bc:	89 f9                	mov    ecx,edi
c00053be:	d1 e9                	shr    ecx,1
c00053c0:	89 cb                	mov    ebx,ecx
c00053c2:	85 c9                	test   ecx,ecx
c00053c4:	75 26                	jne    c00053ec <f_mkfs+0x32a>
c00053c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00053ca:	ba 50 c6 01 c0       	mov    edx,0xc001c650
c00053cf:	c1 eb 11             	shr    ebx,0x11
c00053d2:	b9 01 00 00 00       	mov    ecx,0x1
c00053d7:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00053da:	66 85 c0             	test   ax,ax
c00053dd:	74 0b                	je     c00053ea <f_mkfs+0x328>
c00053df:	83 c2 02             	add    edx,0x2
c00053e2:	39 d8                	cmp    eax,ebx
c00053e4:	77 04                	ja     c00053ea <f_mkfs+0x328>
c00053e6:	01 c9                	add    ecx,ecx
c00053e8:	eb ed                	jmp    c00053d7 <f_mkfs+0x315>
c00053ea:	31 db                	xor    ebx,ebx
c00053ec:	31 d2                	xor    edx,edx
c00053ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00053f2:	f7 f1                	div    ecx
c00053f4:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00053fb:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005400:	c1 ea 09             	shr    edx,0x9
c0005403:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005408:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000540c:	0f 87 8c 00 00 00    	ja     c000549e <f_mkfs+0x3dc>
c0005412:	89 cf                	mov    edi,ecx
c0005414:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000541c:	89 d9                	mov    ecx,ebx
c000541e:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005426:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000542b:	e9 e0 fe ff ff       	jmp    c0005310 <f_mkfs+0x24e>
c0005430:	83 c2 02             	add    edx,0x2
c0005433:	39 d8                	cmp    eax,ebx
c0005435:	0f 87 96 fe ff ff    	ja     c00052d1 <f_mkfs+0x20f>
c000543b:	01 ff                	add    edi,edi
c000543d:	e9 83 fe ff ff       	jmp    c00052c5 <f_mkfs+0x203>
c0005442:	8d 04 40             	lea    eax,[eax+eax*2]
c0005445:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000544a:	40                   	inc    eax
c000544b:	d1 e8                	shr    eax,1
c000544d:	83 c0 03             	add    eax,0x3
c0005450:	e9 99 fe ff ff       	jmp    c00052ee <f_mkfs+0x22c>
c0005455:	31 d2                	xor    edx,edx
c0005457:	89 d8                	mov    eax,ebx
c0005459:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000545d:	85 d2                	test   edx,edx
c000545f:	74 09                	je     c000546a <f_mkfs+0x3a8>
c0005461:	4b                   	dec    ebx
c0005462:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005466:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000546a:	89 d8                	mov    eax,ebx
c000546c:	31 d2                	xor    edx,edx
c000546e:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005472:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005476:	e9 e6 fe ff ff       	jmp    c0005361 <f_mkfs+0x29f>
c000547b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005480:	77 2b                	ja     c00054ad <f_mkfs+0x3eb>
c0005482:	85 c9                	test   ecx,ecx
c0005484:	75 18                	jne    c000549e <f_mkfs+0x3dc>
c0005486:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005489:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000548f:	0f 86 19 fe ff ff    	jbe    c00052ae <f_mkfs+0x1ec>
c0005495:	eb 07                	jmp    c000549e <f_mkfs+0x3dc>
c0005497:	3d f5 0f 00 00       	cmp    eax,0xff5
c000549c:	76 0a                	jbe    c00054a8 <f_mkfs+0x3e6>
c000549e:	bf 0e 00 00 00       	mov    edi,0xe
c00054a3:	e9 a5 03 00 00       	jmp    c000584d <f_mkfs+0x78b>
c00054a8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054ad:	31 d2                	xor    edx,edx
c00054af:	b9 00 02 00 00       	mov    ecx,0x200
c00054b4:	89 f0                	mov    eax,esi
c00054b6:	e8 d2 c6 ff ff       	call   c0001b8d <mem_set>
c00054bb:	b9 0b 00 00 00       	mov    ecx,0xb
c00054c0:	ba f2 c5 01 c0       	mov    edx,0xc001c5f2
c00054c5:	89 f0                	mov    eax,esi
c00054c7:	e8 ac c6 ff ff       	call   c0001b78 <mem_cpy>
c00054cc:	8d 46 0b             	lea    eax,[esi+0xb]
c00054cf:	ba 00 02 00 00       	mov    edx,0x200
c00054d4:	e8 98 c6 ff ff       	call   c0001b71 <st_word>
c00054d9:	89 f8                	mov    eax,edi
c00054db:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00054e0:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00054e3:	8d 46 0e             	lea    eax,[esi+0xe]
c00054e6:	e8 86 c6 ff ff       	call   c0001b71 <st_word>
c00054eb:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00054ef:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00054f4:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00054f7:	75 08                	jne    c0005501 <f_mkfs+0x43f>
c00054f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005501:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005505:	8d 46 11             	lea    eax,[esi+0x11]
c0005508:	e8 64 c6 ff ff       	call   c0001b71 <st_word>
c000550d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005511:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005517:	77 0a                	ja     c0005523 <f_mkfs+0x461>
c0005519:	8d 46 13             	lea    eax,[esi+0x13]
c000551c:	e8 50 c6 ff ff       	call   c0001b71 <st_word>
c0005521:	eb 08                	jmp    c000552b <f_mkfs+0x469>
c0005523:	8d 46 20             	lea    eax,[esi+0x20]
c0005526:	e8 4a c6 ff ff       	call   c0001b75 <st_dword>
c000552b:	8d 46 18             	lea    eax,[esi+0x18]
c000552e:	ba 3f 00 00 00       	mov    edx,0x3f
c0005533:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c0005537:	e8 35 c6 ff ff       	call   c0001b71 <st_word>
c000553c:	8d 46 1a             	lea    eax,[esi+0x1a]
c000553f:	ba ff 00 00 00       	mov    edx,0xff
c0005544:	e8 28 c6 ff ff       	call   c0001b71 <st_word>
c0005549:	8d 46 1c             	lea    eax,[esi+0x1c]
c000554c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005550:	e8 20 c6 ff ff       	call   c0001b75 <st_dword>
c0005555:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000555a:	75 57                	jne    c00055b3 <f_mkfs+0x4f1>
c000555c:	8d 46 43             	lea    eax,[esi+0x43]
c000555f:	ba 00 00 21 50       	mov    edx,0x50210000
c0005564:	e8 0c c6 ff ff       	call   c0001b75 <st_dword>
c0005569:	8d 46 24             	lea    eax,[esi+0x24]
c000556c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005570:	e8 00 c6 ff ff       	call   c0001b75 <st_dword>
c0005575:	8d 46 2c             	lea    eax,[esi+0x2c]
c0005578:	ba 02 00 00 00       	mov    edx,0x2
c000557d:	e8 f3 c5 ff ff       	call   c0001b75 <st_dword>
c0005582:	8d 46 30             	lea    eax,[esi+0x30]
c0005585:	ba 01 00 00 00       	mov    edx,0x1
c000558a:	e8 e2 c5 ff ff       	call   c0001b71 <st_word>
c000558f:	8d 46 32             	lea    eax,[esi+0x32]
c0005592:	ba 06 00 00 00       	mov    edx,0x6
c0005597:	e8 d5 c5 ff ff       	call   c0001b71 <st_word>
c000559c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c00055a0:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c00055a4:	8d 46 47             	lea    eax,[esi+0x47]
c00055a7:	b9 13 00 00 00       	mov    ecx,0x13
c00055ac:	ba fe c5 01 c0       	mov    edx,0xc001c5fe
c00055b1:	eb 2f                	jmp    c00055e2 <f_mkfs+0x520>
c00055b3:	8d 46 27             	lea    eax,[esi+0x27]
c00055b6:	ba 00 00 21 50       	mov    edx,0x50210000
c00055bb:	e8 b5 c5 ff ff       	call   c0001b75 <st_dword>
c00055c0:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00055c5:	8d 46 16             	lea    eax,[esi+0x16]
c00055c8:	e8 a4 c5 ff ff       	call   c0001b71 <st_word>
c00055cd:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00055d1:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00055d5:	8d 46 2b             	lea    eax,[esi+0x2b]
c00055d8:	b9 13 00 00 00       	mov    ecx,0x13
c00055dd:	ba 12 c6 01 c0       	mov    edx,0xc001c612
c00055e2:	e8 91 c5 ff ff       	call   c0001b78 <mem_cpy>
c00055e7:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00055ed:	ba 55 aa 00 00       	mov    edx,0xaa55
c00055f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055f6:	e8 76 c5 ff ff       	call   c0001b71 <st_word>
c00055fb:	6a 01                	push   0x1
c00055fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005601:	56                   	push   esi
c0005602:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005606:	e8 0c c5 ff ff       	call   c0001b17 <disk_write>
c000560b:	83 c4 10             	add    esp,0x10
c000560e:	85 c0                	test   eax,eax
c0005610:	0f 85 20 02 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005616:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000561b:	0f 85 98 00 00 00    	jne    c00056b9 <f_mkfs+0x5f7>
c0005621:	6a 01                	push   0x1
c0005623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005627:	83 c0 06             	add    eax,0x6
c000562a:	50                   	push   eax
c000562b:	56                   	push   esi
c000562c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005630:	e8 e2 c4 ff ff       	call   c0001b17 <disk_write>
c0005635:	b9 00 02 00 00       	mov    ecx,0x200
c000563a:	31 d2                	xor    edx,edx
c000563c:	89 f0                	mov    eax,esi
c000563e:	e8 4a c5 ff ff       	call   c0001b8d <mem_set>
c0005643:	ba 52 52 61 41       	mov    edx,0x41615252
c0005648:	89 f0                	mov    eax,esi
c000564a:	e8 26 c5 ff ff       	call   c0001b75 <st_dword>
c000564f:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005655:	ba 72 72 41 61       	mov    edx,0x61417272
c000565a:	e8 16 c5 ff ff       	call   c0001b75 <st_dword>
c000565f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005662:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c0005668:	e8 08 c5 ff ff       	call   c0001b75 <st_dword>
c000566d:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005673:	ba 02 00 00 00       	mov    edx,0x2
c0005678:	e8 f8 c4 ff ff       	call   c0001b75 <st_dword>
c000567d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005682:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c0005688:	e8 e4 c4 ff ff       	call   c0001b71 <st_word>
c000568d:	6a 01                	push   0x1
c000568f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005693:	83 c0 07             	add    eax,0x7
c0005696:	50                   	push   eax
c0005697:	56                   	push   esi
c0005698:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000569c:	e8 76 c4 ff ff       	call   c0001b17 <disk_write>
c00056a1:	83 c4 20             	add    esp,0x20
c00056a4:	6a 01                	push   0x1
c00056a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00056aa:	40                   	inc    eax
c00056ab:	50                   	push   eax
c00056ac:	56                   	push   esi
c00056ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00056b1:	e8 61 c4 ff ff       	call   c0001b17 <disk_write>
c00056b6:	83 c4 10             	add    esp,0x10
c00056b9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00056bd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00056c1:	c1 e8 09             	shr    eax,0x9
c00056c4:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00056ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056ce:	31 d2                	xor    edx,edx
c00056d0:	31 db                	xor    ebx,ebx
c00056d2:	89 f0                	mov    eax,esi
c00056d4:	e8 b4 c4 ff ff       	call   c0001b8d <mem_set>
c00056d9:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00056de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00056e6:	0f 94 c3             	sete   bl
c00056e9:	4b                   	dec    ebx
c00056ea:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00056f0:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00056f6:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056fb:	75 21                	jne    c000571e <f_mkfs+0x65c>
c00056fd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005702:	89 f0                	mov    eax,esi
c0005704:	e8 6c c4 ff ff       	call   c0001b75 <st_dword>
c0005709:	8d 46 04             	lea    eax,[esi+0x4]
c000570c:	83 ca ff             	or     edx,0xffffffff
c000570f:	e8 61 c4 ff ff       	call   c0001b75 <st_dword>
c0005714:	8d 46 08             	lea    eax,[esi+0x8]
c0005717:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000571c:	eb 04                	jmp    c0005722 <f_mkfs+0x660>
c000571e:	89 da                	mov    edx,ebx
c0005720:	89 f0                	mov    eax,esi
c0005722:	e8 4e c4 ff ff       	call   c0001b75 <st_dword>
c0005727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000572f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005737:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573b:	76 08                	jbe    c0005745 <f_mkfs+0x683>
c000573d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005745:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000574d:	56                   	push   esi
c000574e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005752:	e8 c0 c3 ff ff       	call   c0001b17 <disk_write>
c0005757:	83 c4 10             	add    esp,0x10
c000575a:	85 c0                	test   eax,eax
c000575c:	0f 85 d4 00 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005762:	b9 00 02 00 00       	mov    ecx,0x200
c0005767:	31 d2                	xor    edx,edx
c0005769:	89 f0                	mov    eax,esi
c000576b:	e8 1d c4 ff ff       	call   c0001b8d <mem_set>
c0005770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005774:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c0005778:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000577c:	75 b1                	jne    c000572f <f_mkfs+0x66d>
c000577e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005782:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000578a:	40                   	inc    eax
c000578b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000578f:	0f 87 61 ff ff ff    	ja     c00056f6 <f_mkfs+0x634>
c0005795:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000579a:	74 04                	je     c00057a0 <f_mkfs+0x6de>
c000579c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00057a0:	89 fb                	mov    ebx,edi
c00057a2:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00057a6:	76 04                	jbe    c00057ac <f_mkfs+0x6ea>
c00057a8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00057ac:	53                   	push   ebx
c00057ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00057b1:	56                   	push   esi
c00057b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057b6:	e8 5c c3 ff ff       	call   c0001b17 <disk_write>
c00057bb:	83 c4 10             	add    esp,0x10
c00057be:	85 c0                	test   eax,eax
c00057c0:	75 74                	jne    c0005836 <f_mkfs+0x774>
c00057c2:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00057c6:	29 df                	sub    edi,ebx
c00057c8:	75 d6                	jne    c00057a0 <f_mkfs+0x6de>
c00057ca:	b1 0c                	mov    cl,0xc
c00057cc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057d1:	74 18                	je     c00057eb <f_mkfs+0x729>
c00057d3:	b1 06                	mov    cl,0x6
c00057d5:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00057dd:	77 0c                	ja     c00057eb <f_mkfs+0x729>
c00057df:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00057e4:	0f 94 c1             	sete   cl
c00057e7:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00057eb:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00057f0:	75 2d                	jne    c000581f <f_mkfs+0x75d>
c00057f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00057f6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00057fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0005802:	0f b6 c9             	movzx  ecx,cl
c0005805:	83 ec 0c             	sub    esp,0xc
c0005808:	56                   	push   esi
c0005809:	8d 54 24 48          	lea    edx,[esp+0x48]
c000580d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005811:	e8 4c d3 ff ff       	call   c0002b62 <create_partition>
c0005816:	83 c4 10             	add    esp,0x10
c0005819:	89 c7                	mov    edi,eax
c000581b:	85 c0                	test   eax,eax
c000581d:	75 2e                	jne    c000584d <f_mkfs+0x78b>
c000581f:	31 ff                	xor    edi,edi
c0005821:	50                   	push   eax
c0005822:	6a 00                	push   0x0
c0005824:	6a 00                	push   0x0
c0005826:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000582a:	e8 fe c2 ff ff       	call   c0001b2d <disk_ioctl>
c000582f:	83 c4 10             	add    esp,0x10
c0005832:	85 c0                	test   eax,eax
c0005834:	74 17                	je     c000584d <f_mkfs+0x78b>
c0005836:	85 ed                	test   ebp,ebp
c0005838:	75 0c                	jne    c0005846 <f_mkfs+0x784>
c000583a:	83 ec 0c             	sub    esp,0xc
c000583d:	56                   	push   esi
c000583e:	e8 6d 00 00 00       	call   c00058b0 <ff_memfree>
c0005843:	83 c4 10             	add    esp,0x10
c0005846:	bf 01 00 00 00       	mov    edi,0x1
c000584b:	eb 40                	jmp    c000588d <f_mkfs+0x7cb>
c000584d:	85 ed                	test   ebp,ebp
c000584f:	75 3c                	jne    c000588d <f_mkfs+0x7cb>
c0005851:	83 ec 0c             	sub    esp,0xc
c0005854:	56                   	push   esi
c0005855:	e8 56 00 00 00       	call   c00058b0 <ff_memfree>
c000585a:	83 c4 10             	add    esp,0x10
c000585d:	eb 2e                	jmp    c000588d <f_mkfs+0x7cb>
c000585f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005864:	0f 85 56 fb ff ff    	jne    c00053c0 <f_mkfs+0x2fe>
c000586a:	e9 2f fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000586f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005874:	0f 85 4c fb ff ff    	jne    c00053c6 <f_mkfs+0x304>
c000587a:	89 cf                	mov    edi,ecx
c000587c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005882:	0f 86 49 fa ff ff    	jbe    c00052d1 <f_mkfs+0x20f>
c0005888:	e9 11 fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000588d:	83 c4 4c             	add    esp,0x4c
c0005890:	89 f8                	mov    eax,edi
c0005892:	5b                   	pop    ebx
c0005893:	5e                   	pop    esi
c0005894:	5f                   	pop    edi
c0005895:	5d                   	pop    ebp
c0005896:	c3                   	ret    
c0005897:	90                   	nop

c0005898 <ff_memalloc>:
c0005898:	83 ec 0c             	sub    esp,0xc
c000589b:	83 ec 0c             	sub    esp,0xc
c000589e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058a2:	e8 be 13 00 00       	call   c0006c65 <malloc>
c00058a7:	83 c4 10             	add    esp,0x10
c00058aa:	83 c4 0c             	add    esp,0xc
c00058ad:	c3                   	ret    
c00058ae:	66 90                	xchg   ax,ax

c00058b0 <ff_memfree>:
c00058b0:	83 ec 0c             	sub    esp,0xc
c00058b3:	83 ec 0c             	sub    esp,0xc
c00058b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058ba:	e8 b6 13 00 00       	call   c0006c75 <free>
c00058bf:	83 c4 10             	add    esp,0x10
c00058c2:	90                   	nop
c00058c3:	83 c4 0c             	add    esp,0xc
c00058c6:	c3                   	ret    
c00058c7:	90                   	nop

c00058c8 <ff_uni2oem>:
c00058c8:	83 ec 14             	sub    esp,0x14
c00058cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cf:	66 89 04 24          	mov    WORD PTR [esp],ax
c00058d3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00058da:	c7 44 24 0c 40 ca 01 c0 	mov    DWORD PTR [esp+0xc],0xc001ca40
c00058e2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00058e7:	77 0b                	ja     c00058f4 <ff_uni2oem+0x2c>
c00058e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ed:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00058f2:	eb 68                	jmp    c000595c <ff_uni2oem+0x94>
c00058f4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00058fc:	77 5e                	ja     c000595c <ff_uni2oem+0x94>
c00058fe:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005904:	75 56                	jne    c000595c <ff_uni2oem+0x94>
c0005906:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000590d:	eb 0d                	jmp    c000591c <ff_uni2oem+0x54>
c000590f:	90                   	nop
c0005910:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005915:	40                   	inc    eax
c0005916:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000591b:	90                   	nop
c000591c:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005922:	77 24                	ja     c0005948 <ff_uni2oem+0x80>
c0005924:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005929:	25 ff ff 00 00       	and    eax,0xffff
c000592e:	01 c0                	add    eax,eax
c0005930:	89 c2                	mov    edx,eax
c0005932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005936:	01 d0                	add    eax,edx
c0005938:	66 8b 00             	mov    ax,WORD PTR [eax]
c000593b:	25 ff ff 00 00       	and    eax,0xffff
c0005940:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005944:	75 ca                	jne    c0005910 <ff_uni2oem+0x48>
c0005946:	66 90                	xchg   ax,ax
c0005948:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000594d:	83 e8 80             	sub    eax,0xffffff80
c0005950:	25 ff 00 00 00       	and    eax,0xff
c0005955:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000595a:	66 90                	xchg   ax,ax
c000595c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005961:	83 c4 14             	add    esp,0x14
c0005964:	c3                   	ret    
c0005965:	8d 76 00             	lea    esi,[esi+0x0]

c0005968 <ff_oem2uni>:
c0005968:	83 ec 18             	sub    esp,0x18
c000596b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000596f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005973:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005978:	66 89 04 24          	mov    WORD PTR [esp],ax
c000597c:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005983:	c7 44 24 10 40 ca 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ca40
c000598b:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005991:	77 0d                	ja     c00059a0 <ff_oem2uni+0x38>
c0005993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005997:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000599c:	eb 36                	jmp    c00059d4 <ff_oem2uni+0x6c>
c000599e:	66 90                	xchg   ax,ax
c00059a0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00059a6:	75 2c                	jne    c00059d4 <ff_oem2uni+0x6c>
c00059a8:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00059af:	77 23                	ja     c00059d4 <ff_oem2uni+0x6c>
c00059b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059b5:	25 ff ff 00 00       	and    eax,0xffff
c00059ba:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00059bf:	01 c0                	add    eax,eax
c00059c1:	89 c2                	mov    edx,eax
c00059c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c7:	01 d0                	add    eax,edx
c00059c9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00059cc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00059d1:	8d 76 00             	lea    esi,[esi+0x0]
c00059d4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00059d9:	83 c4 18             	add    esp,0x18
c00059dc:	c3                   	ret    
c00059dd:	8d 76 00             	lea    esi,[esi+0x0]

c00059e0 <ff_wtoupper>:
c00059e0:	83 ec 10             	sub    esp,0x10
c00059e3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00059eb:	0f 87 77 01 00 00    	ja     c0005b68 <ff_wtoupper+0x188>
c00059f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059f5:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00059fa:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005a01:	77 09                	ja     c0005a0c <ff_wtoupper+0x2c>
c0005a03:	b8 40 c8 01 c0       	mov    eax,0xc001c840
c0005a08:	eb 0a                	jmp    c0005a14 <ff_wtoupper+0x34>
c0005a0a:	66 90                	xchg   ax,ax
c0005a0c:	b8 80 c7 01 c0       	mov    eax,0xc001c780
c0005a11:	8d 76 00             	lea    esi,[esi+0x0]
c0005a14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1c:	8d 50 02             	lea    edx,[eax+0x2]
c0005a1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a23:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a26:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005a2b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005a31:	0f 84 21 01 00 00    	je     c0005b58 <ff_wtoupper+0x178>
c0005a37:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a3c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005a41:	0f 82 11 01 00 00    	jb     c0005b58 <ff_wtoupper+0x178>
c0005a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a4b:	8d 50 02             	lea    edx,[eax+0x2]
c0005a4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a52:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a55:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005a5a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a5f:	66 c1 e8 08          	shr    ax,0x8
c0005a63:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005a68:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005a6f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a74:	31 d2                	xor    edx,edx
c0005a76:	66 89 c2             	mov    dx,ax
c0005a79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a7d:	31 c9                	xor    ecx,ecx
c0005a7f:	66 89 c1             	mov    cx,ax
c0005a82:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a87:	25 ff ff 00 00       	and    eax,0xffff
c0005a8c:	01 c8                	add    eax,ecx
c0005a8e:	39 c2                	cmp    edx,eax
c0005a90:	0f 8d 9a 00 00 00    	jge    c0005b30 <ff_wtoupper+0x150>
c0005a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a9a:	25 ff ff 00 00       	and    eax,0xffff
c0005a9f:	83 f8 08             	cmp    eax,0x8
c0005aa2:	0f 87 ac 00 00 00    	ja     c0005b54 <ff_wtoupper+0x174>
c0005aa8:	8b 04 85 40 c7 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe38c0]
c0005aaf:	ff e0                	jmp    eax
c0005ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ab4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ab9:	31 d2                	xor    edx,edx
c0005abb:	66 89 c2             	mov    dx,ax
c0005abe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005ac2:	25 ff ff 00 00       	and    eax,0xffff
c0005ac7:	29 c2                	sub    edx,eax
c0005ac9:	89 d0                	mov    eax,edx
c0005acb:	01 c0                	add    eax,eax
c0005acd:	89 c2                	mov    edx,eax
c0005acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ad3:	01 d0                	add    eax,edx
c0005ad5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ad8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005add:	eb 4d                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005adf:	90                   	nop
c0005ae0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ae5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005ae9:	83 e0 01             	and    eax,0x1
c0005aec:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005af1:	eb 39                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005af3:	90                   	nop
c0005af4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005afa:	eb 30                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005afc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005b02:	eb 28                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b04:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005b0a:	eb 20                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b0c:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005b12:	eb 18                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b14:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005b1a:	eb 10                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b1c:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005b22:	eb 08                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b24:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005b2b:	90                   	nop
c0005b2c:	eb 26                	jmp    c0005b54 <ff_wtoupper+0x174>
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005b36:	0f 85 dc fe ff ff    	jne    c0005a18 <ff_wtoupper+0x38>
c0005b3c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005b41:	25 ff ff 00 00       	and    eax,0xffff
c0005b46:	01 c0                	add    eax,eax
c0005b48:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005b4c:	e9 c7 fe ff ff       	jmp    c0005a18 <ff_wtoupper+0x38>
c0005b51:	8d 76 00             	lea    esi,[esi+0x0]
c0005b54:	90                   	nop
c0005b55:	8d 76 00             	lea    esi,[esi+0x0]
c0005b58:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005b5d:	25 ff ff 00 00       	and    eax,0xffff
c0005b62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b66:	66 90                	xchg   ax,ax
c0005b68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b6c:	83 c4 10             	add    esp,0x10
c0005b6f:	c3                   	ret    

c0005b70 <CPU::current()>:
c0005b70:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0005b75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0005b7b:	c3                   	ret    

c0005b7c <operator new(unsigned long)>:
c0005b7c:	e9 e4 10 00 00       	jmp    c0006c65 <malloc>

c0005b81 <operator delete(void*)>:
c0005b81:	e9 ff 10 00 00       	jmp    c0006c85 <rfree>

c0005b86 <disableIRQs()>:
c0005b86:	fa                   	cli    
c0005b87:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0005b8d:	c3                   	ret    

c0005b8e <enableIRQs()>:
c0005b8e:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0005b93:	48                   	dec    eax
c0005b94:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0005b99:	75 01                	jne    c0005b9c <enableIRQs()+0xe>
c0005b9b:	fb                   	sti    
c0005b9c:	c3                   	ret    

c0005b9d <lockScheduler()>:
c0005b9d:	fa                   	cli    
c0005b9e:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0005ba4:	c3                   	ret    

c0005ba5 <unlockScheduler()>:
c0005ba5:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0005baa:	48                   	dec    eax
c0005bab:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0005bb0:	75 01                	jne    c0005bb3 <unlockScheduler()+0xe>
c0005bb2:	fb                   	sti    
c0005bb3:	c3                   	ret    

c0005bb4 <lockStuff()>:
c0005bb4:	fa                   	cli    
c0005bb5:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0005bbb:	ff 05 e4 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae4
c0005bc1:	c3                   	ret    

c0005bc2 <unlockStuff()>:
c0005bc2:	83 ec 0c             	sub    esp,0xc
c0005bc5:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c0005bca:	48                   	dec    eax
c0005bcb:	a3 e4 2a 02 c0       	mov    ds:0xc0022ae4,eax
c0005bd0:	75 18                	jne    c0005bea <unlockStuff()+0x28>
c0005bd2:	83 3d e0 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022ae0,0x0
c0005bd9:	74 0f                	je     c0005bea <unlockStuff()+0x28>
c0005bdb:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c0005be5:	e8 96 ce 00 00       	call   c0012a80 <schedule()>
c0005bea:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0005bef:	48                   	dec    eax
c0005bf0:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0005bf5:	75 01                	jne    c0005bf8 <unlockStuff()+0x36>
c0005bf7:	fb                   	sti    
c0005bf8:	83 c4 0c             	add    esp,0xc
c0005bfb:	c3                   	ret    

c0005bfc <Virt::getAKernelVAS()>:
c0005bfc:	a1 f4 f6 01 c0       	mov    eax,ds:0xc001f6f4
c0005c01:	c3                   	ret    

c0005c02 <__not_memcpy>:
c0005c02:	57                   	push   edi
c0005c03:	56                   	push   esi
c0005c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c08:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c0c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005c10:	89 c7                	mov    edi,eax
c0005c12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0005c14:	5e                   	pop    esi
c0005c15:	5f                   	pop    edi
c0005c16:	c3                   	ret    
c0005c17:	90                   	nop

c0005c18 <Krnl::resolveCompatibilitySymbol(char*)>:
c0005c18:	83 ec 0c             	sub    esp,0xc
c0005c1b:	83 ec 08             	sub    esp,0x8
c0005c1e:	68 40 cb 01 c0       	push   0xc001cb40
c0005c23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c27:	e8 d4 aa ff ff       	call   c0000700 <strcmp>
c0005c2c:	83 c4 10             	add    esp,0x10
c0005c2f:	85 c0                	test   eax,eax
c0005c31:	0f 94 c0             	sete   al
c0005c34:	84 c0                	test   al,al
c0005c36:	74 0c                	je     c0005c44 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0005c38:	b8 08 f6 01 c0       	mov    eax,0xc001f608
c0005c3d:	e9 ea 00 00 00       	jmp    c0005d2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c42:	66 90                	xchg   ax,ax
c0005c44:	83 ec 08             	sub    esp,0x8
c0005c47:	68 49 cb 01 c0       	push   0xc001cb49
c0005c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c50:	e8 ab aa ff ff       	call   c0000700 <strcmp>
c0005c55:	83 c4 10             	add    esp,0x10
c0005c58:	85 c0                	test   eax,eax
c0005c5a:	0f 94 c0             	sete   al
c0005c5d:	84 c0                	test   al,al
c0005c5f:	74 0b                	je     c0005c6c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0005c61:	b8 e0 b7 01 c0       	mov    eax,0xc001b7e0
c0005c66:	e9 c1 00 00 00       	jmp    c0005d2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c6b:	90                   	nop
c0005c6c:	83 ec 08             	sub    esp,0x8
c0005c6f:	68 53 cb 01 c0       	push   0xc001cb53
c0005c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c78:	e8 83 aa ff ff       	call   c0000700 <strcmp>
c0005c7d:	83 c4 10             	add    esp,0x10
c0005c80:	85 c0                	test   eax,eax
c0005c82:	0f 94 c0             	sete   al
c0005c85:	84 c0                	test   al,al
c0005c87:	74 0b                	je     c0005c94 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0005c89:	b8 14 b5 01 c0       	mov    eax,0xc001b514
c0005c8e:	e9 99 00 00 00       	jmp    c0005d2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c93:	90                   	nop
c0005c94:	83 ec 08             	sub    esp,0x8
c0005c97:	68 5c cb 01 c0       	push   0xc001cb5c
c0005c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005ca0:	e8 5b aa ff ff       	call   c0000700 <strcmp>
c0005ca5:	83 c4 10             	add    esp,0x10
c0005ca8:	85 c0                	test   eax,eax
c0005caa:	0f 94 c0             	sete   al
c0005cad:	84 c0                	test   al,al
c0005caf:	74 07                	je     c0005cb8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0005cb1:	b8 e0 b8 01 c0       	mov    eax,0xc001b8e0
c0005cb6:	eb 74                	jmp    c0005d2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cb8:	83 ec 08             	sub    esp,0x8
c0005cbb:	68 66 cb 01 c0       	push   0xc001cb66
c0005cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cc4:	e8 37 aa ff ff       	call   c0000700 <strcmp>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	85 c0                	test   eax,eax
c0005cce:	0f 94 c0             	sete   al
c0005cd1:	84 c0                	test   al,al
c0005cd3:	74 07                	je     c0005cdc <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0005cd5:	b8 60 b6 01 c0       	mov    eax,0xc001b660
c0005cda:	eb 50                	jmp    c0005d2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cdc:	83 ec 08             	sub    esp,0x8
c0005cdf:	68 6f cb 01 c0       	push   0xc001cb6f
c0005ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005ce8:	e8 13 aa ff ff       	call   c0000700 <strcmp>
c0005ced:	83 c4 10             	add    esp,0x10
c0005cf0:	85 c0                	test   eax,eax
c0005cf2:	0f 94 c0             	sete   al
c0005cf5:	84 c0                	test   al,al
c0005cf7:	74 07                	je     c0005d00 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0005cf9:	b8 0c f6 01 c0       	mov    eax,0xc001f60c
c0005cfe:	eb 2c                	jmp    c0005d2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005d00:	83 ec 08             	sub    esp,0x8
c0005d03:	68 7c cb 01 c0       	push   0xc001cb7c
c0005d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d0c:	e8 ef a9 ff ff       	call   c0000700 <strcmp>
c0005d11:	83 c4 10             	add    esp,0x10
c0005d14:	85 c0                	test   eax,eax
c0005d16:	0f 94 c0             	sete   al
c0005d19:	84 c0                	test   al,al
c0005d1b:	74 07                	je     c0005d24 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0005d1d:	b8 0d f6 01 c0       	mov    eax,0xc001f60d
c0005d22:	eb 08                	jmp    c0005d2c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005d24:	b8 00 00 00 00       	mov    eax,0x0
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	83 c4 0c             	add    esp,0xc
c0005d2f:	c3                   	ret    

c0005d30 <Computer::close(int, int, void*)>:
c0005d30:	57                   	push   edi
c0005d31:	56                   	push   esi
c0005d32:	53                   	push   ebx
c0005d33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0005d37:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0005d3b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005d3f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0005d45:	83 ec 0c             	sub    esp,0xc
c0005d48:	50                   	push   eax
c0005d49:	e8 38 52 00 00       	call   c000af86 <Device::closeAll()>
c0005d4e:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0005d54:	83 c4 10             	add    esp,0x10
c0005d57:	8b 10                	mov    edx,DWORD PTR [eax]
c0005d59:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0005d5d:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0005d65:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0005d69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d6d:	5b                   	pop    ebx
c0005d6e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0005d71:	5e                   	pop    esi
c0005d72:	5f                   	pop    edi
c0005d73:	ff e0                	jmp    eax

c0005d75 <Krnl::firstTask()>:
c0005d75:	53                   	push   ebx
c0005d76:	83 ec 14             	sub    esp,0x14
c0005d79:	fb                   	sti    
c0005d7a:	68 89 cb 01 c0       	push   0xc001cb89
c0005d7f:	e8 3b 0f 00 00       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c0005d84:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0005d8b:	e8 d5 0e 00 00       	call   c0006c65 <malloc>
c0005d90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005d97:	89 c3                	mov    ebx,eax
c0005d99:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c0005d9e:	50                   	push   eax
c0005d9f:	68 a2 cb 01 c0       	push   0xc001cba2
c0005da4:	6a 01                	push   0x1
c0005da6:	53                   	push   ebx
c0005da7:	e8 a8 c8 00 00       	call   c0012654 <Process::Process(bool, char const*, Process*, char**)>
c0005dac:	83 c4 20             	add    esp,0x20
c0005daf:	68 ff 00 00 00       	push   0xff
c0005db4:	6a 00                	push   0x0
c0005db6:	68 bd 66 00 c0       	push   0xc00066bd
c0005dbb:	53                   	push   ebx
c0005dbc:	e8 9f ca 00 00       	call   c0012860 <Process::createThread(void (*)(void*), void*, int)>
c0005dc1:	8b 15 10 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022b10
c0005dc7:	6a 7a                	push   0x7a
c0005dc9:	6a 00                	push   0x0
c0005dcb:	68 b4 32 01 c0       	push   0xc00132b4
c0005dd0:	52                   	push   edx
c0005dd1:	e8 8a ca 00 00       	call   c0012860 <Process::createThread(void (*)(void*), void*, int)>
c0005dd6:	83 c4 14             	add    esp,0x14
c0005dd9:	a3 c8 2a 02 c0       	mov    ds:0xc0022ac8,eax
c0005dde:	68 a0 cc 01 c0       	push   0xc001cca0
c0005de3:	c6 05 0d f6 01 c0 01 	mov    BYTE PTR ds:0xc001f60d,0x1
c0005dea:	e8 d0 0e 00 00       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c0005def:	e8 9f d8 00 00       	call   c0013693 <Vm::initialise8086()>
c0005df4:	e8 d1 3f 00 00       	call   c0009dca <Fs::initVFS()>
c0005df9:	c7 04 24 af cb 01 c0 	mov    DWORD PTR [esp],0xc001cbaf
c0005e00:	e8 ba 0e 00 00       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c0005e05:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0005e0a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0005e10:	8b 10                	mov    edx,DWORD PTR [eax]
c0005e12:	6a 00                	push   0x0
c0005e14:	6a 00                	push   0x0
c0005e16:	6a 00                	push   0x0
c0005e18:	50                   	push   eax
c0005e19:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0005e1c:	83 c4 14             	add    esp,0x14
c0005e1f:	68 a0 cc 01 c0       	push   0xc001cca0
c0005e24:	e8 96 0e 00 00       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c0005e29:	e8 b8 b0 00 00       	call   c0010ee6 <Sys::loadSyscalls()>
c0005e2e:	e8 65 96 00 00       	call   c000f498 <Krnl::loadSystemEnv()>
c0005e33:	e8 b4 9a 00 00       	call   c000f8ec <Krnl::setupPowerManager()>
c0005e38:	83 c4 0c             	add    esp,0xc
c0005e3b:	6a 3a                	push   0x3a
c0005e3d:	68 c9 cb 01 c0       	push   0xc001cbc9
c0005e42:	68 d2 cb 01 c0       	push   0xc001cbd2
c0005e47:	e8 ca 9f 00 00       	call   c000fe16 <Reg::readIntWithDefault(char*, char*, int)>
c0005e4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005e4f:	e8 84 4a 00 00       	call   c000a8d8 <User::loadClockSettings(int)>
c0005e54:	c7 04 24 c4 cc 01 c0 	mov    DWORD PTR [esp],0xc001ccc4
c0005e5b:	e8 5f 0e 00 00       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c0005e60:	59                   	pop    ecx
c0005e61:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0005e66:	8b 98 e4 01 00 00    	mov    ebx,DWORD PTR [eax+0x1e4]
c0005e6c:	53                   	push   ebx
c0005e6d:	e8 12 51 00 00       	call   c000af84 <Device::loadDriversForAll()>
c0005e72:	c7 04 24 da cb 01 c0 	mov    DWORD PTR [esp],0xc001cbda
c0005e79:	e8 41 0e 00 00       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c0005e7e:	e8 9b 91 00 00       	call   c000f01e <Krnl::startCPUs()>
c0005e83:	c7 04 24 f4 cb 01 c0 	mov    DWORD PTR [esp],0xc001cbf4
c0005e8a:	e8 30 0e 00 00       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c0005e8f:	58                   	pop    eax
c0005e90:	8b 1d 08 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f608
c0005e96:	5a                   	pop    edx
c0005e97:	6a 01                	push   0x1
c0005e99:	68 05 cc 01 c0       	push   0xc001cc05
c0005e9e:	e8 eb c1 00 00       	call   c001208e <Thr::loadDLL(char const*, bool)>
c0005ea3:	59                   	pop    ecx
c0005ea4:	5a                   	pop    edx
c0005ea5:	53                   	push   ebx
c0005ea6:	50                   	push   eax
c0005ea7:	e8 13 c4 00 00       	call   c00122bf <Thr::executeDLL(unsigned long, void*)>
c0005eac:	83 c4 10             	add    esp,0x10
c0005eaf:	83 ec 0c             	sub    esp,0xc
c0005eb2:	6a 02                	push   0x2
c0005eb4:	e8 c3 cd 00 00       	call   c0012c7c <blockTask(TaskState)>
c0005eb9:	83 c4 10             	add    esp,0x10
c0005ebc:	eb f1                	jmp    c0005eaf <Krnl::firstTask()+0x13a>

c0005ebe <Computer::Computer()>:
c0005ebe:	83 ec 0c             	sub    esp,0xc
c0005ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ec5:	83 ec 08             	sub    esp,0x8
c0005ec8:	68 21 cc 01 c0       	push   0xc001cc21
c0005ecd:	50                   	push   eax
c0005ece:	e8 2d 51 00 00       	call   c000b000 <Device::Device(char const*)>
c0005ed3:	83 c4 10             	add    esp,0x10
c0005ed6:	ba 10 cd 01 c0       	mov    edx,0xc001cd10
c0005edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005edf:	89 10                	mov    DWORD PTR [eax],edx
c0005ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ee5:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0005eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ef3:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0005efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f01:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0005f07:	83 ca 04             	or     edx,0x4
c0005f0a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0005f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f14:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f1a:	31 d2                	xor    edx,edx
c0005f1c:	88 c2                	mov    dl,al
c0005f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f22:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0005f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f2d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f33:	31 d2                	xor    edx,edx
c0005f35:	88 c2                	mov    dl,al
c0005f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0005f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f4a:	8d 50 01             	lea    edx,[eax+0x1]
c0005f4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005f51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005f57:	31 d2                	xor    edx,edx
c0005f59:	88 c2                	mov    dl,al
c0005f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f5f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005f63:	83 e1 3f             	and    ecx,0x3f
c0005f66:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f74:	31 d2                	xor    edx,edx
c0005f76:	88 c2                	mov    dl,al
c0005f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f7c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0005f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f87:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f8d:	31 d2                	xor    edx,edx
c0005f8f:	88 c2                	mov    dl,al
c0005f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f95:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0005f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f9e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005fa4:	8d 50 01             	lea    edx,[eax+0x1]
c0005fa7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005fab:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005fb1:	31 d2                	xor    edx,edx
c0005fb3:	88 c2                	mov    dl,al
c0005fb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fb9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005fbd:	83 e1 3f             	and    ecx,0x3f
c0005fc0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fc8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005fce:	31 d2                	xor    edx,edx
c0005fd0:	88 c2                	mov    dl,al
c0005fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fd6:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0005fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fe1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005fe7:	31 d2                	xor    edx,edx
c0005fe9:	88 c2                	mov    dl,al
c0005feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fef:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0005ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005ffe:	8d 50 01             	lea    edx,[eax+0x1]
c0006001:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006005:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000600b:	31 d2                	xor    edx,edx
c000600d:	88 c2                	mov    dl,al
c000600f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006013:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006017:	83 e1 3f             	and    ecx,0x3f
c000601a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000601e:	90                   	nop
c000601f:	83 c4 0c             	add    esp,0xc
c0006022:	c3                   	ret    
c0006023:	90                   	nop

c0006024 <Computer::setBootMessage(char const*)>:
c0006024:	c3                   	ret    
c0006025:	90                   	nop

c0006026 <Computer::detectFeatures()>:
c0006026:	55                   	push   ebp
c0006027:	57                   	push   edi
c0006028:	56                   	push   esi
c0006029:	53                   	push   ebx
c000602a:	83 ec 1c             	sub    esp,0x1c
c000602d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006031:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000603b:	e8 d9 a1 ff ff       	call   c0000219 <detectCPUID>
c0006040:	85 c0                	test   eax,eax
c0006042:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0006048:	0f 95 c2             	setne  dl
c000604b:	83 e0 fd             	and    eax,0xfffffffd
c000604e:	01 d2                	add    edx,edx
c0006050:	09 d0                	or     eax,edx
c0006052:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006058:	a8 02                	test   al,0x2
c000605a:	75 46                	jne    c00060a2 <Computer::detectFeatures()+0x7c>
c000605c:	f6 05 21 f6 01 c0 04 	test   BYTE PTR ds:0xc001f621,0x4
c0006063:	74 07                	je     c000606c <Computer::detectFeatures()+0x46>
c0006065:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000606c:	e8 35 54 01 00       	call   c001b4a6 <x87Detect>
c0006071:	83 e0 01             	and    eax,0x1
c0006074:	c1 e0 04             	shl    eax,0x4
c0006077:	88 c2                	mov    dl,al
c0006079:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000607f:	83 e0 ef             	and    eax,0xffffffef
c0006082:	09 d0                	or     eax,edx
c0006084:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000608a:	a8 10                	test   al,0x10
c000608c:	0f 85 2a 01 00 00    	jne    c00061bc <Computer::detectFeatures()+0x196>
c0006092:	84 c0                	test   al,al
c0006094:	0f 88 45 01 00 00    	js     c00061df <Computer::detectFeatures()+0x1b9>
c000609a:	83 c4 1c             	add    esp,0x1c
c000609d:	5b                   	pop    ebx
c000609e:	5e                   	pop    esi
c000609f:	5f                   	pop    edi
c00060a0:	5d                   	pop    ebp
c00060a1:	c3                   	ret    
c00060a2:	83 ec 0c             	sub    esp,0xc
c00060a5:	6a 20                	push   0x20
c00060a7:	e8 e4 84 00 00       	call   c000e590 <CPU::cpuidCheckEDX(unsigned int)>
c00060ac:	83 e0 01             	and    eax,0x1
c00060af:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00060b6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c00060bc:	83 e0 f7             	and    eax,0xfffffff7
c00060bf:	09 d0                	or     eax,edx
c00060c1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c00060c7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c00060ce:	e8 bd 84 00 00       	call   c000e590 <CPU::cpuidCheckEDX(unsigned int)>
c00060d3:	83 e0 01             	and    eax,0x1
c00060d6:	88 c2                	mov    dl,al
c00060d8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c00060de:	83 e0 fe             	and    eax,0xfffffffe
c00060e1:	09 d0                	or     eax,edx
c00060e3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c00060e9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c00060f0:	e8 9b 84 00 00       	call   c000e590 <CPU::cpuidCheckEDX(unsigned int)>
c00060f5:	c1 e0 07             	shl    eax,0x7
c00060f8:	88 c2                	mov    dl,al
c00060fa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0006100:	83 e0 7f             	and    eax,0x7f
c0006103:	09 d0                	or     eax,edx
c0006105:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000610b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006112:	e8 79 84 00 00       	call   c000e590 <CPU::cpuidCheckEDX(unsigned int)>
c0006117:	83 c4 10             	add    esp,0x10
c000611a:	83 e0 01             	and    eax,0x1
c000611d:	c1 e0 05             	shl    eax,0x5
c0006120:	88 c2                	mov    dl,al
c0006122:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0006128:	83 e0 df             	and    eax,0xffffffdf
c000612b:	09 d0                	or     eax,edx
c000612d:	f7 05 20 f6 01 c0 01 04 00 00 	test   DWORD PTR ds:0xc001f620,0x401
c0006137:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000613d:	0f 84 c2 00 00 00    	je     c0006205 <Computer::detectFeatures()+0x1df>
c0006143:	83 e0 fe             	and    eax,0xfffffffe
c0006146:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000614c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0006152:	88 c2                	mov    dl,al
c0006154:	83 e2 09             	and    edx,0x9
c0006157:	fe ca                	dec    dl
c0006159:	75 09                	jne    c0006164 <Computer::detectFeatures()+0x13e>
c000615b:	83 e0 fe             	and    eax,0xfffffffe
c000615e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0006164:	83 ec 0c             	sub    esp,0xc
c0006167:	8d 44 24 18          	lea    eax,[esp+0x18]
c000616b:	50                   	push   eax
c000616c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006170:	55                   	push   ebp
c0006171:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006175:	57                   	push   edi
c0006176:	8d 74 24 18          	lea    esi,[esp+0x18]
c000617a:	56                   	push   esi
c000617b:	68 00 00 00 80       	push   0x80000000
c0006180:	e8 87 83 00 00       	call   c000e50c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006185:	83 c4 20             	add    esp,0x20
c0006188:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000618f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006193:	0f 86 c3 fe ff ff    	jbe    c000605c <Computer::detectFeatures()+0x36>
c0006199:	83 ec 0c             	sub    esp,0xc
c000619c:	50                   	push   eax
c000619d:	55                   	push   ebp
c000619e:	57                   	push   edi
c000619f:	56                   	push   esi
c00061a0:	68 01 00 00 80       	push   0x80000001
c00061a5:	e8 62 83 00 00       	call   c000e50c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00061aa:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c00061b4:	83 c4 20             	add    esp,0x20
c00061b7:	e9 a0 fe ff ff       	jmp    c000605c <Computer::detectFeatures()+0x36>
c00061bc:	e8 9f 52 01 00       	call   c001b460 <absolutelyNoChanceInHell>
c00061c1:	88 c2                	mov    dl,al
c00061c3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c00061c9:	c1 e2 07             	shl    edx,0x7
c00061cc:	83 e0 7f             	and    eax,0x7f
c00061cf:	09 d0                	or     eax,edx
c00061d1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c00061d7:	84 c0                	test   al,al
c00061d9:	0f 89 bb fe ff ff    	jns    c000609a <Computer::detectFeatures()+0x74>
c00061df:	e8 fc 4f 01 00       	call   c001b1e0 <avxDetect>
c00061e4:	83 e0 01             	and    eax,0x1
c00061e7:	c1 e0 05             	shl    eax,0x5
c00061ea:	88 c2                	mov    dl,al
c00061ec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c00061f2:	83 e0 df             	and    eax,0xffffffdf
c00061f5:	09 d0                	or     eax,edx
c00061f7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c00061fd:	83 c4 1c             	add    esp,0x1c
c0006200:	5b                   	pop    ebx
c0006201:	5e                   	pop    esi
c0006202:	5f                   	pop    edi
c0006203:	5d                   	pop    ebp
c0006204:	c3                   	ret    
c0006205:	83 ec 0c             	sub    esp,0xc
c0006208:	68 00 02 00 00       	push   0x200
c000620d:	e8 7e 83 00 00       	call   c000e590 <CPU::cpuidCheckEDX(unsigned int)>
c0006212:	83 c4 10             	add    esp,0x10
c0006215:	83 e0 01             	and    eax,0x1
c0006218:	88 c2                	mov    dl,al
c000621a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0006220:	83 e0 fe             	and    eax,0xfffffffe
c0006223:	09 d0                	or     eax,edx
c0006225:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000622b:	e9 1c ff ff ff       	jmp    c000614c <Computer::detectFeatures()+0x126>

c0006230 <Computer::displayFeatures()>:
c0006230:	c3                   	ret    
c0006231:	90                   	nop

c0006232 <Computer::rdmsr(unsigned int)>:
c0006232:	83 ec 0c             	sub    esp,0xc
c0006235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006239:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0006240:	74 0a                	je     c000624c <Computer::rdmsr(unsigned int)+0x1a>
c0006242:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006246:	0f 32                	rdmsr  
c0006248:	83 c4 0c             	add    esp,0xc
c000624b:	c3                   	ret    
c000624c:	83 ec 0c             	sub    esp,0xc
c000624f:	68 2a cc 01 c0       	push   0xc001cc2a
c0006254:	e8 48 93 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0006259:	83 c4 10             	add    esp,0x10
c000625c:	eb e4                	jmp    c0006242 <Computer::rdmsr(unsigned int)+0x10>

c000625e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000625e:	57                   	push   edi
c000625f:	56                   	push   esi
c0006260:	52                   	push   edx
c0006261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006265:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006269:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000626d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0006274:	74 0e                	je     c0006284 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006276:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000627a:	89 f0                	mov    eax,esi
c000627c:	89 fa                	mov    edx,edi
c000627e:	0f 30                	wrmsr  
c0006280:	58                   	pop    eax
c0006281:	5e                   	pop    esi
c0006282:	5f                   	pop    edi
c0006283:	c3                   	ret    
c0006284:	83 ec 0c             	sub    esp,0xc
c0006287:	68 30 cc 01 c0       	push   0xc001cc30
c000628c:	e8 10 93 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0006291:	83 c4 10             	add    esp,0x10
c0006294:	eb e0                	jmp    c0006276 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006296 <Computer::shutdown()>:
c0006296:	83 ec 0c             	sub    esp,0xc
c0006299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000629d:	8b 10                	mov    edx,DWORD PTR [eax]
c000629f:	6a 00                	push   0x0
c00062a1:	6a 00                	push   0x0
c00062a3:	6a 00                	push   0x0
c00062a5:	50                   	push   eax
c00062a6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00062a9:	83 c4 1c             	add    esp,0x1c
c00062ac:	c3                   	ret    
c00062ad:	90                   	nop

c00062ae <Computer::restart()>:
c00062ae:	83 ec 0c             	sub    esp,0xc
c00062b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00062b7:	6a 00                	push   0x0
c00062b9:	6a 00                	push   0x0
c00062bb:	6a 01                	push   0x1
c00062bd:	50                   	push   eax
c00062be:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00062c1:	83 c4 1c             	add    esp,0x1c
c00062c4:	c3                   	ret    
c00062c5:	90                   	nop

c00062c6 <Computer::sleep()>:
c00062c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062ca:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00062d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00062d4:	e9 2f 7d 00 00       	jmp    c000e008 <ACPI::sleep()>
c00062d9:	90                   	nop

c00062da <Computer::nmiEnabled()>:
c00062da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062de:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00062e4:	c3                   	ret    
c00062e5:	90                   	nop

c00062e6 <Computer::readCMOS(unsigned char)>:
c00062e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00062ea:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00062f1:	19 c0                	sbb    eax,eax
c00062f3:	83 e0 80             	and    eax,0xffffff80
c00062f6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00062fa:	e6 70                	out    0x70,al
c00062fc:	e4 71                	in     al,0x71
c00062fe:	c3                   	ret    
c00062ff:	90                   	nop

c0006300 <Computer::enableNMI(bool)>:
c0006300:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006308:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000630e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006316:	eb ce                	jmp    c00062e6 <Computer::readCMOS(unsigned char)>

c0006318 <Computer::open(int, int, void*)>:
c0006318:	56                   	push   esi
c0006319:	53                   	push   ebx
c000631a:	83 ec 10             	sub    esp,0x10
c000631d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006321:	f6 05 20 f6 01 c0 04 	test   BYTE PTR ds:0xc001f620,0x4
c0006328:	68 36 cc 01 c0       	push   0xc001cc36
c000632d:	0f 94 05 40 ef 01 c0 	sete   BYTE PTR ds:0xc001ef40
c0006334:	e8 86 09 00 00       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c0006339:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006340:	e8 20 09 00 00       	call   c0006c65 <malloc>
c0006345:	89 04 24             	mov    DWORD PTR [esp],eax
c0006348:	89 c6                	mov    esi,eax
c000634a:	e8 51 78 00 00       	call   c000dba0 <ACPI::ACPI()>
c000634f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0006355:	58                   	pop    eax
c0006356:	5a                   	pop    edx
c0006357:	56                   	push   esi
c0006358:	53                   	push   ebx
c0006359:	e8 0a 4b 00 00       	call   c000ae68 <Device::addChild(Device*)>
c000635e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006361:	e8 c0 fc ff ff       	call   c0006026 <Computer::detectFeatures()>
c0006366:	59                   	pop    ecx
c0006367:	5e                   	pop    esi
c0006368:	6a 01                	push   0x1
c000636a:	53                   	push   ebx
c000636b:	e8 90 ff ff ff       	call   c0006300 <Computer::enableNMI(bool)>
c0006370:	c7 04 24 da cb 01 c0 	mov    DWORD PTR [esp],0xc001cbda
c0006377:	e8 43 09 00 00       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c000637c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006383:	e8 dd 08 00 00       	call   c0006c65 <malloc>
c0006388:	89 04 24             	mov    DWORD PTR [esp],eax
c000638b:	89 c6                	mov    esi,eax
c000638d:	e8 b6 82 00 00       	call   c000e648 <CPU::CPU()>
c0006392:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006398:	58                   	pop    eax
c0006399:	5a                   	pop    edx
c000639a:	56                   	push   esi
c000639b:	53                   	push   ebx
c000639c:	e8 c7 4a 00 00       	call   c000ae68 <Device::addChild(Device*)>
c00063a1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00063a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00063ad:	51                   	push   ecx
c00063ae:	6a 00                	push   0x0
c00063b0:	6a 00                	push   0x0
c00063b2:	50                   	push   eax
c00063b3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00063b6:	83 c4 14             	add    esp,0x14
c00063b9:	68 e4 cc 01 c0       	push   0xc001cce4
c00063be:	e8 fc 08 00 00       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c00063c3:	e8 70 e3 00 00       	call   c0014738 <Hal::initialiseCoprocessor()>
c00063c8:	c7 04 24 4e cc 01 c0 	mov    DWORD PTR [esp],0xc001cc4e
c00063cf:	e8 eb 08 00 00       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c00063d4:	c7 04 24 75 5d 00 c0 	mov    DWORD PTR [esp],0xc0005d75
c00063db:	e8 98 c5 00 00       	call   c0012978 <setupMultitasking(void (*)())>
c00063e0:	83 c4 14             	add    esp,0x14
c00063e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00063e8:	5b                   	pop    ebx
c00063e9:	5e                   	pop    esi
c00063ea:	c3                   	ret    
c00063eb:	90                   	nop

c00063ec <Computer::disableNMI()>:
c00063ec:	6a 00                	push   0x0
c00063ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063f2:	50                   	push   eax
c00063f3:	e8 08 ff ff ff       	call   c0006300 <Computer::enableNMI(bool)>
c00063f8:	5a                   	pop    edx
c00063f9:	59                   	pop    ecx
c00063fa:	c3                   	ret    
c00063fb:	90                   	nop

c00063fc <Computer::writeCMOS(unsigned char, unsigned char)>:
c00063fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006400:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006407:	19 c0                	sbb    eax,eax
c0006409:	83 e0 80             	and    eax,0xffffff80
c000640c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006410:	e6 70                	out    0x70,al
c0006412:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006416:	e6 71                	out    0x71,al
c0006418:	c3                   	ret    
c0006419:	90                   	nop

c000641a <Computer::handleNMI()>:
c000641a:	56                   	push   esi
c000641b:	53                   	push   ebx
c000641c:	83 ec 10             	sub    esp,0x10
c000641f:	e4 92                	in     al,0x92
c0006421:	89 c6                	mov    esi,eax
c0006423:	e4 61                	in     al,0x61
c0006425:	68 69 cc 01 c0       	push   0xc001cc69
c000642a:	88 c3                	mov    bl,al
c000642c:	e8 f7 35 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0006431:	83 c4 10             	add    esp,0x10
c0006434:	83 e6 10             	and    esi,0x10
c0006437:	75 0d                	jne    c0006446 <Computer::handleNMI()+0x2c>
c0006439:	f6 c3 40             	test   bl,0x40
c000643c:	75 1d                	jne    c000645b <Computer::handleNMI()+0x41>
c000643e:	84 db                	test   bl,bl
c0006440:	78 2d                	js     c000646f <Computer::handleNMI()+0x55>
c0006442:	58                   	pop    eax
c0006443:	5b                   	pop    ebx
c0006444:	5e                   	pop    esi
c0006445:	c3                   	ret    
c0006446:	83 ec 0c             	sub    esp,0xc
c0006449:	68 7a cc 01 c0       	push   0xc001cc7a
c000644e:	e8 4e 91 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0006453:	83 c4 10             	add    esp,0x10
c0006456:	f6 c3 40             	test   bl,0x40
c0006459:	74 e3                	je     c000643e <Computer::handleNMI()+0x24>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	68 87 cc 01 c0       	push   0xc001cc87
c0006463:	e8 39 91 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0006468:	83 c4 10             	add    esp,0x10
c000646b:	84 db                	test   bl,bl
c000646d:	79 d3                	jns    c0006442 <Computer::handleNMI()+0x28>
c000646f:	c7 44 24 10 91 cc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cc91
c0006477:	5a                   	pop    edx
c0006478:	5b                   	pop    ebx
c0006479:	5e                   	pop    esi
c000647a:	e9 22 91 00 00       	jmp    c000f5a1 <Krnl::panic(char const*)>
c000647f:	90                   	nop

c0006480 <Computer::setDiskActivityLight(int, bool)>:
c0006480:	56                   	push   esi
c0006481:	53                   	push   ebx
c0006482:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006486:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000648b:	77 1b                	ja     c00064a8 <Computer::setDiskActivityLight(int, bool)+0x28>
c000648d:	e4 92                	in     al,0x92
c000648f:	bb 40 00 00 00       	mov    ebx,0x40
c0006494:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0006498:	89 da                	mov    edx,ebx
c000649a:	d3 e2                	shl    edx,cl
c000649c:	89 f1                	mov    ecx,esi
c000649e:	f7 d2                	not    edx
c00064a0:	d3 e3                	shl    ebx,cl
c00064a2:	21 d0                	and    eax,edx
c00064a4:	09 d8                	or     eax,ebx
c00064a6:	e6 92                	out    0x92,al
c00064a8:	5b                   	pop    ebx
c00064a9:	5e                   	pop    esi
c00064aa:	c3                   	ret    
c00064ab:	90                   	nop

c00064ac <GDTEntry::setBase(unsigned int)>:
c00064ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00064b4:	89 c1                	mov    ecx,eax
c00064b6:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00064ba:	c1 e9 10             	shr    ecx,0x10
c00064bd:	c1 e8 18             	shr    eax,0x18
c00064c0:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00064c3:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00064c6:	c3                   	ret    
c00064c7:	90                   	nop

c00064c8 <GDTEntry::setLimit(unsigned int)>:
c00064c8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00064cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d0:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00064d3:	66 89 01             	mov    WORD PTR [ecx],ax
c00064d6:	83 e2 f0             	and    edx,0xfffffff0
c00064d9:	c1 e8 10             	shr    eax,0x10
c00064dc:	83 e0 0f             	and    eax,0xf
c00064df:	09 d0                	or     eax,edx
c00064e1:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00064e4:	c3                   	ret    
c00064e5:	90                   	nop

c00064e6 <GDT::GDT()>:
c00064e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00064ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00064f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00064f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00064fa:	90                   	nop
c00064fb:	c3                   	ret    

c00064fc <GDT::addEntry(GDTEntry)>:
c00064fc:	53                   	push   ebx
c00064fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006501:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006505:	8b 02                	mov    eax,DWORD PTR [edx]
c0006507:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000650b:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000650f:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0006513:	8d 48 01             	lea    ecx,[eax+0x1]
c0006516:	c1 e0 03             	shl    eax,0x3
c0006519:	89 0a                	mov    DWORD PTR [edx],ecx
c000651b:	5b                   	pop    ebx
c000651c:	c3                   	ret    
c000651d:	90                   	nop

c000651e <GDT::getNumberOfEntries()>:
c000651e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006522:	8b 00                	mov    eax,DWORD PTR [eax]
c0006524:	c3                   	ret    
c0006525:	90                   	nop

c0006526 <GDT::flush()>:
c0006526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000652a:	8b 10                	mov    edx,DWORD PTR [eax]
c000652c:	83 c0 04             	add    eax,0x4
c000652f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0006536:	a3 12 f6 01 c0       	mov    ds:0xc001f612,eax
c000653b:	66 89 15 10 f6 01 c0 	mov    WORD PTR ds:0xc001f610,dx
c0006542:	e9 36 9e ff ff       	jmp    c000037d <loadGDT>
c0006547:	90                   	nop

c0006548 <GDT::setup()>:
c0006548:	57                   	push   edi
c0006549:	56                   	push   esi
c000654a:	53                   	push   ebx
c000654b:	83 ec 40             	sub    esp,0x40
c000654e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006552:	6a 00                	push   0x0
c0006554:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0006558:	56                   	push   esi
c0006559:	e8 4e ff ff ff       	call   c00064ac <GDTEntry::setBase(unsigned int)>
c000655e:	6a 00                	push   0x0
c0006560:	56                   	push   esi
c0006561:	e8 62 ff ff ff       	call   c00064c8 <GDTEntry::setLimit(unsigned int)>
c0006566:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c000656e:	6a 00                	push   0x0
c0006570:	8d 74 24 44          	lea    esi,[esp+0x44]
c0006574:	56                   	push   esi
c0006575:	e8 32 ff ff ff       	call   c00064ac <GDTEntry::setBase(unsigned int)>
c000657a:	68 ff ff ff 00       	push   0xffffff
c000657f:	56                   	push   esi
c0006580:	e8 43 ff ff ff       	call   c00064c8 <GDTEntry::setLimit(unsigned int)>
c0006585:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0006589:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000658e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0006593:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006597:	83 c4 20             	add    esp,0x20
c000659a:	6a 00                	push   0x0
c000659c:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00065a0:	56                   	push   esi
c00065a1:	e8 06 ff ff ff       	call   c00064ac <GDTEntry::setBase(unsigned int)>
c00065a6:	68 ff ff ff 00       	push   0xffffff
c00065ab:	56                   	push   esi
c00065ac:	e8 17 ff ff ff       	call   c00064c8 <GDTEntry::setLimit(unsigned int)>
c00065b1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00065b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00065b9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00065bd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00065c1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00065c5:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00065ca:	0d 00 92 c0 00       	or     eax,0xc09200
c00065cf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00065d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00065d7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00065db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00065df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00065e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00065e7:	89 fa                	mov    edx,edi
c00065e9:	80 cc 60             	or     ah,0x60
c00065ec:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00065f2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00065f6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00065fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00065fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006602:	80 cc 60             	or     ah,0x60
c0006605:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0006609:	89 f8                	mov    eax,edi
c000660b:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0006610:	09 d0                	or     eax,edx
c0006612:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006616:	89 c7                	mov    edi,eax
c0006618:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000661c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0006620:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006624:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006628:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c000662e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006632:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0006637:	09 d0                	or     eax,edx
c0006639:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000663d:	83 c4 0c             	add    esp,0xc
c0006640:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006644:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006648:	53                   	push   ebx
c0006649:	e8 ae fe ff ff       	call   c00064fc <GDT::addEntry(GDTEntry)>
c000664e:	83 c4 0c             	add    esp,0xc
c0006651:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006655:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006659:	53                   	push   ebx
c000665a:	e8 9d fe ff ff       	call   c00064fc <GDT::addEntry(GDTEntry)>
c000665f:	83 c4 0c             	add    esp,0xc
c0006662:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006666:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000666a:	53                   	push   ebx
c000666b:	e8 8c fe ff ff       	call   c00064fc <GDT::addEntry(GDTEntry)>
c0006670:	83 c4 0c             	add    esp,0xc
c0006673:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006677:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000667b:	53                   	push   ebx
c000667c:	e8 7b fe ff ff       	call   c00064fc <GDT::addEntry(GDTEntry)>
c0006681:	83 c4 0c             	add    esp,0xc
c0006684:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006688:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000668c:	53                   	push   ebx
c000668d:	e8 6a fe ff ff       	call   c00064fc <GDT::addEntry(GDTEntry)>
c0006692:	83 c4 0c             	add    esp,0xc
c0006695:	57                   	push   edi
c0006696:	56                   	push   esi
c0006697:	53                   	push   ebx
c0006698:	e8 5f fe ff ff       	call   c00064fc <GDT::addEntry(GDTEntry)>
c000669d:	83 c4 0c             	add    esp,0xc
c00066a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00066a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00066a8:	53                   	push   ebx
c00066a9:	e8 4e fe ff ff       	call   c00064fc <GDT::addEntry(GDTEntry)>
c00066ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00066b1:	e8 70 fe ff ff       	call   c0006526 <GDT::flush()>
c00066b6:	83 c4 50             	add    esp,0x50
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	c3                   	ret    

c00066bd <idleFunction(void*)>:
c00066bd:	83 ec 0c             	sub    esp,0xc
c00066c0:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c00066c5:	48                   	dec    eax
c00066c6:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c00066cb:	75 01                	jne    c00066ce <idleFunction(void*)+0x11>
c00066cd:	fb                   	sti    
c00066ce:	f4                   	hlt    
c00066cf:	e8 8e 53 01 00       	call   c001ba62 <idleCommon()>
c00066d4:	eb f8                	jmp    c00066ce <idleFunction(void*)+0x11>
c00066d6:	66 90                	xchg   ax,ax

c00066d8 <IDTEntry::IDTEntry(bool)>:
c00066d8:	83 ec 04             	sub    esp,0x4
c00066db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00066df:	88 04 24             	mov    BYTE PTR [esp],al
c00066e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00066ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00066f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00066fb:	83 e2 f0             	and    edx,0xfffffff0
c00066fe:	83 ca 0e             	or     edx,0xe
c0006701:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000670b:	83 e2 ef             	and    edx,0xffffffef
c000670e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006711:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0006715:	74 05                	je     c000671c <IDTEntry::IDTEntry(bool)+0x44>
c0006717:	b2 03                	mov    dl,0x3
c0006719:	eb 05                	jmp    c0006720 <IDTEntry::IDTEntry(bool)+0x48>
c000671b:	90                   	nop
c000671c:	b2 00                	mov    dl,0x0
c000671e:	66 90                	xchg   ax,ax
c0006720:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006724:	83 e2 03             	and    edx,0x3
c0006727:	88 d1                	mov    cl,dl
c0006729:	c1 e1 05             	shl    ecx,0x5
c000672c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000672f:	83 e2 9f             	and    edx,0xffffff9f
c0006732:	09 ca                	or     edx,ecx
c0006734:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000673e:	83 ca 80             	or     edx,0xffffff80
c0006741:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006744:	90                   	nop
c0006745:	83 c4 04             	add    esp,0x4
c0006748:	c3                   	ret    
c0006749:	90                   	nop

c000674a <IDTEntry::setOffset(unsigned int)>:
c000674a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000674e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006752:	66 89 02             	mov    WORD PTR [edx],ax
c0006755:	c1 e8 10             	shr    eax,0x10
c0006758:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000675c:	c3                   	ret    
c000675d:	90                   	nop
c000675e:	66 90                	xchg   ax,ax

c0006760 <IDT::IDT()>:
c0006760:	90                   	nop
c0006761:	c3                   	ret    

c0006762 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0006762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006766:	83 c0 30             	add    eax,0x30
c0006769:	c3                   	ret    

c000676a <IDT::addEntry(IDTEntry, int)>:
c000676a:	53                   	push   ebx
c000676b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006773:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006777:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000677b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000677e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0006782:	5b                   	pop    ebx
c0006783:	c3                   	ret    

c0006784 <IDT::addEntry(int, void (*)(), bool)>:
c0006784:	53                   	push   ebx
c0006785:	83 ec 10             	sub    esp,0x10
c0006788:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000678d:	50                   	push   eax
c000678e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0006792:	53                   	push   ebx
c0006793:	e8 40 ff ff ff       	call   c00066d8 <IDTEntry::IDTEntry(bool)>
c0006798:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000679c:	53                   	push   ebx
c000679d:	e8 a8 ff ff ff       	call   c000674a <IDTEntry::setOffset(unsigned int)>
c00067a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00067a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00067aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00067ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00067b2:	e8 b3 ff ff ff       	call   c000676a <IDT::addEntry(IDTEntry, int)>
c00067b7:	83 c4 30             	add    esp,0x30
c00067ba:	5b                   	pop    ebx
c00067bb:	c3                   	ret    

c00067bc <IDT::flush()>:
c00067bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00067c0:	66 c7 05 18 f6 01 c0 ff 07 	mov    WORD PTR ds:0xc001f618,0x7ff
c00067c9:	a3 1a f6 01 c0       	mov    ds:0xc001f61a,eax
c00067ce:	0f 01 1d 18 f6 01 c0 	lidtd  ds:0xc001f618
c00067d5:	c3                   	ret    

c00067d6 <IDT::setup()>:
c00067d6:	57                   	push   edi
c00067d7:	56                   	push   esi
c00067d8:	53                   	push   ebx
c00067d9:	83 ec 10             	sub    esp,0x10
c00067dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00067e0:	6a 00                	push   0x0
c00067e2:	68 70 b2 01 c0       	push   0xc001b270
c00067e7:	6a 00                	push   0x0
c00067e9:	53                   	push   ebx
c00067ea:	e8 95 ff ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00067ef:	6a 00                	push   0x0
c00067f1:	68 80 b2 01 c0       	push   0xc001b280
c00067f6:	6a 01                	push   0x1
c00067f8:	53                   	push   ebx
c00067f9:	e8 86 ff ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00067fe:	83 c4 20             	add    esp,0x20
c0006801:	6a 00                	push   0x0
c0006803:	68 8a b2 01 c0       	push   0xc001b28a
c0006808:	6a 02                	push   0x2
c000680a:	53                   	push   ebx
c000680b:	e8 74 ff ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006810:	6a 00                	push   0x0
c0006812:	68 94 b2 01 c0       	push   0xc001b294
c0006817:	6a 03                	push   0x3
c0006819:	53                   	push   ebx
c000681a:	e8 65 ff ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c000681f:	83 c4 20             	add    esp,0x20
c0006822:	6a 00                	push   0x0
c0006824:	68 9e b2 01 c0       	push   0xc001b29e
c0006829:	6a 04                	push   0x4
c000682b:	53                   	push   ebx
c000682c:	e8 53 ff ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006831:	6a 00                	push   0x0
c0006833:	68 a8 b2 01 c0       	push   0xc001b2a8
c0006838:	6a 05                	push   0x5
c000683a:	53                   	push   ebx
c000683b:	e8 44 ff ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006840:	83 c4 20             	add    esp,0x20
c0006843:	6a 00                	push   0x0
c0006845:	68 b2 b2 01 c0       	push   0xc001b2b2
c000684a:	6a 06                	push   0x6
c000684c:	53                   	push   ebx
c000684d:	e8 32 ff ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006852:	6a 00                	push   0x0
c0006854:	68 bc b2 01 c0       	push   0xc001b2bc
c0006859:	6a 07                	push   0x7
c000685b:	53                   	push   ebx
c000685c:	e8 23 ff ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006861:	83 c4 20             	add    esp,0x20
c0006864:	6a 00                	push   0x0
c0006866:	68 c6 b2 01 c0       	push   0xc001b2c6
c000686b:	6a 08                	push   0x8
c000686d:	53                   	push   ebx
c000686e:	e8 11 ff ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006873:	6a 00                	push   0x0
c0006875:	68 ce b2 01 c0       	push   0xc001b2ce
c000687a:	6a 09                	push   0x9
c000687c:	53                   	push   ebx
c000687d:	e8 02 ff ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006882:	83 c4 20             	add    esp,0x20
c0006885:	6a 00                	push   0x0
c0006887:	68 d8 b2 01 c0       	push   0xc001b2d8
c000688c:	6a 0a                	push   0xa
c000688e:	53                   	push   ebx
c000688f:	e8 f0 fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006894:	6a 00                	push   0x0
c0006896:	68 e0 b2 01 c0       	push   0xc001b2e0
c000689b:	6a 0b                	push   0xb
c000689d:	53                   	push   ebx
c000689e:	e8 e1 fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00068a3:	83 c4 20             	add    esp,0x20
c00068a6:	6a 00                	push   0x0
c00068a8:	68 e8 b2 01 c0       	push   0xc001b2e8
c00068ad:	6a 0c                	push   0xc
c00068af:	53                   	push   ebx
c00068b0:	e8 cf fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00068b5:	6a 00                	push   0x0
c00068b7:	68 f0 b2 01 c0       	push   0xc001b2f0
c00068bc:	6a 0d                	push   0xd
c00068be:	53                   	push   ebx
c00068bf:	e8 c0 fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00068c4:	83 c4 20             	add    esp,0x20
c00068c7:	6a 00                	push   0x0
c00068c9:	68 f8 b2 01 c0       	push   0xc001b2f8
c00068ce:	6a 0e                	push   0xe
c00068d0:	53                   	push   ebx
c00068d1:	e8 ae fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00068d6:	6a 00                	push   0x0
c00068d8:	68 00 b3 01 c0       	push   0xc001b300
c00068dd:	6a 0f                	push   0xf
c00068df:	53                   	push   ebx
c00068e0:	e8 9f fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00068e5:	83 c4 20             	add    esp,0x20
c00068e8:	6a 00                	push   0x0
c00068ea:	68 0a b3 01 c0       	push   0xc001b30a
c00068ef:	6a 10                	push   0x10
c00068f1:	53                   	push   ebx
c00068f2:	e8 8d fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00068f7:	6a 00                	push   0x0
c00068f9:	68 14 b3 01 c0       	push   0xc001b314
c00068fe:	6a 11                	push   0x11
c0006900:	53                   	push   ebx
c0006901:	e8 7e fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006906:	83 c4 20             	add    esp,0x20
c0006909:	6a 00                	push   0x0
c000690b:	68 1e b3 01 c0       	push   0xc001b31e
c0006910:	6a 12                	push   0x12
c0006912:	53                   	push   ebx
c0006913:	e8 6c fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006918:	6a 01                	push   0x1
c000691a:	68 b8 b3 01 c0       	push   0xc001b3b8
c000691f:	6a 60                	push   0x60
c0006921:	53                   	push   ebx
c0006922:	e8 5d fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006927:	83 c4 20             	add    esp,0x20
c000692a:	6a 00                	push   0x0
c000692c:	68 bf b3 01 c0       	push   0xc001b3bf
c0006931:	6a 20                	push   0x20
c0006933:	53                   	push   ebx
c0006934:	e8 4b fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006939:	6a 00                	push   0x0
c000693b:	68 aa b3 01 c0       	push   0xc001b3aa
c0006940:	6a 21                	push   0x21
c0006942:	53                   	push   ebx
c0006943:	e8 3c fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006948:	83 c4 20             	add    esp,0x20
c000694b:	6a 00                	push   0x0
c000694d:	68 b1 b3 01 c0       	push   0xc001b3b1
c0006952:	6a 22                	push   0x22
c0006954:	53                   	push   ebx
c0006955:	e8 2a fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c000695a:	6a 00                	push   0x0
c000695c:	68 28 b3 01 c0       	push   0xc001b328
c0006961:	6a 23                	push   0x23
c0006963:	53                   	push   ebx
c0006964:	e8 1b fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006969:	83 c4 20             	add    esp,0x20
c000696c:	6a 00                	push   0x0
c000696e:	68 32 b3 01 c0       	push   0xc001b332
c0006973:	6a 24                	push   0x24
c0006975:	53                   	push   ebx
c0006976:	e8 09 fe ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c000697b:	6a 00                	push   0x0
c000697d:	68 3c b3 01 c0       	push   0xc001b33c
c0006982:	6a 25                	push   0x25
c0006984:	53                   	push   ebx
c0006985:	e8 fa fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c000698a:	83 c4 20             	add    esp,0x20
c000698d:	6a 00                	push   0x0
c000698f:	68 46 b3 01 c0       	push   0xc001b346
c0006994:	6a 26                	push   0x26
c0006996:	53                   	push   ebx
c0006997:	e8 e8 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c000699c:	6a 00                	push   0x0
c000699e:	68 50 b3 01 c0       	push   0xc001b350
c00069a3:	6a 27                	push   0x27
c00069a5:	53                   	push   ebx
c00069a6:	e8 d9 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00069ab:	83 c4 20             	add    esp,0x20
c00069ae:	6a 00                	push   0x0
c00069b0:	68 5a b3 01 c0       	push   0xc001b35a
c00069b5:	6a 28                	push   0x28
c00069b7:	53                   	push   ebx
c00069b8:	e8 c7 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00069bd:	6a 00                	push   0x0
c00069bf:	68 64 b3 01 c0       	push   0xc001b364
c00069c4:	6a 29                	push   0x29
c00069c6:	53                   	push   ebx
c00069c7:	e8 b8 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00069cc:	83 c4 20             	add    esp,0x20
c00069cf:	6a 00                	push   0x0
c00069d1:	68 6e b3 01 c0       	push   0xc001b36e
c00069d6:	6a 2a                	push   0x2a
c00069d8:	53                   	push   ebx
c00069d9:	e8 a6 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00069de:	6a 00                	push   0x0
c00069e0:	68 78 b3 01 c0       	push   0xc001b378
c00069e5:	6a 2b                	push   0x2b
c00069e7:	53                   	push   ebx
c00069e8:	e8 97 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00069ed:	83 c4 20             	add    esp,0x20
c00069f0:	6a 00                	push   0x0
c00069f2:	68 82 b3 01 c0       	push   0xc001b382
c00069f7:	6a 2c                	push   0x2c
c00069f9:	53                   	push   ebx
c00069fa:	e8 85 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c00069ff:	6a 00                	push   0x0
c0006a01:	68 8c b3 01 c0       	push   0xc001b38c
c0006a06:	6a 2d                	push   0x2d
c0006a08:	53                   	push   ebx
c0006a09:	e8 76 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006a0e:	83 c4 20             	add    esp,0x20
c0006a11:	6a 00                	push   0x0
c0006a13:	68 96 b3 01 c0       	push   0xc001b396
c0006a18:	6a 2e                	push   0x2e
c0006a1a:	53                   	push   ebx
c0006a1b:	e8 64 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006a20:	6a 00                	push   0x0
c0006a22:	68 a0 b3 01 c0       	push   0xc001b3a0
c0006a27:	6a 2f                	push   0x2f
c0006a29:	53                   	push   ebx
c0006a2a:	e8 55 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006a2f:	83 c4 20             	add    esp,0x20
c0006a32:	6a 00                	push   0x0
c0006a34:	68 f6 b3 01 c0       	push   0xc001b3f6
c0006a39:	6a 30                	push   0x30
c0006a3b:	53                   	push   ebx
c0006a3c:	e8 43 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006a41:	6a 00                	push   0x0
c0006a43:	68 00 b4 01 c0       	push   0xc001b400
c0006a48:	6a 31                	push   0x31
c0006a4a:	53                   	push   ebx
c0006a4b:	e8 34 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006a50:	83 c4 20             	add    esp,0x20
c0006a53:	6a 00                	push   0x0
c0006a55:	68 0a b4 01 c0       	push   0xc001b40a
c0006a5a:	6a 32                	push   0x32
c0006a5c:	53                   	push   ebx
c0006a5d:	e8 22 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006a62:	6a 00                	push   0x0
c0006a64:	68 14 b4 01 c0       	push   0xc001b414
c0006a69:	6a 33                	push   0x33
c0006a6b:	53                   	push   ebx
c0006a6c:	e8 13 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006a71:	83 c4 20             	add    esp,0x20
c0006a74:	6a 00                	push   0x0
c0006a76:	68 1e b4 01 c0       	push   0xc001b41e
c0006a7b:	6a 34                	push   0x34
c0006a7d:	53                   	push   ebx
c0006a7e:	e8 01 fd ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006a83:	6a 00                	push   0x0
c0006a85:	68 28 b4 01 c0       	push   0xc001b428
c0006a8a:	6a 35                	push   0x35
c0006a8c:	53                   	push   ebx
c0006a8d:	e8 f2 fc ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006a92:	83 c4 20             	add    esp,0x20
c0006a95:	6a 00                	push   0x0
c0006a97:	68 32 b4 01 c0       	push   0xc001b432
c0006a9c:	6a 36                	push   0x36
c0006a9e:	53                   	push   ebx
c0006a9f:	e8 e0 fc ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006aa4:	6a 00                	push   0x0
c0006aa6:	68 3c b4 01 c0       	push   0xc001b43c
c0006aab:	6a 37                	push   0x37
c0006aad:	53                   	push   ebx
c0006aae:	e8 d1 fc ff ff       	call   c0006784 <IDT::addEntry(int, void (*)(), bool)>
c0006ab3:	83 c4 1c             	add    esp,0x1c
c0006ab6:	6a 03                	push   0x3
c0006ab8:	6a 02                	push   0x2
c0006aba:	ff 35 f4 f6 01 c0    	push   DWORD PTR ds:0xc001f6f4
c0006ac0:	e8 39 24 00 00       	call   c0008efe <VAS::allocatePages(int, int)>
c0006ac5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0006acc:	89 c6                	mov    esi,eax
c0006ace:	e8 92 01 00 00       	call   c0006c65 <malloc>
c0006ad3:	81 c6 00 20 00 00    	add    esi,0x2000
c0006ad9:	89 04 24             	mov    DWORD PTR [esp],eax
c0006adc:	89 c7                	mov    edi,eax
c0006ade:	e8 01 16 00 00       	call   c00080e4 <TSS::TSS()>
c0006ae3:	83 c4 0c             	add    esp,0xc
c0006ae6:	68 c6 b2 01 c0       	push   0xc001b2c6
c0006aeb:	56                   	push   esi
c0006aec:	57                   	push   edi
c0006aed:	e8 36 16 00 00       	call   c0008128 <TSS::setup(unsigned long, unsigned long)>
c0006af2:	89 c6                	mov    esi,eax
c0006af4:	58                   	pop    eax
c0006af5:	5a                   	pop    edx
c0006af6:	6a 00                	push   0x0
c0006af8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006afc:	50                   	push   eax
c0006afd:	e8 d6 fb ff ff       	call   c00066d8 <IDTEntry::IDTEntry(bool)>
c0006b02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006b06:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0006b0b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0006b12:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0006b18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006b1c:	80 ce 05             	or     dh,0x5
c0006b1f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0006b22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006b2a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0006b2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006b30:	e8 87 fc ff ff       	call   c00067bc <IDT::flush()>
c0006b35:	83 c4 20             	add    esp,0x20
c0006b38:	5b                   	pop    ebx
c0006b39:	5e                   	pop    esi
c0006b3a:	5f                   	pop    edi
c0006b3b:	c3                   	ret    

c0006b3c <sbrk>:
c0006b3c:	55                   	push   ebp
c0006b3d:	57                   	push   edi
c0006b3e:	56                   	push   esi
c0006b3f:	53                   	push   ebx
c0006b40:	83 ec 1c             	sub    esp,0x1c
c0006b43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006b47:	85 c0                	test   eax,eax
c0006b49:	74 5f                	je     c0006baa <sbrk+0x6e>
c0006b4b:	78 64                	js     c0006bb1 <sbrk+0x75>
c0006b4d:	8b 15 c8 ed 01 c0    	mov    edx,DWORD PTR ds:0xc001edc8
c0006b53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006b57:	05 ff 0f 00 00       	add    eax,0xfff
c0006b5c:	89 c5                	mov    ebp,eax
c0006b5e:	78 69                	js     c0006bc9 <sbrk+0x8d>
c0006b60:	c1 fd 0c             	sar    ebp,0xc
c0006b63:	bb 00 00 00 00       	mov    ebx,0x0
c0006b68:	8b 35 f4 f6 01 c0    	mov    esi,DWORD PTR ds:0xc001f6f4
c0006b6e:	8b 3d c8 ed 01 c0    	mov    edi,DWORD PTR ds:0xc001edc8
c0006b74:	e8 b9 04 00 00       	call   c0007032 <Phys::allocatePage()>
c0006b79:	68 01 04 00 00       	push   0x401
c0006b7e:	57                   	push   edi
c0006b7f:	50                   	push   eax
c0006b80:	56                   	push   esi
c0006b81:	e8 74 22 00 00       	call   c0008dfa <VAS::mapPage(unsigned long, unsigned long, int)>
c0006b86:	81 05 c8 ed 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001edc8,0x1000
c0006b90:	43                   	inc    ebx
c0006b91:	83 c4 10             	add    esp,0x10
c0006b94:	39 dd                	cmp    ebp,ebx
c0006b96:	75 d0                	jne    c0006b68 <sbrk+0x2c>
c0006b98:	0f 20 d8             	mov    eax,cr3
c0006b9b:	0f 22 d8             	mov    cr3,eax
c0006b9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ba2:	83 c4 1c             	add    esp,0x1c
c0006ba5:	5b                   	pop    ebx
c0006ba6:	5e                   	pop    esi
c0006ba7:	5f                   	pop    edi
c0006ba8:	5d                   	pop    ebp
c0006ba9:	c3                   	ret    
c0006baa:	a1 c8 ed 01 c0       	mov    eax,ds:0xc001edc8
c0006baf:	eb f1                	jmp    c0006ba2 <sbrk+0x66>
c0006bb1:	83 ec 08             	sub    esp,0x8
c0006bb4:	50                   	push   eax
c0006bb5:	68 34 cd 01 c0       	push   0xc001cd34
c0006bba:	e8 69 2e 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0006bbf:	83 c4 10             	add    esp,0x10
c0006bc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006bc7:	eb d9                	jmp    c0006ba2 <sbrk+0x66>
c0006bc9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0006bcf:	eb 8f                	jmp    c0006b60 <sbrk+0x24>

c0006bd1 <mmap>:
c0006bd1:	83 ec 18             	sub    esp,0x18
c0006bd4:	68 64 cd 01 c0       	push   0xc001cd64
c0006bd9:	e8 c3 89 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0006bde:	b8 00 00 00 00       	mov    eax,0x0
c0006be3:	83 c4 1c             	add    esp,0x1c
c0006be6:	c3                   	ret    

c0006be7 <munmap>:
c0006be7:	83 ec 18             	sub    esp,0x18
c0006bea:	68 69 cd 01 c0       	push   0xc001cd69
c0006bef:	e8 ad 89 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0006bf4:	b8 00 00 00 00       	mov    eax,0x0
c0006bf9:	83 c4 1c             	add    esp,0x1c
c0006bfc:	c3                   	ret    

c0006bfd <liballoc_lock()>:
c0006bfd:	fa                   	cli    
c0006bfe:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0006c04:	b8 00 00 00 00       	mov    eax,0x0
c0006c09:	c3                   	ret    

c0006c0a <liballoc_unlock()>:
c0006c0a:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0006c0f:	48                   	dec    eax
c0006c10:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0006c15:	75 01                	jne    c0006c18 <liballoc_unlock()+0xe>
c0006c17:	fb                   	sti    
c0006c18:	b8 00 00 00 00       	mov    eax,0x0
c0006c1d:	c3                   	ret    

c0006c1e <liballoc_alloc(int)>:
c0006c1e:	83 ec 10             	sub    esp,0x10
c0006c21:	6a 01                	push   0x1
c0006c23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006c27:	ff 35 f4 f6 01 c0    	push   DWORD PTR ds:0xc001f6f4
c0006c2d:	e8 cc 22 00 00       	call   c0008efe <VAS::allocatePages(int, int)>
c0006c32:	83 c4 1c             	add    esp,0x1c
c0006c35:	c3                   	ret    

c0006c36 <liballoc_free(void*, int)>:
c0006c36:	83 ec 14             	sub    esp,0x14
c0006c39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006c3d:	ff 35 f4 f6 01 c0    	push   DWORD PTR ds:0xc001f6f4
c0006c43:	e8 72 1f 00 00       	call   c0008bba <VAS::freeAllocatedPages(unsigned long)>
c0006c48:	b8 00 00 00 00       	mov    eax,0x0
c0006c4d:	83 c4 1c             	add    esp,0x1c
c0006c50:	c3                   	ret    

c0006c51 <realloc>:
c0006c51:	83 ec 14             	sub    esp,0x14
c0006c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c5c:	e8 f0 a8 ff ff       	call   c0001551 <dlrealloc>
c0006c61:	83 c4 1c             	add    esp,0x1c
c0006c64:	c3                   	ret    

c0006c65 <malloc>:
c0006c65:	83 ec 18             	sub    esp,0x18
c0006c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c6c:	e8 a3 a3 ff ff       	call   c0001014 <dlmalloc>
c0006c71:	83 c4 1c             	add    esp,0x1c
c0006c74:	c3                   	ret    

c0006c75 <free>:
c0006c75:	83 ec 18             	sub    esp,0x18
c0006c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c7c:	e8 38 a0 ff ff       	call   c0000cb9 <dlfree>
c0006c81:	83 c4 1c             	add    esp,0x1c
c0006c84:	c3                   	ret    

c0006c85 <rfree>:
c0006c85:	83 ec 18             	sub    esp,0x18
c0006c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006c8c:	e8 28 a0 ff ff       	call   c0000cb9 <dlfree>
c0006c91:	83 c4 1c             	add    esp,0x1c
c0006c94:	c3                   	ret    

c0006c95 <calloc>:
c0006c95:	56                   	push   esi
c0006c96:	53                   	push   ebx
c0006c97:	83 ec 10             	sub    esp,0x10
c0006c9a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006c9e:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0006ca3:	53                   	push   ebx
c0006ca4:	e8 bc ff ff ff       	call   c0006c65 <malloc>
c0006ca9:	89 c6                	mov    esi,eax
c0006cab:	83 c4 0c             	add    esp,0xc
c0006cae:	53                   	push   ebx
c0006caf:	6a 00                	push   0x0
c0006cb1:	50                   	push   eax
c0006cb2:	e8 39 98 ff ff       	call   c00004f0 <memset>
c0006cb7:	89 f0                	mov    eax,esi
c0006cb9:	83 c4 14             	add    esp,0x14
c0006cbc:	5b                   	pop    ebx
c0006cbd:	5e                   	pop    esi
c0006cbe:	c3                   	ret    

c0006cbf <Krnl::setBootMessage(char const*)>:
c0006cbf:	57                   	push   edi
c0006cc0:	56                   	push   esi
c0006cc1:	53                   	push   ebx
c0006cc2:	81 ec a4 00 00 00    	sub    esp,0xa4
c0006cc8:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0006ccf:	68 9e 00 00 00       	push   0x9e
c0006cd4:	6a 00                	push   0x0
c0006cd6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0006cda:	56                   	push   esi
c0006cdb:	e8 10 98 ff ff       	call   c00004f0 <memset>
c0006ce0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006ce3:	e8 78 98 ff ff       	call   c0000560 <strlen>
c0006ce8:	ba 50 00 00 00       	mov    edx,0x50
c0006ced:	83 c4 10             	add    esp,0x10
c0006cf0:	29 c2                	sub    edx,eax
c0006cf2:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0006cf6:	d1 ea                	shr    edx,1
c0006cf8:	84 c0                	test   al,al
c0006cfa:	74 19                	je     c0006d15 <Krnl::setBootMessage(char const*)+0x56>
c0006cfc:	01 d2                	add    edx,edx
c0006cfe:	43                   	inc    ebx
c0006cff:	01 f2                	add    edx,esi
c0006d01:	80 cc 0f             	or     ah,0xf
c0006d04:	83 c2 02             	add    edx,0x2
c0006d07:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0006d0b:	43                   	inc    ebx
c0006d0c:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0006d11:	84 c0                	test   al,al
c0006d13:	75 ec                	jne    c0006d01 <Krnl::setBootMessage(char const*)+0x42>
c0006d15:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0006d1a:	b9 9e 00 00 00       	mov    ecx,0x9e
c0006d1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d21:	81 c4 a0 00 00 00    	add    esp,0xa0
c0006d27:	5b                   	pop    ebx
c0006d28:	5e                   	pop    esi
c0006d29:	5f                   	pop    edi
c0006d2a:	c3                   	ret    

c0006d2b <kernel_main>:
c0006d2b:	55                   	push   ebp
c0006d2c:	57                   	push   edi
c0006d2d:	bf f9 03 00 00       	mov    edi,0x3f9
c0006d32:	56                   	push   esi
c0006d33:	89 fa                	mov    edx,edi
c0006d35:	53                   	push   ebx
c0006d36:	31 f6                	xor    esi,esi
c0006d38:	83 ec 38             	sub    esp,0x38
c0006d3b:	a1 00 05 00 00       	mov    eax,ds:0x500
c0006d40:	a3 20 f6 01 c0       	mov    ds:0xc001f620,eax
c0006d45:	89 f0                	mov    eax,esi
c0006d47:	ee                   	out    dx,al
c0006d48:	bb fb 03 00 00       	mov    ebx,0x3fb
c0006d4d:	b0 80                	mov    al,0x80
c0006d4f:	89 da                	mov    edx,ebx
c0006d51:	ee                   	out    dx,al
c0006d52:	b1 03                	mov    cl,0x3
c0006d54:	ba f8 03 00 00       	mov    edx,0x3f8
c0006d59:	88 c8                	mov    al,cl
c0006d5b:	ee                   	out    dx,al
c0006d5c:	89 f0                	mov    eax,esi
c0006d5e:	89 fa                	mov    edx,edi
c0006d60:	ee                   	out    dx,al
c0006d61:	88 c8                	mov    al,cl
c0006d63:	89 da                	mov    edx,ebx
c0006d65:	ee                   	out    dx,al
c0006d66:	b0 c7                	mov    al,0xc7
c0006d68:	ba fa 03 00 00       	mov    edx,0x3fa
c0006d6d:	ee                   	out    dx,al
c0006d6e:	b0 0b                	mov    al,0xb
c0006d70:	ba fc 03 00 00       	mov    edx,0x3fc
c0006d75:	ee                   	out    dx,al
c0006d76:	68 70 cd 01 c0       	push   0xc001cd70
c0006d7b:	e8 a8 2c 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0006d80:	0f be 05 e0 ed 01 c0 	movsx  eax,BYTE PTR ds:0xc001ede0
c0006d87:	83 c4 10             	add    esp,0x10
c0006d8a:	84 c0                	test   al,al
c0006d8c:	74 5c                	je     c0006dea <kernel_main+0xbf>
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	bd 0a 00 00 00       	mov    ebp,0xa
c0006d95:	bf 05 00 00 00       	mov    edi,0x5
c0006d9a:	31 f6                	xor    esi,esi
c0006d9c:	eb 14                	jmp    c0006db2 <kernel_main+0x87>
c0006d9e:	47                   	inc    edi
c0006d9f:	bd 0a 00 00 00       	mov    ebp,0xa
c0006da4:	31 f6                	xor    esi,esi
c0006da6:	43                   	inc    ebx
c0006da7:	0f be 83 e0 ed 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe1220]
c0006dae:	84 c0                	test   al,al
c0006db0:	74 38                	je     c0006dea <kernel_main+0xbf>
c0006db2:	80 be 16 ee 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe11ea],0xdb
c0006db9:	0f 84 97 00 00 00    	je     c0006e56 <kernel_main+0x12b>
c0006dbf:	3c 0d                	cmp    al,0xd
c0006dc1:	74 e3                	je     c0006da6 <kernel_main+0x7b>
c0006dc3:	3c 0a                	cmp    al,0xa
c0006dc5:	74 d7                	je     c0006d9e <kernel_main+0x73>
c0006dc7:	83 ec 0c             	sub    esp,0xc
c0006dca:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0006dce:	57                   	push   edi
c0006dcf:	43                   	inc    ebx
c0006dd0:	52                   	push   edx
c0006dd1:	46                   	inc    esi
c0006dd2:	6a 00                	push   0x0
c0006dd4:	6a 0e                	push   0xe
c0006dd6:	50                   	push   eax
c0006dd7:	e8 94 e6 00 00       	call   c0015470 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c0006ddc:	83 c4 20             	add    esp,0x20
c0006ddf:	0f be 83 e0 ed 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe1220]
c0006de6:	84 c0                	test   al,al
c0006de8:	75 c8                	jne    c0006db2 <kernel_main+0x87>
c0006dea:	83 ec 0c             	sub    esp,0xc
c0006ded:	a1 24 05 00 00       	mov    eax,ds:0x524
c0006df2:	05 ff 0f 00 00       	add    eax,0xfff
c0006df7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0006dfc:	50                   	push   eax
c0006dfd:	e8 82 03 00 00       	call   c0007184 <Phys::physicalMemorySetup(unsigned int)>
c0006e02:	e8 59 1b 00 00       	call   c0008960 <Virt::virtualMemorySetup()>
c0006e07:	58                   	pop    eax
c0006e08:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0006e0c:	53                   	push   ebx
c0006e0d:	e8 16 27 00 00       	call   c0009528 <VAS::VAS()>
c0006e12:	89 1d f4 f6 01 c0    	mov    DWORD PTR ds:0xc001f6f4,ebx
c0006e18:	e8 03 92 ff ff       	call   c0000020 <callGlobalConstructors>
c0006e1d:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0006e24:	e8 3c fe ff ff       	call   c0006c65 <malloc>
c0006e29:	89 04 24             	mov    DWORD PTR [esp],eax
c0006e2c:	89 c6                	mov    esi,eax
c0006e2e:	e8 8b f0 ff ff       	call   c0005ebe <Computer::Computer()>
c0006e33:	6a 00                	push   0x0
c0006e35:	89 35 08 f6 01 c0    	mov    DWORD PTR ds:0xc001f608,esi
c0006e3b:	6a 00                	push   0x0
c0006e3d:	6a 00                	push   0x0
c0006e3f:	56                   	push   esi
c0006e40:	e8 d3 f4 ff ff       	call   c0006318 <Computer::open(int, int, void*)>
c0006e45:	83 c4 14             	add    esp,0x14
c0006e48:	53                   	push   ebx
c0006e49:	e8 48 1e 00 00       	call   c0008c96 <VAS::~VAS()>
c0006e4e:	83 c4 3c             	add    esp,0x3c
c0006e51:	5b                   	pop    ebx
c0006e52:	5e                   	pop    esi
c0006e53:	5f                   	pop    edi
c0006e54:	5d                   	pop    ebp
c0006e55:	c3                   	ret    
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8a 96 15 ee 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe11eb]
c0006e5e:	83 e2 fe             	and    edx,0xfffffffe
c0006e61:	81 fa ba 00 00 00    	cmp    edx,0xba
c0006e67:	0f 85 52 ff ff ff    	jne    c0006dbf <kernel_main+0x94>
c0006e6d:	45                   	inc    ebp
c0006e6e:	e9 4c ff ff ff       	jmp    c0006dbf <kernel_main+0x94>

c0006e73 <Phys::allocateDMA(unsigned long)>:
c0006e73:	55                   	push   ebp
c0006e74:	31 ed                	xor    ebp,ebp
c0006e76:	57                   	push   edi
c0006e77:	56                   	push   esi
c0006e78:	53                   	push   ebx
c0006e79:	31 db                	xor    ebx,ebx
c0006e7b:	83 ec 1c             	sub    esp,0x1c
c0006e7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006e82:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006e8a:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0006e90:	31 c0                	xor    eax,eax
c0006e92:	c1 ef 0c             	shr    edi,0xc
c0006e95:	eb 19                	jmp    c0006eb0 <Phys::allocateDMA(unsigned long)+0x3d>
c0006e97:	85 c0                	test   eax,eax
c0006e99:	75 06                	jne    c0006ea1 <Phys::allocateDMA(unsigned long)+0x2e>
c0006e9b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006e9f:	89 dd                	mov    ebp,ebx
c0006ea1:	8d 70 01             	lea    esi,[eax+0x1]
c0006ea4:	39 f7                	cmp    edi,esi
c0006ea6:	74 33                	je     c0006edb <Phys::allocateDMA(unsigned long)+0x68>
c0006ea8:	89 f0                	mov    eax,esi
c0006eaa:	43                   	inc    ebx
c0006eab:	83 fb 0f             	cmp    ebx,0xf
c0006eae:	7f 11                	jg     c0006ec1 <Phys::allocateDMA(unsigned long)+0x4e>
c0006eb0:	80 bb 3c f6 01 c0 00 	cmp    BYTE PTR [ebx-0x3ffe09c4],0x0
c0006eb7:	74 de                	je     c0006e97 <Phys::allocateDMA(unsigned long)+0x24>
c0006eb9:	31 c0                	xor    eax,eax
c0006ebb:	43                   	inc    ebx
c0006ebc:	83 fb 0f             	cmp    ebx,0xf
c0006ebf:	7e ef                	jle    c0006eb0 <Phys::allocateDMA(unsigned long)+0x3d>
c0006ec1:	83 ec 0c             	sub    esp,0xc
c0006ec4:	68 88 cd 01 c0       	push   0xc001cd88
c0006ec9:	e8 d3 86 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0006ece:	83 c4 10             	add    esp,0x10
c0006ed1:	31 c0                	xor    eax,eax
c0006ed3:	83 c4 1c             	add    esp,0x1c
c0006ed6:	5b                   	pop    ebx
c0006ed7:	5e                   	pop    esi
c0006ed8:	5f                   	pop    edi
c0006ed9:	5d                   	pop    ebp
c0006eda:	c3                   	ret    
c0006edb:	89 e9                	mov    ecx,ebp
c0006edd:	c1 f9 04             	sar    ecx,0x4
c0006ee0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ee4:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0006ee8:	89 ca                	mov    edx,ecx
c0006eea:	4a                   	dec    edx
c0006eeb:	79 03                	jns    c0006ef0 <Phys::allocateDMA(unsigned long)+0x7d>
c0006eed:	8d 51 0e             	lea    edx,[ecx+0xe]
c0006ef0:	c1 fa 04             	sar    edx,0x4
c0006ef3:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0006ef7:	74 08                	je     c0006f01 <Phys::allocateDMA(unsigned long)+0x8e>
c0006ef9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006efd:	31 c0                	xor    eax,eax
c0006eff:	eb ba                	jmp    c0006ebb <Phys::allocateDMA(unsigned long)+0x48>
c0006f01:	85 f6                	test   esi,esi
c0006f03:	74 15                	je     c0006f1a <Phys::allocateDMA(unsigned long)+0xa7>
c0006f05:	8d 95 3c f6 01 c0    	lea    edx,[ebp-0x3ffe09c4]
c0006f0b:	8d 84 05 3d f6 01 c0 	lea    eax,[ebp+eax*1-0x3ffe09c3]
c0006f12:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0006f15:	42                   	inc    edx
c0006f16:	39 d0                	cmp    eax,edx
c0006f18:	75 f8                	jne    c0006f12 <Phys::allocateDMA(unsigned long)+0x9f>
c0006f1a:	01 3d 34 f6 01 c0    	add    DWORD PTR ds:0xc001f634,edi
c0006f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f24:	85 c0                	test   eax,eax
c0006f26:	74 17                	je     c0006f3f <Phys::allocateDMA(unsigned long)+0xcc>
c0006f28:	83 ec 0c             	sub    esp,0xc
c0006f2b:	68 88 cd 01 c0       	push   0xc001cd88
c0006f30:	e8 6c 86 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0006f35:	83 c4 10             	add    esp,0x10
c0006f38:	89 f0                	mov    eax,esi
c0006f3a:	e9 6b ff ff ff       	jmp    c0006eaa <Phys::allocateDMA(unsigned long)+0x37>
c0006f3f:	c1 e5 0c             	shl    ebp,0xc
c0006f42:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0006f48:	eb 89                	jmp    c0006ed3 <Phys::allocateDMA(unsigned long)+0x60>

c0006f4a <Phys::freeDMA(unsigned long, unsigned long)>:
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0006f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f58:	c1 ea 0c             	shr    edx,0xc
c0006f5b:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0006f60:	29 15 34 f6 01 c0    	sub    DWORD PTR ds:0xc001f634,edx
c0006f66:	c1 e8 0c             	shr    eax,0xc
c0006f69:	85 d2                	test   edx,edx
c0006f6b:	74 0f                	je     c0006f7c <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0006f6d:	05 3c f6 01 c0       	add    eax,0xc001f63c
c0006f72:	01 c2                	add    edx,eax
c0006f74:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006f77:	40                   	inc    eax
c0006f78:	39 d0                	cmp    eax,edx
c0006f7a:	75 f8                	jne    c0006f74 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0006f7c:	c3                   	ret    

c0006f7d <Phys::setPageState(unsigned long, bool)>:
c0006f7d:	56                   	push   esi
c0006f7e:	ba 01 00 00 00       	mov    edx,0x1
c0006f83:	53                   	push   ebx
c0006f84:	8b 35 24 ef 01 c0    	mov    esi,DWORD PTR ds:0xc001ef24
c0006f8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f92:	89 c8                	mov    eax,ecx
c0006f94:	83 e1 07             	and    ecx,0x7
c0006f97:	c1 e8 03             	shr    eax,0x3
c0006f9a:	d3 e3                	shl    ebx,cl
c0006f9c:	01 c6                	add    esi,eax
c0006f9e:	d3 e2                	shl    edx,cl
c0006fa0:	f7 d2                	not    edx
c0006fa2:	20 16                	and    BYTE PTR [esi],dl
c0006fa4:	03 05 24 ef 01 c0    	add    eax,DWORD PTR ds:0xc001ef24
c0006faa:	08 18                	or     BYTE PTR [eax],bl
c0006fac:	5b                   	pop    ebx
c0006fad:	5e                   	pop    esi
c0006fae:	c3                   	ret    

c0006faf <Phys::getPageState(unsigned long)>:
c0006faf:	53                   	push   ebx
c0006fb0:	8b 15 24 ef 01 c0    	mov    edx,DWORD PTR ds:0xc001ef24
c0006fb6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006fba:	31 db                	xor    ebx,ebx
c0006fbc:	89 c8                	mov    eax,ecx
c0006fbe:	83 e1 07             	and    ecx,0x7
c0006fc1:	c1 e8 03             	shr    eax,0x3
c0006fc4:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0006fc7:	89 d8                	mov    eax,ebx
c0006fc9:	5b                   	pop    ebx
c0006fca:	d3 f8                	sar    eax,cl
c0006fcc:	83 e0 01             	and    eax,0x1
c0006fcf:	c3                   	ret    

c0006fd0 <Phys::freePage(unsigned long)>:
c0006fd0:	53                   	push   ebx
c0006fd1:	83 ec 08             	sub    esp,0x8
c0006fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006fd8:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0006fde:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0006fe4:	76 3a                	jbe    c0007020 <Phys::freePage(unsigned long)+0x50>
c0006fe6:	c1 e8 0c             	shr    eax,0xc
c0006fe9:	50                   	push   eax
c0006fea:	89 c3                	mov    ebx,eax
c0006fec:	e8 be ff ff ff       	call   c0006faf <Phys::getPageState(unsigned long)>
c0006ff1:	5a                   	pop    edx
c0006ff2:	84 c0                	test   al,al
c0006ff4:	74 19                	je     c000700f <Phys::freePage(unsigned long)+0x3f>
c0006ff6:	83 ec 08             	sub    esp,0x8
c0006ff9:	ff 0d 34 f6 01 c0    	dec    DWORD PTR ds:0xc001f634
c0006fff:	6a 00                	push   0x0
c0007001:	53                   	push   ebx
c0007002:	e8 76 ff ff ff       	call   c0006f7d <Phys::setPageState(unsigned long, bool)>
c0007007:	83 c4 10             	add    esp,0x10
c000700a:	83 c4 08             	add    esp,0x8
c000700d:	5b                   	pop    ebx
c000700e:	c3                   	ret    
c000700f:	c7 44 24 10 2d ce 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ce2d
c0007017:	83 c4 08             	add    esp,0x8
c000701a:	5b                   	pop    ebx
c000701b:	e9 81 85 00 00       	jmp    c000f5a1 <Krnl::panic(char const*)>
c0007020:	68 00 10 00 00       	push   0x1000
c0007025:	50                   	push   eax
c0007026:	e8 1f ff ff ff       	call   c0006f4a <Phys::freeDMA(unsigned long, unsigned long)>
c000702b:	59                   	pop    ecx
c000702c:	5b                   	pop    ebx
c000702d:	83 c4 08             	add    esp,0x8
c0007030:	5b                   	pop    ebx
c0007031:	c3                   	ret    

c0007032 <Phys::allocatePage()>:
c0007032:	56                   	push   esi
c0007033:	53                   	push   ebx
c0007034:	83 ec 14             	sub    esp,0x14
c0007037:	8b 35 28 f6 01 c0    	mov    esi,DWORD PTR ds:0xc001f628
c000703d:	89 f3                	mov    ebx,esi
c000703f:	eb 0a                	jmp    c000704b <Phys::allocatePage()+0x19>
c0007041:	89 1d 28 f6 01 c0    	mov    DWORD PTR ds:0xc001f628,ebx
c0007047:	39 de                	cmp    esi,ebx
c0007049:	74 24                	je     c000706f <Phys::allocatePage()+0x3d>
c000704b:	53                   	push   ebx
c000704c:	e8 5e ff ff ff       	call   c0006faf <Phys::getPageState(unsigned long)>
c0007051:	5a                   	pop    edx
c0007052:	84 c0                	test   al,al
c0007054:	74 5f                	je     c00070b5 <Phys::allocatePage()+0x83>
c0007056:	43                   	inc    ebx
c0007057:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000705d:	75 e2                	jne    c0007041 <Phys::allocatePage()+0xf>
c000705f:	31 db                	xor    ebx,ebx
c0007061:	c7 05 28 f6 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f628,0x0
c000706b:	39 de                	cmp    esi,ebx
c000706d:	75 dc                	jne    c000704b <Phys::allocatePage()+0x19>
c000706f:	83 ec 0c             	sub    esp,0xc
c0007072:	80 35 4c f6 01 c0 01 	xor    BYTE PTR ds:0xc001f64c,0x1
c0007079:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000707e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007081:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007087:	50                   	push   eax
c0007088:	e8 bb 26 00 00       	call   c0009748 <VAS::scanForEviction()>
c000708d:	83 c4 10             	add    esp,0x10
c0007090:	85 c0                	test   eax,eax
c0007092:	75 3f                	jne    c00070d3 <Phys::allocatePage()+0xa1>
c0007094:	83 ec 0c             	sub    esp,0xc
c0007097:	68 b0 cd 01 c0       	push   0xc001cdb0
c000709c:	e8 00 85 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c00070a1:	83 c4 10             	add    esp,0x10
c00070a4:	8b 1d 28 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f628
c00070aa:	53                   	push   ebx
c00070ab:	e8 ff fe ff ff       	call   c0006faf <Phys::getPageState(unsigned long)>
c00070b0:	5a                   	pop    edx
c00070b1:	84 c0                	test   al,al
c00070b3:	75 a1                	jne    c0007056 <Phys::allocatePage()+0x24>
c00070b5:	6a 01                	push   0x1
c00070b7:	53                   	push   ebx
c00070b8:	e8 c0 fe ff ff       	call   c0006f7d <Phys::setPageState(unsigned long, bool)>
c00070bd:	a1 28 f6 01 c0       	mov    eax,ds:0xc001f628
c00070c2:	5a                   	pop    edx
c00070c3:	ff 05 34 f6 01 c0    	inc    DWORD PTR ds:0xc001f634
c00070c9:	c1 e0 0c             	shl    eax,0xc
c00070cc:	59                   	pop    ecx
c00070cd:	83 c4 14             	add    esp,0x14
c00070d0:	5b                   	pop    ebx
c00070d1:	5e                   	pop    esi
c00070d2:	c3                   	ret    
c00070d3:	83 ec 08             	sub    esp,0x8
c00070d6:	89 c2                	mov    edx,eax
c00070d8:	6a 01                	push   0x1
c00070da:	c1 ea 0c             	shr    edx,0xc
c00070dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070e1:	52                   	push   edx
c00070e2:	e8 96 fe ff ff       	call   c0006f7d <Phys::setPageState(unsigned long, bool)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	eb dd                	jmp    c00070cd <Phys::allocatePage()+0x9b>

c00070f0 <Phys::allocateContiguousPages(int)>:
c00070f0:	57                   	push   edi
c00070f1:	56                   	push   esi
c00070f2:	53                   	push   ebx
c00070f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00070f7:	fa                   	cli    
c00070f8:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c00070fe:	31 db                	xor    ebx,ebx
c0007100:	85 db                	test   ebx,ebx
c0007102:	75 11                	jne    c0007115 <Phys::allocateContiguousPages(int)+0x25>
c0007104:	e8 29 ff ff ff       	call   c0007032 <Phys::allocatePage()>
c0007109:	83 fe 01             	cmp    esi,0x1
c000710c:	89 c7                	mov    edi,eax
c000710e:	74 21                	je     c0007131 <Phys::allocateContiguousPages(int)+0x41>
c0007110:	bb 01 00 00 00       	mov    ebx,0x1
c0007115:	e8 18 ff ff ff       	call   c0007032 <Phys::allocatePage()>
c000711a:	89 da                	mov    edx,ebx
c000711c:	c1 e2 0c             	shl    edx,0xc
c000711f:	01 fa                	add    edx,edi
c0007121:	39 c2                	cmp    edx,eax
c0007123:	74 20                	je     c0007145 <Phys::allocateContiguousPages(int)+0x55>
c0007125:	bb 01 00 00 00       	mov    ebx,0x1
c000712a:	89 c7                	mov    edi,eax
c000712c:	83 fe 01             	cmp    esi,0x1
c000712f:	75 e4                	jne    c0007115 <Phys::allocateContiguousPages(int)+0x25>
c0007131:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0007136:	48                   	dec    eax
c0007137:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c000713c:	75 01                	jne    c000713f <Phys::allocateContiguousPages(int)+0x4f>
c000713e:	fb                   	sti    
c000713f:	89 f8                	mov    eax,edi
c0007141:	5b                   	pop    ebx
c0007142:	5e                   	pop    esi
c0007143:	5f                   	pop    edi
c0007144:	c3                   	ret    
c0007145:	43                   	inc    ebx
c0007146:	39 f3                	cmp    ebx,esi
c0007148:	75 b6                	jne    c0007100 <Phys::allocateContiguousPages(int)+0x10>
c000714a:	eb e5                	jmp    c0007131 <Phys::allocateContiguousPages(int)+0x41>

c000714c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000714c:	56                   	push   esi
c000714d:	53                   	push   ebx
c000714e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007152:	39 1d 2c f6 01 c0    	cmp    DWORD PTR ds:0xc001f62c,ebx
c0007158:	73 06                	jae    c0007160 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000715a:	89 1d 2c f6 01 c0    	mov    DWORD PTR ds:0xc001f62c,ebx
c0007160:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007164:	c1 eb 0c             	shr    ebx,0xc
c0007167:	c1 e8 0c             	shr    eax,0xc
c000716a:	39 d8                	cmp    eax,ebx
c000716c:	73 13                	jae    c0007181 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000716e:	6a 00                	push   0x0
c0007170:	8d 70 01             	lea    esi,[eax+0x1]
c0007173:	50                   	push   eax
c0007174:	e8 04 fe ff ff       	call   c0006f7d <Phys::setPageState(unsigned long, bool)>
c0007179:	5a                   	pop    edx
c000717a:	89 f0                	mov    eax,esi
c000717c:	59                   	pop    ecx
c000717d:	39 f3                	cmp    ebx,esi
c000717f:	75 ed                	jne    c000716e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007181:	5b                   	pop    ebx
c0007182:	5e                   	pop    esi
c0007183:	c3                   	ret    

c0007184 <Phys::physicalMemorySetup(unsigned int)>:
c0007184:	55                   	push   ebp
c0007185:	57                   	push   edi
c0007186:	56                   	push   esi
c0007187:	53                   	push   ebx
c0007188:	31 db                	xor    ebx,ebx
c000718a:	83 ec 40             	sub    esp,0x40
c000718d:	6a 10                	push   0x10
c000718f:	6a 00                	push   0x0
c0007191:	68 3c f6 01 c0       	push   0xc001f63c
c0007196:	e8 55 93 ff ff       	call   c00004f0 <memset>
c000719b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000719f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00071a4:	05 00 10 00 00       	add    eax,0x1000
c00071a9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00071ad:	5a                   	pop    edx
c00071ae:	59                   	pop    ecx
c00071af:	50                   	push   eax
c00071b0:	68 43 ce 01 c0       	push   0xc001ce43
c00071b5:	e8 6e 28 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00071ba:	83 c4 10             	add    esp,0x10
c00071bd:	83 ec 08             	sub    esp,0x8
c00071c0:	6a 01                	push   0x1
c00071c2:	53                   	push   ebx
c00071c3:	43                   	inc    ebx
c00071c4:	e8 b4 fd ff ff       	call   c0006f7d <Phys::setPageState(unsigned long, bool)>
c00071c9:	83 c4 10             	add    esp,0x10
c00071cc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00071d2:	75 e9                	jne    c00071bd <Phys::physicalMemorySetup(unsigned int)+0x39>
c00071d4:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00071da:	66 85 c0             	test   ax,ax
c00071dd:	0f 84 97 01 00 00    	je     c000737a <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00071e3:	89 c7                	mov    edi,eax
c00071e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071ed:	81 e7 ff ff 00 00    	and    edi,0xffff
c00071f3:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00071f8:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00071fc:	eb 15                	jmp    c0007213 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00071fe:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007202:	83 c3 18             	add    ebx,0x18
c0007205:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007209:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000720d:	0f 84 77 01 00 00    	je     c000738a <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007213:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007216:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007219:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000721c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007220:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007224:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007226:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007229:	01 f0                	add    eax,esi
c000722b:	55                   	push   ebp
c000722c:	11 fa                	adc    edx,edi
c000722e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007232:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007236:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000723a:	50                   	push   eax
c000723b:	56                   	push   esi
c000723c:	68 e0 cd 01 c0       	push   0xc001cde0
c0007241:	e8 e2 27 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0007246:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000724a:	83 c4 10             	add    esp,0x10
c000724d:	09 f8                	or     eax,edi
c000724f:	0f 85 35 01 00 00    	jne    c000738a <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007255:	4d                   	dec    ebp
c0007256:	75 a6                	jne    c00071fe <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007258:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000725c:	ba 00 00 08 00       	mov    edx,0x80000
c0007261:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007265:	39 f2                	cmp    edx,esi
c0007267:	89 c1                	mov    ecx,eax
c0007269:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007271:	19 f9                	sbb    ecx,edi
c0007273:	0f 82 a7 00 00 00    	jb     c0007320 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007279:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000727d:	89 c1                	mov    ecx,eax
c000727f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007283:	0f 83 97 00 00 00    	jae    c0007320 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007289:	ba 00 00 0a 00       	mov    edx,0xa0000
c000728e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007292:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007296:	39 fa                	cmp    edx,edi
c0007298:	19 e8                	sbb    eax,ebp
c000729a:	0f 82 9a 01 00 00    	jb     c000743a <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c00072a0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00072a4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00072a8:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00072ae:	ba ff 1f 00 00       	mov    edx,0x1fff
c00072b3:	83 d5 ff             	adc    ebp,0xffffffff
c00072b6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00072ba:	31 c0                	xor    eax,eax
c00072bc:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00072c0:	39 fa                	cmp    edx,edi
c00072c2:	89 c1                	mov    ecx,eax
c00072c4:	19 e9                	sbb    ecx,ebp
c00072c6:	0f 83 32 ff ff ff    	jae    c00071fe <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00072cc:	be 00 00 08 00       	mov    esi,0x80000
c00072d1:	51                   	push   ecx
c00072d2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00072d6:	57                   	push   edi
c00072d7:	56                   	push   esi
c00072d8:	68 04 ce 01 c0       	push   0xc001ce04
c00072dd:	e8 46 27 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00072e2:	5d                   	pop    ebp
c00072e3:	58                   	pop    eax
c00072e4:	57                   	push   edi
c00072e5:	56                   	push   esi
c00072e6:	e8 61 fe ff ff       	call   c000714c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00072eb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00072ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00072f3:	83 c4 0c             	add    esp,0xc
c00072f6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00072fa:	03 05 38 f6 01 c0    	add    eax,DWORD PTR ds:0xc001f638
c0007300:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007307:	a3 38 f6 01 c0       	mov    ds:0xc001f638,eax
c000730c:	52                   	push   edx
c000730d:	50                   	push   eax
c000730e:	68 69 ce 01 c0       	push   0xc001ce69
c0007313:	e8 10 27 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0007318:	83 c4 10             	add    esp,0x10
c000731b:	e9 de fe ff ff       	jmp    c00071fe <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007320:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007324:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007328:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000732c:	39 ea                	cmp    edx,ebp
c000732e:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007332:	0f 82 c6 fe ff ff    	jb     c00071fe <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007338:	ba ff 1f 00 00       	mov    edx,0x1fff
c000733d:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007341:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007345:	0f 83 b3 fe ff ff    	jae    c00071fe <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000734b:	39 ee                	cmp    esi,ebp
c000734d:	89 f8                	mov    eax,edi
c000734f:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007353:	0f 83 78 ff ff ff    	jae    c00072d1 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007359:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007361:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007365:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007369:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000736d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007371:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007375:	e9 57 ff ff ff       	jmp    c00072d1 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000737a:	83 ec 0c             	sub    esp,0xc
c000737d:	68 5b ce 01 c0       	push   0xc001ce5b
c0007382:	e8 1a 82 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0007387:	83 c4 10             	add    esp,0x10
c000738a:	83 ec 08             	sub    esp,0x8
c000738d:	bb 60 00 00 00       	mov    ebx,0x60
c0007392:	6a 00                	push   0x0
c0007394:	6a 06                	push   0x6
c0007396:	e8 e2 fb ff ff       	call   c0006f7d <Phys::setPageState(unsigned long, bool)>
c000739b:	58                   	pop    eax
c000739c:	5a                   	pop    edx
c000739d:	6a 00                	push   0x0
c000739f:	6a 07                	push   0x7
c00073a1:	e8 d7 fb ff ff       	call   c0006f7d <Phys::setPageState(unsigned long, bool)>
c00073a6:	83 05 38 f6 01 c0 02 	add    DWORD PTR ds:0xc001f638,0x2
c00073ad:	83 c4 10             	add    esp,0x10
c00073b0:	83 ec 08             	sub    esp,0x8
c00073b3:	6a 00                	push   0x0
c00073b5:	53                   	push   ebx
c00073b6:	43                   	inc    ebx
c00073b7:	e8 c1 fb ff ff       	call   c0006f7d <Phys::setPageState(unsigned long, bool)>
c00073bc:	83 c4 10             	add    esp,0x10
c00073bf:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00073c5:	75 e9                	jne    c00073b0 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00073c7:	a1 38 f6 01 c0       	mov    eax,ds:0xc001f638
c00073cc:	bb 40 01 00 00       	mov    ebx,0x140
c00073d1:	83 c0 20             	add    eax,0x20
c00073d4:	a3 38 f6 01 c0       	mov    ds:0xc001f638,eax
c00073d9:	eb 22                	jmp    c00073fd <Phys::physicalMemorySetup(unsigned int)+0x279>
c00073db:	83 ec 08             	sub    esp,0x8
c00073de:	6a 00                	push   0x0
c00073e0:	53                   	push   ebx
c00073e1:	43                   	inc    ebx
c00073e2:	e8 96 fb ff ff       	call   c0006f7d <Phys::setPageState(unsigned long, bool)>
c00073e7:	a1 38 f6 01 c0       	mov    eax,ds:0xc001f638
c00073ec:	83 c4 10             	add    esp,0x10
c00073ef:	40                   	inc    eax
c00073f0:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00073f6:	a3 38 f6 01 c0       	mov    ds:0xc001f638,eax
c00073fb:	74 07                	je     c0007404 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00073fd:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007402:	7e d7                	jle    c00073db <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007404:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007409:	3d ff 07 00 00       	cmp    eax,0x7ff
c000740e:	7f 22                	jg     c0007432 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007410:	83 ec 08             	sub    esp,0x8
c0007413:	6a 00                	push   0x0
c0007415:	53                   	push   ebx
c0007416:	43                   	inc    ebx
c0007417:	e8 61 fb ff ff       	call   c0006f7d <Phys::setPageState(unsigned long, bool)>
c000741c:	a1 38 f6 01 c0       	mov    eax,ds:0xc001f638
c0007421:	83 c4 10             	add    esp,0x10
c0007424:	40                   	inc    eax
c0007425:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000742b:	a3 38 f6 01 c0       	mov    ds:0xc001f638,eax
c0007430:	75 d7                	jne    c0007409 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007432:	83 c4 3c             	add    esp,0x3c
c0007435:	5b                   	pop    ebx
c0007436:	5e                   	pop    esi
c0007437:	5f                   	pop    edi
c0007438:	5d                   	pop    ebp
c0007439:	c3                   	ret    
c000743a:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007442:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000744a:	e9 51 fe ff ff       	jmp    c00072a0 <Phys::physicalMemorySetup(unsigned int)+0x11c>
c000744f:	90                   	nop

c0007450 <Pipe::isAtty()>:
c0007450:	31 c0                	xor    eax,eax
c0007452:	c3                   	ret    
c0007453:	90                   	nop

c0007454 <Pipe::~Pipe()>:
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	ba c8 ce 01 c0       	mov    edx,0xc001cec8
c000745c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007460:	89 10                	mov    DWORD PTR [eax],edx
c0007462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007466:	83 ec 0c             	sub    esp,0xc
c0007469:	50                   	push   eax
c000746a:	e8 d1 10 00 00       	call   c0008540 <UnixFile::~UnixFile()>
c000746f:	83 c4 10             	add    esp,0x10
c0007472:	90                   	nop
c0007473:	83 c4 0c             	add    esp,0xc
c0007476:	c3                   	ret    
c0007477:	90                   	nop

c0007478 <Pipe::~Pipe()>:
c0007478:	83 ec 0c             	sub    esp,0xc
c000747b:	83 ec 0c             	sub    esp,0xc
c000747e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007482:	e8 cd ff ff ff       	call   c0007454 <Pipe::~Pipe()>
c0007487:	83 c4 10             	add    esp,0x10
c000748a:	83 ec 08             	sub    esp,0x8
c000748d:	6a 20                	push   0x20
c000748f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007493:	e8 9a 24 00 00       	call   c0009932 <operator delete(void*, unsigned long)>
c0007498:	83 c4 10             	add    esp,0x10
c000749b:	83 c4 0c             	add    esp,0xc
c000749e:	c3                   	ret    
c000749f:	90                   	nop

c00074a0 <Pipe::write(unsigned long long, void*, int*)>:
c00074a0:	55                   	push   ebp
c00074a1:	57                   	push   edi
c00074a2:	56                   	push   esi
c00074a3:	53                   	push   ebx
c00074a4:	83 ec 1c             	sub    esp,0x1c
c00074a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00074ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00074af:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00074b2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00074b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00074b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00074bd:	89 d8                	mov    eax,ebx
c00074bf:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00074c2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00074c6:	89 d6                	mov    esi,edx
c00074c8:	89 d7                	mov    edi,edx
c00074ca:	c1 ff 1f             	sar    edi,0x1f
c00074cd:	03 34 24             	add    esi,DWORD PTR [esp]
c00074d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00074d4:	c1 f8 1f             	sar    eax,0x1f
c00074d7:	39 f3                	cmp    ebx,esi
c00074d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00074dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074e1:	19 f8                	sbb    eax,edi
c00074e3:	b8 01 00 00 00       	mov    eax,0x1
c00074e8:	72 6e                	jb     c0007558 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00074ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00074ed:	01 d0                	add    eax,edx
c00074ef:	99                   	cdq    
c00074f0:	f7 fb                	idiv   ebx
c00074f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074f6:	29 d3                	sub    ebx,edx
c00074f8:	89 d7                	mov    edi,edx
c00074fa:	89 de                	mov    esi,ebx
c00074fc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00074ff:	c1 fb 1f             	sar    ebx,0x1f
c0007502:	39 f2                	cmp    edx,esi
c0007504:	19 d8                	sbb    eax,ebx
c0007506:	b8 00 00 00 00       	mov    eax,0x0
c000750b:	72 04                	jb     c0007511 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000750d:	89 d0                	mov    eax,edx
c000750f:	29 f0                	sub    eax,esi
c0007511:	89 d3                	mov    ebx,edx
c0007513:	29 c3                	sub    ebx,eax
c0007515:	74 0b                	je     c0007522 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007517:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000751a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000751e:	89 d9                	mov    ecx,ebx
c0007520:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007522:	85 c0                	test   eax,eax
c0007524:	74 0d                	je     c0007533 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007526:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000752a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000752d:	89 de                	mov    esi,ebx
c000752f:	89 c1                	mov    ecx,eax
c0007531:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007533:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007536:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000753b:	75 10                	jne    c000754d <Pipe::write(unsigned long long, void*, int*)+0xad>
c000753d:	83 ec 0c             	sub    esp,0xc
c0007540:	68 85 ce 01 c0       	push   0xc001ce85
c0007545:	e8 57 80 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000754a:	83 c4 10             	add    esp,0x10
c000754d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007551:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007554:	89 08                	mov    DWORD PTR [eax],ecx
c0007556:	31 c0                	xor    eax,eax
c0007558:	83 c4 1c             	add    esp,0x1c
c000755b:	5b                   	pop    ebx
c000755c:	5e                   	pop    esi
c000755d:	5f                   	pop    edi
c000755e:	5d                   	pop    ebp
c000755f:	c3                   	ret    

c0007560 <Pipe::read(unsigned long long, void*, int*)>:
c0007560:	55                   	push   ebp
c0007561:	57                   	push   edi
c0007562:	56                   	push   esi
c0007563:	53                   	push   ebx
c0007564:	83 ec 1c             	sub    esp,0x1c
c0007567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000756b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000756f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007573:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007576:	89 c8                	mov    eax,ecx
c0007578:	99                   	cdq    
c0007579:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000757d:	74 24                	je     c00075a3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000757f:	39 f9                	cmp    ecx,edi
c0007581:	89 d1                	mov    ecx,edx
c0007583:	19 f1                	sbb    ecx,esi
c0007585:	73 1c                	jae    c00075a3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007587:	fa                   	cli    
c0007588:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c000758e:	e8 ed b4 00 00       	call   c0012a80 <schedule()>
c0007593:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0007598:	48                   	dec    eax
c0007599:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c000759e:	75 d3                	jne    c0007573 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00075a0:	fb                   	sti    
c00075a1:	eb d0                	jmp    c0007573 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00075a3:	39 f8                	cmp    eax,edi
c00075a5:	89 d1                	mov    ecx,edx
c00075a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00075aa:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00075ae:	19 f1                	sbb    ecx,esi
c00075b0:	73 07                	jae    c00075b9 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00075b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00075b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00075b9:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00075bc:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00075bf:	29 f7                	sub    edi,esi
c00075c1:	89 f8                	mov    eax,edi
c00075c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00075c7:	99                   	cdq    
c00075c8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00075cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075cf:	19 d0                	sbb    eax,edx
c00075d1:	73 07                	jae    c00075da <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00075d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00075da:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00075dd:	89 ea                	mov    edx,ebp
c00075df:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00075e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00075e8:	74 0d                	je     c00075f7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00075ea:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00075ed:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00075f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00075f7:	85 d2                	test   edx,edx
c00075f9:	74 11                	je     c000760c <Pipe::read(unsigned long long, void*, int*)+0xac>
c00075fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075ff:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0007602:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0007606:	89 d1                	mov    ecx,edx
c0007608:	89 c7                	mov    edi,eax
c000760a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000760c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000760f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0007612:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0007615:	99                   	cdq    
c0007616:	89 f7                	mov    edi,esi
c0007618:	03 04 24             	add    eax,DWORD PTR [esp]
c000761b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000761f:	c1 ff 1f             	sar    edi,0x1f
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	52                   	push   edx
c0007625:	50                   	push   eax
c0007626:	e8 b5 42 01 00       	call   c001b8e0 <__umoddi3>
c000762b:	83 c4 10             	add    esp,0x10
c000762e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0007631:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007636:	75 10                	jne    c0007648 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0007638:	83 ec 0c             	sub    esp,0xc
c000763b:	68 a2 ce 01 c0       	push   0xc001cea2
c0007640:	e8 5c 7f 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0007645:	83 c4 10             	add    esp,0x10
c0007648:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000764c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000764f:	89 10                	mov    DWORD PTR [eax],edx
c0007651:	83 c4 1c             	add    esp,0x1c
c0007654:	31 c0                	xor    eax,eax
c0007656:	5b                   	pop    ebx
c0007657:	5e                   	pop    esi
c0007658:	5f                   	pop    edi
c0007659:	5d                   	pop    ebp
c000765a:	c3                   	ret    
c000765b:	90                   	nop

c000765c <Pipe::Pipe(int)>:
c000765c:	83 ec 0c             	sub    esp,0xc
c000765f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007663:	83 ec 08             	sub    esp,0x8
c0007666:	6a 00                	push   0x0
c0007668:	50                   	push   eax
c0007669:	e8 f0 0c 00 00       	call   c000835e <UnixFile::UnixFile(int)>
c000766e:	83 c4 10             	add    esp,0x10
c0007671:	ba c8 ce 01 c0       	mov    edx,0xc001cec8
c0007676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000767a:	89 10                	mov    DWORD PTR [eax],edx
c000767c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007680:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000768b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0007692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007696:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000769d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	50                   	push   eax
c00076a5:	e8 bb f5 ff ff       	call   c0006c65 <malloc>
c00076aa:	83 c4 10             	add    esp,0x10
c00076ad:	89 c2                	mov    edx,eax
c00076af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076b3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00076b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076ba:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00076be:	90                   	nop
c00076bf:	83 c4 0c             	add    esp,0xc
c00076c2:	c3                   	ret    
c00076c3:	90                   	nop

c00076c4 <VgaText::isAtty()>:
c00076c4:	b0 01                	mov    al,0x1
c00076c6:	c3                   	ret    
c00076c7:	90                   	nop

c00076c8 <VgaText::~VgaText()>:
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	ba 50 cf 01 c0       	mov    edx,0xc001cf50
c00076d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076d4:	89 10                	mov    DWORD PTR [eax],edx
c00076d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076da:	83 ec 0c             	sub    esp,0xc
c00076dd:	50                   	push   eax
c00076de:	e8 5d 0e 00 00       	call   c0008540 <UnixFile::~UnixFile()>
c00076e3:	83 c4 10             	add    esp,0x10
c00076e6:	90                   	nop
c00076e7:	83 c4 0c             	add    esp,0xc
c00076ea:	c3                   	ret    
c00076eb:	90                   	nop

c00076ec <VgaText::~VgaText()>:
c00076ec:	83 ec 0c             	sub    esp,0xc
c00076ef:	83 ec 0c             	sub    esp,0xc
c00076f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00076f6:	e8 cd ff ff ff       	call   c00076c8 <VgaText::~VgaText()>
c00076fb:	83 c4 10             	add    esp,0x10
c00076fe:	83 ec 08             	sub    esp,0x8
c0007701:	68 34 01 00 00       	push   0x134
c0007706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000770a:	e8 23 22 00 00       	call   c0009932 <operator delete(void*, unsigned long)>
c000770f:	83 c4 10             	add    esp,0x10
c0007712:	83 c4 0c             	add    esp,0xc
c0007715:	c3                   	ret    

c0007716 <VgaText::read(unsigned long long, void*, int*)>:
c0007716:	83 ec 10             	sub    esp,0x10
c0007719:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000771d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007725:	e8 58 45 00 00       	call   c000bc82 <readKeyboard(VgaText*, char*, unsigned long)>
c000772a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000772e:	89 02                	mov    DWORD PTR [edx],eax
c0007730:	31 c0                	xor    eax,eax
c0007732:	83 c4 1c             	add    esp,0x1c
c0007735:	c3                   	ret    

c0007736 <setTerminalScrollLock(bool)>:
c0007736:	c3                   	ret    

c0007737 <doTerminalCycle()>:
c0007737:	c3                   	ret    

c0007738 <addToTerminalCycle(VgaText*)>:
c0007738:	c3                   	ret    

c0007739 <scrollTerminalScrollLock(int)>:
c0007739:	c3                   	ret    

c000773a <VgaText::updateTitle()>:
c000773a:	c3                   	ret    
c000773b:	90                   	nop

c000773c <VgaText::load()>:
c000773c:	c3                   	ret    
c000773d:	90                   	nop

c000773e <VgaText::updateCursor()>:
c000773e:	83 ec 14             	sub    esp,0x14
c0007741:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007745:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007748:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000774b:	e8 8c dd 00 00       	call   c00154dc <Hal::consoleCursorUpdate(int, int)>
c0007750:	83 c4 1c             	add    esp,0x1c
c0007753:	c3                   	ret    

c0007754 <VgaText::doANSI_SGR(int)>:
c0007754:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000775c:	85 d2                	test   edx,edx
c000775e:	75 0b                	jne    c000776b <VgaText::doANSI_SGR(int)+0x17>
c0007760:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0007763:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0007766:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0007769:	eb 59                	jmp    c00077c4 <VgaText::doANSI_SGR(int)+0x70>
c000776b:	83 fa 07             	cmp    edx,0x7
c000776e:	75 0b                	jne    c000777b <VgaText::doANSI_SGR(int)+0x27>
c0007770:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0007773:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0007776:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0007779:	eb 49                	jmp    c00077c4 <VgaText::doANSI_SGR(int)+0x70>
c000777b:	83 fa 1b             	cmp    edx,0x1b
c000777e:	74 e0                	je     c0007760 <VgaText::doANSI_SGR(int)+0xc>
c0007780:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0007783:	83 f9 07             	cmp    ecx,0x7
c0007786:	77 09                	ja     c0007791 <VgaText::doANSI_SGR(int)+0x3d>
c0007788:	8b 14 8d 60 ef 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe10a0]
c000778f:	eb 20                	jmp    c00077b1 <VgaText::doANSI_SGR(int)+0x5d>
c0007791:	8d 4a d8             	lea    ecx,[edx-0x28]
c0007794:	83 f9 07             	cmp    ecx,0x7
c0007797:	77 09                	ja     c00077a2 <VgaText::doANSI_SGR(int)+0x4e>
c0007799:	8b 14 8d 60 ef 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe10a0]
c00077a0:	eb 22                	jmp    c00077c4 <VgaText::doANSI_SGR(int)+0x70>
c00077a2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00077a5:	83 f9 07             	cmp    ecx,0x7
c00077a8:	77 0b                	ja     c00077b5 <VgaText::doANSI_SGR(int)+0x61>
c00077aa:	8b 14 95 18 ee 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe11e8]
c00077b1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00077b4:	c3                   	ret    
c00077b5:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00077b8:	83 f9 07             	cmp    ecx,0x7
c00077bb:	77 0a                	ja     c00077c7 <VgaText::doANSI_SGR(int)+0x73>
c00077bd:	8b 14 95 f0 ed 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1210]
c00077c4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00077c7:	c3                   	ret    

c00077c8 <VgaText::setDefaultBgColour(VgaColour)>:
c00077c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00077cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00077d0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00077d3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00077d6:	c3                   	ret    
c00077d7:	90                   	nop

c00077d8 <VgaText::setDefaultFgColour(VgaColour)>:
c00077d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00077dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00077e0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00077e3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00077e6:	c3                   	ret    
c00077e7:	90                   	nop

c00077e8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00077e8:	53                   	push   ebx
c00077e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00077ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00077f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00077f5:	51                   	push   ecx
c00077f6:	e8 cd ff ff ff       	call   c00077c8 <VgaText::setDefaultBgColour(VgaColour)>
c00077fb:	58                   	pop    eax
c00077fc:	5a                   	pop    edx
c00077fd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0007801:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007805:	5b                   	pop    ebx
c0007806:	eb d0                	jmp    c00077d8 <VgaText::setDefaultFgColour(VgaColour)>

c0007808 <VgaText::setTitleTextColour(VgaColour)>:
c0007808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000780c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007810:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0007813:	c3                   	ret    

c0007814 <VgaText::setTitleColour(VgaColour)>:
c0007814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007818:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000781c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000781f:	c3                   	ret    

c0007820 <VgaText::setTitle(char*)>:
c0007820:	c3                   	ret    
c0007821:	90                   	nop

c0007822 <VgaText::combineColours(unsigned char, unsigned char)>:
c0007822:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0007826:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000782b:	83 e0 0f             	and    eax,0xf
c000782e:	c1 e2 04             	shl    edx,0x4
c0007831:	09 d0                	or     eax,edx
c0007833:	c3                   	ret    

c0007834 <VgaText::scrollScreen()>:
c0007834:	55                   	push   ebp
c0007835:	b9 01 00 00 00       	mov    ecx,0x1
c000783a:	57                   	push   edi
c000783b:	56                   	push   esi
c000783c:	53                   	push   ebx
c000783d:	83 ec 0c             	sub    esp,0xc
c0007840:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007844:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000784a:	31 ff                	xor    edi,edi
c000784c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000784f:	83 f9 18             	cmp    ecx,0x18
c0007852:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0007855:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000785c:	75 27                	jne    c0007885 <VgaText::scrollScreen()+0x51>
c000785e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0007861:	01 f5                	add    ebp,esi
c0007863:	f7 c7 01 00 00 00    	test   edi,0x1
c0007869:	74 16                	je     c0007881 <VgaText::scrollScreen()+0x4d>
c000786b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000786f:	50                   	push   eax
c0007870:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0007874:	50                   	push   eax
c0007875:	e8 a8 ff ff ff       	call   c0007822 <VgaText::combineColours(unsigned char, unsigned char)>
c000787a:	5a                   	pop    edx
c000787b:	5a                   	pop    edx
c000787c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000787f:	eb 04                	jmp    c0007885 <VgaText::scrollScreen()+0x51>
c0007881:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0007885:	47                   	inc    edi
c0007886:	46                   	inc    esi
c0007887:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000788d:	75 bd                	jne    c000784c <VgaText::scrollScreen()+0x18>
c000788f:	41                   	inc    ecx
c0007890:	83 f9 19             	cmp    ecx,0x19
c0007893:	75 af                	jne    c0007844 <VgaText::scrollScreen()+0x10>
c0007895:	39 1d 54 f6 01 c0    	cmp    DWORD PTR ds:0xc001f654,ebx
c000789b:	75 1f                	jne    c00078bc <VgaText::scrollScreen()+0x88>
c000789d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00078a1:	74 05                	je     c00078a8 <VgaText::scrollScreen()+0x74>
c00078a3:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00078a6:	eb 14                	jmp    c00078bc <VgaText::scrollScreen()+0x88>
c00078a8:	50                   	push   eax
c00078a9:	50                   	push   eax
c00078aa:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00078ae:	50                   	push   eax
c00078af:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00078b3:	50                   	push   eax
c00078b4:	e8 af da 00 00       	call   c0015368 <Hal::consoleScroll(int, int)>
c00078b9:	83 c4 10             	add    esp,0x10
c00078bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00078c0:	83 c4 0c             	add    esp,0xc
c00078c3:	5b                   	pop    ebx
c00078c4:	5e                   	pop    esi
c00078c5:	5f                   	pop    edi
c00078c6:	5d                   	pop    ebp
c00078c7:	e9 72 fe ff ff       	jmp    c000773e <VgaText::updateCursor()>

c00078cc <VgaText::combineCharAndColour(char, unsigned char)>:
c00078cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00078d1:	c1 e0 08             	shl    eax,0x8
c00078d4:	89 c2                	mov    edx,eax
c00078d6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00078db:	09 d0                	or     eax,edx
c00078dd:	c3                   	ret    

c00078de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00078de:	55                   	push   ebp
c00078df:	57                   	push   edi
c00078e0:	56                   	push   esi
c00078e1:	53                   	push   ebx
c00078e2:	83 ec 1c             	sub    esp,0x1c
c00078e5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00078e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00078ed:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00078f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00078f5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00078f9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00078fd:	0f b6 c3             	movzx  eax,bl
c0007900:	50                   	push   eax
c0007901:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0007906:	50                   	push   eax
c0007907:	e8 16 ff ff ff       	call   c0007822 <VgaText::combineColours(unsigned char, unsigned char)>
c000790c:	5a                   	pop    edx
c000790d:	0f b6 c0             	movzx  eax,al
c0007910:	59                   	pop    ecx
c0007911:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0007916:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000791a:	50                   	push   eax
c000791b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000791f:	e8 a8 ff ff ff       	call   c00078cc <VgaText::combineCharAndColour(char, unsigned char)>
c0007924:	5a                   	pop    edx
c0007925:	66 6b d7 50          	imul   dx,di,0x50
c0007929:	59                   	pop    ecx
c000792a:	01 f2                	add    edx,esi
c000792c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000792f:	0f b7 d2             	movzx  edx,dx
c0007932:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0007936:	39 2d 54 f6 01 c0    	cmp    DWORD PTR ds:0xc001f654,ebp
c000793c:	75 28                	jne    c0007966 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000793e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007942:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0007946:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000794a:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000794e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007956:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000795a:	83 c4 1c             	add    esp,0x1c
c000795d:	5b                   	pop    ebx
c000795e:	5e                   	pop    esi
c000795f:	5f                   	pop    edi
c0007960:	5d                   	pop    ebp
c0007961:	e9 0a db 00 00       	jmp    c0015470 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c0007966:	83 c4 1c             	add    esp,0x1c
c0007969:	5b                   	pop    ebx
c000796a:	5e                   	pop    esi
c000796b:	5f                   	pop    edi
c000796c:	5d                   	pop    ebp
c000796d:	c3                   	ret    

c000796e <VgaText::getCursorX()>:
c000796e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007972:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0007975:	c3                   	ret    

c0007976 <VgaText::getCursorY()>:
c0007976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000797a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000797d:	c3                   	ret    

c000797e <VgaText::setCursor(int, int)>:
c000797e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007982:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007986:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000798d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007990:	e9 a9 fd ff ff       	jmp    c000773e <VgaText::updateCursor()>

c0007995 <setActiveTerminal(VgaText*)>:
c0007995:	53                   	push   ebx
c0007996:	83 ec 08             	sub    esp,0x8
c0007999:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000799d:	85 db                	test   ebx,ebx
c000799f:	75 11                	jne    c00079b2 <setActiveTerminal(VgaText*)+0x1d>
c00079a1:	c7 44 24 10 dc ce 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cedc
c00079a9:	83 c4 08             	add    esp,0x8
c00079ac:	5b                   	pop    ebx
c00079ad:	e9 ef 7b 00 00       	jmp    c000f5a1 <Krnl::panic(char const*)>
c00079b2:	a1 54 f6 01 c0       	mov    eax,ds:0xc001f654
c00079b7:	85 c0                	test   eax,eax
c00079b9:	74 0c                	je     c00079c7 <setActiveTerminal(VgaText*)+0x32>
c00079bb:	83 ec 0c             	sub    esp,0xc
c00079be:	50                   	push   eax
c00079bf:	e8 7a fd ff ff       	call   c000773e <VgaText::updateCursor()>
c00079c4:	83 c4 10             	add    esp,0x10
c00079c7:	89 1d 54 f6 01 c0    	mov    DWORD PTR ds:0xc001f654,ebx
c00079cd:	50                   	push   eax
c00079ce:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00079d1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00079d4:	53                   	push   ebx
c00079d5:	e8 a4 ff ff ff       	call   c000797e <VgaText::setCursor(int, int)>
c00079da:	83 c4 18             	add    esp,0x18
c00079dd:	5b                   	pop    ebx
c00079de:	c3                   	ret    
c00079df:	90                   	nop

c00079e0 <VgaText::clearScreen()>:
c00079e0:	57                   	push   edi
c00079e1:	56                   	push   esi
c00079e2:	31 f6                	xor    esi,esi
c00079e4:	53                   	push   ebx
c00079e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079e9:	52                   	push   edx
c00079ea:	6a 00                	push   0x0
c00079ec:	6a 00                	push   0x0
c00079ee:	53                   	push   ebx
c00079ef:	e8 8a ff ff ff       	call   c000797e <VgaText::setCursor(int, int)>
c00079f4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00079fb:	83 c4 10             	add    esp,0x10
c00079fe:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0007a01:	7e 20                	jle    c0007a23 <VgaText::clearScreen()+0x43>
c0007a03:	31 ff                	xor    edi,edi
c0007a05:	50                   	push   eax
c0007a06:	50                   	push   eax
c0007a07:	56                   	push   esi
c0007a08:	57                   	push   edi
c0007a09:	47                   	inc    edi
c0007a0a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007a0d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007a10:	6a 20                	push   0x20
c0007a12:	53                   	push   ebx
c0007a13:	e8 c6 fe ff ff       	call   c00078de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007a18:	83 c4 20             	add    esp,0x20
c0007a1b:	83 ff 50             	cmp    edi,0x50
c0007a1e:	75 e5                	jne    c0007a05 <VgaText::clearScreen()+0x25>
c0007a20:	46                   	inc    esi
c0007a21:	eb db                	jmp    c00079fe <VgaText::clearScreen()+0x1e>
c0007a23:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007a2a:	5b                   	pop    ebx
c0007a2b:	5e                   	pop    esi
c0007a2c:	5f                   	pop    edi
c0007a2d:	c3                   	ret    

c0007a2e <VgaText::setCursorX(int)>:
c0007a2e:	83 ec 10             	sub    esp,0x10
c0007a31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a35:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a3c:	50                   	push   eax
c0007a3d:	e8 3c ff ff ff       	call   c000797e <VgaText::setCursor(int, int)>
c0007a42:	83 c4 1c             	add    esp,0x1c
c0007a45:	c3                   	ret    

c0007a46 <VgaText::setCursorY(int)>:
c0007a46:	83 ec 10             	sub    esp,0x10
c0007a49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a51:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007a54:	50                   	push   eax
c0007a55:	e8 24 ff ff ff       	call   c000797e <VgaText::setCursor(int, int)>
c0007a5a:	83 c4 1c             	add    esp,0x1c
c0007a5d:	c3                   	ret    

c0007a5e <VgaText::incrementCursor(bool)>:
c0007a5e:	56                   	push   esi
c0007a5f:	53                   	push   ebx
c0007a60:	51                   	push   ecx
c0007a61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007a69:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0007a6c:	40                   	inc    eax
c0007a6d:	83 f8 50             	cmp    eax,0x50
c0007a70:	74 05                	je     c0007a77 <VgaText::incrementCursor(bool)+0x19>
c0007a72:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0007a75:	eb 24                	jmp    c0007a9b <VgaText::incrementCursor(bool)+0x3d>
c0007a77:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007a7a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007a81:	8d 50 01             	lea    edx,[eax+0x1]
c0007a84:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007a87:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007a8a:	75 0f                	jne    c0007a9b <VgaText::incrementCursor(bool)+0x3d>
c0007a8c:	83 ec 0c             	sub    esp,0xc
c0007a8f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007a92:	53                   	push   ebx
c0007a93:	e8 9c fd ff ff       	call   c0007834 <VgaText::scrollScreen()>
c0007a98:	83 c4 10             	add    esp,0x10
c0007a9b:	89 f0                	mov    eax,esi
c0007a9d:	84 c0                	test   al,al
c0007a9f:	74 0c                	je     c0007aad <VgaText::incrementCursor(bool)+0x4f>
c0007aa1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007aa5:	5a                   	pop    edx
c0007aa6:	5b                   	pop    ebx
c0007aa7:	5e                   	pop    esi
c0007aa8:	e9 91 fc ff ff       	jmp    c000773e <VgaText::updateCursor()>
c0007aad:	58                   	pop    eax
c0007aae:	5b                   	pop    ebx
c0007aaf:	5e                   	pop    esi
c0007ab0:	c3                   	ret    
c0007ab1:	90                   	nop

c0007ab2 <VgaText::decrementCursor(bool)>:
c0007ab2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007ab6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007aba:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0007abd:	85 c0                	test   eax,eax
c0007abf:	74 04                	je     c0007ac5 <VgaText::decrementCursor(bool)+0x13>
c0007ac1:	48                   	dec    eax
c0007ac2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0007ac5:	84 c9                	test   cl,cl
c0007ac7:	74 09                	je     c0007ad2 <VgaText::decrementCursor(bool)+0x20>
c0007ac9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007acd:	e9 6c fc ff ff       	jmp    c000773e <VgaText::updateCursor()>
c0007ad2:	c3                   	ret    
c0007ad3:	90                   	nop

c0007ad4 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0007ad4:	53                   	push   ebx
c0007ad5:	83 ec 08             	sub    esp,0x8
c0007ad8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007adc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007ae0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007ae4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007ae8:	3c 07                	cmp    al,0x7
c0007aea:	75 21                	jne    c0007b0d <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0007aec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007af4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0007afc:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0007b04:	83 c4 08             	add    esp,0x8
c0007b07:	5b                   	pop    ebx
c0007b08:	e9 72 2d 00 00       	jmp    c000a87f <Krnl::beep(int, int, bool)>
c0007b0d:	3c 0d                	cmp    al,0xd
c0007b0f:	75 09                	jne    c0007b1a <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0007b11:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007b18:	eb 2c                	jmp    c0007b46 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0007b1a:	3c 0a                	cmp    al,0xa
c0007b1c:	75 31                	jne    c0007b4f <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0007b1e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007b21:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007b28:	8d 50 01             	lea    edx,[eax+0x1]
c0007b2b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007b2e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007b31:	75 0f                	jne    c0007b42 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0007b33:	83 ec 0c             	sub    esp,0xc
c0007b36:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007b39:	53                   	push   ebx
c0007b3a:	e8 f5 fc ff ff       	call   c0007834 <VgaText::scrollScreen()>
c0007b3f:	83 c4 10             	add    esp,0x10
c0007b42:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007b46:	83 c4 08             	add    esp,0x8
c0007b49:	5b                   	pop    ebx
c0007b4a:	e9 ef fb ff ff       	jmp    c000773e <VgaText::updateCursor()>
c0007b4f:	3c 08                	cmp    al,0x8
c0007b51:	75 25                	jne    c0007b78 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0007b53:	50                   	push   eax
c0007b54:	50                   	push   eax
c0007b55:	6a 01                	push   0x1
c0007b57:	53                   	push   ebx
c0007b58:	e8 55 ff ff ff       	call   c0007ab2 <VgaText::decrementCursor(bool)>
c0007b5d:	5a                   	pop    edx
c0007b5e:	59                   	pop    ecx
c0007b5f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007b62:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007b65:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007b68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007b6b:	6a 20                	push   0x20
c0007b6d:	53                   	push   ebx
c0007b6e:	e8 6b fd ff ff       	call   c00078de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007b73:	83 c4 28             	add    esp,0x28
c0007b76:	5b                   	pop    ebx
c0007b77:	c3                   	ret    
c0007b78:	83 ec 08             	sub    esp,0x8
c0007b7b:	0f be c0             	movsx  eax,al
c0007b7e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007b81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007b84:	51                   	push   ecx
c0007b85:	52                   	push   edx
c0007b86:	50                   	push   eax
c0007b87:	53                   	push   ebx
c0007b88:	e8 51 fd ff ff       	call   c00078de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007b8d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0007b91:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0007b99:	83 c4 28             	add    esp,0x28
c0007b9c:	5b                   	pop    ebx
c0007b9d:	e9 bc fe ff ff       	jmp    c0007a5e <VgaText::incrementCursor(bool)>

c0007ba2 <VgaText::putchar(char)>:
c0007ba2:	56                   	push   esi
c0007ba3:	53                   	push   ebx
c0007ba4:	83 ec 14             	sub    esp,0x14
c0007ba7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007bab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007baf:	3c 5b                	cmp    al,0x5b
c0007bb1:	75 18                	jne    c0007bcb <VgaText::putchar(char)+0x29>
c0007bb3:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0007bb7:	74 1f                	je     c0007bd8 <VgaText::putchar(char)+0x36>
c0007bb9:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0007bbf:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0007bc6:	e9 bd 00 00 00       	jmp    c0007c88 <VgaText::putchar(char)+0xe6>
c0007bcb:	3c 1b                	cmp    al,0x1b
c0007bcd:	75 09                	jne    c0007bd8 <VgaText::putchar(char)+0x36>
c0007bcf:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0007bd3:	e9 b0 00 00 00       	jmp    c0007c88 <VgaText::putchar(char)+0xe6>
c0007bd8:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0007bdb:	84 c9                	test   cl,cl
c0007bdd:	0f 84 92 00 00 00    	je     c0007c75 <VgaText::putchar(char)+0xd3>
c0007be3:	8d 50 c0             	lea    edx,[eax-0x40]
c0007be6:	80 fa 3e             	cmp    dl,0x3e
c0007be9:	77 76                	ja     c0007c61 <VgaText::putchar(char)+0xbf>
c0007beb:	3c 6d                	cmp    al,0x6d
c0007bed:	75 47                	jne    c0007c36 <VgaText::putchar(char)+0x94>
c0007bef:	31 f6                	xor    esi,esi
c0007bf1:	31 d2                	xor    edx,edx
c0007bf3:	31 c0                	xor    eax,eax
c0007bf5:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0007bf8:	7e 2d                	jle    c0007c27 <VgaText::putchar(char)+0x85>
c0007bfa:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0007bff:	80 fa 3b             	cmp    dl,0x3b
c0007c02:	75 17                	jne    c0007c1b <VgaText::putchar(char)+0x79>
c0007c04:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0007c08:	50                   	push   eax
c0007c09:	53                   	push   ebx
c0007c0a:	e8 45 fb ff ff       	call   c0007754 <VgaText::doANSI_SGR(int)>
c0007c0f:	59                   	pop    ecx
c0007c10:	31 d2                	xor    edx,edx
c0007c12:	58                   	pop    eax
c0007c13:	31 c0                	xor    eax,eax
c0007c15:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0007c19:	eb 09                	jmp    c0007c24 <VgaText::putchar(char)+0x82>
c0007c1b:	6b c0 0a             	imul   eax,eax,0xa
c0007c1e:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0007c22:	88 ca                	mov    dl,cl
c0007c24:	46                   	inc    esi
c0007c25:	eb ce                	jmp    c0007bf5 <VgaText::putchar(char)+0x53>
c0007c27:	84 d2                	test   dl,dl
c0007c29:	74 2e                	je     c0007c59 <VgaText::putchar(char)+0xb7>
c0007c2b:	50                   	push   eax
c0007c2c:	53                   	push   ebx
c0007c2d:	e8 22 fb ff ff       	call   c0007754 <VgaText::doANSI_SGR(int)>
c0007c32:	58                   	pop    eax
c0007c33:	5a                   	pop    edx
c0007c34:	eb 23                	jmp    c0007c59 <VgaText::putchar(char)+0xb7>
c0007c36:	3c 4a                	cmp    al,0x4a
c0007c38:	75 1f                	jne    c0007c59 <VgaText::putchar(char)+0xb7>
c0007c3a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0007c3e:	75 19                	jne    c0007c59 <VgaText::putchar(char)+0xb7>
c0007c40:	83 ec 0c             	sub    esp,0xc
c0007c43:	53                   	push   ebx
c0007c44:	e8 97 fd ff ff       	call   c00079e0 <VgaText::clearScreen()>
c0007c49:	83 c4 0c             	add    esp,0xc
c0007c4c:	6a 00                	push   0x0
c0007c4e:	6a 00                	push   0x0
c0007c50:	53                   	push   ebx
c0007c51:	e8 28 fd ff ff       	call   c000797e <VgaText::setCursor(int, int)>
c0007c56:	83 c4 10             	add    esp,0x10
c0007c59:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0007c5f:	eb 27                	jmp    c0007c88 <VgaText::putchar(char)+0xe6>
c0007c61:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0007c64:	83 fa 0e             	cmp    edx,0xe
c0007c67:	7f 1f                	jg     c0007c88 <VgaText::putchar(char)+0xe6>
c0007c69:	8d 4a 01             	lea    ecx,[edx+0x1]
c0007c6c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0007c6f:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0007c73:	eb 13                	jmp    c0007c88 <VgaText::putchar(char)+0xe6>
c0007c75:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007c78:	0f be c0             	movsx  eax,al
c0007c7b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007c7e:	50                   	push   eax
c0007c7f:	53                   	push   ebx
c0007c80:	e8 4f fe ff ff       	call   c0007ad4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0007c85:	83 c4 10             	add    esp,0x10
c0007c88:	83 c4 14             	add    esp,0x14
c0007c8b:	5b                   	pop    ebx
c0007c8c:	5e                   	pop    esi
c0007c8d:	c3                   	ret    

c0007c8e <VgaText::putx(unsigned int)>:
c0007c8e:	57                   	push   edi
c0007c8f:	b9 11 00 00 00       	mov    ecx,0x11
c0007c94:	56                   	push   esi
c0007c95:	be ea ce 01 c0       	mov    esi,0xc001ceea
c0007c9a:	53                   	push   ebx
c0007c9b:	83 ec 20             	sub    esp,0x20
c0007c9e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0007ca2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0007ca6:	fc                   	cld    
c0007ca7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ca9:	be 08 00 00 00       	mov    esi,0x8
c0007cae:	50                   	push   eax
c0007caf:	50                   	push   eax
c0007cb0:	89 d8                	mov    eax,ebx
c0007cb2:	c1 e3 04             	shl    ebx,0x4
c0007cb5:	c1 e8 1c             	shr    eax,0x1c
c0007cb8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0007cbd:	50                   	push   eax
c0007cbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc2:	e8 db fe ff ff       	call   c0007ba2 <VgaText::putchar(char)>
c0007cc7:	83 c4 10             	add    esp,0x10
c0007cca:	4e                   	dec    esi
c0007ccb:	75 e1                	jne    c0007cae <VgaText::putx(unsigned int)+0x20>
c0007ccd:	83 c4 20             	add    esp,0x20
c0007cd0:	5b                   	pop    ebx
c0007cd1:	5e                   	pop    esi
c0007cd2:	5f                   	pop    edi
c0007cd3:	c3                   	ret    

c0007cd4 <VgaText::puts(char const*)>:
c0007cd4:	53                   	push   ebx
c0007cd5:	83 ec 08             	sub    esp,0x8
c0007cd8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007cdc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0007cdf:	84 c0                	test   al,al
c0007ce1:	74 12                	je     c0007cf5 <VgaText::puts(char const*)+0x21>
c0007ce3:	43                   	inc    ebx
c0007ce4:	51                   	push   ecx
c0007ce5:	51                   	push   ecx
c0007ce6:	50                   	push   eax
c0007ce7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ceb:	e8 b2 fe ff ff       	call   c0007ba2 <VgaText::putchar(char)>
c0007cf0:	83 c4 10             	add    esp,0x10
c0007cf3:	eb e7                	jmp    c0007cdc <VgaText::puts(char const*)+0x8>
c0007cf5:	83 c4 08             	add    esp,0x8
c0007cf8:	5b                   	pop    ebx
c0007cf9:	c3                   	ret    

c0007cfa <VgaText::write(unsigned long long, void*, int*)>:
c0007cfa:	55                   	push   ebp
c0007cfb:	57                   	push   edi
c0007cfc:	56                   	push   esi
c0007cfd:	53                   	push   ebx
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007d05:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007d09:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007d0d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0007d14:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0007d17:	39 eb                	cmp    ebx,ebp
c0007d19:	74 13                	je     c0007d2e <VgaText::write(unsigned long long, void*, int*)+0x34>
c0007d1b:	43                   	inc    ebx
c0007d1c:	50                   	push   eax
c0007d1d:	50                   	push   eax
c0007d1e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0007d22:	50                   	push   eax
c0007d23:	56                   	push   esi
c0007d24:	e8 79 fe ff ff       	call   c0007ba2 <VgaText::putchar(char)>
c0007d29:	83 c4 10             	add    esp,0x10
c0007d2c:	eb e9                	jmp    c0007d17 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0007d2e:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0007d35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007d39:	89 38                	mov    DWORD PTR [eax],edi
c0007d3b:	83 c4 0c             	add    esp,0xc
c0007d3e:	31 c0                	xor    eax,eax
c0007d40:	5b                   	pop    ebx
c0007d41:	5e                   	pop    esi
c0007d42:	5f                   	pop    edi
c0007d43:	5d                   	pop    ebp
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0007d46:	55                   	push   ebp
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	53                   	push   ebx
c0007d4a:	83 ec 0c             	sub    esp,0xc
c0007d4d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007d51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007d56:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0007d5d:	50                   	push   eax
c0007d5e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007d63:	50                   	push   eax
c0007d64:	e8 b9 fa ff ff       	call   c0007822 <VgaText::combineColours(unsigned char, unsigned char)>
c0007d69:	5a                   	pop    edx
c0007d6a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007d6f:	59                   	pop    ecx
c0007d70:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007d73:	89 c5                	mov    ebp,eax
c0007d75:	0f b7 f6             	movzx  esi,si
c0007d78:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007d7c:	01 f6                	add    esi,esi
c0007d7e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007d81:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007d84:	84 c0                	test   al,al
c0007d86:	0f 84 f4 00 00 00    	je     c0007e80 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0007d8c:	3c 0d                	cmp    al,0xd
c0007d8e:	75 0c                	jne    c0007d9c <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0007d90:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007d97:	e9 de 00 00 00       	jmp    c0007e7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007d9c:	3c 0a                	cmp    al,0xa
c0007d9e:	75 45                	jne    c0007de5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0007da0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007da3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007daa:	8d 48 01             	lea    ecx,[eax+0x1]
c0007dad:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0007db0:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0007db3:	75 0f                	jne    c0007dc4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0007db5:	83 ec 0c             	sub    esp,0xc
c0007db8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007dbb:	53                   	push   ebx
c0007dbc:	e8 73 fa ff ff       	call   c0007834 <VgaText::scrollScreen()>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	83 ec 0c             	sub    esp,0xc
c0007dc7:	53                   	push   ebx
c0007dc8:	e8 71 f9 ff ff       	call   c000773e <VgaText::updateCursor()>
c0007dcd:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007dd2:	83 c4 10             	add    esp,0x10
c0007dd5:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007dd8:	0f b7 f6             	movzx  esi,si
c0007ddb:	01 f6                	add    esi,esi
c0007ddd:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007de0:	e9 95 00 00 00       	jmp    c0007e7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007de5:	3c 08                	cmp    al,0x8
c0007de7:	75 35                	jne    c0007e1e <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0007de9:	51                   	push   ecx
c0007dea:	51                   	push   ecx
c0007deb:	6a 01                	push   0x1
c0007ded:	53                   	push   ebx
c0007dee:	e8 bf fc ff ff       	call   c0007ab2 <VgaText::decrementCursor(bool)>
c0007df3:	5e                   	pop    esi
c0007df4:	58                   	pop    eax
c0007df5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007df8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007dfb:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007dfe:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007e01:	6a 20                	push   0x20
c0007e03:	53                   	push   ebx
c0007e04:	e8 d5 fa ff ff       	call   c00078de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007e09:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007e0e:	83 c4 20             	add    esp,0x20
c0007e11:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007e14:	0f b7 f6             	movzx  esi,si
c0007e17:	01 f6                	add    esi,esi
c0007e19:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007e1c:	eb 5c                	jmp    c0007e7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007e1e:	52                   	push   edx
c0007e1f:	52                   	push   edx
c0007e20:	89 ea                	mov    edx,ebp
c0007e22:	0f b6 ca             	movzx  ecx,dl
c0007e25:	51                   	push   ecx
c0007e26:	50                   	push   eax
c0007e27:	e8 a0 fa ff ff       	call   c00078cc <VgaText::combineCharAndColour(char, unsigned char)>
c0007e2c:	83 c4 10             	add    esp,0x10
c0007e2f:	66 89 06             	mov    WORD PTR [esi],ax
c0007e32:	39 1d 54 f6 01 c0    	cmp    DWORD PTR ds:0xc001f654,ebx
c0007e38:	75 1d                	jne    c0007e57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0007e3a:	83 ec 0c             	sub    esp,0xc
c0007e3d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007e40:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007e43:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007e47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007e4b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007e4e:	50                   	push   eax
c0007e4f:	e8 1c d6 00 00       	call   c0015470 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c0007e54:	83 c4 20             	add    esp,0x20
c0007e57:	83 c6 02             	add    esi,0x2
c0007e5a:	50                   	push   eax
c0007e5b:	50                   	push   eax
c0007e5c:	6a 00                	push   0x0
c0007e5e:	53                   	push   ebx
c0007e5f:	e8 fa fb ff ff       	call   c0007a5e <VgaText::incrementCursor(bool)>
c0007e64:	83 c4 10             	add    esp,0x10
c0007e67:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0007e6b:	75 0d                	jne    c0007e7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007e6d:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007e72:	0f b7 f6             	movzx  esi,si
c0007e75:	01 f6                	add    esi,esi
c0007e77:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007e7a:	47                   	inc    edi
c0007e7b:	e9 01 ff ff ff       	jmp    c0007d81 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0007e80:	83 ec 0c             	sub    esp,0xc
c0007e83:	53                   	push   ebx
c0007e84:	e8 b5 f8 ff ff       	call   c000773e <VgaText::updateCursor()>
c0007e89:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007e90:	83 c4 1c             	add    esp,0x1c
c0007e93:	5b                   	pop    ebx
c0007e94:	5e                   	pop    esi
c0007e95:	5f                   	pop    edi
c0007e96:	5d                   	pop    ebp
c0007e97:	c3                   	ret    

c0007e98 <VgaText::VgaText(char const*)>:
c0007e98:	56                   	push   esi
c0007e99:	53                   	push   ebx
c0007e9a:	83 ec 04             	sub    esp,0x4
c0007e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ea1:	83 ec 08             	sub    esp,0x8
c0007ea4:	6a 00                	push   0x0
c0007ea6:	50                   	push   eax
c0007ea7:	e8 b2 04 00 00       	call   c000835e <UnixFile::UnixFile(int)>
c0007eac:	83 c4 10             	add    esp,0x10
c0007eaf:	ba 50 cf 01 c0       	mov    edx,0xc001cf50
c0007eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eb8:	89 10                	mov    DWORD PTR [eax],edx
c0007eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ebe:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0007ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec9:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0007ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ed4:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0007ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007edc:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0007ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ee4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0007eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eef:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0007ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007efa:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0007f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f05:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0007f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f10:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0007f17:	83 ec 0c             	sub    esp,0xc
c0007f1a:	6a 01                	push   0x1
c0007f1c:	e8 80 08 00 00       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c0007f21:	83 c4 10             	add    esp,0x10
c0007f24:	89 c2                	mov    edx,eax
c0007f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0007f2d:	8b 1d f4 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6f4
c0007f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007f3a:	89 c6                	mov    esi,eax
c0007f3c:	e8 f1 f0 ff ff       	call   c0007032 <Phys::allocatePage()>
c0007f41:	68 05 0c 00 00       	push   0xc05
c0007f46:	56                   	push   esi
c0007f47:	50                   	push   eax
c0007f48:	53                   	push   ebx
c0007f49:	e8 ac 0e 00 00       	call   c0008dfa <VAS::mapPage(unsigned long, unsigned long, int)>
c0007f4e:	83 c4 10             	add    esp,0x10
c0007f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007f58:	83 ec 04             	sub    esp,0x4
c0007f5b:	68 a0 0f 00 00       	push   0xfa0
c0007f60:	6a 00                	push   0x0
c0007f62:	50                   	push   eax
c0007f63:	e8 88 85 ff ff       	call   c00004f0 <memset>
c0007f68:	83 c4 10             	add    esp,0x10
c0007f6b:	83 ec 04             	sub    esp,0x4
c0007f6e:	6a 00                	push   0x0
c0007f70:	6a 07                	push   0x7
c0007f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f76:	e8 6d f8 ff ff       	call   c00077e8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0007f7b:	83 c4 10             	add    esp,0x10
c0007f7e:	83 ec 04             	sub    esp,0x4
c0007f81:	6a 00                	push   0x0
c0007f83:	6a 00                	push   0x0
c0007f85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f89:	e8 f0 f9 ff ff       	call   c000797e <VgaText::setCursor(int, int)>
c0007f8e:	83 c4 10             	add    esp,0x10
c0007f91:	83 ec 0c             	sub    esp,0xc
c0007f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f98:	e8 43 fa ff ff       	call   c00079e0 <VgaText::clearScreen()>
c0007f9d:	83 c4 10             	add    esp,0x10
c0007fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fa4:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0007fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fac:	05 82 00 00 00       	add    eax,0x82
c0007fb1:	83 ec 04             	sub    esp,0x4
c0007fb4:	6a 30                	push   0x30
c0007fb6:	6a 00                	push   0x0
c0007fb8:	50                   	push   eax
c0007fb9:	e8 32 85 ff ff       	call   c00004f0 <memset>
c0007fbe:	83 c4 10             	add    esp,0x10
c0007fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fc5:	05 b2 00 00 00       	add    eax,0xb2
c0007fca:	83 ec 04             	sub    esp,0x4
c0007fcd:	68 80 00 00 00       	push   0x80
c0007fd2:	6a 00                	push   0x0
c0007fd4:	50                   	push   eax
c0007fd5:	e8 16 85 ff ff       	call   c00004f0 <memset>
c0007fda:	83 c4 10             	add    esp,0x10
c0007fdd:	90                   	nop
c0007fde:	83 c4 04             	add    esp,0x4
c0007fe1:	5b                   	pop    ebx
c0007fe2:	5e                   	pop    esi
c0007fe3:	c3                   	ret    

c0007fe4 <VgaText::receiveKey(unsigned char)>:
c0007fe4:	57                   	push   edi
c0007fe5:	56                   	push   esi
c0007fe6:	53                   	push   ebx
c0007fe7:	83 ec 10             	sub    esp,0x10
c0007fea:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007fee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007ff2:	84 db                	test   bl,bl
c0007ff4:	0f 84 ba 00 00 00    	je     c00080b4 <VgaText::receiveKey(unsigned char)+0xd0>
c0007ffa:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008000:	80 fb 08             	cmp    bl,0x8
c0008003:	75 2c                	jne    c0008031 <VgaText::receiveKey(unsigned char)+0x4d>
c0008005:	83 ec 0c             	sub    esp,0xc
c0008008:	57                   	push   edi
c0008009:	e8 52 85 ff ff       	call   c0000560 <strlen>
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	85 c0                	test   eax,eax
c0008013:	74 41                	je     c0008056 <VgaText::receiveKey(unsigned char)+0x72>
c0008015:	50                   	push   eax
c0008016:	50                   	push   eax
c0008017:	6a 08                	push   0x8
c0008019:	56                   	push   esi
c000801a:	e8 83 fb ff ff       	call   c0007ba2 <VgaText::putchar(char)>
c000801f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008022:	e8 39 85 ff ff       	call   c0000560 <strlen>
c0008027:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c000802f:	eb 22                	jmp    c0008053 <VgaText::receiveKey(unsigned char)+0x6f>
c0008031:	0f be c3             	movsx  eax,bl
c0008034:	52                   	push   edx
c0008035:	52                   	push   edx
c0008036:	50                   	push   eax
c0008037:	56                   	push   esi
c0008038:	e8 65 fb ff ff       	call   c0007ba2 <VgaText::putchar(char)>
c000803d:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0008041:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008046:	59                   	pop    ecx
c0008047:	58                   	pop    eax
c0008048:	8d 44 24 16          	lea    eax,[esp+0x16]
c000804c:	50                   	push   eax
c000804d:	57                   	push   edi
c000804e:	e8 8d 87 ff ff       	call   c00007e0 <strcat>
c0008053:	83 c4 10             	add    esp,0x10
c0008056:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000805d:	75 05                	jne    c0008064 <VgaText::receiveKey(unsigned char)+0x80>
c000805f:	80 fb 0a             	cmp    bl,0xa
c0008062:	75 50                	jne    c00080b4 <VgaText::receiveKey(unsigned char)+0xd0>
c0008064:	83 ec 0c             	sub    esp,0xc
c0008067:	81 c6 b2 00 00 00    	add    esi,0xb2
c000806d:	56                   	push   esi
c000806e:	e8 ed 84 ff ff       	call   c0000560 <strlen>
c0008073:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008076:	89 c3                	mov    ebx,eax
c0008078:	e8 e3 84 ff ff       	call   c0000560 <strlen>
c000807d:	83 c4 10             	add    esp,0x10
c0008080:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0008084:	3d 80 00 00 00       	cmp    eax,0x80
c0008089:	76 10                	jbe    c000809b <VgaText::receiveKey(unsigned char)+0xb7>
c000808b:	83 ec 0c             	sub    esp,0xc
c000808e:	68 fb ce 01 c0       	push   0xc001cefb
c0008093:	e8 09 75 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0008098:	83 c4 10             	add    esp,0x10
c000809b:	50                   	push   eax
c000809c:	50                   	push   eax
c000809d:	57                   	push   edi
c000809e:	56                   	push   esi
c000809f:	e8 3c 87 ff ff       	call   c00007e0 <strcat>
c00080a4:	83 c4 0c             	add    esp,0xc
c00080a7:	6a 30                	push   0x30
c00080a9:	6a 00                	push   0x0
c00080ab:	57                   	push   edi
c00080ac:	e8 3f 84 ff ff       	call   c00004f0 <memset>
c00080b1:	83 c4 10             	add    esp,0x10
c00080b4:	83 c4 10             	add    esp,0x10
c00080b7:	5b                   	pop    ebx
c00080b8:	5e                   	pop    esi
c00080b9:	5f                   	pop    edi
c00080ba:	c3                   	ret    
c00080bb:	90                   	nop

c00080bc <VgaText::doUpdate()>:
c00080bc:	c3                   	ret    

c00080bd <newTerminal(char*)>:
c00080bd:	83 ec 28             	sub    esp,0x28
c00080c0:	68 34 01 00 00       	push   0x134
c00080c5:	e8 9b eb ff ff       	call   c0006c65 <malloc>
c00080ca:	5a                   	pop    edx
c00080cb:	59                   	pop    ecx
c00080cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080d0:	50                   	push   eax
c00080d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00080d5:	e8 be fd ff ff       	call   c0007e98 <VgaText::VgaText(char const*)>
c00080da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00080de:	83 c4 2c             	add    esp,0x2c
c00080e1:	c3                   	ret    
c00080e2:	66 90                	xchg   ax,ax

c00080e4 <TSS::TSS()>:
c00080e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00080ef:	90                   	nop
c00080f0:	c3                   	ret    
c00080f1:	90                   	nop
c00080f2:	66 90                	xchg   ax,ax

c00080f4 <TSS::setESP(unsigned long)>:
c00080f4:	55                   	push   ebp
c00080f5:	89 e5                	mov    ebp,esp
c00080f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008100:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008103:	90                   	nop
c0008104:	5d                   	pop    ebp
c0008105:	c3                   	ret    
c0008106:	66 90                	xchg   ax,ax

c0008108 <TSS::flush()>:
c0008108:	55                   	push   ebp
c0008109:	89 e5                	mov    ebp,esp
c000810b:	83 ec 10             	sub    esp,0x10
c000810e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008111:	8b 00                	mov    eax,DWORD PTR [eax]
c0008113:	83 c8 03             	or     eax,0x3
c0008116:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000811a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000811e:	66 89 d0             	mov    ax,dx
c0008121:	0f 00 d8             	ltr    ax
c0008124:	90                   	nop
c0008125:	c9                   	leave  
c0008126:	c3                   	ret    
c0008127:	90                   	nop

c0008128 <TSS::setup(unsigned long, unsigned long)>:
c0008128:	55                   	push   ebp
c0008129:	89 e5                	mov    ebp,esp
c000812b:	83 ec 18             	sub    esp,0x18
c000812e:	83 ec 0c             	sub    esp,0xc
c0008131:	6a 68                	push   0x68
c0008133:	e8 2d eb ff ff       	call   c0006c65 <malloc>
c0008138:	83 c4 10             	add    esp,0x10
c000813b:	89 c2                	mov    edx,eax
c000813d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008140:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008146:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008149:	83 ec 04             	sub    esp,0x4
c000814c:	6a 68                	push   0x68
c000814e:	6a 00                	push   0x0
c0008150:	50                   	push   eax
c0008151:	e8 9a 83 ff ff       	call   c00004f0 <memset>
c0008156:	83 c4 10             	add    esp,0x10
c0008159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000815c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000815f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008168:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000816b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008174:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008177:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000817a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000817d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008180:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008183:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008189:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000818c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000818f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008198:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000819b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00081a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081a7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00081ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081b3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00081b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081bf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00081c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081cb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00081ce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00081d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00081da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00081dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081e3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00081ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081f0:	0f 20 da             	mov    edx,cr3
c00081f3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00081f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00081f9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00081fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00081ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008202:	83 ec 08             	sub    esp,0x8
c0008205:	50                   	push   eax
c0008206:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008209:	50                   	push   eax
c000820a:	e8 9d e2 ff ff       	call   c00064ac <GDTEntry::setBase(unsigned int)>
c000820f:	83 c4 10             	add    esp,0x10
c0008212:	83 ec 08             	sub    esp,0x8
c0008215:	6a 68                	push   0x68
c0008217:	8d 45 ec             	lea    eax,[ebp-0x14]
c000821a:	50                   	push   eax
c000821b:	e8 a8 e2 ff ff       	call   c00064c8 <GDTEntry::setLimit(unsigned int)>
c0008220:	83 c4 10             	add    esp,0x10
c0008223:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008227:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000822a:	83 e0 0f             	and    eax,0xf
c000822d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008230:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008233:	83 c8 40             	or     eax,0x40
c0008236:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008239:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000823e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008244:	05 78 01 00 00       	add    eax,0x178
c0008249:	83 ec 04             	sub    esp,0x4
c000824c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000824f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008252:	50                   	push   eax
c0008253:	e8 a4 e2 ff ff       	call   c00064fc <GDT::addEntry(GDTEntry)>
c0008258:	83 c4 10             	add    esp,0x10
c000825b:	89 c2                	mov    edx,eax
c000825d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008260:	89 10                	mov    DWORD PTR [eax],edx
c0008262:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0008267:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000826d:	05 78 01 00 00       	add    eax,0x178
c0008272:	83 ec 0c             	sub    esp,0xc
c0008275:	50                   	push   eax
c0008276:	e8 ab e2 ff ff       	call   c0006526 <GDT::flush()>
c000827b:	83 c4 10             	add    esp,0x10
c000827e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008281:	8b 00                	mov    eax,DWORD PTR [eax]
c0008283:	c9                   	leave  
c0008284:	c3                   	ret    
c0008285:	90                   	nop

c0008286 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000828a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000828e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008291:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008296:	75 08                	jne    c00082a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008298:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000829e:	eb 38                	jmp    c00082d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00082a0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00082a5:	75 17                	jne    c00082be <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00082a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00082ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00082af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00082b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00082b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00082bb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00082be:	89 c1                	mov    ecx,eax
c00082c0:	83 e1 fd             	and    ecx,0xfffffffd
c00082c3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00082c9:	74 cd                	je     c0008298 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00082cb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00082d0:	83 e0 ef             	and    eax,0xffffffef
c00082d3:	83 f8 08             	cmp    eax,0x8
c00082d6:	76 c0                	jbe    c0008298 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00082d8:	31 c0                	xor    eax,eax
c00082da:	c3                   	ret    
c00082db:	90                   	nop

c00082dc <ReservedFilename::isAtty()>:
c00082dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00082e3:	31 c0                	xor    eax,eax
c00082e5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00082eb:	74 09                	je     c00082f6 <ReservedFilename::isAtty()+0x1a>
c00082ed:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00082f3:	0f 94 c0             	sete   al
c00082f6:	c3                   	ret    
c00082f7:	90                   	nop

c00082f8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00082f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008303:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008307:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000830c:	75 08                	jne    c0008316 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000830e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008314:	eb 3d                	jmp    c0008353 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008316:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000831b:	75 17                	jne    c0008334 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000831d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008322:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008325:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000832b:	8b 10                	mov    edx,DWORD PTR [eax]
c000832d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008331:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008334:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008339:	75 04                	jne    c000833f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000833b:	89 0a                	mov    DWORD PTR [edx],ecx
c000833d:	eb 14                	jmp    c0008353 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000833f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008344:	74 c8                	je     c000830e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008346:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000834b:	83 e0 ef             	and    eax,0xffffffef
c000834e:	83 f8 08             	cmp    eax,0x8
c0008351:	76 bb                	jbe    c000830e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008353:	31 c0                	xor    eax,eax
c0008355:	c3                   	ret    

c0008356 <UnixFile::getFileDescriptor()>:
c0008356:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000835a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000835d:	c3                   	ret    

c000835e <UnixFile::UnixFile(int)>:
c000835e:	53                   	push   ebx
c000835f:	83 ec 28             	sub    esp,0x28
c0008362:	ba 18 d0 01 c0       	mov    edx,0xc001d018
c0008367:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000836b:	89 10                	mov    DWORD PTR [eax],edx
c000836d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008375:	0f 8f 8c 01 00 00    	jg     c0008507 <UnixFile::UnixFile(int)+0x1a9>
c000837b:	a1 a0 ef 01 c0       	mov    eax,ds:0xc001efa0
c0008380:	8d 50 01             	lea    edx,[eax+0x1]
c0008383:	89 15 a0 ef 01 c0    	mov    DWORD PTR ds:0xc001efa0,edx
c0008389:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000838d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008390:	83 ec 08             	sub    esp,0x8
c0008393:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008397:	68 d8 f6 01 c0       	push   0xc001f6d8
c000839c:	e8 27 37 01 00       	call   c001bac8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00083a1:	83 c4 10             	add    esp,0x10
c00083a4:	a0 d4 f6 01 c0       	mov    al,ds:0xc001f6d4
c00083a9:	83 f0 01             	xor    eax,0x1
c00083ac:	84 c0                	test   al,al
c00083ae:	0f 84 54 01 00 00    	je     c0008508 <UnixFile::UnixFile(int)+0x1aa>
c00083b4:	c6 05 d4 f6 01 c0 01 	mov    BYTE PTR ds:0xc001f6d4,0x1
c00083bb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00083c3:	83 ec 0c             	sub    esp,0xc
c00083c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083ca:	e8 96 e8 ff ff       	call   c0006c65 <malloc>
c00083cf:	83 c4 10             	add    esp,0x10
c00083d2:	89 c3                	mov    ebx,eax
c00083d4:	83 ec 08             	sub    esp,0x8
c00083d7:	68 03 ff ff 0f       	push   0xfffff03
c00083dc:	53                   	push   ebx
c00083dd:	e8 2c 01 00 00       	call   c000850e <ReservedFilename::ReservedFilename(int)>
c00083e2:	83 c4 10             	add    esp,0x10
c00083e5:	89 1d cc f6 01 c0    	mov    DWORD PTR ds:0xc001f6cc,ebx
c00083eb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00083f3:	83 ec 0c             	sub    esp,0xc
c00083f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083fa:	e8 66 e8 ff ff       	call   c0006c65 <malloc>
c00083ff:	83 c4 10             	add    esp,0x10
c0008402:	89 c3                	mov    ebx,eax
c0008404:	83 ec 08             	sub    esp,0x8
c0008407:	68 01 ff ff 0f       	push   0xfffff01
c000840c:	53                   	push   ebx
c000840d:	e8 fc 00 00 00       	call   c000850e <ReservedFilename::ReservedFilename(int)>
c0008412:	83 c4 10             	add    esp,0x10
c0008415:	89 1d d0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6d0,ebx
c000841b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008423:	83 ec 0c             	sub    esp,0xc
c0008426:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000842a:	e8 36 e8 ff ff       	call   c0006c65 <malloc>
c000842f:	83 c4 10             	add    esp,0x10
c0008432:	89 c3                	mov    ebx,eax
c0008434:	83 ec 08             	sub    esp,0x8
c0008437:	68 00 ff ff 0f       	push   0xfffff00
c000843c:	53                   	push   ebx
c000843d:	e8 cc 00 00 00       	call   c000850e <ReservedFilename::ReservedFilename(int)>
c0008442:	83 c4 10             	add    esp,0x10
c0008445:	89 1d c4 f6 01 c0    	mov    DWORD PTR ds:0xc001f6c4,ebx
c000844b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008453:	83 ec 0c             	sub    esp,0xc
c0008456:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000845a:	e8 06 e8 ff ff       	call   c0006c65 <malloc>
c000845f:	83 c4 10             	add    esp,0x10
c0008462:	89 c3                	mov    ebx,eax
c0008464:	83 ec 08             	sub    esp,0x8
c0008467:	68 02 ff ff 0f       	push   0xfffff02
c000846c:	53                   	push   ebx
c000846d:	e8 9c 00 00 00       	call   c000850e <ReservedFilename::ReservedFilename(int)>
c0008472:	83 c4 10             	add    esp,0x10
c0008475:	89 1d c8 f6 01 c0    	mov    DWORD PTR ds:0xc001f6c8,ebx
c000847b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008483:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008488:	7f 7e                	jg     c0008508 <UnixFile::UnixFile(int)+0x1aa>
c000848a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008492:	83 ec 0c             	sub    esp,0xc
c0008495:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008499:	e8 c7 e7 ff ff       	call   c0006c65 <malloc>
c000849e:	83 c4 10             	add    esp,0x10
c00084a1:	89 c3                	mov    ebx,eax
c00084a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084a7:	05 10 ff ff 0f       	add    eax,0xfffff10
c00084ac:	83 ec 08             	sub    esp,0x8
c00084af:	50                   	push   eax
c00084b0:	53                   	push   ebx
c00084b1:	e8 58 00 00 00       	call   c000850e <ReservedFilename::ReservedFilename(int)>
c00084b6:	83 c4 10             	add    esp,0x10
c00084b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084bd:	89 1c 85 a0 f6 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0960],ebx
c00084c4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00084cc:	83 ec 0c             	sub    esp,0xc
c00084cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084d3:	e8 8d e7 ff ff       	call   c0006c65 <malloc>
c00084d8:	83 c4 10             	add    esp,0x10
c00084db:	89 c3                	mov    ebx,eax
c00084dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084e1:	05 20 ff ff 0f       	add    eax,0xfffff20
c00084e6:	83 ec 08             	sub    esp,0x8
c00084e9:	50                   	push   eax
c00084ea:	53                   	push   ebx
c00084eb:	e8 1e 00 00 00       	call   c000850e <ReservedFilename::ReservedFilename(int)>
c00084f0:	83 c4 10             	add    esp,0x10
c00084f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084f7:	89 1c 85 60 f6 01 c0 	mov    DWORD PTR [eax*4-0x3ffe09a0],ebx
c00084fe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008502:	e9 7c ff ff ff       	jmp    c0008483 <UnixFile::UnixFile(int)+0x125>
c0008507:	90                   	nop
c0008508:	83 c4 28             	add    esp,0x28
c000850b:	5b                   	pop    ebx
c000850c:	c3                   	ret    
c000850d:	90                   	nop

c000850e <ReservedFilename::ReservedFilename(int)>:
c000850e:	83 ec 0c             	sub    esp,0xc
c0008511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008515:	83 ec 08             	sub    esp,0x8
c0008518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000851c:	50                   	push   eax
c000851d:	e8 3c fe ff ff       	call   c000835e <UnixFile::UnixFile(int)>
c0008522:	83 c4 10             	add    esp,0x10
c0008525:	ba 34 d0 01 c0       	mov    edx,0xc001d034
c000852a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000852e:	89 10                	mov    DWORD PTR [eax],edx
c0008530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008534:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008538:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000853b:	90                   	nop
c000853c:	83 c4 0c             	add    esp,0xc
c000853f:	c3                   	ret    

c0008540 <UnixFile::~UnixFile()>:
c0008540:	83 ec 1c             	sub    esp,0x1c
c0008543:	ba 18 d0 01 c0       	mov    edx,0xc001d018
c0008548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000854c:	89 10                	mov    DWORD PTR [eax],edx
c000854e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008552:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008555:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000855a:	7f 73                	jg     c00085cf <UnixFile::~UnixFile()+0x8f>
c000855c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008564:	83 ec 0c             	sub    esp,0xc
c0008567:	68 d8 f6 01 c0       	push   0xc001f6d8
c000856c:	e8 2b 36 01 00       	call   c001bb9c <LinkedList<UnixFile>::getFirstElement()>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008578:	83 ec 0c             	sub    esp,0xc
c000857b:	68 d8 f6 01 c0       	push   0xc001f6d8
c0008580:	e8 1f 36 01 00       	call   c001bba4 <LinkedList<UnixFile>::removeFirst()>
c0008585:	83 c4 10             	add    esp,0x10
c0008588:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000858c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008590:	74 40                	je     c00085d2 <UnixFile::~UnixFile()+0x92>
c0008592:	83 ec 08             	sub    esp,0x8
c0008595:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008599:	68 d8 f6 01 c0       	push   0xc001f6d8
c000859e:	e8 25 35 01 00       	call   c001bac8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00085a3:	83 c4 10             	add    esp,0x10
c00085a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085aa:	8d 50 01             	lea    edx,[eax+0x1]
c00085ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085b1:	3d 88 13 00 00       	cmp    eax,0x1388
c00085b6:	0f 94 c0             	sete   al
c00085b9:	84 c0                	test   al,al
c00085bb:	74 a7                	je     c0008564 <UnixFile::~UnixFile()+0x24>
c00085bd:	83 ec 0c             	sub    esp,0xc
c00085c0:	68 f0 cf 01 c0       	push   0xc001cff0
c00085c5:	e8 d7 6f 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c00085ca:	83 c4 10             	add    esp,0x10
c00085cd:	eb 95                	jmp    c0008564 <UnixFile::~UnixFile()+0x24>
c00085cf:	90                   	nop
c00085d0:	eb 01                	jmp    c00085d3 <UnixFile::~UnixFile()+0x93>
c00085d2:	90                   	nop
c00085d3:	90                   	nop
c00085d4:	83 c4 1c             	add    esp,0x1c
c00085d7:	c3                   	ret    

c00085d8 <UnixFile::~UnixFile()>:
c00085d8:	83 ec 0c             	sub    esp,0xc
c00085db:	83 ec 0c             	sub    esp,0xc
c00085de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e2:	e8 59 ff ff ff       	call   c0008540 <UnixFile::~UnixFile()>
c00085e7:	83 c4 10             	add    esp,0x10
c00085ea:	83 ec 08             	sub    esp,0x8
c00085ed:	6a 0c                	push   0xc
c00085ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085f3:	e8 3a 13 00 00       	call   c0009932 <operator delete(void*, unsigned long)>
c00085f8:	83 c4 10             	add    esp,0x10
c00085fb:	83 c4 0c             	add    esp,0xc
c00085fe:	c3                   	ret    
c00085ff:	90                   	nop

c0008600 <ReservedFilename::~ReservedFilename()>:
c0008600:	83 ec 0c             	sub    esp,0xc
c0008603:	ba 34 d0 01 c0       	mov    edx,0xc001d034
c0008608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000860c:	89 10                	mov    DWORD PTR [eax],edx
c000860e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008612:	83 ec 0c             	sub    esp,0xc
c0008615:	50                   	push   eax
c0008616:	e8 25 ff ff ff       	call   c0008540 <UnixFile::~UnixFile()>
c000861b:	83 c4 10             	add    esp,0x10
c000861e:	90                   	nop
c000861f:	83 c4 0c             	add    esp,0xc
c0008622:	c3                   	ret    
c0008623:	90                   	nop

c0008624 <ReservedFilename::~ReservedFilename()>:
c0008624:	83 ec 0c             	sub    esp,0xc
c0008627:	83 ec 0c             	sub    esp,0xc
c000862a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000862e:	e8 cd ff ff ff       	call   c0008600 <ReservedFilename::~ReservedFilename()>
c0008633:	83 c4 10             	add    esp,0x10
c0008636:	83 ec 08             	sub    esp,0x8
c0008639:	6a 0c                	push   0xc
c000863b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000863f:	e8 ee 12 00 00       	call   c0009932 <operator delete(void*, unsigned long)>
c0008644:	83 c4 10             	add    esp,0x10
c0008647:	83 c4 0c             	add    esp,0xc
c000864a:	c3                   	ret    

c000864b <getFromFileDescriptor(int)>:
c000864b:	53                   	push   ebx
c000864c:	83 ec 08             	sub    esp,0x8
c000864f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008653:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0008659:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000865f:	7f 2c                	jg     c000868d <getFromFileDescriptor(int)+0x42>
c0008661:	83 ec 0c             	sub    esp,0xc
c0008664:	68 d8 f6 01 c0       	push   0xc001f6d8
c0008669:	e8 2e 35 01 00       	call   c001bb9c <LinkedList<UnixFile>::getFirstElement()>
c000866e:	83 c4 10             	add    esp,0x10
c0008671:	85 c0                	test   eax,eax
c0008673:	75 04                	jne    c0008679 <getFromFileDescriptor(int)+0x2e>
c0008675:	31 c0                	xor    eax,eax
c0008677:	eb 6e                	jmp    c00086e7 <getFromFileDescriptor(int)+0x9c>
c0008679:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000867c:	74 69                	je     c00086e7 <getFromFileDescriptor(int)+0x9c>
c000867e:	52                   	push   edx
c000867f:	52                   	push   edx
c0008680:	50                   	push   eax
c0008681:	68 d8 f6 01 c0       	push   0xc001f6d8
c0008686:	e8 bb 35 01 00       	call   c001bc46 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000868b:	eb e1                	jmp    c000866e <getFromFileDescriptor(int)+0x23>
c000868d:	a1 cc f6 01 c0       	mov    eax,ds:0xc001f6cc
c0008692:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0008698:	74 4d                	je     c00086e7 <getFromFileDescriptor(int)+0x9c>
c000869a:	a1 d0 f6 01 c0       	mov    eax,ds:0xc001f6d0
c000869f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00086a5:	74 40                	je     c00086e7 <getFromFileDescriptor(int)+0x9c>
c00086a7:	a1 c8 f6 01 c0       	mov    eax,ds:0xc001f6c8
c00086ac:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00086b2:	74 33                	je     c00086e7 <getFromFileDescriptor(int)+0x9c>
c00086b4:	a1 c4 f6 01 c0       	mov    eax,ds:0xc001f6c4
c00086b9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00086bf:	74 26                	je     c00086e7 <getFromFileDescriptor(int)+0x9c>
c00086c1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00086c7:	83 f8 08             	cmp    eax,0x8
c00086ca:	77 09                	ja     c00086d5 <getFromFileDescriptor(int)+0x8a>
c00086cc:	8b 04 85 a0 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0960]
c00086d3:	eb 12                	jmp    c00086e7 <getFromFileDescriptor(int)+0x9c>
c00086d5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00086db:	83 fb 08             	cmp    ebx,0x8
c00086de:	77 95                	ja     c0008675 <getFromFileDescriptor(int)+0x2a>
c00086e0:	8b 04 9d 60 f6 01 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffe09a0]
c00086e7:	83 c4 08             	add    esp,0x8
c00086ea:	5b                   	pop    ebx
c00086eb:	c3                   	ret    

c00086ec <__static_initialization_and_destruction_0(int, int)>:
c00086ec:	83 ec 0c             	sub    esp,0xc
c00086ef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00086f4:	75 34                	jne    c000872a <__static_initialization_and_destruction_0(int, int)+0x3e>
c00086f6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00086fe:	75 2a                	jne    c000872a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0008700:	83 ec 0c             	sub    esp,0xc
c0008703:	68 d8 f6 01 c0       	push   0xc001f6d8
c0008708:	e8 79 33 01 00       	call   c001ba86 <LinkedList<UnixFile>::LinkedList()>
c000870d:	83 c4 10             	add    esp,0x10
c0008710:	83 ec 04             	sub    esp,0x4
c0008713:	68 c4 ed 01 c0       	push   0xc001edc4
c0008718:	68 d8 f6 01 c0       	push   0xc001f6d8
c000871d:	68 84 ba 01 c0       	push   0xc001ba84
c0008722:	e8 bb 11 00 00       	call   c00098e2 <__cxa_atexit>
c0008727:	83 c4 10             	add    esp,0x10
c000872a:	90                   	nop
c000872b:	83 c4 0c             	add    esp,0xc
c000872e:	c3                   	ret    

c000872f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000872f:	83 ec 0c             	sub    esp,0xc
c0008732:	83 ec 08             	sub    esp,0x8
c0008735:	68 ff ff 00 00       	push   0xffff
c000873a:	6a 01                	push   0x1
c000873c:	e8 ab ff ff ff       	call   c00086ec <__static_initialization_and_destruction_0(int, int)>
c0008741:	83 c4 10             	add    esp,0x10
c0008744:	83 c4 0c             	add    esp,0xc
c0008747:	c3                   	ret    

c0008748 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0008748:	53                   	push   ebx
c0008749:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000874d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008751:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0008757:	89 c8                	mov    eax,ecx
c0008759:	d1 e8                	shr    eax,1
c000875b:	03 05 a8 ef 01 c0    	add    eax,DWORD PTR ds:0xc001efa8
c0008761:	83 e1 01             	and    ecx,0x1
c0008764:	8a 10                	mov    dl,BYTE PTR [eax]
c0008766:	75 09                	jne    c0008771 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0008768:	83 e2 f0             	and    edx,0xfffffff0
c000876b:	09 da                	or     edx,ebx
c000876d:	88 10                	mov    BYTE PTR [eax],dl
c000876f:	5b                   	pop    ebx
c0008770:	c3                   	ret    
c0008771:	c1 e3 04             	shl    ebx,0x4
c0008774:	83 e2 0f             	and    edx,0xf
c0008777:	09 da                	or     edx,ebx
c0008779:	88 10                	mov    BYTE PTR [eax],dl
c000877b:	5b                   	pop    ebx
c000877c:	c3                   	ret    

c000877d <Virt::getPageState(unsigned long)>:
c000877d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008781:	8b 0d a8 ef 01 c0    	mov    ecx,DWORD PTR ds:0xc001efa8
c0008787:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000878d:	89 d0                	mov    eax,edx
c000878f:	d1 e8                	shr    eax,1
c0008791:	83 e2 01             	and    edx,0x1
c0008794:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0008797:	75 04                	jne    c000879d <Virt::getPageState(unsigned long)+0x20>
c0008799:	83 e0 0f             	and    eax,0xf
c000879c:	c3                   	ret    
c000879d:	c0 e8 04             	shr    al,0x4
c00087a0:	c3                   	ret    

c00087a1 <Virt::allocateKernelVirtualPages(int)>:
c00087a1:	55                   	push   ebp
c00087a2:	31 ed                	xor    ebp,ebp
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	53                   	push   ebx
c00087a7:	31 db                	xor    ebx,ebx
c00087a9:	83 ec 1c             	sub    esp,0x1c
c00087ac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00087b0:	8b 3d a4 ef 01 c0    	mov    edi,DWORD PTR ds:0xc001efa4
c00087b6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00087bb:	57                   	push   edi
c00087bc:	e8 bc ff ff ff       	call   c000877d <Virt::getPageState(unsigned long)>
c00087c1:	5a                   	pop    edx
c00087c2:	84 c0                	test   al,al
c00087c4:	75 3a                	jne    c0008800 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00087c6:	85 db                	test   ebx,ebx
c00087c8:	75 02                	jne    c00087cc <Virt::allocateKernelVirtualPages(int)+0x2b>
c00087ca:	89 fd                	mov    ebp,edi
c00087cc:	43                   	inc    ebx
c00087cd:	39 f3                	cmp    ebx,esi
c00087cf:	74 5a                	je     c000882b <Virt::allocateKernelVirtualPages(int)+0x8a>
c00087d1:	47                   	inc    edi
c00087d2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00087d8:	76 31                	jbe    c000880b <Virt::allocateKernelVirtualPages(int)+0x6a>
c00087da:	c7 05 a4 ef 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001efa4,0xc8000
c00087e4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00087e9:	75 28                	jne    c0008813 <Virt::allocateKernelVirtualPages(int)+0x72>
c00087eb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00087f0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00087f5:	57                   	push   edi
c00087f6:	e8 82 ff ff ff       	call   c000877d <Virt::getPageState(unsigned long)>
c00087fb:	5a                   	pop    edx
c00087fc:	84 c0                	test   al,al
c00087fe:	74 c6                	je     c00087c6 <Virt::allocateKernelVirtualPages(int)+0x25>
c0008800:	31 db                	xor    ebx,ebx
c0008802:	47                   	inc    edi
c0008803:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0008809:	77 cf                	ja     c00087da <Virt::allocateKernelVirtualPages(int)+0x39>
c000880b:	89 3d a4 ef 01 c0    	mov    DWORD PTR ds:0xc001efa4,edi
c0008811:	eb a8                	jmp    c00087bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0008813:	83 ec 0c             	sub    esp,0xc
c0008816:	68 48 d0 01 c0       	push   0xc001d048
c000881b:	e8 81 6d 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0008820:	8b 3d a4 ef 01 c0    	mov    edi,DWORD PTR ds:0xc001efa4
c0008826:	83 c4 10             	add    esp,0x10
c0008829:	eb 90                	jmp    c00087bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000882b:	89 2d a4 ef 01 c0    	mov    DWORD PTR ds:0xc001efa4,ebp
c0008831:	4b                   	dec    ebx
c0008832:	74 5f                	je     c0008893 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0008834:	85 f6                	test   esi,esi
c0008836:	74 3d                	je     c0008875 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0008838:	89 e8                	mov    eax,ebp
c000883a:	31 db                	xor    ebx,ebx
c000883c:	8d 7e ff             	lea    edi,[esi-0x1]
c000883f:	eb 14                	jmp    c0008855 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0008841:	6a 01                	push   0x1
c0008843:	43                   	inc    ebx
c0008844:	50                   	push   eax
c0008845:	e8 fe fe ff ff       	call   c0008748 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000884a:	58                   	pop    eax
c000884b:	39 f3                	cmp    ebx,esi
c000884d:	5a                   	pop    edx
c000884e:	74 25                	je     c0008875 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0008850:	a1 a4 ef 01 c0       	mov    eax,ds:0xc001efa4
c0008855:	8d 50 01             	lea    edx,[eax+0x1]
c0008858:	85 db                	test   ebx,ebx
c000885a:	89 15 a4 ef 01 c0    	mov    DWORD PTR ds:0xc001efa4,edx
c0008860:	74 20                	je     c0008882 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0008862:	39 df                	cmp    edi,ebx
c0008864:	75 db                	jne    c0008841 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0008866:	6a 03                	push   0x3
c0008868:	43                   	inc    ebx
c0008869:	50                   	push   eax
c000886a:	e8 d9 fe ff ff       	call   c0008748 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000886f:	59                   	pop    ecx
c0008870:	39 f3                	cmp    ebx,esi
c0008872:	58                   	pop    eax
c0008873:	75 db                	jne    c0008850 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008875:	83 c4 1c             	add    esp,0x1c
c0008878:	89 e8                	mov    eax,ebp
c000887a:	5b                   	pop    ebx
c000887b:	c1 e0 0c             	shl    eax,0xc
c000887e:	5e                   	pop    esi
c000887f:	5f                   	pop    edi
c0008880:	5d                   	pop    ebp
c0008881:	c3                   	ret    
c0008882:	6a 02                	push   0x2
c0008884:	bb 01 00 00 00       	mov    ebx,0x1
c0008889:	50                   	push   eax
c000888a:	e8 b9 fe ff ff       	call   c0008748 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000888f:	58                   	pop    eax
c0008890:	5a                   	pop    edx
c0008891:	eb bd                	jmp    c0008850 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008893:	6a 04                	push   0x4
c0008895:	8d 45 01             	lea    eax,[ebp+0x1]
c0008898:	55                   	push   ebp
c0008899:	a3 a4 ef 01 c0       	mov    ds:0xc001efa4,eax
c000889e:	e8 a5 fe ff ff       	call   c0008748 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00088a3:	59                   	pop    ecx
c00088a4:	89 e8                	mov    eax,ebp
c00088a6:	5b                   	pop    ebx
c00088a7:	c1 e0 0c             	shl    eax,0xc
c00088aa:	83 c4 1c             	add    esp,0x1c
c00088ad:	5b                   	pop    ebx
c00088ae:	5e                   	pop    esi
c00088af:	5f                   	pop    edi
c00088b0:	5d                   	pop    ebp
c00088b1:	c3                   	ret    

c00088b2 <Virt::freeSwapfilePage(unsigned long)>:
c00088b2:	53                   	push   ebx
c00088b3:	8b 15 f0 f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f6f0
c00088b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00088bd:	b8 01 00 00 00       	mov    eax,0x1
c00088c2:	89 cb                	mov    ebx,ecx
c00088c4:	d3 e0                	shl    eax,cl
c00088c6:	c1 eb 05             	shr    ebx,0x5
c00088c9:	f7 d0                	not    eax
c00088cb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00088ce:	5b                   	pop    ebx
c00088cf:	c3                   	ret    

c00088d0 <Virt::swapIDToSector(unsigned long)>:
c00088d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088d4:	0f af 05 ac ef 01 c0 	imul   eax,DWORD PTR ds:0xc001efac
c00088db:	03 05 b4 ef 01 c0    	add    eax,DWORD PTR ds:0xc001efb4
c00088e1:	c3                   	ret    

c00088e2 <Virt::allocateSwapfilePage()>:
c00088e2:	55                   	push   ebp
c00088e3:	31 d2                	xor    edx,edx
c00088e5:	57                   	push   edi
c00088e6:	56                   	push   esi
c00088e7:	53                   	push   ebx
c00088e8:	83 ec 0c             	sub    esp,0xc
c00088eb:	8b 0d ac ef 01 c0    	mov    ecx,DWORD PTR ds:0xc001efac
c00088f1:	a1 b0 ef 01 c0       	mov    eax,ds:0xc001efb0
c00088f6:	f7 f1                	div    ecx
c00088f8:	39 0d b0 ef 01 c0    	cmp    DWORD PTR ds:0xc001efb0,ecx
c00088fe:	72 2d                	jb     c000892d <Virt::allocateSwapfilePage()+0x4b>
c0008900:	8b 35 f0 f6 01 c0    	mov    esi,DWORD PTR ds:0xc001f6f0
c0008906:	8b 16                	mov    edx,DWORD PTR [esi]
c0008908:	f6 c2 01             	test   dl,0x1
c000890b:	74 3c                	je     c0008949 <Virt::allocateSwapfilePage()+0x67>
c000890d:	31 c9                	xor    ecx,ecx
c000890f:	bf 01 00 00 00       	mov    edi,0x1
c0008914:	eb 12                	jmp    c0008928 <Virt::allocateSwapfilePage()+0x46>
c0008916:	89 fd                	mov    ebp,edi
c0008918:	89 ca                	mov    edx,ecx
c000891a:	d3 e5                	shl    ebp,cl
c000891c:	c1 ea 05             	shr    edx,0x5
c000891f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0008922:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008924:	85 ea                	test   edx,ebp
c0008926:	74 2a                	je     c0008952 <Virt::allocateSwapfilePage()+0x70>
c0008928:	41                   	inc    ecx
c0008929:	39 c8                	cmp    eax,ecx
c000892b:	77 e9                	ja     c0008916 <Virt::allocateSwapfilePage()+0x34>
c000892d:	83 ec 0c             	sub    esp,0xc
c0008930:	68 af d1 01 c0       	push   0xc001d1af
c0008935:	e8 67 6c 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000893a:	83 c4 10             	add    esp,0x10
c000893d:	31 c9                	xor    ecx,ecx
c000893f:	83 c4 0c             	add    esp,0xc
c0008942:	89 c8                	mov    eax,ecx
c0008944:	5b                   	pop    ebx
c0008945:	5e                   	pop    esi
c0008946:	5f                   	pop    edi
c0008947:	5d                   	pop    ebp
c0008948:	c3                   	ret    
c0008949:	89 f3                	mov    ebx,esi
c000894b:	bd 01 00 00 00       	mov    ebp,0x1
c0008950:	31 c9                	xor    ecx,ecx
c0008952:	09 ea                	or     edx,ebp
c0008954:	89 c8                	mov    eax,ecx
c0008956:	89 13                	mov    DWORD PTR [ebx],edx
c0008958:	83 c4 0c             	add    esp,0xc
c000895b:	5b                   	pop    ebx
c000895c:	5e                   	pop    esi
c000895d:	5f                   	pop    edi
c000895e:	5d                   	pop    ebp
c000895f:	c3                   	ret    

c0008960 <Virt::virtualMemorySetup()>:
c0008960:	53                   	push   ebx
c0008961:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0008966:	6a 0f                	push   0xf
c0008968:	53                   	push   ebx
c0008969:	43                   	inc    ebx
c000896a:	e8 d9 fd ff ff       	call   c0008748 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000896f:	58                   	pop    eax
c0008970:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0008976:	5a                   	pop    edx
c0008977:	75 ed                	jne    c0008966 <Virt::virtualMemorySetup()+0x6>
c0008979:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000897e:	6a 00                	push   0x0
c0008980:	53                   	push   ebx
c0008981:	43                   	inc    ebx
c0008982:	e8 c1 fd ff ff       	call   c0008748 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008987:	59                   	pop    ecx
c0008988:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000898e:	58                   	pop    eax
c000898f:	75 ed                	jne    c000897e <Virt::virtualMemorySetup()+0x1e>
c0008991:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0008996:	6a 0f                	push   0xf
c0008998:	53                   	push   ebx
c0008999:	43                   	inc    ebx
c000899a:	e8 a9 fd ff ff       	call   c0008748 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000899f:	58                   	pop    eax
c00089a0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00089a6:	5a                   	pop    edx
c00089a7:	75 ed                	jne    c0008996 <Virt::virtualMemorySetup()+0x36>
c00089a9:	5b                   	pop    ebx
c00089aa:	c3                   	ret    

c00089ab <Virt::setupPageSwapping(int)>:
c00089ab:	53                   	push   ebx
c00089ac:	83 ec 0c             	sub    esp,0xc
c00089af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00089b3:	a1 88 1b 02 c0       	mov    eax,ds:0xc0021b88
c00089b8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00089be:	8b 10                	mov    edx,DWORD PTR [eax]
c00089c0:	53                   	push   ebx
c00089c1:	c1 e3 0b             	shl    ebx,0xb
c00089c4:	68 c6 d1 01 c0       	push   0xc001d1c6
c00089c9:	50                   	push   eax
c00089ca:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00089cd:	89 1d b0 ef 01 c0    	mov    DWORD PTR ds:0xc001efb0,ebx
c00089d3:	c6 05 b8 ef 01 c0 43 	mov    BYTE PTR ds:0xc001efb8,0x43
c00089da:	c1 eb 08             	shr    ebx,0x8
c00089dd:	a3 b4 ef 01 c0       	mov    ds:0xc001efb4,eax
c00089e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00089e5:	c7 05 ac ef 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001efac,0x8
c00089ef:	e8 71 e2 ff ff       	call   c0006c65 <malloc>
c00089f4:	83 c4 0c             	add    esp,0xc
c00089f7:	89 c1                	mov    ecx,eax
c00089f9:	a3 f0 f6 01 c0       	mov    ds:0xc001f6f0,eax
c00089fe:	31 d2                	xor    edx,edx
c0008a00:	a1 b0 ef 01 c0       	mov    eax,ds:0xc001efb0
c0008a05:	f7 35 ac ef 01 c0    	div    DWORD PTR ds:0xc001efac
c0008a0b:	c1 e8 05             	shr    eax,0x5
c0008a0e:	50                   	push   eax
c0008a0f:	6a 00                	push   0x0
c0008a11:	51                   	push   ecx
c0008a12:	e8 d9 7a ff ff       	call   c00004f0 <memset>
c0008a17:	83 c4 18             	add    esp,0x18
c0008a1a:	5b                   	pop    ebx
c0008a1b:	c3                   	ret    

c0008a1c <VAS::VAS(VAS*)>:
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a23:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a2e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0008a35:	83 ec 0c             	sub    esp,0xc
c0008a38:	68 68 d0 01 c0       	push   0xc001d068
c0008a3d:	e8 5f 6b 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0008a42:	83 c4 10             	add    esp,0x10
c0008a45:	90                   	nop
c0008a46:	83 c4 0c             	add    esp,0xc
c0008a49:	c3                   	ret    

c0008a4a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0008a4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a4e:	89 c2                	mov    edx,eax
c0008a50:	c1 e8 0a             	shr    eax,0xa
c0008a53:	c1 ea 16             	shr    edx,0x16
c0008a56:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008a5b:	19 c9                	sbb    ecx,ecx
c0008a5d:	c1 e2 0c             	shl    edx,0xc
c0008a60:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0008a66:	25 fc 0f 00 00       	and    eax,0xffc
c0008a6b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0008a72:	01 d0                	add    eax,edx
c0008a74:	c3                   	ret    
c0008a75:	90                   	nop

c0008a76 <VAS::getPageTableEntry(unsigned long)>:
c0008a76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008a7a:	89 ca                	mov    edx,ecx
c0008a7c:	c1 e9 0a             	shr    ecx,0xa
c0008a7f:	c1 ea 16             	shr    edx,0x16
c0008a82:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0008a88:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0008a8e:	c1 e0 0c             	shl    eax,0xc
c0008a91:	8d 04 08             	lea    eax,[eax+ecx*1]
c0008a94:	c3                   	ret    

c0008a95 <Virt::freeKernelVirtualPages(unsigned long)>:
c0008a95:	57                   	push   edi
c0008a96:	56                   	push   esi
c0008a97:	be 01 00 00 00       	mov    esi,0x1
c0008a9c:	53                   	push   ebx
c0008a9d:	83 ec 10             	sub    esp,0x10
c0008aa0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008aa4:	c1 eb 0c             	shr    ebx,0xc
c0008aa7:	eb 3f                	jmp    c0008ae8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0008aa9:	83 ec 08             	sub    esp,0x8
c0008aac:	a1 f4 f6 01 c0       	mov    eax,ds:0xc001f6f4
c0008ab1:	57                   	push   edi
c0008ab2:	50                   	push   eax
c0008ab3:	e8 be ff ff ff       	call   c0008a76 <VAS::getPageTableEntry(unsigned long)>
c0008ab8:	83 c4 10             	add    esp,0x10
c0008abb:	8b 00                	mov    eax,DWORD PTR [eax]
c0008abd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008ac1:	f6 c4 04             	test   ah,0x4
c0008ac4:	75 60                	jne    c0008b26 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0008ac6:	80 fa 04             	cmp    dl,0x4
c0008ac9:	74 79                	je     c0008b44 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0008acb:	80 fa 02             	cmp    dl,0x2
c0008ace:	0f 84 89 00 00 00    	je     c0008b5d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0008ad4:	80 fa 03             	cmp    dl,0x3
c0008ad7:	0f 84 ae 00 00 00    	je     c0008b8b <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0008add:	fe ca                	dec    dl
c0008adf:	0f 84 93 00 00 00    	je     c0008b78 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0008ae5:	43                   	inc    ebx
c0008ae6:	31 f6                	xor    esi,esi
c0008ae8:	53                   	push   ebx
c0008ae9:	89 df                	mov    edi,ebx
c0008aeb:	e8 8d fc ff ff       	call   c000877d <Virt::getPageState(unsigned long)>
c0008af0:	c1 e7 0c             	shl    edi,0xc
c0008af3:	5a                   	pop    edx
c0008af4:	84 c0                	test   al,al
c0008af6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008afa:	75 ad                	jne    c0008aa9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0008afc:	83 ec 0c             	sub    esp,0xc
c0008aff:	68 dd d1 01 c0       	push   0xc001d1dd
c0008b04:	e8 98 6a 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0008b09:	5a                   	pop    edx
c0008b0a:	59                   	pop    ecx
c0008b0b:	57                   	push   edi
c0008b0c:	8b 3d f4 f6 01 c0    	mov    edi,DWORD PTR ds:0xc001f6f4
c0008b12:	57                   	push   edi
c0008b13:	e8 5e ff ff ff       	call   c0008a76 <VAS::getPageTableEntry(unsigned long)>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b1d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008b21:	f6 c4 04             	test   ah,0x4
c0008b24:	74 bf                	je     c0008ae5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008b26:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0008b2a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008b2f:	83 ec 0c             	sub    esp,0xc
c0008b32:	50                   	push   eax
c0008b33:	e8 98 e4 ff ff       	call   c0006fd0 <Phys::freePage(unsigned long)>
c0008b38:	83 c4 10             	add    esp,0x10
c0008b3b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008b3f:	80 fa 04             	cmp    dl,0x4
c0008b42:	75 87                	jne    c0008acb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0008b44:	89 f0                	mov    eax,esi
c0008b46:	84 c0                	test   al,al
c0008b48:	75 47                	jne    c0008b91 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0008b4a:	c7 44 24 20 8c d0 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d08c
c0008b52:	83 c4 10             	add    esp,0x10
c0008b55:	5b                   	pop    ebx
c0008b56:	5e                   	pop    esi
c0008b57:	5f                   	pop    edi
c0008b58:	e9 44 6a 00 00       	jmp    c000f5a1 <Krnl::panic(char const*)>
c0008b5d:	89 f0                	mov    eax,esi
c0008b5f:	84 c0                	test   al,al
c0008b61:	75 15                	jne    c0008b78 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0008b63:	83 ec 0c             	sub    esp,0xc
c0008b66:	68 f9 d1 01 c0       	push   0xc001d1f9
c0008b6b:	e8 31 6a 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0008b70:	83 c4 10             	add    esp,0x10
c0008b73:	e9 6d ff ff ff       	jmp    c0008ae5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008b78:	83 ec 08             	sub    esp,0x8
c0008b7b:	6a 00                	push   0x0
c0008b7d:	53                   	push   ebx
c0008b7e:	e8 c5 fb ff ff       	call   c0008748 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008b83:	83 c4 10             	add    esp,0x10
c0008b86:	e9 5a ff ff ff       	jmp    c0008ae5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008b8b:	89 f0                	mov    eax,esi
c0008b8d:	84 c0                	test   al,al
c0008b8f:	75 15                	jne    c0008ba6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0008b91:	83 ec 08             	sub    esp,0x8
c0008b94:	6a 00                	push   0x0
c0008b96:	53                   	push   ebx
c0008b97:	e8 ac fb ff ff       	call   c0008748 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008b9c:	83 c4 10             	add    esp,0x10
c0008b9f:	83 c4 10             	add    esp,0x10
c0008ba2:	5b                   	pop    ebx
c0008ba3:	5e                   	pop    esi
c0008ba4:	5f                   	pop    edi
c0008ba5:	c3                   	ret    
c0008ba6:	c7 44 24 20 15 d2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d215
c0008bae:	83 c4 10             	add    esp,0x10
c0008bb1:	5b                   	pop    ebx
c0008bb2:	5e                   	pop    esi
c0008bb3:	5f                   	pop    edi
c0008bb4:	e9 e8 69 00 00       	jmp    c000f5a1 <Krnl::panic(char const*)>
c0008bb9:	90                   	nop

c0008bba <VAS::freeAllocatedPages(unsigned long)>:
c0008bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008bc2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0008bc6:	74 09                	je     c0008bd1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0008bc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008bcc:	e9 c4 fe ff ff       	jmp    c0008a95 <Virt::freeKernelVirtualPages(unsigned long)>
c0008bd1:	c7 44 24 04 b0 d0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d0b0
c0008bd9:	e9 4a 0e 00 00       	jmp    c0009a28 <Dbg::kprintf(char const*, ...)>

c0008bde <VAS::virtualToPhysical(unsigned long)>:
c0008bde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008be2:	50                   	push   eax
c0008be3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008be7:	52                   	push   edx
c0008be8:	e8 89 fe ff ff       	call   c0008a76 <VAS::getPageTableEntry(unsigned long)>
c0008bed:	59                   	pop    ecx
c0008bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf0:	5a                   	pop    edx
c0008bf1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008bf6:	c3                   	ret    
c0008bf7:	90                   	nop

c0008bf8 <VAS::reflagRange(unsigned long, int, int, int)>:
c0008bf8:	55                   	push   ebp
c0008bf9:	57                   	push   edi
c0008bfa:	56                   	push   esi
c0008bfb:	53                   	push   ebx
c0008bfc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0008c04:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008c08:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0008c0c:	85 db                	test   ebx,ebx
c0008c0e:	7e 22                	jle    c0008c32 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0008c10:	c1 e3 0c             	shl    ebx,0xc
c0008c13:	01 f3                	add    ebx,esi
c0008c15:	56                   	push   esi
c0008c16:	81 c6 00 10 00 00    	add    esi,0x1000
c0008c1c:	55                   	push   ebp
c0008c1d:	e8 54 fe ff ff       	call   c0008a76 <VAS::getPageTableEntry(unsigned long)>
c0008c22:	5a                   	pop    edx
c0008c23:	59                   	pop    ecx
c0008c24:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008c26:	21 f9                	and    ecx,edi
c0008c28:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0008c2c:	39 f3                	cmp    ebx,esi
c0008c2e:	89 08                	mov    DWORD PTR [eax],ecx
c0008c30:	75 e3                	jne    c0008c15 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0008c32:	5b                   	pop    ebx
c0008c33:	5e                   	pop    esi
c0008c34:	5f                   	pop    edi
c0008c35:	5d                   	pop    ebp
c0008c36:	c3                   	ret    
c0008c37:	90                   	nop

c0008c38 <VAS::setToWriteCombining(unsigned long, int)>:
c0008c38:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0008c3d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008c43:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0008c4a:	75 01                	jne    c0008c4d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0008c4c:	c3                   	ret    
c0008c4d:	68 80 00 00 00       	push   0x80
c0008c52:	6a ff                	push   0xffffffff
c0008c54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c58:	50                   	push   eax
c0008c59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008c5d:	52                   	push   edx
c0008c5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008c62:	51                   	push   ecx
c0008c63:	e8 90 ff ff ff       	call   c0008bf8 <VAS::reflagRange(unsigned long, int, int, int)>
c0008c68:	83 c4 14             	add    esp,0x14
c0008c6b:	c3                   	ret    

c0008c6c <VAS::mapOtherVASIn(bool, VAS*)>:
c0008c6c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008c71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c75:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0008c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c7c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0008c7f:	19 c0                	sbb    eax,eax
c0008c81:	83 ca 03             	or     edx,0x3
c0008c84:	83 e0 fc             	and    eax,0xfffffffc
c0008c87:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0008c8e:	0f 20 d8             	mov    eax,cr3
c0008c91:	0f 22 d8             	mov    cr3,eax
c0008c94:	c3                   	ret    
c0008c95:	90                   	nop

c0008c96 <VAS::~VAS()>:
c0008c96:	83 ec 2c             	sub    esp,0x2c
c0008c99:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008ca1:	fa                   	cli    
c0008ca2:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0008ca7:	40                   	inc    eax
c0008ca8:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0008cad:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cb4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008cb7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008cbd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008cc1:	6a 01                	push   0x1
c0008cc3:	50                   	push   eax
c0008cc4:	e8 a3 ff ff ff       	call   c0008c6c <VAS::mapOtherVASIn(bool, VAS*)>
c0008cc9:	83 c4 0c             	add    esp,0xc
c0008ccc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008cd4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0008cdc:	0f 8f d4 00 00 00    	jg     c0008db6 <VAS::~VAS()+0x120>
c0008ce2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008ce6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008ce9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008ced:	c1 e2 02             	shl    edx,0x2
c0008cf0:	01 d0                	add    eax,edx
c0008cf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfc:	83 e0 01             	and    eax,0x1
c0008cff:	0f 84 a8 00 00 00    	je     c0008dad <VAS::~VAS()+0x117>
c0008d05:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008d0d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0008d15:	7f 72                	jg     c0008d89 <VAS::~VAS()+0xf3>
c0008d17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008d1b:	c1 e0 0a             	shl    eax,0xa
c0008d1e:	89 c2                	mov    edx,eax
c0008d20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008d24:	01 d0                	add    eax,edx
c0008d26:	c1 e0 0c             	shl    eax,0xc
c0008d29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d2d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008d32:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d37:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008d3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008d41:	6a 01                	push   0x1
c0008d43:	50                   	push   eax
c0008d44:	e8 01 fd ff ff       	call   c0008a4a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0008d49:	83 c4 0c             	add    esp,0xc
c0008d4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008d54:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d5e:	25 01 04 00 00       	and    eax,0x401
c0008d63:	3d 01 04 00 00       	cmp    eax,0x401
c0008d68:	75 19                	jne    c0008d83 <VAS::~VAS()+0xed>
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008d73:	83 ec 0c             	sub    esp,0xc
c0008d76:	50                   	push   eax
c0008d77:	e8 54 e2 ff ff       	call   c0006fd0 <Phys::freePage(unsigned long)>
c0008d7c:	83 c4 10             	add    esp,0x10
c0008d7f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008d83:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0008d87:	eb 84                	jmp    c0008d0d <VAS::~VAS()+0x77>
c0008d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d8d:	25 00 04 00 00       	and    eax,0x400
c0008d92:	74 19                	je     c0008dad <VAS::~VAS()+0x117>
c0008d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d98:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008d9d:	83 ec 0c             	sub    esp,0xc
c0008da0:	50                   	push   eax
c0008da1:	e8 2a e2 ff ff       	call   c0006fd0 <Phys::freePage(unsigned long)>
c0008da6:	83 c4 10             	add    esp,0x10
c0008da9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008dad:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0008db1:	e9 1e ff ff ff       	jmp    c0008cd4 <VAS::~VAS()+0x3e>
c0008db6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008dba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008dbd:	83 ec 0c             	sub    esp,0xc
c0008dc0:	50                   	push   eax
c0008dc1:	e8 cf fc ff ff       	call   c0008a95 <Virt::freeKernelVirtualPages(unsigned long)>
c0008dc6:	83 c4 10             	add    esp,0x10
c0008dc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008dcd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008dd0:	83 ec 0c             	sub    esp,0xc
c0008dd3:	50                   	push   eax
c0008dd4:	e8 f7 e1 ff ff       	call   c0006fd0 <Phys::freePage(unsigned long)>
c0008dd9:	83 c4 10             	add    esp,0x10
c0008ddc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008de0:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0008de5:	48                   	dec    eax
c0008de6:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0008deb:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0008df0:	85 c0                	test   eax,eax
c0008df2:	75 01                	jne    c0008df5 <VAS::~VAS()+0x15f>
c0008df4:	fb                   	sti    
c0008df5:	90                   	nop
c0008df6:	83 c4 2c             	add    esp,0x2c
c0008df9:	c3                   	ret    

c0008dfa <VAS::mapPage(unsigned long, unsigned long, int)>:
c0008dfa:	55                   	push   ebp
c0008dfb:	57                   	push   edi
c0008dfc:	56                   	push   esi
c0008dfd:	53                   	push   ebx
c0008dfe:	83 ec 1c             	sub    esp,0x1c
c0008e01:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0008e05:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008e09:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0008e0f:	77 0b                	ja     c0008e1c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0008e11:	0f 20 d8             	mov    eax,cr3
c0008e14:	0f 20 d8             	mov    eax,cr3
c0008e17:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0008e1a:	75 47                	jne    c0008e63 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0008e1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e20:	09 d8                	or     eax,ebx
c0008e22:	a9 ff 0f 00 00       	test   eax,0xfff
c0008e27:	75 57                	jne    c0008e80 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0008e29:	89 de                	mov    esi,ebx
c0008e2b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008e2e:	c1 ee 16             	shr    esi,0x16
c0008e31:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0008e38:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0008e3c:	74 54                	je     c0008e92 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0008e3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008e42:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0008e48:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0008e4c:	c1 e6 0c             	shl    esi,0xc
c0008e4f:	c1 eb 0a             	shr    ebx,0xa
c0008e52:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0008e58:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0008e5b:	83 c4 1c             	add    esp,0x1c
c0008e5e:	5b                   	pop    ebx
c0008e5f:	5e                   	pop    esi
c0008e60:	5f                   	pop    edi
c0008e61:	5d                   	pop    ebp
c0008e62:	c3                   	ret    
c0008e63:	83 ec 0c             	sub    esp,0xc
c0008e66:	68 d4 d0 01 c0       	push   0xc001d0d4
c0008e6b:	e8 b8 0b 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e77:	09 d8                	or     eax,ebx
c0008e79:	a9 ff 0f 00 00       	test   eax,0xfff
c0008e7e:	74 a9                	je     c0008e29 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008e80:	83 ec 0c             	sub    esp,0xc
c0008e83:	68 3c d1 01 c0       	push   0xc001d13c
c0008e88:	e8 14 67 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0008e8d:	83 c4 10             	add    esp,0x10
c0008e90:	eb 97                	jmp    c0008e29 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008e92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e96:	e8 97 e1 ff ff       	call   c0007032 <Phys::allocatePage()>
c0008e9b:	83 ec 0c             	sub    esp,0xc
c0008e9e:	89 c5                	mov    ebp,eax
c0008ea0:	8b 0d f4 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f6f4
c0008ea6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0008eaa:	6a 01                	push   0x1
c0008eac:	e8 f0 f8 ff ff       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c0008eb1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0008eb8:	6a 01                	push   0x1
c0008eba:	50                   	push   eax
c0008ebb:	55                   	push   ebp
c0008ebc:	81 cd 07 04 00 00    	or     ebp,0x407
c0008ec2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008ec6:	51                   	push   ecx
c0008ec7:	e8 28 02 00 00       	call   c00090f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0008ecc:	83 c4 1c             	add    esp,0x1c
c0008ecf:	68 00 10 00 00       	push   0x1000
c0008ed4:	6a 00                	push   0x0
c0008ed6:	50                   	push   eax
c0008ed7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008edb:	e8 10 76 ff ff       	call   c00004f0 <memset>
c0008ee0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0008ee4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0008ee7:	e8 a9 fb ff ff       	call   c0008a95 <Virt::freeKernelVirtualPages(unsigned long)>
c0008eec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008ef0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008ef3:	83 c4 10             	add    esp,0x10
c0008ef6:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0008ef9:	e9 40 ff ff ff       	jmp    c0008e3e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0008efe <VAS::allocatePages(int, int)>:
c0008efe:	55                   	push   ebp
c0008eff:	57                   	push   edi
c0008f00:	56                   	push   esi
c0008f01:	53                   	push   ebx
c0008f02:	83 ec 1c             	sub    esp,0x1c
c0008f05:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008f09:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0008f0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008f14:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0008f1a:	83 e0 01             	and    eax,0x1
c0008f1d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0008f21:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0008f25:	0f 85 cc 00 00 00    	jne    c0008ff7 <VAS::allocatePages(int, int)+0xf9>
c0008f2b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008f2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f32:	85 c0                	test   eax,eax
c0008f34:	0f 84 a1 00 00 00    	je     c0008fdb <VAS::allocatePages(int, int)+0xdd>
c0008f3a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008f3e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008f42:	c1 e6 0c             	shl    esi,0xc
c0008f45:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0008f49:	85 c0                	test   eax,eax
c0008f4b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0008f4e:	7e 33                	jle    c0008f83 <VAS::allocatePages(int, int)+0x85>
c0008f50:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008f54:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008f58:	81 cd 00 04 00 00    	or     ebp,0x400
c0008f5e:	e8 cf e0 ff ff       	call   c0007032 <Phys::allocatePage()>
c0008f63:	55                   	push   ebp
c0008f64:	53                   	push   ebx
c0008f65:	50                   	push   eax
c0008f66:	57                   	push   edi
c0008f67:	e8 8e fe ff ff       	call   c0008dfa <VAS::mapPage(unsigned long, unsigned long, int)>
c0008f6c:	83 c4 10             	add    esp,0x10
c0008f6f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f74:	74 03                	je     c0008f79 <VAS::allocatePages(int, int)+0x7b>
c0008f76:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008f79:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f7f:	39 de                	cmp    esi,ebx
c0008f81:	75 db                	jne    c0008f5e <VAS::allocatePages(int, int)+0x60>
c0008f83:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f88:	75 12                	jne    c0008f9c <VAS::allocatePages(int, int)+0x9e>
c0008f8a:	0f 20 d8             	mov    eax,cr3
c0008f8d:	0f 22 d8             	mov    cr3,eax
c0008f90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f94:	83 c4 1c             	add    esp,0x1c
c0008f97:	5b                   	pop    ebx
c0008f98:	5e                   	pop    esi
c0008f99:	5f                   	pop    edi
c0008f9a:	5d                   	pop    ebp
c0008f9b:	c3                   	ret    
c0008f9c:	c1 ee 0a             	shr    esi,0xa
c0008f9f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008fa3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0008fa9:	c1 eb 0a             	shr    ebx,0xa
c0008fac:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0008fb2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008fb8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008fbe:	39 c3                	cmp    ebx,eax
c0008fc0:	77 ce                	ja     c0008f90 <VAS::allocatePages(int, int)+0x92>
c0008fc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008fc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008fcb:	39 d8                	cmp    eax,ebx
c0008fcd:	73 f3                	jae    c0008fc2 <VAS::allocatePages(int, int)+0xc4>
c0008fcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fd3:	83 c4 1c             	add    esp,0x1c
c0008fd6:	5b                   	pop    ebx
c0008fd7:	5e                   	pop    esi
c0008fd8:	5f                   	pop    edi
c0008fd9:	5d                   	pop    ebp
c0008fda:	c3                   	ret    
c0008fdb:	83 ec 0c             	sub    esp,0xc
c0008fde:	68 60 d1 01 c0       	push   0xc001d160
c0008fe3:	e8 b9 65 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0008fe8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008feb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fef:	83 c4 10             	add    esp,0x10
c0008ff2:	e9 43 ff ff ff       	jmp    c0008f3a <VAS::allocatePages(int, int)+0x3c>
c0008ff7:	83 ec 0c             	sub    esp,0xc
c0008ffa:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0008ffe:	51                   	push   ecx
c0008fff:	e8 9d f7 ff ff       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c0009004:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009008:	83 c4 10             	add    esp,0x10
c000900b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009010:	0f 87 9b 00 00 00    	ja     c00090b1 <VAS::allocatePages(int, int)+0x1b3>
c0009016:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000901a:	85 d2                	test   edx,edx
c000901c:	7e 3c                	jle    c000905a <VAS::allocatePages(int, int)+0x15c>
c000901e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009022:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009026:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000902a:	c1 e5 0c             	shl    ebp,0xc
c000902d:	81 ce 00 04 00 00    	or     esi,0x400
c0009033:	01 dd                	add    ebp,ebx
c0009035:	e8 f8 df ff ff       	call   c0007032 <Phys::allocatePage()>
c000903a:	56                   	push   esi
c000903b:	53                   	push   ebx
c000903c:	50                   	push   eax
c000903d:	57                   	push   edi
c000903e:	e8 b7 fd ff ff       	call   c0008dfa <VAS::mapPage(unsigned long, unsigned long, int)>
c0009043:	83 c4 10             	add    esp,0x10
c0009046:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000904b:	74 03                	je     c0009050 <VAS::allocatePages(int, int)+0x152>
c000904d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009050:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009056:	39 dd                	cmp    ebp,ebx
c0009058:	75 db                	jne    c0009035 <VAS::allocatePages(int, int)+0x137>
c000905a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000905f:	0f 84 25 ff ff ff    	je     c0008f8a <VAS::allocatePages(int, int)+0x8c>
c0009065:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009069:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000906d:	89 d3                	mov    ebx,edx
c000906f:	c1 e0 0c             	shl    eax,0xc
c0009072:	c1 eb 0a             	shr    ebx,0xa
c0009075:	01 d0                	add    eax,edx
c0009077:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000907d:	c1 e8 0a             	shr    eax,0xa
c0009080:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009086:	25 00 f0 ff ff       	and    eax,0xfffff000
c000908b:	2d 00 00 40 00       	sub    eax,0x400000
c0009090:	39 c3                	cmp    ebx,eax
c0009092:	0f 87 f8 fe ff ff    	ja     c0008f90 <VAS::allocatePages(int, int)+0x92>
c0009098:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000909b:	81 c3 00 10 00 00    	add    ebx,0x1000
c00090a1:	39 d8                	cmp    eax,ebx
c00090a3:	73 f3                	jae    c0009098 <VAS::allocatePages(int, int)+0x19a>
c00090a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00090a9:	83 c4 1c             	add    esp,0x1c
c00090ac:	5b                   	pop    ebx
c00090ad:	5e                   	pop    esi
c00090ae:	5f                   	pop    edi
c00090af:	5d                   	pop    ebp
c00090b0:	c3                   	ret    
c00090b1:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c00090b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090bc:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c00090c3:	0f 84 4d ff ff ff    	je     c0009016 <VAS::allocatePages(int, int)+0x118>
c00090c9:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00090d1:	e9 40 ff ff ff       	jmp    c0009016 <VAS::allocatePages(int, int)+0x118>

c00090d6 <VAS::setCPUSpecific(unsigned long)>:
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	6a 05                	push   0x5
c00090db:	68 00 00 40 c2       	push   0xc2400000
c00090e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090e4:	50                   	push   eax
c00090e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00090e9:	52                   	push   edx
c00090ea:	e8 0b fd ff ff       	call   c0008dfa <VAS::mapPage(unsigned long, unsigned long, int)>
c00090ef:	83 c4 1c             	add    esp,0x1c
c00090f2:	c3                   	ret    
c00090f3:	90                   	nop

c00090f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00090f4:	55                   	push   ebp
c00090f5:	57                   	push   edi
c00090f6:	56                   	push   esi
c00090f7:	53                   	push   ebx
c00090f8:	83 ec 1c             	sub    esp,0x1c
c00090fb:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0009100:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009104:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000910a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000910e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009114:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009118:	83 e0 01             	and    eax,0x1
c000911b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000911f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009123:	85 c0                	test   eax,eax
c0009125:	7e 39                	jle    c0009160 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009127:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000912b:	89 f3                	mov    ebx,esi
c000912d:	c1 e0 0c             	shl    eax,0xc
c0009130:	01 f0                	add    eax,esi
c0009132:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009136:	55                   	push   ebp
c0009137:	53                   	push   ebx
c0009138:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000913c:	29 f0                	sub    eax,esi
c000913e:	01 d8                	add    eax,ebx
c0009140:	50                   	push   eax
c0009141:	57                   	push   edi
c0009142:	e8 b3 fc ff ff       	call   c0008dfa <VAS::mapPage(unsigned long, unsigned long, int)>
c0009147:	83 c4 10             	add    esp,0x10
c000914a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000914f:	74 03                	je     c0009154 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009151:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009154:	81 c3 00 10 00 00    	add    ebx,0x1000
c000915a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000915e:	75 d6                	jne    c0009136 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009160:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009165:	75 10                	jne    c0009177 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009167:	0f 20 d8             	mov    eax,cr3
c000916a:	0f 22 d8             	mov    cr3,eax
c000916d:	83 c4 1c             	add    esp,0x1c
c0009170:	89 f0                	mov    eax,esi
c0009172:	5b                   	pop    ebx
c0009173:	5e                   	pop    esi
c0009174:	5f                   	pop    edi
c0009175:	5d                   	pop    ebp
c0009176:	c3                   	ret    
c0009177:	89 f3                	mov    ebx,esi
c0009179:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000917d:	c1 eb 0a             	shr    ebx,0xa
c0009180:	c1 e0 0c             	shl    eax,0xc
c0009183:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009189:	01 f0                	add    eax,esi
c000918b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009191:	c1 e8 0a             	shr    eax,0xa
c0009194:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009199:	2d 00 00 40 00       	sub    eax,0x400000
c000919e:	39 c3                	cmp    ebx,eax
c00091a0:	77 cb                	ja     c000916d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00091a2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00091a5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00091ab:	39 d8                	cmp    eax,ebx
c00091ad:	73 f3                	jae    c00091a2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00091af:	83 c4 1c             	add    esp,0x1c
c00091b2:	89 f0                	mov    eax,esi
c00091b4:	5b                   	pop    ebx
c00091b5:	5e                   	pop    esi
c00091b6:	5f                   	pop    edi
c00091b7:	5d                   	pop    ebp
c00091b8:	c3                   	ret    
c00091b9:	90                   	nop

c00091ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00091ba:	55                   	push   ebp
c00091bb:	57                   	push   edi
c00091bc:	56                   	push   esi
c00091bd:	53                   	push   ebx
c00091be:	83 ec 1c             	sub    esp,0x1c
c00091c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00091c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00091c9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00091cd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00091d1:	a9 ff 0f 00 00       	test   eax,0xfff
c00091d6:	75 4a                	jne    c0009222 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00091d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00091dc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00091df:	c1 eb 16             	shr    ebx,0x16
c00091e2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00091e9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00091ed:	74 4d                	je     c000923c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00091ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00091f3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00091f7:	c1 e8 0a             	shr    eax,0xa
c00091fa:	80 fa 01             	cmp    dl,0x1
c00091fd:	19 d2                	sbb    edx,edx
c00091ff:	c1 e3 0c             	shl    ebx,0xc
c0009202:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009206:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000920c:	25 fc 0f 00 00       	and    eax,0xffc
c0009211:	01 d8                	add    eax,ebx
c0009213:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000921a:	83 c4 1c             	add    esp,0x1c
c000921d:	5b                   	pop    ebx
c000921e:	5e                   	pop    esi
c000921f:	5f                   	pop    edi
c0009220:	5d                   	pop    ebp
c0009221:	c3                   	ret    
c0009222:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	68 8c d1 01 c0       	push   0xc001d18c
c000922e:	e8 6e 63 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0009233:	83 c4 10             	add    esp,0x10
c0009236:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000923a:	eb 9c                	jmp    c00091d8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000923c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009240:	e8 ed dd ff ff       	call   c0007032 <Phys::allocatePage()>
c0009245:	83 ec 0c             	sub    esp,0xc
c0009248:	89 c5                	mov    ebp,eax
c000924a:	8b 0d f4 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f6f4
c0009250:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009254:	6a 01                	push   0x1
c0009256:	e8 46 f5 ff ff       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c000925b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009262:	6a 01                	push   0x1
c0009264:	50                   	push   eax
c0009265:	55                   	push   ebp
c0009266:	81 cd 07 04 00 00    	or     ebp,0x407
c000926c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009270:	51                   	push   ecx
c0009271:	e8 7e fe ff ff       	call   c00090f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009276:	83 c4 1c             	add    esp,0x1c
c0009279:	68 00 10 00 00       	push   0x1000
c000927e:	6a 00                	push   0x0
c0009280:	50                   	push   eax
c0009281:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009285:	e8 66 72 ff ff       	call   c00004f0 <memset>
c000928a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000928e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009291:	e8 ff f7 ff ff       	call   c0008a95 <Virt::freeKernelVirtualPages(unsigned long)>
c0009296:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009299:	83 c4 10             	add    esp,0x10
c000929c:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000929f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00092a3:	e9 47 ff ff ff       	jmp    c00091ef <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00092a8 <VAS::VAS(bool)>:
c00092a8:	53                   	push   ebx
c00092a9:	83 ec 28             	sub    esp,0x28
c00092ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00092b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00092b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092c3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00092ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092ce:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00092d2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00092d5:	e8 58 dd ff ff       	call   c0007032 <Phys::allocatePage()>
c00092da:	89 c2                	mov    edx,eax
c00092dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092e0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00092e3:	8b 1d f4 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6f4
c00092e9:	83 ec 0c             	sub    esp,0xc
c00092ec:	6a 01                	push   0x1
c00092ee:	e8 ae f4 ff ff       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c00092f3:	83 c4 10             	add    esp,0x10
c00092f6:	89 c2                	mov    edx,eax
c00092f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092fc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00092ff:	83 ec 0c             	sub    esp,0xc
c0009302:	6a 03                	push   0x3
c0009304:	6a 01                	push   0x1
c0009306:	52                   	push   edx
c0009307:	50                   	push   eax
c0009308:	53                   	push   ebx
c0009309:	e8 e6 fd ff ff       	call   c00090f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000930e:	83 c4 20             	add    esp,0x20
c0009311:	89 c2                	mov    edx,eax
c0009313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009317:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000931a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009322:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000932a:	7f 1c                	jg     c0009348 <VAS::VAS(bool)+0xa0>
c000932c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009330:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009333:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009337:	c1 e2 02             	shl    edx,0x2
c000933a:	01 d0                	add    eax,edx
c000933c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009342:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009346:	eb da                	jmp    c0009322 <VAS::VAS(bool)+0x7a>
c0009348:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009350:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009358:	7f 7a                	jg     c00093d4 <VAS::VAS(bool)+0x12c>
c000935a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000935e:	2d 00 02 00 00       	sub    eax,0x200
c0009363:	c1 e0 0c             	shl    eax,0xc
c0009366:	83 c8 03             	or     eax,0x3
c0009369:	89 c2                	mov    edx,eax
c000936b:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0009370:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009376:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000937c:	83 e0 10             	and    eax,0x10
c000937f:	84 c0                	test   al,al
c0009381:	74 07                	je     c000938a <VAS::VAS(bool)+0xe2>
c0009383:	b8 00 01 00 00       	mov    eax,0x100
c0009388:	eb 05                	jmp    c000938f <VAS::VAS(bool)+0xe7>
c000938a:	b8 00 00 00 00       	mov    eax,0x0
c000938f:	09 d0                	or     eax,edx
c0009391:	89 c1                	mov    ecx,eax
c0009393:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009397:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000939a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000939e:	c1 e2 02             	shl    edx,0x2
c00093a1:	01 d0                	add    eax,edx
c00093a3:	89 ca                	mov    edx,ecx
c00093a5:	89 10                	mov    DWORD PTR [eax],edx
c00093a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00093ab:	2d 40 03 00 00       	sub    eax,0x340
c00093b0:	83 f8 7f             	cmp    eax,0x7f
c00093b3:	77 16                	ja     c00093cb <VAS::VAS(bool)+0x123>
c00093b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093b9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00093bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00093c0:	c1 e2 02             	shl    edx,0x2
c00093c3:	01 d0                	add    eax,edx
c00093c5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00093cb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00093cf:	e9 7c ff ff ff       	jmp    c0009350 <VAS::VAS(bool)+0xa8>
c00093d4:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c00093d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093df:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00093e5:	83 e0 10             	and    eax,0x10
c00093e8:	84 c0                	test   al,al
c00093ea:	74 07                	je     c00093f3 <VAS::VAS(bool)+0x14b>
c00093ec:	b8 03 41 00 00       	mov    eax,0x4103
c00093f1:	eb 05                	jmp    c00093f8 <VAS::VAS(bool)+0x150>
c00093f3:	b8 03 40 00 00       	mov    eax,0x4003
c00093f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00093fc:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00093ff:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009405:	89 02                	mov    DWORD PTR [edx],eax
c0009407:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000940c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009412:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009418:	83 ec 08             	sub    esp,0x8
c000941b:	50                   	push   eax
c000941c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009420:	e8 b1 fc ff ff       	call   c00090d6 <VAS::setCPUSpecific(unsigned long)>
c0009425:	83 c4 10             	add    esp,0x10
c0009428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000942c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000942f:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0009434:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000943a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009440:	83 e0 10             	and    eax,0x10
c0009443:	84 c0                	test   al,al
c0009445:	74 07                	je     c000944e <VAS::VAS(bool)+0x1a6>
c0009447:	b8 00 01 00 00       	mov    eax,0x100
c000944c:	eb 05                	jmp    c0009453 <VAS::VAS(bool)+0x1ab>
c000944e:	b8 00 00 00 00       	mov    eax,0x0
c0009453:	09 c2                	or     edx,eax
c0009455:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009459:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000945c:	05 fc 0f 00 00       	add    eax,0xffc
c0009461:	83 ca 03             	or     edx,0x3
c0009464:	89 10                	mov    DWORD PTR [eax],edx
c0009466:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000946b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009471:	83 ec 0c             	sub    esp,0xc
c0009474:	50                   	push   eax
c0009475:	e8 82 1c 00 00       	call   c000b0fc <Device::getName()>
c000947a:	83 c4 10             	add    esp,0x10
c000947d:	83 ec 08             	sub    esp,0x8
c0009480:	68 2f d2 01 c0       	push   0xc001d22f
c0009485:	50                   	push   eax
c0009486:	e8 75 72 ff ff       	call   c0000700 <strcmp>
c000948b:	83 c4 10             	add    esp,0x10
c000948e:	85 c0                	test   eax,eax
c0009490:	0f 94 c0             	sete   al
c0009493:	84 c0                	test   al,al
c0009495:	0f 84 87 00 00 00    	je     c0009522 <VAS::VAS(bool)+0x27a>
c000949b:	fa                   	cli    
c000949c:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c00094a1:	40                   	inc    eax
c00094a2:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c00094a7:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c00094ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00094b2:	05 7c 09 00 00       	add    eax,0x97c
c00094b7:	83 ec 0c             	sub    esp,0xc
c00094ba:	50                   	push   eax
c00094bb:	e8 a2 d2 ff ff       	call   c0006762 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00094c0:	83 c4 10             	add    esp,0x10
c00094c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00094c8:	89 c3                	mov    ebx,eax
c00094ca:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c00094cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00094d5:	05 7c 09 00 00       	add    eax,0x97c
c00094da:	83 ec 0c             	sub    esp,0xc
c00094dd:	50                   	push   eax
c00094de:	e8 7f d2 ff ff       	call   c0006762 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00094e3:	83 c4 10             	add    esp,0x10
c00094e6:	83 ec 08             	sub    esp,0x8
c00094e9:	50                   	push   eax
c00094ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00094ee:	e8 83 f5 ff ff       	call   c0008a76 <VAS::getPageTableEntry(unsigned long)>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00094f8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00094fd:	6a 11                	push   0x11
c00094ff:	53                   	push   ebx
c0009500:	50                   	push   eax
c0009501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009505:	e8 f0 f8 ff ff       	call   c0008dfa <VAS::mapPage(unsigned long, unsigned long, int)>
c000950a:	83 c4 10             	add    esp,0x10
c000950d:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0009512:	48                   	dec    eax
c0009513:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0009518:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000951d:	85 c0                	test   eax,eax
c000951f:	75 01                	jne    c0009522 <VAS::VAS(bool)+0x27a>
c0009521:	fb                   	sti    
c0009522:	90                   	nop
c0009523:	83 c4 28             	add    esp,0x28
c0009526:	5b                   	pop    ebx
c0009527:	c3                   	ret    

c0009528 <VAS::VAS()>:
c0009528:	53                   	push   ebx
c0009529:	83 ec 18             	sub    esp,0x18
c000952c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009530:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000953b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009546:	a3 f4 f6 01 c0       	mov    ds:0xc001f6f4,eax
c000954b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000954f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009553:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009557:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000955a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000955e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009565:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000956d:	83 ec 0c             	sub    esp,0xc
c0009570:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009574:	e8 ec d6 ff ff       	call   c0006c65 <malloc>
c0009579:	83 c4 10             	add    esp,0x10
c000957c:	89 c3                	mov    ebx,eax
c000957e:	83 ec 08             	sub    esp,0x8
c0009581:	6a 01                	push   0x1
c0009583:	53                   	push   ebx
c0009584:	e8 1f fd ff ff       	call   c00092a8 <VAS::VAS(bool)>
c0009589:	83 c4 10             	add    esp,0x10
c000958c:	89 1d ec f6 01 c0    	mov    DWORD PTR ds:0xc001f6ec,ebx
c0009592:	90                   	nop
c0009593:	83 c4 18             	add    esp,0x18
c0009596:	5b                   	pop    ebx
c0009597:	c3                   	ret    

c0009598 <VAS::evict(unsigned long)>:
c0009598:	55                   	push   ebp
c0009599:	57                   	push   edi
c000959a:	56                   	push   esi
c000959b:	53                   	push   ebx
c000959c:	83 ec 1c             	sub    esp,0x1c
c000959f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00095a3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00095a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00095ab:	e8 32 f3 ff ff       	call   c00088e2 <Virt::allocateSwapfilePage()>
c00095b0:	8b 0d ac ef 01 c0    	mov    ecx,DWORD PTR ds:0xc001efac
c00095b6:	89 c7                	mov    edi,eax
c00095b8:	85 c9                	test   ecx,ecx
c00095ba:	7e 3e                	jle    c00095fa <VAS::evict(unsigned long)+0x62>
c00095bc:	89 ee                	mov    esi,ebp
c00095be:	31 db                	xor    ebx,ebx
c00095c0:	83 ec 0c             	sub    esp,0xc
c00095c3:	57                   	push   edi
c00095c4:	e8 07 f3 ff ff       	call   c00088d0 <Virt::swapIDToSector(unsigned long)>
c00095c9:	89 34 24             	mov    DWORD PTR [esp],esi
c00095cc:	01 d8                	add    eax,ebx
c00095ce:	6a 01                	push   0x1
c00095d0:	31 d2                	xor    edx,edx
c00095d2:	43                   	inc    ebx
c00095d3:	52                   	push   edx
c00095d4:	81 c6 00 02 00 00    	add    esi,0x200
c00095da:	50                   	push   eax
c00095db:	0f be 05 b8 ef 01 c0 	movsx  eax,BYTE PTR ds:0xc001efb8
c00095e2:	8b 14 85 7c 1a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde584]
c00095e9:	52                   	push   edx
c00095ea:	e8 8d 2b 00 00       	call   c000c17c <LogicalDisk::write(unsigned long long, int, void*)>
c00095ef:	83 c4 20             	add    esp,0x20
c00095f2:	39 1d ac ef 01 c0    	cmp    DWORD PTR ds:0xc001efac,ebx
c00095f8:	7f c6                	jg     c00095c0 <VAS::evict(unsigned long)+0x28>
c00095fa:	83 ec 08             	sub    esp,0x8
c00095fd:	c1 e7 0b             	shl    edi,0xb
c0009600:	55                   	push   ebp
c0009601:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009605:	50                   	push   eax
c0009606:	e8 6b f4 ff ff       	call   c0008a76 <VAS::getPageTableEntry(unsigned long)>
c000960b:	8b 10                	mov    edx,DWORD PTR [eax]
c000960d:	89 d1                	mov    ecx,edx
c000960f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0009615:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000961b:	09 cf                	or     edi,ecx
c000961d:	89 38                	mov    DWORD PTR [eax],edi
c000961f:	89 14 24             	mov    DWORD PTR [esp],edx
c0009622:	ff 05 e8 f6 01 c0    	inc    DWORD PTR ds:0xc001f6e8
c0009628:	e8 a3 d9 ff ff       	call   c0006fd0 <Phys::freePage(unsigned long)>
c000962d:	0f 20 d8             	mov    eax,cr3
c0009630:	0f 22 d8             	mov    cr3,eax
c0009633:	a1 e4 f6 01 c0       	mov    eax,ds:0xc001f6e4
c0009638:	c7 44 24 40 3d d2 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d23d
c0009640:	8d 50 01             	lea    edx,[eax+0x1]
c0009643:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009647:	89 15 e4 f6 01 c0    	mov    DWORD PTR ds:0xc001f6e4,edx
c000964d:	83 c4 2c             	add    esp,0x2c
c0009650:	5b                   	pop    ebx
c0009651:	5e                   	pop    esi
c0009652:	5f                   	pop    edi
c0009653:	5d                   	pop    ebp
c0009654:	e9 cf 03 00 00       	jmp    c0009a28 <Dbg::kprintf(char const*, ...)>
c0009659:	90                   	nop

c000965a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000965a:	55                   	push   ebp
c000965b:	57                   	push   edi
c000965c:	56                   	push   esi
c000965d:	53                   	push   ebx
c000965e:	83 ec 14             	sub    esp,0x14
c0009661:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009665:	53                   	push   ebx
c0009666:	68 4e d2 01 c0       	push   0xc001d24e
c000966b:	e8 b8 03 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0009670:	83 c4 10             	add    esp,0x10
c0009673:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009679:	74 21                	je     c000969c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000967b:	83 ec 08             	sub    esp,0x8
c000967e:	53                   	push   ebx
c000967f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0009683:	57                   	push   edi
c0009684:	e8 ed f3 ff ff       	call   c0008a76 <VAS::getPageTableEntry(unsigned long)>
c0009689:	83 c4 10             	add    esp,0x10
c000968c:	89 c6                	mov    esi,eax
c000968e:	85 c0                	test   eax,eax
c0009690:	74 0a                	je     c000969c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c0009692:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009694:	f7 c5 01 00 00 00    	test   ebp,0x1
c000969a:	74 0a                	je     c00096a6 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000969c:	31 c0                	xor    eax,eax
c000969e:	83 c4 0c             	add    esp,0xc
c00096a1:	5b                   	pop    ebx
c00096a2:	5e                   	pop    esi
c00096a3:	5f                   	pop    edi
c00096a4:	5d                   	pop    ebp
c00096a5:	c3                   	ret    
c00096a6:	e8 87 d9 ff ff       	call   c0007032 <Phys::allocatePage()>
c00096ab:	c1 ed 0b             	shr    ebp,0xb
c00096ae:	8b 16                	mov    edx,DWORD PTR [esi]
c00096b0:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00096b6:	09 c2                	or     edx,eax
c00096b8:	81 ca 01 08 00 00    	or     edx,0x801
c00096be:	89 16                	mov    DWORD PTR [esi],edx
c00096c0:	8b 35 ac ef 01 c0    	mov    esi,DWORD PTR ds:0xc001efac
c00096c6:	85 f6                	test   esi,esi
c00096c8:	7e 3e                	jle    c0009708 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c00096ca:	89 df                	mov    edi,ebx
c00096cc:	31 f6                	xor    esi,esi
c00096ce:	83 ec 0c             	sub    esp,0xc
c00096d1:	55                   	push   ebp
c00096d2:	e8 f9 f1 ff ff       	call   c00088d0 <Virt::swapIDToSector(unsigned long)>
c00096d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00096da:	01 f0                	add    eax,esi
c00096dc:	6a 01                	push   0x1
c00096de:	31 d2                	xor    edx,edx
c00096e0:	46                   	inc    esi
c00096e1:	52                   	push   edx
c00096e2:	81 c7 00 02 00 00    	add    edi,0x200
c00096e8:	50                   	push   eax
c00096e9:	0f be 05 b8 ef 01 c0 	movsx  eax,BYTE PTR ds:0xc001efb8
c00096f0:	8b 0c 85 7c 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde584]
c00096f7:	51                   	push   ecx
c00096f8:	e8 13 2a 00 00       	call   c000c110 <LogicalDisk::read(unsigned long long, int, void*)>
c00096fd:	83 c4 20             	add    esp,0x20
c0009700:	39 35 ac ef 01 c0    	cmp    DWORD PTR ds:0xc001efac,esi
c0009706:	7f c6                	jg     c00096ce <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c0009708:	a1 e8 f6 01 c0       	mov    eax,ds:0xc001f6e8
c000970d:	48                   	dec    eax
c000970e:	52                   	push   edx
c000970f:	a3 e8 f6 01 c0       	mov    ds:0xc001f6e8,eax
c0009714:	50                   	push   eax
c0009715:	53                   	push   ebx
c0009716:	68 61 d2 01 c0       	push   0xc001d261
c000971b:	e8 08 03 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0009720:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009723:	e8 8a f1 ff ff       	call   c00088b2 <Virt::freeSwapfilePage(unsigned long)>
c0009728:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000972d:	83 c4 10             	add    esp,0x10
c0009730:	48                   	dec    eax
c0009731:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0009736:	85 c0                	test   eax,eax
c0009738:	75 01                	jne    c000973b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000973a:	fb                   	sti    
c000973b:	0f 20 d8             	mov    eax,cr3
c000973e:	0f 22 d8             	mov    cr3,eax
c0009741:	b0 01                	mov    al,0x1
c0009743:	e9 56 ff ff ff       	jmp    c000969e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c0009748 <VAS::scanForEviction()>:
c0009748:	57                   	push   edi
c0009749:	31 ff                	xor    edi,edi
c000974b:	56                   	push   esi
c000974c:	53                   	push   ebx
c000974d:	83 ec 10             	sub    esp,0x10
c0009750:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009754:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0009757:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000975d:	75 0e                	jne    c000976d <VAS::scanForEviction()+0x25>
c000975f:	89 da                	mov    edx,ebx
c0009761:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009764:	c1 ea 16             	shr    edx,0x16
c0009767:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000976b:	74 4e                	je     c00097bb <VAS::scanForEviction()+0x73>
c000976d:	53                   	push   ebx
c000976e:	56                   	push   esi
c000976f:	e8 02 f3 ff ff       	call   c0008a76 <VAS::getPageTableEntry(unsigned long)>
c0009774:	5a                   	pop    edx
c0009775:	8b 10                	mov    edx,DWORD PTR [eax]
c0009777:	59                   	pop    ecx
c0009778:	89 d1                	mov    ecx,edx
c000977a:	81 e1 01 08 00 00    	and    ecx,0x801
c0009780:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0009786:	74 3e                	je     c00097c6 <VAS::scanForEviction()+0x7e>
c0009788:	81 c3 00 10 00 00    	add    ebx,0x1000
c000978e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0009794:	76 2b                	jbe    c00097c1 <VAS::scanForEviction()+0x79>
c0009796:	47                   	inc    edi
c0009797:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000979e:	83 ff 03             	cmp    edi,0x3
c00097a1:	74 32                	je     c00097d5 <VAS::scanForEviction()+0x8d>
c00097a3:	31 db                	xor    ebx,ebx
c00097a5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00097ab:	75 c0                	jne    c000976d <VAS::scanForEviction()+0x25>
c00097ad:	89 da                	mov    edx,ebx
c00097af:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00097b2:	c1 ea 16             	shr    edx,0x16
c00097b5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00097b9:	75 b2                	jne    c000976d <VAS::scanForEviction()+0x25>
c00097bb:	81 c3 00 00 40 00    	add    ebx,0x400000
c00097c1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00097c4:	eb 91                	jmp    c0009757 <VAS::scanForEviction()+0xf>
c00097c6:	f6 c2 20             	test   dl,0x20
c00097c9:	74 13                	je     c00097de <VAS::scanForEviction()+0x96>
c00097cb:	83 e2 df             	and    edx,0xffffffdf
c00097ce:	89 10                	mov    DWORD PTR [eax],edx
c00097d0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00097d3:	eb b3                	jmp    c0009788 <VAS::scanForEviction()+0x40>
c00097d5:	83 c4 10             	add    esp,0x10
c00097d8:	31 c0                	xor    eax,eax
c00097da:	5b                   	pop    ebx
c00097db:	5e                   	pop    esi
c00097dc:	5f                   	pop    edi
c00097dd:	c3                   	ret    
c00097de:	83 ec 08             	sub    esp,0x8
c00097e1:	89 d0                	mov    eax,edx
c00097e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00097e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00097ec:	53                   	push   ebx
c00097ed:	68 76 d2 01 c0       	push   0xc001d276
c00097f2:	e8 31 02 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00097f7:	58                   	pop    eax
c00097f8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c00097fb:	5a                   	pop    edx
c00097fc:	51                   	push   ecx
c00097fd:	56                   	push   esi
c00097fe:	e8 95 fd ff ff       	call   c0009598 <VAS::evict(unsigned long)>
c0009803:	5b                   	pop    ebx
c0009804:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0009807:	5f                   	pop    edi
c0009808:	50                   	push   eax
c0009809:	68 8a d2 01 c0       	push   0xc001d28a
c000980e:	e8 15 02 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0009813:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000981a:	83 c4 10             	add    esp,0x10
c000981d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009821:	83 c4 10             	add    esp,0x10
c0009824:	5b                   	pop    ebx
c0009825:	5e                   	pop    esi
c0009826:	5f                   	pop    edi
c0009827:	c3                   	ret    

c0009828 <mapVASFirstTime>:
c0009828:	55                   	push   ebp
c0009829:	57                   	push   edi
c000982a:	56                   	push   esi
c000982b:	53                   	push   ebx
c000982c:	83 ec 0c             	sub    esp,0xc
c000982f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009834:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009837:	4a                   	dec    edx
c0009838:	0f 84 8c 00 00 00    	je     c00098ca <mapVASFirstTime+0xa2>
c000983e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0009841:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0009844:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0009849:	c1 e5 15             	shl    ebp,0x15
c000984c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0009851:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0009857:	29 eb                	sub    ebx,ebp
c0009859:	29 ef                	sub    edi,ebp
c000985b:	e8 d2 d7 ff ff       	call   c0007032 <Phys::allocatePage()>
c0009860:	83 ec 0c             	sub    esp,0xc
c0009863:	68 03 04 00 00       	push   0x403
c0009868:	6a 01                	push   0x1
c000986a:	53                   	push   ebx
c000986b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0009871:	50                   	push   eax
c0009872:	56                   	push   esi
c0009873:	e8 7c f8 ff ff       	call   c00090f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009878:	83 c4 20             	add    esp,0x20
c000987b:	39 fb                	cmp    ebx,edi
c000987d:	75 dc                	jne    c000985b <mapVASFirstTime+0x33>
c000987f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0009884:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0009889:	29 eb                	sub    ebx,ebp
c000988b:	29 ef                	sub    edi,ebp
c000988d:	e8 a0 d7 ff ff       	call   c0007032 <Phys::allocatePage()>
c0009892:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0009896:	19 d2                	sbb    edx,edx
c0009898:	83 ec 0c             	sub    esp,0xc
c000989b:	83 e2 04             	and    edx,0x4
c000989e:	81 c2 03 04 00 00    	add    edx,0x403
c00098a4:	52                   	push   edx
c00098a5:	6a 01                	push   0x1
c00098a7:	53                   	push   ebx
c00098a8:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00098ae:	50                   	push   eax
c00098af:	56                   	push   esi
c00098b0:	e8 3f f8 ff ff       	call   c00090f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00098b5:	83 c4 20             	add    esp,0x20
c00098b8:	39 df                	cmp    edi,ebx
c00098ba:	75 d1                	jne    c000988d <mapVASFirstTime+0x65>
c00098bc:	0f 20 d8             	mov    eax,cr3
c00098bf:	0f 22 d8             	mov    cr3,eax
c00098c2:	83 c4 0c             	add    esp,0xc
c00098c5:	5b                   	pop    ebx
c00098c6:	5e                   	pop    esi
c00098c7:	5f                   	pop    edi
c00098c8:	5d                   	pop    ebp
c00098c9:	c3                   	ret    
c00098ca:	83 ec 0c             	sub    esp,0xc
c00098cd:	68 9d d2 01 c0       	push   0xc001d29d
c00098d2:	e8 51 01 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00098d7:	83 c4 10             	add    esp,0x10
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	5b                   	pop    ebx
c00098de:	5e                   	pop    esi
c00098df:	5f                   	pop    edi
c00098e0:	5d                   	pop    ebp
c00098e1:	c3                   	ret    

c00098e2 <__cxa_atexit>:
c00098e2:	31 c0                	xor    eax,eax
c00098e4:	c3                   	ret    

c00098e5 <__cxa_finalize>:
c00098e5:	c3                   	ret    

c00098e6 <__stack_chk_fail>:
c00098e6:	55                   	push   ebp
c00098e7:	89 e5                	mov    ebp,esp
c00098e9:	83 ec 10             	sub    esp,0x10
c00098ec:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00098ef:	68 b6 d2 01 c0       	push   0xc001d2b6
c00098f4:	e8 2f 01 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00098f9:	58                   	pop    eax
c00098fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00098fd:	5a                   	pop    edx
c00098fe:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009901:	68 b6 d2 01 c0       	push   0xc001d2b6
c0009906:	e8 1d 01 00 00       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c000990b:	c7 04 24 be d2 01 c0 	mov    DWORD PTR [esp],0xc001d2be
c0009912:	e8 8a 5c 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0009917:	83 c4 10             	add    esp,0x10
c000991a:	c9                   	leave  
c000991b:	c3                   	ret    

c000991c <__cxa_pure_virtual>:
c000991c:	83 ec 18             	sub    esp,0x18
c000991f:	68 d6 d2 01 c0       	push   0xc001d2d6
c0009924:	e8 78 5c 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c0009929:	83 c4 1c             	add    esp,0x1c
c000992c:	c3                   	ret    

c000992d <operator new[](unsigned long)>:
c000992d:	e9 33 d3 ff ff       	jmp    c0006c65 <malloc>

c0009932 <operator delete(void*, unsigned long)>:
c0009932:	e9 4e d3 ff ff       	jmp    c0006c85 <rfree>

c0009937 <operator delete[](void*)>:
c0009937:	e9 49 d3 ff ff       	jmp    c0006c85 <rfree>

c000993c <operator delete[](void*, unsigned long)>:
c000993c:	e9 44 d3 ff ff       	jmp    c0006c85 <rfree>

c0009941 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0009941:	55                   	push   ebp
c0009942:	b9 04 00 00 00       	mov    ecx,0x4
c0009947:	57                   	push   edi
c0009948:	56                   	push   esi
c0009949:	be eb ce 01 c0       	mov    esi,0xc001ceeb
c000994e:	53                   	push   ebx
c000994f:	83 ec 20             	sub    esp,0x20
c0009952:	a1 ea ce 01 c0       	mov    eax,ds:0xc001ceea
c0009957:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000995b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000995f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009963:	a1 f7 ce 01 c0       	mov    eax,ds:0xc001cef7
c0009968:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000996c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009970:	fc                   	cld    
c0009971:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009973:	89 ee                	mov    esi,ebp
c0009975:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0009979:	eb 02                	jmp    c000997d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000997b:	89 c6                	mov    esi,eax
c000997d:	31 d2                	xor    edx,edx
c000997f:	41                   	inc    ecx
c0009980:	89 f0                	mov    eax,esi
c0009982:	f7 f3                	div    ebx
c0009984:	39 de                	cmp    esi,ebx
c0009986:	73 f3                	jae    c000997b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0009988:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000998b:	eb 02                	jmp    c000998f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000998d:	89 c5                	mov    ebp,eax
c000998f:	31 d2                	xor    edx,edx
c0009991:	49                   	dec    ecx
c0009992:	89 e8                	mov    eax,ebp
c0009994:	f7 f3                	div    ebx
c0009996:	39 dd                	cmp    ebp,ebx
c0009998:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000999c:	88 11                	mov    BYTE PTR [ecx],dl
c000999e:	73 ed                	jae    c000998d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c00099a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00099a4:	83 c4 20             	add    esp,0x20
c00099a7:	5b                   	pop    ebx
c00099a8:	5e                   	pop    esi
c00099a9:	5f                   	pop    edi
c00099aa:	5d                   	pop    ebp
c00099ab:	c3                   	ret    

c00099ac <Dbg::logc(char)>:
c00099ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00099b0:	f6 05 20 f6 01 c0 10 	test   BYTE PTR ds:0xc001f620,0x10
c00099b7:	75 12                	jne    c00099cb <Dbg::logc(char)+0x1f>
c00099b9:	ba fd 03 00 00       	mov    edx,0x3fd
c00099be:	ec                   	in     al,dx
c00099bf:	a8 20                	test   al,0x20
c00099c1:	74 fb                	je     c00099be <Dbg::logc(char)+0x12>
c00099c3:	ba f8 03 00 00       	mov    edx,0x3f8
c00099c8:	88 c8                	mov    al,cl
c00099ca:	ee                   	out    dx,al
c00099cb:	c3                   	ret    

c00099cc <Dbg::logs(char*)>:
c00099cc:	53                   	push   ebx
c00099cd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00099d1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00099d4:	84 c0                	test   al,al
c00099d6:	74 0f                	je     c00099e7 <Dbg::logs(char*)+0x1b>
c00099d8:	50                   	push   eax
c00099d9:	43                   	inc    ebx
c00099da:	e8 cd ff ff ff       	call   c00099ac <Dbg::logc(char)>
c00099df:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00099e2:	5a                   	pop    edx
c00099e3:	84 c0                	test   al,al
c00099e5:	75 f1                	jne    c00099d8 <Dbg::logs(char*)+0xc>
c00099e7:	5b                   	pop    ebx
c00099e8:	c3                   	ret    

c00099e9 <Dbg::logWriteInt(unsigned int)>:
c00099e9:	83 ec 10             	sub    esp,0x10
c00099ec:	6a 0a                	push   0xa
c00099ee:	8d 44 24 08          	lea    eax,[esp+0x8]
c00099f2:	50                   	push   eax
c00099f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099f7:	50                   	push   eax
c00099f8:	e8 44 ff ff ff       	call   c0009941 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00099fd:	50                   	push   eax
c00099fe:	e8 c9 ff ff ff       	call   c00099cc <Dbg::logs(char*)>
c0009a03:	83 c4 20             	add    esp,0x20
c0009a06:	c3                   	ret    

c0009a07 <Dbg::logWriteIntBase(unsigned int, int)>:
c0009a07:	83 ec 10             	sub    esp,0x10
c0009a0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a0e:	50                   	push   eax
c0009a0f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0009a13:	50                   	push   eax
c0009a14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a18:	52                   	push   edx
c0009a19:	e8 23 ff ff ff       	call   c0009941 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0009a1e:	50                   	push   eax
c0009a1f:	e8 a8 ff ff ff       	call   c00099cc <Dbg::logs(char*)>
c0009a24:	83 c4 20             	add    esp,0x20
c0009a27:	c3                   	ret    

c0009a28 <Dbg::kprintf(char const*, ...)>:
c0009a28:	55                   	push   ebp
c0009a29:	57                   	push   edi
c0009a2a:	56                   	push   esi
c0009a2b:	53                   	push   ebx
c0009a2c:	83 ec 0c             	sub    esp,0xc
c0009a2f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009a33:	f6 05 20 f6 01 c0 10 	test   BYTE PTR ds:0xc001f620,0x10
c0009a3a:	74 08                	je     c0009a44 <Dbg::kprintf(char const*, ...)+0x1c>
c0009a3c:	83 c4 0c             	add    esp,0xc
c0009a3f:	5b                   	pop    ebx
c0009a40:	5e                   	pop    esi
c0009a41:	5f                   	pop    edi
c0009a42:	5d                   	pop    ebp
c0009a43:	c3                   	ret    
c0009a44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0009a48:	31 ff                	xor    edi,edi
c0009a4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a4e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009a51:	84 c0                	test   al,al
c0009a53:	74 e7                	je     c0009a3c <Dbg::kprintf(char const*, ...)+0x14>
c0009a55:	8d 77 01             	lea    esi,[edi+0x1]
c0009a58:	3c 25                	cmp    al,0x25
c0009a5a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0009a5d:	75 47                	jne    c0009aa6 <Dbg::kprintf(char const*, ...)+0x7e>
c0009a5f:	83 c7 02             	add    edi,0x2
c0009a62:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009a65:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0009a68:	83 e8 25             	sub    eax,0x25
c0009a6b:	3c 53                	cmp    al,0x53
c0009a6d:	0f 87 d2 00 00 00    	ja     c0009b45 <Dbg::kprintf(char const*, ...)+0x11d>
c0009a73:	25 ff 00 00 00       	and    eax,0xff
c0009a78:	ff 24 85 ec d2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2d14]
c0009a7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009a83:	89 c8                	mov    eax,ecx
c0009a85:	83 c1 04             	add    ecx,0x4
c0009a88:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009a8c:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009a8e:	55                   	push   ebp
c0009a8f:	e8 55 ff ff ff       	call   c00099e9 <Dbg::logWriteInt(unsigned int)>
c0009a94:	58                   	pop    eax
c0009a95:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0009a98:	84 c0                	test   al,al
c0009a9a:	74 a0                	je     c0009a3c <Dbg::kprintf(char const*, ...)+0x14>
c0009a9c:	8d 77 01             	lea    esi,[edi+0x1]
c0009a9f:	3c 25                	cmp    al,0x25
c0009aa1:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0009aa4:	74 b9                	je     c0009a5f <Dbg::kprintf(char const*, ...)+0x37>
c0009aa6:	50                   	push   eax
c0009aa7:	89 f7                	mov    edi,esi
c0009aa9:	e8 fe fe ff ff       	call   c00099ac <Dbg::logc(char)>
c0009aae:	89 ee                	mov    esi,ebp
c0009ab0:	58                   	pop    eax
c0009ab1:	eb e2                	jmp    c0009a95 <Dbg::kprintf(char const*, ...)+0x6d>
c0009ab3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009ab7:	89 c8                	mov    eax,ecx
c0009ab9:	83 c1 04             	add    ecx,0x4
c0009abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0009abe:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009ac2:	50                   	push   eax
c0009ac3:	e8 04 ff ff ff       	call   c00099cc <Dbg::logs(char*)>
c0009ac8:	58                   	pop    eax
c0009ac9:	eb ca                	jmp    c0009a95 <Dbg::kprintf(char const*, ...)+0x6d>
c0009acb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009acf:	89 d0                	mov    eax,edx
c0009ad1:	83 c2 04             	add    edx,0x4
c0009ad4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009ad8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ada:	50                   	push   eax
c0009adb:	e8 09 ff ff ff       	call   c00099e9 <Dbg::logWriteInt(unsigned int)>
c0009ae0:	58                   	pop    eax
c0009ae1:	eb b2                	jmp    c0009a95 <Dbg::kprintf(char const*, ...)+0x6d>
c0009ae3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009ae7:	89 d0                	mov    eax,edx
c0009ae9:	83 c2 04             	add    edx,0x4
c0009aec:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0009aef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009af3:	50                   	push   eax
c0009af4:	e8 b3 fe ff ff       	call   c00099ac <Dbg::logc(char)>
c0009af9:	58                   	pop    eax
c0009afa:	eb 99                	jmp    c0009a95 <Dbg::kprintf(char const*, ...)+0x6d>
c0009afc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009b00:	89 c8                	mov    eax,ecx
c0009b02:	83 c1 04             	add    ecx,0x4
c0009b05:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009b09:	6a 10                	push   0x10
c0009b0b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b0d:	51                   	push   ecx
c0009b0e:	e8 f4 fe ff ff       	call   c0009a07 <Dbg::logWriteIntBase(unsigned int, int)>
c0009b13:	5d                   	pop    ebp
c0009b14:	58                   	pop    eax
c0009b15:	e9 7b ff ff ff       	jmp    c0009a95 <Dbg::kprintf(char const*, ...)+0x6d>
c0009b1a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009b1e:	89 d0                	mov    eax,edx
c0009b20:	83 c2 08             	add    edx,0x8
c0009b23:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009b27:	6a 10                	push   0x10
c0009b29:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b2b:	50                   	push   eax
c0009b2c:	e8 d6 fe ff ff       	call   c0009a07 <Dbg::logWriteIntBase(unsigned int, int)>
c0009b31:	58                   	pop    eax
c0009b32:	5a                   	pop    edx
c0009b33:	e9 5d ff ff ff       	jmp    c0009a95 <Dbg::kprintf(char const*, ...)+0x6d>
c0009b38:	6a 25                	push   0x25
c0009b3a:	e8 6d fe ff ff       	call   c00099ac <Dbg::logc(char)>
c0009b3f:	5a                   	pop    edx
c0009b40:	e9 50 ff ff ff       	jmp    c0009a95 <Dbg::kprintf(char const*, ...)+0x6d>
c0009b45:	6a 25                	push   0x25
c0009b47:	e8 60 fe ff ff       	call   c00099ac <Dbg::logc(char)>
c0009b4c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0009b50:	50                   	push   eax
c0009b51:	e8 56 fe ff ff       	call   c00099ac <Dbg::logc(char)>
c0009b56:	5a                   	pop    edx
c0009b57:	59                   	pop    ecx
c0009b58:	e9 38 ff ff ff       	jmp    c0009a95 <Dbg::kprintf(char const*, ...)+0x6d>
c0009b5d:	90                   	nop

c0009b5e <File::read(unsigned long long, void*, int*)>:
c0009b5e:	53                   	push   ebx
c0009b5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b63:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b67:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009b6e:	3c 19                	cmp    al,0x19
c0009b70:	77 35                	ja     c0009ba7 <File::read(unsigned long long, void*, int*)+0x49>
c0009b72:	8b 04 85 80 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde480]
c0009b79:	85 c0                	test   eax,eax
c0009b7b:	74 2a                	je     c0009ba7 <File::read(unsigned long long, void*, int*)+0x49>
c0009b7d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009b83:	85 c0                	test   eax,eax
c0009b85:	74 20                	je     c0009ba7 <File::read(unsigned long long, void*, int*)+0x49>
c0009b87:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009b8b:	74 21                	je     c0009bae <File::read(unsigned long long, void*, int*)+0x50>
c0009b8d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b8f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009b93:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009b99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ba1:	5b                   	pop    ebx
c0009ba2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0009ba5:	ff e0                	jmp    eax
c0009ba7:	b8 0b 00 00 00       	mov    eax,0xb
c0009bac:	eb 05                	jmp    c0009bb3 <File::read(unsigned long long, void*, int*)+0x55>
c0009bae:	b8 05 00 00 00       	mov    eax,0x5
c0009bb3:	5b                   	pop    ebx
c0009bb4:	c3                   	ret    
c0009bb5:	90                   	nop

c0009bb6 <File::write(unsigned long long, void*, int*)>:
c0009bb6:	53                   	push   ebx
c0009bb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bbb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bbf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009bc6:	3c 19                	cmp    al,0x19
c0009bc8:	77 35                	ja     c0009bff <File::write(unsigned long long, void*, int*)+0x49>
c0009bca:	8b 04 85 80 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde480]
c0009bd1:	85 c0                	test   eax,eax
c0009bd3:	74 2a                	je     c0009bff <File::write(unsigned long long, void*, int*)+0x49>
c0009bd5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009bdb:	85 c0                	test   eax,eax
c0009bdd:	74 20                	je     c0009bff <File::write(unsigned long long, void*, int*)+0x49>
c0009bdf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009be3:	74 21                	je     c0009c06 <File::write(unsigned long long, void*, int*)+0x50>
c0009be5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009be7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009beb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009bf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009bf5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009bf9:	5b                   	pop    ebx
c0009bfa:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0009bfd:	ff e0                	jmp    eax
c0009bff:	b8 0b 00 00 00       	mov    eax,0xb
c0009c04:	eb 05                	jmp    c0009c0b <File::write(unsigned long long, void*, int*)+0x55>
c0009c06:	b8 05 00 00 00       	mov    eax,0x5
c0009c0b:	5b                   	pop    ebx
c0009c0c:	c3                   	ret    
c0009c0d:	90                   	nop

c0009c0e <Directory::read(unsigned long long, void*, int*)>:
c0009c0e:	53                   	push   ebx
c0009c0f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009c13:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c17:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009c1e:	3c 19                	cmp    al,0x19
c0009c20:	77 35                	ja     c0009c57 <Directory::read(unsigned long long, void*, int*)+0x49>
c0009c22:	8b 04 85 80 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde480]
c0009c29:	85 c0                	test   eax,eax
c0009c2b:	74 2a                	je     c0009c57 <Directory::read(unsigned long long, void*, int*)+0x49>
c0009c2d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009c33:	85 c0                	test   eax,eax
c0009c35:	74 20                	je     c0009c57 <Directory::read(unsigned long long, void*, int*)+0x49>
c0009c37:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009c3b:	74 21                	je     c0009c5e <Directory::read(unsigned long long, void*, int*)+0x50>
c0009c3d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009c3f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009c43:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009c49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c51:	5b                   	pop    ebx
c0009c52:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0009c55:	ff e0                	jmp    eax
c0009c57:	b8 0b 00 00 00       	mov    eax,0xb
c0009c5c:	eb 05                	jmp    c0009c63 <Directory::read(unsigned long long, void*, int*)+0x55>
c0009c5e:	b8 05 00 00 00       	mov    eax,0x5
c0009c63:	5b                   	pop    ebx
c0009c64:	c3                   	ret    
c0009c65:	90                   	nop

c0009c66 <Directory::write(unsigned long long, void*, int*)>:
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0009c71:	b8 0b 00 00 00       	mov    eax,0xb
c0009c76:	80 fa 19             	cmp    dl,0x19
c0009c79:	77 18                	ja     c0009c93 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009c7b:	8b 14 95 80 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde480]
c0009c82:	85 d2                	test   edx,edx
c0009c84:	74 0d                	je     c0009c93 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009c86:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0009c8d:	19 c0                	sbb    eax,eax
c0009c8f:	83 e0 0a             	and    eax,0xa
c0009c92:	40                   	inc    eax
c0009c93:	c3                   	ret    

c0009c94 <File::isAtty()>:
c0009c94:	31 c0                	xor    eax,eax
c0009c96:	c3                   	ret    
c0009c97:	90                   	nop

c0009c98 <Directory::isAtty()>:
c0009c98:	31 c0                	xor    eax,eax
c0009c9a:	c3                   	ret    
c0009c9b:	90                   	nop

c0009c9c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0009c9c:	b8 0a 00 00 00       	mov    eax,0xa
c0009ca1:	c3                   	ret    

c0009ca2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0009ca2:	b8 0a 00 00 00       	mov    eax,0xa
c0009ca7:	c3                   	ret    

c0009ca8 <Filesystem::allocateSwapfile(char const*, int)>:
c0009ca8:	31 c0                	xor    eax,eax
c0009caa:	31 d2                	xor    edx,edx
c0009cac:	c3                   	ret    
c0009cad:	90                   	nop

c0009cae <File::~File()>:
c0009cae:	83 ec 0c             	sub    esp,0xc
c0009cb1:	ba ac d4 01 c0       	mov    edx,0xc001d4ac
c0009cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cba:	89 10                	mov    DWORD PTR [eax],edx
c0009cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cc0:	83 ec 0c             	sub    esp,0xc
c0009cc3:	50                   	push   eax
c0009cc4:	e8 77 e8 ff ff       	call   c0008540 <UnixFile::~UnixFile()>
c0009cc9:	83 c4 10             	add    esp,0x10
c0009ccc:	90                   	nop
c0009ccd:	83 c4 0c             	add    esp,0xc
c0009cd0:	c3                   	ret    
c0009cd1:	90                   	nop

c0009cd2 <File::~File()>:
c0009cd2:	83 ec 0c             	sub    esp,0xc
c0009cd5:	83 ec 0c             	sub    esp,0xc
c0009cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cdc:	e8 cd ff ff ff       	call   c0009cae <File::~File()>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	83 ec 08             	sub    esp,0x8
c0009ce7:	68 14 01 00 00       	push   0x114
c0009cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cf0:	e8 3d fc ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c0009cf5:	83 c4 10             	add    esp,0x10
c0009cf8:	83 c4 0c             	add    esp,0xc
c0009cfb:	c3                   	ret    

c0009cfc <Directory::~Directory()>:
c0009cfc:	83 ec 0c             	sub    esp,0xc
c0009cff:	ba c8 d4 01 c0       	mov    edx,0xc001d4c8
c0009d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d08:	89 10                	mov    DWORD PTR [eax],edx
c0009d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d0e:	83 ec 0c             	sub    esp,0xc
c0009d11:	50                   	push   eax
c0009d12:	e8 29 e8 ff ff       	call   c0008540 <UnixFile::~UnixFile()>
c0009d17:	83 c4 10             	add    esp,0x10
c0009d1a:	90                   	nop
c0009d1b:	83 c4 0c             	add    esp,0xc
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <Directory::~Directory()>:
c0009d20:	83 ec 0c             	sub    esp,0xc
c0009d23:	83 ec 0c             	sub    esp,0xc
c0009d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d2a:	e8 cd ff ff ff       	call   c0009cfc <Directory::~Directory()>
c0009d2f:	83 c4 10             	add    esp,0x10
c0009d32:	83 ec 08             	sub    esp,0x8
c0009d35:	68 14 01 00 00       	push   0x114
c0009d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d3e:	e8 ef fb ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c0009d43:	83 c4 10             	add    esp,0x10
c0009d46:	83 c4 0c             	add    esp,0xc
c0009d49:	c3                   	ret    

c0009d4a <Filesystem::Filesystem()>:
c0009d4a:	ba 44 d4 01 c0       	mov    edx,0xc001d444
c0009d4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d53:	89 10                	mov    DWORD PTR [eax],edx
c0009d55:	8b 15 f8 f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f6f8
c0009d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009d62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d66:	a3 f8 f6 01 c0       	mov    ds:0xc001f6f8,eax
c0009d6b:	90                   	nop
c0009d6c:	c3                   	ret    
c0009d6d:	90                   	nop

c0009d6e <Filesystem::~Filesystem()>:
c0009d6e:	ba 44 d4 01 c0       	mov    edx,0xc001d444
c0009d73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d77:	89 10                	mov    DWORD PTR [eax],edx
c0009d79:	90                   	nop
c0009d7a:	c3                   	ret    
c0009d7b:	90                   	nop

c0009d7c <Filesystem::~Filesystem()>:
c0009d7c:	83 ec 0c             	sub    esp,0xc
c0009d7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009d83:	e8 e6 ff ff ff       	call   c0009d6e <Filesystem::~Filesystem()>
c0009d88:	83 c4 04             	add    esp,0x4
c0009d8b:	83 ec 08             	sub    esp,0x8
c0009d8e:	6a 08                	push   0x8
c0009d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d94:	e8 99 fb ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	83 c4 0c             	add    esp,0xc
c0009d9f:	c3                   	ret    

c0009da0 <Fs::getcwd(Process*, char*, int)>:
c0009da0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009da4:	31 c0                	xor    eax,eax
c0009da6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0009da9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0009dad:	7d 15                	jge    c0009dc4 <Fs::getcwd(Process*, char*, int)+0x24>
c0009daf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009db3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0009dba:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0009dbd:	84 c9                	test   cl,cl
c0009dbf:	74 06                	je     c0009dc7 <Fs::getcwd(Process*, char*, int)+0x27>
c0009dc1:	40                   	inc    eax
c0009dc2:	eb e2                	jmp    c0009da6 <Fs::getcwd(Process*, char*, int)+0x6>
c0009dc4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009dc7:	31 c0                	xor    eax,eax
c0009dc9:	c3                   	ret    

c0009dca <Fs::initVFS()>:
c0009dca:	83 ec 18             	sub    esp,0x18
c0009dcd:	6a 08                	push   0x8
c0009dcf:	e8 91 ce ff ff       	call   c0006c65 <malloc>
c0009dd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dd7:	e8 40 c4 00 00       	call   c001621c <FAT::FAT()>
c0009ddc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009de3:	e8 7d ce ff ff       	call   c0006c65 <malloc>
c0009de8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009deb:	e8 e6 d6 00 00       	call   c00174d6 <ISO9660::ISO9660()>
c0009df0:	83 c4 1c             	add    esp,0x1c
c0009df3:	c3                   	ret    

c0009df4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0009df4:	55                   	push   ebp
c0009df5:	57                   	push   edi
c0009df6:	56                   	push   esi
c0009df7:	53                   	push   ebx
c0009df8:	81 ec 10 04 00 00    	sub    esp,0x410
c0009dfe:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0009e05:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0009e0c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0009e13:	68 00 04 00 00       	push   0x400
c0009e18:	6a 00                	push   0x0
c0009e1a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0009e1e:	56                   	push   esi
c0009e1f:	e8 cc 66 ff ff       	call   c00004f0 <memset>
c0009e24:	83 c4 10             	add    esp,0x10
c0009e27:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0009e2b:	75 0b                	jne    c0009e38 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0009e2d:	50                   	push   eax
c0009e2e:	50                   	push   eax
c0009e2f:	57                   	push   edi
c0009e30:	56                   	push   esi
c0009e31:	e8 ea 67 ff ff       	call   c0000620 <strcpy>
c0009e36:	eb 41                	jmp    c0009e79 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0009e38:	8a 07                	mov    al,BYTE PTR [edi]
c0009e3a:	3c 5c                	cmp    al,0x5c
c0009e3c:	74 04                	je     c0009e42 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0009e3e:	3c 2f                	cmp    al,0x2f
c0009e40:	75 18                	jne    c0009e5a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0009e42:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009e45:	3c 60                	cmp    al,0x60
c0009e47:	7e 03                	jle    c0009e4c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0009e49:	83 e8 20             	sub    eax,0x20
c0009e4c:	88 04 24             	mov    BYTE PTR [esp],al
c0009e4f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009e56:	50                   	push   eax
c0009e57:	50                   	push   eax
c0009e58:	eb 18                	jmp    c0009e72 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0009e5a:	50                   	push   eax
c0009e5b:	50                   	push   eax
c0009e5c:	55                   	push   ebp
c0009e5d:	56                   	push   esi
c0009e5e:	e8 bd 67 ff ff       	call   c0000620 <strcpy>
c0009e63:	5a                   	pop    edx
c0009e64:	59                   	pop    ecx
c0009e65:	68 73 e2 01 c0       	push   0xc001e273
c0009e6a:	56                   	push   esi
c0009e6b:	e8 70 69 ff ff       	call   c00007e0 <strcat>
c0009e70:	5d                   	pop    ebp
c0009e71:	58                   	pop    eax
c0009e72:	57                   	push   edi
c0009e73:	56                   	push   esi
c0009e74:	e8 67 69 ff ff       	call   c00007e0 <strcat>
c0009e79:	83 c4 10             	add    esp,0x10
c0009e7c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0009e7f:	3c 60                	cmp    al,0x60
c0009e81:	7e 03                	jle    c0009e86 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0009e83:	83 e8 20             	sub    eax,0x20
c0009e86:	88 04 24             	mov    BYTE PTR [esp],al
c0009e89:	88 03                	mov    BYTE PTR [ebx],al
c0009e8b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009e92:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0009e98:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0009e9c:	bf 03 00 00 00       	mov    edi,0x3
c0009ea1:	b8 03 00 00 00       	mov    eax,0x3
c0009ea6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0009ea9:	84 d2                	test   dl,dl
c0009eab:	0f 84 91 00 00 00    	je     c0009f42 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0009eb1:	8d 4f 01             	lea    ecx,[edi+0x1]
c0009eb4:	80 fa 5c             	cmp    dl,0x5c
c0009eb7:	74 05                	je     c0009ebe <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0009eb9:	80 fa 2f             	cmp    dl,0x2f
c0009ebc:	75 12                	jne    c0009ed0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009ebe:	89 c5                	mov    ebp,eax
c0009ec0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009ec5:	74 09                	je     c0009ed0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009ec7:	40                   	inc    eax
c0009ec8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0009ecc:	89 cf                	mov    edi,ecx
c0009ece:	eb d6                	jmp    c0009ea6 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0009ed0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0009ed5:	75 5b                	jne    c0009f32 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009ed7:	80 fa 2e             	cmp    dl,0x2e
c0009eda:	75 56                	jne    c0009f32 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009edc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0009ee0:	74 19                	je     c0009efb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0009ee2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009ee7:	74 53                	je     c0009f3c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009ee9:	89 f9                	mov    ecx,edi
c0009eeb:	41                   	inc    ecx
c0009eec:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009eef:	80 fa 2f             	cmp    dl,0x2f
c0009ef2:	74 f7                	je     c0009eeb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009ef4:	80 fa 5c             	cmp    dl,0x5c
c0009ef7:	74 f2                	je     c0009eeb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009ef9:	eb d1                	jmp    c0009ecc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009efb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009f00:	74 3a                	je     c0009f3c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009f02:	83 f8 03             	cmp    eax,0x3
c0009f05:	74 c5                	je     c0009ecc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009f07:	41                   	inc    ecx
c0009f08:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009f0b:	80 fa 2f             	cmp    dl,0x2f
c0009f0e:	74 f7                	je     c0009f07 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009f10:	80 fa 5c             	cmp    dl,0x5c
c0009f13:	74 f2                	je     c0009f07 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009f15:	48                   	dec    eax
c0009f16:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009f1a:	75 06                	jne    c0009f22 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009f1c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009f20:	eb f3                	jmp    c0009f15 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0009f22:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009f26:	74 07                	je     c0009f2f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0009f28:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009f2c:	48                   	dec    eax
c0009f2d:	eb f3                	jmp    c0009f22 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009f2f:	40                   	inc    eax
c0009f30:	eb 9a                	jmp    c0009ecc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009f32:	80 fa 2f             	cmp    dl,0x2f
c0009f35:	74 95                	je     c0009ecc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009f37:	80 fa 5c             	cmp    dl,0x5c
c0009f3a:	74 90                	je     c0009ecc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009f3c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0009f3f:	40                   	inc    eax
c0009f40:	eb 8a                	jmp    c0009ecc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009f42:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009f46:	83 ec 0c             	sub    esp,0xc
c0009f49:	53                   	push   ebx
c0009f4a:	e8 11 66 ff ff       	call   c0000560 <strlen>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0009f57:	75 26                	jne    c0009f7f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0009f59:	83 ec 0c             	sub    esp,0xc
c0009f5c:	53                   	push   ebx
c0009f5d:	e8 fe 65 ff ff       	call   c0000560 <strlen>
c0009f62:	83 c4 10             	add    esp,0x10
c0009f65:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0009f6a:	74 26                	je     c0009f92 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0009f6c:	83 ec 0c             	sub    esp,0xc
c0009f6f:	53                   	push   ebx
c0009f70:	e8 eb 65 ff ff       	call   c0000560 <strlen>
c0009f75:	83 c4 10             	add    esp,0x10
c0009f78:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0009f7d:	eb c7                	jmp    c0009f46 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0009f7f:	83 ec 0c             	sub    esp,0xc
c0009f82:	53                   	push   ebx
c0009f83:	e8 d8 65 ff ff       	call   c0000560 <strlen>
c0009f88:	83 c4 10             	add    esp,0x10
c0009f8b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009f90:	74 c7                	je     c0009f59 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0009f92:	81 c4 0c 04 00 00    	add    esp,0x40c
c0009f98:	5b                   	pop    ebx
c0009f99:	5e                   	pop    esi
c0009f9a:	5f                   	pop    edi
c0009f9b:	5d                   	pop    ebp
c0009f9c:	c3                   	ret    
c0009f9d:	90                   	nop

c0009f9e <File::File(char const*, Process*)>:
c0009f9e:	83 ec 0c             	sub    esp,0xc
c0009fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fa5:	83 ec 08             	sub    esp,0x8
c0009fa8:	6a 00                	push   0x0
c0009faa:	50                   	push   eax
c0009fab:	e8 ae e3 ff ff       	call   c000835e <UnixFile::UnixFile(int)>
c0009fb0:	83 c4 10             	add    esp,0x10
c0009fb3:	ba ac d4 01 c0       	mov    edx,0xc001d4ac
c0009fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fbc:	89 10                	mov    DWORD PTR [eax],edx
c0009fbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fc2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0009fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fcc:	83 c0 0d             	add    eax,0xd
c0009fcf:	83 ec 04             	sub    esp,0x4
c0009fd2:	52                   	push   edx
c0009fd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fd7:	50                   	push   eax
c0009fd8:	e8 17 fe ff ff       	call   c0009df4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fe4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0009fe7:	8d 50 bf             	lea    edx,[eax-0x41]
c0009fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fee:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0009ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ff8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0009ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a000:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a006:	25 ff 00 00 00       	and    eax,0xff
c000a00b:	8b 04 85 80 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde480]
c000a012:	85 c0                	test   eax,eax
c000a014:	74 42                	je     c000a058 <File::File(char const*, Process*)+0xba>
c000a016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a01a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a020:	25 ff 00 00 00       	and    eax,0xff
c000a025:	8b 04 85 80 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde480]
c000a02c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a032:	85 c0                	test   eax,eax
c000a034:	75 22                	jne    c000a058 <File::File(char const*, Process*)+0xba>
c000a036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a03a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a040:	25 ff 00 00 00       	and    eax,0xff
c000a045:	8b 04 85 80 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde480]
c000a04c:	83 ec 0c             	sub    esp,0xc
c000a04f:	50                   	push   eax
c000a050:	e8 f9 1f 00 00       	call   c000c04e <LogicalDisk::mount()>
c000a055:	83 c4 10             	add    esp,0x10
c000a058:	90                   	nop
c000a059:	83 c4 0c             	add    esp,0xc
c000a05c:	c3                   	ret    
c000a05d:	90                   	nop

c000a05e <File::open(FileOpenMode)>:
c000a05e:	53                   	push   ebx
c000a05f:	b8 0b 00 00 00       	mov    eax,0xb
c000a064:	83 ec 08             	sub    esp,0x8
c000a067:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a06b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a072:	80 fa 19             	cmp    dl,0x19
c000a075:	77 40                	ja     c000a0b7 <File::open(FileOpenMode)+0x59>
c000a077:	8b 14 95 80 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde480]
c000a07e:	85 d2                	test   edx,edx
c000a080:	74 35                	je     c000a0b7 <File::open(FileOpenMode)+0x59>
c000a082:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a088:	85 d2                	test   edx,edx
c000a08a:	74 2b                	je     c000a0b7 <File::open(FileOpenMode)+0x59>
c000a08c:	b8 06 00 00 00       	mov    eax,0x6
c000a091:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a095:	75 20                	jne    c000a0b7 <File::open(FileOpenMode)+0x59>
c000a097:	8b 02                	mov    eax,DWORD PTR [edx]
c000a099:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a09f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0a3:	51                   	push   ecx
c000a0a4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a0a7:	51                   	push   ecx
c000a0a8:	52                   	push   edx
c000a0a9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000a0ac:	83 c4 10             	add    esp,0x10
c000a0af:	85 c0                	test   eax,eax
c000a0b1:	75 04                	jne    c000a0b7 <File::open(FileOpenMode)+0x59>
c000a0b3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a0b7:	83 c4 08             	add    esp,0x8
c000a0ba:	5b                   	pop    ebx
c000a0bb:	c3                   	ret    

c000a0bc <File::close()>:
c000a0bc:	53                   	push   ebx
c000a0bd:	b8 0b 00 00 00       	mov    eax,0xb
c000a0c2:	83 ec 08             	sub    esp,0x8
c000a0c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a0c9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a0d0:	80 fa 19             	cmp    dl,0x19
c000a0d3:	77 41                	ja     c000a116 <File::close()+0x5a>
c000a0d5:	8b 1c 95 80 1b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde480]
c000a0dc:	85 db                	test   ebx,ebx
c000a0de:	74 36                	je     c000a116 <File::close()+0x5a>
c000a0e0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a0e7:	74 2d                	je     c000a116 <File::close()+0x5a>
c000a0e9:	b8 05 00 00 00       	mov    eax,0x5
c000a0ee:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a0f2:	74 22                	je     c000a116 <File::close()+0x5a>
c000a0f4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a0f8:	8b 04 95 80 1b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde480]
c000a0ff:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a105:	53                   	push   ebx
c000a106:	53                   	push   ebx
c000a107:	8b 10                	mov    edx,DWORD PTR [eax]
c000a109:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a10f:	50                   	push   eax
c000a110:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000a113:	83 c4 10             	add    esp,0x10
c000a116:	83 c4 08             	add    esp,0x8
c000a119:	5b                   	pop    ebx
c000a11a:	c3                   	ret    
c000a11b:	90                   	nop

c000a11c <File::seek(unsigned long long)>:
c000a11c:	56                   	push   esi
c000a11d:	53                   	push   ebx
c000a11e:	b8 0b 00 00 00       	mov    eax,0xb
c000a123:	51                   	push   ecx
c000a124:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a12c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000a133:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a137:	80 fa 19             	cmp    dl,0x19
c000a13a:	77 31                	ja     c000a16d <File::seek(unsigned long long)+0x51>
c000a13c:	8b 14 95 80 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde480]
c000a143:	85 d2                	test   edx,edx
c000a145:	74 26                	je     c000a16d <File::seek(unsigned long long)+0x51>
c000a147:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a14d:	85 d2                	test   edx,edx
c000a14f:	74 1c                	je     c000a16d <File::seek(unsigned long long)+0x51>
c000a151:	b8 05 00 00 00       	mov    eax,0x5
c000a156:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000a15a:	74 11                	je     c000a16d <File::seek(unsigned long long)+0x51>
c000a15c:	8b 02                	mov    eax,DWORD PTR [edx]
c000a15e:	53                   	push   ebx
c000a15f:	51                   	push   ecx
c000a160:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000a166:	52                   	push   edx
c000a167:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	5a                   	pop    edx
c000a16e:	5b                   	pop    ebx
c000a16f:	5e                   	pop    esi
c000a170:	c3                   	ret    
c000a171:	90                   	nop

c000a172 <File::tell(unsigned long long*)>:
c000a172:	83 ec 0c             	sub    esp,0xc
c000a175:	b8 0b 00 00 00       	mov    eax,0xb
c000a17a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a17e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a185:	80 fa 19             	cmp    dl,0x19
c000a188:	77 34                	ja     c000a1be <File::tell(unsigned long long*)+0x4c>
c000a18a:	8b 14 95 80 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde480]
c000a191:	85 d2                	test   edx,edx
c000a193:	74 29                	je     c000a1be <File::tell(unsigned long long*)+0x4c>
c000a195:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a19b:	85 d2                	test   edx,edx
c000a19d:	74 1f                	je     c000a1be <File::tell(unsigned long long*)+0x4c>
c000a19f:	b8 05 00 00 00       	mov    eax,0x5
c000a1a4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a1a8:	74 14                	je     c000a1be <File::tell(unsigned long long*)+0x4c>
c000a1aa:	50                   	push   eax
c000a1ab:	8b 02                	mov    eax,DWORD PTR [edx]
c000a1ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a1b1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a1b7:	52                   	push   edx
c000a1b8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a1bb:	83 c4 10             	add    esp,0x10
c000a1be:	83 c4 0c             	add    esp,0xc
c000a1c1:	c3                   	ret    

c000a1c2 <File::rewind()>:
c000a1c2:	83 ec 10             	sub    esp,0x10
c000a1c5:	6a 00                	push   0x0
c000a1c7:	6a 00                	push   0x0
c000a1c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1cd:	e8 4a ff ff ff       	call   c000a11c <File::seek(unsigned long long)>
c000a1d2:	83 c4 1c             	add    esp,0x1c
c000a1d5:	c3                   	ret    

c000a1d6 <File::unlink()>:
c000a1d6:	83 ec 0c             	sub    esp,0xc
c000a1d9:	b8 0b 00 00 00       	mov    eax,0xb
c000a1de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a1e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a1e9:	80 f9 19             	cmp    cl,0x19
c000a1ec:	77 2f                	ja     c000a21d <File::unlink()+0x47>
c000a1ee:	8b 0c 8d 80 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde480]
c000a1f5:	85 c9                	test   ecx,ecx
c000a1f7:	74 24                	je     c000a21d <File::unlink()+0x47>
c000a1f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a1ff:	85 c9                	test   ecx,ecx
c000a201:	74 1a                	je     c000a21d <File::unlink()+0x47>
c000a203:	b8 06 00 00 00       	mov    eax,0x6
c000a208:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a20c:	75 0f                	jne    c000a21d <File::unlink()+0x47>
c000a20e:	83 c2 0d             	add    edx,0xd
c000a211:	50                   	push   eax
c000a212:	50                   	push   eax
c000a213:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a215:	52                   	push   edx
c000a216:	51                   	push   ecx
c000a217:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a21a:	83 c4 10             	add    esp,0x10
c000a21d:	83 c4 0c             	add    esp,0xc
c000a220:	c3                   	ret    
c000a221:	90                   	nop

c000a222 <File::rename(char const*)>:
c000a222:	83 ec 0c             	sub    esp,0xc
c000a225:	b8 0b 00 00 00       	mov    eax,0xb
c000a22a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a22e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a235:	80 f9 19             	cmp    cl,0x19
c000a238:	77 32                	ja     c000a26c <File::rename(char const*)+0x4a>
c000a23a:	8b 0c 8d 80 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde480]
c000a241:	85 c9                	test   ecx,ecx
c000a243:	74 27                	je     c000a26c <File::rename(char const*)+0x4a>
c000a245:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a24b:	85 c9                	test   ecx,ecx
c000a24d:	74 1d                	je     c000a26c <File::rename(char const*)+0x4a>
c000a24f:	b8 06 00 00 00       	mov    eax,0x6
c000a254:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a258:	75 12                	jne    c000a26c <File::rename(char const*)+0x4a>
c000a25a:	83 c2 0d             	add    edx,0xd
c000a25d:	50                   	push   eax
c000a25e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a260:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a264:	52                   	push   edx
c000a265:	51                   	push   ecx
c000a266:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a269:	83 c4 10             	add    esp,0x10
c000a26c:	83 c4 0c             	add    esp,0xc
c000a26f:	c3                   	ret    

c000a270 <File::chfatattr(unsigned char, unsigned char)>:
c000a270:	57                   	push   edi
c000a271:	b8 0b 00 00 00       	mov    eax,0xb
c000a276:	56                   	push   esi
c000a277:	53                   	push   ebx
c000a278:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a27c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a280:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a287:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a28b:	80 f9 19             	cmp    cl,0x19
c000a28e:	77 37                	ja     c000a2c7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a290:	8b 0c 8d 80 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde480]
c000a297:	85 c9                	test   ecx,ecx
c000a299:	74 2c                	je     c000a2c7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a29b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a2a1:	85 c9                	test   ecx,ecx
c000a2a3:	74 22                	je     c000a2c7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a2a5:	b8 06 00 00 00       	mov    eax,0x6
c000a2aa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a2ae:	75 17                	jne    c000a2c7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a2b0:	8b 39                	mov    edi,DWORD PTR [ecx]
c000a2b2:	89 f0                	mov    eax,esi
c000a2b4:	83 c2 0d             	add    edx,0xd
c000a2b7:	0f b6 f0             	movzx  esi,al
c000a2ba:	0f b6 db             	movzx  ebx,bl
c000a2bd:	56                   	push   esi
c000a2be:	53                   	push   ebx
c000a2bf:	52                   	push   edx
c000a2c0:	51                   	push   ecx
c000a2c1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000a2c4:	83 c4 10             	add    esp,0x10
c000a2c7:	5b                   	pop    ebx
c000a2c8:	5e                   	pop    esi
c000a2c9:	5f                   	pop    edi
c000a2ca:	c3                   	ret    
c000a2cb:	90                   	nop

c000a2cc <File::exists()>:
c000a2cc:	83 ec 0c             	sub    esp,0xc
c000a2cf:	31 c0                	xor    eax,eax
c000a2d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a2d5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a2dc:	80 f9 19             	cmp    cl,0x19
c000a2df:	77 24                	ja     c000a305 <File::exists()+0x39>
c000a2e1:	8b 0c 8d 80 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde480]
c000a2e8:	85 c9                	test   ecx,ecx
c000a2ea:	74 19                	je     c000a305 <File::exists()+0x39>
c000a2ec:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a2f2:	85 c9                	test   ecx,ecx
c000a2f4:	74 0f                	je     c000a305 <File::exists()+0x39>
c000a2f6:	83 c2 0d             	add    edx,0xd
c000a2f9:	50                   	push   eax
c000a2fa:	50                   	push   eax
c000a2fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a2fd:	52                   	push   edx
c000a2fe:	51                   	push   ecx
c000a2ff:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a302:	83 c4 10             	add    esp,0x10
c000a305:	83 c4 0c             	add    esp,0xc
c000a308:	c3                   	ret    
c000a309:	90                   	nop

c000a30a <File::stat(unsigned long long*, bool*)>:
c000a30a:	56                   	push   esi
c000a30b:	53                   	push   ebx
c000a30c:	50                   	push   eax
c000a30d:	b8 0b 00 00 00       	mov    eax,0xb
c000a312:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a316:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a31a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a321:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a325:	80 f9 19             	cmp    cl,0x19
c000a328:	77 3d                	ja     c000a367 <File::stat(unsigned long long*, bool*)+0x5d>
c000a32a:	8b 0c 8d 80 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde480]
c000a331:	85 c9                	test   ecx,ecx
c000a333:	74 32                	je     c000a367 <File::stat(unsigned long long*, bool*)+0x5d>
c000a335:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a33b:	85 c9                	test   ecx,ecx
c000a33d:	74 28                	je     c000a367 <File::stat(unsigned long long*, bool*)+0x5d>
c000a33f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a341:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a345:	74 13                	je     c000a35a <File::stat(unsigned long long*, bool*)+0x50>
c000a347:	83 ec 04             	sub    esp,0x4
c000a34a:	56                   	push   esi
c000a34b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000a351:	51                   	push   ecx
c000a352:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000a355:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a358:	eb 0a                	jmp    c000a364 <File::stat(unsigned long long*, bool*)+0x5a>
c000a35a:	53                   	push   ebx
c000a35b:	83 c2 0d             	add    edx,0xd
c000a35e:	56                   	push   esi
c000a35f:	52                   	push   edx
c000a360:	51                   	push   ecx
c000a361:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000a364:	83 c4 10             	add    esp,0x10
c000a367:	5a                   	pop    edx
c000a368:	5b                   	pop    ebx
c000a369:	5e                   	pop    esi
c000a36a:	c3                   	ret    

c000a36b <Fs::setcwd(Process*, char*)>:
c000a36b:	55                   	push   ebp
c000a36c:	57                   	push   edi
c000a36d:	56                   	push   esi
c000a36e:	53                   	push   ebx
c000a36f:	81 ec 20 02 00 00    	sub    esp,0x220
c000a375:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000a37c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000a382:	57                   	push   edi
c000a383:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000a38a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000a38e:	56                   	push   esi
c000a38f:	e8 60 fa ff ff       	call   c0009df4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a394:	89 34 24             	mov    DWORD PTR [esp],esi
c000a397:	e8 c4 61 ff ff       	call   c0000560 <strlen>
c000a39c:	83 c4 10             	add    esp,0x10
c000a39f:	83 f8 02             	cmp    eax,0x2
c000a3a2:	77 15                	ja     c000a3b9 <Fs::setcwd(Process*, char*)+0x4e>
c000a3a4:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000a3a9:	83 eb 41             	sub    ebx,0x41
c000a3ac:	8b 04 9d 80 1b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde480]
c000a3b3:	85 c0                	test   eax,eax
c000a3b5:	75 1c                	jne    c000a3d3 <Fs::setcwd(Process*, char*)+0x68>
c000a3b7:	eb 2f                	jmp    c000a3e8 <Fs::setcwd(Process*, char*)+0x7d>
c000a3b9:	83 ec 0c             	sub    esp,0xc
c000a3bc:	56                   	push   esi
c000a3bd:	e8 9e 61 ff ff       	call   c0000560 <strlen>
c000a3c2:	83 c4 10             	add    esp,0x10
c000a3c5:	83 f8 03             	cmp    eax,0x3
c000a3c8:	75 57                	jne    c000a421 <Fs::setcwd(Process*, char*)+0xb6>
c000a3ca:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000a3cf:	75 50                	jne    c000a421 <Fs::setcwd(Process*, char*)+0xb6>
c000a3d1:	eb d1                	jmp    c000a3a4 <Fs::setcwd(Process*, char*)+0x39>
c000a3d3:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000a3da:	75 0c                	jne    c000a3e8 <Fs::setcwd(Process*, char*)+0x7d>
c000a3dc:	83 ec 0c             	sub    esp,0xc
c000a3df:	50                   	push   eax
c000a3e0:	e8 69 1c 00 00       	call   c000c04e <LogicalDisk::mount()>
c000a3e5:	83 c4 10             	add    esp,0x10
c000a3e8:	b8 03 00 00 00       	mov    eax,0x3
c000a3ed:	83 fb 19             	cmp    ebx,0x19
c000a3f0:	0f 87 c6 00 00 00    	ja     c000a4bc <Fs::setcwd(Process*, char*)+0x151>
c000a3f6:	8b 14 9d 80 1b 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffde480]
c000a3fd:	b8 05 00 00 00       	mov    eax,0x5
c000a402:	85 d2                	test   edx,edx
c000a404:	0f 84 b2 00 00 00    	je     c000a4bc <Fs::setcwd(Process*, char*)+0x151>
c000a40a:	b8 06 00 00 00       	mov    eax,0x6
c000a40f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a416:	0f 85 92 00 00 00    	jne    c000a4ae <Fs::setcwd(Process*, char*)+0x143>
c000a41c:	e9 9b 00 00 00       	jmp    c000a4bc <Fs::setcwd(Process*, char*)+0x151>
c000a421:	83 ec 0c             	sub    esp,0xc
c000a424:	68 14 01 00 00       	push   0x114
c000a429:	e8 37 c8 ff ff       	call   c0006c65 <malloc>
c000a42e:	83 c4 0c             	add    esp,0xc
c000a431:	89 c3                	mov    ebx,eax
c000a433:	55                   	push   ebp
c000a434:	56                   	push   esi
c000a435:	50                   	push   eax
c000a436:	e8 63 fb ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c000a43b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a440:	83 c4 0c             	add    esp,0xc
c000a443:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000a447:	50                   	push   eax
c000a448:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a44c:	50                   	push   eax
c000a44d:	53                   	push   ebx
c000a44e:	e8 b7 fe ff ff       	call   c000a30a <File::stat(unsigned long long*, bool*)>
c000a453:	83 c4 10             	add    esp,0x10
c000a456:	83 f8 02             	cmp    eax,0x2
c000a459:	74 04                	je     c000a45f <Fs::setcwd(Process*, char*)+0xf4>
c000a45b:	85 c0                	test   eax,eax
c000a45d:	74 1c                	je     c000a47b <Fs::setcwd(Process*, char*)+0x110>
c000a45f:	b8 01 00 00 00       	mov    eax,0x1
c000a464:	85 db                	test   ebx,ebx
c000a466:	74 54                	je     c000a4bc <Fs::setcwd(Process*, char*)+0x151>
c000a468:	83 ec 0c             	sub    esp,0xc
c000a46b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a46d:	53                   	push   ebx
c000a46e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a471:	83 c4 10             	add    esp,0x10
c000a474:	b8 01 00 00 00       	mov    eax,0x1
c000a479:	eb 41                	jmp    c000a4bc <Fs::setcwd(Process*, char*)+0x151>
c000a47b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000a480:	75 1c                	jne    c000a49e <Fs::setcwd(Process*, char*)+0x133>
c000a482:	b8 02 00 00 00       	mov    eax,0x2
c000a487:	85 db                	test   ebx,ebx
c000a489:	74 31                	je     c000a4bc <Fs::setcwd(Process*, char*)+0x151>
c000a48b:	83 ec 0c             	sub    esp,0xc
c000a48e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a490:	53                   	push   ebx
c000a491:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	b8 02 00 00 00       	mov    eax,0x2
c000a49c:	eb 1e                	jmp    c000a4bc <Fs::setcwd(Process*, char*)+0x151>
c000a49e:	85 db                	test   ebx,ebx
c000a4a0:	74 0c                	je     c000a4ae <Fs::setcwd(Process*, char*)+0x143>
c000a4a2:	83 ec 0c             	sub    esp,0xc
c000a4a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a4a7:	53                   	push   ebx
c000a4a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a4ab:	83 c4 10             	add    esp,0x10
c000a4ae:	50                   	push   eax
c000a4af:	50                   	push   eax
c000a4b0:	56                   	push   esi
c000a4b1:	57                   	push   edi
c000a4b2:	e8 69 61 ff ff       	call   c0000620 <strcpy>
c000a4b7:	83 c4 10             	add    esp,0x10
c000a4ba:	31 c0                	xor    eax,eax
c000a4bc:	81 c4 1c 02 00 00    	add    esp,0x21c
c000a4c2:	5b                   	pop    ebx
c000a4c3:	5e                   	pop    esi
c000a4c4:	5f                   	pop    edi
c000a4c5:	5d                   	pop    ebp
c000a4c6:	c3                   	ret    
c000a4c7:	90                   	nop

c000a4c8 <Directory::Directory(char const*, Process*)>:
c000a4c8:	83 ec 0c             	sub    esp,0xc
c000a4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4cf:	83 ec 08             	sub    esp,0x8
c000a4d2:	6a 00                	push   0x0
c000a4d4:	50                   	push   eax
c000a4d5:	e8 84 de ff ff       	call   c000835e <UnixFile::UnixFile(int)>
c000a4da:	83 c4 10             	add    esp,0x10
c000a4dd:	ba c8 d4 01 c0       	mov    edx,0xc001d4c8
c000a4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4e6:	89 10                	mov    DWORD PTR [eax],edx
c000a4e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4ec:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4f6:	83 c0 0d             	add    eax,0xd
c000a4f9:	83 ec 04             	sub    esp,0x4
c000a4fc:	52                   	push   edx
c000a4fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a501:	50                   	push   eax
c000a502:	e8 ed f8 ff ff       	call   c0009df4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a507:	83 c4 10             	add    esp,0x10
c000a50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a50e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000a511:	8d 50 bf             	lea    edx,[eax-0x41]
c000a514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a518:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000a51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a522:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000a526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a52a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a530:	25 ff 00 00 00       	and    eax,0xff
c000a535:	8b 04 85 80 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde480]
c000a53c:	85 c0                	test   eax,eax
c000a53e:	74 42                	je     c000a582 <Directory::Directory(char const*, Process*)+0xba>
c000a540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a544:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a54a:	25 ff 00 00 00       	and    eax,0xff
c000a54f:	8b 04 85 80 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde480]
c000a556:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a55c:	85 c0                	test   eax,eax
c000a55e:	75 22                	jne    c000a582 <Directory::Directory(char const*, Process*)+0xba>
c000a560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a564:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a56a:	25 ff 00 00 00       	and    eax,0xff
c000a56f:	8b 04 85 80 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde480]
c000a576:	83 ec 0c             	sub    esp,0xc
c000a579:	50                   	push   eax
c000a57a:	e8 cf 1a 00 00       	call   c000c04e <LogicalDisk::mount()>
c000a57f:	83 c4 10             	add    esp,0x10
c000a582:	90                   	nop
c000a583:	83 c4 0c             	add    esp,0xc
c000a586:	c3                   	ret    
c000a587:	90                   	nop

c000a588 <Directory::open()>:
c000a588:	53                   	push   ebx
c000a589:	b8 0b 00 00 00       	mov    eax,0xb
c000a58e:	83 ec 08             	sub    esp,0x8
c000a591:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a595:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a59c:	80 fa 19             	cmp    dl,0x19
c000a59f:	77 3d                	ja     c000a5de <Directory::open()+0x56>
c000a5a1:	8b 14 95 80 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde480]
c000a5a8:	85 d2                	test   edx,edx
c000a5aa:	74 32                	je     c000a5de <Directory::open()+0x56>
c000a5ac:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a5b2:	85 d2                	test   edx,edx
c000a5b4:	74 28                	je     c000a5de <Directory::open()+0x56>
c000a5b6:	b8 06 00 00 00       	mov    eax,0x6
c000a5bb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a5bf:	75 1d                	jne    c000a5de <Directory::open()+0x56>
c000a5c1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a5c7:	50                   	push   eax
c000a5c8:	8b 02                	mov    eax,DWORD PTR [edx]
c000a5ca:	51                   	push   ecx
c000a5cb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a5ce:	51                   	push   ecx
c000a5cf:	52                   	push   edx
c000a5d0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000a5d3:	83 c4 10             	add    esp,0x10
c000a5d6:	85 c0                	test   eax,eax
c000a5d8:	75 04                	jne    c000a5de <Directory::open()+0x56>
c000a5da:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a5de:	83 c4 08             	add    esp,0x8
c000a5e1:	5b                   	pop    ebx
c000a5e2:	c3                   	ret    
c000a5e3:	90                   	nop

c000a5e4 <Directory::close()>:
c000a5e4:	53                   	push   ebx
c000a5e5:	b8 0b 00 00 00       	mov    eax,0xb
c000a5ea:	83 ec 08             	sub    esp,0x8
c000a5ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a5f1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a5f8:	80 fa 19             	cmp    dl,0x19
c000a5fb:	77 41                	ja     c000a63e <Directory::close()+0x5a>
c000a5fd:	8b 1c 95 80 1b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde480]
c000a604:	85 db                	test   ebx,ebx
c000a606:	74 36                	je     c000a63e <Directory::close()+0x5a>
c000a608:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a60f:	74 2d                	je     c000a63e <Directory::close()+0x5a>
c000a611:	b8 05 00 00 00       	mov    eax,0x5
c000a616:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a61a:	74 22                	je     c000a63e <Directory::close()+0x5a>
c000a61c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a620:	8b 04 95 80 1b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde480]
c000a627:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a62d:	53                   	push   ebx
c000a62e:	53                   	push   ebx
c000a62f:	8b 10                	mov    edx,DWORD PTR [eax]
c000a631:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a637:	50                   	push   eax
c000a638:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000a63b:	83 c4 10             	add    esp,0x10
c000a63e:	83 c4 08             	add    esp,0x8
c000a641:	5b                   	pop    ebx
c000a642:	c3                   	ret    
c000a643:	90                   	nop

c000a644 <Directory::unlink()>:
c000a644:	83 ec 0c             	sub    esp,0xc
c000a647:	b8 0b 00 00 00       	mov    eax,0xb
c000a64c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a650:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a657:	80 f9 19             	cmp    cl,0x19
c000a65a:	77 2f                	ja     c000a68b <Directory::unlink()+0x47>
c000a65c:	8b 0c 8d 80 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde480]
c000a663:	85 c9                	test   ecx,ecx
c000a665:	74 24                	je     c000a68b <Directory::unlink()+0x47>
c000a667:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a66d:	85 c9                	test   ecx,ecx
c000a66f:	74 1a                	je     c000a68b <Directory::unlink()+0x47>
c000a671:	b8 06 00 00 00       	mov    eax,0x6
c000a676:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a67a:	75 0f                	jne    c000a68b <Directory::unlink()+0x47>
c000a67c:	83 c2 0d             	add    edx,0xd
c000a67f:	50                   	push   eax
c000a680:	50                   	push   eax
c000a681:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a683:	52                   	push   edx
c000a684:	51                   	push   ecx
c000a685:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a688:	83 c4 10             	add    esp,0x10
c000a68b:	83 c4 0c             	add    esp,0xc
c000a68e:	c3                   	ret    
c000a68f:	90                   	nop

c000a690 <Directory::rename(char const*)>:
c000a690:	83 ec 0c             	sub    esp,0xc
c000a693:	b8 0b 00 00 00       	mov    eax,0xb
c000a698:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a69c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a6a3:	80 f9 19             	cmp    cl,0x19
c000a6a6:	77 32                	ja     c000a6da <Directory::rename(char const*)+0x4a>
c000a6a8:	8b 0c 8d 80 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde480]
c000a6af:	85 c9                	test   ecx,ecx
c000a6b1:	74 27                	je     c000a6da <Directory::rename(char const*)+0x4a>
c000a6b3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a6b9:	85 c9                	test   ecx,ecx
c000a6bb:	74 1d                	je     c000a6da <Directory::rename(char const*)+0x4a>
c000a6bd:	b8 06 00 00 00       	mov    eax,0x6
c000a6c2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6c6:	75 12                	jne    c000a6da <Directory::rename(char const*)+0x4a>
c000a6c8:	83 c2 0d             	add    edx,0xd
c000a6cb:	50                   	push   eax
c000a6cc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a6ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a6d2:	52                   	push   edx
c000a6d3:	51                   	push   ecx
c000a6d4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a6d7:	83 c4 10             	add    esp,0x10
c000a6da:	83 c4 0c             	add    esp,0xc
c000a6dd:	c3                   	ret    

c000a6de <Directory::exists()>:
c000a6de:	83 ec 0c             	sub    esp,0xc
c000a6e1:	31 c0                	xor    eax,eax
c000a6e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a6e7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a6ee:	80 f9 19             	cmp    cl,0x19
c000a6f1:	77 24                	ja     c000a717 <Directory::exists()+0x39>
c000a6f3:	8b 0c 8d 80 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde480]
c000a6fa:	85 c9                	test   ecx,ecx
c000a6fc:	74 19                	je     c000a717 <Directory::exists()+0x39>
c000a6fe:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a704:	85 c9                	test   ecx,ecx
c000a706:	74 0f                	je     c000a717 <Directory::exists()+0x39>
c000a708:	83 c2 0d             	add    edx,0xd
c000a70b:	50                   	push   eax
c000a70c:	50                   	push   eax
c000a70d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a70f:	52                   	push   edx
c000a710:	51                   	push   ecx
c000a711:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	83 c4 0c             	add    esp,0xc
c000a71a:	c3                   	ret    
c000a71b:	90                   	nop

c000a71c <Directory::read(dirent*)>:
c000a71c:	83 ec 1c             	sub    esp,0x1c
c000a71f:	b8 0b 00 00 00       	mov    eax,0xb
c000a724:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a728:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a72f:	80 fa 19             	cmp    dl,0x19
c000a732:	77 30                	ja     c000a764 <Directory::read(dirent*)+0x48>
c000a734:	8b 14 95 80 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde480]
c000a73b:	85 d2                	test   edx,edx
c000a73d:	74 25                	je     c000a764 <Directory::read(dirent*)+0x48>
c000a73f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a746:	74 1c                	je     c000a764 <Directory::read(dirent*)+0x48>
c000a748:	83 ec 0c             	sub    esp,0xc
c000a74b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a74d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000a751:	52                   	push   edx
c000a752:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a756:	6a 00                	push   0x0
c000a758:	68 10 01 00 00       	push   0x110
c000a75d:	51                   	push   ecx
c000a75e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a761:	83 c4 20             	add    esp,0x20
c000a764:	83 c4 1c             	add    esp,0x1c
c000a767:	c3                   	ret    

c000a768 <Directory::create()>:
c000a768:	83 ec 0c             	sub    esp,0xc
c000a76b:	b8 0b 00 00 00       	mov    eax,0xb
c000a770:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a774:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a77b:	80 f9 19             	cmp    cl,0x19
c000a77e:	77 2f                	ja     c000a7af <Directory::create()+0x47>
c000a780:	8b 0c 8d 80 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde480]
c000a787:	85 c9                	test   ecx,ecx
c000a789:	74 24                	je     c000a7af <Directory::create()+0x47>
c000a78b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a791:	85 c9                	test   ecx,ecx
c000a793:	74 1a                	je     c000a7af <Directory::create()+0x47>
c000a795:	b8 06 00 00 00       	mov    eax,0x6
c000a79a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a79e:	75 0f                	jne    c000a7af <Directory::create()+0x47>
c000a7a0:	83 c2 0d             	add    edx,0xd
c000a7a3:	50                   	push   eax
c000a7a4:	50                   	push   eax
c000a7a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a7a7:	52                   	push   edx
c000a7a8:	51                   	push   ecx
c000a7a9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000a7ac:	83 c4 10             	add    esp,0x10
c000a7af:	83 c4 0c             	add    esp,0xc
c000a7b2:	c3                   	ret    
c000a7b3:	90                   	nop

c000a7b4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000a7b4:	b8 0a 00 00 00       	mov    eax,0xa
c000a7b9:	c3                   	ret    
c000a7ba:	66 90                	xchg   ax,ax

c000a7bc <Bus::Bus(char const*)>:
c000a7bc:	83 ec 0c             	sub    esp,0xc
c000a7bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c3:	83 ec 08             	sub    esp,0x8
c000a7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ca:	50                   	push   eax
c000a7cb:	e8 30 08 00 00       	call   c000b000 <Device::Device(char const*)>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	ba e4 d4 01 c0       	mov    edx,0xc001d4e4
c000a7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7dc:	89 10                	mov    DWORD PTR [eax],edx
c000a7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7e2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000a7ec:	90                   	nop
c000a7ed:	83 c4 0c             	add    esp,0xc
c000a7f0:	c3                   	ret    
c000a7f1:	90                   	nop
c000a7f2:	66 90                	xchg   ax,ax

c000a7f4 <Bus::~Bus()>:
c000a7f4:	83 ec 0c             	sub    esp,0xc
c000a7f7:	ba e4 d4 01 c0       	mov    edx,0xc001d4e4
c000a7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a800:	89 10                	mov    DWORD PTR [eax],edx
c000a802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a806:	83 ec 0c             	sub    esp,0xc
c000a809:	50                   	push   eax
c000a80a:	e8 5b 05 00 00       	call   c000ad6a <Device::~Device()>
c000a80f:	83 c4 10             	add    esp,0x10
c000a812:	90                   	nop
c000a813:	83 c4 0c             	add    esp,0xc
c000a816:	c3                   	ret    
c000a817:	90                   	nop

c000a818 <Bus::~Bus()>:
c000a818:	83 ec 0c             	sub    esp,0xc
c000a81b:	83 ec 0c             	sub    esp,0xc
c000a81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a822:	e8 cd ff ff ff       	call   c000a7f4 <Bus::~Bus()>
c000a827:	83 c4 10             	add    esp,0x10
c000a82a:	83 ec 08             	sub    esp,0x8
c000a82d:	68 58 01 00 00       	push   0x158
c000a832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a836:	e8 f7 f0 ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	83 c4 0c             	add    esp,0xc
c000a841:	c3                   	ret    

c000a842 <beepThread(void*)>:
c000a842:	83 ec 0c             	sub    esp,0xc
c000a845:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000a84a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a84e:	48                   	dec    eax
c000a84f:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c000a854:	75 01                	jne    c000a857 <beepThread(void*)+0x15>
c000a856:	fb                   	sti    
c000a857:	83 ec 0c             	sub    esp,0xc
c000a85a:	6b c2 0a             	imul   eax,edx,0xa
c000a85d:	50                   	push   eax
c000a85e:	e8 1d 85 00 00       	call   c0012d80 <milliTenthSleep(unsigned int)>
c000a863:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000a86a:	e8 45 a1 00 00       	call   c00149b4 <Hal::makeBeep(int)>
c000a86f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000a877:	83 c4 1c             	add    esp,0x1c
c000a87a:	e9 fd 83 00 00       	jmp    c0012c7c <blockTask(TaskState)>

c000a87f <Krnl::beep(int, int, bool)>:
c000a87f:	56                   	push   esi
c000a880:	53                   	push   ebx
c000a881:	83 ec 10             	sub    esp,0x10
c000a884:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a888:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a88c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a890:	e8 1f a1 00 00       	call   c00149b4 <Hal::makeBeep(int)>
c000a895:	83 c4 10             	add    esp,0x10
c000a898:	89 f0                	mov    eax,esi
c000a89a:	84 c0                	test   al,al
c000a89c:	74 1e                	je     c000a8bc <Krnl::beep(int, int, bool)+0x3d>
c000a89e:	83 ec 0c             	sub    esp,0xc
c000a8a1:	6b db 0a             	imul   ebx,ebx,0xa
c000a8a4:	53                   	push   ebx
c000a8a5:	e8 d6 84 00 00       	call   c0012d80 <milliTenthSleep(unsigned int)>
c000a8aa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000a8b2:	83 c4 14             	add    esp,0x14
c000a8b5:	5b                   	pop    ebx
c000a8b6:	5e                   	pop    esi
c000a8b7:	e9 f8 a0 00 00       	jmp    c00149b4 <Hal::makeBeep(int)>
c000a8bc:	68 e6 00 00 00       	push   0xe6
c000a8c1:	53                   	push   ebx
c000a8c2:	68 42 a8 00 c0       	push   0xc000a842
c000a8c7:	ff 35 10 2b 02 c0    	push   DWORD PTR ds:0xc0022b10
c000a8cd:	e8 8e 7f 00 00       	call   c0012860 <Process::createThread(void (*)(void*), void*, int)>
c000a8d2:	83 c4 14             	add    esp,0x14
c000a8d5:	5b                   	pop    ebx
c000a8d6:	5e                   	pop    esi
c000a8d7:	c3                   	ret    

c000a8d8 <User::loadClockSettings(int)>:
c000a8d8:	53                   	push   ebx
c000a8d9:	83 ec 14             	sub    esp,0x14
c000a8dc:	68 14 01 00 00       	push   0x114
c000a8e1:	e8 7f c3 ff ff       	call   c0006c65 <malloc>
c000a8e6:	83 c4 0c             	add    esp,0xc
c000a8e9:	89 c3                	mov    ebx,eax
c000a8eb:	ff 35 10 2b 02 c0    	push   DWORD PTR ds:0xc0022b10
c000a8f1:	68 08 d5 01 c0       	push   0xc001d508
c000a8f6:	50                   	push   eax
c000a8f7:	e8 a2 f6 ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c000a8fc:	58                   	pop    eax
c000a8fd:	5a                   	pop    edx
c000a8fe:	6a 01                	push   0x1
c000a900:	53                   	push   ebx
c000a901:	e8 58 f7 ff ff       	call   c000a05e <File::open(FileOpenMode)>
c000a906:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a909:	e8 ae f7 ff ff       	call   c000a0bc <File::close()>
c000a90e:	83 c4 10             	add    esp,0x10
c000a911:	85 db                	test   ebx,ebx
c000a913:	74 0f                	je     c000a924 <User::loadClockSettings(int)+0x4c>
c000a915:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a917:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a91b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000a91e:	83 c4 08             	add    esp,0x8
c000a921:	5b                   	pop    ebx
c000a922:	ff e0                	jmp    eax
c000a924:	83 c4 08             	add    esp,0x8
c000a927:	5b                   	pop    ebx
c000a928:	c3                   	ret    
c000a929:	90                   	nop

c000a92a <Clock::Clock(char const*)>:
c000a92a:	83 ec 0c             	sub    esp,0xc
c000a92d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a931:	83 ec 08             	sub    esp,0x8
c000a934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a938:	50                   	push   eax
c000a939:	e8 c2 06 00 00       	call   c000b000 <Device::Device(char const*)>
c000a93e:	83 c4 10             	add    esp,0x10
c000a941:	ba 30 d5 01 c0       	mov    edx,0xc001d530
c000a946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a94a:	89 10                	mov    DWORD PTR [eax],edx
c000a94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a950:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000a95a:	90                   	nop
c000a95b:	83 c4 0c             	add    esp,0xc
c000a95e:	c3                   	ret    
c000a95f:	90                   	nop

c000a960 <Clock::~Clock()>:
c000a960:	83 ec 0c             	sub    esp,0xc
c000a963:	ba 30 d5 01 c0       	mov    edx,0xc001d530
c000a968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a96c:	89 10                	mov    DWORD PTR [eax],edx
c000a96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a972:	83 ec 0c             	sub    esp,0xc
c000a975:	50                   	push   eax
c000a976:	e8 ef 03 00 00       	call   c000ad6a <Device::~Device()>
c000a97b:	83 c4 10             	add    esp,0x10
c000a97e:	90                   	nop
c000a97f:	83 c4 0c             	add    esp,0xc
c000a982:	c3                   	ret    
c000a983:	90                   	nop

c000a984 <Clock::~Clock()>:
c000a984:	83 ec 0c             	sub    esp,0xc
c000a987:	83 ec 0c             	sub    esp,0xc
c000a98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a98e:	e8 cd ff ff ff       	call   c000a960 <Clock::~Clock()>
c000a993:	83 c4 10             	add    esp,0x10
c000a996:	83 ec 08             	sub    esp,0x8
c000a999:	68 58 01 00 00       	push   0x158
c000a99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9a2:	e8 8b ef ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c000a9a7:	83 c4 10             	add    esp,0x10
c000a9aa:	83 c4 0c             	add    esp,0xc
c000a9ad:	c3                   	ret    

c000a9ae <Clock::timeInSecondsLocal()>:
c000a9ae:	53                   	push   ebx
c000a9af:	83 ec 14             	sub    esp,0x14
c000a9b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a9b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9b8:	50                   	push   eax
c000a9b9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000a9bc:	0f b6 0d fc f6 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f6fc
c000a9c3:	03 0d 00 f7 01 c0    	add    ecx,DWORD PTR ds:0xc001f700
c000a9c9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a9cf:	89 cb                	mov    ebx,ecx
c000a9d1:	c1 fb 1f             	sar    ebx,0x1f
c000a9d4:	01 c8                	add    eax,ecx
c000a9d6:	11 da                	adc    edx,ebx
c000a9d8:	83 c4 10             	add    esp,0x10
c000a9db:	31 c9                	xor    ecx,ecx
c000a9dd:	80 3d fd f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f6fd,0x0
c000a9e4:	74 05                	je     c000a9eb <Clock::timeInSecondsLocal()+0x3d>
c000a9e6:	b9 08 07 00 00       	mov    ecx,0x708
c000a9eb:	31 db                	xor    ebx,ebx
c000a9ed:	01 c8                	add    eax,ecx
c000a9ef:	11 da                	adc    edx,ebx
c000a9f1:	83 c4 08             	add    esp,0x8
c000a9f4:	5b                   	pop    ebx
c000a9f5:	c3                   	ret    

c000a9f6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000a9f6:	57                   	push   edi
c000a9f7:	56                   	push   esi
c000a9f8:	53                   	push   ebx
c000a9f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a9fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aa01:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aa03:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000aa07:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000aa0a:	0f b6 05 fc f6 01 c0 	movzx  eax,BYTE PTR ds:0xc001f6fc
c000aa11:	03 05 00 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f700
c000aa17:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000aa1d:	99                   	cdq    
c000aa1e:	29 c6                	sub    esi,eax
c000aa20:	19 d7                	sbb    edi,edx
c000aa22:	89 f0                	mov    eax,esi
c000aa24:	89 fa                	mov    edx,edi
c000aa26:	31 f6                	xor    esi,esi
c000aa28:	80 3d fd f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f6fd,0x0
c000aa2f:	74 05                	je     c000aa36 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000aa31:	be 08 07 00 00       	mov    esi,0x708
c000aa36:	31 ff                	xor    edi,edi
c000aa38:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000aa3c:	29 f0                	sub    eax,esi
c000aa3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aa42:	19 fa                	sbb    edx,edi
c000aa44:	89 d8                	mov    eax,ebx
c000aa46:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000aa4a:	5b                   	pop    ebx
c000aa4b:	5e                   	pop    esi
c000aa4c:	5f                   	pop    edi
c000aa4d:	ff e0                	jmp    eax

c000aa4f <datetimeToSeconds(datetime_t)>:
c000aa4f:	55                   	push   ebp
c000aa50:	57                   	push   edi
c000aa51:	56                   	push   esi
c000aa52:	53                   	push   ebx
c000aa53:	83 ec 14             	sub    esp,0x14
c000aa56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000aa5a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000aa5e:	89 d3                	mov    ebx,edx
c000aa60:	0f b6 c6             	movzx  eax,dh
c000aa63:	c1 eb 10             	shr    ebx,0x10
c000aa66:	48                   	dec    eax
c000aa67:	66 81 eb 6c 07       	sub    bx,0x76c
c000aa6c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000aa70:	0f b6 f5             	movzx  esi,ch
c000aa73:	89 cf                	mov    edi,ecx
c000aa75:	6b f6 3c             	imul   esi,esi,0x3c
c000aa78:	c1 ef 10             	shr    edi,0x10
c000aa7b:	0f b6 c9             	movzx  ecx,cl
c000aa7e:	89 f8                	mov    eax,edi
c000aa80:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000aa86:	0f b6 f8             	movzx  edi,al
c000aa89:	0f b6 d2             	movzx  edx,dl
c000aa8c:	01 fe                	add    esi,edi
c000aa8e:	01 f1                	add    ecx,esi
c000aa90:	0f b7 f3             	movzx  esi,bx
c000aa93:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aa97:	c1 f9 1f             	sar    ecx,0x1f
c000aa9a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000aa9f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aaa3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000aaa8:	8b 0c 8d 80 d5 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2a80]
c000aaaf:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000aab3:	76 29                	jbe    c000aade <datetimeToSeconds(datetime_t)+0x8f>
c000aab5:	f6 c3 03             	test   bl,0x3
c000aab8:	75 24                	jne    c000aade <datetimeToSeconds(datetime_t)+0x8f>
c000aaba:	31 d2                	xor    edx,edx
c000aabc:	bf 64 00 00 00       	mov    edi,0x64
c000aac1:	89 d8                	mov    eax,ebx
c000aac3:	66 f7 f7             	div    di
c000aac6:	66 85 d2             	test   dx,dx
c000aac9:	75 12                	jne    c000aadd <datetimeToSeconds(datetime_t)+0x8e>
c000aacb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000aad1:	bf 90 01 00 00       	mov    edi,0x190
c000aad6:	99                   	cdq    
c000aad7:	f7 ff                	idiv   edi
c000aad9:	85 d2                	test   edx,edx
c000aadb:	75 01                	jne    c000aade <datetimeToSeconds(datetime_t)+0x8f>
c000aadd:	41                   	inc    ecx
c000aade:	66 83 fb 46          	cmp    bx,0x46
c000aae2:	76 45                	jbe    c000ab29 <datetimeToSeconds(datetime_t)+0xda>
c000aae4:	bb 46 00 00 00       	mov    ebx,0x46
c000aae9:	bf 64 00 00 00       	mov    edi,0x64
c000aaee:	bd 90 01 00 00       	mov    ebp,0x190
c000aaf3:	b8 6d 01 00 00       	mov    eax,0x16d
c000aaf8:	f6 c3 03             	test   bl,0x3
c000aafb:	75 23                	jne    c000ab20 <datetimeToSeconds(datetime_t)+0xd1>
c000aafd:	89 d8                	mov    eax,ebx
c000aaff:	99                   	cdq    
c000ab00:	f7 ff                	idiv   edi
c000ab02:	b8 6e 01 00 00       	mov    eax,0x16e
c000ab07:	85 d2                	test   edx,edx
c000ab09:	75 15                	jne    c000ab20 <datetimeToSeconds(datetime_t)+0xd1>
c000ab0b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ab11:	99                   	cdq    
c000ab12:	f7 fd                	idiv   ebp
c000ab14:	31 c0                	xor    eax,eax
c000ab16:	85 d2                	test   edx,edx
c000ab18:	0f 94 c0             	sete   al
c000ab1b:	05 6d 01 00 00       	add    eax,0x16d
c000ab20:	01 c1                	add    ecx,eax
c000ab22:	43                   	inc    ebx
c000ab23:	39 f3                	cmp    ebx,esi
c000ab25:	7c cc                	jl     c000aaf3 <datetimeToSeconds(datetime_t)+0xa4>
c000ab27:	eb 3b                	jmp    c000ab64 <datetimeToSeconds(datetime_t)+0x115>
c000ab29:	74 39                	je     c000ab64 <datetimeToSeconds(datetime_t)+0x115>
c000ab2b:	b8 45 00 00 00       	mov    eax,0x45
c000ab30:	89 c2                	mov    edx,eax
c000ab32:	83 e2 03             	and    edx,0x3
c000ab35:	39 f0                	cmp    eax,esi
c000ab37:	7e 13                	jle    c000ab4c <datetimeToSeconds(datetime_t)+0xfd>
c000ab39:	85 d2                	test   edx,edx
c000ab3b:	0f 94 c2             	sete   dl
c000ab3e:	48                   	dec    eax
c000ab3f:	0f b6 d2             	movzx  edx,dl
c000ab42:	81 c2 6d 01 00 00    	add    edx,0x16d
c000ab48:	29 d1                	sub    ecx,edx
c000ab4a:	eb e4                	jmp    c000ab30 <datetimeToSeconds(datetime_t)+0xe1>
c000ab4c:	b8 6d 01 00 00       	mov    eax,0x16d
c000ab51:	85 d2                	test   edx,edx
c000ab53:	75 0d                	jne    c000ab62 <datetimeToSeconds(datetime_t)+0x113>
c000ab55:	31 c0                	xor    eax,eax
c000ab57:	66 85 db             	test   bx,bx
c000ab5a:	0f 95 c0             	setne  al
c000ab5d:	05 6d 01 00 00       	add    eax,0x16d
c000ab62:	29 c1                	sub    ecx,eax
c000ab64:	b8 80 51 01 00       	mov    eax,0x15180
c000ab69:	f7 e9                	imul   ecx
c000ab6b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ab6f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ab73:	83 c4 14             	add    esp,0x14
c000ab76:	5b                   	pop    ebx
c000ab77:	5e                   	pop    esi
c000ab78:	5f                   	pop    edi
c000ab79:	5d                   	pop    ebp
c000ab7a:	c3                   	ret    
c000ab7b:	90                   	nop

c000ab7c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000ab7c:	57                   	push   edi
c000ab7d:	56                   	push   esi
c000ab7e:	53                   	push   ebx
c000ab7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab83:	8b 06                	mov    eax,DWORD PTR [esi]
c000ab85:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000ab88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab90:	e8 ba fe ff ff       	call   c000aa4f <datetimeToSeconds(datetime_t)>
c000ab95:	59                   	pop    ecx
c000ab96:	0f b6 0d fc f6 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f6fc
c000ab9d:	5b                   	pop    ebx
c000ab9e:	03 0d 00 f7 01 c0    	add    ecx,DWORD PTR ds:0xc001f700
c000aba4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000abaa:	89 cb                	mov    ebx,ecx
c000abac:	c1 fb 1f             	sar    ebx,0x1f
c000abaf:	29 c8                	sub    eax,ecx
c000abb1:	19 da                	sbb    edx,ebx
c000abb3:	31 c9                	xor    ecx,ecx
c000abb5:	80 3d fd f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f6fd,0x0
c000abbc:	74 05                	je     c000abc3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000abbe:	b9 08 07 00 00       	mov    ecx,0x708
c000abc3:	31 db                	xor    ebx,ebx
c000abc5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000abc9:	29 c8                	sub    eax,ecx
c000abcb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000abcf:	19 da                	sbb    edx,ebx
c000abd1:	89 f8                	mov    eax,edi
c000abd3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000abd7:	5b                   	pop    ebx
c000abd8:	5e                   	pop    esi
c000abd9:	5f                   	pop    edi
c000abda:	ff e0                	jmp    eax

c000abdc <secondsToDatetime(unsigned long long)>:
c000abdc:	55                   	push   ebp
c000abdd:	57                   	push   edi
c000abde:	56                   	push   esi
c000abdf:	53                   	push   ebx
c000abe0:	83 ec 1c             	sub    esp,0x1c
c000abe3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000abe7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000abeb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000abef:	6a 00                	push   0x0
c000abf1:	68 80 51 01 00       	push   0x15180
c000abf6:	55                   	push   ebp
c000abf7:	57                   	push   edi
c000abf8:	e8 e3 0b 01 00       	call   c001b7e0 <__udivdi3>
c000abfd:	83 c4 10             	add    esp,0x10
c000ac00:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000ac06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac0a:	6a 00                	push   0x0
c000ac0c:	68 80 51 01 00       	push   0x15180
c000ac11:	55                   	push   ebp
c000ac12:	57                   	push   edi
c000ac13:	bf 10 0e 00 00       	mov    edi,0xe10
c000ac18:	e8 c3 0c 01 00       	call   c001b8e0 <__umoddi3>
c000ac1d:	83 c4 10             	add    esp,0x10
c000ac20:	99                   	cdq    
c000ac21:	f7 ff                	idiv   edi
c000ac23:	bf 3c 00 00 00       	mov    edi,0x3c
c000ac28:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000ac2b:	89 d0                	mov    eax,edx
c000ac2d:	99                   	cdq    
c000ac2e:	f7 ff                	idiv   edi
c000ac30:	85 db                	test   ebx,ebx
c000ac32:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000ac35:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000ac38:	79 11                	jns    c000ac4b <secondsToDatetime(unsigned long long)+0x6f>
c000ac3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac3e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000ac44:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ac49:	eb 07                	jmp    c000ac52 <secondsToDatetime(unsigned long long)+0x76>
c000ac4b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ac50:	89 d8                	mov    eax,ebx
c000ac52:	bf b4 05 00 00       	mov    edi,0x5b4
c000ac57:	99                   	cdq    
c000ac58:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000ac5d:	f7 f9                	idiv   ecx
c000ac5f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000ac64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac68:	31 d2                	xor    edx,edx
c000ac6a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000ac72:	01 c3                	add    ebx,eax
c000ac74:	89 d8                	mov    eax,ebx
c000ac76:	f7 f1                	div    ecx
c000ac78:	31 d2                	xor    edx,edx
c000ac7a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000ac7d:	89 d8                	mov    eax,ebx
c000ac7f:	f7 f7                	div    edi
c000ac81:	31 d2                	xor    edx,edx
c000ac83:	29 c1                	sub    ecx,eax
c000ac85:	89 d8                	mov    eax,ebx
c000ac87:	f7 f5                	div    ebp
c000ac89:	bd 6d 01 00 00       	mov    ebp,0x16d
c000ac8e:	29 c1                	sub    ecx,eax
c000ac90:	31 d2                	xor    edx,edx
c000ac92:	89 c8                	mov    eax,ecx
c000ac94:	f7 f5                	div    ebp
c000ac96:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000ac9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ac9f:	31 d2                	xor    edx,edx
c000aca1:	89 c8                	mov    eax,ecx
c000aca3:	f7 f5                	div    ebp
c000aca5:	31 d2                	xor    edx,edx
c000aca7:	01 c3                	add    ebx,eax
c000aca9:	89 c8                	mov    eax,ecx
c000acab:	f7 f7                	div    edi
c000acad:	bf 99 00 00 00       	mov    edi,0x99
c000acb2:	29 c3                	sub    ebx,eax
c000acb4:	31 d2                	xor    edx,edx
c000acb6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000acbe:	29 c3                	sub    ebx,eax
c000acc0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000acc3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000acc6:	bb 05 00 00 00       	mov    ebx,0x5
c000accb:	83 c1 02             	add    ecx,0x2
c000acce:	89 c8                	mov    eax,ecx
c000acd0:	f7 f7                	div    edi
c000acd2:	31 d2                	xor    edx,edx
c000acd4:	89 c7                	mov    edi,eax
c000acd6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000acdc:	83 c0 02             	add    eax,0x2
c000acdf:	f7 f3                	div    ebx
c000ace1:	89 eb                	mov    ebx,ebp
c000ace3:	29 c3                	sub    ebx,eax
c000ace5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000aceb:	88 1e                	mov    BYTE PTR [esi],bl
c000aced:	19 c0                	sbb    eax,eax
c000acef:	31 d2                	xor    edx,edx
c000acf1:	83 e0 0c             	and    eax,0xc
c000acf4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000acf8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000ad00:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ad04:	83 f9 01             	cmp    ecx,0x1
c000ad07:	0f 96 c2             	setbe  dl
c000ad0a:	41                   	inc    ecx
c000ad0b:	01 d0                	add    eax,edx
c000ad0d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000ad10:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000ad14:	83 c4 1c             	add    esp,0x1c
c000ad17:	89 f0                	mov    eax,esi
c000ad19:	5b                   	pop    ebx
c000ad1a:	5e                   	pop    esi
c000ad1b:	5f                   	pop    edi
c000ad1c:	5d                   	pop    ebp
c000ad1d:	c2 04 00             	ret    0x4

c000ad20 <Clock::timeInDatetimeLocal()>:
c000ad20:	53                   	push   ebx
c000ad21:	83 ec 14             	sub    esp,0x14
c000ad24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ad28:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ad2c:	e8 7d fc ff ff       	call   c000a9ae <Clock::timeInSecondsLocal()>
c000ad31:	83 c4 0c             	add    esp,0xc
c000ad34:	52                   	push   edx
c000ad35:	50                   	push   eax
c000ad36:	53                   	push   ebx
c000ad37:	e8 a0 fe ff ff       	call   c000abdc <secondsToDatetime(unsigned long long)>
c000ad3c:	89 d8                	mov    eax,ebx
c000ad3e:	83 c4 14             	add    esp,0x14
c000ad41:	5b                   	pop    ebx
c000ad42:	c2 04 00             	ret    0x4
c000ad45:	90                   	nop

c000ad46 <Device::hibernate()>:
c000ad46:	c3                   	ret    
c000ad47:	90                   	nop

c000ad48 <Device::wake()>:
c000ad48:	c3                   	ret    
c000ad49:	90                   	nop

c000ad4a <Device::detect()>:
c000ad4a:	c3                   	ret    
c000ad4b:	90                   	nop

c000ad4c <Device::disableLegacy()>:
c000ad4c:	c3                   	ret    
c000ad4d:	90                   	nop

c000ad4e <Device::powerSaving(PowerSavingLevel)>:
c000ad4e:	c3                   	ret    
c000ad4f:	90                   	nop

c000ad50 <DriverlessDevice::close(int, int, void*)>:
c000ad50:	31 c0                	xor    eax,eax
c000ad52:	c3                   	ret    
c000ad53:	90                   	nop

c000ad54 <DriverlessDevice::detect()>:
c000ad54:	c3                   	ret    
c000ad55:	90                   	nop

c000ad56 <DriverlessDevice::open(int, int, void*)>:
c000ad56:	83 ec 18             	sub    esp,0x18
c000ad59:	68 b0 d5 01 c0       	push   0xc001d5b0
c000ad5e:	e8 3e 48 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000ad63:	83 c8 ff             	or     eax,0xffffffff
c000ad66:	83 c4 1c             	add    esp,0x1c
c000ad69:	c3                   	ret    

c000ad6a <Device::~Device()>:
c000ad6a:	ba 10 d6 01 c0       	mov    edx,0xc001d610
c000ad6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad73:	89 10                	mov    DWORD PTR [eax],edx
c000ad75:	90                   	nop
c000ad76:	c3                   	ret    
c000ad77:	90                   	nop

c000ad78 <Device::~Device()>:
c000ad78:	83 ec 0c             	sub    esp,0xc
c000ad7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad7f:	e8 e6 ff ff ff       	call   c000ad6a <Device::~Device()>
c000ad84:	83 c4 04             	add    esp,0x4
c000ad87:	83 ec 08             	sub    esp,0x8
c000ad8a:	68 58 01 00 00       	push   0x158
c000ad8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad93:	e8 9a eb ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	83 c4 0c             	add    esp,0xc
c000ad9e:	c3                   	ret    
c000ad9f:	90                   	nop

c000ada0 <Device::findAndLoadDriver()>:
c000ada0:	c7 44 24 04 ce d5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d5ce
c000ada8:	e9 7b ec ff ff       	jmp    c0009a28 <Dbg::kprintf(char const*, ...)>
c000adad:	90                   	nop

c000adae <Device::preOpenPCI(PCIDeviceInfo)>:
c000adae:	57                   	push   edi
c000adaf:	b9 09 00 00 00       	mov    ecx,0x9
c000adb4:	56                   	push   esi
c000adb5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000adb9:	8d 74 24 10          	lea    esi,[esp+0x10]
c000adbd:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000adc7:	81 c7 18 01 00 00    	add    edi,0x118
c000adcd:	fc                   	cld    
c000adce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000add0:	5e                   	pop    esi
c000add1:	5f                   	pop    edi
c000add2:	c3                   	ret    
c000add3:	90                   	nop

c000add4 <Device::preOpenACPI(void*, char*, char*)>:
c000add4:	57                   	push   edi
c000add5:	b9 1e 00 00 00       	mov    ecx,0x1e
c000adda:	56                   	push   esi
c000addb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000addf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ade3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000aded:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000adf3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000adf9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adfd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000adff:	b9 0e 00 00 00       	mov    ecx,0xe
c000ae04:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000ae0a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ae10:	5e                   	pop    esi
c000ae11:	5f                   	pop    edi
c000ae12:	c3                   	ret    
c000ae13:	90                   	nop

c000ae14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ae14:	53                   	push   ebx
c000ae15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae25:	0f b6 c0             	movzx  eax,al
c000ae28:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ae2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae30:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ae34:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ae38:	5b                   	pop    ebx
c000ae39:	e9 a6 05 00 00       	jmp    c000b3e4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ae3e <Device::getParent()>:
c000ae3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae42:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ae48:	c3                   	ret    
c000ae49:	90                   	nop

c000ae4a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ae4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ae4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae52:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ae57:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ae5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ae5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae63:	e9 e8 06 00 00       	jmp    c000b550 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ae68 <Device::addChild(Device*)>:
c000ae68:	53                   	push   ebx
c000ae69:	83 ec 08             	sub    esp,0x8
c000ae6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae74:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ae7a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ae80:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae82:	85 d2                	test   edx,edx
c000ae84:	74 04                	je     c000ae8a <Device::addChild(Device*)+0x22>
c000ae86:	89 d3                	mov    ebx,edx
c000ae88:	eb f6                	jmp    c000ae80 <Device::addChild(Device*)+0x18>
c000ae8a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ae8d:	83 ec 0c             	sub    esp,0xc
c000ae90:	6a 08                	push   0x8
c000ae92:	e8 ce bd ff ff       	call   c0006c65 <malloc>
c000ae97:	89 03                	mov    DWORD PTR [ebx],eax
c000ae99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ae9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000aea6:	83 c4 18             	add    esp,0x18
c000aea9:	5b                   	pop    ebx
c000aeaa:	c3                   	ret    
c000aeab:	90                   	nop

c000aeac <Device::removeAllChildren()>:
c000aeac:	56                   	push   esi
c000aead:	53                   	push   ebx
c000aeae:	52                   	push   edx
c000aeaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aeb3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000aeb9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aebc:	74 17                	je     c000aed5 <Device::removeAllChildren()+0x29>
c000aebe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aec1:	85 c0                	test   eax,eax
c000aec3:	74 0c                	je     c000aed1 <Device::removeAllChildren()+0x25>
c000aec5:	83 ec 0c             	sub    esp,0xc
c000aec8:	8b 10                	mov    edx,DWORD PTR [eax]
c000aeca:	50                   	push   eax
c000aecb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000aece:	83 c4 10             	add    esp,0x10
c000aed1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000aed3:	eb e4                	jmp    c000aeb9 <Device::removeAllChildren()+0xd>
c000aed5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000aedb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000aee1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000aee7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000aeee:	58                   	pop    eax
c000aeef:	5b                   	pop    ebx
c000aef0:	5e                   	pop    esi
c000aef1:	c3                   	ret    

c000aef2 <Device::hibernateAll()>:
c000aef2:	53                   	push   ebx
c000aef3:	83 ec 14             	sub    esp,0x14
c000aef6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000aefa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aefc:	53                   	push   ebx
c000aefd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000af00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000af06:	83 c4 10             	add    esp,0x10
c000af09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000af0c:	74 0f                	je     c000af1d <Device::hibernateAll()+0x2b>
c000af0e:	83 ec 0c             	sub    esp,0xc
c000af11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000af14:	e8 d9 ff ff ff       	call   c000aef2 <Device::hibernateAll()>
c000af19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000af1b:	eb e9                	jmp    c000af06 <Device::hibernateAll()+0x14>
c000af1d:	83 c4 08             	add    esp,0x8
c000af20:	5b                   	pop    ebx
c000af21:	c3                   	ret    

c000af22 <Device::wakeAll()>:
c000af22:	53                   	push   ebx
c000af23:	83 ec 14             	sub    esp,0x14
c000af26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000af2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af2c:	53                   	push   ebx
c000af2d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000af30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000af36:	83 c4 10             	add    esp,0x10
c000af39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000af3c:	74 0f                	je     c000af4d <Device::wakeAll()+0x2b>
c000af3e:	83 ec 0c             	sub    esp,0xc
c000af41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000af44:	e8 d9 ff ff ff       	call   c000af22 <Device::wakeAll()>
c000af49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000af4b:	eb e9                	jmp    c000af36 <Device::wakeAll()+0x14>
c000af4d:	83 c4 08             	add    esp,0x8
c000af50:	5b                   	pop    ebx
c000af51:	c3                   	ret    

c000af52 <Device::detectAll()>:
c000af52:	53                   	push   ebx
c000af53:	83 ec 14             	sub    esp,0x14
c000af56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000af5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af5c:	53                   	push   ebx
c000af5d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000af60:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000af66:	83 c4 10             	add    esp,0x10
c000af69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000af6c:	74 0f                	je     c000af7d <Device::detectAll()+0x2b>
c000af6e:	83 ec 0c             	sub    esp,0xc
c000af71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000af74:	e8 d9 ff ff ff       	call   c000af52 <Device::detectAll()>
c000af79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000af7b:	eb e9                	jmp    c000af66 <Device::detectAll()+0x14>
c000af7d:	83 c4 08             	add    esp,0x8
c000af80:	5b                   	pop    ebx
c000af81:	c3                   	ret    

c000af82 <Device::disableLegacyAll()>:
c000af82:	c3                   	ret    
c000af83:	90                   	nop

c000af84 <Device::loadDriversForAll()>:
c000af84:	c3                   	ret    
c000af85:	90                   	nop

c000af86 <Device::closeAll()>:
c000af86:	53                   	push   ebx
c000af87:	83 ec 08             	sub    esp,0x8
c000af8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af90:	6a 00                	push   0x0
c000af92:	6a 00                	push   0x0
c000af94:	6a 00                	push   0x0
c000af96:	53                   	push   ebx
c000af97:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000af9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000afa0:	83 c4 10             	add    esp,0x10
c000afa3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000afa6:	74 0f                	je     c000afb7 <Device::closeAll()+0x31>
c000afa8:	83 ec 0c             	sub    esp,0xc
c000afab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000afae:	e8 d3 ff ff ff       	call   c000af86 <Device::closeAll()>
c000afb3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000afb5:	eb e9                	jmp    c000afa0 <Device::closeAll()+0x1a>
c000afb7:	83 c4 08             	add    esp,0x8
c000afba:	5b                   	pop    ebx
c000afbb:	c3                   	ret    

c000afbc <Device::powerSavingAll(PowerSavingLevel)>:
c000afbc:	56                   	push   esi
c000afbd:	53                   	push   ebx
c000afbe:	83 ec 0c             	sub    esp,0xc
c000afc1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000afc5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000afc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afcb:	56                   	push   esi
c000afcc:	53                   	push   ebx
c000afcd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000afd0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000afd6:	83 c4 10             	add    esp,0x10
c000afd9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000afdc:	74 0f                	je     c000afed <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000afde:	52                   	push   edx
c000afdf:	52                   	push   edx
c000afe0:	56                   	push   esi
c000afe1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000afe4:	e8 d3 ff ff ff       	call   c000afbc <Device::powerSavingAll(PowerSavingLevel)>
c000afe9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000afeb:	eb e9                	jmp    c000afd6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000afed:	58                   	pop    eax
c000afee:	5b                   	pop    ebx
c000afef:	5e                   	pop    esi
c000aff0:	c3                   	ret    
c000aff1:	90                   	nop

c000aff2 <Device::setName(char const*)>:
c000aff2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000affa:	e9 21 56 ff ff       	jmp    c0000620 <strcpy>
c000afff:	90                   	nop

c000b000 <Device::Device(char const*)>:
c000b000:	83 ec 1c             	sub    esp,0x1c
c000b003:	ba 10 d6 01 c0       	mov    edx,0xc001d610
c000b008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b00c:	89 10                	mov    DWORD PTR [eax],edx
c000b00e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b012:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000b01c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b020:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000b02a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b02e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000b038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b03c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000b046:	83 ec 08             	sub    esp,0x8
c000b049:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b04d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b051:	e8 9c ff ff ff       	call   c000aff2 <Device::setName(char const*)>
c000b056:	83 c4 10             	add    esp,0x10
c000b059:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000b061:	83 ec 0c             	sub    esp,0xc
c000b064:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b068:	e8 f8 bb ff ff       	call   c0006c65 <malloc>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b076:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b07d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b081:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000b087:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b08b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000b091:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b09b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000b0a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b0a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0ac:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000b0b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0b7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000b0be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0c2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000b0cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0d0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000b0da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0de:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000b0e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0ec:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000b0f6:	90                   	nop
c000b0f7:	83 c4 1c             	add    esp,0x1c
c000b0fa:	c3                   	ret    
c000b0fb:	90                   	nop

c000b0fc <Device::getName()>:
c000b0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b100:	05 d0 00 00 00       	add    eax,0xd0
c000b105:	c3                   	ret    

c000b106 <DriverlessDevice::DriverlessDevice(char const*)>:
c000b106:	83 ec 0c             	sub    esp,0xc
c000b109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b10d:	83 ec 08             	sub    esp,0x8
c000b110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b114:	50                   	push   eax
c000b115:	e8 e6 fe ff ff       	call   c000b000 <Device::Device(char const*)>
c000b11a:	83 c4 10             	add    esp,0x10
c000b11d:	ba 3c d6 01 c0       	mov    edx,0xc001d63c
c000b122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b126:	89 10                	mov    DWORD PTR [eax],edx
c000b128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000b136:	90                   	nop
c000b137:	83 c4 0c             	add    esp,0xc
c000b13a:	c3                   	ret    
c000b13b:	90                   	nop

c000b13c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000b13c:	57                   	push   edi
c000b13d:	56                   	push   esi
c000b13e:	53                   	push   ebx
c000b13f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b143:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b147:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b14b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000b151:	75 0c                	jne    c000b15f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000b153:	52                   	push   edx
c000b154:	52                   	push   edx
c000b155:	53                   	push   ebx
c000b156:	56                   	push   esi
c000b157:	e8 36 0b 01 00       	call   c001bc92 <LinkedList<Device>::addElement(Device*)>
c000b15c:	83 c4 10             	add    esp,0x10
c000b15f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b165:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b168:	74 12                	je     c000b17c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000b16a:	50                   	push   eax
c000b16b:	57                   	push   edi
c000b16c:	56                   	push   esi
c000b16d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b170:	e8 c7 ff ff ff       	call   c000b13c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b175:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b177:	83 c4 10             	add    esp,0x10
c000b17a:	eb e9                	jmp    c000b165 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000b17c:	5b                   	pop    ebx
c000b17d:	5e                   	pop    esi
c000b17e:	5f                   	pop    edi
c000b17f:	c3                   	ret    

c000b180 <getDevicesOfType(DeviceType)>:
c000b180:	53                   	push   ebx
c000b181:	83 ec 14             	sub    esp,0x14
c000b184:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b188:	53                   	push   ebx
c000b189:	e8 e0 0b 01 00       	call   c001bd6e <LinkedList<Device>::LinkedList()>
c000b18e:	83 c4 0c             	add    esp,0xc
c000b191:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b195:	53                   	push   ebx
c000b196:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c000b19c:	e8 9b ff ff ff       	call   c000b13c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b1a1:	89 d8                	mov    eax,ebx
c000b1a3:	83 c4 18             	add    esp,0x18
c000b1a6:	5b                   	pop    ebx
c000b1a7:	c2 04 00             	ret    0x4
c000b1aa:	66 90                	xchg   ax,ax

c000b1ac <HardDiskController::HardDiskController(char const*)>:
c000b1ac:	83 ec 0c             	sub    esp,0xc
c000b1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b3:	83 ec 08             	sub    esp,0x8
c000b1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1ba:	50                   	push   eax
c000b1bb:	e8 40 fe ff ff       	call   c000b000 <Device::Device(char const*)>
c000b1c0:	83 c4 10             	add    esp,0x10
c000b1c3:	ba 68 d6 01 c0       	mov    edx,0xc001d668
c000b1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cc:	89 10                	mov    DWORD PTR [eax],edx
c000b1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000b1dc:	90                   	nop
c000b1dd:	83 c4 0c             	add    esp,0xc
c000b1e0:	c3                   	ret    
c000b1e1:	90                   	nop
c000b1e2:	66 90                	xchg   ax,ax

c000b1e4 <HardDiskController::~HardDiskController()>:
c000b1e4:	83 ec 0c             	sub    esp,0xc
c000b1e7:	ba 68 d6 01 c0       	mov    edx,0xc001d668
c000b1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f0:	89 10                	mov    DWORD PTR [eax],edx
c000b1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f6:	83 ec 0c             	sub    esp,0xc
c000b1f9:	50                   	push   eax
c000b1fa:	e8 6b fb ff ff       	call   c000ad6a <Device::~Device()>
c000b1ff:	83 c4 10             	add    esp,0x10
c000b202:	90                   	nop
c000b203:	83 c4 0c             	add    esp,0xc
c000b206:	c3                   	ret    
c000b207:	90                   	nop

c000b208 <HardDiskController::~HardDiskController()>:
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	83 ec 0c             	sub    esp,0xc
c000b20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b212:	e8 cd ff ff ff       	call   c000b1e4 <HardDiskController::~HardDiskController()>
c000b217:	83 c4 10             	add    esp,0x10
c000b21a:	83 ec 08             	sub    esp,0x8
c000b21d:	68 58 01 00 00       	push   0x158
c000b222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b226:	e8 07 e7 ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	83 c4 0c             	add    esp,0xc
c000b231:	c3                   	ret    

c000b232 <PhysicalDisk::eject()>:
c000b232:	83 c8 ff             	or     eax,0xffffffff
c000b235:	c3                   	ret    

c000b236 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b23d:	83 ec 08             	sub    esp,0x8
c000b240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b244:	50                   	push   eax
c000b245:	e8 b6 fd ff ff       	call   c000b000 <Device::Device(char const*)>
c000b24a:	83 c4 10             	add    esp,0x10
c000b24d:	ba 94 d6 01 c0       	mov    edx,0xc001d694
c000b252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b256:	89 10                	mov    DWORD PTR [eax],edx
c000b258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b25c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b267:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000b26e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b272:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000b27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b280:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b284:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000b28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000b298:	90                   	nop
c000b299:	83 c4 0c             	add    esp,0xc
c000b29c:	c3                   	ret    
c000b29d:	90                   	nop

c000b29e <PhysicalDisk::startCache()>:
c000b29e:	56                   	push   esi
c000b29f:	53                   	push   ebx
c000b2a0:	83 ec 10             	sub    esp,0x10
c000b2a3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b2a7:	6a 44                	push   0x44
c000b2a9:	e8 b7 b9 ff ff       	call   c0006c65 <malloc>
c000b2ae:	89 c6                	mov    esi,eax
c000b2b0:	58                   	pop    eax
c000b2b1:	5a                   	pop    edx
c000b2b2:	53                   	push   ebx
c000b2b3:	56                   	push   esi
c000b2b4:	e8 ab 15 00 00       	call   c000c864 <VCache::VCache(PhysicalDisk*)>
c000b2b9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000b2bf:	83 c4 14             	add    esp,0x14
c000b2c2:	5b                   	pop    ebx
c000b2c3:	5e                   	pop    esi
c000b2c4:	c3                   	ret    
c000b2c5:	90                   	nop

c000b2c6 <PhysicalDisk::~PhysicalDisk()>:
c000b2c6:	83 ec 0c             	sub    esp,0xc
c000b2c9:	ba 94 d6 01 c0       	mov    edx,0xc001d694
c000b2ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d2:	89 10                	mov    DWORD PTR [eax],edx
c000b2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d8:	83 ec 0c             	sub    esp,0xc
c000b2db:	50                   	push   eax
c000b2dc:	e8 89 fa ff ff       	call   c000ad6a <Device::~Device()>
c000b2e1:	83 c4 10             	add    esp,0x10
c000b2e4:	90                   	nop
c000b2e5:	83 c4 0c             	add    esp,0xc
c000b2e8:	c3                   	ret    
c000b2e9:	90                   	nop

c000b2ea <PhysicalDisk::~PhysicalDisk()>:
c000b2ea:	83 ec 0c             	sub    esp,0xc
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2f4:	e8 cd ff ff ff       	call   c000b2c6 <PhysicalDisk::~PhysicalDisk()>
c000b2f9:	83 c4 10             	add    esp,0x10
c000b2fc:	83 ec 08             	sub    esp,0x8
c000b2ff:	68 6c 01 00 00       	push   0x16c
c000b304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b308:	e8 25 e6 ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c000b30d:	83 c4 10             	add    esp,0x10
c000b310:	83 c4 0c             	add    esp,0xc
c000b313:	c3                   	ret    

c000b314 <int_handler>:
c000b314:	55                   	push   ebp
c000b315:	57                   	push   edi
c000b316:	56                   	push   esi
c000b317:	53                   	push   ebx
c000b318:	83 ec 0c             	sub    esp,0xc
c000b31b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b31f:	80 3d a4 20 02 c0 00 	cmp    BYTE PTR ds:0xc00220a4,0x0
c000b326:	74 0b                	je     c000b333 <int_handler+0x1f>
c000b328:	fa                   	cli    
c000b329:	f4                   	hlt    
c000b32a:	80 3d a4 20 02 c0 00 	cmp    BYTE PTR ds:0xc00220a4,0x0
c000b331:	75 f5                	jne    c000b328 <int_handler+0x14>
c000b333:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000b336:	8d 46 e0             	lea    eax,[esi-0x20]
c000b339:	83 f8 17             	cmp    eax,0x17
c000b33c:	76 3e                	jbe    c000b37c <int_handler+0x68>
c000b33e:	c1 e6 04             	shl    esi,0x4
c000b341:	31 db                	xor    ebx,ebx
c000b343:	8d ae 20 07 02 c0    	lea    ebp,[esi-0x3ffdf8e0]
c000b349:	81 c6 20 f7 01 c0    	add    esi,0xc001f720
c000b34f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000b353:	85 c0                	test   eax,eax
c000b355:	74 13                	je     c000b36a <int_handler+0x56>
c000b357:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000b35a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000b35e:	74 2a                	je     c000b38a <int_handler+0x76>
c000b360:	83 ec 08             	sub    esp,0x8
c000b363:	52                   	push   edx
c000b364:	57                   	push   edi
c000b365:	ff d0                	call   eax
c000b367:	83 c4 10             	add    esp,0x10
c000b36a:	43                   	inc    ebx
c000b36b:	83 fb 04             	cmp    ebx,0x4
c000b36e:	75 df                	jne    c000b34f <int_handler+0x3b>
c000b370:	83 c4 0c             	add    esp,0xc
c000b373:	31 c0                	xor    eax,eax
c000b375:	5b                   	pop    ebx
c000b376:	31 d2                	xor    edx,edx
c000b378:	5e                   	pop    esi
c000b379:	5f                   	pop    edi
c000b37a:	5d                   	pop    ebp
c000b37b:	c3                   	ret    
c000b37c:	83 ec 0c             	sub    esp,0xc
c000b37f:	50                   	push   eax
c000b380:	e8 6c 96 00 00       	call   c00149f1 <Hal::endOfInterrupt(int)>
c000b385:	83 c4 10             	add    esp,0x10
c000b388:	eb b4                	jmp    c000b33e <int_handler+0x2a>
c000b38a:	83 ec 08             	sub    esp,0x8
c000b38d:	52                   	push   edx
c000b38e:	57                   	push   edi
c000b38f:	ff d0                	call   eax
c000b391:	83 c4 10             	add    esp,0x10
c000b394:	83 c4 0c             	add    esp,0xc
c000b397:	5b                   	pop    ebx
c000b398:	5e                   	pop    esi
c000b399:	5f                   	pop    edi
c000b39a:	5d                   	pop    ebp
c000b39b:	c3                   	ret    

c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000b39c:	56                   	push   esi
c000b39d:	31 c0                	xor    eax,eax
c000b39f:	53                   	push   ebx
c000b3a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b3a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b3a8:	89 ca                	mov    edx,ecx
c000b3aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3ae:	c1 e2 04             	shl    edx,0x4
c000b3b1:	83 bc 82 20 07 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdf8e0],0x0
c000b3b9:	74 15                	je     c000b3d0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000b3bb:	40                   	inc    eax
c000b3bc:	83 f8 04             	cmp    eax,0x4
c000b3bf:	75 f0                	jne    c000b3b1 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000b3c1:	c7 44 24 0c c4 d6 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d6c4
c000b3c9:	5b                   	pop    ebx
c000b3ca:	5e                   	pop    esi
c000b3cb:	e9 d1 41 00 00       	jmp    c000f5a1 <Krnl::panic(char const*)>
c000b3d0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000b3d3:	89 1c 85 20 07 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf8e0],ebx
c000b3da:	89 34 85 20 f7 01 c0 	mov    DWORD PTR [eax*4-0x3ffe08e0],esi
c000b3e1:	5b                   	pop    ebx
c000b3e2:	5e                   	pop    esi
c000b3e3:	c3                   	ret    

c000b3e4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b3e4:	57                   	push   edi
c000b3e5:	8b 15 08 f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f608
c000b3eb:	56                   	push   esi
c000b3ec:	53                   	push   ebx
c000b3ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b3f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3f5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000b3fc:	74 5b                	je     c000b459 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b3fe:	89 c7                	mov    edi,eax
c000b400:	84 c0                	test   al,al
c000b402:	74 24                	je     c000b428 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b404:	83 fe 0f             	cmp    esi,0xf
c000b407:	0f 8f d9 00 00 00    	jg     c000b4e6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000b40d:	8a 86 c0 ef 01 c0    	mov    al,BYTE PTR [esi-0x3ffe1040]
c000b413:	25 ff 00 00 00       	and    eax,0xff
c000b418:	66 8b bc 00 c0 1e 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffde140]
c000b420:	89 c6                	mov    esi,eax
c000b422:	66 d1 ef             	shr    di,1
c000b425:	83 e7 01             	and    edi,0x1
c000b428:	83 ec 08             	sub    esp,0x8
c000b42b:	a1 e0 34 02 c0       	mov    eax,ds:0xc00234e0
c000b430:	31 db                	xor    ebx,ebx
c000b432:	50                   	push   eax
c000b433:	68 d1 d6 01 c0       	push   0xc001d6d1
c000b438:	e8 eb e5 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c000b43d:	83 c4 10             	add    esp,0x10
c000b440:	a1 e0 34 02 c0       	mov    eax,ds:0xc00234e0
c000b445:	85 c0                	test   eax,eax
c000b447:	7f 51                	jg     c000b49a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000b449:	83 ec 0c             	sub    esp,0xc
c000b44c:	68 e8 d6 01 c0       	push   0xc001d6e8
c000b451:	e8 4b 41 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000b456:	83 c4 10             	add    esp,0x10
c000b459:	8d 4e 20             	lea    ecx,[esi+0x20]
c000b45c:	31 d2                	xor    edx,edx
c000b45e:	89 c8                	mov    eax,ecx
c000b460:	c1 e0 04             	shl    eax,0x4
c000b463:	8b 9c 90 20 07 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdf8e0]
c000b46a:	85 db                	test   ebx,ebx
c000b46c:	0f 84 8b 00 00 00    	je     c000b4fd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000b472:	42                   	inc    edx
c000b473:	83 fa 04             	cmp    edx,0x4
c000b476:	75 eb                	jne    c000b463 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000b478:	83 ec 0c             	sub    esp,0xc
c000b47b:	68 3c d7 01 c0       	push   0xc001d73c
c000b480:	e8 1c 41 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000b485:	83 c4 10             	add    esp,0x10
c000b488:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b48d:	5b                   	pop    ebx
c000b48e:	5e                   	pop    esi
c000b48f:	5f                   	pop    edi
c000b490:	c3                   	ret    
c000b491:	43                   	inc    ebx
c000b492:	39 1d e0 34 02 c0    	cmp    DWORD PTR ds:0xc00234e0,ebx
c000b498:	7e af                	jle    c000b449 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000b49a:	83 ec 08             	sub    esp,0x8
c000b49d:	8b 04 9d 00 35 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcb00]
c000b4a4:	56                   	push   esi
c000b4a5:	50                   	push   eax
c000b4a6:	e8 11 f8 00 00       	call   c001acbc <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000b4ab:	83 c4 10             	add    esp,0x10
c000b4ae:	84 c0                	test   al,al
c000b4b0:	74 df                	je     c000b491 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000b4b2:	81 e7 ff 00 00 00    	and    edi,0xff
c000b4b8:	50                   	push   eax
c000b4b9:	8d 46 20             	lea    eax,[esi+0x20]
c000b4bc:	57                   	push   edi
c000b4bd:	25 ff 00 00 00       	and    eax,0xff
c000b4c2:	6a 00                	push   0x0
c000b4c4:	50                   	push   eax
c000b4c5:	89 f0                	mov    eax,esi
c000b4c7:	6a 00                	push   0x0
c000b4c9:	25 ff 00 00 00       	and    eax,0xff
c000b4ce:	6a 00                	push   0x0
c000b4d0:	50                   	push   eax
c000b4d1:	8b 04 9d 00 35 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcb00]
c000b4d8:	50                   	push   eax
c000b4d9:	e8 58 f9 00 00       	call   c001ae36 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000b4de:	83 c4 20             	add    esp,0x20
c000b4e1:	e9 73 ff ff ff       	jmp    c000b459 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	31 ff                	xor    edi,edi
c000b4eb:	68 04 d7 01 c0       	push   0xc001d704
c000b4f0:	e8 ac 40 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000b4f5:	83 c4 10             	add    esp,0x10
c000b4f8:	e9 2b ff ff ff       	jmp    c000b428 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b4fd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b500:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b504:	89 14 85 20 07 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf8e0],edx
c000b50b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b50f:	5b                   	pop    ebx
c000b510:	89 14 85 20 f7 01 c0 	mov    DWORD PTR [eax*4-0x3ffe08e0],edx
c000b517:	89 f0                	mov    eax,esi
c000b519:	5e                   	pop    esi
c000b51a:	5f                   	pop    edi
c000b51b:	c3                   	ret    

c000b51c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000b51c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b520:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b524:	c1 e0 04             	shl    eax,0x4
c000b527:	8d 50 10             	lea    edx,[eax+0x10]
c000b52a:	39 88 20 07 02 c0    	cmp    DWORD PTR [eax-0x3ffdf8e0],ecx
c000b530:	74 08                	je     c000b53a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000b532:	83 c0 04             	add    eax,0x4
c000b535:	39 d0                	cmp    eax,edx
c000b537:	75 f1                	jne    c000b52a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000b539:	c3                   	ret    
c000b53a:	c7 80 20 07 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf8e0],0x0
c000b544:	c7 80 20 f7 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe08e0],0x0
c000b54e:	eb e2                	jmp    c000b532 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000b550 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b550:	53                   	push   ebx
c000b551:	83 ec 08             	sub    esp,0x8
c000b554:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b558:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000b55d:	74 0e                	je     c000b56d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b55f:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000b564:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000b56b:	75 37                	jne    c000b5a4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000b56d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b571:	83 c0 20             	add    eax,0x20
c000b574:	c1 e0 04             	shl    eax,0x4
c000b577:	8d 50 10             	lea    edx,[eax+0x10]
c000b57a:	39 98 20 07 02 c0    	cmp    DWORD PTR [eax-0x3ffdf8e0],ebx
c000b580:	74 0c                	je     c000b58e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000b582:	83 c0 04             	add    eax,0x4
c000b585:	39 d0                	cmp    eax,edx
c000b587:	75 f1                	jne    c000b57a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000b589:	83 c4 08             	add    esp,0x8
c000b58c:	5b                   	pop    ebx
c000b58d:	c3                   	ret    
c000b58e:	c7 80 20 07 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf8e0],0x0
c000b598:	c7 80 20 f7 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe08e0],0x0
c000b5a2:	eb de                	jmp    c000b582 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000b5a4:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000b5a9:	7f 12                	jg     c000b5bd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000b5ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5af:	31 c0                	xor    eax,eax
c000b5b1:	8a 81 c0 ef 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe1040]
c000b5b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5bb:	eb b0                	jmp    c000b56d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b5bd:	83 ec 0c             	sub    esp,0xc
c000b5c0:	68 f5 d6 01 c0       	push   0xc001d6f5
c000b5c5:	e8 d7 3f 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000b5ca:	83 c4 10             	add    esp,0x10
c000b5cd:	eb 9e                	jmp    c000b56d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000b5cf <setupINTS()>:
c000b5cf:	31 c0                	xor    eax,eax
c000b5d1:	c7 80 20 07 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf8e0],0x0
c000b5db:	c7 80 20 f7 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe08e0],0x0
c000b5e5:	c7 80 24 07 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf8dc],0x0
c000b5ef:	c7 80 24 f7 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe08dc],0x0
c000b5f9:	c7 80 28 07 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf8d8],0x0
c000b603:	c7 80 28 f7 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe08d8],0x0
c000b60d:	c7 80 2c 07 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf8d4],0x0
c000b617:	c7 80 2c f7 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe08d4],0x0
c000b621:	83 c0 10             	add    eax,0x10
c000b624:	3d 00 10 00 00       	cmp    eax,0x1000
c000b629:	75 a6                	jne    c000b5d1 <setupINTS()+0x2>
c000b62b:	c3                   	ret    

c000b62c <convertLegacyIRQNumber(int)>:
c000b62c:	83 ec 0c             	sub    esp,0xc
c000b62f:	8b 15 08 f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f608
c000b635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b639:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000b640:	74 0f                	je     c000b651 <convertLegacyIRQNumber(int)+0x25>
c000b642:	83 f8 0f             	cmp    eax,0xf
c000b645:	7f 0e                	jg     c000b655 <convertLegacyIRQNumber(int)+0x29>
c000b647:	31 c9                	xor    ecx,ecx
c000b649:	8a 88 c0 ef 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe1040]
c000b64f:	89 c8                	mov    eax,ecx
c000b651:	83 c4 0c             	add    esp,0xc
c000b654:	c3                   	ret    
c000b655:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b659:	83 ec 0c             	sub    esp,0xc
c000b65c:	68 04 d7 01 c0       	push   0xc001d704
c000b661:	e8 3b 3f 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000b666:	83 c4 10             	add    esp,0x10
c000b669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b66d:	83 c4 0c             	add    esp,0xc
c000b670:	c3                   	ret    
c000b671:	90                   	nop

c000b672 <startGUI(void*)>:
c000b672:	55                   	push   ebp
c000b673:	89 e5                	mov    ebp,esp
c000b675:	53                   	push   ebx
c000b676:	83 ec 04             	sub    esp,0x4
c000b679:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000b67e:	48                   	dec    eax
c000b67f:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c000b684:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000b689:	85 c0                	test   eax,eax
c000b68b:	75 01                	jne    c000b68e <startGUI(void*)+0x1c>
c000b68d:	fb                   	sti    
c000b68e:	8b 1d 08 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f608
c000b694:	83 ec 08             	sub    esp,0x8
c000b697:	6a 01                	push   0x1
c000b699:	68 61 d7 01 c0       	push   0xc001d761
c000b69e:	e8 eb 69 00 00       	call   c001208e <Thr::loadDLL(char const*, bool)>
c000b6a3:	83 c4 10             	add    esp,0x10
c000b6a6:	83 ec 08             	sub    esp,0x8
c000b6a9:	53                   	push   ebx
c000b6aa:	50                   	push   eax
c000b6ab:	e8 0f 6c 00 00       	call   c00122bf <Thr::executeDLL(unsigned long, void*)>
c000b6b0:	83 c4 10             	add    esp,0x10
c000b6b3:	8b 1d 08 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f608
c000b6b9:	83 ec 08             	sub    esp,0x8
c000b6bc:	6a 01                	push   0x1
c000b6be:	68 7b d7 01 c0       	push   0xc001d77b
c000b6c3:	e8 c6 69 00 00       	call   c001208e <Thr::loadDLL(char const*, bool)>
c000b6c8:	83 c4 10             	add    esp,0x10
c000b6cb:	83 ec 08             	sub    esp,0x8
c000b6ce:	53                   	push   ebx
c000b6cf:	50                   	push   eax
c000b6d0:	e8 ea 6b 00 00       	call   c00122bf <Thr::executeDLL(unsigned long, void*)>
c000b6d5:	83 c4 10             	add    esp,0x10
c000b6d8:	90                   	nop
c000b6d9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b6dc:	c9                   	leave  
c000b6dd:	c3                   	ret    

c000b6de <startGUIVESA(void*)>:
c000b6de:	55                   	push   ebp
c000b6df:	89 e5                	mov    ebp,esp
c000b6e1:	53                   	push   ebx
c000b6e2:	83 ec 04             	sub    esp,0x4
c000b6e5:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000b6ea:	48                   	dec    eax
c000b6eb:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c000b6f0:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000b6f5:	85 c0                	test   eax,eax
c000b6f7:	75 01                	jne    c000b6fa <startGUIVESA(void*)+0x1c>
c000b6f9:	fb                   	sti    
c000b6fa:	8b 1d 08 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f608
c000b700:	83 ec 08             	sub    esp,0x8
c000b703:	6a 01                	push   0x1
c000b705:	68 99 d7 01 c0       	push   0xc001d799
c000b70a:	e8 7f 69 00 00       	call   c001208e <Thr::loadDLL(char const*, bool)>
c000b70f:	83 c4 10             	add    esp,0x10
c000b712:	83 ec 08             	sub    esp,0x8
c000b715:	53                   	push   ebx
c000b716:	50                   	push   eax
c000b717:	e8 a3 6b 00 00       	call   c00122bf <Thr::executeDLL(unsigned long, void*)>
c000b71c:	83 c4 10             	add    esp,0x10
c000b71f:	8b 1d 08 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f608
c000b725:	83 ec 08             	sub    esp,0x8
c000b728:	6a 01                	push   0x1
c000b72a:	68 7b d7 01 c0       	push   0xc001d77b
c000b72f:	e8 5a 69 00 00       	call   c001208e <Thr::loadDLL(char const*, bool)>
c000b734:	83 c4 10             	add    esp,0x10
c000b737:	83 ec 08             	sub    esp,0x8
c000b73a:	53                   	push   ebx
c000b73b:	50                   	push   eax
c000b73c:	e8 7e 6b 00 00       	call   c00122bf <Thr::executeDLL(unsigned long, void*)>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	90                   	nop
c000b745:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b748:	c9                   	leave  
c000b749:	c3                   	ret    

c000b74a <sendKeyToTerminal(unsigned char)>:
c000b74a:	55                   	push   ebp
c000b74b:	89 e5                	mov    ebp,esp
c000b74d:	83 ec 28             	sub    esp,0x28
c000b750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b753:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000b756:	8b 15 54 f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f654
c000b75c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000b75f:	25 ff 00 00 00       	and    eax,0xff
c000b764:	83 ec 08             	sub    esp,0x8
c000b767:	50                   	push   eax
c000b768:	52                   	push   edx
c000b769:	e8 76 c8 ff ff       	call   c0007fe4 <VgaText::receiveKey(unsigned char)>
c000b76e:	83 c4 10             	add    esp,0x10
c000b771:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000b775:	0f 85 8f 00 00 00    	jne    c000b80a <sendKeyToTerminal(unsigned char)+0xc0>
c000b77b:	fa                   	cli    
c000b77c:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000b781:	40                   	inc    eax
c000b782:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c000b787:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c000b78c:	40                   	inc    eax
c000b78d:	a3 e4 2a 02 c0       	mov    ds:0xc0022ae4,eax
c000b792:	a1 20 17 02 c0       	mov    eax,ds:0xc0021720
c000b797:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b79a:	c7 05 20 17 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021720,0x0
c000b7a4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000b7a8:	74 1f                	je     c000b7c9 <sendKeyToTerminal(unsigned char)+0x7f>
c000b7aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b7ad:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000b7b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000b7b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b7b6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b7b9:	83 ec 0c             	sub    esp,0xc
c000b7bc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b7bf:	e8 80 77 00 00       	call   c0012f44 <unblockTask(ThreadControlBlock*)>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	eb db                	jmp    c000b7a4 <sendKeyToTerminal(unsigned char)+0x5a>
c000b7c9:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c000b7ce:	48                   	dec    eax
c000b7cf:	a3 e4 2a 02 c0       	mov    ds:0xc0022ae4,eax
c000b7d4:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c000b7d9:	85 c0                	test   eax,eax
c000b7db:	75 18                	jne    c000b7f5 <sendKeyToTerminal(unsigned char)+0xab>
c000b7dd:	a1 e0 2a 02 c0       	mov    eax,ds:0xc0022ae0
c000b7e2:	85 c0                	test   eax,eax
c000b7e4:	74 0f                	je     c000b7f5 <sendKeyToTerminal(unsigned char)+0xab>
c000b7e6:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c000b7f0:	e8 8b 72 00 00       	call   c0012a80 <schedule()>
c000b7f5:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000b7fa:	48                   	dec    eax
c000b7fb:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c000b800:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000b805:	85 c0                	test   eax,eax
c000b807:	75 01                	jne    c000b80a <sendKeyToTerminal(unsigned char)+0xc0>
c000b809:	fb                   	sti    
c000b80a:	90                   	nop
c000b80b:	c9                   	leave  
c000b80c:	c3                   	ret    

c000b80d <sendKeyboardToken(KeyboardToken)>:
c000b80d:	55                   	push   ebp
c000b80e:	89 e5                	mov    ebp,esp
c000b810:	83 ec 18             	sub    esp,0x18
c000b813:	e8 5f 40 00 00       	call   c000f877 <Krnl::userIOReceived()>
c000b818:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000b81b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b81e:	25 ff ff 00 00       	and    eax,0xffff
c000b823:	83 f2 01             	xor    edx,0x1
c000b826:	88 90 40 17 02 c0    	mov    BYTE PTR [eax-0x3ffde8c0],dl
c000b82c:	a1 28 17 02 c0       	mov    eax,ds:0xc0021728
c000b831:	85 c0                	test   eax,eax
c000b833:	74 24                	je     c000b859 <sendKeyboardToken(KeyboardToken)+0x4c>
c000b835:	8b 0d 28 17 02 c0    	mov    ecx,DWORD PTR ds:0xc0021728
c000b83b:	83 ec 04             	sub    esp,0x4
c000b83e:	68 40 17 02 c0       	push   0xc0021740
c000b843:	83 ec 08             	sub    esp,0x8
c000b846:	89 e2                	mov    edx,esp
c000b848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b84b:	89 02                	mov    DWORD PTR [edx],eax
c000b84d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b850:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000b854:	ff d1                	call   ecx
c000b856:	83 c4 10             	add    esp,0x10
c000b859:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000b85d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000b860:	a0 48 1b 02 c0       	mov    al,ds:0xc0021b48
c000b865:	38 c2                	cmp    dl,al
c000b867:	74 1e                	je     c000b887 <sendKeyboardToken(KeyboardToken)+0x7a>
c000b869:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000b86c:	a2 48 1b 02 c0       	mov    ds:0xc0021b48,al
c000b871:	a0 48 1b 02 c0       	mov    al,ds:0xc0021b48
c000b876:	25 ff 00 00 00       	and    eax,0xff
c000b87b:	83 ec 0c             	sub    esp,0xc
c000b87e:	50                   	push   eax
c000b87f:	e8 b2 be ff ff       	call   c0007736 <setTerminalScrollLock(bool)>
c000b884:	83 c4 10             	add    esp,0x10
c000b887:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000b88a:	84 c0                	test   al,al
c000b88c:	0f 84 ae 00 00 00    	je     c000b940 <sendKeyboardToken(KeyboardToken)+0x133>
c000b892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b895:	66 3d 10 03          	cmp    ax,0x310
c000b899:	75 06                	jne    c000b8a1 <sendKeyboardToken(KeyboardToken)+0x94>
c000b89b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000b8a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8a4:	66 3d 11 03          	cmp    ax,0x311
c000b8a8:	75 06                	jne    c000b8b0 <sendKeyboardToken(KeyboardToken)+0xa3>
c000b8aa:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000b8b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8b3:	66 3d 12 03          	cmp    ax,0x312
c000b8b7:	75 06                	jne    c000b8bf <sendKeyboardToken(KeyboardToken)+0xb2>
c000b8b9:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000b8bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8c2:	66 3d 13 03          	cmp    ax,0x313
c000b8c6:	75 06                	jne    c000b8ce <sendKeyboardToken(KeyboardToken)+0xc1>
c000b8c8:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000b8ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8d1:	66 3d 14 03          	cmp    ax,0x314
c000b8d5:	75 06                	jne    c000b8dd <sendKeyboardToken(KeyboardToken)+0xd0>
c000b8d7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000b8dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8e0:	66 3d 15 03          	cmp    ax,0x315
c000b8e4:	75 06                	jne    c000b8ec <sendKeyboardToken(KeyboardToken)+0xdf>
c000b8e6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b8ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8ef:	66 3d 16 03          	cmp    ax,0x316
c000b8f3:	75 06                	jne    c000b8fb <sendKeyboardToken(KeyboardToken)+0xee>
c000b8f5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000b8fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8fe:	66 3d 17 03          	cmp    ax,0x317
c000b902:	75 06                	jne    c000b90a <sendKeyboardToken(KeyboardToken)+0xfd>
c000b904:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000b90a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b90d:	66 3d 18 03          	cmp    ax,0x318
c000b911:	75 06                	jne    c000b919 <sendKeyboardToken(KeyboardToken)+0x10c>
c000b913:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000b919:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b91c:	66 3d 19 03          	cmp    ax,0x319
c000b920:	75 06                	jne    c000b928 <sendKeyboardToken(KeyboardToken)+0x11b>
c000b922:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000b928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b92b:	66 3d 1a 03          	cmp    ax,0x31a
c000b92f:	0f 85 c9 00 00 00    	jne    c000b9fe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b935:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000b93b:	e9 be 00 00 00       	jmp    c000b9fe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b943:	66 3d 10 03          	cmp    ax,0x310
c000b947:	75 0a                	jne    c000b953 <sendKeyboardToken(KeyboardToken)+0x146>
c000b949:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000b94f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b956:	66 3d 11 03          	cmp    ax,0x311
c000b95a:	75 0a                	jne    c000b966 <sendKeyboardToken(KeyboardToken)+0x159>
c000b95c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000b962:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b966:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b969:	66 3d 12 03          	cmp    ax,0x312
c000b96d:	75 0a                	jne    c000b979 <sendKeyboardToken(KeyboardToken)+0x16c>
c000b96f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000b975:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b979:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b97c:	66 3d 13 03          	cmp    ax,0x313
c000b980:	75 0a                	jne    c000b98c <sendKeyboardToken(KeyboardToken)+0x17f>
c000b982:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000b988:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b98c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b98f:	66 3d 14 03          	cmp    ax,0x314
c000b993:	75 0a                	jne    c000b99f <sendKeyboardToken(KeyboardToken)+0x192>
c000b995:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000b99b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b99f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9a2:	66 3d 15 03          	cmp    ax,0x315
c000b9a6:	75 0a                	jne    c000b9b2 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000b9a8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b9ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b9b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9b5:	66 3d 16 03          	cmp    ax,0x316
c000b9b9:	75 0a                	jne    c000b9c5 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000b9bb:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000b9c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b9c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9c8:	66 3d 17 03          	cmp    ax,0x317
c000b9cc:	75 0a                	jne    c000b9d8 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000b9ce:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000b9d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b9d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9db:	66 3d 18 03          	cmp    ax,0x318
c000b9df:	75 0a                	jne    c000b9eb <sendKeyboardToken(KeyboardToken)+0x1de>
c000b9e1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000b9e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b9eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9ee:	66 3d 19 03          	cmp    ax,0x319
c000b9f2:	75 0a                	jne    c000b9fe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b9f4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000b9fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b9fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba01:	66 3d 00 02          	cmp    ax,0x200
c000ba05:	75 2c                	jne    c000ba33 <sendKeyboardToken(KeyboardToken)+0x226>
c000ba07:	a0 40 1b 02 c0       	mov    al,ds:0xc0021b40
c000ba0c:	83 f0 01             	xor    eax,0x1
c000ba0f:	84 c0                	test   al,al
c000ba11:	74 20                	je     c000ba33 <sendKeyboardToken(KeyboardToken)+0x226>
c000ba13:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c000ba18:	6a 01                	push   0x1
c000ba1a:	6a 00                	push   0x0
c000ba1c:	68 72 b6 00 c0       	push   0xc000b672
c000ba21:	50                   	push   eax
c000ba22:	e8 39 6e 00 00       	call   c0012860 <Process::createThread(void (*)(void*), void*, int)>
c000ba27:	83 c4 10             	add    esp,0x10
c000ba2a:	c6 05 40 1b 02 c0 01 	mov    BYTE PTR ds:0xc0021b40,0x1
c000ba31:	eb 33                	jmp    c000ba66 <sendKeyboardToken(KeyboardToken)+0x259>
c000ba33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba36:	66 3d 01 02          	cmp    ax,0x201
c000ba3a:	75 2a                	jne    c000ba66 <sendKeyboardToken(KeyboardToken)+0x259>
c000ba3c:	a0 40 1b 02 c0       	mov    al,ds:0xc0021b40
c000ba41:	83 f0 01             	xor    eax,0x1
c000ba44:	84 c0                	test   al,al
c000ba46:	74 1e                	je     c000ba66 <sendKeyboardToken(KeyboardToken)+0x259>
c000ba48:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c000ba4d:	6a 01                	push   0x1
c000ba4f:	6a 00                	push   0x0
c000ba51:	68 de b6 00 c0       	push   0xc000b6de
c000ba56:	50                   	push   eax
c000ba57:	e8 04 6e 00 00       	call   c0012860 <Process::createThread(void (*)(void*), void*, int)>
c000ba5c:	83 c4 10             	add    esp,0x10
c000ba5f:	c6 05 40 1b 02 c0 01 	mov    BYTE PTR ds:0xc0021b40,0x1
c000ba66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba69:	66 3d 1d 03          	cmp    ax,0x31d
c000ba6d:	75 06                	jne    c000ba75 <sendKeyboardToken(KeyboardToken)+0x268>
c000ba6f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ba75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba78:	66 3d 1c 03          	cmp    ax,0x31c
c000ba7c:	75 06                	jne    c000ba84 <sendKeyboardToken(KeyboardToken)+0x277>
c000ba7e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ba84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba87:	66 3d 1b 03          	cmp    ax,0x31b
c000ba8b:	75 06                	jne    c000ba93 <sendKeyboardToken(KeyboardToken)+0x286>
c000ba8d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ba93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba96:	66 3d 1e 03          	cmp    ax,0x31e
c000ba9a:	75 06                	jne    c000baa2 <sendKeyboardToken(KeyboardToken)+0x295>
c000ba9c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000baa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000baa5:	66 3d 1f 03          	cmp    ax,0x31f
c000baa9:	75 06                	jne    c000bab1 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000baab:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000bab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bab4:	66 3d 1a 03          	cmp    ax,0x31a
c000bab8:	75 06                	jne    c000bac0 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000baba:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000bac0:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000bac4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bac7:	83 f0 01             	xor    eax,0x1
c000baca:	84 c0                	test   al,al
c000bacc:	74 7b                	je     c000bb49 <sendKeyboardToken(KeyboardToken)+0x33c>
c000bace:	a0 41 18 02 c0       	mov    al,ds:0xc0021841
c000bad3:	84 c0                	test   al,al
c000bad5:	74 43                	je     c000bb1a <sendKeyboardToken(KeyboardToken)+0x30d>
c000bad7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000badb:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000badf:	74 2d                	je     c000bb0e <sendKeyboardToken(KeyboardToken)+0x301>
c000bae1:	8b 15 44 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021b44
c000bae7:	89 d0                	mov    eax,edx
c000bae9:	c1 e0 02             	shl    eax,0x2
c000baec:	01 d0                	add    eax,edx
c000baee:	01 c0                	add    eax,eax
c000baf0:	a3 44 1b 02 c0       	mov    ds:0xc0021b44,eax
c000baf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000baf8:	25 ff ff 00 00       	and    eax,0xffff
c000bafd:	8d 50 d0             	lea    edx,[eax-0x30]
c000bb00:	a1 44 1b 02 c0       	mov    eax,ds:0xc0021b44
c000bb05:	01 d0                	add    eax,edx
c000bb07:	a3 44 1b 02 c0       	mov    ds:0xc0021b44,eax
c000bb0c:	eb 71                	jmp    c000bb7f <sendKeyboardToken(KeyboardToken)+0x372>
c000bb0e:	c7 05 44 1b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021b44,0x0
c000bb18:	eb 65                	jmp    c000bb7f <sendKeyboardToken(KeyboardToken)+0x372>
c000bb1a:	a1 44 1b 02 c0       	mov    eax,ds:0xc0021b44
c000bb1f:	85 c0                	test   eax,eax
c000bb21:	74 1a                	je     c000bb3d <sendKeyboardToken(KeyboardToken)+0x330>
c000bb23:	a1 44 1b 02 c0       	mov    eax,ds:0xc0021b44
c000bb28:	25 ff 00 00 00       	and    eax,0xff
c000bb2d:	83 ec 0c             	sub    esp,0xc
c000bb30:	50                   	push   eax
c000bb31:	e8 14 fc ff ff       	call   c000b74a <sendKeyToTerminal(unsigned char)>
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000bb3d:	c7 05 44 1b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021b44,0x0
c000bb47:	eb 36                	jmp    c000bb7f <sendKeyboardToken(KeyboardToken)+0x372>
c000bb49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb4c:	66 3d 01 01          	cmp    ax,0x101
c000bb50:	75 2d                	jne    c000bb7f <sendKeyboardToken(KeyboardToken)+0x372>
c000bb52:	a1 44 1b 02 c0       	mov    eax,ds:0xc0021b44
c000bb57:	85 c0                	test   eax,eax
c000bb59:	74 1a                	je     c000bb75 <sendKeyboardToken(KeyboardToken)+0x368>
c000bb5b:	a1 44 1b 02 c0       	mov    eax,ds:0xc0021b44
c000bb60:	25 ff 00 00 00       	and    eax,0xff
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	50                   	push   eax
c000bb69:	e8 dc fb ff ff       	call   c000b74a <sendKeyToTerminal(unsigned char)>
c000bb6e:	83 c4 10             	add    esp,0x10
c000bb71:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000bb75:	c7 05 44 1b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021b44,0x0
c000bb7f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000bb82:	83 f0 01             	xor    eax,0x1
c000bb85:	84 c0                	test   al,al
c000bb87:	74 4e                	je     c000bbd7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000bb89:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bb8c:	83 f0 01             	xor    eax,0x1
c000bb8f:	84 c0                	test   al,al
c000bb91:	74 44                	je     c000bbd7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000bb93:	a0 40 18 02 c0       	mov    al,ds:0xc0021840
c000bb98:	83 f0 01             	xor    eax,0x1
c000bb9b:	84 c0                	test   al,al
c000bb9d:	74 38                	je     c000bbd7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000bb9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bba2:	66 83 f8 1f          	cmp    ax,0x1f
c000bba6:	76 09                	jbe    c000bbb1 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000bba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbab:	66 83 f8 7e          	cmp    ax,0x7e
c000bbaf:	76 12                	jbe    c000bbc3 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000bbb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbb4:	66 83 f8 0a          	cmp    ax,0xa
c000bbb8:	74 09                	je     c000bbc3 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000bbba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbbd:	66 83 f8 08          	cmp    ax,0x8
c000bbc1:	75 14                	jne    c000bbd7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000bbc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbc6:	25 ff 00 00 00       	and    eax,0xff
c000bbcb:	83 ec 0c             	sub    esp,0xc
c000bbce:	50                   	push   eax
c000bbcf:	e8 76 fb ff ff       	call   c000b74a <sendKeyToTerminal(unsigned char)>
c000bbd4:	83 c4 10             	add    esp,0x10
c000bbd7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000bbda:	83 f0 01             	xor    eax,0x1
c000bbdd:	84 c0                	test   al,al
c000bbdf:	74 51                	je     c000bc32 <sendKeyboardToken(KeyboardToken)+0x425>
c000bbe1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bbe4:	83 f0 01             	xor    eax,0x1
c000bbe7:	84 c0                	test   al,al
c000bbe9:	74 47                	je     c000bc32 <sendKeyboardToken(KeyboardToken)+0x425>
c000bbeb:	a0 40 18 02 c0       	mov    al,ds:0xc0021840
c000bbf0:	84 c0                	test   al,al
c000bbf2:	74 3e                	je     c000bc32 <sendKeyboardToken(KeyboardToken)+0x425>
c000bbf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbf7:	66 83 f8 3f          	cmp    ax,0x3f
c000bbfb:	76 35                	jbe    c000bc32 <sendKeyboardToken(KeyboardToken)+0x425>
c000bbfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc00:	66 83 f8 7f          	cmp    ax,0x7f
c000bc04:	77 2c                	ja     c000bc32 <sendKeyboardToken(KeyboardToken)+0x425>
c000bc06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc09:	88 c2                	mov    dl,al
c000bc0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc0e:	66 83 f8 5f          	cmp    ax,0x5f
c000bc12:	76 04                	jbe    c000bc18 <sendKeyboardToken(KeyboardToken)+0x40b>
c000bc14:	b0 20                	mov    al,0x20
c000bc16:	eb 02                	jmp    c000bc1a <sendKeyboardToken(KeyboardToken)+0x40d>
c000bc18:	b0 00                	mov    al,0x0
c000bc1a:	29 c2                	sub    edx,eax
c000bc1c:	88 d0                	mov    al,dl
c000bc1e:	83 e8 40             	sub    eax,0x40
c000bc21:	25 ff 00 00 00       	and    eax,0xff
c000bc26:	83 ec 0c             	sub    esp,0xc
c000bc29:	50                   	push   eax
c000bc2a:	e8 1b fb ff ff       	call   c000b74a <sendKeyToTerminal(unsigned char)>
c000bc2f:	83 c4 10             	add    esp,0x10
c000bc32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc35:	66 3d 00 03          	cmp    ax,0x300
c000bc39:	75 0f                	jne    c000bc4a <sendKeyboardToken(KeyboardToken)+0x43d>
c000bc3b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bc3e:	83 f0 01             	xor    eax,0x1
c000bc41:	84 c0                	test   al,al
c000bc43:	74 05                	je     c000bc4a <sendKeyboardToken(KeyboardToken)+0x43d>
c000bc45:	e8 ed ba ff ff       	call   c0007737 <doTerminalCycle()>
c000bc4a:	90                   	nop
c000bc4b:	c9                   	leave  
c000bc4c:	c3                   	ret    

c000bc4d <clearInternalKeybuffer(VgaText*)>:
c000bc4d:	55                   	push   ebp
c000bc4e:	89 e5                	mov    ebp,esp
c000bc50:	83 ec 08             	sub    esp,0x8
c000bc53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc56:	05 b2 00 00 00       	add    eax,0xb2
c000bc5b:	83 ec 0c             	sub    esp,0xc
c000bc5e:	50                   	push   eax
c000bc5f:	e8 fc 48 ff ff       	call   c0000560 <strlen>
c000bc64:	83 c4 10             	add    esp,0x10
c000bc67:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bc6a:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bc70:	83 ec 04             	sub    esp,0x4
c000bc73:	50                   	push   eax
c000bc74:	6a 00                	push   0x0
c000bc76:	52                   	push   edx
c000bc77:	e8 74 48 ff ff       	call   c00004f0 <memset>
c000bc7c:	83 c4 10             	add    esp,0x10
c000bc7f:	90                   	nop
c000bc80:	c9                   	leave  
c000bc81:	c3                   	ret    

c000bc82 <readKeyboard(VgaText*, char*, unsigned long)>:
c000bc82:	55                   	push   ebp
c000bc83:	89 e5                	mov    ebp,esp
c000bc85:	83 ec 18             	sub    esp,0x18
c000bc88:	a1 28 17 02 c0       	mov    eax,ds:0xc0021728
c000bc8d:	85 c0                	test   eax,eax
c000bc8f:	74 2a                	je     c000bcbb <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000bc91:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000bc97:	8b 0d 28 17 02 c0    	mov    ecx,DWORD PTR ds:0xc0021728
c000bc9d:	83 ec 04             	sub    esp,0x4
c000bca0:	68 40 17 02 c0       	push   0xc0021740
c000bca5:	83 ec 08             	sub    esp,0x8
c000bca8:	89 e2                	mov    edx,esp
c000bcaa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000bcad:	89 02                	mov    DWORD PTR [edx],eax
c000bcaf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000bcb2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000bcb6:	ff d1                	call   ecx
c000bcb8:	83 c4 10             	add    esp,0x10
c000bcbb:	fb                   	sti    
c000bcbc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000bcc3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000bcc7:	0f 84 a1 00 00 00    	je     c000bd6e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000bccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bcd0:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bcd6:	84 c0                	test   al,al
c000bcd8:	75 28                	jne    c000bd02 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000bcda:	fa                   	cli    
c000bcdb:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000bce0:	40                   	inc    eax
c000bce1:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c000bce6:	e8 95 6d 00 00       	call   c0012a80 <schedule()>
c000bceb:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000bcf0:	48                   	dec    eax
c000bcf1:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c000bcf6:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000bcfb:	85 c0                	test   eax,eax
c000bcfd:	75 ce                	jne    c000bccd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bcff:	fb                   	sti    
c000bd00:	eb cb                	jmp    c000bccd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bd02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bd05:	8d 50 01             	lea    edx,[eax+0x1]
c000bd08:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000bd0b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bd0e:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000bd14:	88 10                	mov    BYTE PTR [eax],dl
c000bd16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bd19:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bd1f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000bd22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bd25:	05 b2 00 00 00       	add    eax,0xb2
c000bd2a:	83 ec 0c             	sub    esp,0xc
c000bd2d:	50                   	push   eax
c000bd2e:	e8 2d 48 ff ff       	call   c0000560 <strlen>
c000bd33:	83 c4 10             	add    esp,0x10
c000bd36:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bd39:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bd3f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bd42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bd45:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bd4b:	83 ec 04             	sub    esp,0x4
c000bd4e:	50                   	push   eax
c000bd4f:	51                   	push   ecx
c000bd50:	52                   	push   edx
c000bd51:	e8 aa 46 ff ff       	call   c0000400 <memmove>
c000bd56:	83 c4 10             	add    esp,0x10
c000bd59:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000bd5c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000bd5f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000bd63:	0f 85 5a ff ff ff    	jne    c000bcc3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000bd69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bd6c:	eb 03                	jmp    c000bd71 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000bd6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bd71:	c9                   	leave  
c000bd72:	c3                   	ret    
c000bd73:	90                   	nop

c000bd74 <Keyboard::Keyboard(char const*)>:
c000bd74:	83 ec 0c             	sub    esp,0xc
c000bd77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd7b:	83 ec 08             	sub    esp,0x8
c000bd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd82:	50                   	push   eax
c000bd83:	e8 78 f2 ff ff       	call   c000b000 <Device::Device(char const*)>
c000bd88:	83 c4 10             	add    esp,0x10
c000bd8b:	ba bc d7 01 c0       	mov    edx,0xc001d7bc
c000bd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd94:	89 10                	mov    DWORD PTR [eax],edx
c000bd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd9a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000bda4:	c6 05 24 17 02 c0 01 	mov    BYTE PTR ds:0xc0021724,0x1
c000bdab:	90                   	nop
c000bdac:	83 c4 0c             	add    esp,0xc
c000bdaf:	c3                   	ret    

c000bdb0 <Keyboard::~Keyboard()>:
c000bdb0:	83 ec 0c             	sub    esp,0xc
c000bdb3:	ba bc d7 01 c0       	mov    edx,0xc001d7bc
c000bdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdbc:	89 10                	mov    DWORD PTR [eax],edx
c000bdbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc2:	83 ec 0c             	sub    esp,0xc
c000bdc5:	50                   	push   eax
c000bdc6:	e8 9f ef ff ff       	call   c000ad6a <Device::~Device()>
c000bdcb:	83 c4 10             	add    esp,0x10
c000bdce:	90                   	nop
c000bdcf:	83 c4 0c             	add    esp,0xc
c000bdd2:	c3                   	ret    
c000bdd3:	90                   	nop

c000bdd4 <Keyboard::~Keyboard()>:
c000bdd4:	83 ec 0c             	sub    esp,0xc
c000bdd7:	83 ec 0c             	sub    esp,0xc
c000bdda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdde:	e8 cd ff ff ff       	call   c000bdb0 <Keyboard::~Keyboard()>
c000bde3:	83 c4 10             	add    esp,0x10
c000bde6:	83 ec 08             	sub    esp,0x8
c000bde9:	68 5c 01 00 00       	push   0x15c
c000bdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf2:	e8 3b db ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c000bdf7:	83 c4 10             	add    esp,0x10
c000bdfa:	83 c4 0c             	add    esp,0xc
c000bdfd:	c3                   	ret    

c000bdfe <LogicalDisk::close(int, int, void*)>:
c000bdfe:	83 c8 ff             	or     eax,0xffffffff
c000be01:	c3                   	ret    

c000be02 <LogicalDisk::~LogicalDisk()>:
c000be02:	83 ec 0c             	sub    esp,0xc
c000be05:	ba 34 d8 01 c0       	mov    edx,0xc001d834
c000be0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be0e:	89 10                	mov    DWORD PTR [eax],edx
c000be10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be14:	83 ec 0c             	sub    esp,0xc
c000be17:	50                   	push   eax
c000be18:	e8 4d ef ff ff       	call   c000ad6a <Device::~Device()>
c000be1d:	83 c4 10             	add    esp,0x10
c000be20:	90                   	nop
c000be21:	83 c4 0c             	add    esp,0xc
c000be24:	c3                   	ret    
c000be25:	90                   	nop

c000be26 <LogicalDisk::~LogicalDisk()>:
c000be26:	83 ec 0c             	sub    esp,0xc
c000be29:	83 ec 0c             	sub    esp,0xc
c000be2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be30:	e8 cd ff ff ff       	call   c000be02 <LogicalDisk::~LogicalDisk()>
c000be35:	83 c4 10             	add    esp,0x10
c000be38:	83 ec 08             	sub    esp,0x8
c000be3b:	68 74 01 00 00       	push   0x174
c000be40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be44:	e8 e9 da ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c000be49:	83 c4 10             	add    esp,0x10
c000be4c:	83 c4 0c             	add    esp,0xc
c000be4f:	c3                   	ret    

c000be50 <LogicalDisk::open(int, int, void*)>:
c000be50:	83 ec 18             	sub    esp,0x18
c000be53:	68 e8 d7 01 c0       	push   0xc001d7e8
c000be58:	e8 44 37 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000be5d:	83 c8 ff             	or     eax,0xffffffff
c000be60:	83 c4 1c             	add    esp,0x1c
c000be63:	c3                   	ret    

c000be64 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000be64:	53                   	push   ebx
c000be65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be71:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000be77:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000be7d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000be83:	77 10                	ja     c000be95 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000be85:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000be8b:	89 d3                	mov    ebx,edx
c000be8d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000be93:	72 05                	jb     c000be9a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000be95:	83 c8 ff             	or     eax,0xffffffff
c000be98:	89 c2                	mov    edx,eax
c000be9a:	5b                   	pop    ebx
c000be9b:	c3                   	ret    

c000be9c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000be9c:	56                   	push   esi
c000be9d:	83 c8 ff             	or     eax,0xffffffff
c000bea0:	53                   	push   ebx
c000bea1:	89 c2                	mov    edx,eax
c000bea3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bea7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000beab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000beaf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000beb5:	77 27                	ja     c000bede <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000beb7:	89 d8                	mov    eax,ebx
c000beb9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000bebf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000bec5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000beca:	89 c2                	mov    edx,eax
c000becc:	73 10                	jae    c000bede <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bece:	89 c8                	mov    eax,ecx
c000bed0:	89 da                	mov    edx,ebx
c000bed2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000bed8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000bede:	5b                   	pop    ebx
c000bedf:	5e                   	pop    esi
c000bee0:	c3                   	ret    
c000bee1:	90                   	nop

c000bee2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000bee2:	83 ec 1c             	sub    esp,0x1c
c000bee5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bee9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000beed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bef5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bef9:	89 04 24             	mov    DWORD PTR [esp],eax
c000befc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bf04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf08:	83 ec 08             	sub    esp,0x8
c000bf0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf0f:	50                   	push   eax
c000bf10:	e8 eb f0 ff ff       	call   c000b000 <Device::Device(char const*)>
c000bf15:	83 c4 10             	add    esp,0x10
c000bf18:	ba 34 d8 01 c0       	mov    edx,0xc001d834
c000bf1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf21:	89 10                	mov    DWORD PTR [eax],edx
c000bf23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf27:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bf2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf32:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bf39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf3d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000bf47:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bf4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf53:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000bf59:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000bf5f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bf63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bf66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bf6a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000bf70:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000bf76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bf7e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000bf84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf88:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000bf92:	90                   	nop
c000bf93:	83 c4 1c             	add    esp,0x1c
c000bf96:	c3                   	ret    
c000bf97:	90                   	nop

c000bf98 <LogicalDisk::assignDriveLetter()>:
c000bf98:	55                   	push   ebp
c000bf99:	57                   	push   edi
c000bf9a:	56                   	push   esi
c000bf9b:	53                   	push   ebx
c000bf9c:	83 ec 14             	sub    esp,0x14
c000bf9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bfa3:	8b 3d 60 1b 02 c0    	mov    edi,DWORD PTR ds:0xc0021b60
c000bfa9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000bfaf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000bfb3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000bfb9:	8b 3d 64 1b 02 c0    	mov    edi,DWORD PTR ds:0xc0021b64
c000bfbf:	3c 01                	cmp    al,0x1
c000bfc1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000bfc5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bfc9:	19 c0                	sbb    eax,eax
c000bfcb:	83 e0 02             	and    eax,0x2
c000bfce:	83 c0 41             	add    eax,0x41
c000bfd1:	0f be e8             	movsx  ebp,al
c000bfd4:	3c 43                	cmp    al,0x43
c000bfd6:	75 10                	jne    c000bfe8 <LogicalDisk::assignDriveLetter()+0x50>
c000bfd8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000bfdf:	75 5d                	jne    c000c03e <LogicalDisk::assignDriveLetter()+0xa6>
c000bfe1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000bfe6:	75 56                	jne    c000c03e <LogicalDisk::assignDriveLetter()+0xa6>
c000bfe8:	8d 75 bf             	lea    esi,[ebp-0x41]
c000bfeb:	ba 01 00 00 00       	mov    edx,0x1
c000bff0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000bff4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000bff8:	d3 e2                	shl    edx,cl
c000bffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bffe:	89 d7                	mov    edi,edx
c000c000:	89 d6                	mov    esi,edx
c000c002:	c1 ff 1f             	sar    edi,0x1f
c000c005:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000c009:	21 f9                	and    ecx,edi
c000c00b:	09 d1                	or     ecx,edx
c000c00d:	75 2f                	jne    c000c03e <LogicalDisk::assignDriveLetter()+0xa6>
c000c00f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000c013:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c017:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000c01d:	09 f2                	or     edx,esi
c000c01f:	89 15 60 1b 02 c0    	mov    DWORD PTR ds:0xc0021b60,edx
c000c025:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c029:	09 fa                	or     edx,edi
c000c02b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c02f:	89 15 64 1b 02 c0    	mov    DWORD PTR ds:0xc0021b64,edx
c000c035:	89 1c bd 80 1b 02 c0 	mov    DWORD PTR [edi*4-0x3ffde480],ebx
c000c03c:	eb 08                	jmp    c000c046 <LogicalDisk::assignDriveLetter()+0xae>
c000c03e:	45                   	inc    ebp
c000c03f:	40                   	inc    eax
c000c040:	3c 5b                	cmp    al,0x5b
c000c042:	75 90                	jne    c000bfd4 <LogicalDisk::assignDriveLetter()+0x3c>
c000c044:	31 c0                	xor    eax,eax
c000c046:	83 c4 14             	add    esp,0x14
c000c049:	5b                   	pop    ebx
c000c04a:	5e                   	pop    esi
c000c04b:	5f                   	pop    edi
c000c04c:	5d                   	pop    ebp
c000c04d:	c3                   	ret    

c000c04e <LogicalDisk::mount()>:
c000c04e:	56                   	push   esi
c000c04f:	53                   	push   ebx
c000c050:	53                   	push   ebx
c000c051:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c055:	8b 1d f8 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6f8
c000c05b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000c065:	85 db                	test   ebx,ebx
c000c067:	74 27                	je     c000c090 <LogicalDisk::mount()+0x42>
c000c069:	51                   	push   ecx
c000c06a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000c071:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c073:	83 e8 41             	sub    eax,0x41
c000c076:	50                   	push   eax
c000c077:	56                   	push   esi
c000c078:	53                   	push   ebx
c000c079:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c07c:	83 c4 10             	add    esp,0x10
c000c07f:	84 c0                	test   al,al
c000c081:	74 08                	je     c000c08b <LogicalDisk::mount()+0x3d>
c000c083:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000c089:	eb 07                	jmp    c000c092 <LogicalDisk::mount()+0x44>
c000c08b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000c08e:	eb d5                	jmp    c000c065 <LogicalDisk::mount()+0x17>
c000c090:	31 c0                	xor    eax,eax
c000c092:	5a                   	pop    edx
c000c093:	5b                   	pop    ebx
c000c094:	5e                   	pop    esi
c000c095:	c3                   	ret    

c000c096 <LogicalDisk::unmount()>:
c000c096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c09a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000c0a4:	c3                   	ret    
c000c0a5:	90                   	nop

c000c0a6 <LogicalDisk::eject()>:
c000c0a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c0b0:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c0b6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000c0b9:	90                   	nop

c000c0ba <LogicalDisk::unassignDriveLetter()>:
c000c0ba:	57                   	push   edi
c000c0bb:	56                   	push   esi
c000c0bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c0c0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000c0c7:	84 c9                	test   cl,cl
c000c0c9:	75 0f                	jne    c000c0da <LogicalDisk::unassignDriveLetter()+0x20>
c000c0cb:	c7 44 24 0c 0c d8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d80c
c000c0d3:	5e                   	pop    esi
c000c0d4:	5f                   	pop    edi
c000c0d5:	e9 c7 34 00 00       	jmp    c000f5a1 <Krnl::panic(char const*)>
c000c0da:	83 e9 41             	sub    ecx,0x41
c000c0dd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000c0e4:	b8 01 00 00 00       	mov    eax,0x1
c000c0e9:	c7 04 8d 80 1b 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffde480],0x0
c000c0f4:	d3 e0                	shl    eax,cl
c000c0f6:	89 c7                	mov    edi,eax
c000c0f8:	f7 d0                	not    eax
c000c0fa:	c1 ff 1f             	sar    edi,0x1f
c000c0fd:	21 05 60 1b 02 c0    	and    DWORD PTR ds:0xc0021b60,eax
c000c103:	89 fe                	mov    esi,edi
c000c105:	f7 d6                	not    esi
c000c107:	21 35 64 1b 02 c0    	and    DWORD PTR ds:0xc0021b64,esi
c000c10d:	5e                   	pop    esi
c000c10e:	5f                   	pop    edi
c000c10f:	c3                   	ret    

c000c110 <LogicalDisk::read(unsigned long long, int, void*)>:
c000c110:	57                   	push   edi
c000c111:	56                   	push   esi
c000c112:	53                   	push   ebx
c000c113:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c117:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c11b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c11f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c123:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c129:	77 41                	ja     c000c16c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000c12b:	99                   	cdq    
c000c12c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c132:	01 c8                	add    eax,ecx
c000c134:	11 da                	adc    edx,ebx
c000c136:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c13c:	19 d7                	sbb    edi,edx
c000c13e:	72 33                	jb     c000c173 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000c140:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c146:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c14c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c150:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c154:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c15a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c160:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c164:	5b                   	pop    ebx
c000c165:	5e                   	pop    esi
c000c166:	5f                   	pop    edi
c000c167:	e9 32 0a 00 00       	jmp    c000cb9e <VCache::read(unsigned long long, int, void*)>
c000c16c:	b8 05 00 00 00       	mov    eax,0x5
c000c171:	eb 05                	jmp    c000c178 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000c173:	b8 07 00 00 00       	mov    eax,0x7
c000c178:	5b                   	pop    ebx
c000c179:	5e                   	pop    esi
c000c17a:	5f                   	pop    edi
c000c17b:	c3                   	ret    

c000c17c <LogicalDisk::write(unsigned long long, int, void*)>:
c000c17c:	57                   	push   edi
c000c17d:	56                   	push   esi
c000c17e:	53                   	push   ebx
c000c17f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c183:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c187:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c18b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c18f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c195:	77 41                	ja     c000c1d8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000c197:	99                   	cdq    
c000c198:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c19e:	01 c8                	add    eax,ecx
c000c1a0:	11 da                	adc    edx,ebx
c000c1a2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c1a8:	19 d7                	sbb    edi,edx
c000c1aa:	72 33                	jb     c000c1df <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000c1ac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c1b2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c1b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c1bc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c1c0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c1c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c1cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1d0:	5b                   	pop    ebx
c000c1d1:	5e                   	pop    esi
c000c1d2:	5f                   	pop    edi
c000c1d3:	e9 cc 08 00 00       	jmp    c000caa4 <VCache::write(unsigned long long, int, void*)>
c000c1d8:	b8 05 00 00 00       	mov    eax,0x5
c000c1dd:	eb 05                	jmp    c000c1e4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000c1df:	b8 07 00 00 00       	mov    eax,0x7
c000c1e4:	5b                   	pop    ebx
c000c1e5:	5e                   	pop    esi
c000c1e6:	5f                   	pop    edi
c000c1e7:	c3                   	ret    

c000c1e8 <Mouse::Mouse(char const*)>:
c000c1e8:	83 ec 0c             	sub    esp,0xc
c000c1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1ef:	83 ec 08             	sub    esp,0x8
c000c1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1f6:	50                   	push   eax
c000c1f7:	e8 04 ee ff ff       	call   c000b000 <Device::Device(char const*)>
c000c1fc:	83 c4 10             	add    esp,0x10
c000c1ff:	ba 60 d8 01 c0       	mov    edx,0xc001d860
c000c204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c208:	89 10                	mov    DWORD PTR [eax],edx
c000c20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c20e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000c218:	90                   	nop
c000c219:	83 c4 0c             	add    esp,0xc
c000c21c:	c3                   	ret    
c000c21d:	90                   	nop
c000c21e:	66 90                	xchg   ax,ax

c000c220 <Mouse::~Mouse()>:
c000c220:	83 ec 0c             	sub    esp,0xc
c000c223:	ba 60 d8 01 c0       	mov    edx,0xc001d860
c000c228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c22c:	89 10                	mov    DWORD PTR [eax],edx
c000c22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c232:	83 ec 0c             	sub    esp,0xc
c000c235:	50                   	push   eax
c000c236:	e8 2f eb ff ff       	call   c000ad6a <Device::~Device()>
c000c23b:	83 c4 10             	add    esp,0x10
c000c23e:	90                   	nop
c000c23f:	83 c4 0c             	add    esp,0xc
c000c242:	c3                   	ret    
c000c243:	90                   	nop

c000c244 <Mouse::~Mouse()>:
c000c244:	83 ec 0c             	sub    esp,0xc
c000c247:	83 ec 0c             	sub    esp,0xc
c000c24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c24e:	e8 cd ff ff ff       	call   c000c220 <Mouse::~Mouse()>
c000c253:	83 c4 10             	add    esp,0x10
c000c256:	83 ec 08             	sub    esp,0x8
c000c259:	68 58 01 00 00       	push   0x158
c000c25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c262:	e8 cb d6 ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c000c267:	83 c4 10             	add    esp,0x10
c000c26a:	83 c4 0c             	add    esp,0xc
c000c26d:	c3                   	ret    

c000c26e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c26e:	55                   	push   ebp
c000c26f:	57                   	push   edi
c000c270:	56                   	push   esi
c000c271:	53                   	push   ebx
c000c272:	81 ec 28 01 00 00    	sub    esp,0x128
c000c278:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000c27f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000c286:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000c28d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000c294:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c298:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c29c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c2a3:	e8 54 ee ff ff       	call   c000b0fc <Device::getName()>
c000c2a8:	5a                   	pop    edx
c000c2a9:	59                   	pop    ecx
c000c2aa:	50                   	push   eax
c000c2ab:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000c2af:	55                   	push   ebp
c000c2b0:	e8 6b 43 ff ff       	call   c0000620 <strcpy>
c000c2b5:	5b                   	pop    ebx
c000c2b6:	58                   	pop    eax
c000c2b7:	68 84 d8 01 c0       	push   0xc001d884
c000c2bc:	55                   	push   ebp
c000c2bd:	e8 1e 45 ff ff       	call   c00007e0 <strcat>
c000c2c2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000c2c9:	e8 97 a9 ff ff       	call   c0006c65 <malloc>
c000c2ce:	83 c4 0c             	add    esp,0xc
c000c2d1:	89 c3                	mov    ebx,eax
c000c2d3:	57                   	push   edi
c000c2d4:	56                   	push   esi
c000c2d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2dd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000c2e4:	55                   	push   ebp
c000c2e5:	50                   	push   eax
c000c2e6:	e8 f7 fb ff ff       	call   c000bee2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000c2eb:	83 c4 14             	add    esp,0x14
c000c2ee:	53                   	push   ebx
c000c2ef:	e8 a4 fc ff ff       	call   c000bf98 <LogicalDisk::assignDriveLetter()>
c000c2f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c2f7:	e8 52 fd ff ff       	call   c000c04e <LogicalDisk::mount()>
c000c2fc:	58                   	pop    eax
c000c2fd:	5a                   	pop    edx
c000c2fe:	53                   	push   ebx
c000c2ff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c306:	e8 5d eb ff ff       	call   c000ae68 <Device::addChild(Device*)>
c000c30b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000c311:	5b                   	pop    ebx
c000c312:	5e                   	pop    esi
c000c313:	5f                   	pop    edi
c000c314:	5d                   	pop    ebp
c000c315:	c3                   	ret    

c000c316 <createPartitionsForDisk(PhysicalDisk*)>:
c000c316:	55                   	push   ebp
c000c317:	57                   	push   edi
c000c318:	56                   	push   esi
c000c319:	53                   	push   ebx
c000c31a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000c320:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000c327:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000c32d:	3d 00 02 00 00       	cmp    eax,0x200
c000c332:	74 27                	je     c000c35b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000c334:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000c33a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000c340:	83 ec 10             	sub    esp,0x10
c000c343:	0f a4 f7 0a          	shld   edi,esi,0xa
c000c347:	99                   	cdq    
c000c348:	c1 e6 0a             	shl    esi,0xa
c000c34b:	52                   	push   edx
c000c34c:	89 fd                	mov    ebp,edi
c000c34e:	50                   	push   eax
c000c34f:	55                   	push   ebp
c000c350:	56                   	push   esi
c000c351:	e8 8a f4 00 00       	call   c001b7e0 <__udivdi3>
c000c356:	e9 b1 00 00 00       	jmp    c000c40c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c35b:	83 ec 0c             	sub    esp,0xc
c000c35e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c360:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000c364:	56                   	push   esi
c000c365:	6a 01                	push   0x1
c000c367:	6a 00                	push   0x0
c000c369:	6a 00                	push   0x0
c000c36b:	53                   	push   ebx
c000c36c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000c36f:	83 c4 20             	add    esp,0x20
c000c372:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000c37a:	75 0a                	jne    c000c386 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000c37c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000c384:	74 2c                	je     c000c3b2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000c386:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c38c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c392:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c398:	83 ec 10             	sub    esp,0x10
c000c39b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c39f:	89 f7                	mov    edi,esi
c000c3a1:	c1 e0 0a             	shl    eax,0xa
c000c3a4:	c1 ff 1f             	sar    edi,0x1f
c000c3a7:	57                   	push   edi
c000c3a8:	56                   	push   esi
c000c3a9:	52                   	push   edx
c000c3aa:	50                   	push   eax
c000c3ab:	e8 30 f4 00 00       	call   c001b7e0 <__udivdi3>
c000c3b0:	eb 5a                	jmp    c000c40c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c3b2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000c3b9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000c3c0:	83 e1 7f             	and    ecx,0x7f
c000c3c3:	83 e0 7f             	and    eax,0x7f
c000c3c6:	01 c1                	add    ecx,eax
c000c3c8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000c3cf:	83 e0 7f             	and    eax,0x7f
c000c3d2:	01 c1                	add    ecx,eax
c000c3d4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000c3db:	83 e0 7f             	and    eax,0x7f
c000c3de:	00 c1                	add    cl,al
c000c3e0:	74 41                	je     c000c423 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000c3e2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c3e8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c3ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c3f4:	83 ec 10             	sub    esp,0x10
c000c3f7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c3fb:	89 f7                	mov    edi,esi
c000c3fd:	c1 e0 0a             	shl    eax,0xa
c000c400:	c1 ff 1f             	sar    edi,0x1f
c000c403:	57                   	push   edi
c000c404:	56                   	push   esi
c000c405:	52                   	push   edx
c000c406:	50                   	push   eax
c000c407:	e8 d4 f3 00 00       	call   c001b7e0 <__udivdi3>
c000c40c:	83 c4 14             	add    esp,0x14
c000c40f:	52                   	push   edx
c000c410:	50                   	push   eax
c000c411:	6a 00                	push   0x0
c000c413:	6a 00                	push   0x0
c000c415:	53                   	push   ebx
c000c416:	e8 53 fe ff ff       	call   c000c26e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c41b:	83 c4 20             	add    esp,0x20
c000c41e:	e9 79 01 00 00       	jmp    c000c59c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000c423:	89 f0                	mov    eax,esi
c000c425:	31 f6                	xor    esi,esi
c000c427:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000c42e:	75 02                	jne    c000c432 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000c430:	89 f1                	mov    ecx,esi
c000c432:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000c439:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000c440:	c1 e2 08             	shl    edx,0x8
c000c443:	c1 e7 10             	shl    edi,0x10
c000c446:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000c44e:	09 fa                	or     edx,edi
c000c450:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000c458:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000c45f:	83 c0 10             	add    eax,0x10
c000c462:	09 fa                	or     edx,edi
c000c464:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000c46b:	c1 e7 18             	shl    edi,0x18
c000c46e:	09 fa                	or     edx,edi
c000c470:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000c477:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000c47b:	c1 e7 10             	shl    edi,0x10
c000c47e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000c485:	c1 e2 08             	shl    edx,0x8
c000c488:	09 fa                	or     edx,edi
c000c48a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000c491:	09 fa                	or     edx,edi
c000c493:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000c49a:	c1 e7 18             	shl    edi,0x18
c000c49d:	09 fa                	or     edx,edi
c000c49f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000c4a3:	46                   	inc    esi
c000c4a4:	83 fe 04             	cmp    esi,0x4
c000c4a7:	0f 85 7a ff ff ff    	jne    c000c427 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000c4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b1:	83 f0 01             	xor    eax,0x1
c000c4b4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c4b8:	75 57                	jne    c000c511 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c4ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c4be:	83 f0 01             	xor    eax,0x1
c000c4c1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c4c5:	75 4a                	jne    c000c511 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c4c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000c4cb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c4d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c4db:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c4e1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c4e7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c4ed:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c4f1:	89 f7                	mov    edi,esi
c000c4f3:	c1 e0 0a             	shl    eax,0xa
c000c4f6:	c1 ff 1f             	sar    edi,0x1f
c000c4f9:	57                   	push   edi
c000c4fa:	56                   	push   esi
c000c4fb:	52                   	push   edx
c000c4fc:	50                   	push   eax
c000c4fd:	e8 de f2 00 00       	call   c001b7e0 <__udivdi3>
c000c502:	83 c4 10             	add    esp,0x10
c000c505:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c509:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c50d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000c511:	84 c9                	test   cl,cl
c000c513:	74 53                	je     c000c568 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000c515:	0f b6 c9             	movzx  ecx,cl
c000c518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c51c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c520:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c524:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c528:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c52c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c530:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000c534:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000c538:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c53c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c544:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c548:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000c54c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000c550:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000c554:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000c558:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c55c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c560:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000c564:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000c568:	31 ed                	xor    ebp,ebp
c000c56a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000c56e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000c572:	89 f8                	mov    eax,edi
c000c574:	09 f0                	or     eax,esi
c000c576:	74 1e                	je     c000c596 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c578:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000c57c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000c580:	89 d1                	mov    ecx,edx
c000c582:	09 c1                	or     ecx,eax
c000c584:	74 10                	je     c000c596 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c586:	83 ec 0c             	sub    esp,0xc
c000c589:	57                   	push   edi
c000c58a:	56                   	push   esi
c000c58b:	52                   	push   edx
c000c58c:	50                   	push   eax
c000c58d:	53                   	push   ebx
c000c58e:	e8 db fc ff ff       	call   c000c26e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c593:	83 c4 20             	add    esp,0x20
c000c596:	45                   	inc    ebp
c000c597:	83 fd 04             	cmp    ebp,0x4
c000c59a:	75 ce                	jne    c000c56a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000c59c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000c5a2:	5b                   	pop    ebx
c000c5a3:	5e                   	pop    esi
c000c5a4:	5f                   	pop    edi
c000c5a5:	5d                   	pop    ebp
c000c5a6:	c3                   	ret    
c000c5a7:	90                   	nop

c000c5a8 <Serial::Serial(char const*)>:
c000c5a8:	83 ec 0c             	sub    esp,0xc
c000c5ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5af:	83 ec 08             	sub    esp,0x8
c000c5b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5b6:	50                   	push   eax
c000c5b7:	e8 44 ea ff ff       	call   c000b000 <Device::Device(char const*)>
c000c5bc:	83 c4 10             	add    esp,0x10
c000c5bf:	ba 98 d8 01 c0       	mov    edx,0xc001d898
c000c5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5c8:	89 10                	mov    DWORD PTR [eax],edx
c000c5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5ce:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000c5d8:	90                   	nop
c000c5d9:	83 c4 0c             	add    esp,0xc
c000c5dc:	c3                   	ret    
c000c5dd:	90                   	nop
c000c5de:	66 90                	xchg   ax,ax

c000c5e0 <Serial::~Serial()>:
c000c5e0:	83 ec 0c             	sub    esp,0xc
c000c5e3:	ba 98 d8 01 c0       	mov    edx,0xc001d898
c000c5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5ec:	89 10                	mov    DWORD PTR [eax],edx
c000c5ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5f2:	83 ec 0c             	sub    esp,0xc
c000c5f5:	50                   	push   eax
c000c5f6:	e8 6f e7 ff ff       	call   c000ad6a <Device::~Device()>
c000c5fb:	83 c4 10             	add    esp,0x10
c000c5fe:	90                   	nop
c000c5ff:	83 c4 0c             	add    esp,0xc
c000c602:	c3                   	ret    
c000c603:	90                   	nop

c000c604 <Serial::~Serial()>:
c000c604:	83 ec 0c             	sub    esp,0xc
c000c607:	83 ec 0c             	sub    esp,0xc
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	e8 cd ff ff ff       	call   c000c5e0 <Serial::~Serial()>
c000c613:	83 c4 10             	add    esp,0x10
c000c616:	83 ec 08             	sub    esp,0x8
c000c619:	68 58 01 00 00       	push   0x158
c000c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c622:	e8 0b d3 ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c000c627:	83 c4 10             	add    esp,0x10
c000c62a:	83 c4 0c             	add    esp,0xc
c000c62d:	c3                   	ret    
c000c62e:	66 90                	xchg   ax,ax

c000c630 <Timer::Timer(char const*)>:
c000c630:	83 ec 0c             	sub    esp,0xc
c000c633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c637:	83 ec 08             	sub    esp,0x8
c000c63a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63e:	50                   	push   eax
c000c63f:	e8 bc e9 ff ff       	call   c000b000 <Device::Device(char const*)>
c000c644:	83 c4 10             	add    esp,0x10
c000c647:	ba dc d8 01 c0       	mov    edx,0xc001d8dc
c000c64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c650:	89 10                	mov    DWORD PTR [eax],edx
c000c652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c656:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000c660:	90                   	nop
c000c661:	83 c4 0c             	add    esp,0xc
c000c664:	c3                   	ret    
c000c665:	90                   	nop
c000c666:	66 90                	xchg   ax,ax

c000c668 <Timer::~Timer()>:
c000c668:	83 ec 0c             	sub    esp,0xc
c000c66b:	ba dc d8 01 c0       	mov    edx,0xc001d8dc
c000c670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c674:	89 10                	mov    DWORD PTR [eax],edx
c000c676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	50                   	push   eax
c000c67e:	e8 e7 e6 ff ff       	call   c000ad6a <Device::~Device()>
c000c683:	83 c4 10             	add    esp,0x10
c000c686:	90                   	nop
c000c687:	83 c4 0c             	add    esp,0xc
c000c68a:	c3                   	ret    
c000c68b:	90                   	nop

c000c68c <Timer::~Timer()>:
c000c68c:	83 ec 0c             	sub    esp,0xc
c000c68f:	83 ec 0c             	sub    esp,0xc
c000c692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c696:	e8 cd ff ff ff       	call   c000c668 <Timer::~Timer()>
c000c69b:	83 c4 10             	add    esp,0x10
c000c69e:	83 ec 08             	sub    esp,0x8
c000c6a1:	68 5c 01 00 00       	push   0x15c
c000c6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6aa:	e8 83 d2 ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c000c6af:	83 c4 10             	add    esp,0x10
c000c6b2:	83 c4 0c             	add    esp,0xc
c000c6b5:	c3                   	ret    

c000c6b6 <Timer::read()>:
c000c6b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c6c0:	c3                   	ret    

c000c6c1 <setupTimer(int)>:
c000c6c1:	53                   	push   ebx
c000c6c2:	83 ec 14             	sub    esp,0x14
c000c6c5:	68 5c 01 00 00       	push   0x15c
c000c6ca:	e8 96 a5 ff ff       	call   c0006c65 <malloc>
c000c6cf:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6d2:	89 c3                	mov    ebx,eax
c000c6d4:	e8 7b ea 00 00       	call   c001b154 <PIT::PIT()>
c000c6d9:	58                   	pop    eax
c000c6da:	5a                   	pop    edx
c000c6db:	53                   	push   ebx
c000c6dc:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c000c6e2:	e8 81 e7 ff ff       	call   c000ae68 <Device::addChild(Device*)>
c000c6e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6e9:	6a 00                	push   0x0
c000c6eb:	6a 00                	push   0x0
c000c6ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c6f1:	53                   	push   ebx
c000c6f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c6f5:	89 d8                	mov    eax,ebx
c000c6f7:	83 c4 28             	add    esp,0x28
c000c6fa:	5b                   	pop    ebx
c000c6fb:	c3                   	ret    

c000c6fc <timerHandler(unsigned int)>:
c000c6fc:	56                   	push   esi
c000c6fd:	53                   	push   ebx
c000c6fe:	51                   	push   ecx
c000c6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c703:	01 05 ec 1b 02 c0    	add    DWORD PTR ds:0xc0021bec,eax
c000c709:	80 3d 0d f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f60d,0x0
c000c710:	0f 84 4a 01 00 00    	je     c000c860 <timerHandler(unsigned int)+0x164>
c000c716:	fa                   	cli    
c000c717:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c000c71d:	83 ec 0c             	sub    esp,0xc
c000c720:	ff 05 e4 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae4
c000c726:	68 f8 2a 02 c0       	push   0xc0022af8
c000c72b:	e8 80 f6 00 00       	call   c001bdb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c730:	83 c4 10             	add    esp,0x10
c000c733:	84 c0                	test   al,al
c000c735:	0f 85 a1 00 00 00    	jne    c000c7dc <timerHandler(unsigned int)+0xe0>
c000c73b:	83 ec 0c             	sub    esp,0xc
c000c73e:	68 f8 2a 02 c0       	push   0xc0022af8
c000c743:	e8 84 f6 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c748:	83 c4 10             	add    esp,0x10
c000c74b:	89 c6                	mov    esi,eax
c000c74d:	8d 76 00             	lea    esi,[esi+0x0]
c000c750:	83 ec 0c             	sub    esp,0xc
c000c753:	68 f8 2a 02 c0       	push   0xc0022af8
c000c758:	e8 6f f6 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c75d:	c7 04 24 f8 2a 02 c0 	mov    DWORD PTR [esp],0xc0022af8
c000c764:	89 c3                	mov    ebx,eax
c000c766:	e8 69 f6 00 00       	call   c001bdd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000c76b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000c76e:	83 c4 10             	add    esp,0x10
c000c771:	3b 05 ec 1b 02 c0    	cmp    eax,DWORD PTR ds:0xc0021bec
c000c777:	77 23                	ja     c000c79c <timerHandler(unsigned int)+0xa0>
c000c779:	83 ec 0c             	sub    esp,0xc
c000c77c:	53                   	push   ebx
c000c77d:	e8 c2 67 00 00       	call   c0012f44 <unblockTask(ThreadControlBlock*)>
c000c782:	83 c4 10             	add    esp,0x10
c000c785:	39 de                	cmp    esi,ebx
c000c787:	75 27                	jne    c000c7b0 <timerHandler(unsigned int)+0xb4>
c000c789:	83 ec 0c             	sub    esp,0xc
c000c78c:	68 f8 2a 02 c0       	push   0xc0022af8
c000c791:	e8 36 f6 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c796:	89 c6                	mov    esi,eax
c000c798:	eb 12                	jmp    c000c7ac <timerHandler(unsigned int)+0xb0>
c000c79a:	66 90                	xchg   ax,ax
c000c79c:	52                   	push   edx
c000c79d:	52                   	push   edx
c000c79e:	53                   	push   ebx
c000c79f:	68 f8 2a 02 c0       	push   0xc0022af8
c000c7a4:	e8 e3 f6 00 00       	call   c001be8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000c7a9:	8d 76 00             	lea    esi,[esi+0x0]
c000c7ac:	83 c4 10             	add    esp,0x10
c000c7af:	90                   	nop
c000c7b0:	83 ec 0c             	sub    esp,0xc
c000c7b3:	68 f8 2a 02 c0       	push   0xc0022af8
c000c7b8:	e8 f3 f5 00 00       	call   c001bdb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c7bd:	83 c4 10             	add    esp,0x10
c000c7c0:	84 c0                	test   al,al
c000c7c2:	75 18                	jne    c000c7dc <timerHandler(unsigned int)+0xe0>
c000c7c4:	83 ec 0c             	sub    esp,0xc
c000c7c7:	68 f8 2a 02 c0       	push   0xc0022af8
c000c7cc:	e8 fb f5 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c7d1:	83 c4 10             	add    esp,0x10
c000c7d4:	39 f0                	cmp    eax,esi
c000c7d6:	0f 85 74 ff ff ff    	jne    c000c750 <timerHandler(unsigned int)+0x54>
c000c7dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c7e1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000c7e5:	74 41                	je     c000c828 <timerHandler(unsigned int)+0x12c>
c000c7e7:	80 3d 0c f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f60c,0x0
c000c7ee:	74 38                	je     c000c828 <timerHandler(unsigned int)+0x12c>
c000c7f0:	fa                   	cli    
c000c7f1:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c000c7f7:	a1 ec 1b 02 c0       	mov    eax,ds:0xc0021bec
c000c7fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c802:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000c805:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c80b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000c80e:	72 08                	jb     c000c818 <timerHandler(unsigned int)+0x11c>
c000c810:	e8 6b 62 00 00       	call   c0012a80 <schedule()>
c000c815:	8d 76 00             	lea    esi,[esi+0x0]
c000c818:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000c81d:	48                   	dec    eax
c000c81e:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c000c823:	75 03                	jne    c000c828 <timerHandler(unsigned int)+0x12c>
c000c825:	fb                   	sti    
c000c826:	66 90                	xchg   ax,ax
c000c828:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c000c82d:	48                   	dec    eax
c000c82e:	a3 e4 2a 02 c0       	mov    ds:0xc0022ae4,eax
c000c833:	75 1b                	jne    c000c850 <timerHandler(unsigned int)+0x154>
c000c835:	83 3d e0 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022ae0,0x0
c000c83c:	74 12                	je     c000c850 <timerHandler(unsigned int)+0x154>
c000c83e:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c000c848:	e8 33 62 00 00       	call   c0012a80 <schedule()>
c000c84d:	8d 76 00             	lea    esi,[esi+0x0]
c000c850:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000c855:	48                   	dec    eax
c000c856:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c000c85b:	75 03                	jne    c000c860 <timerHandler(unsigned int)+0x164>
c000c85d:	fb                   	sti    
c000c85e:	66 90                	xchg   ax,ax
c000c860:	58                   	pop    eax
c000c861:	5b                   	pop    ebx
c000c862:	5e                   	pop    esi
c000c863:	c3                   	ret    

c000c864 <VCache::VCache(PhysicalDisk*)>:
c000c864:	53                   	push   ebx
c000c865:	83 ec 18             	sub    esp,0x18
c000c868:	ba 0c d9 01 c0       	mov    edx,0xc001d90c
c000c86d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c871:	89 10                	mov    DWORD PTR [eax],edx
c000c873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c877:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000c87e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c882:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000c889:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c88d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000c894:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000c89b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c89f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000c8a6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000c8ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8b1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000c8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8bc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c8c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8c4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000c8cb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000c8d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8d6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c8da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8de:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000c8e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8e6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c8ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ee:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c8f5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000c8fd:	83 ec 0c             	sub    esp,0xc
c000c900:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c904:	e8 5c a3 ff ff       	call   c0006c65 <malloc>
c000c909:	83 c4 10             	add    esp,0x10
c000c90c:	89 c3                	mov    ebx,eax
c000c90e:	83 ec 0c             	sub    esp,0xc
c000c911:	53                   	push   ebx
c000c912:	e8 35 5f 00 00       	call   c001284c <Mutex::Mutex()>
c000c917:	83 c4 10             	add    esp,0x10
c000c91a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c91e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000c921:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c925:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c929:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000c92c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c930:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000c937:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c93b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c945:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c948:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c94c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000c952:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c958:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c95c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000c95f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000c962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c966:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c96a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c96e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c974:	05 00 01 00 00       	add    eax,0x100
c000c979:	c1 e0 04             	shl    eax,0x4
c000c97c:	83 ec 0c             	sub    esp,0xc
c000c97f:	50                   	push   eax
c000c980:	e8 e0 a2 ff ff       	call   c0006c65 <malloc>
c000c985:	83 c4 10             	add    esp,0x10
c000c988:	89 c2                	mov    edx,eax
c000c98a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c98e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000c991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c995:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c99c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c9a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c9a8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c9ae:	c1 e0 06             	shl    eax,0x6
c000c9b1:	83 ec 0c             	sub    esp,0xc
c000c9b4:	50                   	push   eax
c000c9b5:	e8 ab a2 ff ff       	call   c0006c65 <malloc>
c000c9ba:	83 c4 10             	add    esp,0x10
c000c9bd:	89 c2                	mov    edx,eax
c000c9bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c9c6:	90                   	nop
c000c9c7:	83 c4 18             	add    esp,0x18
c000c9ca:	5b                   	pop    ebx
c000c9cb:	c3                   	ret    

c000c9cc <VCache::invalidateReadBuffer()>:
c000c9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9d0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000c9d6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c9da:	c3                   	ret    
c000c9db:	90                   	nop

c000c9dc <VCache::writeWriteBuffer()>:
c000c9dc:	53                   	push   ebx
c000c9dd:	83 ec 08             	sub    esp,0x8
c000c9e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c9e4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c9e8:	74 1e                	je     c000ca08 <VCache::writeWriteBuffer()+0x2c>
c000c9ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c9ed:	83 ec 0c             	sub    esp,0xc
c000c9f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9f2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000c9f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000c9f8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000c9fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c9fe:	50                   	push   eax
c000c9ff:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ca02:	83 c4 20             	add    esp,0x20
c000ca05:	8d 76 00             	lea    esi,[esi+0x0]
c000ca08:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ca0f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000ca16:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000ca1a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000ca21:	83 c4 08             	add    esp,0x8
c000ca24:	5b                   	pop    ebx
c000ca25:	c3                   	ret    
c000ca26:	66 90                	xchg   ax,ax

c000ca28 <VCache::~VCache()>:
c000ca28:	83 ec 0c             	sub    esp,0xc
c000ca2b:	ba 0c d9 01 c0       	mov    edx,0xc001d90c
c000ca30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca34:	89 10                	mov    DWORD PTR [eax],edx
c000ca36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca3a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000ca3d:	84 c0                	test   al,al
c000ca3f:	74 0f                	je     c000ca50 <VCache::~VCache()+0x28>
c000ca41:	83 ec 0c             	sub    esp,0xc
c000ca44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca48:	e8 8f ff ff ff       	call   c000c9dc <VCache::writeWriteBuffer()>
c000ca4d:	83 c4 10             	add    esp,0x10
c000ca50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca54:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ca57:	83 ec 0c             	sub    esp,0xc
c000ca5a:	50                   	push   eax
c000ca5b:	e8 15 a2 ff ff       	call   c0006c75 <free>
c000ca60:	83 c4 10             	add    esp,0x10
c000ca63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca67:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ca6a:	83 ec 0c             	sub    esp,0xc
c000ca6d:	50                   	push   eax
c000ca6e:	e8 02 a2 ff ff       	call   c0006c75 <free>
c000ca73:	83 c4 10             	add    esp,0x10
c000ca76:	90                   	nop
c000ca77:	83 c4 0c             	add    esp,0xc
c000ca7a:	c3                   	ret    
c000ca7b:	90                   	nop

c000ca7c <VCache::~VCache()>:
c000ca7c:	83 ec 0c             	sub    esp,0xc
c000ca7f:	83 ec 0c             	sub    esp,0xc
c000ca82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca86:	e8 9d ff ff ff       	call   c000ca28 <VCache::~VCache()>
c000ca8b:	83 c4 10             	add    esp,0x10
c000ca8e:	83 ec 08             	sub    esp,0x8
c000ca91:	6a 44                	push   0x44
c000ca93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca97:	e8 96 ce ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c000ca9c:	83 c4 10             	add    esp,0x10
c000ca9f:	83 c4 0c             	add    esp,0xc
c000caa2:	c3                   	ret    
c000caa3:	90                   	nop

c000caa4 <VCache::write(unsigned long long, int, void*)>:
c000caa4:	55                   	push   ebp
c000caa5:	31 c0                	xor    eax,eax
c000caa7:	57                   	push   edi
c000caa8:	56                   	push   esi
c000caa9:	53                   	push   ebx
c000caaa:	83 ec 0c             	sub    esp,0xc
c000caad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cab1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000cab5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000cab9:	8d 76 00             	lea    esi,[esi+0x0]
c000cabc:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000cac0:	7d 1a                	jge    c000cadc <VCache::write(unsigned long long, int, void*)+0x38>
c000cac2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000cac5:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000cacb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cacf:	0f af c8             	imul   ecx,eax
c000cad2:	01 ca                	add    edx,ecx
c000cad4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000cad6:	40                   	inc    eax
c000cad7:	eb e3                	jmp    c000cabc <VCache::write(unsigned long long, int, void*)+0x18>
c000cad9:	8d 76 00             	lea    esi,[esi+0x0]
c000cadc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000cae0:	74 0a                	je     c000caec <VCache::write(unsigned long long, int, void*)+0x48>
c000cae2:	53                   	push   ebx
c000cae3:	e8 e4 fe ff ff       	call   c000c9cc <VCache::invalidateReadBuffer()>
c000cae8:	58                   	pop    eax
c000cae9:	8d 76 00             	lea    esi,[esi+0x0]
c000caec:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000caf0:	74 5e                	je     c000cb50 <VCache::write(unsigned long long, int, void*)+0xac>
c000caf2:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000caf5:	89 e8                	mov    eax,ebp
c000caf7:	99                   	cdq    
c000caf8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000cafb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000cafe:	89 c1                	mov    ecx,eax
c000cb00:	89 d0                	mov    eax,edx
c000cb02:	31 f1                	xor    ecx,esi
c000cb04:	31 f8                	xor    eax,edi
c000cb06:	09 c1                	or     ecx,eax
c000cb08:	75 3a                	jne    c000cb44 <VCache::write(unsigned long long, int, void*)+0xa0>
c000cb0a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000cb0f:	75 33                	jne    c000cb44 <VCache::write(unsigned long long, int, void*)+0xa0>
c000cb11:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cb14:	89 ef                	mov    edi,ebp
c000cb16:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cb1c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cb20:	0f af f9             	imul   edi,ecx
c000cb23:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000cb26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb28:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000cb2b:	40                   	inc    eax
c000cb2c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000cb2f:	83 f8 40             	cmp    eax,0x40
c000cb32:	75 60                	jne    c000cb94 <VCache::write(unsigned long long, int, void*)+0xf0>
c000cb34:	83 ec 0c             	sub    esp,0xc
c000cb37:	53                   	push   ebx
c000cb38:	e8 9f fe ff ff       	call   c000c9dc <VCache::writeWriteBuffer()>
c000cb3d:	83 c4 10             	add    esp,0x10
c000cb40:	eb 52                	jmp    c000cb94 <VCache::write(unsigned long long, int, void*)+0xf0>
c000cb42:	66 90                	xchg   ax,ax
c000cb44:	83 ec 0c             	sub    esp,0xc
c000cb47:	53                   	push   ebx
c000cb48:	e8 8f fe ff ff       	call   c000c9dc <VCache::writeWriteBuffer()>
c000cb4d:	83 c4 10             	add    esp,0x10
c000cb50:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cb53:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000cb58:	7f 22                	jg     c000cb7c <VCache::write(unsigned long long, int, void*)+0xd8>
c000cb5a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000cb5d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000cb60:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb64:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000cb68:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000cb6b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000cb6e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cb74:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cb78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb7a:	eb 18                	jmp    c000cb94 <VCache::write(unsigned long long, int, void*)+0xf0>
c000cb7c:	83 ec 0c             	sub    esp,0xc
c000cb7f:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb89:	57                   	push   edi
c000cb8a:	56                   	push   esi
c000cb8b:	50                   	push   eax
c000cb8c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000cb8f:	83 c4 20             	add    esp,0x20
c000cb92:	66 90                	xchg   ax,ax
c000cb94:	83 c4 0c             	add    esp,0xc
c000cb97:	31 c0                	xor    eax,eax
c000cb99:	5b                   	pop    ebx
c000cb9a:	5e                   	pop    esi
c000cb9b:	5f                   	pop    edi
c000cb9c:	5d                   	pop    ebp
c000cb9d:	c3                   	ret    

c000cb9e <VCache::read(unsigned long long, int, void*)>:
c000cb9e:	55                   	push   ebp
c000cb9f:	31 c0                	xor    eax,eax
c000cba1:	57                   	push   edi
c000cba2:	56                   	push   esi
c000cba3:	53                   	push   ebx
c000cba4:	83 ec 1c             	sub    esp,0x1c
c000cba7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000cbab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000cbaf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000cbb3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000cbb7:	90                   	nop
c000cbb8:	39 e8                	cmp    eax,ebp
c000cbba:	7d 18                	jge    c000cbd4 <VCache::read(unsigned long long, int, void*)+0x36>
c000cbbc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000cbbf:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000cbc5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cbc9:	0f af c8             	imul   ecx,eax
c000cbcc:	01 ca                	add    edx,ecx
c000cbce:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000cbd0:	40                   	inc    eax
c000cbd1:	eb e5                	jmp    c000cbb8 <VCache::read(unsigned long long, int, void*)+0x1a>
c000cbd3:	90                   	nop
c000cbd4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000cbd8:	74 0e                	je     c000cbe8 <VCache::read(unsigned long long, int, void*)+0x4a>
c000cbda:	83 ec 0c             	sub    esp,0xc
c000cbdd:	53                   	push   ebx
c000cbde:	e8 f9 fd ff ff       	call   c000c9dc <VCache::writeWriteBuffer()>
c000cbe3:	83 c4 10             	add    esp,0x10
c000cbe6:	66 90                	xchg   ax,ax
c000cbe8:	83 fd 01             	cmp    ebp,0x1
c000cbeb:	0f 85 87 00 00 00    	jne    c000cc78 <VCache::read(unsigned long long, int, void*)+0xda>
c000cbf1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cbf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cbf8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000cbff:	75 77                	jne    c000cc78 <VCache::read(unsigned long long, int, void*)+0xda>
c000cc01:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000cc04:	89 e9                	mov    ecx,ebp
c000cc06:	f7 d9                	neg    ecx
c000cc08:	89 c8                	mov    eax,ecx
c000cc0a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cc0e:	c1 f8 1f             	sar    eax,0x1f
c000cc11:	21 f1                	and    ecx,esi
c000cc13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cc17:	89 c8                	mov    eax,ecx
c000cc19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc1d:	21 f9                	and    ecx,edi
c000cc1f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000cc23:	89 ca                	mov    edx,ecx
c000cc25:	74 0d                	je     c000cc34 <VCache::read(unsigned long long, int, void*)+0x96>
c000cc27:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000cc2a:	75 08                	jne    c000cc34 <VCache::read(unsigned long long, int, void*)+0x96>
c000cc2c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000cc2f:	74 27                	je     c000cc58 <VCache::read(unsigned long long, int, void*)+0xba>
c000cc31:	8d 76 00             	lea    esi,[esi+0x0]
c000cc34:	83 ec 0c             	sub    esp,0xc
c000cc37:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000cc3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cc3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000cc42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc45:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000cc47:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000cc4a:	55                   	push   ebp
c000cc4b:	52                   	push   edx
c000cc4c:	50                   	push   eax
c000cc4d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cc51:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000cc54:	83 c4 20             	add    esp,0x20
c000cc57:	90                   	nop
c000cc58:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cc5b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cc5f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cc65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000cc68:	48                   	dec    eax
c000cc69:	21 c6                	and    esi,eax
c000cc6b:	0f af f1             	imul   esi,ecx
c000cc6e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000cc71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc73:	eb 23                	jmp    c000cc98 <VCache::read(unsigned long long, int, void*)+0xfa>
c000cc75:	8d 76 00             	lea    esi,[esi+0x0]
c000cc78:	83 ec 0c             	sub    esp,0xc
c000cc7b:	53                   	push   ebx
c000cc7c:	e8 4b fd ff ff       	call   c000c9cc <VCache::invalidateReadBuffer()>
c000cc81:	5a                   	pop    edx
c000cc82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cc85:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cc8b:	55                   	push   ebp
c000cc8c:	57                   	push   edi
c000cc8d:	56                   	push   esi
c000cc8e:	50                   	push   eax
c000cc8f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000cc92:	83 c4 20             	add    esp,0x20
c000cc95:	8d 76 00             	lea    esi,[esi+0x0]
c000cc98:	83 c4 1c             	add    esp,0x1c
c000cc9b:	31 c0                	xor    eax,eax
c000cc9d:	5b                   	pop    ebx
c000cc9e:	5e                   	pop    esi
c000cc9f:	5f                   	pop    edi
c000cca0:	5d                   	pop    ebp
c000cca1:	c3                   	ret    

c000cca2 <Video::putrect(int, int, int, int, unsigned int)>:
c000cca2:	55                   	push   ebp
c000cca3:	57                   	push   edi
c000cca4:	56                   	push   esi
c000cca5:	53                   	push   ebx
c000cca6:	83 ec 1c             	sub    esp,0x1c
c000cca9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ccad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ccb1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ccb5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ccb9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ccbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ccc1:	01 df                	add    edi,ebx
c000ccc3:	39 fb                	cmp    ebx,edi
c000ccc5:	7d 1f                	jge    c000cce6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ccc7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cccb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000cccf:	7d 12                	jge    c000cce3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ccd1:	8b 16                	mov    edx,DWORD PTR [esi]
c000ccd3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ccd7:	53                   	push   ebx
c000ccd8:	55                   	push   ebp
c000ccd9:	45                   	inc    ebp
c000ccda:	56                   	push   esi
c000ccdb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ccde:	83 c4 10             	add    esp,0x10
c000cce1:	eb e8                	jmp    c000cccb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000cce3:	43                   	inc    ebx
c000cce4:	eb dd                	jmp    c000ccc3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000cce6:	83 c4 1c             	add    esp,0x1c
c000cce9:	5b                   	pop    ebx
c000ccea:	5e                   	pop    esi
c000cceb:	5f                   	pop    edi
c000ccec:	5d                   	pop    ebp
c000cced:	c3                   	ret    

c000ccee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ccee:	55                   	push   ebp
c000ccef:	57                   	push   edi
c000ccf0:	31 ff                	xor    edi,edi
c000ccf2:	56                   	push   esi
c000ccf3:	53                   	push   ebx
c000ccf4:	83 ec 1c             	sub    esp,0x1c
c000ccf7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ccfb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ccff:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000cd06:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000cd0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd0f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000cd13:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cd17:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000cd1a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cd1e:	01 f9                	add    ecx,edi
c000cd20:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000cd24:	7d 2f                	jge    c000cd55 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000cd26:	31 f6                	xor    esi,esi
c000cd28:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000cd2c:	01 f2                	add    edx,esi
c000cd2e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000cd32:	7d 1a                	jge    c000cd4e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000cd34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cd37:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000cd3a:	46                   	inc    esi
c000cd3b:	51                   	push   ecx
c000cd3c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd40:	52                   	push   edx
c000cd41:	55                   	push   ebp
c000cd42:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cd45:	83 c4 10             	add    esp,0x10
c000cd48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cd4c:	eb da                	jmp    c000cd28 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000cd4e:	47                   	inc    edi
c000cd4f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000cd53:	eb c5                	jmp    c000cd1a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000cd55:	83 c4 1c             	add    esp,0x1c
c000cd58:	5b                   	pop    ebx
c000cd59:	5e                   	pop    esi
c000cd5a:	5f                   	pop    edi
c000cd5b:	5d                   	pop    ebp
c000cd5c:	c3                   	ret    
c000cd5d:	90                   	nop

c000cd5e <Video::blit(unsigned int*, int, int, int, int)>:
c000cd5e:	55                   	push   ebp
c000cd5f:	57                   	push   edi
c000cd60:	56                   	push   esi
c000cd61:	53                   	push   ebx
c000cd62:	83 ec 1c             	sub    esp,0x1c
c000cd65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cd6d:	85 c0                	test   eax,eax
c000cd6f:	79 02                	jns    c000cd73 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000cd71:	31 c0                	xor    eax,eax
c000cd73:	c1 e0 02             	shl    eax,0x2
c000cd76:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cd7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cd7e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cd82:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000cd86:	39 d8                	cmp    eax,ebx
c000cd88:	7e 49                	jle    c000cdd3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cd8a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cd90:	7c 41                	jl     c000cdd3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cd92:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000cd96:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cd9a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cd9e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000cda2:	39 f9                	cmp    ecx,edi
c000cda4:	7e 22                	jle    c000cdc8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000cda6:	83 c5 04             	add    ebp,0x4
c000cda9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000cdaf:	7c 14                	jl     c000cdc5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000cdb1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000cdb3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000cdb6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cdba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cdbe:	56                   	push   esi
c000cdbf:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000cdc2:	83 c4 10             	add    esp,0x10
c000cdc5:	47                   	inc    edi
c000cdc6:	eb d2                	jmp    c000cd9a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000cdc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cdcc:	43                   	inc    ebx
c000cdcd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000cdd1:	eb ab                	jmp    c000cd7e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000cdd3:	83 c4 1c             	add    esp,0x1c
c000cdd6:	5b                   	pop    ebx
c000cdd7:	5e                   	pop    esi
c000cdd8:	5f                   	pop    edi
c000cdd9:	5d                   	pop    ebp
c000cdda:	c3                   	ret    
c000cddb:	90                   	nop

c000cddc <Video::clearScreen(unsigned int)>:
c000cddc:	57                   	push   edi
c000cddd:	56                   	push   esi
c000cdde:	53                   	push   ebx
c000cddf:	31 db                	xor    ebx,ebx
c000cde1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cde5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cdeb:	7e 1f                	jle    c000ce0c <Video::clearScreen(unsigned int)+0x30>
c000cded:	31 ff                	xor    edi,edi
c000cdef:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000cdf5:	7e 12                	jle    c000ce09 <Video::clearScreen(unsigned int)+0x2d>
c000cdf7:	8b 06                	mov    eax,DWORD PTR [esi]
c000cdf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfd:	53                   	push   ebx
c000cdfe:	57                   	push   edi
c000cdff:	47                   	inc    edi
c000ce00:	56                   	push   esi
c000ce01:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ce04:	83 c4 10             	add    esp,0x10
c000ce07:	eb e6                	jmp    c000cdef <Video::clearScreen(unsigned int)+0x13>
c000ce09:	43                   	inc    ebx
c000ce0a:	eb d9                	jmp    c000cde5 <Video::clearScreen(unsigned int)+0x9>
c000ce0c:	5b                   	pop    ebx
c000ce0d:	5e                   	pop    esi
c000ce0e:	5f                   	pop    edi
c000ce0f:	c3                   	ret    

c000ce10 <Video::putpixel(int, int, unsigned int)>:
c000ce10:	c7 44 24 04 14 d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d914
c000ce18:	e9 84 27 00 00       	jmp    c000f5a1 <Krnl::panic(char const*)>
c000ce1d:	90                   	nop

c000ce1e <Video::Video(char const*)>:
c000ce1e:	83 ec 0c             	sub    esp,0xc
c000ce21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce25:	83 ec 08             	sub    esp,0x8
c000ce28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce2c:	50                   	push   eax
c000ce2d:	e8 ce e1 ff ff       	call   c000b000 <Device::Device(char const*)>
c000ce32:	83 c4 10             	add    esp,0x10
c000ce35:	ba 84 d9 01 c0       	mov    edx,0xc001d984
c000ce3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3e:	89 10                	mov    DWORD PTR [eax],edx
c000ce40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce44:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ce4e:	90                   	nop
c000ce4f:	83 c4 0c             	add    esp,0xc
c000ce52:	c3                   	ret    
c000ce53:	90                   	nop

c000ce54 <Video::~Video()>:
c000ce54:	83 ec 0c             	sub    esp,0xc
c000ce57:	ba 84 d9 01 c0       	mov    edx,0xc001d984
c000ce5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce60:	89 10                	mov    DWORD PTR [eax],edx
c000ce62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce66:	83 ec 0c             	sub    esp,0xc
c000ce69:	50                   	push   eax
c000ce6a:	e8 fb de ff ff       	call   c000ad6a <Device::~Device()>
c000ce6f:	83 c4 10             	add    esp,0x10
c000ce72:	90                   	nop
c000ce73:	83 c4 0c             	add    esp,0xc
c000ce76:	c3                   	ret    
c000ce77:	90                   	nop

c000ce78 <Video::~Video()>:
c000ce78:	83 ec 0c             	sub    esp,0xc
c000ce7b:	83 ec 0c             	sub    esp,0xc
c000ce7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce82:	e8 cd ff ff ff       	call   c000ce54 <Video::~Video()>
c000ce87:	83 c4 10             	add    esp,0x10
c000ce8a:	83 ec 08             	sub    esp,0x8
c000ce8d:	68 64 01 00 00       	push   0x164
c000ce92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce96:	e8 97 ca ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c000ce9b:	83 c4 10             	add    esp,0x10
c000ce9e:	83 c4 0c             	add    esp,0xc
c000cea1:	c3                   	ret    

c000cea2 <Video::isMonochrome()>:
c000cea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cea6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ceac:	c3                   	ret    
c000cead:	90                   	nop

c000ceae <Video::getWidth()>:
c000ceae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceb2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ceb8:	c3                   	ret    
c000ceb9:	90                   	nop

c000ceba <Video::getHeight()>:
c000ceba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cebe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000cec4:	c3                   	ret    
c000cec5:	90                   	nop

c000cec6 <Video::drawCursor(int, int, unsigned char*, int)>:
c000cec6:	55                   	push   ebp
c000cec7:	57                   	push   edi
c000cec8:	56                   	push   esi
c000cec9:	53                   	push   ebx
c000ceca:	83 ec 2c             	sub    esp,0x2c
c000cecd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ced1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ced5:	83 f8 01             	cmp    eax,0x1
c000ced8:	19 c9                	sbb    ecx,ecx
c000ceda:	31 db                	xor    ebx,ebx
c000cedc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000cee0:	89 cd                	mov    ebp,ecx
c000cee2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ceea:	f7 d5                	not    ebp
c000ceec:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000cef2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cef6:	01 d8                	add    eax,ebx
c000cef8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cefc:	56                   	push   esi
c000cefd:	e8 b8 ff ff ff       	call   c000ceba <Video::getHeight()>
c000cf02:	59                   	pop    ecx
c000cf03:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cf07:	7e 70                	jle    c000cf79 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000cf09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cf0d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000cf11:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000cf14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf18:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cf1c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000cf23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf27:	89 f8                	mov    eax,edi
c000cf29:	83 c0 20             	add    eax,0x20
c000cf2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cf30:	56                   	push   esi
c000cf31:	e8 78 ff ff ff       	call   c000ceae <Video::getWidth()>
c000cf36:	5a                   	pop    edx
c000cf37:	39 c7                	cmp    edi,eax
c000cf39:	7d 34                	jge    c000cf6f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000cf3b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000cf40:	74 05                	je     c000cf47 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000cf42:	8b 06                	mov    eax,DWORD PTR [esi]
c000cf44:	55                   	push   ebp
c000cf45:	eb 0d                	jmp    c000cf54 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000cf47:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000cf4c:	74 12                	je     c000cf60 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000cf4e:	8b 06                	mov    eax,DWORD PTR [esi]
c000cf50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cf58:	57                   	push   edi
c000cf59:	56                   	push   esi
c000cf5a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cf5d:	83 c4 10             	add    esp,0x10
c000cf60:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000cf64:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000cf68:	47                   	inc    edi
c000cf69:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000cf6d:	75 c1                	jne    c000cf30 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000cf6f:	43                   	inc    ebx
c000cf70:	83 fb 20             	cmp    ebx,0x20
c000cf73:	0f 85 79 ff ff ff    	jne    c000cef2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000cf79:	83 c4 2c             	add    esp,0x2c
c000cf7c:	5b                   	pop    ebx
c000cf7d:	5e                   	pop    esi
c000cf7e:	5f                   	pop    edi
c000cf7f:	5d                   	pop    ebp
c000cf80:	c3                   	ret    
c000cf81:	90                   	nop

c000cf82 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000cf82:	55                   	push   ebp
c000cf83:	57                   	push   edi
c000cf84:	56                   	push   esi
c000cf85:	53                   	push   ebx
c000cf86:	83 ec 28             	sub    esp,0x28
c000cf89:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000cf8d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000cf91:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000cf95:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000cf99:	c1 e6 08             	shl    esi,0x8
c000cf9c:	01 c6                	add    esi,eax
c000cf9e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000cfa2:	c1 e0 08             	shl    eax,0x8
c000cfa5:	01 d0                	add    eax,edx
c000cfa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cfab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfaf:	0f af c6             	imul   eax,esi
c000cfb2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000cfb9:	50                   	push   eax
c000cfba:	e8 a6 9c ff ff       	call   c0006c65 <malloc>
c000cfbf:	83 c4 10             	add    esp,0x10
c000cfc2:	89 c7                	mov    edi,eax
c000cfc4:	85 c0                	test   eax,eax
c000cfc6:	75 10                	jne    c000cfd8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000cfc8:	83 ec 0c             	sub    esp,0xc
c000cfcb:	68 35 d9 01 c0       	push   0xc001d935
c000cfd0:	e8 cc 25 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000cfd5:	83 c4 10             	add    esp,0x10
c000cfd8:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000cfdb:	ba 12 00 00 00       	mov    edx,0x12
c000cfe0:	84 c0                	test   al,al
c000cfe2:	74 11                	je     c000cff5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000cfe4:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000cfe8:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000cfec:	c1 fa 03             	sar    edx,0x3
c000cfef:	0f af d1             	imul   edx,ecx
c000cff2:	83 c2 12             	add    edx,0x12
c000cff5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000cff9:	74 04                	je     c000cfff <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000cffb:	85 f6                	test   esi,esi
c000cffd:	75 12                	jne    c000d011 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000cfff:	83 ec 0c             	sub    esp,0xc
c000d002:	68 45 d9 01 c0       	push   0xc001d945
c000d007:	e8 1c ca ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c000d00c:	e9 b8 00 00 00       	jmp    c000d0c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000d011:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000d015:	80 f9 02             	cmp    cl,0x2
c000d018:	0f 85 96 00 00 00    	jne    c000d0b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000d01e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000d023:	75 0e                	jne    c000d033 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000d025:	84 c0                	test   al,al
c000d027:	75 0a                	jne    c000d033 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000d029:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000d02c:	83 e8 18             	sub    eax,0x18
c000d02f:	a8 f7                	test   al,0xf7
c000d031:	74 0a                	je     c000d03d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000d033:	83 ec 0c             	sub    esp,0xc
c000d036:	68 5a d9 01 c0       	push   0xc001d95a
c000d03b:	eb 7f                	jmp    c000d0bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000d03d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d045:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000d04d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000d051:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d059:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000d05d:	75 0c                	jne    c000d06b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000d05f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000d064:	c1 e0 18             	shl    eax,0x18
c000d067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d06b:	45                   	inc    ebp
c000d06c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000d071:	c1 e1 10             	shl    ecx,0x10
c000d074:	89 c8                	mov    eax,ecx
c000d076:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000d07b:	c1 e1 08             	shl    ecx,0x8
c000d07e:	09 c1                	or     ecx,eax
c000d080:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000d084:	09 c1                	or     ecx,eax
c000d086:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000d08a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000d08e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000d092:	c1 f8 03             	sar    eax,0x3
c000d095:	01 c2                	add    edx,eax
c000d097:	89 e8                	mov    eax,ebp
c000d099:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000d09d:	39 c6                	cmp    esi,eax
c000d09f:	7f b0                	jg     c000d051 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000d0a1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d0a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d0a9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000d0ac:	7e 22                	jle    c000d0d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000d0ae:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000d0b2:	eb 99                	jmp    c000d04d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000d0b4:	50                   	push   eax
c000d0b5:	50                   	push   eax
c000d0b6:	51                   	push   ecx
c000d0b7:	68 68 d9 01 c0       	push   0xc001d968
c000d0bc:	e8 67 c9 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c000d0c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d0c4:	e8 ac 9b ff ff       	call   c0006c75 <free>
c000d0c9:	83 c4 10             	add    esp,0x10
c000d0cc:	31 ff                	xor    edi,edi
c000d0ce:	eb 0f                	jmp    c000d0df <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000d0d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d0d4:	89 30                	mov    DWORD PTR [eax],esi
c000d0d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d0dd:	89 30                	mov    DWORD PTR [eax],esi
c000d0df:	83 c4 1c             	add    esp,0x1c
c000d0e2:	89 f8                	mov    eax,edi
c000d0e4:	5b                   	pop    ebx
c000d0e5:	5e                   	pop    esi
c000d0e6:	5f                   	pop    edi
c000d0e7:	5d                   	pop    ebp
c000d0e8:	c3                   	ret    
c000d0e9:	90                   	nop

c000d0ea <Video::putTGA(int, int, unsigned char*, int)>:
c000d0ea:	55                   	push   ebp
c000d0eb:	57                   	push   edi
c000d0ec:	56                   	push   esi
c000d0ed:	53                   	push   ebx
c000d0ee:	83 ec 28             	sub    esp,0x28
c000d0f1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000d0f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d0f9:	50                   	push   eax
c000d0fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d0fe:	50                   	push   eax
c000d0ff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d103:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d107:	56                   	push   esi
c000d108:	e8 75 fe ff ff       	call   c000cf82 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000d10d:	83 c4 20             	add    esp,0x20
c000d110:	85 c0                	test   eax,eax
c000d112:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d116:	74 35                	je     c000d14d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000d118:	89 c7                	mov    edi,eax
c000d11a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d11e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000d122:	39 d8                	cmp    eax,ebx
c000d124:	7e 27                	jle    c000d14d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000d126:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d12a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d12e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000d132:	39 e8                	cmp    eax,ebp
c000d134:	7e 14                	jle    c000d14a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000d136:	8b 06                	mov    eax,DWORD PTR [esi]
c000d138:	83 c7 04             	add    edi,0x4
c000d13b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000d13e:	53                   	push   ebx
c000d13f:	55                   	push   ebp
c000d140:	45                   	inc    ebp
c000d141:	56                   	push   esi
c000d142:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d145:	83 c4 10             	add    esp,0x10
c000d148:	eb e0                	jmp    c000d12a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000d14a:	43                   	inc    ebx
c000d14b:	eb cd                	jmp    c000d11a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000d14d:	83 c4 1c             	add    esp,0x1c
c000d150:	5b                   	pop    ebx
c000d151:	5e                   	pop    esi
c000d152:	5f                   	pop    edi
c000d153:	5d                   	pop    ebp
c000d154:	c3                   	ret    
c000d155:	66 90                	xchg   ax,ax
c000d157:	90                   	nop

c000d158 <ACPI::close(int, int, void*)>:
c000d158:	83 ec 1c             	sub    esp,0x1c
c000d15b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000d163:	74 0b                	je     c000d170 <ACPI::close(int, int, void*)+0x18>
c000d165:	b8 00 00 00 00       	mov    eax,0x0
c000d16a:	e9 9d 00 00 00       	jmp    c000d20c <ACPI::close(int, int, void*)+0xb4>
c000d16f:	90                   	nop
c000d170:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000d175:	75 29                	jne    c000d1a0 <ACPI::close(int, int, void*)+0x48>
c000d177:	a1 08 1c 02 c0       	mov    eax,ds:0xc0021c08
c000d17c:	85 c0                	test   eax,eax
c000d17e:	74 08                	je     c000d188 <ACPI::close(int, int, void*)+0x30>
c000d180:	a1 08 1c 02 c0       	mov    eax,ds:0xc0021c08
c000d185:	ff d0                	call   eax
c000d187:	90                   	nop
c000d188:	83 ec 0c             	sub    esp,0xc
c000d18b:	68 c4 d9 01 c0       	push   0xc001d9c4
c000d190:	e8 0c 24 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000d195:	83 c4 10             	add    esp,0x10
c000d198:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d19d:	eb 6d                	jmp    c000d20c <ACPI::close(int, int, void*)+0xb4>
c000d19f:	90                   	nop
c000d1a0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000d1a5:	75 5d                	jne    c000d204 <ACPI::close(int, int, void*)+0xac>
c000d1a7:	a1 04 1c 02 c0       	mov    eax,ds:0xc0021c04
c000d1ac:	85 c0                	test   eax,eax
c000d1ae:	74 08                	je     c000d1b8 <ACPI::close(int, int, void*)+0x60>
c000d1b0:	a1 04 1c 02 c0       	mov    eax,ds:0xc0021c04
c000d1b5:	ff d0                	call   eax
c000d1b7:	90                   	nop
c000d1b8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000d1bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d1c0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d1c4:	25 ff 00 00 00       	and    eax,0xff
c000d1c9:	83 e0 02             	and    eax,0x2
c000d1cc:	74 1e                	je     c000d1ec <ACPI::close(int, int, void*)+0x94>
c000d1ce:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000d1d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d1d9:	89 c2                	mov    edx,eax
c000d1db:	ec                   	in     al,dx
c000d1dc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d1e0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d1e4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d1e8:	eb d6                	jmp    c000d1c0 <ACPI::close(int, int, void*)+0x68>
c000d1ea:	66 90                	xchg   ax,ax
c000d1ec:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000d1f3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000d1f8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000d1fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d200:	ee                   	out    dx,al
c000d201:	8d 76 00             	lea    esi,[esi+0x0]
c000d204:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d209:	8d 76 00             	lea    esi,[esi+0x0]
c000d20c:	83 c4 1c             	add    esp,0x1c
c000d20f:	c3                   	ret    

c000d210 <findRSDP()>:
c000d210:	83 ec 1c             	sub    esp,0x1c
c000d213:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000d218:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d21e:	83 e0 04             	and    eax,0x4
c000d221:	84 c0                	test   al,al
c000d223:	75 07                	jne    c000d22c <findRSDP()+0x1c>
c000d225:	b8 00 00 00 00       	mov    eax,0x0
c000d22a:	eb 70                	jmp    c000d29c <findRSDP()+0x8c>
c000d22c:	a1 38 f6 01 c0       	mov    eax,ds:0xc001f638
c000d231:	3d ff 07 00 00       	cmp    eax,0x7ff
c000d236:	7f 1c                	jg     c000d254 <findRSDP()+0x44>
c000d238:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000d23d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d243:	83 e2 fb             	and    edx,0xfffffffb
c000d246:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d24c:	b8 00 00 00 00       	mov    eax,0x0
c000d251:	eb 49                	jmp    c000d29c <findRSDP()+0x8c>
c000d253:	90                   	nop
c000d254:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000d25c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000d264:	77 2e                	ja     c000d294 <findRSDP()+0x84>
c000d266:	83 ec 04             	sub    esp,0x4
c000d269:	6a 08                	push   0x8
c000d26b:	68 5f da 01 c0       	push   0xc001da5f
c000d270:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d274:	e8 37 31 ff ff       	call   c00003b0 <memcmp>
c000d279:	83 c4 10             	add    esp,0x10
c000d27c:	85 c0                	test   eax,eax
c000d27e:	0f 94 c0             	sete   al
c000d281:	84 c0                	test   al,al
c000d283:	74 07                	je     c000d28c <findRSDP()+0x7c>
c000d285:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d289:	eb 11                	jmp    c000d29c <findRSDP()+0x8c>
c000d28b:	90                   	nop
c000d28c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000d291:	eb c9                	jmp    c000d25c <findRSDP()+0x4c>
c000d293:	90                   	nop
c000d294:	b8 00 00 00 00       	mov    eax,0x0
c000d299:	8d 76 00             	lea    esi,[esi+0x0]
c000d29c:	83 c4 1c             	add    esp,0x1c
c000d29f:	c3                   	ret    

c000d2a0 <loadACPITables(unsigned char*)>:
c000d2a0:	57                   	push   edi
c000d2a1:	56                   	push   esi
c000d2a2:	53                   	push   ebx
c000d2a3:	83 ec 60             	sub    esp,0x60
c000d2a6:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000d2ab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d2b1:	83 e0 04             	and    eax,0x4
c000d2b4:	84 c0                	test   al,al
c000d2b6:	0f 84 3c 02 00 00    	je     c000d4f8 <loadACPITables(unsigned char*)+0x258>
c000d2bc:	a0 20 1e 02 c0       	mov    al,ds:0xc0021e20
c000d2c1:	84 c0                	test   al,al
c000d2c3:	74 77                	je     c000d33c <loadACPITables(unsigned char*)+0x9c>
c000d2c5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d2c9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d2cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d2d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d2d4:	83 e8 24             	sub    eax,0x24
c000d2d7:	c1 e8 03             	shr    eax,0x3
c000d2da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d2de:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000d2e6:	66 90                	xchg   ax,ax
c000d2e8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d2ec:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000d2f0:	0f 8d b6 00 00 00    	jge    c000d3ac <loadACPITables(unsigned char*)+0x10c>
c000d2f6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d2fa:	83 c0 24             	add    eax,0x24
c000d2fd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d301:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d305:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d309:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d30d:	c1 e0 03             	shl    eax,0x3
c000d310:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000d314:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d318:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d31b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d31d:	89 c1                	mov    ecx,eax
c000d31f:	a1 0c 1c 02 c0       	mov    eax,ds:0xc0021c0c
c000d324:	8d 50 01             	lea    edx,[eax+0x1]
c000d327:	89 15 0c 1c 02 c0    	mov    DWORD PTR ds:0xc0021c0c,edx
c000d32d:	89 ca                	mov    edx,ecx
c000d32f:	89 14 c5 24 1c 02 c0 	mov    DWORD PTR [eax*8-0x3ffde3dc],edx
c000d336:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000d33a:	eb ac                	jmp    c000d2e8 <loadACPITables(unsigned char*)+0x48>
c000d33c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d340:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d344:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d348:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d34b:	83 e8 24             	sub    eax,0x24
c000d34e:	c1 e8 02             	shr    eax,0x2
c000d351:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d355:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000d35d:	8d 76 00             	lea    esi,[esi+0x0]
c000d360:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d364:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000d368:	7d 42                	jge    c000d3ac <loadACPITables(unsigned char*)+0x10c>
c000d36a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d36e:	83 c0 24             	add    eax,0x24
c000d371:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d375:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d379:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d37d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d381:	c1 e0 02             	shl    eax,0x2
c000d384:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d388:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d38c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d38e:	a1 0c 1c 02 c0       	mov    eax,ds:0xc0021c0c
c000d393:	8d 50 01             	lea    edx,[eax+0x1]
c000d396:	89 15 0c 1c 02 c0    	mov    DWORD PTR ds:0xc0021c0c,edx
c000d39c:	89 ca                	mov    edx,ecx
c000d39e:	89 14 c5 24 1c 02 c0 	mov    DWORD PTR [eax*8-0x3ffde3dc],edx
c000d3a5:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000d3a9:	eb b5                	jmp    c000d360 <loadACPITables(unsigned char*)+0xc0>
c000d3ab:	90                   	nop
c000d3ac:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000d3b4:	a1 0c 1c 02 c0       	mov    eax,ds:0xc0021c0c
c000d3b9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000d3bd:	0f 8d 39 01 00 00    	jge    c000d4fc <loadACPITables(unsigned char*)+0x25c>
c000d3c3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d3c7:	8b 04 c5 24 1c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde3dc]
c000d3ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d3d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d3da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d3de:	25 ff 0f 00 00       	and    eax,0xfff
c000d3e3:	89 c6                	mov    esi,eax
c000d3e5:	8b 1d f4 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6f4
c000d3eb:	83 ec 0c             	sub    esp,0xc
c000d3ee:	6a 01                	push   0x1
c000d3f0:	e8 ac b3 ff ff       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c000d3f5:	83 c4 10             	add    esp,0x10
c000d3f8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d3fc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d402:	83 ec 0c             	sub    esp,0xc
c000d405:	6a 01                	push   0x1
c000d407:	6a 01                	push   0x1
c000d409:	50                   	push   eax
c000d40a:	52                   	push   edx
c000d40b:	53                   	push   ebx
c000d40c:	e8 e3 bc ff ff       	call   c00090f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d411:	83 c4 20             	add    esp,0x20
c000d414:	09 f0                	or     eax,esi
c000d416:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d41e:	c1 e0 03             	shl    eax,0x3
c000d421:	05 20 1c 02 c0       	add    eax,0xc0021c20
c000d426:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d42a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d42e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d432:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000d43a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d43e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d442:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d446:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d44a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d44e:	89 c6                	mov    esi,eax
c000d450:	89 d7                	mov    edi,edx
c000d452:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d454:	89 c8                	mov    eax,ecx
c000d456:	89 fa                	mov    edx,edi
c000d458:	89 f3                	mov    ebx,esi
c000d45a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d45e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000d462:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d466:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d46a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d46d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d471:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d475:	05 00 10 00 00       	add    eax,0x1000
c000d47a:	c1 e8 0c             	shr    eax,0xc
c000d47d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d481:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d485:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d489:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d48d:	25 ff 0f 00 00       	and    eax,0xfff
c000d492:	89 c6                	mov    esi,eax
c000d494:	8b 1d f4 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6f4
c000d49a:	83 ec 0c             	sub    esp,0xc
c000d49d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000d4a1:	e8 fb b2 ff ff       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c000d4a6:	83 c4 10             	add    esp,0x10
c000d4a9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d4ad:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d4b3:	83 ec 0c             	sub    esp,0xc
c000d4b6:	6a 01                	push   0x1
c000d4b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4bc:	50                   	push   eax
c000d4bd:	52                   	push   edx
c000d4be:	53                   	push   ebx
c000d4bf:	e8 30 bc ff ff       	call   c00090f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d4c4:	83 c4 20             	add    esp,0x20
c000d4c7:	09 f0                	or     eax,esi
c000d4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d1:	83 ec 0c             	sub    esp,0xc
c000d4d4:	50                   	push   eax
c000d4d5:	e8 bb b5 ff ff       	call   c0008a95 <Virt::freeKernelVirtualPages(unsigned long)>
c000d4da:	83 c4 10             	add    esp,0x10
c000d4dd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d4e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d4e5:	89 14 c5 24 1c 02 c0 	mov    DWORD PTR [eax*8-0x3ffde3dc],edx
c000d4ec:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000d4f0:	e9 bf fe ff ff       	jmp    c000d3b4 <loadACPITables(unsigned char*)+0x114>
c000d4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d4f8:	90                   	nop
c000d4f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4fc:	83 c4 60             	add    esp,0x60
c000d4ff:	5b                   	pop    ebx
c000d500:	5e                   	pop    esi
c000d501:	5f                   	pop    edi
c000d502:	c3                   	ret    
c000d503:	90                   	nop

c000d504 <findRSDT(unsigned char*)>:
c000d504:	57                   	push   edi
c000d505:	56                   	push   esi
c000d506:	53                   	push   ebx
c000d507:	83 ec 50             	sub    esp,0x50
c000d50a:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000d50f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d515:	83 e0 04             	and    eax,0x4
c000d518:	84 c0                	test   al,al
c000d51a:	75 0c                	jne    c000d528 <findRSDT(unsigned char*)+0x24>
c000d51c:	b8 00 00 00 00       	mov    eax,0x0
c000d521:	e9 26 01 00 00       	jmp    c000d64c <findRSDT(unsigned char*)+0x148>
c000d526:	66 90                	xchg   ax,ax
c000d528:	89 e0                	mov    eax,esp
c000d52a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d52e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d532:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d536:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000d53e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d542:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d546:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d54a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000d54e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000d552:	89 c6                	mov    esi,eax
c000d554:	89 d7                	mov    edi,edx
c000d556:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d558:	89 c8                	mov    eax,ecx
c000d55a:	89 fa                	mov    edx,edi
c000d55c:	89 f3                	mov    ebx,esi
c000d55e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000d562:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d566:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d56a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d56e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000d572:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000d57a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d57e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d582:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d58a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d58e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d592:	25 ff 0f 00 00       	and    eax,0xfff
c000d597:	89 c6                	mov    esi,eax
c000d599:	8b 1d f4 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6f4
c000d59f:	83 ec 0c             	sub    esp,0xc
c000d5a2:	6a 02                	push   0x2
c000d5a4:	e8 f8 b1 ff ff       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c000d5a9:	83 c4 10             	add    esp,0x10
c000d5ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d5b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d5b6:	83 ec 0c             	sub    esp,0xc
c000d5b9:	6a 01                	push   0x1
c000d5bb:	6a 02                	push   0x2
c000d5bd:	50                   	push   eax
c000d5be:	52                   	push   edx
c000d5bf:	53                   	push   ebx
c000d5c0:	e8 2f bb ff ff       	call   c00090f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d5c5:	83 c4 20             	add    esp,0x20
c000d5c8:	09 f0                	or     eax,esi
c000d5ca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d5ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d5d2:	25 ff 0f 00 00       	and    eax,0xfff
c000d5d7:	89 c6                	mov    esi,eax
c000d5d9:	8b 1d f4 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6f4
c000d5df:	83 ec 0c             	sub    esp,0xc
c000d5e2:	6a 02                	push   0x2
c000d5e4:	e8 b8 b1 ff ff       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d5f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d5f6:	83 ec 0c             	sub    esp,0xc
c000d5f9:	6a 01                	push   0x1
c000d5fb:	6a 02                	push   0x2
c000d5fd:	50                   	push   eax
c000d5fe:	52                   	push   edx
c000d5ff:	53                   	push   ebx
c000d600:	e8 ef ba ff ff       	call   c00090f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d605:	83 c4 20             	add    esp,0x20
c000d608:	09 f0                	or     eax,esi
c000d60a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d60e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000d613:	75 13                	jne    c000d628 <findRSDT(unsigned char*)+0x124>
c000d615:	c6 05 20 1e 02 c0 00 	mov    BYTE PTR ds:0xc0021e20,0x0
c000d61c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d620:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d624:	eb 22                	jmp    c000d648 <findRSDT(unsigned char*)+0x144>
c000d626:	66 90                	xchg   ax,ax
c000d628:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000d62d:	75 11                	jne    c000d640 <findRSDT(unsigned char*)+0x13c>
c000d62f:	c6 05 20 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021e20,0x1
c000d636:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d63a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d63e:	eb 08                	jmp    c000d648 <findRSDT(unsigned char*)+0x144>
c000d640:	b8 00 00 00 00       	mov    eax,0x0
c000d645:	eb 05                	jmp    c000d64c <findRSDT(unsigned char*)+0x148>
c000d647:	90                   	nop
c000d648:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d64c:	83 c4 50             	add    esp,0x50
c000d64f:	5b                   	pop    ebx
c000d650:	5e                   	pop    esi
c000d651:	5f                   	pop    edi
c000d652:	c3                   	ret    
c000d653:	90                   	nop

c000d654 <findDataTable(unsigned char*, char*)>:
c000d654:	83 ec 1c             	sub    esp,0x1c
c000d657:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000d65c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d662:	83 e0 04             	and    eax,0x4
c000d665:	84 c0                	test   al,al
c000d667:	75 07                	jne    c000d670 <findDataTable(unsigned char*, char*)+0x1c>
c000d669:	b8 00 00 00 00       	mov    eax,0x0
c000d66e:	eb 58                	jmp    c000d6c8 <findDataTable(unsigned char*, char*)+0x74>
c000d670:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d678:	a1 0c 1c 02 c0       	mov    eax,ds:0xc0021c0c
c000d67d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000d681:	7d 3d                	jge    c000d6c0 <findDataTable(unsigned char*, char*)+0x6c>
c000d683:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d687:	c1 e0 03             	shl    eax,0x3
c000d68a:	05 20 1c 02 c0       	add    eax,0xc0021c20
c000d68f:	83 ec 04             	sub    esp,0x4
c000d692:	6a 04                	push   0x4
c000d694:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d698:	50                   	push   eax
c000d699:	e8 12 2d ff ff       	call   c00003b0 <memcmp>
c000d69e:	83 c4 10             	add    esp,0x10
c000d6a1:	85 c0                	test   eax,eax
c000d6a3:	0f 94 c0             	sete   al
c000d6a6:	84 c0                	test   al,al
c000d6a8:	74 0e                	je     c000d6b8 <findDataTable(unsigned char*, char*)+0x64>
c000d6aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6ae:	8b 04 c5 24 1c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde3dc]
c000d6b5:	eb 11                	jmp    c000d6c8 <findDataTable(unsigned char*, char*)+0x74>
c000d6b7:	90                   	nop
c000d6b8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d6bc:	eb ba                	jmp    c000d678 <findDataTable(unsigned char*, char*)+0x24>
c000d6be:	66 90                	xchg   ax,ax
c000d6c0:	b8 00 00 00 00       	mov    eax,0x0
c000d6c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d6c8:	83 c4 1c             	add    esp,0x1c
c000d6cb:	c3                   	ret    

c000d6cc <scanMADT()>:
c000d6cc:	53                   	push   ebx
c000d6cd:	83 ec 38             	sub    esp,0x38
c000d6d0:	a1 20 f6 01 c0       	mov    eax,ds:0xc001f620
c000d6d5:	25 00 04 00 00       	and    eax,0x400
c000d6da:	74 14                	je     c000d6f0 <scanMADT()+0x24>
c000d6dc:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000d6e1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d6e7:	83 e2 fb             	and    edx,0xfffffffb
c000d6ea:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d6f0:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000d6f5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000d6fb:	83 e0 04             	and    eax,0x4
c000d6fe:	84 c0                	test   al,al
c000d700:	0f 84 8a 04 00 00    	je     c000db90 <scanMADT()+0x4c4>
c000d706:	e8 05 fb ff ff       	call   c000d210 <findRSDP()>
c000d70b:	a3 2c 1e 02 c0       	mov    ds:0xc0021e2c,eax
c000d710:	a1 2c 1e 02 c0       	mov    eax,ds:0xc0021e2c
c000d715:	85 c0                	test   eax,eax
c000d717:	75 1b                	jne    c000d734 <scanMADT()+0x68>
c000d719:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000d71e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d724:	83 e2 fb             	and    edx,0xfffffffb
c000d727:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d72d:	e9 66 04 00 00       	jmp    c000db98 <scanMADT()+0x4cc>
c000d732:	66 90                	xchg   ax,ax
c000d734:	a1 2c 1e 02 c0       	mov    eax,ds:0xc0021e2c
c000d739:	83 ec 0c             	sub    esp,0xc
c000d73c:	50                   	push   eax
c000d73d:	e8 c2 fd ff ff       	call   c000d504 <findRSDT(unsigned char*)>
c000d742:	83 c4 10             	add    esp,0x10
c000d745:	a3 28 1e 02 c0       	mov    ds:0xc0021e28,eax
c000d74a:	a1 28 1e 02 c0       	mov    eax,ds:0xc0021e28
c000d74f:	85 c0                	test   eax,eax
c000d751:	75 19                	jne    c000d76c <scanMADT()+0xa0>
c000d753:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000d758:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d75e:	83 e2 fb             	and    edx,0xfffffffb
c000d761:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d767:	e9 2c 04 00 00       	jmp    c000db98 <scanMADT()+0x4cc>
c000d76c:	a1 28 1e 02 c0       	mov    eax,ds:0xc0021e28
c000d771:	83 ec 0c             	sub    esp,0xc
c000d774:	50                   	push   eax
c000d775:	e8 26 fb ff ff       	call   c000d2a0 <loadACPITables(unsigned char*)>
c000d77a:	83 c4 10             	add    esp,0x10
c000d77d:	a1 28 1e 02 c0       	mov    eax,ds:0xc0021e28
c000d782:	83 ec 08             	sub    esp,0x8
c000d785:	68 68 da 01 c0       	push   0xc001da68
c000d78a:	50                   	push   eax
c000d78b:	e8 c4 fe ff ff       	call   c000d654 <findDataTable(unsigned char*, char*)>
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d797:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d79c:	75 1a                	jne    c000d7b8 <scanMADT()+0xec>
c000d79e:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000d7a3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000d7a9:	83 e2 fe             	and    edx,0xfffffffe
c000d7ac:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000d7b2:	e9 e1 03 00 00       	jmp    c000db98 <scanMADT()+0x4cc>
c000d7b7:	90                   	nop
c000d7b8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000d7c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d7c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d7c7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000d7cb:	0f 87 c7 03 00 00    	ja     c000db98 <scanMADT()+0x4cc>
c000d7d1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000d7d9:	0f 87 b9 03 00 00    	ja     c000db98 <scanMADT()+0x4cc>
c000d7df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7e3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d7e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7eb:	8d 50 01             	lea    edx,[eax+0x1]
c000d7ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d7f6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d7fa:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000d7fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d802:	8d 50 01             	lea    edx,[eax+0x1]
c000d805:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d809:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d80d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d811:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000d815:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000d81a:	0f 86 74 03 00 00    	jbe    c000db94 <scanMADT()+0x4c8>
c000d820:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000d825:	75 5d                	jne    c000d884 <scanMADT()+0x1b8>
c000d827:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d82b:	8d 50 01             	lea    edx,[eax+0x1]
c000d82e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d832:	8a 15 20 20 02 c0    	mov    dl,BYTE PTR ds:0xc0022020
c000d838:	81 e2 ff 00 00 00    	and    edx,0xff
c000d83e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d842:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d846:	88 82 60 20 02 c0    	mov    BYTE PTR [edx-0x3ffddfa0],al
c000d84c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d850:	8d 42 01             	lea    eax,[edx+0x1]
c000d853:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d857:	a0 20 20 02 c0       	mov    al,ds:0xc0022020
c000d85c:	8d 48 01             	lea    ecx,[eax+0x1]
c000d85f:	88 0d 20 20 02 c0    	mov    BYTE PTR ds:0xc0022020,cl
c000d865:	25 ff 00 00 00       	and    eax,0xff
c000d86a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d86e:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000d872:	88 90 40 20 02 c0    	mov    BYTE PTR [eax-0x3ffddfc0],dl
c000d878:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d87d:	e9 f6 02 00 00       	jmp    c000db78 <scanMADT()+0x4ac>
c000d882:	66 90                	xchg   ax,ax
c000d884:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000d889:	0f 85 29 01 00 00    	jne    c000d9b8 <scanMADT()+0x2ec>
c000d88f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d893:	8d 50 01             	lea    edx,[eax+0x1]
c000d896:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d89a:	8a 15 e0 1e 02 c0    	mov    dl,BYTE PTR ds:0xc0021ee0
c000d8a0:	81 e2 ff 00 00 00    	and    edx,0xff
c000d8a6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d8aa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d8ae:	88 82 00 1f 02 c0    	mov    BYTE PTR [edx-0x3ffde100],al
c000d8b4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000d8b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8c0:	01 d0                	add    eax,edx
c000d8c2:	83 c0 2c             	add    eax,0x2c
c000d8c5:	8a 00                	mov    al,BYTE PTR [eax]
c000d8c7:	31 d2                	xor    edx,edx
c000d8c9:	88 c2                	mov    dl,al
c000d8cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8cf:	8d 48 01             	lea    ecx,[eax+0x1]
c000d8d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8d6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d8da:	25 ff 00 00 00       	and    eax,0xff
c000d8df:	c1 e0 08             	shl    eax,0x8
c000d8e2:	89 d1                	mov    ecx,edx
c000d8e4:	09 c1                	or     ecx,eax
c000d8e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8ea:	8d 50 02             	lea    edx,[eax+0x2]
c000d8ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8f1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d8f5:	25 ff 00 00 00       	and    eax,0xff
c000d8fa:	c1 e0 10             	shl    eax,0x10
c000d8fd:	09 c1                	or     ecx,eax
c000d8ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d903:	8d 50 03             	lea    edx,[eax+0x3]
c000d906:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d90a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d90e:	25 ff 00 00 00       	and    eax,0xff
c000d913:	c1 e0 18             	shl    eax,0x18
c000d916:	09 c1                	or     ecx,eax
c000d918:	89 ca                	mov    edx,ecx
c000d91a:	a0 e0 1e 02 c0       	mov    al,ds:0xc0021ee0
c000d91f:	25 ff 00 00 00       	and    eax,0xff
c000d924:	89 14 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],edx
c000d92b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d930:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d934:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d938:	01 d0                	add    eax,edx
c000d93a:	83 c0 2c             	add    eax,0x2c
c000d93d:	8a 00                	mov    al,BYTE PTR [eax]
c000d93f:	31 d2                	xor    edx,edx
c000d941:	88 c2                	mov    dl,al
c000d943:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d947:	8d 48 01             	lea    ecx,[eax+0x1]
c000d94a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d94e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d952:	25 ff 00 00 00       	and    eax,0xff
c000d957:	c1 e0 08             	shl    eax,0x8
c000d95a:	89 d1                	mov    ecx,edx
c000d95c:	09 c1                	or     ecx,eax
c000d95e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d962:	8d 50 02             	lea    edx,[eax+0x2]
c000d965:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d969:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d96d:	25 ff 00 00 00       	and    eax,0xff
c000d972:	c1 e0 10             	shl    eax,0x10
c000d975:	09 c1                	or     ecx,eax
c000d977:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d97b:	8d 50 03             	lea    edx,[eax+0x3]
c000d97e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d982:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d986:	25 ff 00 00 00       	and    eax,0xff
c000d98b:	c1 e0 18             	shl    eax,0x18
c000d98e:	09 c1                	or     ecx,eax
c000d990:	89 ca                	mov    edx,ecx
c000d992:	a0 e0 1e 02 c0       	mov    al,ds:0xc0021ee0
c000d997:	25 ff 00 00 00       	and    eax,0xff
c000d99c:	89 14 85 a0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde060],edx
c000d9a3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d9a8:	a0 e0 1e 02 c0       	mov    al,ds:0xc0021ee0
c000d9ad:	40                   	inc    eax
c000d9ae:	a2 e0 1e 02 c0       	mov    ds:0xc0021ee0,al
c000d9b3:	e9 c0 01 00 00       	jmp    c000db78 <scanMADT()+0x4ac>
c000d9b8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000d9bd:	0f 85 fd 00 00 00    	jne    c000dac0 <scanMADT()+0x3f4>
c000d9c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9c7:	8d 50 01             	lea    edx,[eax+0x1]
c000d9ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9d2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d9d6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d9da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9de:	8d 50 01             	lea    edx,[eax+0x1]
c000d9e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9e9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d9ed:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d9f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9f9:	01 d0                	add    eax,edx
c000d9fb:	83 c0 2c             	add    eax,0x2c
c000d9fe:	8a 00                	mov    al,BYTE PTR [eax]
c000da00:	31 d2                	xor    edx,edx
c000da02:	88 c2                	mov    dl,al
c000da04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da08:	8d 48 01             	lea    ecx,[eax+0x1]
c000da0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000da0f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000da13:	25 ff 00 00 00       	and    eax,0xff
c000da18:	c1 e0 08             	shl    eax,0x8
c000da1b:	89 d1                	mov    ecx,edx
c000da1d:	09 c1                	or     ecx,eax
c000da1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da23:	8d 50 02             	lea    edx,[eax+0x2]
c000da26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000da2a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000da2e:	25 ff 00 00 00       	and    eax,0xff
c000da33:	c1 e0 10             	shl    eax,0x10
c000da36:	09 c1                	or     ecx,eax
c000da38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da3c:	8d 50 03             	lea    edx,[eax+0x3]
c000da3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000da43:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000da47:	25 ff 00 00 00       	and    eax,0xff
c000da4c:	c1 e0 18             	shl    eax,0x18
c000da4f:	09 c8                	or     eax,ecx
c000da51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000da55:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000da5a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da62:	01 d0                	add    eax,edx
c000da64:	83 c0 2c             	add    eax,0x2c
c000da67:	8a 00                	mov    al,BYTE PTR [eax]
c000da69:	25 ff 00 00 00       	and    eax,0xff
c000da6e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000da72:	8d 4a 01             	lea    ecx,[edx+0x1]
c000da75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da79:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000da7d:	81 e2 ff 00 00 00    	and    edx,0xff
c000da83:	c1 e2 08             	shl    edx,0x8
c000da86:	09 d0                	or     eax,edx
c000da88:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000da8d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000da92:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000da96:	25 ff 00 00 00       	and    eax,0xff
c000da9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da9f:	88 90 c0 ef 01 c0    	mov    BYTE PTR [eax-0x3ffe1040],dl
c000daa5:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000daa9:	31 d2                	xor    edx,edx
c000daab:	88 c2                	mov    dl,al
c000daad:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000dab2:	66 89 84 12 c0 1e 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffde140],ax
c000daba:	e9 b9 00 00 00       	jmp    c000db78 <scanMADT()+0x4ac>
c000dabf:	90                   	nop
c000dac0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000dac5:	0f 85 a1 00 00 00    	jne    c000db6c <scanMADT()+0x4a0>
c000dacb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dacf:	8d 50 01             	lea    edx,[eax+0x1]
c000dad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dad6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dada:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000dade:	25 ff 00 00 00       	and    eax,0xff
c000dae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dae7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000daeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000daef:	01 d0                	add    eax,edx
c000daf1:	83 c0 2c             	add    eax,0x2c
c000daf4:	8a 00                	mov    al,BYTE PTR [eax]
c000daf6:	31 d2                	xor    edx,edx
c000daf8:	88 c2                	mov    dl,al
c000dafa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dafe:	8d 48 01             	lea    ecx,[eax+0x1]
c000db01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000db05:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000db09:	25 ff 00 00 00       	and    eax,0xff
c000db0e:	c1 e0 08             	shl    eax,0x8
c000db11:	09 d0                	or     eax,edx
c000db13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db17:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000db1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db20:	8d 50 01             	lea    edx,[eax+0x1]
c000db23:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000db27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000db2b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000db2f:	25 ff 00 00 00       	and    eax,0xff
c000db34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db3c:	c1 e0 08             	shl    eax,0x8
c000db3f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000db43:	89 c1                	mov    ecx,eax
c000db45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db49:	c1 e0 18             	shl    eax,0x18
c000db4c:	89 c3                	mov    ebx,eax
c000db4e:	a1 30 1e 02 c0       	mov    eax,ds:0xc0021e30
c000db53:	8d 50 01             	lea    edx,[eax+0x1]
c000db56:	89 15 30 1e 02 c0    	mov    DWORD PTR ds:0xc0021e30,edx
c000db5c:	09 d9                	or     ecx,ebx
c000db5e:	89 ca                	mov    edx,ecx
c000db60:	89 14 85 40 1e 02 c0 	mov    DWORD PTR [eax*4-0x3ffde1c0],edx
c000db67:	eb 0f                	jmp    c000db78 <scanMADT()+0x4ac>
c000db69:	8d 76 00             	lea    esi,[esi+0x0]
c000db6c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000db71:	75 05                	jne    c000db78 <scanMADT()+0x4ac>
c000db73:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000db78:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000db7c:	31 d2                	xor    edx,edx
c000db7e:	88 c2                	mov    dl,al
c000db80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db84:	01 d0                	add    eax,edx
c000db86:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000db8a:	e9 31 fc ff ff       	jmp    c000d7c0 <scanMADT()+0xf4>
c000db8f:	90                   	nop
c000db90:	90                   	nop
c000db91:	eb 05                	jmp    c000db98 <scanMADT()+0x4cc>
c000db93:	90                   	nop
c000db94:	90                   	nop
c000db95:	8d 76 00             	lea    esi,[esi+0x0]
c000db98:	83 c4 38             	add    esp,0x38
c000db9b:	5b                   	pop    ebx
c000db9c:	c3                   	ret    
c000db9d:	90                   	nop
c000db9e:	66 90                	xchg   ax,ax

c000dba0 <ACPI::ACPI()>:
c000dba0:	83 ec 0c             	sub    esp,0xc
c000dba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba7:	83 ec 08             	sub    esp,0x8
c000dbaa:	68 6d da 01 c0       	push   0xc001da6d
c000dbaf:	50                   	push   eax
c000dbb0:	e8 4b d4 ff ff       	call   c000b000 <Device::Device(char const*)>
c000dbb5:	83 c4 10             	add    esp,0x10
c000dbb8:	ba a4 db 01 c0       	mov    edx,0xc001dba4
c000dbbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc1:	89 10                	mov    DWORD PTR [eax],edx
c000dbc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000dbce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000dbdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000dbea:	e8 dd fa ff ff       	call   c000d6cc <scanMADT()>
c000dbef:	90                   	nop
c000dbf0:	83 c4 0c             	add    esp,0xc
c000dbf3:	c3                   	ret    

c000dbf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000dbf4:	83 ec 2c             	sub    esp,0x2c
c000dbf7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dbfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dbff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dc03:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000dc07:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000dc0c:	88 d0                	mov    al,dl
c000dc0e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dc12:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000dc17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000dc1f:	90                   	nop
c000dc20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc24:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dc2a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000dc2e:	0f 8d 9c 00 00 00    	jge    c000dcd0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000dc34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc3c:	83 c2 2a             	add    edx,0x2a
c000dc3f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000dc43:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000dc48:	75 7a                	jne    c000dcc4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000dc4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc52:	83 c2 2a             	add    edx,0x2a
c000dc55:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000dc59:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000dc5d:	75 65                	jne    c000dcc4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000dc5f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000dc64:	74 3a                	je     c000dca0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000dc66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc6e:	83 c2 2a             	add    edx,0x2a
c000dc71:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000dc75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dc79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc7c:	39 c2                	cmp    edx,eax
c000dc7e:	74 10                	je     c000dc90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000dc80:	83 ec 0c             	sub    esp,0xc
c000dc83:	68 e8 d9 01 c0       	push   0xc001d9e8
c000dc88:	e8 14 19 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000dc8d:	83 c4 10             	add    esp,0x10
c000dc90:	83 ec 0c             	sub    esp,0xc
c000dc93:	68 72 da 01 c0       	push   0xc001da72
c000dc98:	e8 04 19 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000dc9d:	83 c4 10             	add    esp,0x10
c000dca0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000dca4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dca8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dcac:	83 c2 2a             	add    edx,0x2a
c000dcaf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000dcb3:	8b 02                	mov    eax,DWORD PTR [edx]
c000dcb5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dcb8:	89 01                	mov    DWORD PTR [ecx],eax
c000dcba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000dcbd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dcc2:	66 90                	xchg   ax,ax
c000dcc4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000dcc8:	e9 53 ff ff ff       	jmp    c000dc20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000dccd:	8d 76 00             	lea    esi,[esi+0x0]
c000dcd0:	90                   	nop
c000dcd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dcd5:	83 c4 2c             	add    esp,0x2c
c000dcd8:	c2 04 00             	ret    0x4
c000dcdb:	90                   	nop

c000dcdc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000dcdc:	83 ec 1c             	sub    esp,0x1c
c000dcdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dce7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dceb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000dcf0:	88 c8                	mov    al,cl
c000dcf2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000dcf6:	88 d0                	mov    al,dl
c000dcf8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dcfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd00:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dd06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd0a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dd0d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000dd11:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000dd15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd19:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dd1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd23:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000dd26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd2a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000dd2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd33:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dd39:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000dd3d:	8d 48 01             	lea    ecx,[eax+0x1]
c000dd40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd44:	83 c2 2a             	add    edx,0x2a
c000dd47:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000dd4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd4f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd59:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dd5c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dd60:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000dd64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd68:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dd6e:	8d 50 01             	lea    edx,[eax+0x1]
c000dd71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd75:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000dd7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd7f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dd85:	3d 00 02 00 00       	cmp    eax,0x200
c000dd8a:	75 10                	jne    c000dd9c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000dd8c:	83 ec 0c             	sub    esp,0xc
c000dd8f:	68 81 da 01 c0       	push   0xc001da81
c000dd94:	e8 08 18 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000dd99:	83 c4 10             	add    esp,0x10
c000dd9c:	90                   	nop
c000dd9d:	83 c4 1c             	add    esp,0x1c
c000dda0:	c3                   	ret    
c000dda1:	90                   	nop
c000dda2:	66 90                	xchg   ax,ax

c000dda4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000dda4:	b8 00 00 00 00       	mov    eax,0x0
c000dda9:	c3                   	ret    
c000ddaa:	66 90                	xchg   ax,ax

c000ddac <ACPI::detectPCI()>:
c000ddac:	53                   	push   ebx
c000ddad:	83 ec 28             	sub    esp,0x28
c000ddb0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ddb5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ddba:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000ddbf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000ddc5:	83 e0 04             	and    eax,0x4
c000ddc8:	84 c0                	test   al,al
c000ddca:	74 2c                	je     c000ddf8 <ACPI::detectPCI()+0x4c>
c000ddcc:	a1 28 1e 02 c0       	mov    eax,ds:0xc0021e28
c000ddd1:	83 ec 08             	sub    esp,0x8
c000ddd4:	68 9e da 01 c0       	push   0xc001da9e
c000ddd9:	50                   	push   eax
c000ddda:	e8 75 f8 ff ff       	call   c000d654 <findDataTable(unsigned char*, char*)>
c000dddf:	83 c4 10             	add    esp,0x10
c000dde2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dde6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ddeb:	74 0b                	je     c000ddf8 <ACPI::detectPCI()+0x4c>
c000dded:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ddf2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ddf7:	90                   	nop
c000ddf8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000de00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de04:	8a 00                	mov    al,BYTE PTR [eax]
c000de06:	3c 01                	cmp    al,0x1
c000de08:	75 0e                	jne    c000de18 <ACPI::detectPCI()+0x6c>
c000de0a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000de0f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000de14:	eb 2a                	jmp    c000de40 <ACPI::detectPCI()+0x94>
c000de16:	66 90                	xchg   ax,ax
c000de18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de1c:	8a 00                	mov    al,BYTE PTR [eax]
c000de1e:	3c 02                	cmp    al,0x2
c000de20:	75 1e                	jne    c000de40 <ACPI::detectPCI()+0x94>
c000de22:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000de27:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000de2c:	74 12                	je     c000de40 <ACPI::detectPCI()+0x94>
c000de2e:	83 ec 0c             	sub    esp,0xc
c000de31:	68 18 da 01 c0       	push   0xc001da18
c000de36:	e8 66 17 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000de3b:	83 c4 10             	add    esp,0x10
c000de3e:	66 90                	xchg   ax,ax
c000de40:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000de44:	83 f0 01             	xor    eax,0x1
c000de47:	84 c0                	test   al,al
c000de49:	74 41                	je     c000de8c <ACPI::detectPCI()+0xe0>
c000de4b:	e8 00 23 ff ff       	call   c0000150 <manualPCIProbe>
c000de50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de54:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000de59:	75 0d                	jne    c000de68 <ACPI::detectPCI()+0xbc>
c000de5b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000de60:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000de65:	eb 25                	jmp    c000de8c <ACPI::detectPCI()+0xe0>
c000de67:	90                   	nop
c000de68:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000de6d:	75 1d                	jne    c000de8c <ACPI::detectPCI()+0xe0>
c000de6f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000de74:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000de79:	74 11                	je     c000de8c <ACPI::detectPCI()+0xe0>
c000de7b:	83 ec 0c             	sub    esp,0xc
c000de7e:	68 18 da 01 c0       	push   0xc001da18
c000de83:	e8 19 17 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000de88:	83 c4 10             	add    esp,0x10
c000de8b:	90                   	nop
c000de8c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000de91:	0f 84 85 00 00 00    	je     c000df1c <ACPI::detectPCI()+0x170>
c000de97:	83 ec 0c             	sub    esp,0xc
c000de9a:	68 a3 da 01 c0       	push   0xc001daa3
c000de9f:	e8 1b 8e ff ff       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c000dea4:	83 c4 10             	add    esp,0x10
c000dea7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000deaf:	83 ec 0c             	sub    esp,0xc
c000deb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000deb6:	e8 aa 8d ff ff       	call   c0006c65 <malloc>
c000debb:	83 c4 10             	add    esp,0x10
c000debe:	89 c3                	mov    ebx,eax
c000dec0:	83 ec 0c             	sub    esp,0xc
c000dec3:	53                   	push   ebx
c000dec4:	e8 39 9c 00 00       	call   c0017b02 <PCI::PCI()>
c000dec9:	83 c4 10             	add    esp,0x10
c000decc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ded0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ded4:	83 ec 08             	sub    esp,0x8
c000ded7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dedb:	50                   	push   eax
c000dedc:	e8 87 cf ff ff       	call   c000ae68 <Device::addChild(Device*)>
c000dee1:	83 c4 10             	add    esp,0x10
c000dee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dee8:	8b 00                	mov    eax,DWORD PTR [eax]
c000deea:	83 c0 08             	add    eax,0x8
c000deed:	8b 00                	mov    eax,DWORD PTR [eax]
c000deef:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000def4:	74 0a                	je     c000df00 <ACPI::detectPCI()+0x154>
c000def6:	ba 01 00 00 00       	mov    edx,0x1
c000defb:	eb 0b                	jmp    c000df08 <ACPI::detectPCI()+0x15c>
c000defd:	8d 76 00             	lea    esi,[esi+0x0]
c000df00:	ba 02 00 00 00       	mov    edx,0x2
c000df05:	8d 76 00             	lea    esi,[esi+0x0]
c000df08:	6a 00                	push   0x0
c000df0a:	6a 00                	push   0x0
c000df0c:	52                   	push   edx
c000df0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df11:	ff d0                	call   eax
c000df13:	83 c4 10             	add    esp,0x10
c000df16:	e9 91 00 00 00       	jmp    c000dfac <ACPI::detectPCI()+0x200>
c000df1b:	90                   	nop
c000df1c:	83 ec 0c             	sub    esp,0xc
c000df1f:	68 bb da 01 c0       	push   0xc001dabb
c000df24:	e8 96 8d ff ff       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000df33:	83 ec 0c             	sub    esp,0xc
c000df36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df3a:	e8 26 8d ff ff       	call   c0006c65 <malloc>
c000df3f:	83 c4 10             	add    esp,0x10
c000df42:	89 c3                	mov    ebx,eax
c000df44:	83 ec 0c             	sub    esp,0xc
c000df47:	53                   	push   ebx
c000df48:	e8 e1 a6 00 00       	call   c001862e <IDE::IDE()>
c000df4d:	83 c4 10             	add    esp,0x10
c000df50:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000df54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df58:	83 ec 08             	sub    esp,0x8
c000df5b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df5f:	50                   	push   eax
c000df60:	e8 03 cf ff ff       	call   c000ae68 <Device::addChild(Device*)>
c000df65:	83 c4 10             	add    esp,0x10
c000df68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df6c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000df76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df7a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000df83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df87:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000df90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df94:	8b 00                	mov    eax,DWORD PTR [eax]
c000df96:	83 c0 08             	add    eax,0x8
c000df99:	8b 00                	mov    eax,DWORD PTR [eax]
c000df9b:	6a 00                	push   0x0
c000df9d:	6a 00                	push   0x0
c000df9f:	6a 00                	push   0x0
c000dfa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa5:	ff d0                	call   eax
c000dfa7:	83 c4 10             	add    esp,0x10
c000dfaa:	66 90                	xchg   ax,ax
c000dfac:	90                   	nop
c000dfad:	83 c4 28             	add    esp,0x28
c000dfb0:	5b                   	pop    ebx
c000dfb1:	c3                   	ret    
c000dfb2:	66 90                	xchg   ax,ax

c000dfb4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000dfb4:	83 ec 1c             	sub    esp,0x1c
c000dfb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dfbb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dfbe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dfc2:	8b 15 08 f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f608
c000dfc8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dfcc:	25 ff 00 00 00       	and    eax,0xff
c000dfd1:	83 ec 08             	sub    esp,0x8
c000dfd4:	50                   	push   eax
c000dfd5:	52                   	push   edx
c000dfd6:	e8 0b 83 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000dfe2:	8b 15 08 f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f608
c000dfe8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dfec:	25 ff 00 00 00       	and    eax,0xff
c000dff1:	83 ec 04             	sub    esp,0x4
c000dff4:	6a 01                	push   0x1
c000dff6:	50                   	push   eax
c000dff7:	52                   	push   edx
c000dff8:	e8 ff 83 ff ff       	call   c00063fc <Computer::writeCMOS(unsigned char, unsigned char)>
c000dffd:	83 c4 10             	add    esp,0x10
c000e000:	90                   	nop
c000e001:	83 c4 1c             	add    esp,0x1c
c000e004:	c3                   	ret    
c000e005:	90                   	nop
c000e006:	66 90                	xchg   ax,ax

c000e008 <ACPI::sleep()>:
c000e008:	83 ec 0c             	sub    esp,0xc
c000e00b:	a1 00 1c 02 c0       	mov    eax,ds:0xc0021c00
c000e010:	85 c0                	test   eax,eax
c000e012:	74 08                	je     c000e01c <ACPI::sleep()+0x14>
c000e014:	a1 00 1c 02 c0       	mov    eax,ds:0xc0021c00
c000e019:	ff d0                	call   eax
c000e01b:	90                   	nop
c000e01c:	90                   	nop
c000e01d:	83 c4 0c             	add    esp,0xc
c000e020:	c3                   	ret    
c000e021:	90                   	nop
c000e022:	66 90                	xchg   ax,ax

c000e024 <ACPI::open(int, int, void*)>:
c000e024:	57                   	push   edi
c000e025:	56                   	push   esi
c000e026:	53                   	push   ebx
c000e027:	81 ec 70 01 00 00    	sub    esp,0x170
c000e02d:	83 ec 0c             	sub    esp,0xc
c000e030:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e037:	e8 70 fd ff ff       	call   c000ddac <ACPI::detectPCI()>
c000e03c:	83 c4 10             	add    esp,0x10
c000e03f:	83 ec 0c             	sub    esp,0xc
c000e042:	68 40 da 01 c0       	push   0xc001da40
c000e047:	e8 73 8c ff ff       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	83 ec 0c             	sub    esp,0xc
c000e052:	68 d0 da 01 c0       	push   0xc001dad0
c000e057:	e8 bb 35 00 00       	call   c0011617 <Thr::loadKernelSymbolTable(char const*)>
c000e05c:	83 c4 10             	add    esp,0x10
c000e05f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000e067:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000e072:	83 ec 0c             	sub    esp,0xc
c000e075:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e07c:	e8 e4 8b ff ff       	call   c0006c65 <malloc>
c000e081:	83 c4 10             	add    esp,0x10
c000e084:	89 c3                	mov    ebx,eax
c000e086:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c000e08b:	83 ec 04             	sub    esp,0x4
c000e08e:	50                   	push   eax
c000e08f:	68 ee da 01 c0       	push   0xc001daee
c000e094:	53                   	push   ebx
c000e095:	e8 04 bf ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c000e09a:	83 c4 10             	add    esp,0x10
c000e09d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000e0a4:	83 ec 08             	sub    esp,0x8
c000e0a7:	6a 01                	push   0x1
c000e0a9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e0b0:	e8 a9 bf ff ff       	call   c000a05e <File::open(FileOpenMode)>
c000e0b5:	83 c4 10             	add    esp,0x10
c000e0b8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000e0bf:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000e0c7:	75 17                	jne    c000e0e0 <ACPI::open(int, int, void*)+0xbc>
c000e0c9:	83 ec 0c             	sub    esp,0xc
c000e0cc:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e0d3:	e8 e4 bf ff ff       	call   c000a0bc <File::close()>
c000e0d8:	83 c4 10             	add    esp,0x10
c000e0db:	eb 0b                	jmp    c000e0e8 <ACPI::open(int, int, void*)+0xc4>
c000e0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e0e0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000e0e8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000e0f0:	74 1e                	je     c000e110 <ACPI::open(int, int, void*)+0xec>
c000e0f2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000e0f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0fb:	83 c0 08             	add    eax,0x8
c000e0fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000e100:	83 ec 0c             	sub    esp,0xc
c000e103:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e10a:	ff d0                	call   eax
c000e10c:	83 c4 10             	add    esp,0x10
c000e10f:	90                   	nop
c000e110:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000e117:	83 f0 01             	xor    eax,0x1
c000e11a:	84 c0                	test   al,al
c000e11c:	74 42                	je     c000e160 <ACPI::open(int, int, void*)+0x13c>
c000e11e:	83 ec 0c             	sub    esp,0xc
c000e121:	68 0c db 01 c0       	push   0xc001db0c
c000e126:	e8 94 8b ff ff       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c000e12b:	83 c4 10             	add    esp,0x10
c000e12e:	83 ec 04             	sub    esp,0x4
c000e131:	6a 0c                	push   0xc
c000e133:	68 27 db 01 c0       	push   0xc001db27
c000e138:	68 38 db 01 c0       	push   0xc001db38
c000e13d:	e8 d4 1c 00 00       	call   c000fe16 <Reg::readIntWithDefault(char*, char*, int)>
c000e142:	83 c4 10             	add    esp,0x10
c000e145:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000e14c:	83 ec 0c             	sub    esp,0xc
c000e14f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000e156:	e8 50 a8 ff ff       	call   c00089ab <Virt::setupPageSwapping(int)>
c000e15b:	83 c4 10             	add    esp,0x10
c000e15e:	66 90                	xchg   ax,ax
c000e160:	83 ec 0c             	sub    esp,0xc
c000e163:	68 af cb 01 c0       	push   0xc001cbaf
c000e168:	e8 52 8b ff ff       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c000e16d:	83 c4 10             	add    esp,0x10
c000e170:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000e177:	83 ec 08             	sub    esp,0x8
c000e17a:	6a 12                	push   0x12
c000e17c:	50                   	push   eax
c000e17d:	e8 fe cf ff ff       	call   c000b180 <getDevicesOfType(DeviceType)>
c000e182:	83 c4 0c             	add    esp,0xc
c000e185:	8d 76 00             	lea    esi,[esi+0x0]
c000e188:	83 ec 0c             	sub    esp,0xc
c000e18b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e192:	50                   	push   eax
c000e193:	e8 24 de 00 00       	call   c001bfbc <LinkedList<Device>::isEmpty()>
c000e198:	83 c4 10             	add    esp,0x10
c000e19b:	83 f0 01             	xor    eax,0x1
c000e19e:	84 c0                	test   al,al
c000e1a0:	0f 84 46 01 00 00    	je     c000e2ec <ACPI::open(int, int, void*)+0x2c8>
c000e1a6:	83 ec 0c             	sub    esp,0xc
c000e1a9:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e1b0:	50                   	push   eax
c000e1b1:	e8 22 de 00 00       	call   c001bfd8 <LinkedList<Device>::getFirstElement()>
c000e1b6:	83 c4 10             	add    esp,0x10
c000e1b9:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000e1c0:	83 ec 0c             	sub    esp,0xc
c000e1c3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e1ca:	50                   	push   eax
c000e1cb:	e8 10 de 00 00       	call   c001bfe0 <LinkedList<Device>::removeFirst()>
c000e1d0:	83 c4 10             	add    esp,0x10
c000e1d3:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000e1da:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000e1e1:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000e1e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e1ec:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000e1f2:	ba 09 00 00 00       	mov    edx,0x9
c000e1f7:	fc                   	cld    
c000e1f8:	89 c7                	mov    edi,eax
c000e1fa:	89 de                	mov    esi,ebx
c000e1fc:	89 d1                	mov    ecx,edx
c000e1fe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e200:	83 ec 08             	sub    esp,0x8
c000e203:	8d 44 24 38          	lea    eax,[esp+0x38]
c000e207:	50                   	push   eax
c000e208:	83 ec 24             	sub    esp,0x24
c000e20b:	89 e0                	mov    eax,esp
c000e20d:	89 c3                	mov    ebx,eax
c000e20f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000e213:	ba 09 00 00 00       	mov    edx,0x9
c000e218:	89 df                	mov    edi,ebx
c000e21a:	89 c6                	mov    esi,eax
c000e21c:	89 d1                	mov    ecx,edx
c000e21e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e220:	e8 bf 9d 00 00       	call   c0017fe4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000e225:	83 c4 30             	add    esp,0x30
c000e228:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000e22f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000e237:	0f 84 4b ff ff ff    	je     c000e188 <ACPI::open(int, int, void*)+0x164>
c000e23d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000e248:	83 ec 0c             	sub    esp,0xc
c000e24b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e252:	e8 0e 8a ff ff       	call   c0006c65 <malloc>
c000e257:	83 c4 10             	add    esp,0x10
c000e25a:	89 c3                	mov    ebx,eax
c000e25c:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c000e261:	83 ec 04             	sub    esp,0x4
c000e264:	50                   	push   eax
c000e265:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e26c:	53                   	push   ebx
c000e26d:	e8 2c bd ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c000e272:	83 c4 10             	add    esp,0x10
c000e275:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000e27c:	83 ec 0c             	sub    esp,0xc
c000e27f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e286:	e8 41 c0 ff ff       	call   c000a2cc <File::exists()>
c000e28b:	83 c4 10             	add    esp,0x10
c000e28e:	84 c0                	test   al,al
c000e290:	74 2a                	je     c000e2bc <ACPI::open(int, int, void*)+0x298>
c000e292:	83 ec 08             	sub    esp,0x8
c000e295:	6a 01                	push   0x1
c000e297:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e29e:	e8 eb 3d 00 00       	call   c001208e <Thr::loadDLL(char const*, bool)>
c000e2a3:	83 c4 10             	add    esp,0x10
c000e2a6:	83 ec 08             	sub    esp,0x8
c000e2a9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e2b0:	50                   	push   eax
c000e2b1:	e8 09 40 00 00       	call   c00122bf <Thr::executeDLL(unsigned long, void*)>
c000e2b6:	83 c4 10             	add    esp,0x10
c000e2b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2bc:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000e2c4:	0f 84 be fe ff ff    	je     c000e188 <ACPI::open(int, int, void*)+0x164>
c000e2ca:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000e2d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2d3:	83 c0 08             	add    eax,0x8
c000e2d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2d8:	83 ec 0c             	sub    esp,0xc
c000e2db:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e2e2:	ff d0                	call   eax
c000e2e4:	83 c4 10             	add    esp,0x10
c000e2e7:	e9 9c fe ff ff       	jmp    c000e188 <ACPI::open(int, int, void*)+0x164>
c000e2ec:	83 ec 0c             	sub    esp,0xc
c000e2ef:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e2f6:	50                   	push   eax
c000e2f7:	e8 bc dc 00 00       	call   c001bfb8 <LinkedList<Device>::~LinkedList()>
c000e2fc:	83 c4 10             	add    esp,0x10
c000e2ff:	8b 1d 08 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f608
c000e305:	83 ec 08             	sub    esp,0x8
c000e308:	6a 01                	push   0x1
c000e30a:	68 3f db 01 c0       	push   0xc001db3f
c000e30f:	e8 7a 3d 00 00       	call   c001208e <Thr::loadDLL(char const*, bool)>
c000e314:	83 c4 10             	add    esp,0x10
c000e317:	83 ec 08             	sub    esp,0x8
c000e31a:	53                   	push   ebx
c000e31b:	50                   	push   eax
c000e31c:	e8 9e 3f 00 00       	call   c00122bf <Thr::executeDLL(unsigned long, void*)>
c000e321:	83 c4 10             	add    esp,0x10
c000e324:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000e329:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000e32f:	83 e0 04             	and    eax,0x4
c000e332:	84 c0                	test   al,al
c000e334:	0f 84 16 01 00 00    	je     c000e450 <ACPI::open(int, int, void*)+0x42c>
c000e33a:	83 ec 0c             	sub    esp,0xc
c000e33d:	68 5c db 01 c0       	push   0xc001db5c
c000e342:	e8 78 89 ff ff       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c000e347:	83 c4 10             	add    esp,0x10
c000e34a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000e355:	83 ec 0c             	sub    esp,0xc
c000e358:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000e35f:	e8 01 89 ff ff       	call   c0006c65 <malloc>
c000e364:	83 c4 10             	add    esp,0x10
c000e367:	89 c3                	mov    ebx,eax
c000e369:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c000e36e:	83 ec 04             	sub    esp,0x4
c000e371:	50                   	push   eax
c000e372:	68 79 db 01 c0       	push   0xc001db79
c000e377:	53                   	push   ebx
c000e378:	e8 21 bc ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c000e37d:	83 c4 10             	add    esp,0x10
c000e380:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000e387:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e38f:	74 1b                	je     c000e3ac <ACPI::open(int, int, void*)+0x388>
c000e391:	83 ec 0c             	sub    esp,0xc
c000e394:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e39b:	e8 2c bf ff ff       	call   c000a2cc <File::exists()>
c000e3a0:	83 c4 10             	add    esp,0x10
c000e3a3:	84 c0                	test   al,al
c000e3a5:	74 05                	je     c000e3ac <ACPI::open(int, int, void*)+0x388>
c000e3a7:	b0 01                	mov    al,0x1
c000e3a9:	eb 05                	jmp    c000e3b0 <ACPI::open(int, int, void*)+0x38c>
c000e3ab:	90                   	nop
c000e3ac:	b0 00                	mov    al,0x0
c000e3ae:	66 90                	xchg   ax,ax
c000e3b0:	84 c0                	test   al,al
c000e3b2:	74 28                	je     c000e3dc <ACPI::open(int, int, void*)+0x3b8>
c000e3b4:	83 ec 08             	sub    esp,0x8
c000e3b7:	6a 01                	push   0x1
c000e3b9:	68 79 db 01 c0       	push   0xc001db79
c000e3be:	e8 cb 3c 00 00       	call   c001208e <Thr::loadDLL(char const*, bool)>
c000e3c3:	83 c4 10             	add    esp,0x10
c000e3c6:	83 ec 08             	sub    esp,0x8
c000e3c9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000e3d0:	50                   	push   eax
c000e3d1:	e8 e9 3e 00 00       	call   c00122bf <Thr::executeDLL(unsigned long, void*)>
c000e3d6:	83 c4 10             	add    esp,0x10
c000e3d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3dc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e3e4:	74 2a                	je     c000e410 <ACPI::open(int, int, void*)+0x3ec>
c000e3e6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e3ee:	74 20                	je     c000e410 <ACPI::open(int, int, void*)+0x3ec>
c000e3f0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000e3f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3f9:	83 c0 08             	add    eax,0x8
c000e3fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3fe:	83 ec 0c             	sub    esp,0xc
c000e401:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e408:	ff d0                	call   eax
c000e40a:	83 c4 10             	add    esp,0x10
c000e40d:	8d 76 00             	lea    esi,[esi+0x0]
c000e410:	a1 28 1e 02 c0       	mov    eax,ds:0xc0021e28
c000e415:	83 ec 08             	sub    esp,0x8
c000e418:	68 96 db 01 c0       	push   0xc001db96
c000e41d:	50                   	push   eax
c000e41e:	e8 31 f2 ff ff       	call   c000d654 <findDataTable(unsigned char*, char*)>
c000e423:	83 c4 10             	add    esp,0x10
c000e426:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000e42d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000e435:	74 19                	je     c000e450 <ACPI::open(int, int, void*)+0x42c>
c000e437:	83 ec 08             	sub    esp,0x8
c000e43a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e441:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e448:	e8 67 fb ff ff       	call   c000dfb4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000e44d:	83 c4 10             	add    esp,0x10
c000e450:	b8 00 00 00 00       	mov    eax,0x0
c000e455:	81 c4 70 01 00 00    	add    esp,0x170
c000e45b:	5b                   	pop    ebx
c000e45c:	5e                   	pop    esi
c000e45d:	5f                   	pop    edi
c000e45e:	c3                   	ret    
c000e45f:	90                   	nop

c000e460 <CPU::close(int, int, void*)>:
c000e460:	31 c0                	xor    eax,eax
c000e462:	c3                   	ret    
c000e463:	90                   	nop

c000e464 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000e464:	60                   	pusha  
c000e465:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e469:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e46d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e471:	9c                   	pushf  
c000e472:	fa                   	cli    
c000e473:	0f 09                	wbinvd 
c000e475:	0f 30                	wrmsr  
c000e477:	9d                   	popf   
c000e478:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e47c:	89 02                	mov    DWORD PTR [edx],eax
c000e47e:	61                   	popa   
c000e47f:	c3                   	ret    

c000e480 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000e480:	60                   	pusha  
c000e481:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e485:	9c                   	pushf  
c000e486:	fa                   	cli    
c000e487:	0f 09                	wbinvd 
c000e489:	31 c0                	xor    eax,eax
c000e48b:	31 d2                	xor    edx,edx
c000e48d:	0f 32                	rdmsr  
c000e48f:	9d                   	popf   
c000e490:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e494:	89 02                	mov    DWORD PTR [edx],eax
c000e496:	61                   	popa   
c000e497:	c3                   	ret    

c000e498 <CPU::AMD_K6_writeback(int, int, int)>:
c000e498:	56                   	push   esi
c000e499:	53                   	push   ebx
c000e49a:	83 ec 10             	sub    esp,0x10
c000e49d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4a1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000e4a6:	75 5d                	jne    c000e505 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e4a8:	83 f8 08             	cmp    eax,0x8
c000e4ab:	75 09                	jne    c000e4b6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000e4ad:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000e4b2:	7e 13                	jle    c000e4c7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e4b4:	eb 30                	jmp    c000e4e6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e4b6:	83 f8 06             	cmp    eax,0x6
c000e4b9:	7c 4a                	jl     c000e505 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e4bb:	83 f8 07             	cmp    eax,0x7
c000e4be:	7e 07                	jle    c000e4c7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e4c0:	83 f8 09             	cmp    eax,0x9
c000e4c3:	74 21                	je     c000e4e6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e4c5:	eb 3e                	jmp    c000e505 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e4c7:	89 e6                	mov    esi,esp
c000e4c9:	8b 1d 2c f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f62c
c000e4cf:	56                   	push   esi
c000e4d0:	c1 eb 15             	shr    ebx,0x15
c000e4d3:	68 82 00 00 c0       	push   0xc0000082
c000e4d8:	83 e3 7e             	and    ebx,0x7e
c000e4db:	e8 a0 ff ff ff       	call   c000e480 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e4e0:	56                   	push   esi
c000e4e1:	6a 00                	push   0x0
c000e4e3:	53                   	push   ebx
c000e4e4:	eb 12                	jmp    c000e4f8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000e4e6:	89 e3                	mov    ebx,esp
c000e4e8:	53                   	push   ebx
c000e4e9:	68 82 00 00 c0       	push   0xc0000082
c000e4ee:	e8 8d ff ff ff       	call   c000e480 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e4f3:	53                   	push   ebx
c000e4f4:	6a 00                	push   0x0
c000e4f6:	6a 00                	push   0x0
c000e4f8:	68 82 00 00 c0       	push   0xc0000082
c000e4fd:	e8 62 ff ff ff       	call   c000e464 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000e502:	83 c4 18             	add    esp,0x18
c000e505:	83 c4 10             	add    esp,0x10
c000e508:	5b                   	pop    ebx
c000e509:	5e                   	pop    esi
c000e50a:	c3                   	ret    
c000e50b:	90                   	nop

c000e50c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000e50c:	55                   	push   ebp
c000e50d:	57                   	push   edi
c000e50e:	56                   	push   esi
c000e50f:	53                   	push   ebx
c000e510:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e514:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e518:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e51c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000e520:	39 05 d0 ef 01 c0    	cmp    DWORD PTR ds:0xc001efd0,eax
c000e526:	75 23                	jne    c000e54b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000e528:	a1 8c 20 02 c0       	mov    eax,ds:0xc002208c
c000e52d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e531:	89 06                	mov    DWORD PTR [esi],eax
c000e533:	a1 88 20 02 c0       	mov    eax,ds:0xc0022088
c000e538:	89 07                	mov    DWORD PTR [edi],eax
c000e53a:	a1 84 20 02 c0       	mov    eax,ds:0xc0022084
c000e53f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e542:	a1 80 20 02 c0       	mov    eax,ds:0xc0022080
c000e547:	89 02                	mov    DWORD PTR [edx],eax
c000e549:	eb 3f                	jmp    c000e58a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000e54b:	31 c9                	xor    ecx,ecx
c000e54d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e551:	0f a2                	cpuid  
c000e553:	89 06                	mov    DWORD PTR [esi],eax
c000e555:	89 1f                	mov    DWORD PTR [edi],ebx
c000e557:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e55b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000e55e:	89 10                	mov    DWORD PTR [eax],edx
c000e560:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e564:	a3 d0 ef 01 c0       	mov    ds:0xc001efd0,eax
c000e569:	8b 06                	mov    eax,DWORD PTR [esi]
c000e56b:	a3 8c 20 02 c0       	mov    ds:0xc002208c,eax
c000e570:	8b 07                	mov    eax,DWORD PTR [edi]
c000e572:	a3 88 20 02 c0       	mov    ds:0xc0022088,eax
c000e577:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e57a:	a3 84 20 02 c0       	mov    ds:0xc0022084,eax
c000e57f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e583:	8b 00                	mov    eax,DWORD PTR [eax]
c000e585:	a3 80 20 02 c0       	mov    ds:0xc0022080,eax
c000e58a:	5b                   	pop    ebx
c000e58b:	5e                   	pop    esi
c000e58c:	5f                   	pop    edi
c000e58d:	5d                   	pop    ebp
c000e58e:	c3                   	ret    
c000e58f:	90                   	nop

c000e590 <CPU::cpuidCheckEDX(unsigned int)>:
c000e590:	83 ec 10             	sub    esp,0x10
c000e593:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e597:	50                   	push   eax
c000e598:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e59c:	50                   	push   eax
c000e59d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5a1:	50                   	push   eax
c000e5a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5a6:	50                   	push   eax
c000e5a7:	6a 01                	push   0x1
c000e5a9:	e8 5e ff ff ff       	call   c000e50c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e5ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5b2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000e5b6:	0f 95 c0             	setne  al
c000e5b9:	83 c4 24             	add    esp,0x24
c000e5bc:	c3                   	ret    
c000e5bd:	90                   	nop

c000e5be <CPU::cpuidCheckECX(unsigned int)>:
c000e5be:	83 ec 10             	sub    esp,0x10
c000e5c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5c5:	50                   	push   eax
c000e5c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5ca:	50                   	push   eax
c000e5cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5cf:	50                   	push   eax
c000e5d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5d4:	50                   	push   eax
c000e5d5:	6a 01                	push   0x1
c000e5d7:	e8 30 ff ff ff       	call   c000e50c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e5dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5e0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e5e4:	0f 95 c0             	setne  al
c000e5e7:	83 c4 24             	add    esp,0x24
c000e5ea:	c3                   	ret    
c000e5eb:	90                   	nop

c000e5ec <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000e5ec:	83 ec 10             	sub    esp,0x10
c000e5ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5f3:	50                   	push   eax
c000e5f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5f8:	50                   	push   eax
c000e5f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e5fd:	50                   	push   eax
c000e5fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e602:	50                   	push   eax
c000e603:	6a 07                	push   0x7
c000e605:	e8 02 ff ff ff       	call   c000e50c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e60e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000e612:	0f 95 c0             	setne  al
c000e615:	83 c4 24             	add    esp,0x24
c000e618:	c3                   	ret    
c000e619:	90                   	nop

c000e61a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000e61a:	83 ec 10             	sub    esp,0x10
c000e61d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e621:	50                   	push   eax
c000e622:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e626:	50                   	push   eax
c000e627:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e62b:	50                   	push   eax
c000e62c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e630:	50                   	push   eax
c000e631:	6a 07                	push   0x7
c000e633:	e8 d4 fe ff ff       	call   c000e50c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e638:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e63c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e640:	0f 95 c0             	setne  al
c000e643:	83 c4 24             	add    esp,0x24
c000e646:	c3                   	ret    
c000e647:	90                   	nop

c000e648 <CPU::CPU()>:
c000e648:	83 ec 0c             	sub    esp,0xc
c000e64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e64f:	83 ec 08             	sub    esp,0x8
c000e652:	68 b9 dc 01 c0       	push   0xc001dcb9
c000e657:	50                   	push   eax
c000e658:	e8 a3 c9 ff ff       	call   c000b000 <Device::Device(char const*)>
c000e65d:	83 c4 10             	add    esp,0x10
c000e660:	ba 50 dd 01 c0       	mov    edx,0xc001dd50
c000e665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e669:	89 10                	mov    DWORD PTR [eax],edx
c000e66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e66f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000e679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67d:	05 78 01 00 00       	add    eax,0x178
c000e682:	83 ec 0c             	sub    esp,0xc
c000e685:	50                   	push   eax
c000e686:	e8 5b 7e ff ff       	call   c00064e6 <GDT::GDT()>
c000e68b:	83 c4 10             	add    esp,0x10
c000e68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e692:	05 7c 09 00 00       	add    eax,0x97c
c000e697:	83 ec 0c             	sub    esp,0xc
c000e69a:	50                   	push   eax
c000e69b:	e8 c0 80 ff ff       	call   c0006760 <IDT::IDT()>
c000e6a0:	83 c4 10             	add    esp,0x10
c000e6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6a7:	05 7c 11 00 00       	add    eax,0x117c
c000e6ac:	83 ec 0c             	sub    esp,0xc
c000e6af:	50                   	push   eax
c000e6b0:	e8 2f 9a ff ff       	call   c00080e4 <TSS::TSS()>
c000e6b5:	83 c4 10             	add    esp,0x10
c000e6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6bc:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000e6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6c7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000e6d1:	90                   	nop
c000e6d2:	83 c4 0c             	add    esp,0xc
c000e6d5:	c3                   	ret    

c000e6d6 <CPU::displayFeatures()>:
c000e6d6:	c3                   	ret    
c000e6d7:	90                   	nop

c000e6d8 <CPU::detectFeatures()>:
c000e6d8:	55                   	push   ebp
c000e6d9:	57                   	push   edi
c000e6da:	56                   	push   esi
c000e6db:	53                   	push   ebx
c000e6dc:	83 ec 30             	sub    esp,0x30
c000e6df:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e6e3:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000e6ed:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000e6f4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000e6fa:	6a 0d                	push   0xd
c000e6fc:	6a 00                	push   0x0
c000e6fe:	55                   	push   ebp
c000e6ff:	e8 ec 1d ff ff       	call   c00004f0 <memset>
c000e704:	83 c4 10             	add    esp,0x10
c000e707:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000e70c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c000e713:	0f 84 e8 05 00 00    	je     c000ed01 <CPU::detectFeatures()+0x629>
c000e719:	83 ec 0c             	sub    esp,0xc
c000e71c:	89 ef                	mov    edi,ebp
c000e71e:	6a 10                	push   0x10
c000e720:	e8 6b fe ff ff       	call   c000e590 <CPU::cpuidCheckEDX(unsigned int)>
c000e725:	83 e0 01             	and    eax,0x1
c000e728:	8d 14 00             	lea    edx,[eax+eax*1]
c000e72b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e731:	83 e0 fd             	and    eax,0xfffffffd
c000e734:	09 d0                	or     eax,edx
c000e736:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e73c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000e743:	e8 48 fe ff ff       	call   c000e590 <CPU::cpuidCheckEDX(unsigned int)>
c000e748:	83 e0 01             	and    eax,0x1
c000e74b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e752:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e758:	83 e0 fb             	and    eax,0xfffffffb
c000e75b:	09 d0                	or     eax,edx
c000e75d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e763:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e76a:	e8 21 fe ff ff       	call   c000e590 <CPU::cpuidCheckEDX(unsigned int)>
c000e76f:	83 e0 01             	and    eax,0x1
c000e772:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e779:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e77f:	83 e0 f7             	and    eax,0xfffffff7
c000e782:	09 d0                	or     eax,edx
c000e784:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e78a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000e791:	e8 fa fd ff ff       	call   c000e590 <CPU::cpuidCheckEDX(unsigned int)>
c000e796:	83 e0 01             	and    eax,0x1
c000e799:	c1 e0 04             	shl    eax,0x4
c000e79c:	88 c2                	mov    dl,al
c000e79e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e7a4:	83 e0 ef             	and    eax,0xffffffef
c000e7a7:	09 d0                	or     eax,edx
c000e7a9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e7af:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000e7b6:	e8 d5 fd ff ff       	call   c000e590 <CPU::cpuidCheckEDX(unsigned int)>
c000e7bb:	83 e0 01             	and    eax,0x1
c000e7be:	c1 e0 05             	shl    eax,0x5
c000e7c1:	88 c2                	mov    dl,al
c000e7c3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e7c9:	83 e0 df             	and    eax,0xffffffdf
c000e7cc:	09 d0                	or     eax,edx
c000e7ce:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e7d4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e7db:	e8 b0 fd ff ff       	call   c000e590 <CPU::cpuidCheckEDX(unsigned int)>
c000e7e0:	83 e0 01             	and    eax,0x1
c000e7e3:	8d 14 00             	lea    edx,[eax+eax*1]
c000e7e6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e7ec:	83 e0 fd             	and    eax,0xfffffffd
c000e7ef:	09 d0                	or     eax,edx
c000e7f1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e7f7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000e7fe:	e8 8d fd ff ff       	call   c000e590 <CPU::cpuidCheckEDX(unsigned int)>
c000e803:	83 e0 01             	and    eax,0x1
c000e806:	c1 e0 06             	shl    eax,0x6
c000e809:	88 c2                	mov    dl,al
c000e80b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e811:	83 e0 bf             	and    eax,0xffffffbf
c000e814:	09 d0                	or     eax,edx
c000e816:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e81c:	58                   	pop    eax
c000e81d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e821:	50                   	push   eax
c000e822:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e826:	50                   	push   eax
c000e827:	8d 74 24 28          	lea    esi,[esp+0x28]
c000e82b:	56                   	push   esi
c000e82c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e830:	50                   	push   eax
c000e831:	6a 00                	push   0x0
c000e833:	e8 d4 fc ff ff       	call   c000e50c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e838:	b8 04 00 00 00       	mov    eax,0x4
c000e83d:	89 c1                	mov    ecx,eax
c000e83f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e841:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000e847:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e84b:	89 c1                	mov    ecx,eax
c000e84d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e84f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000e855:	8d 74 24 38          	lea    esi,[esp+0x38]
c000e859:	89 c1                	mov    ecx,eax
c000e85b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e85d:	83 c4 18             	add    esp,0x18
c000e860:	68 c8 db 01 c0       	push   0xc001dbc8
c000e865:	55                   	push   ebp
c000e866:	e8 95 1e ff ff       	call   c0000700 <strcmp>
c000e86b:	83 c4 10             	add    esp,0x10
c000e86e:	85 c0                	test   eax,eax
c000e870:	75 0f                	jne    c000e881 <CPU::detectFeatures()+0x1a9>
c000e872:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000e87c:	e9 22 02 00 00       	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000e881:	50                   	push   eax
c000e882:	50                   	push   eax
c000e883:	68 d5 db 01 c0       	push   0xc001dbd5
c000e888:	55                   	push   ebp
c000e889:	e8 72 1e ff ff       	call   c0000700 <strcmp>
c000e88e:	83 c4 10             	add    esp,0x10
c000e891:	85 c0                	test   eax,eax
c000e893:	74 dd                	je     c000e872 <CPU::detectFeatures()+0x19a>
c000e895:	50                   	push   eax
c000e896:	50                   	push   eax
c000e897:	68 e2 db 01 c0       	push   0xc001dbe2
c000e89c:	55                   	push   ebp
c000e89d:	e8 5e 1e ff ff       	call   c0000700 <strcmp>
c000e8a2:	83 c4 10             	add    esp,0x10
c000e8a5:	85 c0                	test   eax,eax
c000e8a7:	74 2a                	je     c000e8d3 <CPU::detectFeatures()+0x1fb>
c000e8a9:	50                   	push   eax
c000e8aa:	50                   	push   eax
c000e8ab:	68 ef db 01 c0       	push   0xc001dbef
c000e8b0:	55                   	push   ebp
c000e8b1:	e8 4a 1e ff ff       	call   c0000700 <strcmp>
c000e8b6:	83 c4 10             	add    esp,0x10
c000e8b9:	85 c0                	test   eax,eax
c000e8bb:	74 16                	je     c000e8d3 <CPU::detectFeatures()+0x1fb>
c000e8bd:	50                   	push   eax
c000e8be:	50                   	push   eax
c000e8bf:	68 fc db 01 c0       	push   0xc001dbfc
c000e8c4:	55                   	push   ebp
c000e8c5:	e8 36 1e ff ff       	call   c0000700 <strcmp>
c000e8ca:	83 c4 10             	add    esp,0x10
c000e8cd:	85 c0                	test   eax,eax
c000e8cf:	74 48                	je     c000e919 <CPU::detectFeatures()+0x241>
c000e8d1:	eb 0f                	jmp    c000e8e2 <CPU::detectFeatures()+0x20a>
c000e8d3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000e8dd:	e9 c1 01 00 00       	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000e8e2:	50                   	push   eax
c000e8e3:	50                   	push   eax
c000e8e4:	68 09 dc 01 c0       	push   0xc001dc09
c000e8e9:	55                   	push   ebp
c000e8ea:	e8 11 1e ff ff       	call   c0000700 <strcmp>
c000e8ef:	83 c4 10             	add    esp,0x10
c000e8f2:	85 c0                	test   eax,eax
c000e8f4:	74 23                	je     c000e919 <CPU::detectFeatures()+0x241>
c000e8f6:	57                   	push   edi
c000e8f7:	57                   	push   edi
c000e8f8:	68 16 dc 01 c0       	push   0xc001dc16
c000e8fd:	55                   	push   ebp
c000e8fe:	e8 fd 1d ff ff       	call   c0000700 <strcmp>
c000e903:	83 c4 10             	add    esp,0x10
c000e906:	85 c0                	test   eax,eax
c000e908:	75 1e                	jne    c000e928 <CPU::detectFeatures()+0x250>
c000e90a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000e914:	e9 8a 01 00 00       	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000e919:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000e923:	e9 7b 01 00 00       	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000e928:	56                   	push   esi
c000e929:	56                   	push   esi
c000e92a:	68 23 dc 01 c0       	push   0xc001dc23
c000e92f:	55                   	push   ebp
c000e930:	e8 cb 1d ff ff       	call   c0000700 <strcmp>
c000e935:	83 c4 10             	add    esp,0x10
c000e938:	85 c0                	test   eax,eax
c000e93a:	75 0f                	jne    c000e94b <CPU::detectFeatures()+0x273>
c000e93c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000e946:	e9 58 01 00 00       	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000e94b:	51                   	push   ecx
c000e94c:	51                   	push   ecx
c000e94d:	68 e2 db 01 c0       	push   0xc001dbe2
c000e952:	55                   	push   ebp
c000e953:	e8 a8 1d ff ff       	call   c0000700 <strcmp>
c000e958:	83 c4 10             	add    esp,0x10
c000e95b:	85 c0                	test   eax,eax
c000e95d:	75 0f                	jne    c000e96e <CPU::detectFeatures()+0x296>
c000e95f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000e969:	e9 35 01 00 00       	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000e96e:	52                   	push   edx
c000e96f:	52                   	push   edx
c000e970:	68 30 dc 01 c0       	push   0xc001dc30
c000e975:	55                   	push   ebp
c000e976:	e8 85 1d ff ff       	call   c0000700 <strcmp>
c000e97b:	83 c4 10             	add    esp,0x10
c000e97e:	85 c0                	test   eax,eax
c000e980:	75 0f                	jne    c000e991 <CPU::detectFeatures()+0x2b9>
c000e982:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000e98c:	e9 12 01 00 00       	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000e991:	50                   	push   eax
c000e992:	50                   	push   eax
c000e993:	68 3d dc 01 c0       	push   0xc001dc3d
c000e998:	55                   	push   ebp
c000e999:	e8 62 1d ff ff       	call   c0000700 <strcmp>
c000e99e:	83 c4 10             	add    esp,0x10
c000e9a1:	85 c0                	test   eax,eax
c000e9a3:	75 0f                	jne    c000e9b4 <CPU::detectFeatures()+0x2dc>
c000e9a5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000e9af:	e9 ef 00 00 00       	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000e9b4:	50                   	push   eax
c000e9b5:	50                   	push   eax
c000e9b6:	68 4a dc 01 c0       	push   0xc001dc4a
c000e9bb:	55                   	push   ebp
c000e9bc:	e8 3f 1d ff ff       	call   c0000700 <strcmp>
c000e9c1:	83 c4 10             	add    esp,0x10
c000e9c4:	85 c0                	test   eax,eax
c000e9c6:	75 0f                	jne    c000e9d7 <CPU::detectFeatures()+0x2ff>
c000e9c8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000e9d2:	e9 cc 00 00 00       	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000e9d7:	50                   	push   eax
c000e9d8:	50                   	push   eax
c000e9d9:	68 57 dc 01 c0       	push   0xc001dc57
c000e9de:	55                   	push   ebp
c000e9df:	e8 1c 1d ff ff       	call   c0000700 <strcmp>
c000e9e4:	83 c4 10             	add    esp,0x10
c000e9e7:	85 c0                	test   eax,eax
c000e9e9:	75 0f                	jne    c000e9fa <CPU::detectFeatures()+0x322>
c000e9eb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000e9f5:	e9 a9 00 00 00       	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000e9fa:	50                   	push   eax
c000e9fb:	50                   	push   eax
c000e9fc:	68 64 dc 01 c0       	push   0xc001dc64
c000ea01:	55                   	push   ebp
c000ea02:	e8 f9 1c ff ff       	call   c0000700 <strcmp>
c000ea07:	83 c4 10             	add    esp,0x10
c000ea0a:	85 c0                	test   eax,eax
c000ea0c:	75 0f                	jne    c000ea1d <CPU::detectFeatures()+0x345>
c000ea0e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000ea18:	e9 86 00 00 00       	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000ea1d:	50                   	push   eax
c000ea1e:	50                   	push   eax
c000ea1f:	68 71 dc 01 c0       	push   0xc001dc71
c000ea24:	55                   	push   ebp
c000ea25:	e8 d6 1c ff ff       	call   c0000700 <strcmp>
c000ea2a:	83 c4 10             	add    esp,0x10
c000ea2d:	85 c0                	test   eax,eax
c000ea2f:	75 0c                	jne    c000ea3d <CPU::detectFeatures()+0x365>
c000ea31:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000ea3b:	eb 66                	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000ea3d:	50                   	push   eax
c000ea3e:	50                   	push   eax
c000ea3f:	68 7e dc 01 c0       	push   0xc001dc7e
c000ea44:	55                   	push   ebp
c000ea45:	e8 b6 1c ff ff       	call   c0000700 <strcmp>
c000ea4a:	83 c4 10             	add    esp,0x10
c000ea4d:	85 c0                	test   eax,eax
c000ea4f:	75 0c                	jne    c000ea5d <CPU::detectFeatures()+0x385>
c000ea51:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000ea5b:	eb 46                	jmp    c000eaa3 <CPU::detectFeatures()+0x3cb>
c000ea5d:	57                   	push   edi
c000ea5e:	57                   	push   edi
c000ea5f:	68 8b dc 01 c0       	push   0xc001dc8b
c000ea64:	55                   	push   ebp
c000ea65:	e8 96 1c ff ff       	call   c0000700 <strcmp>
c000ea6a:	83 c4 10             	add    esp,0x10
c000ea6d:	85 c0                	test   eax,eax
c000ea6f:	74 e0                	je     c000ea51 <CPU::detectFeatures()+0x379>
c000ea71:	56                   	push   esi
c000ea72:	56                   	push   esi
c000ea73:	68 98 dc 01 c0       	push   0xc001dc98
c000ea78:	55                   	push   ebp
c000ea79:	e8 82 1c ff ff       	call   c0000700 <strcmp>
c000ea7e:	83 c4 10             	add    esp,0x10
c000ea81:	85 c0                	test   eax,eax
c000ea83:	74 cc                	je     c000ea51 <CPU::detectFeatures()+0x379>
c000ea85:	51                   	push   ecx
c000ea86:	51                   	push   ecx
c000ea87:	68 a5 dc 01 c0       	push   0xc001dca5
c000ea8c:	55                   	push   ebp
c000ea8d:	e8 6e 1c ff ff       	call   c0000700 <strcmp>
c000ea92:	83 c4 10             	add    esp,0x10
c000ea95:	85 c0                	test   eax,eax
c000ea97:	74 b8                	je     c000ea51 <CPU::detectFeatures()+0x379>
c000ea99:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000eaa3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000eaa8:	0f 86 be 00 00 00    	jbe    c000eb6c <CPU::detectFeatures()+0x494>
c000eaae:	83 ec 0c             	sub    esp,0xc
c000eab1:	68 80 00 00 00       	push   0x80
c000eab6:	e8 31 fb ff ff       	call   c000e5ec <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000eabb:	83 e0 01             	and    eax,0x1
c000eabe:	c1 e0 06             	shl    eax,0x6
c000eac1:	88 c2                	mov    dl,al
c000eac3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000eac9:	83 e0 bf             	and    eax,0xffffffbf
c000eacc:	09 d0                	or     eax,edx
c000eace:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ead4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000eadb:	e8 0c fb ff ff       	call   c000e5ec <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000eae0:	83 e0 01             	and    eax,0x1
c000eae3:	c1 e0 04             	shl    eax,0x4
c000eae6:	88 c2                	mov    dl,al
c000eae8:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000eaee:	83 e0 ef             	and    eax,0xffffffef
c000eaf1:	09 d0                	or     eax,edx
c000eaf3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000eaf9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000eb00:	e8 e7 fa ff ff       	call   c000e5ec <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000eb05:	c1 e0 07             	shl    eax,0x7
c000eb08:	88 c2                	mov    dl,al
c000eb0a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000eb10:	83 e0 7f             	and    eax,0x7f
c000eb13:	09 d0                	or     eax,edx
c000eb15:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000eb1b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000eb22:	e8 f3 fa ff ff       	call   c000e61a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000eb27:	83 e0 01             	and    eax,0x1
c000eb2a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000eb31:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000eb37:	83 e0 f7             	and    eax,0xfffffff7
c000eb3a:	09 d0                	or     eax,edx
c000eb3c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000eb42:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000eb49:	e8 cc fa ff ff       	call   c000e61a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000eb4e:	83 c4 10             	add    esp,0x10
c000eb51:	83 e0 01             	and    eax,0x1
c000eb54:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eb5b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000eb61:	83 e0 fb             	and    eax,0xfffffffb
c000eb64:	09 d0                	or     eax,edx
c000eb66:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000eb6c:	83 ec 0c             	sub    esp,0xc
c000eb6f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb73:	50                   	push   eax
c000eb74:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb78:	50                   	push   eax
c000eb79:	8d 74 24 28          	lea    esi,[esp+0x28]
c000eb7d:	56                   	push   esi
c000eb7e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb82:	50                   	push   eax
c000eb83:	6a 01                	push   0x1
c000eb85:	e8 82 f9 ff ff       	call   c000e50c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eb8a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000eb8e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000eb94:	88 ca                	mov    dl,cl
c000eb96:	83 e0 f0             	and    eax,0xfffffff0
c000eb99:	83 e2 0f             	and    edx,0xf
c000eb9c:	09 d0                	or     eax,edx
c000eb9e:	88 ca                	mov    dl,cl
c000eba0:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000eba6:	c0 ea 04             	shr    dl,0x4
c000eba9:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000ebad:	0f b6 c2             	movzx  eax,dl
c000ebb0:	83 c4 20             	add    esp,0x20
c000ebb3:	c1 e0 06             	shl    eax,0x6
c000ebb6:	89 c7                	mov    edi,eax
c000ebb8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ebbe:	66 25 3f c0          	and    ax,0xc03f
c000ebc2:	09 f8                	or     eax,edi
c000ebc4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000ebcb:	89 c8                	mov    eax,ecx
c000ebcd:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000ebd4:	c1 e8 08             	shr    eax,0x8
c000ebd7:	83 e5 3f             	and    ebp,0x3f
c000ebda:	83 e0 0f             	and    eax,0xf
c000ebdd:	89 c7                	mov    edi,eax
c000ebdf:	c1 e7 06             	shl    edi,0x6
c000ebe2:	09 ef                	or     edi,ebp
c000ebe4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000ebeb:	89 fa                	mov    edx,edi
c000ebed:	83 e5 c0             	and    ebp,0xffffffc0
c000ebf0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000ebf6:	88 c2                	mov    dl,al
c000ebf8:	c0 ea 02             	shr    dl,0x2
c000ebfb:	89 d7                	mov    edi,edx
c000ebfd:	09 ef                	or     edi,ebp
c000ebff:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000ec05:	89 fa                	mov    edx,edi
c000ec07:	83 e5 cf             	and    ebp,0xffffffcf
c000ec0a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000ec10:	89 cf                	mov    edi,ecx
c000ec12:	c1 ef 0c             	shr    edi,0xc
c000ec15:	83 e7 03             	and    edi,0x3
c000ec18:	c1 e7 04             	shl    edi,0x4
c000ec1b:	09 ef                	or     edi,ebp
c000ec1d:	3c 06                	cmp    al,0x6
c000ec1f:	89 fa                	mov    edx,edi
c000ec21:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000ec27:	74 04                	je     c000ec2d <CPU::detectFeatures()+0x555>
c000ec29:	3c 0f                	cmp    al,0xf
c000ec2b:	75 5c                	jne    c000ec89 <CPU::detectFeatures()+0x5b1>
c000ec2d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ec31:	89 cf                	mov    edi,ecx
c000ec33:	c1 ef 10             	shr    edi,0x10
c000ec36:	c1 e7 04             	shl    edi,0x4
c000ec39:	09 fa                	or     edx,edi
c000ec3b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000ec41:	0f b6 d2             	movzx  edx,dl
c000ec44:	66 81 e7 3f c0       	and    di,0xc03f
c000ec49:	c1 e2 06             	shl    edx,0x6
c000ec4c:	09 fa                	or     edx,edi
c000ec4e:	3c 0f                	cmp    al,0xf
c000ec50:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000ec57:	75 30                	jne    c000ec89 <CPU::detectFeatures()+0x5b1>
c000ec59:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000ec5f:	c1 e9 14             	shr    ecx,0x14
c000ec62:	83 e0 3f             	and    eax,0x3f
c000ec65:	83 c1 0f             	add    ecx,0xf
c000ec68:	88 ca                	mov    dl,cl
c000ec6a:	c0 e9 02             	shr    cl,0x2
c000ec6d:	c1 e2 06             	shl    edx,0x6
c000ec70:	09 d0                	or     eax,edx
c000ec72:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000ec78:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000ec7e:	83 e0 c0             	and    eax,0xffffffc0
c000ec81:	09 c1                	or     ecx,eax
c000ec83:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000ec89:	83 ec 0c             	sub    esp,0xc
c000ec8c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000ec93:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ec97:	50                   	push   eax
c000ec98:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000ec9c:	55                   	push   ebp
c000ec9d:	56                   	push   esi
c000ec9e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000eca2:	57                   	push   edi
c000eca3:	68 00 00 00 80       	push   0x80000000
c000eca8:	e8 5f f8 ff ff       	call   c000e50c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000ecb8:	76 22                	jbe    c000ecdc <CPU::detectFeatures()+0x604>
c000ecba:	83 ec 0c             	sub    esp,0xc
c000ecbd:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ecc1:	50                   	push   eax
c000ecc2:	55                   	push   ebp
c000ecc3:	56                   	push   esi
c000ecc4:	57                   	push   edi
c000ecc5:	68 01 00 00 80       	push   0x80000001
c000ecca:	e8 3d f8 ff ff       	call   c000e50c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eccf:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000ecd9:	83 c4 20             	add    esp,0x20
c000ecdc:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c000ece2:	8d 50 ff             	lea    edx,[eax-0x1]
c000ece5:	83 fa 03             	cmp    edx,0x3
c000ece8:	76 7e                	jbe    c000ed68 <CPU::detectFeatures()+0x690>
c000ecea:	83 f8 06             	cmp    eax,0x6
c000eced:	74 79                	je     c000ed68 <CPU::detectFeatures()+0x690>
c000ecef:	52                   	push   edx
c000ecf0:	52                   	push   edx
c000ecf1:	68 b1 dc 01 c0       	push   0xc001dcb1
c000ecf6:	53                   	push   ebx
c000ecf7:	e8 f6 c2 ff ff       	call   c000aff2 <Device::setName(char const*)>
c000ecfc:	83 c4 10             	add    esp,0x10
c000ecff:	eb 67                	jmp    c000ed68 <CPU::detectFeatures()+0x690>
c000ed01:	50                   	push   eax
c000ed02:	50                   	push   eax
c000ed03:	68 16 dc 01 c0       	push   0xc001dc16
c000ed08:	55                   	push   ebp
c000ed09:	e8 12 19 ff ff       	call   c0000620 <strcpy>
c000ed0e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ed18:	e8 c6 14 ff ff       	call   c00001e3 <is486>
c000ed1d:	83 c4 10             	add    esp,0x10
c000ed20:	85 c0                	test   eax,eax
c000ed22:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ed28:	74 1d                	je     c000ed47 <CPU::detectFeatures()+0x66f>
c000ed2a:	83 c8 07             	or     eax,0x7
c000ed2d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ed33:	0f 20 c0             	mov    eax,cr0
c000ed36:	83 e0 14             	and    eax,0x14
c000ed39:	83 f8 04             	cmp    eax,0x4
c000ed3c:	75 0e                	jne    c000ed4c <CPU::detectFeatures()+0x674>
c000ed3e:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000ed45:	eb 21                	jmp    c000ed68 <CPU::detectFeatures()+0x690>
c000ed47:	83 e0 f8             	and    eax,0xfffffff8
c000ed4a:	eb e1                	jmp    c000ed2d <CPU::detectFeatures()+0x655>
c000ed4c:	e8 6d 14 ff ff       	call   c00001be <hasLegacyFPU>
c000ed51:	83 e0 01             	and    eax,0x1
c000ed54:	8d 14 00             	lea    edx,[eax+eax*1]
c000ed57:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ed5d:	83 e0 fd             	and    eax,0xfffffffd
c000ed60:	09 d0                	or     eax,edx
c000ed62:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ed68:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ed6f:	74 0e                	je     c000ed7f <CPU::detectFeatures()+0x6a7>
c000ed71:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000ed76:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c000ed7d:	eb 20                	jmp    c000ed9f <CPU::detectFeatures()+0x6c7>
c000ed7f:	e8 3a 14 ff ff       	call   c00001be <hasLegacyFPU>
c000ed84:	83 e0 01             	and    eax,0x1
c000ed87:	8d 14 00             	lea    edx,[eax+eax*1]
c000ed8a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ed90:	83 e0 fd             	and    eax,0xfffffffd
c000ed93:	09 d0                	or     eax,edx
c000ed95:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ed9b:	a8 02                	test   al,0x2
c000ed9d:	75 d2                	jne    c000ed71 <CPU::detectFeatures()+0x699>
c000ed9f:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000eda6:	83 c4 2c             	add    esp,0x2c
c000eda9:	5b                   	pop    ebx
c000edaa:	5e                   	pop    esi
c000edab:	5f                   	pop    edi
c000edac:	5d                   	pop    ebp
c000edad:	c3                   	ret    

c000edae <CPU::setupSMEP()>:
c000edae:	0f 20 e0             	mov    eax,cr4
c000edb1:	0d 00 00 10 00       	or     eax,0x100000
c000edb6:	0f 22 e0             	mov    cr4,eax
c000edb9:	c3                   	ret    

c000edba <CPU::setupUMIP()>:
c000edba:	0f 20 e0             	mov    eax,cr4
c000edbd:	80 cc 08             	or     ah,0x8
c000edc0:	0f 22 e0             	mov    cr4,eax
c000edc3:	c3                   	ret    

c000edc4 <CPU::setupTSC()>:
c000edc4:	0f 20 e0             	mov    eax,cr4
c000edc7:	83 c8 04             	or     eax,0x4
c000edca:	0f 22 e0             	mov    cr4,eax
c000edcd:	c3                   	ret    

c000edce <CPU::setupLargePages()>:
c000edce:	0f 20 e0             	mov    eax,cr4
c000edd1:	83 c8 10             	or     eax,0x10
c000edd4:	0f 22 e0             	mov    cr4,eax
c000edd7:	c3                   	ret    

c000edd8 <CPU::setupPAT()>:
c000edd8:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c000eddd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ede4:	74 2c                	je     c000ee12 <CPU::setupPAT()+0x3a>
c000ede6:	53                   	push   ebx
c000ede7:	83 ec 10             	sub    esp,0x10
c000edea:	68 77 02 00 00       	push   0x277
c000edef:	50                   	push   eax
c000edf0:	e8 3d 74 ff ff       	call   c0006232 <Computer::rdmsr(unsigned int)>
c000edf5:	83 e2 f8             	and    edx,0xfffffff8
c000edf8:	83 ca 01             	or     edx,0x1
c000edfb:	52                   	push   edx
c000edfc:	50                   	push   eax
c000edfd:	68 77 02 00 00       	push   0x277
c000ee02:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c000ee08:	e8 51 74 ff ff       	call   c000625e <Computer::wrmsr(unsigned int, unsigned long long)>
c000ee0d:	83 c4 28             	add    esp,0x28
c000ee10:	5b                   	pop    ebx
c000ee11:	c3                   	ret    
c000ee12:	c3                   	ret    
c000ee13:	90                   	nop

c000ee14 <CPU::setupMTRR()>:
c000ee14:	c3                   	ret    
c000ee15:	90                   	nop

c000ee16 <CPU::setupGlobalPages()>:
c000ee16:	0f 20 e0             	mov    eax,cr4
c000ee19:	0c 80                	or     al,0x80
c000ee1b:	0f 22 e0             	mov    cr4,eax
c000ee1e:	c3                   	ret    
c000ee1f:	90                   	nop

c000ee20 <CPU::allowUsermodeDataAccess()>:
c000ee20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee24:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ee2b:	74 03                	je     c000ee30 <CPU::allowUsermodeDataAccess()+0x10>
c000ee2d:	0f 01 cb             	stac   
c000ee30:	c3                   	ret    
c000ee31:	90                   	nop

c000ee32 <CPU::prohibitUsermodeDataAccess()>:
c000ee32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee36:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ee3d:	74 03                	je     c000ee42 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ee3f:	0f 01 ca             	clac   
c000ee42:	c3                   	ret    
c000ee43:	90                   	nop

c000ee44 <CPU::setupSMAP()>:
c000ee44:	0f 20 e0             	mov    eax,cr4
c000ee47:	0d 00 00 20 00       	or     eax,0x200000
c000ee4c:	0f 22 e0             	mov    cr4,eax
c000ee4f:	eb e1                	jmp    c000ee32 <CPU::prohibitUsermodeDataAccess()>
c000ee51:	90                   	nop

c000ee52 <CPU::setupFeatures()>:
c000ee52:	53                   	push   ebx
c000ee53:	83 ec 08             	sub    esp,0x8
c000ee56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee5a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ee61:	74 18                	je     c000ee7b <CPU::setupFeatures()+0x29>
c000ee63:	83 ec 0c             	sub    esp,0xc
c000ee66:	68 bd dc 01 c0       	push   0xc001dcbd
c000ee6b:	e8 b8 ab ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c000ee70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee73:	e8 42 ff ff ff       	call   c000edba <CPU::setupUMIP()>
c000ee78:	83 c4 10             	add    esp,0x10
c000ee7b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ee82:	74 18                	je     c000ee9c <CPU::setupFeatures()+0x4a>
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 c7 dc 01 c0       	push   0xc001dcc7
c000ee8c:	e8 97 ab ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c000ee91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee94:	e8 2b ff ff ff       	call   c000edc4 <CPU::setupTSC()>
c000ee99:	83 c4 10             	add    esp,0x10
c000ee9c:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000eea3:	74 18                	je     c000eebd <CPU::setupFeatures()+0x6b>
c000eea5:	83 ec 0c             	sub    esp,0xc
c000eea8:	68 d0 dc 01 c0       	push   0xc001dcd0
c000eead:	e8 76 ab ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c000eeb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eeb5:	e8 14 ff ff ff       	call   c000edce <CPU::setupLargePages()>
c000eeba:	83 c4 10             	add    esp,0x10
c000eebd:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000eec4:	74 18                	je     c000eede <CPU::setupFeatures()+0x8c>
c000eec6:	83 ec 0c             	sub    esp,0xc
c000eec9:	68 d9 dc 01 c0       	push   0xc001dcd9
c000eece:	e8 55 ab ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c000eed3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed6:	e8 3b ff ff ff       	call   c000ee16 <CPU::setupGlobalPages()>
c000eedb:	83 c4 10             	add    esp,0x10
c000eede:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000eee5:	74 18                	je     c000eeff <CPU::setupFeatures()+0xad>
c000eee7:	83 ec 0c             	sub    esp,0xc
c000eeea:	68 eb dc 01 c0       	push   0xc001dceb
c000eeef:	e8 34 ab ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c000eef4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eef7:	e8 dc fe ff ff       	call   c000edd8 <CPU::setupPAT()>
c000eefc:	83 c4 10             	add    esp,0x10
c000eeff:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000ef06:	74 11                	je     c000ef19 <CPU::setupFeatures()+0xc7>
c000ef08:	c7 44 24 10 f4 dc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dcf4
c000ef10:	83 c4 08             	add    esp,0x8
c000ef13:	5b                   	pop    ebx
c000ef14:	e9 0f ab ff ff       	jmp    c0009a28 <Dbg::kprintf(char const*, ...)>
c000ef19:	83 c4 08             	add    esp,0x8
c000ef1c:	5b                   	pop    ebx
c000ef1d:	c3                   	ret    

c000ef1e <CPU::open(int, int, void*)>:
c000ef1e:	57                   	push   edi
c000ef1f:	56                   	push   esi
c000ef20:	53                   	push   ebx
c000ef21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ef29:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000ef2f:	83 ec 0c             	sub    esp,0xc
c000ef32:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000ef38:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000ef3e:	50                   	push   eax
c000ef3f:	e8 04 76 ff ff       	call   c0006548 <GDT::setup()>
c000ef44:	83 c4 0c             	add    esp,0xc
c000ef47:	6a 00                	push   0x0
c000ef49:	68 ef be ad de       	push   0xdeadbeef
c000ef4e:	57                   	push   edi
c000ef4f:	e8 d4 91 ff ff       	call   c0008128 <TSS::setup(unsigned long, unsigned long)>
c000ef54:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ef57:	e8 ac 91 ff ff       	call   c0008108 <TSS::flush()>
c000ef5c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000ef62:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef65:	e8 6c 78 ff ff       	call   c00067d6 <IDT::setup()>
c000ef6a:	b8 00 04 00 00       	mov    eax,0x400
c000ef6f:	0f 23 f8             	mov    db7,eax
c000ef72:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000ef7c:	e8 b1 80 ff ff       	call   c0007032 <Phys::allocatePage()>
c000ef81:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000ef87:	89 30                	mov    DWORD PTR [eax],esi
c000ef89:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000ef8f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ef92:	58                   	pop    eax
c000ef93:	5a                   	pop    edx
c000ef94:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000ef9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef9e:	e8 33 a1 ff ff       	call   c00090d6 <VAS::setCPUSpecific(unsigned long)>
c000efa3:	c7 04 24 fe dc 01 c0 	mov    DWORD PTR [esp],0xc001dcfe
c000efaa:	e8 10 7d ff ff       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c000efaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efb2:	e8 21 f7 ff ff       	call   c000e6d8 <CPU::detectFeatures()>
c000efb7:	c7 04 24 21 dd 01 c0 	mov    DWORD PTR [esp],0xc001dd21
c000efbe:	e8 fc 7c ff ff       	call   c0006cbf <Krnl::setBootMessage(char const*)>
c000efc3:	e8 23 58 00 00       	call   c00147eb <Hal::initialise()>
c000efc8:	a1 20 f6 01 c0       	mov    eax,ds:0xc001f620
c000efcd:	83 e0 10             	and    eax,0x10
c000efd0:	83 f8 01             	cmp    eax,0x1
c000efd3:	19 c0                	sbb    eax,eax
c000efd5:	83 e0 46             	and    eax,0x46
c000efd8:	83 c0 1e             	add    eax,0x1e
c000efdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000efde:	e8 de d6 ff ff       	call   c000c6c1 <setupTimer(int)>
c000efe3:	83 c4 10             	add    esp,0x10
c000efe6:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000efec:	f6 05 20 f6 01 c0 20 	test   BYTE PTR ds:0xc001f620,0x20
c000eff3:	74 0c                	je     c000f001 <CPU::open(int, int, void*)+0xe3>
c000eff5:	83 ec 0c             	sub    esp,0xc
c000eff8:	53                   	push   ebx
c000eff9:	e8 54 fe ff ff       	call   c000ee52 <CPU::setupFeatures()>
c000effe:	83 c4 10             	add    esp,0x10
c000f001:	5b                   	pop    ebx
c000f002:	31 c0                	xor    eax,eax
c000f004:	5e                   	pop    esi
c000f005:	5f                   	pop    edi
c000f006:	c3                   	ret    
c000f007:	90                   	nop

c000f008 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c000f008:	83 ec 18             	sub    esp,0x18
c000f00b:	68 35 dd 01 c0       	push   0xc001dd35
c000f010:	e8 8c 05 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000f015:	31 c0                	xor    eax,eax
c000f017:	83 c4 1c             	add    esp,0x1c
c000f01a:	c3                   	ret    

c000f01b <Krnl::smpEntry()>:
c000f01b:	eb fe                	jmp    c000f01b <Krnl::smpEntry()>

c000f01d <Krnl::startCPU(int)>:
c000f01d:	c3                   	ret    

c000f01e <Krnl::startCPUs()>:
c000f01e:	c3                   	ret    
c000f01f:	90                   	nop

c000f020 <EnvVarContainer::getEnv(char const*)>:
c000f020:	57                   	push   edi
c000f021:	56                   	push   esi
c000f022:	53                   	push   ebx
c000f023:	31 db                	xor    ebx,ebx
c000f025:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f029:	39 1e                	cmp    DWORD PTR [esi],ebx
c000f02b:	7e 2b                	jle    c000f058 <EnvVarContainer::getEnv(char const*)+0x38>
c000f02d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000f034:	50                   	push   eax
c000f035:	50                   	push   eax
c000f036:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f039:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000f03c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f040:	e8 bb 16 ff ff       	call   c0000700 <strcmp>
c000f045:	83 c4 10             	add    esp,0x10
c000f048:	85 c0                	test   eax,eax
c000f04a:	75 09                	jne    c000f055 <EnvVarContainer::getEnv(char const*)+0x35>
c000f04c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f04f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000f053:	eb 05                	jmp    c000f05a <EnvVarContainer::getEnv(char const*)+0x3a>
c000f055:	43                   	inc    ebx
c000f056:	eb d1                	jmp    c000f029 <EnvVarContainer::getEnv(char const*)+0x9>
c000f058:	31 c0                	xor    eax,eax
c000f05a:	5b                   	pop    ebx
c000f05b:	5e                   	pop    esi
c000f05c:	5f                   	pop    edi
c000f05d:	c3                   	ret    

c000f05e <EnvVarContainer::setEnv(char const*, char const*)>:
c000f05e:	55                   	push   ebp
c000f05f:	57                   	push   edi
c000f060:	56                   	push   esi
c000f061:	53                   	push   ebx
c000f062:	83 ec 28             	sub    esp,0x28
c000f065:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000f069:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f06d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000f071:	56                   	push   esi
c000f072:	e8 e9 14 ff ff       	call   c0000560 <strlen>
c000f077:	40                   	inc    eax
c000f078:	89 04 24             	mov    DWORD PTR [esp],eax
c000f07b:	e8 e5 7b ff ff       	call   c0006c65 <malloc>
c000f080:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f083:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f087:	e8 d4 14 ff ff       	call   c0000560 <strlen>
c000f08c:	40                   	inc    eax
c000f08d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f090:	e8 d0 7b ff ff       	call   c0006c65 <malloc>
c000f095:	89 34 24             	mov    DWORD PTR [esp],esi
c000f098:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f09c:	e8 bf 14 ff ff       	call   c0000560 <strlen>
c000f0a1:	83 c4 0c             	add    esp,0xc
c000f0a4:	40                   	inc    eax
c000f0a5:	50                   	push   eax
c000f0a6:	6a 00                	push   0x0
c000f0a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0ac:	e8 3f 14 ff ff       	call   c00004f0 <memset>
c000f0b1:	89 34 24             	mov    DWORD PTR [esp],esi
c000f0b4:	e8 a7 14 ff ff       	call   c0000560 <strlen>
c000f0b9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000f0bd:	8d 48 01             	lea    ecx,[eax+0x1]
c000f0c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f0c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f0c5:	89 de                	mov    esi,ebx
c000f0c7:	e8 94 14 ff ff       	call   c0000560 <strlen>
c000f0cc:	83 c4 0c             	add    esp,0xc
c000f0cf:	40                   	inc    eax
c000f0d0:	50                   	push   eax
c000f0d1:	6a 00                	push   0x0
c000f0d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0d7:	e8 14 14 ff ff       	call   c00004f0 <memset>
c000f0dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f0df:	e8 7c 14 ff ff       	call   c0000560 <strlen>
c000f0e4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f0e8:	8d 48 01             	lea    ecx,[eax+0x1]
c000f0eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f0ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0f0:	40                   	inc    eax
c000f0f1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f0f4:	c1 e0 03             	shl    eax,0x3
c000f0f7:	5a                   	pop    edx
c000f0f8:	59                   	pop    ecx
c000f0f9:	50                   	push   eax
c000f0fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f0fd:	e8 4f 7b ff ff       	call   c0006c51 <realloc>
c000f102:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f106:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f109:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f10c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f110:	b9 08 00 00 00       	mov    ecx,0x8
c000f115:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f117:	83 c4 2c             	add    esp,0x2c
c000f11a:	5b                   	pop    ebx
c000f11b:	5e                   	pop    esi
c000f11c:	5f                   	pop    edi
c000f11d:	5d                   	pop    ebp
c000f11e:	c3                   	ret    
c000f11f:	90                   	nop

c000f120 <EnvVarContainer::deleteEnv(char const*)>:
c000f120:	c3                   	ret    
c000f121:	90                   	nop

c000f122 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000f122:	55                   	push   ebp
c000f123:	57                   	push   edi
c000f124:	56                   	push   esi
c000f125:	53                   	push   ebx
c000f126:	81 ec 38 01 00 00    	sub    esp,0x138
c000f12c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000f133:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000f13a:	68 14 01 00 00       	push   0x114
c000f13f:	e8 21 7b ff ff       	call   c0006c65 <malloc>
c000f144:	83 c4 0c             	add    esp,0xc
c000f147:	89 c3                	mov    ebx,eax
c000f149:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f14c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f153:	50                   	push   eax
c000f154:	e8 45 ae ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c000f159:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f15c:	e8 6b b1 ff ff       	call   c000a2cc <File::exists()>
c000f161:	83 c4 10             	add    esp,0x10
c000f164:	84 c0                	test   al,al
c000f166:	75 31                	jne    c000f199 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000f168:	50                   	push   eax
c000f169:	50                   	push   eax
c000f16a:	6a 12                	push   0x12
c000f16c:	53                   	push   ebx
c000f16d:	e8 ec ae ff ff       	call   c000a05e <File::open(FileOpenMode)>
c000f172:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f174:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000f177:	89 34 24             	mov    DWORD PTR [esp],esi
c000f17a:	e8 e1 13 ff ff       	call   c0000560 <strlen>
c000f17f:	5a                   	pop    edx
c000f180:	31 d2                	xor    edx,edx
c000f182:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f186:	51                   	push   ecx
c000f187:	56                   	push   esi
c000f188:	52                   	push   edx
c000f189:	50                   	push   eax
c000f18a:	53                   	push   ebx
c000f18b:	ff d7                	call   edi
c000f18d:	83 c4 14             	add    esp,0x14
c000f190:	53                   	push   ebx
c000f191:	e8 26 af ff ff       	call   c000a0bc <File::close()>
c000f196:	83 c4 10             	add    esp,0x10
c000f199:	56                   	push   esi
c000f19a:	31 f6                	xor    esi,esi
c000f19c:	68 00 01 00 00       	push   0x100
c000f1a1:	6a 00                	push   0x0
c000f1a3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f1a7:	50                   	push   eax
c000f1a8:	e8 43 13 ff ff       	call   c00004f0 <memset>
c000f1ad:	5f                   	pop    edi
c000f1ae:	58                   	pop    eax
c000f1af:	6a 01                	push   0x1
c000f1b1:	53                   	push   ebx
c000f1b2:	e8 a7 ae ff ff       	call   c000a05e <File::open(FileOpenMode)>
c000f1b7:	83 c4 10             	add    esp,0x10
c000f1ba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f1c2:	83 ec 0c             	sub    esp,0xc
c000f1c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f1c7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f1cb:	51                   	push   ecx
c000f1cc:	8d 54 24 23          	lea    edx,[esp+0x23]
c000f1d0:	52                   	push   edx
c000f1d1:	6a 00                	push   0x0
c000f1d3:	6a 01                	push   0x1
c000f1d5:	53                   	push   ebx
c000f1d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f1d9:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000f1dd:	83 c4 20             	add    esp,0x20
c000f1e0:	3c 0d                	cmp    al,0xd
c000f1e2:	0f 84 09 01 00 00    	je     c000f2f1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f1e8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f1ed:	0f 84 ef 00 00 00    	je     c000f2e2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f1f3:	3c 0a                	cmp    al,0xa
c000f1f5:	74 13                	je     c000f20a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f1f7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f1fc:	74 0c                	je     c000f20a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f1fe:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f204:	0f 8e d8 00 00 00    	jle    c000f2e2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f20a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f20e:	83 ec 0c             	sub    esp,0xc
c000f211:	8d 78 01             	lea    edi,[eax+0x1]
c000f214:	57                   	push   edi
c000f215:	e8 4b 7a ff ff       	call   c0006c65 <malloc>
c000f21a:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000f21e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f222:	8d 56 04             	lea    edx,[esi+0x4]
c000f225:	89 14 24             	mov    DWORD PTR [esp],edx
c000f228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f22c:	e8 34 7a ff ff       	call   c0006c65 <malloc>
c000f231:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f235:	83 c4 0c             	add    esp,0xc
c000f238:	57                   	push   edi
c000f239:	6a 00                	push   0x0
c000f23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f23f:	e8 ac 12 ff ff       	call   c00004f0 <memset>
c000f244:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f248:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f24c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f250:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f252:	83 c4 0c             	add    esp,0xc
c000f255:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f259:	52                   	push   edx
c000f25a:	6a 00                	push   0x0
c000f25c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f260:	e8 8b 12 ff ff       	call   c00004f0 <memset>
c000f265:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f269:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000f26d:	89 34 24             	mov    DWORD PTR [esp],esi
c000f270:	e8 eb 12 ff ff       	call   c0000560 <strlen>
c000f275:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000f279:	89 c1                	mov    ecx,eax
c000f27b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f27d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f280:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000f283:	40                   	inc    eax
c000f284:	83 c4 10             	add    esp,0x10
c000f287:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f28a:	85 d2                	test   edx,edx
c000f28c:	75 0c                	jne    c000f29a <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000f28e:	83 ec 0c             	sub    esp,0xc
c000f291:	6a 08                	push   0x8
c000f293:	e8 cd 79 ff ff       	call   c0006c65 <malloc>
c000f298:	eb 0c                	jmp    c000f2a6 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000f29a:	c1 e0 03             	shl    eax,0x3
c000f29d:	51                   	push   ecx
c000f29e:	51                   	push   ecx
c000f29f:	50                   	push   eax
c000f2a0:	52                   	push   edx
c000f2a1:	e8 ab 79 ff ff       	call   c0006c51 <realloc>
c000f2a6:	83 c4 10             	add    esp,0x10
c000f2a9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f2ac:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f2af:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000f2b2:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f2b6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f2ba:	b9 08 00 00 00       	mov    ecx,0x8
c000f2bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2c1:	31 f6                	xor    esi,esi
c000f2c3:	50                   	push   eax
c000f2c4:	68 00 01 00 00       	push   0x100
c000f2c9:	6a 00                	push   0x0
c000f2cb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f2cf:	50                   	push   eax
c000f2d0:	e8 1b 12 ff ff       	call   c00004f0 <memset>
c000f2d5:	83 c4 10             	add    esp,0x10
c000f2d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f2e0:	eb 0f                	jmp    c000f2f1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f2e2:	3c 3d                	cmp    al,0x3d
c000f2e4:	74 07                	je     c000f2ed <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000f2e6:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000f2ea:	46                   	inc    esi
c000f2eb:	eb 04                	jmp    c000f2f1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f2ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000f2f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f2f6:	0f 85 c6 fe ff ff    	jne    c000f1c2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000f2fc:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f302:	5b                   	pop    ebx
c000f303:	5e                   	pop    esi
c000f304:	5f                   	pop    edi
c000f305:	5d                   	pop    ebp
c000f306:	c3                   	ret    
c000f307:	90                   	nop

c000f308 <EnvVarContainer::__loadSystem()>:
c000f308:	83 ec 10             	sub    esp,0x10
c000f30b:	68 e0 ef 01 c0       	push   0xc001efe0
c000f310:	68 74 dd 01 c0       	push   0xc001dd74
c000f315:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f319:	e8 04 fe ff ff       	call   c000f122 <EnvVarContainer::loadFrom(char const*, char const*)>
c000f31e:	83 c4 1c             	add    esp,0x1c
c000f321:	c3                   	ret    

c000f322 <EnvVarContainer::__loadUser()>:
c000f322:	c3                   	ret    
c000f323:	90                   	nop

c000f324 <EnvVarContainer::EnvVarContainer(Process*)>:
c000f324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f328:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f32e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f336:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f339:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f33d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f344:	90                   	nop
c000f345:	c3                   	ret    

c000f346 <EnvVarContainer::~EnvVarContainer()>:
c000f346:	83 ec 0c             	sub    esp,0xc
c000f349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f34d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f350:	85 c0                	test   eax,eax
c000f352:	74 1d                	je     c000f371 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f358:	8b 00                	mov    eax,DWORD PTR [eax]
c000f35a:	85 c0                	test   eax,eax
c000f35c:	74 13                	je     c000f371 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f362:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f365:	83 ec 0c             	sub    esp,0xc
c000f368:	50                   	push   eax
c000f369:	e8 07 79 ff ff       	call   c0006c75 <free>
c000f36e:	83 c4 10             	add    esp,0x10
c000f371:	90                   	nop
c000f372:	83 c4 0c             	add    esp,0xc
c000f375:	c3                   	ret    

c000f376 <Krnl::getEnv(Process*, char const*)>:
c000f376:	53                   	push   ebx
c000f377:	83 ec 08             	sub    esp,0x8
c000f37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f37e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f382:	39 05 10 2b 02 c0    	cmp    DWORD PTR ds:0xc0022b10,eax
c000f388:	74 04                	je     c000f38e <Krnl::getEnv(Process*, char const*)+0x18>
c000f38a:	85 c0                	test   eax,eax
c000f38c:	75 0b                	jne    c000f399 <Krnl::getEnv(Process*, char const*)+0x23>
c000f38e:	a1 94 20 02 c0       	mov    eax,ds:0xc0022094
c000f393:	85 c0                	test   eax,eax
c000f395:	75 19                	jne    c000f3b0 <Krnl::getEnv(Process*, char const*)+0x3a>
c000f397:	eb 27                	jmp    c000f3c0 <Krnl::getEnv(Process*, char const*)+0x4a>
c000f399:	52                   	push   edx
c000f39a:	52                   	push   edx
c000f39b:	53                   	push   ebx
c000f39c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000f3a2:	e8 79 fc ff ff       	call   c000f020 <EnvVarContainer::getEnv(char const*)>
c000f3a7:	83 c4 10             	add    esp,0x10
c000f3aa:	85 c0                	test   eax,eax
c000f3ac:	75 28                	jne    c000f3d6 <Krnl::getEnv(Process*, char const*)+0x60>
c000f3ae:	eb de                	jmp    c000f38e <Krnl::getEnv(Process*, char const*)+0x18>
c000f3b0:	52                   	push   edx
c000f3b1:	52                   	push   edx
c000f3b2:	53                   	push   ebx
c000f3b3:	50                   	push   eax
c000f3b4:	e8 67 fc ff ff       	call   c000f020 <EnvVarContainer::getEnv(char const*)>
c000f3b9:	83 c4 10             	add    esp,0x10
c000f3bc:	85 c0                	test   eax,eax
c000f3be:	75 16                	jne    c000f3d6 <Krnl::getEnv(Process*, char const*)+0x60>
c000f3c0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000f3c4:	a1 98 20 02 c0       	mov    eax,ds:0xc0022098
c000f3c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f3cd:	83 c4 08             	add    esp,0x8
c000f3d0:	5b                   	pop    ebx
c000f3d1:	e9 4a fc ff ff       	jmp    c000f020 <EnvVarContainer::getEnv(char const*)>
c000f3d6:	83 c4 08             	add    esp,0x8
c000f3d9:	5b                   	pop    ebx
c000f3da:	c3                   	ret    

c000f3db <Krnl::setEnvSystem(char const*, char const*)>:
c000f3db:	83 ec 10             	sub    esp,0x10
c000f3de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f3e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f3e6:	ff 35 98 20 02 c0    	push   DWORD PTR ds:0xc0022098
c000f3ec:	e8 6d fc ff ff       	call   c000f05e <EnvVarContainer::setEnv(char const*, char const*)>
c000f3f1:	83 c4 1c             	add    esp,0x1c
c000f3f4:	c3                   	ret    

c000f3f5 <Krnl::setEnvUser(char const*, char const*)>:
c000f3f5:	a1 94 20 02 c0       	mov    eax,ds:0xc0022094
c000f3fa:	85 c0                	test   eax,eax
c000f3fc:	74 15                	je     c000f413 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000f3fe:	83 ec 10             	sub    esp,0x10
c000f401:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f405:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f409:	50                   	push   eax
c000f40a:	e8 4f fc ff ff       	call   c000f05e <EnvVarContainer::setEnv(char const*, char const*)>
c000f40f:	83 c4 1c             	add    esp,0x1c
c000f412:	c3                   	ret    
c000f413:	c3                   	ret    

c000f414 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000f414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f418:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000f41e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f422:	e9 37 fc ff ff       	jmp    c000f05e <EnvVarContainer::setEnv(char const*, char const*)>

c000f427 <Krnl::deleteEnvSystem(char const*)>:
c000f427:	c3                   	ret    

c000f428 <Krnl::deleteEnvUser(char const*)>:
c000f428:	c3                   	ret    

c000f429 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000f429:	c3                   	ret    

c000f42a <Krnl::newProcessEnv(Process*)>:
c000f42a:	83 ec 28             	sub    esp,0x28
c000f42d:	6a 0c                	push   0xc
c000f42f:	e8 31 78 ff ff       	call   c0006c65 <malloc>
c000f434:	5a                   	pop    edx
c000f435:	59                   	pop    ecx
c000f436:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f43a:	50                   	push   eax
c000f43b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f43f:	e8 e0 fe ff ff       	call   c000f324 <EnvVarContainer::EnvVarContainer(Process*)>
c000f444:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f448:	83 c4 2c             	add    esp,0x2c
c000f44b:	c3                   	ret    

c000f44c <Krnl::copyProcessEnv(Process*, Process*)>:
c000f44c:	57                   	push   edi
c000f44d:	56                   	push   esi
c000f44e:	53                   	push   ebx
c000f44f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f453:	83 ec 0c             	sub    esp,0xc
c000f456:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000f45c:	6a 0c                	push   0xc
c000f45e:	e8 02 78 ff ff       	call   c0006c65 <malloc>
c000f463:	89 c3                	mov    ebx,eax
c000f465:	58                   	pop    eax
c000f466:	5a                   	pop    edx
c000f467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f46b:	53                   	push   ebx
c000f46c:	e8 b3 fe ff ff       	call   c000f324 <EnvVarContainer::EnvVarContainer(Process*)>
c000f471:	8b 07                	mov    eax,DWORD PTR [edi]
c000f473:	89 03                	mov    DWORD PTR [ebx],eax
c000f475:	c1 e0 03             	shl    eax,0x3
c000f478:	89 04 24             	mov    DWORD PTR [esp],eax
c000f47b:	e8 e5 77 ff ff       	call   c0006c65 <malloc>
c000f480:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f483:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f485:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f488:	c1 e1 03             	shl    ecx,0x3
c000f48b:	89 c7                	mov    edi,eax
c000f48d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f48f:	83 c4 10             	add    esp,0x10
c000f492:	89 d8                	mov    eax,ebx
c000f494:	5b                   	pop    ebx
c000f495:	5e                   	pop    esi
c000f496:	5f                   	pop    edi
c000f497:	c3                   	ret    

c000f498 <Krnl::loadSystemEnv()>:
c000f498:	53                   	push   ebx
c000f499:	83 ec 14             	sub    esp,0x14
c000f49c:	6a 0c                	push   0xc
c000f49e:	e8 c2 77 ff ff       	call   c0006c65 <malloc>
c000f4a3:	89 c3                	mov    ebx,eax
c000f4a5:	58                   	pop    eax
c000f4a6:	5a                   	pop    edx
c000f4a7:	ff 35 10 2b 02 c0    	push   DWORD PTR ds:0xc0022b10
c000f4ad:	53                   	push   ebx
c000f4ae:	e8 71 fe ff ff       	call   c000f324 <EnvVarContainer::EnvVarContainer(Process*)>
c000f4b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f4b6:	89 1d 98 20 02 c0    	mov    DWORD PTR ds:0xc0022098,ebx
c000f4bc:	e8 47 fe ff ff       	call   c000f308 <EnvVarContainer::__loadSystem()>
c000f4c1:	83 c4 18             	add    esp,0x18
c000f4c4:	5b                   	pop    ebx
c000f4c5:	c3                   	ret    

c000f4c6 <Krnl::loadUserEnv()>:
c000f4c6:	53                   	push   ebx
c000f4c7:	83 ec 14             	sub    esp,0x14
c000f4ca:	6a 0c                	push   0xc
c000f4cc:	e8 94 77 ff ff       	call   c0006c65 <malloc>
c000f4d1:	89 c3                	mov    ebx,eax
c000f4d3:	58                   	pop    eax
c000f4d4:	5a                   	pop    edx
c000f4d5:	ff 35 10 2b 02 c0    	push   DWORD PTR ds:0xc0022b10
c000f4db:	53                   	push   ebx
c000f4dc:	e8 43 fe ff ff       	call   c000f324 <EnvVarContainer::EnvVarContainer(Process*)>
c000f4e1:	89 1d 94 20 02 c0    	mov    DWORD PTR ds:0xc0022094,ebx
c000f4e7:	83 c4 18             	add    esp,0x18
c000f4ea:	5b                   	pop    ebx
c000f4eb:	c3                   	ret    

c000f4ec <Krnl::flushEnv()>:
c000f4ec:	c3                   	ret    

c000f4ed <Krnl::getProcessTotalEnvCount(Process*)>:
c000f4ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f4f1:	8b 15 94 20 02 c0    	mov    edx,DWORD PTR ds:0xc0022094
c000f4f7:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f4fd:	a1 98 20 02 c0       	mov    eax,ds:0xc0022098
c000f502:	8b 00                	mov    eax,DWORD PTR [eax]
c000f504:	03 01                	add    eax,DWORD PTR [ecx]
c000f506:	85 d2                	test   edx,edx
c000f508:	74 02                	je     c000f50c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000f50a:	03 02                	add    eax,DWORD PTR [edx]
c000f50c:	c3                   	ret    

c000f50d <Krnl::getProcessEnvPair(Process*, int)>:
c000f50d:	57                   	push   edi
c000f50e:	56                   	push   esi
c000f50f:	8b 35 94 20 02 c0    	mov    esi,DWORD PTR ds:0xc0022094
c000f515:	53                   	push   ebx
c000f516:	85 f6                	test   esi,esi
c000f518:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f51c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f520:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f526:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f52a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f52c:	75 16                	jne    c000f544 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000f52e:	39 c2                	cmp    edx,eax
c000f530:	7c 16                	jl     c000f548 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f532:	8b 0d 98 20 02 c0    	mov    ecx,DWORD PTR ds:0xc0022098
c000f538:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f53a:	01 c6                	add    esi,eax
c000f53c:	39 d6                	cmp    esi,edx
c000f53e:	7e 3c                	jle    c000f57c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f540:	29 c2                	sub    edx,eax
c000f542:	eb 04                	jmp    c000f548 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f544:	39 c2                	cmp    edx,eax
c000f546:	7d 05                	jge    c000f54d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c000f548:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f54b:	eb 20                	jmp    c000f56d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c000f54d:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f54f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f552:	39 d1                	cmp    ecx,edx
c000f554:	7e 04                	jle    c000f55a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c000f556:	29 c2                	sub    edx,eax
c000f558:	eb 10                	jmp    c000f56a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c000f55a:	8b 35 98 20 02 c0    	mov    esi,DWORD PTR ds:0xc0022098
c000f560:	03 0e                	add    ecx,DWORD PTR [esi]
c000f562:	39 d1                	cmp    ecx,edx
c000f564:	7e 16                	jle    c000f57c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f566:	29 c2                	sub    edx,eax
c000f568:	29 fa                	sub    edx,edi
c000f56a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f56d:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f570:	8b 02                	mov    eax,DWORD PTR [edx]
c000f572:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f575:	89 03                	mov    DWORD PTR [ebx],eax
c000f577:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f57a:	eb 1d                	jmp    c000f599 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c000f57c:	83 ec 0c             	sub    esp,0xc
c000f57f:	68 96 dd 01 c0       	push   0xc001dd96
c000f584:	e8 18 00 00 00       	call   c000f5a1 <Krnl::panic(char const*)>
c000f589:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f58f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f596:	83 c4 10             	add    esp,0x10
c000f599:	89 d8                	mov    eax,ebx
c000f59b:	5b                   	pop    ebx
c000f59c:	5e                   	pop    esi
c000f59d:	5f                   	pop    edi
c000f59e:	c2 04 00             	ret    0x4

c000f5a1 <Krnl::panic(char const*)>:
c000f5a1:	53                   	push   ebx
c000f5a2:	83 ec 10             	sub    esp,0x10
c000f5a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f5a9:	fa                   	cli    
c000f5aa:	c6 05 a4 20 02 c0 01 	mov    BYTE PTR ds:0xc00220a4,0x1
c000f5b1:	53                   	push   ebx
c000f5b2:	68 b0 dd 01 c0       	push   0xc001ddb0
c000f5b7:	e8 6c a4 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c000f5bc:	83 c4 0c             	add    esp,0xc
c000f5bf:	a1 54 f6 01 c0       	mov    eax,ds:0xc001f654
c000f5c4:	6a 01                	push   0x1
c000f5c6:	6a 0f                	push   0xf
c000f5c8:	50                   	push   eax
c000f5c9:	e8 1a 82 ff ff       	call   c00077e8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f5ce:	58                   	pop    eax
c000f5cf:	a1 54 f6 01 c0       	mov    eax,ds:0xc001f654
c000f5d4:	50                   	push   eax
c000f5d5:	e8 06 84 ff ff       	call   c00079e0 <VgaText::clearScreen()>
c000f5da:	58                   	pop    eax
c000f5db:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f5e1:	5a                   	pop    edx
c000f5e2:	68 07 de 01 c0       	push   0xc001de07
c000f5e7:	51                   	push   ecx
c000f5e8:	e8 33 82 ff ff       	call   c0007820 <VgaText::setTitle(char*)>
c000f5ed:	83 c4 0c             	add    esp,0xc
c000f5f0:	a1 54 f6 01 c0       	mov    eax,ds:0xc001f654
c000f5f5:	6a 01                	push   0x1
c000f5f7:	6a 0f                	push   0xf
c000f5f9:	50                   	push   eax
c000f5fa:	e8 e9 81 ff ff       	call   c00077e8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f5ff:	58                   	pop    eax
c000f600:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f606:	5a                   	pop    edx
c000f607:	68 c9 dd 01 c0       	push   0xc001ddc9
c000f60c:	51                   	push   ecx
c000f60d:	e8 c2 86 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f612:	58                   	pop    eax
c000f613:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f619:	5a                   	pop    edx
c000f61a:	68 50 de 01 c0       	push   0xc001de50
c000f61f:	51                   	push   ecx
c000f620:	e8 af 86 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f625:	58                   	pop    eax
c000f626:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f62c:	5a                   	pop    edx
c000f62d:	68 e5 dd 01 c0       	push   0xc001dde5
c000f632:	51                   	push   ecx
c000f633:	e8 9c 86 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f638:	58                   	pop    eax
c000f639:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f63f:	5a                   	pop    edx
c000f640:	53                   	push   ebx
c000f641:	51                   	push   ecx
c000f642:	e8 8d 86 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f647:	5b                   	pop    ebx
c000f648:	58                   	pop    eax
c000f649:	a1 54 f6 01 c0       	mov    eax,ds:0xc001f654
c000f64e:	68 05 de 01 c0       	push   0xc001de05
c000f653:	50                   	push   eax
c000f654:	e8 7b 86 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f659:	58                   	pop    eax
c000f65a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f65e:	50                   	push   eax
c000f65f:	e8 d9 29 00 00       	call   c001203d <Thr::getDriverNameFromAddress(unsigned long)>
c000f664:	83 c4 10             	add    esp,0x10
c000f667:	85 c0                	test   eax,eax
c000f669:	0f 84 59 01 00 00    	je     c000f7c8 <Krnl::panic(char const*)+0x227>
c000f66f:	83 ec 08             	sub    esp,0x8
c000f672:	89 c3                	mov    ebx,eax
c000f674:	68 8c de 01 c0       	push   0xc001de8c
c000f679:	a1 54 f6 01 c0       	mov    eax,ds:0xc001f654
c000f67e:	50                   	push   eax
c000f67f:	e8 50 86 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f684:	58                   	pop    eax
c000f685:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f68b:	5a                   	pop    edx
c000f68c:	68 e5 dd 01 c0       	push   0xc001dde5
c000f691:	51                   	push   ecx
c000f692:	e8 3d 86 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f697:	58                   	pop    eax
c000f698:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f69e:	5a                   	pop    edx
c000f69f:	53                   	push   ebx
c000f6a0:	51                   	push   ecx
c000f6a1:	e8 2e 86 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f6a6:	83 c4 10             	add    esp,0x10
c000f6a9:	83 ec 08             	sub    esp,0x8
c000f6ac:	a1 54 f6 01 c0       	mov    eax,ds:0xc001f654
c000f6b1:	68 04 de 01 c0       	push   0xc001de04
c000f6b6:	50                   	push   eax
c000f6b7:	e8 18 86 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f6bc:	5a                   	pop    edx
c000f6bd:	8b 1d 54 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f654
c000f6c3:	59                   	pop    ecx
c000f6c4:	68 e4 de 01 c0       	push   0xc001dee4
c000f6c9:	53                   	push   ebx
c000f6ca:	e8 05 86 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f6cf:	58                   	pop    eax
c000f6d0:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f6d6:	5a                   	pop    edx
c000f6d7:	68 24 df 01 c0       	push   0xc001df24
c000f6dc:	51                   	push   ecx
c000f6dd:	e8 f2 85 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f6e2:	5b                   	pop    ebx
c000f6e3:	58                   	pop    eax
c000f6e4:	a1 54 f6 01 c0       	mov    eax,ds:0xc001f654
c000f6e9:	68 f0 dd 01 c0       	push   0xc001ddf0
c000f6ee:	50                   	push   eax
c000f6ef:	e8 e0 85 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f6f4:	58                   	pop    eax
c000f6f5:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f6fb:	5a                   	pop    edx
c000f6fc:	68 68 df 01 c0       	push   0xc001df68
c000f701:	51                   	push   ecx
c000f702:	e8 cd 85 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f707:	5b                   	pop    ebx
c000f708:	58                   	pop    eax
c000f709:	a1 54 f6 01 c0       	mov    eax,ds:0xc001f654
c000f70e:	68 08 de 01 c0       	push   0xc001de08
c000f713:	50                   	push   eax
c000f714:	e8 bb 85 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f719:	0f 20 c0             	mov    eax,cr0
c000f71c:	8b 1d 54 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f654
c000f722:	5a                   	pop    edx
c000f723:	59                   	pop    ecx
c000f724:	50                   	push   eax
c000f725:	53                   	push   ebx
c000f726:	e8 63 85 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c000f72b:	58                   	pop    eax
c000f72c:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f732:	5a                   	pop    edx
c000f733:	68 12 de 01 c0       	push   0xc001de12
c000f738:	51                   	push   ecx
c000f739:	e8 96 85 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f73e:	0f 20 d0             	mov    eax,cr2
c000f741:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f747:	5b                   	pop    ebx
c000f748:	5a                   	pop    edx
c000f749:	50                   	push   eax
c000f74a:	51                   	push   ecx
c000f74b:	e8 3e 85 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c000f750:	5b                   	pop    ebx
c000f751:	58                   	pop    eax
c000f752:	a1 54 f6 01 c0       	mov    eax,ds:0xc001f654
c000f757:	68 1c de 01 c0       	push   0xc001de1c
c000f75c:	50                   	push   eax
c000f75d:	e8 72 85 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f762:	0f 20 d8             	mov    eax,cr3
c000f765:	8b 1d 54 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f654
c000f76b:	5a                   	pop    edx
c000f76c:	59                   	pop    ecx
c000f76d:	50                   	push   eax
c000f76e:	53                   	push   ebx
c000f76f:	e8 1a 85 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c000f774:	58                   	pop    eax
c000f775:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f77b:	5a                   	pop    edx
c000f77c:	68 2f de 01 c0       	push   0xc001de2f
c000f781:	51                   	push   ecx
c000f782:	e8 4d 85 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f787:	0f 20 e0             	mov    eax,cr4
c000f78a:	8b 0d 54 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f654
c000f790:	5b                   	pop    ebx
c000f791:	5a                   	pop    edx
c000f792:	50                   	push   eax
c000f793:	51                   	push   ecx
c000f794:	e8 f5 84 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c000f799:	5b                   	pop    ebx
c000f79a:	58                   	pop    eax
c000f79b:	a1 54 f6 01 c0       	mov    eax,ds:0xc001f654
c000f7a0:	68 39 de 01 c0       	push   0xc001de39
c000f7a5:	50                   	push   eax
c000f7a6:	e8 29 85 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f7ab:	83 c4 10             	add    esp,0x10
c000f7ae:	b2 fe                	mov    dl,0xfe
c000f7b0:	e4 60                	in     al,0x60
c000f7b2:	3c 1c                	cmp    al,0x1c
c000f7b4:	74 04                	je     c000f7ba <Krnl::panic(char const*)+0x219>
c000f7b6:	3c 5a                	cmp    al,0x5a
c000f7b8:	75 f6                	jne    c000f7b0 <Krnl::panic(char const*)+0x20f>
c000f7ba:	e4 64                	in     al,0x64
c000f7bc:	a8 02                	test   al,0x2
c000f7be:	75 fa                	jne    c000f7ba <Krnl::panic(char const*)+0x219>
c000f7c0:	88 d0                	mov    al,dl
c000f7c2:	e6 64                	out    0x64,al
c000f7c4:	fa                   	cli    
c000f7c5:	f4                   	hlt    
c000f7c6:	eb e8                	jmp    c000f7b0 <Krnl::panic(char const*)+0x20f>
c000f7c8:	50                   	push   eax
c000f7c9:	50                   	push   eax
c000f7ca:	68 b8 de 01 c0       	push   0xc001deb8
c000f7cf:	ff 35 54 f6 01 c0    	push   DWORD PTR ds:0xc001f654
c000f7d5:	e8 fa 84 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f7da:	58                   	pop    eax
c000f7db:	5a                   	pop    edx
c000f7dc:	68 e5 dd 01 c0       	push   0xc001dde5
c000f7e1:	ff 35 54 f6 01 c0    	push   DWORD PTR ds:0xc001f654
c000f7e7:	e8 e8 84 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f7ec:	59                   	pop    ecx
c000f7ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7f2:	5b                   	pop    ebx
c000f7f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f7f6:	83 c0 0c             	add    eax,0xc
c000f7f9:	50                   	push   eax
c000f7fa:	ff 35 54 f6 01 c0    	push   DWORD PTR ds:0xc001f654
c000f800:	e8 cf 84 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c000f805:	83 c4 10             	add    esp,0x10
c000f808:	e9 9c fe ff ff       	jmp    c000f6a9 <Krnl::panic(char const*)+0x108>

c000f80d <Krnl::powerThread(void*)>:
c000f80d:	53                   	push   ebx
c000f80e:	83 ec 08             	sub    esp,0x8
c000f811:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000f816:	48                   	dec    eax
c000f817:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c000f81c:	75 01                	jne    c000f81f <Krnl::powerThread(void*)+0x12>
c000f81e:	fb                   	sti    
c000f81f:	83 ec 0c             	sub    esp,0xc
c000f822:	8b 1d f4 20 02 c0    	mov    ebx,DWORD PTR ds:0xc00220f4
c000f828:	6a 0a                	push   0xa
c000f82a:	c6 05 c0 20 02 c0 00 	mov    BYTE PTR ds:0xc00220c0,0x0
c000f831:	e8 5a 35 00 00       	call   c0012d90 <sleep(unsigned int)>
c000f836:	a1 04 21 02 c0       	mov    eax,ds:0xc0022104
c000f83b:	83 c4 10             	add    esp,0x10
c000f83e:	83 c0 0a             	add    eax,0xa
c000f841:	85 db                	test   ebx,ebx
c000f843:	a3 04 21 02 c0       	mov    ds:0xc0022104,eax
c000f848:	74 d5                	je     c000f81f <Krnl::powerThread(void*)+0x12>
c000f84a:	39 d8                	cmp    eax,ebx
c000f84c:	7e d1                	jle    c000f81f <Krnl::powerThread(void*)+0x12>
c000f84e:	83 ec 0c             	sub    esp,0xc
c000f851:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c000f857:	e8 6a 6a ff ff       	call   c00062c6 <Computer::sleep()>
c000f85c:	83 c4 10             	add    esp,0x10
c000f85f:	eb be                	jmp    c000f81f <Krnl::powerThread(void*)+0x12>

c000f861 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c000f861:	57                   	push   edi
c000f862:	b9 09 00 00 00       	mov    ecx,0x9
c000f867:	56                   	push   esi
c000f868:	bf e0 20 02 c0       	mov    edi,0xc00220e0
c000f86d:	fc                   	cld    
c000f86e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f872:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f874:	5e                   	pop    esi
c000f875:	5f                   	pop    edi
c000f876:	c3                   	ret    

c000f877 <Krnl::userIOReceived()>:
c000f877:	c7 05 04 21 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022104,0x0
c000f881:	c3                   	ret    

c000f882 <Krnl::handlePowerButton()>:
c000f882:	83 ec 0c             	sub    esp,0xc
c000f885:	a1 e0 20 02 c0       	mov    eax,ds:0xc00220e0
c000f88a:	83 f8 02             	cmp    eax,0x2
c000f88d:	75 10                	jne    c000f89f <Krnl::handlePowerButton()+0x1d>
c000f88f:	83 ec 0c             	sub    esp,0xc
c000f892:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c000f898:	e8 f9 69 ff ff       	call   c0006296 <Computer::shutdown()>
c000f89d:	eb 11                	jmp    c000f8b0 <Krnl::handlePowerButton()+0x2e>
c000f89f:	48                   	dec    eax
c000f8a0:	75 11                	jne    c000f8b3 <Krnl::handlePowerButton()+0x31>
c000f8a2:	83 ec 0c             	sub    esp,0xc
c000f8a5:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c000f8ab:	e8 16 6a ff ff       	call   c00062c6 <Computer::sleep()>
c000f8b0:	83 c4 10             	add    esp,0x10
c000f8b3:	83 c4 0c             	add    esp,0xc
c000f8b6:	c3                   	ret    

c000f8b7 <Krnl::handleSleepButton()>:
c000f8b7:	83 ec 0c             	sub    esp,0xc
c000f8ba:	a1 e4 20 02 c0       	mov    eax,ds:0xc00220e4
c000f8bf:	83 f8 02             	cmp    eax,0x2
c000f8c2:	75 10                	jne    c000f8d4 <Krnl::handleSleepButton()+0x1d>
c000f8c4:	83 ec 0c             	sub    esp,0xc
c000f8c7:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c000f8cd:	e8 c4 69 ff ff       	call   c0006296 <Computer::shutdown()>
c000f8d2:	eb 11                	jmp    c000f8e5 <Krnl::handleSleepButton()+0x2e>
c000f8d4:	48                   	dec    eax
c000f8d5:	75 11                	jne    c000f8e8 <Krnl::handleSleepButton()+0x31>
c000f8d7:	83 ec 0c             	sub    esp,0xc
c000f8da:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c000f8e0:	e8 e1 69 ff ff       	call   c00062c6 <Computer::sleep()>
c000f8e5:	83 c4 10             	add    esp,0x10
c000f8e8:	83 c4 0c             	add    esp,0xc
c000f8eb:	c3                   	ret    

c000f8ec <Krnl::setupPowerManager()>:
c000f8ec:	83 ec 0c             	sub    esp,0xc
c000f8ef:	c7 05 04 21 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022104,0x0
c000f8f9:	68 f0 00 00 00       	push   0xf0
c000f8fe:	c6 05 c0 20 02 c0 00 	mov    BYTE PTR ds:0xc00220c0,0x0
c000f905:	6a 00                	push   0x0
c000f907:	68 0d f8 00 c0       	push   0xc000f80d
c000f90c:	ff 35 10 2b 02 c0    	push   DWORD PTR ds:0xc0022b10
c000f912:	e8 49 2f 00 00       	call   c0012860 <Process::createThread(void (*)(void*), void*, int)>
c000f917:	c7 05 e0 20 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00220e0,0x2
c000f921:	c7 05 e4 20 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00220e4,0x1
c000f92b:	c7 05 e8 20 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00220e8,0x3
c000f935:	c7 05 ec 20 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00220ec,0x0
c000f93f:	c7 05 f8 20 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00220f8,0x0
c000f949:	c7 05 f0 20 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00220f0,0x0
c000f953:	c7 05 fc 20 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00220fc,0x0
c000f95d:	c7 05 f4 20 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00220f4,0x3c
c000f967:	c7 05 00 21 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022100,0x3c
c000f971:	83 c4 1c             	add    esp,0x1c
c000f974:	c3                   	ret    

c000f975 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c000f975:	55                   	push   ebp
c000f976:	57                   	push   edi
c000f977:	56                   	push   esi
c000f978:	53                   	push   ebx
c000f979:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f97f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c000f986:	8a 1e                	mov    bl,BYTE PTR [esi]
c000f988:	8d 6e 01             	lea    ebp,[esi+0x1]
c000f98b:	80 fb 40             	cmp    bl,0x40
c000f98e:	75 1b                	jne    c000f9ab <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c000f990:	8a 16                	mov    dl,BYTE PTR [esi]
c000f992:	84 d2                	test   dl,dl
c000f994:	0f 84 f1 00 00 00    	je     c000fa8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f99a:	8d 46 01             	lea    eax,[esi+0x1]
c000f99d:	80 fa 3a             	cmp    dl,0x3a
c000f9a0:	74 04                	je     c000f9a6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c000f9a2:	89 c6                	mov    esi,eax
c000f9a4:	eb ea                	jmp    c000f990 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c000f9a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f9a9:	89 c6                	mov    esi,eax
c000f9ab:	50                   	push   eax
c000f9ac:	6a 40                	push   0x40
c000f9ae:	6a 00                	push   0x0
c000f9b0:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f9b4:	50                   	push   eax
c000f9b5:	e8 36 0b ff ff       	call   c00004f0 <memset>
c000f9ba:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c000f9c1:	31 c0                	xor    eax,eax
c000f9c3:	83 c4 10             	add    esp,0x10
c000f9c6:	8a 0f                	mov    cl,BYTE PTR [edi]
c000f9c8:	84 c9                	test   cl,cl
c000f9ca:	0f 84 bb 00 00 00    	je     c000fa8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f9d0:	3d c7 00 00 00       	cmp    eax,0xc7
c000f9d5:	0f 8f b0 00 00 00    	jg     c000fa8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f9db:	80 f9 0a             	cmp    cl,0xa
c000f9de:	0f 85 98 00 00 00    	jne    c000fa7c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c000f9e4:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c000f9e9:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c000f9ed:	a8 df                	test   al,0xdf
c000f9ef:	0f 94 c1             	sete   cl
c000f9f2:	3c 23                	cmp    al,0x23
c000f9f4:	0f 94 c2             	sete   dl
c000f9f7:	08 d1                	or     cl,dl
c000f9f9:	75 4a                	jne    c000fa45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f9fb:	8d 50 f7             	lea    edx,[eax-0x9]
c000f9fe:	80 fa 01             	cmp    dl,0x1
c000fa01:	76 42                	jbe    c000fa45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000fa03:	3c 5b                	cmp    al,0x5b
c000fa05:	75 42                	jne    c000fa49 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c000fa07:	80 fb 40             	cmp    bl,0x40
c000fa0a:	75 39                	jne    c000fa45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000fa0c:	83 ec 0c             	sub    esp,0xc
c000fa0f:	8d 54 24 65          	lea    edx,[esp+0x65]
c000fa13:	52                   	push   edx
c000fa14:	e8 47 0b ff ff       	call   c0000560 <strlen>
c000fa19:	83 c4 10             	add    esp,0x10
c000fa1c:	83 f8 3f             	cmp    eax,0x3f
c000fa1f:	77 6a                	ja     c000fa8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000fa21:	50                   	push   eax
c000fa22:	50                   	push   eax
c000fa23:	8d 54 24 61          	lea    edx,[esp+0x61]
c000fa27:	52                   	push   edx
c000fa28:	8d 54 24 24          	lea    edx,[esp+0x24]
c000fa2c:	52                   	push   edx
c000fa2d:	e8 ee 0b ff ff       	call   c0000620 <strcpy>
c000fa32:	58                   	pop    eax
c000fa33:	8d 54 24 24          	lea    edx,[esp+0x24]
c000fa37:	52                   	push   edx
c000fa38:	e8 23 0b ff ff       	call   c0000560 <strlen>
c000fa3d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c000fa42:	83 c4 10             	add    esp,0x10
c000fa45:	31 d2                	xor    edx,edx
c000fa47:	eb 3a                	jmp    c000fa83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c000fa49:	80 fb 40             	cmp    bl,0x40
c000fa4c:	74 06                	je     c000fa54 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c000fa4e:	8d 44 24 58          	lea    eax,[esp+0x58]
c000fa52:	eb 20                	jmp    c000fa74 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c000fa54:	50                   	push   eax
c000fa55:	50                   	push   eax
c000fa56:	55                   	push   ebp
c000fa57:	8d 44 24 24          	lea    eax,[esp+0x24]
c000fa5b:	50                   	push   eax
c000fa5c:	e8 9f 0c ff ff       	call   c0000700 <strcmp>
c000fa61:	83 c4 10             	add    esp,0x10
c000fa64:	85 c0                	test   eax,eax
c000fa66:	75 dd                	jne    c000fa45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000fa68:	eb e4                	jmp    c000fa4e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c000fa6a:	8d 50 01             	lea    edx,[eax+0x1]
c000fa6d:	80 f9 3d             	cmp    cl,0x3d
c000fa70:	74 1d                	je     c000fa8f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c000fa72:	89 d0                	mov    eax,edx
c000fa74:	8a 08                	mov    cl,BYTE PTR [eax]
c000fa76:	84 c9                	test   cl,cl
c000fa78:	75 f0                	jne    c000fa6a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c000fa7a:	eb 0f                	jmp    c000fa8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000fa7c:	8d 50 01             	lea    edx,[eax+0x1]
c000fa7f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c000fa83:	47                   	inc    edi
c000fa84:	89 d0                	mov    eax,edx
c000fa86:	e9 3b ff ff ff       	jmp    c000f9c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c000fa8b:	31 c0                	xor    eax,eax
c000fa8d:	eb 33                	jmp    c000fac2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c000fa8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fa93:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fa96:	50                   	push   eax
c000fa97:	50                   	push   eax
c000fa98:	8d 44 24 60          	lea    eax,[esp+0x60]
c000fa9c:	50                   	push   eax
c000fa9d:	56                   	push   esi
c000fa9e:	e8 5d 0c ff ff       	call   c0000700 <strcmp>
c000faa3:	83 c4 10             	add    esp,0x10
c000faa6:	85 c0                	test   eax,eax
c000faa8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000faac:	75 97                	jne    c000fa45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000faae:	51                   	push   ecx
c000faaf:	51                   	push   ecx
c000fab0:	52                   	push   edx
c000fab1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c000fab8:	e8 63 0b ff ff       	call   c0000620 <strcpy>
c000fabd:	83 c4 10             	add    esp,0x10
c000fac0:	b0 01                	mov    al,0x1
c000fac2:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fac8:	5b                   	pop    ebx
c000fac9:	5e                   	pop    esi
c000faca:	5f                   	pop    edi
c000facb:	5d                   	pop    ebp
c000facc:	c3                   	ret    

c000facd <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c000facd:	57                   	push   edi
c000face:	56                   	push   esi
c000facf:	53                   	push   ebx
c000fad0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000fad6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c000fadd:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c000fae4:	53                   	push   ebx
c000fae5:	e8 76 0a ff ff       	call   c0000560 <strlen>
c000faea:	89 34 24             	mov    DWORD PTR [esp],esi
c000faed:	89 c7                	mov    edi,eax
c000faef:	e8 6c 0a ff ff       	call   c0000560 <strlen>
c000faf4:	83 c4 10             	add    esp,0x10
c000faf7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c000fafb:	3d ff 00 00 00       	cmp    eax,0xff
c000fb00:	0f 87 d3 00 00 00    	ja     c000fbd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000fb06:	57                   	push   edi
c000fb07:	57                   	push   edi
c000fb08:	56                   	push   esi
c000fb09:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000fb0d:	56                   	push   esi
c000fb0e:	e8 0d 0b ff ff       	call   c0000620 <strcpy>
c000fb13:	58                   	pop    eax
c000fb14:	5a                   	pop    edx
c000fb15:	68 73 e2 01 c0       	push   0xc001e273
c000fb1a:	56                   	push   esi
c000fb1b:	e8 c0 0c ff ff       	call   c00007e0 <strcat>
c000fb20:	59                   	pop    ecx
c000fb21:	5f                   	pop    edi
c000fb22:	53                   	push   ebx
c000fb23:	56                   	push   esi
c000fb24:	e8 b7 0c ff ff       	call   c00007e0 <strcat>
c000fb29:	58                   	pop    eax
c000fb2a:	5a                   	pop    edx
c000fb2b:	68 8e df 01 c0       	push   0xc001df8e
c000fb30:	56                   	push   esi
c000fb31:	e8 aa 0c ff ff       	call   c00007e0 <strcat>
c000fb36:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000fb3d:	e8 23 71 ff ff       	call   c0006c65 <malloc>
c000fb42:	83 c4 0c             	add    esp,0xc
c000fb45:	89 c3                	mov    ebx,eax
c000fb47:	ff 35 10 2b 02 c0    	push   DWORD PTR ds:0xc0022b10
c000fb4d:	56                   	push   esi
c000fb4e:	50                   	push   eax
c000fb4f:	e8 4a a4 ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c000fb54:	83 c4 10             	add    esp,0x10
c000fb57:	85 db                	test   ebx,ebx
c000fb59:	74 7e                	je     c000fbd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000fb5b:	51                   	push   ecx
c000fb5c:	51                   	push   ecx
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	e8 f9 a4 ff ff       	call   c000a05e <File::open(FileOpenMode)>
c000fb65:	83 c4 10             	add    esp,0x10
c000fb68:	85 c0                	test   eax,eax
c000fb6a:	74 08                	je     c000fb74 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c000fb6c:	83 ec 0c             	sub    esp,0xc
c000fb6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb71:	53                   	push   ebx
c000fb72:	eb 5f                	jmp    c000fbd3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c000fb74:	52                   	push   edx
c000fb75:	8d 44 24 17          	lea    eax,[esp+0x17]
c000fb79:	50                   	push   eax
c000fb7a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000fb7e:	50                   	push   eax
c000fb7f:	53                   	push   ebx
c000fb80:	e8 85 a7 ff ff       	call   c000a30a <File::stat(unsigned long long*, bool*)>
c000fb85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb89:	83 c4 10             	add    esp,0x10
c000fb8c:	89 c1                	mov    ecx,eax
c000fb8e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c000fb92:	74 31                	je     c000fbc5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000fb94:	83 ec 0c             	sub    esp,0xc
c000fb97:	50                   	push   eax
c000fb98:	e8 c8 70 ff ff       	call   c0006c65 <malloc>
c000fb9d:	89 c6                	mov    esi,eax
c000fb9f:	58                   	pop    eax
c000fba0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fba2:	8d 54 24 20          	lea    edx,[esp+0x20]
c000fba6:	52                   	push   edx
c000fba7:	56                   	push   esi
c000fba8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000fbac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000fbb0:	53                   	push   ebx
c000fbb1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fbb4:	83 c4 20             	add    esp,0x20
c000fbb7:	85 c0                	test   eax,eax
c000fbb9:	75 0a                	jne    c000fbc5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000fbbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbbf:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fbc3:	74 18                	je     c000fbdd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c000fbc5:	83 ec 0c             	sub    esp,0xc
c000fbc8:	53                   	push   ebx
c000fbc9:	e8 ee a4 ff ff       	call   c000a0bc <File::close()>
c000fbce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fbd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbd3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fbd6:	83 c4 10             	add    esp,0x10
c000fbd9:	31 c0                	xor    eax,eax
c000fbdb:	eb 3b                	jmp    c000fc18 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c000fbdd:	83 ec 0c             	sub    esp,0xc
c000fbe0:	53                   	push   ebx
c000fbe1:	e8 d6 a4 ff ff       	call   c000a0bc <File::close()>
c000fbe6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fbe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fbee:	83 c4 0c             	add    esp,0xc
c000fbf1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fbf8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fbff:	56                   	push   esi
c000fc00:	e8 70 fd ff ff       	call   c000f975 <Reg::findLineFromLoadedData(char*, char*, char*)>
c000fc05:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc08:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000fc0c:	e8 64 70 ff ff       	call   c0006c75 <free>
c000fc11:	83 c4 10             	add    esp,0x10
c000fc14:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc18:	81 c4 20 01 00 00    	add    esp,0x120
c000fc1e:	5b                   	pop    ebx
c000fc1f:	5e                   	pop    esi
c000fc20:	5f                   	pop    edi
c000fc21:	c3                   	ret    

c000fc22 <Reg::getLine(char*, char*, char*)>:
c000fc22:	57                   	push   edi
c000fc23:	56                   	push   esi
c000fc24:	53                   	push   ebx
c000fc25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fc2d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc31:	57                   	push   edi
c000fc32:	56                   	push   esi
c000fc33:	53                   	push   ebx
c000fc34:	68 93 df 01 c0       	push   0xc001df93
c000fc39:	e8 8f fe ff ff       	call   c000facd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fc3e:	83 c4 10             	add    esp,0x10
c000fc41:	84 c0                	test   al,al
c000fc43:	75 10                	jne    c000fc55 <Reg::getLine(char*, char*, char*)+0x33>
c000fc45:	57                   	push   edi
c000fc46:	56                   	push   esi
c000fc47:	53                   	push   ebx
c000fc48:	68 b8 df 01 c0       	push   0xc001dfb8
c000fc4d:	e8 7b fe ff ff       	call   c000facd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fc52:	83 c4 10             	add    esp,0x10
c000fc55:	5b                   	pop    ebx
c000fc56:	5e                   	pop    esi
c000fc57:	5f                   	pop    edi
c000fc58:	c3                   	ret    

c000fc59 <Reg::readInt(char*, char*, int*)>:
c000fc59:	55                   	push   ebp
c000fc5a:	57                   	push   edi
c000fc5b:	56                   	push   esi
c000fc5c:	53                   	push   ebx
c000fc5d:	81 ec f0 00 00 00    	sub    esp,0xf0
c000fc63:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000fc67:	57                   	push   edi
c000fc68:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fc6f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fc76:	e8 a7 ff ff ff       	call   c000fc22 <Reg::getLine(char*, char*, char*)>
c000fc7b:	83 c4 10             	add    esp,0x10
c000fc7e:	84 c0                	test   al,al
c000fc80:	0f 84 b3 00 00 00    	je     c000fd39 <Reg::readInt(char*, char*, int*)+0xe0>
c000fc86:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c000fc8a:	80 fa 2b             	cmp    dl,0x2b
c000fc8d:	74 0c                	je     c000fc9b <Reg::readInt(char*, char*, int*)+0x42>
c000fc8f:	80 fa 2d             	cmp    dl,0x2d
c000fc92:	75 0e                	jne    c000fca2 <Reg::readInt(char*, char*, int*)+0x49>
c000fc94:	ba 01 00 00 00       	mov    edx,0x1
c000fc99:	eb 0b                	jmp    c000fca6 <Reg::readInt(char*, char*, int*)+0x4d>
c000fc9b:	ba 01 00 00 00       	mov    edx,0x1
c000fca0:	eb 02                	jmp    c000fca4 <Reg::readInt(char*, char*, int*)+0x4b>
c000fca2:	31 d2                	xor    edx,edx
c000fca4:	31 c0                	xor    eax,eax
c000fca6:	be 0a 00 00 00       	mov    esi,0xa
c000fcab:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c000fcb0:	75 20                	jne    c000fcd2 <Reg::readInt(char*, char*, int*)+0x79>
c000fcb2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c000fcb6:	80 f9 78             	cmp    cl,0x78
c000fcb9:	75 0a                	jne    c000fcc5 <Reg::readInt(char*, char*, int*)+0x6c>
c000fcbb:	83 c2 02             	add    edx,0x2
c000fcbe:	be 10 00 00 00       	mov    esi,0x10
c000fcc3:	eb 0d                	jmp    c000fcd2 <Reg::readInt(char*, char*, int*)+0x79>
c000fcc5:	80 f9 62             	cmp    cl,0x62
c000fcc8:	75 08                	jne    c000fcd2 <Reg::readInt(char*, char*, int*)+0x79>
c000fcca:	83 c2 02             	add    edx,0x2
c000fccd:	be 02 00 00 00       	mov    esi,0x2
c000fcd2:	01 d7                	add    edi,edx
c000fcd4:	31 d2                	xor    edx,edx
c000fcd6:	8a 1f                	mov    bl,BYTE PTR [edi]
c000fcd8:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c000fcdc:	80 fb 0d             	cmp    bl,0xd
c000fcdf:	0f 94 c3             	sete   bl
c000fce2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000fce7:	0f 94 c1             	sete   cl
c000fcea:	08 cb                	or     bl,cl
c000fcec:	75 3a                	jne    c000fd28 <Reg::readInt(char*, char*, int*)+0xcf>
c000fcee:	0f af d6             	imul   edx,esi
c000fcf1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c000fcf6:	83 fe 10             	cmp    esi,0x10
c000fcf9:	75 26                	jne    c000fd21 <Reg::readInt(char*, char*, int*)+0xc8>
c000fcfb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fcff:	8d 69 bf             	lea    ebp,[ecx-0x41]
c000fd02:	89 e9                	mov    ecx,ebp
c000fd04:	80 f9 05             	cmp    cl,0x5
c000fd07:	77 06                	ja     c000fd0f <Reg::readInt(char*, char*, int*)+0xb6>
c000fd09:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c000fd0d:	eb 16                	jmp    c000fd25 <Reg::readInt(char*, char*, int*)+0xcc>
c000fd0f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fd13:	83 e9 61             	sub    ecx,0x61
c000fd16:	80 f9 05             	cmp    cl,0x5
c000fd19:	77 06                	ja     c000fd21 <Reg::readInt(char*, char*, int*)+0xc8>
c000fd1b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c000fd1f:	eb 04                	jmp    c000fd25 <Reg::readInt(char*, char*, int*)+0xcc>
c000fd21:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c000fd25:	47                   	inc    edi
c000fd26:	eb ae                	jmp    c000fcd6 <Reg::readInt(char*, char*, int*)+0x7d>
c000fd28:	84 c0                	test   al,al
c000fd2a:	74 02                	je     c000fd2e <Reg::readInt(char*, char*, int*)+0xd5>
c000fd2c:	f7 da                	neg    edx
c000fd2e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c000fd35:	89 10                	mov    DWORD PTR [eax],edx
c000fd37:	88 d8                	mov    al,bl
c000fd39:	81 c4 ec 00 00 00    	add    esp,0xec
c000fd3f:	5b                   	pop    ebx
c000fd40:	5e                   	pop    esi
c000fd41:	5f                   	pop    edi
c000fd42:	5d                   	pop    ebp
c000fd43:	c3                   	ret    

c000fd44 <Reg::readString(char*, char*, char*, int)>:
c000fd44:	57                   	push   edi
c000fd45:	56                   	push   esi
c000fd46:	53                   	push   ebx
c000fd47:	81 ec d4 00 00 00    	sub    esp,0xd4
c000fd4d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c000fd54:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000fd58:	57                   	push   edi
c000fd59:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fd60:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fd67:	e8 b6 fe ff ff       	call   c000fc22 <Reg::getLine(char*, char*, char*)>
c000fd6c:	83 c4 10             	add    esp,0x10
c000fd6f:	89 c6                	mov    esi,eax
c000fd71:	84 c0                	test   al,al
c000fd73:	74 44                	je     c000fdb9 <Reg::readString(char*, char*, char*, int)+0x75>
c000fd75:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c000fd7c:	31 c0                	xor    eax,eax
c000fd7e:	4a                   	dec    edx
c000fd7f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c000fd82:	84 c9                	test   cl,cl
c000fd84:	74 0f                	je     c000fd95 <Reg::readString(char*, char*, char*, int)+0x51>
c000fd86:	39 c2                	cmp    edx,eax
c000fd88:	7e 0b                	jle    c000fd95 <Reg::readString(char*, char*, char*, int)+0x51>
c000fd8a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000fd8d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c000fd92:	40                   	inc    eax
c000fd93:	eb ea                	jmp    c000fd7f <Reg::readString(char*, char*, char*, int)+0x3b>
c000fd95:	83 ec 0c             	sub    esp,0xc
c000fd98:	53                   	push   ebx
c000fd99:	e8 c2 07 ff ff       	call   c0000560 <strlen>
c000fd9e:	83 c4 10             	add    esp,0x10
c000fda1:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c000fda6:	75 11                	jne    c000fdb9 <Reg::readString(char*, char*, char*, int)+0x75>
c000fda8:	83 ec 0c             	sub    esp,0xc
c000fdab:	53                   	push   ebx
c000fdac:	e8 af 07 ff ff       	call   c0000560 <strlen>
c000fdb1:	83 c4 10             	add    esp,0x10
c000fdb4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000fdb9:	81 c4 d0 00 00 00    	add    esp,0xd0
c000fdbf:	89 f0                	mov    eax,esi
c000fdc1:	5b                   	pop    ebx
c000fdc2:	5e                   	pop    esi
c000fdc3:	5f                   	pop    edi
c000fdc4:	c3                   	ret    

c000fdc5 <Reg::readBool(char*, char*, bool*)>:
c000fdc5:	83 ec 20             	sub    esp,0x20
c000fdc8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fdcc:	50                   	push   eax
c000fdcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fdd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fdd5:	e8 7f fe ff ff       	call   c000fc59 <Reg::readInt(char*, char*, int*)>
c000fdda:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fddf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fde3:	0f 95 02             	setne  BYTE PTR [edx]
c000fde6:	83 c4 2c             	add    esp,0x2c
c000fde9:	c3                   	ret    

c000fdea <Reg::readBoolWithDefault(char*, char*, bool)>:
c000fdea:	53                   	push   ebx
c000fdeb:	83 ec 1c             	sub    esp,0x1c
c000fdee:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c000fdf2:	8d 44 24 13          	lea    eax,[esp+0x13]
c000fdf6:	50                   	push   eax
c000fdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fdff:	e8 c1 ff ff ff       	call   c000fdc5 <Reg::readBool(char*, char*, bool*)>
c000fe04:	83 c4 10             	add    esp,0x10
c000fe07:	84 c0                	test   al,al
c000fe09:	74 04                	je     c000fe0f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c000fe0b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c000fe0f:	88 d8                	mov    al,bl
c000fe11:	83 c4 18             	add    esp,0x18
c000fe14:	5b                   	pop    ebx
c000fe15:	c3                   	ret    

c000fe16 <Reg::readIntWithDefault(char*, char*, int)>:
c000fe16:	53                   	push   ebx
c000fe17:	83 ec 1c             	sub    esp,0x1c
c000fe1a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fe1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fe22:	50                   	push   eax
c000fe23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fe27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fe2b:	e8 29 fe ff ff       	call   c000fc59 <Reg::readInt(char*, char*, int*)>
c000fe30:	83 c4 10             	add    esp,0x10
c000fe33:	84 c0                	test   al,al
c000fe35:	74 04                	je     c000fe3b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c000fe37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fe3b:	89 d8                	mov    eax,ebx
c000fe3d:	83 c4 18             	add    esp,0x18
c000fe40:	5b                   	pop    ebx
c000fe41:	c3                   	ret    

c000fe42 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c000fe42:	57                   	push   edi
c000fe43:	56                   	push   esi
c000fe44:	56                   	push   esi
c000fe45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fe49:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000fe4d:	56                   	push   esi
c000fe4e:	57                   	push   edi
c000fe4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe57:	e8 e8 fe ff ff       	call   c000fd44 <Reg::readString(char*, char*, char*, int)>
c000fe5c:	83 c4 10             	add    esp,0x10
c000fe5f:	84 c0                	test   al,al
c000fe61:	75 1a                	jne    c000fe7d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c000fe63:	51                   	push   ecx
c000fe64:	56                   	push   esi
c000fe65:	6a 00                	push   0x0
c000fe67:	57                   	push   edi
c000fe68:	e8 83 06 ff ff       	call   c00004f0 <memset>
c000fe6d:	8d 4e ff             	lea    ecx,[esi-0x1]
c000fe70:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fe74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe76:	83 c4 10             	add    esp,0x10
c000fe79:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000fe7d:	89 f8                	mov    eax,edi
c000fe7f:	5a                   	pop    edx
c000fe80:	5e                   	pop    esi
c000fe81:	5f                   	pop    edi
c000fe82:	c3                   	ret    

c000fe83 <Sys::eject(regs*)>:
c000fe83:	83 ec 0c             	sub    esp,0xc
c000fe86:	83 ca ff             	or     edx,0xffffffff
c000fe89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c000fe90:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000fe95:	83 e9 41             	sub    ecx,0x41
c000fe98:	83 f9 19             	cmp    ecx,0x19
c000fe9b:	77 18                	ja     c000feb5 <Sys::eject(regs*)+0x32>
c000fe9d:	8b 0c 8d 80 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde480]
c000fea4:	85 c9                	test   ecx,ecx
c000fea6:	74 0d                	je     c000feb5 <Sys::eject(regs*)+0x32>
c000fea8:	83 ec 0c             	sub    esp,0xc
c000feab:	51                   	push   ecx
c000feac:	e8 f5 c1 ff ff       	call   c000c0a6 <LogicalDisk::eject()>
c000feb1:	83 c4 10             	add    esp,0x10
c000feb4:	99                   	cdq    
c000feb5:	83 c4 0c             	add    esp,0xc
c000feb8:	c3                   	ret    

c000feb9 <Sys::exit(regs*)>:
c000feb9:	83 ec 18             	sub    esp,0x18
c000febc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fec0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fec3:	e8 dc 34 00 00       	call   c00133a4 <terminateTask(int)>
c000fec8:	83 c8 ff             	or     eax,0xffffffff
c000fecb:	83 c4 1c             	add    esp,0x1c
c000fece:	89 c2                	mov    edx,eax
c000fed0:	c3                   	ret    

c000fed1 <Sys::getCwd(regs*)>:
c000fed1:	83 ec 10             	sub    esp,0x10
c000fed4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fed8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000fedb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fede:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fee3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fee6:	e8 b5 9e ff ff       	call   c0009da0 <Fs::getcwd(Process*, char*, int)>
c000feeb:	83 c4 1c             	add    esp,0x1c
c000feee:	99                   	cdq    
c000feef:	c3                   	ret    

c000fef0 <Sys::getPID(regs*)>:
c000fef0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fef5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fef8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fefa:	99                   	cdq    
c000fefb:	c3                   	ret    

c000fefc <Sys::getRAMData(regs*)>:
c000fefc:	8b 0d 38 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f638
c000ff02:	69 05 34 f6 01 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc001f634,0xc8
c000ff0c:	99                   	cdq    
c000ff0d:	f7 f9                	idiv   ecx
c000ff0f:	c1 e0 18             	shl    eax,0x18
c000ff12:	09 c8                	or     eax,ecx
c000ff14:	99                   	cdq    
c000ff15:	c3                   	ret    

c000ff16 <Sys::getVGAPtr(regs*)>:
c000ff16:	55                   	push   ebp
c000ff17:	57                   	push   edi
c000ff18:	56                   	push   esi
c000ff19:	53                   	push   ebx
c000ff1a:	83 ec 18             	sub    esp,0x18
c000ff1d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000ff21:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ff24:	e8 7b 2f 00 00       	call   c0012ea4 <Thr::processFromPID(int)>
c000ff29:	83 c4 10             	add    esp,0x10
c000ff2c:	89 c1                	mov    ecx,eax
c000ff2e:	b8 01 00 00 00       	mov    eax,0x1
c000ff33:	85 c9                	test   ecx,ecx
c000ff35:	74 57                	je     c000ff8e <Sys::getVGAPtr(regs*)+0x78>
c000ff37:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c000ff3d:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000ff41:	74 0c                	je     c000ff4f <Sys::getVGAPtr(regs*)+0x39>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	55                   	push   ebp
c000ff47:	e8 49 7a ff ff       	call   c0007995 <setActiveTerminal(VgaText*)>
c000ff4c:	83 c4 10             	add    esp,0x10
c000ff4f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c000ff52:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c000ff55:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c000ff5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff5c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000ff5f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000ff62:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c000ff68:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000ff6b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000ff6e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c000ff74:	50                   	push   eax
c000ff75:	50                   	push   eax
c000ff76:	68 d3 df 01 c0       	push   0xc001dfd3
c000ff7b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000ff7e:	05 a8 0f 00 00       	add    eax,0xfa8
c000ff83:	50                   	push   eax
c000ff84:	e8 97 06 ff ff       	call   c0000620 <strcpy>
c000ff89:	83 c4 10             	add    esp,0x10
c000ff8c:	31 c0                	xor    eax,eax
c000ff8e:	83 c4 0c             	add    esp,0xc
c000ff91:	31 d2                	xor    edx,edx
c000ff93:	5b                   	pop    ebx
c000ff94:	5e                   	pop    esi
c000ff95:	5f                   	pop    edi
c000ff96:	5d                   	pop    ebp
c000ff97:	c3                   	ret    

c000ff98 <Sys::loadDLL(regs*)>:
c000ff98:	56                   	push   esi
c000ff99:	53                   	push   ebx
c000ff9a:	31 d2                	xor    edx,edx
c000ff9c:	51                   	push   ecx
c000ff9d:	b8 01 00 00 00       	mov    eax,0x1
c000ffa2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffa6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000ffaa:	0f 84 8c 00 00 00    	je     c001003c <Sys::loadDLL(regs*)+0xa4>
c000ffb0:	83 ec 0c             	sub    esp,0xc
c000ffb3:	68 14 01 00 00       	push   0x114
c000ffb8:	e8 a8 6c ff ff       	call   c0006c65 <malloc>
c000ffbd:	83 c4 0c             	add    esp,0xc
c000ffc0:	89 c3                	mov    ebx,eax
c000ffc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffc7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000ffca:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ffcd:	53                   	push   ebx
c000ffce:	e8 cb 9f ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c000ffd3:	83 c4 10             	add    esp,0x10
c000ffd6:	31 d2                	xor    edx,edx
c000ffd8:	b8 02 00 00 00       	mov    eax,0x2
c000ffdd:	85 db                	test   ebx,ebx
c000ffdf:	74 5b                	je     c001003c <Sys::loadDLL(regs*)+0xa4>
c000ffe1:	83 ec 0c             	sub    esp,0xc
c000ffe4:	53                   	push   ebx
c000ffe5:	e8 e2 a2 ff ff       	call   c000a2cc <File::exists()>
c000ffea:	83 c4 10             	add    esp,0x10
c000ffed:	84 c0                	test   al,al
c000ffef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fff1:	75 11                	jne    c0010004 <Sys::loadDLL(regs*)+0x6c>
c000fff3:	83 ec 0c             	sub    esp,0xc
c000fff6:	53                   	push   ebx
c000fff7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fffa:	83 c4 10             	add    esp,0x10
c000fffd:	b8 03 00 00 00       	mov    eax,0x3
c0010002:	eb 36                	jmp    c001003a <Sys::loadDLL(regs*)+0xa2>
c0010004:	83 ec 0c             	sub    esp,0xc
c0010007:	53                   	push   ebx
c0010008:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001000b:	58                   	pop    eax
c001000c:	5a                   	pop    edx
c001000d:	6a 00                	push   0x0
c001000f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010012:	e8 77 20 00 00       	call   c001208e <Thr::loadDLL(char const*, bool)>
c0010017:	83 c4 10             	add    esp,0x10
c001001a:	89 c1                	mov    ecx,eax
c001001c:	31 d2                	xor    edx,edx
c001001e:	b8 04 00 00 00       	mov    eax,0x4
c0010023:	85 c9                	test   ecx,ecx
c0010025:	74 15                	je     c001003c <Sys::loadDLL(regs*)+0xa4>
c0010027:	53                   	push   ebx
c0010028:	53                   	push   ebx
c0010029:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c001002f:	51                   	push   ecx
c0010030:	e8 8a 22 00 00       	call   c00122bf <Thr::executeDLL(unsigned long, void*)>
c0010035:	83 c4 10             	add    esp,0x10
c0010038:	31 c0                	xor    eax,eax
c001003a:	31 d2                	xor    edx,edx
c001003c:	59                   	pop    ecx
c001003d:	5b                   	pop    ebx
c001003e:	5e                   	pop    esi
c001003f:	c3                   	ret    

c0010040 <Sys::read(regs*)>:
c0010040:	57                   	push   edi
c0010041:	56                   	push   esi
c0010042:	53                   	push   ebx
c0010043:	83 ec 10             	sub    esp,0x10
c0010046:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001004a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001004d:	83 f8 02             	cmp    eax,0x2
c0010050:	77 10                	ja     c0010062 <Sys::read(regs*)+0x22>
c0010052:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010057:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001005a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0010060:	eb 0e                	jmp    c0010070 <Sys::read(regs*)+0x30>
c0010062:	83 ec 0c             	sub    esp,0xc
c0010065:	50                   	push   eax
c0010066:	e8 e0 85 ff ff       	call   c000864b <getFromFileDescriptor(int)>
c001006b:	83 c4 10             	add    esp,0x10
c001006e:	89 c1                	mov    ecx,eax
c0010070:	83 c8 ff             	or     eax,0xffffffff
c0010073:	85 c9                	test   ecx,ecx
c0010075:	89 c2                	mov    edx,eax
c0010077:	74 28                	je     c00100a1 <Sys::read(regs*)+0x61>
c0010079:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010081:	31 ff                	xor    edi,edi
c0010083:	83 ec 0c             	sub    esp,0xc
c0010086:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010088:	8d 54 24 18          	lea    edx,[esp+0x18]
c001008c:	52                   	push   edx
c001008d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010090:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0010093:	57                   	push   edi
c0010094:	56                   	push   esi
c0010095:	51                   	push   ecx
c0010096:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010099:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001009d:	83 c4 20             	add    esp,0x20
c00100a0:	99                   	cdq    
c00100a1:	83 c4 10             	add    esp,0x10
c00100a4:	5b                   	pop    ebx
c00100a5:	5e                   	pop    esi
c00100a6:	5f                   	pop    edi
c00100a7:	c3                   	ret    

c00100a8 <Sys::sbrk(regs*)>:
c00100a8:	56                   	push   esi
c00100a9:	53                   	push   ebx
c00100aa:	50                   	push   eax
c00100ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00100b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00100b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00100b7:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00100ba:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00100c0:	85 db                	test   ebx,ebx
c00100c2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00100c5:	74 02                	je     c00100c9 <Sys::sbrk(regs*)+0x21>
c00100c7:	79 06                	jns    c00100cf <Sys::sbrk(regs*)+0x27>
c00100c9:	89 f0                	mov    eax,esi
c00100cb:	31 d2                	xor    edx,edx
c00100cd:	eb 2a                	jmp    c00100f9 <Sys::sbrk(regs*)+0x51>
c00100cf:	83 c8 ff             	or     eax,0xffffffff
c00100d2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00100d8:	89 c2                	mov    edx,eax
c00100da:	77 1d                	ja     c00100f9 <Sys::sbrk(regs*)+0x51>
c00100dc:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00100e2:	50                   	push   eax
c00100e3:	c1 ea 0c             	shr    edx,0xc
c00100e6:	68 07 0c 00 00       	push   0xc07
c00100eb:	52                   	push   edx
c00100ec:	51                   	push   ecx
c00100ed:	e8 0c 8e ff ff       	call   c0008efe <VAS::allocatePages(int, int)>
c00100f2:	89 f0                	mov    eax,esi
c00100f4:	31 d2                	xor    edx,edx
c00100f6:	83 c4 10             	add    esp,0x10
c00100f9:	59                   	pop    ecx
c00100fa:	5b                   	pop    ebx
c00100fb:	5e                   	pop    esi
c00100fc:	c3                   	ret    

c00100fd <Sys::setCwd(regs*)>:
c00100fd:	83 ec 14             	sub    esp,0x14
c0010100:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010104:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001010c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001010f:	e8 57 a2 ff ff       	call   c000a36b <Fs::setcwd(Process*, char*)>
c0010114:	83 c4 1c             	add    esp,0x1c
c0010117:	99                   	cdq    
c0010118:	c3                   	ret    

c0010119 <Sys::setTime(regs*)>:
c0010119:	55                   	push   ebp
c001011a:	31 c9                	xor    ecx,ecx
c001011c:	57                   	push   edi
c001011d:	bd 0c 00 00 00       	mov    ebp,0xc
c0010122:	56                   	push   esi
c0010123:	53                   	push   ebx
c0010124:	31 db                	xor    ebx,ebx
c0010126:	83 ec 10             	sub    esp,0x10
c0010129:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001012d:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0010130:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010133:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0010136:	89 c2                	mov    edx,eax
c0010138:	66 81 ef 6c 07       	sub    di,0x76c
c001013d:	83 e2 1f             	and    edx,0x1f
c0010140:	c1 e7 10             	shl    edi,0x10
c0010143:	42                   	inc    edx
c0010144:	c1 e8 05             	shr    eax,0x5
c0010147:	88 d1                	mov    cl,dl
c0010149:	31 d2                	xor    edx,edx
c001014b:	f7 f5                	div    ebp
c001014d:	89 dd                	mov    ebp,ebx
c001014f:	88 d5                	mov    ch,dl
c0010151:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0010157:	0f b7 c1             	movzx  eax,cx
c001015a:	31 d2                	xor    edx,edx
c001015c:	09 f8                	or     eax,edi
c001015e:	bf 3c 00 00 00       	mov    edi,0x3c
c0010163:	89 c1                	mov    ecx,eax
c0010165:	89 f0                	mov    eax,esi
c0010167:	f7 f7                	div    edi
c0010169:	c1 e2 10             	shl    edx,0x10
c001016c:	09 d5                	or     ebp,edx
c001016e:	31 d2                	xor    edx,edx
c0010170:	89 eb                	mov    ebx,ebp
c0010172:	f7 f7                	div    edi
c0010174:	bf 10 0e 00 00       	mov    edi,0xe10
c0010179:	88 d7                	mov    bh,dl
c001017b:	89 f0                	mov    eax,esi
c001017d:	31 d2                	xor    edx,edx
c001017f:	f7 f7                	div    edi
c0010181:	bf 18 00 00 00       	mov    edi,0x18
c0010186:	31 d2                	xor    edx,edx
c0010188:	f7 f7                	div    edi
c001018a:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c001018f:	88 d3                	mov    bl,dl
c0010191:	53                   	push   ebx
c0010192:	51                   	push   ecx
c0010193:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0010199:	e8 de a9 ff ff       	call   c000ab7c <Clock::setTimeInDatetimeLocal(datetime_t)>
c001019e:	83 c4 1c             	add    esp,0x1c
c00101a1:	83 f0 01             	xor    eax,0x1
c00101a4:	5b                   	pop    ebx
c00101a5:	0f b6 c0             	movzx  eax,al
c00101a8:	5e                   	pop    esi
c00101a9:	31 d2                	xor    edx,edx
c00101ab:	5f                   	pop    edi
c00101ac:	5d                   	pop    ebp
c00101ad:	c3                   	ret    

c00101ae <Sys::timezone(regs*)>:
c00101ae:	53                   	push   ebx
c00101af:	83 ec 08             	sub    esp,0x8
c00101b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101b6:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00101ba:	75 17                	jne    c00101d3 <Sys::timezone(regs*)+0x25>
c00101bc:	83 ec 0c             	sub    esp,0xc
c00101bf:	68 dd df 01 c0       	push   0xc001dfdd
c00101c4:	e8 5f 98 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00101c9:	83 c8 ff             	or     eax,0xffffffff
c00101cc:	83 c4 10             	add    esp,0x10
c00101cf:	89 c2                	mov    edx,eax
c00101d1:	eb 20                	jmp    c00101f3 <Sys::timezone(regs*)+0x45>
c00101d3:	83 ec 0c             	sub    esp,0xc
c00101d6:	68 f2 df 01 c0       	push   0xc001dff2
c00101db:	e8 48 98 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00101e0:	58                   	pop    eax
c00101e1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00101e4:	e8 ef a6 ff ff       	call   c000a8d8 <User::loadClockSettings(int)>
c00101e9:	83 c4 10             	add    esp,0x10
c00101ec:	b8 01 00 00 00       	mov    eax,0x1
c00101f1:	31 d2                	xor    edx,edx
c00101f3:	83 c4 08             	add    esp,0x8
c00101f6:	5b                   	pop    ebx
c00101f7:	c3                   	ret    

c00101f8 <Sys::write(regs*)>:
c00101f8:	57                   	push   edi
c00101f9:	56                   	push   esi
c00101fa:	53                   	push   ebx
c00101fb:	83 ec 10             	sub    esp,0x10
c00101fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010202:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010205:	83 f8 02             	cmp    eax,0x2
c0010208:	77 10                	ja     c001021a <Sys::write(regs*)+0x22>
c001020a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001020f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010212:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0010218:	eb 0e                	jmp    c0010228 <Sys::write(regs*)+0x30>
c001021a:	83 ec 0c             	sub    esp,0xc
c001021d:	50                   	push   eax
c001021e:	e8 28 84 ff ff       	call   c000864b <getFromFileDescriptor(int)>
c0010223:	83 c4 10             	add    esp,0x10
c0010226:	89 c1                	mov    ecx,eax
c0010228:	83 c8 ff             	or     eax,0xffffffff
c001022b:	85 c9                	test   ecx,ecx
c001022d:	89 c2                	mov    edx,eax
c001022f:	74 28                	je     c0010259 <Sys::write(regs*)+0x61>
c0010231:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010239:	31 ff                	xor    edi,edi
c001023b:	83 ec 0c             	sub    esp,0xc
c001023e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010240:	8d 54 24 18          	lea    edx,[esp+0x18]
c0010244:	52                   	push   edx
c0010245:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010248:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001024b:	57                   	push   edi
c001024c:	56                   	push   esi
c001024d:	51                   	push   ecx
c001024e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010251:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010255:	83 c4 20             	add    esp,0x20
c0010258:	99                   	cdq    
c0010259:	83 c4 10             	add    esp,0x10
c001025c:	5b                   	pop    ebx
c001025d:	5e                   	pop    esi
c001025e:	5f                   	pop    edi
c001025f:	c3                   	ret    

c0010260 <Sys::wsbe(regs*)>:
c0010260:	57                   	push   edi
c0010261:	b9 0b 00 00 00       	mov    ecx,0xb
c0010266:	56                   	push   esi
c0010267:	be 31 e0 01 c0       	mov    esi,0xc001e031
c001026c:	53                   	push   ebx
c001026d:	83 ec 30             	sub    esp,0x30
c0010270:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010274:	fc                   	cld    
c0010275:	83 ec 0c             	sub    esp,0xc
c0010278:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001027a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001027e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010283:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010286:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001028c:	8b 06                	mov    eax,DWORD PTR [esi]
c001028e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0010291:	57                   	push   edi
c0010292:	e8 c9 02 ff ff       	call   c0000560 <strlen>
c0010297:	5a                   	pop    edx
c0010298:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001029c:	52                   	push   edx
c001029d:	31 d2                	xor    edx,edx
c001029f:	57                   	push   edi
c00102a0:	52                   	push   edx
c00102a1:	50                   	push   eax
c00102a2:	56                   	push   esi
c00102a3:	ff d3                	call   ebx
c00102a5:	83 c4 14             	add    esp,0x14
c00102a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00102ac:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00102af:	e8 f0 30 00 00       	call   c00133a4 <terminateTask(int)>
c00102b4:	83 c4 40             	add    esp,0x40
c00102b7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00102bc:	5b                   	pop    ebx
c00102bd:	31 d2                	xor    edx,edx
c00102bf:	5e                   	pop    esi
c00102c0:	5f                   	pop    edi
c00102c1:	c3                   	ret    

c00102c2 <Sys::yield(regs*)>:
c00102c2:	83 ec 0c             	sub    esp,0xc
c00102c5:	fa                   	cli    
c00102c6:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c00102cc:	e8 af 27 00 00       	call   c0012a80 <schedule()>
c00102d1:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c00102d6:	48                   	dec    eax
c00102d7:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c00102dc:	75 01                	jne    c00102df <Sys::yield(regs*)+0x1d>
c00102de:	fb                   	sti    
c00102df:	31 c0                	xor    eax,eax
c00102e1:	31 d2                	xor    edx,edx
c00102e3:	83 c4 0c             	add    esp,0xc
c00102e6:	c3                   	ret    

c00102e7 <sysCallSeekDir(regs*)>:
c00102e7:	31 c0                	xor    eax,eax
c00102e9:	31 d2                	xor    edx,edx
c00102eb:	c3                   	ret    

c00102ec <sysCallTellDir(regs*)>:
c00102ec:	31 c0                	xor    eax,eax
c00102ee:	31 d2                	xor    edx,edx
c00102f0:	c3                   	ret    

c00102f1 <sysCallVerify(regs*)>:
c00102f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102f5:	31 d2                	xor    edx,edx
c00102f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00102fa:	c3                   	ret    

c00102fb <sysCallGetArgc(regs*)>:
c00102fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010300:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010303:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010309:	99                   	cdq    
c001030a:	c3                   	ret    

c001030b <sysCallTTYName(regs*)>:
c001030b:	b8 01 00 00 00       	mov    eax,0x1
c0010310:	31 d2                	xor    edx,edx
c0010312:	c3                   	ret    

c0010313 <sysFormatDisk(regs*)>:
c0010313:	56                   	push   esi
c0010314:	53                   	push   ebx
c0010315:	50                   	push   eax
c0010316:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001031a:	8b 1d f8 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6f8
c0010320:	eb 28                	jmp    c001034a <sysFormatDisk(regs*)+0x37>
c0010322:	83 ec 0c             	sub    esp,0xc
c0010325:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010328:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001032b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001032d:	51                   	push   ecx
c001032e:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010331:	51                   	push   ecx
c0010332:	50                   	push   eax
c0010333:	8b 04 85 80 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde480]
c001033a:	50                   	push   eax
c001033b:	53                   	push   ebx
c001033c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001033f:	83 c4 20             	add    esp,0x20
c0010342:	83 f8 08             	cmp    eax,0x8
c0010345:	75 12                	jne    c0010359 <sysFormatDisk(regs*)+0x46>
c0010347:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001034a:	85 db                	test   ebx,ebx
c001034c:	75 d4                	jne    c0010322 <sysFormatDisk(regs*)+0xf>
c001034e:	59                   	pop    ecx
c001034f:	b8 03 00 00 00       	mov    eax,0x3
c0010354:	31 d2                	xor    edx,edx
c0010356:	5b                   	pop    ebx
c0010357:	5e                   	pop    esi
c0010358:	c3                   	ret    
c0010359:	85 c0                	test   eax,eax
c001035b:	74 1b                	je     c0010378 <sysFormatDisk(regs*)+0x65>
c001035d:	83 f8 09             	cmp    eax,0x9
c0010360:	74 0b                	je     c001036d <sysFormatDisk(regs*)+0x5a>
c0010362:	59                   	pop    ecx
c0010363:	b8 02 00 00 00       	mov    eax,0x2
c0010368:	31 d2                	xor    edx,edx
c001036a:	5b                   	pop    ebx
c001036b:	5e                   	pop    esi
c001036c:	c3                   	ret    
c001036d:	59                   	pop    ecx
c001036e:	b8 01 00 00 00       	mov    eax,0x1
c0010373:	31 d2                	xor    edx,edx
c0010375:	5b                   	pop    ebx
c0010376:	5e                   	pop    esi
c0010377:	c3                   	ret    
c0010378:	59                   	pop    ecx
c0010379:	31 c0                	xor    eax,eax
c001037b:	31 d2                	xor    edx,edx
c001037d:	5b                   	pop    ebx
c001037e:	5e                   	pop    esi
c001037f:	c3                   	ret    

c0010380 <sysSetDiskVolumeLabel(regs*)>:
c0010380:	56                   	push   esi
c0010381:	53                   	push   ebx
c0010382:	53                   	push   ebx
c0010383:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010387:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001038a:	83 f8 19             	cmp    eax,0x19
c001038d:	77 2d                	ja     c00103bc <sysSetDiskVolumeLabel(regs*)+0x3c>
c001038f:	8b 0c 85 80 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde480]
c0010396:	85 c9                	test   ecx,ecx
c0010398:	74 22                	je     c00103bc <sysSetDiskVolumeLabel(regs*)+0x3c>
c001039a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001039d:	85 db                	test   ebx,ebx
c001039f:	74 1b                	je     c00103bc <sysSetDiskVolumeLabel(regs*)+0x3c>
c00103a1:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00103a7:	85 d2                	test   edx,edx
c00103a9:	74 11                	je     c00103bc <sysSetDiskVolumeLabel(regs*)+0x3c>
c00103ab:	8b 32                	mov    esi,DWORD PTR [edx]
c00103ad:	53                   	push   ebx
c00103ae:	50                   	push   eax
c00103af:	51                   	push   ecx
c00103b0:	52                   	push   edx
c00103b1:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00103b4:	83 c4 10             	add    esp,0x10
c00103b7:	99                   	cdq    
c00103b8:	59                   	pop    ecx
c00103b9:	5b                   	pop    ebx
c00103ba:	5e                   	pop    esi
c00103bb:	c3                   	ret    
c00103bc:	59                   	pop    ecx
c00103bd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00103c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103c7:	5b                   	pop    ebx
c00103c8:	5e                   	pop    esi
c00103c9:	c3                   	ret    

c00103ca <sysGetDiskVolumeLabel(regs*)>:
c00103ca:	57                   	push   edi
c00103cb:	56                   	push   esi
c00103cc:	53                   	push   ebx
c00103cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103d1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00103d4:	83 fa 19             	cmp    edx,0x19
c00103d7:	77 38                	ja     c0010411 <sysGetDiskVolumeLabel(regs*)+0x47>
c00103d9:	8b 0c 95 80 1b 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffde480]
c00103e0:	85 c9                	test   ecx,ecx
c00103e2:	74 2d                	je     c0010411 <sysGetDiskVolumeLabel(regs*)+0x47>
c00103e4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00103e7:	85 db                	test   ebx,ebx
c00103e9:	74 26                	je     c0010411 <sysGetDiskVolumeLabel(regs*)+0x47>
c00103eb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00103ee:	85 f6                	test   esi,esi
c00103f0:	74 1f                	je     c0010411 <sysGetDiskVolumeLabel(regs*)+0x47>
c00103f2:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00103f8:	85 c0                	test   eax,eax
c00103fa:	74 15                	je     c0010411 <sysGetDiskVolumeLabel(regs*)+0x47>
c00103fc:	83 ec 0c             	sub    esp,0xc
c00103ff:	8b 38                	mov    edi,DWORD PTR [eax]
c0010401:	56                   	push   esi
c0010402:	53                   	push   ebx
c0010403:	52                   	push   edx
c0010404:	51                   	push   ecx
c0010405:	50                   	push   eax
c0010406:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010409:	83 c4 20             	add    esp,0x20
c001040c:	99                   	cdq    
c001040d:	5b                   	pop    ebx
c001040e:	5e                   	pop    esi
c001040f:	5f                   	pop    edi
c0010410:	c3                   	ret    
c0010411:	5b                   	pop    ebx
c0010412:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010417:	ba ff ff ff ff       	mov    edx,0xffffffff
c001041c:	5e                   	pop    esi
c001041d:	5f                   	pop    edi
c001041e:	c3                   	ret    

c001041f <sysShutdown(regs*)>:
c001041f:	83 ec 0c             	sub    esp,0xc
c0010422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010426:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010429:	85 c0                	test   eax,eax
c001042b:	74 18                	je     c0010445 <sysShutdown(regs*)+0x26>
c001042d:	83 f8 01             	cmp    eax,0x1
c0010430:	74 38                	je     c001046a <sysShutdown(regs*)+0x4b>
c0010432:	83 f8 02             	cmp    eax,0x2
c0010435:	74 24                	je     c001045b <sysShutdown(regs*)+0x3c>
c0010437:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001043c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010441:	83 c4 0c             	add    esp,0xc
c0010444:	c3                   	ret    
c0010445:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c001044a:	8b 10                	mov    edx,DWORD PTR [eax]
c001044c:	6a 00                	push   0x0
c001044e:	6a 00                	push   0x0
c0010450:	6a 00                	push   0x0
c0010452:	50                   	push   eax
c0010453:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010456:	83 c4 10             	add    esp,0x10
c0010459:	eb dc                	jmp    c0010437 <sysShutdown(regs*)+0x18>
c001045b:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0010460:	8b 10                	mov    edx,DWORD PTR [eax]
c0010462:	6a 00                	push   0x0
c0010464:	6a 00                	push   0x0
c0010466:	6a 01                	push   0x1
c0010468:	eb e8                	jmp    c0010452 <sysShutdown(regs*)+0x33>
c001046a:	a1 00 1c 02 c0       	mov    eax,ds:0xc0021c00
c001046f:	85 c0                	test   eax,eax
c0010471:	74 02                	je     c0010475 <sysShutdown(regs*)+0x56>
c0010473:	ff d0                	call   eax
c0010475:	31 c0                	xor    eax,eax
c0010477:	31 d2                	xor    edx,edx
c0010479:	83 c4 0c             	add    esp,0xc
c001047c:	c3                   	ret    

c001047d <sysCallRealpath(regs*)>:
c001047d:	83 ec 0c             	sub    esp,0xc
c0010480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010484:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010487:	85 d2                	test   edx,edx
c0010489:	74 07                	je     c0010492 <sysCallRealpath(regs*)+0x15>
c001048b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001048e:	85 c0                	test   eax,eax
c0010490:	75 0b                	jne    c001049d <sysCallRealpath(regs*)+0x20>
c0010492:	b8 01 00 00 00       	mov    eax,0x1
c0010497:	31 d2                	xor    edx,edx
c0010499:	83 c4 0c             	add    esp,0xc
c001049c:	c3                   	ret    
c001049d:	51                   	push   ecx
c001049e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00104a4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00104a7:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00104ad:	51                   	push   ecx
c00104ae:	52                   	push   edx
c00104af:	50                   	push   eax
c00104b0:	e8 3f 99 ff ff       	call   c0009df4 <Fs::standardiseFiles(char*, char const*, char const*)>
c00104b5:	83 c4 10             	add    esp,0x10
c00104b8:	31 c0                	xor    eax,eax
c00104ba:	31 d2                	xor    edx,edx
c00104bc:	83 c4 0c             	add    esp,0xc
c00104bf:	c3                   	ret    

c00104c0 <sysCallReadDir(regs*)>:
c00104c0:	53                   	push   ebx
c00104c1:	83 ec 18             	sub    esp,0x18
c00104c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00104c8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00104cb:	83 f8 02             	cmp    eax,0x2
c00104ce:	76 61                	jbe    c0010531 <sysCallReadDir(regs*)+0x71>
c00104d0:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00104d7:	77 49                	ja     c0010522 <sysCallReadDir(regs*)+0x62>
c00104d9:	83 ec 0c             	sub    esp,0xc
c00104dc:	50                   	push   eax
c00104dd:	e8 69 81 ff ff       	call   c000864b <getFromFileDescriptor(int)>
c00104e2:	83 c4 10             	add    esp,0x10
c00104e5:	85 c0                	test   eax,eax
c00104e7:	74 39                	je     c0010522 <sysCallReadDir(regs*)+0x62>
c00104e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00104f1:	83 ec 0c             	sub    esp,0xc
c00104f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00104f6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00104fa:	51                   	push   ecx
c00104fb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00104fe:	51                   	push   ecx
c00104ff:	6a 00                	push   0x0
c0010501:	68 10 01 00 00       	push   0x110
c0010506:	50                   	push   eax
c0010507:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001050a:	83 c4 20             	add    esp,0x20
c001050d:	85 c0                	test   eax,eax
c001050f:	74 29                	je     c001053a <sysCallReadDir(regs*)+0x7a>
c0010511:	83 f8 07             	cmp    eax,0x7
c0010514:	74 1b                	je     c0010531 <sysCallReadDir(regs*)+0x71>
c0010516:	b8 02 00 00 00       	mov    eax,0x2
c001051b:	31 d2                	xor    edx,edx
c001051d:	83 c4 18             	add    esp,0x18
c0010520:	5b                   	pop    ebx
c0010521:	c3                   	ret    
c0010522:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010527:	ba ff ff ff ff       	mov    edx,0xffffffff
c001052c:	83 c4 18             	add    esp,0x18
c001052f:	5b                   	pop    ebx
c0010530:	c3                   	ret    
c0010531:	b8 01 00 00 00       	mov    eax,0x1
c0010536:	31 d2                	xor    edx,edx
c0010538:	eb e3                	jmp    c001051d <sysCallReadDir(regs*)+0x5d>
c001053a:	31 c0                	xor    eax,eax
c001053c:	31 d2                	xor    edx,edx
c001053e:	eb dd                	jmp    c001051d <sysCallReadDir(regs*)+0x5d>

c0010540 <sysCallIsATTY(regs*)>:
c0010540:	83 ec 0c             	sub    esp,0xc
c0010543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010547:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001054a:	83 f8 02             	cmp    eax,0x2
c001054d:	76 07                	jbe    c0010556 <sysCallIsATTY(regs*)+0x16>
c001054f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010554:	75 28                	jne    c001057e <sysCallIsATTY(regs*)+0x3e>
c0010556:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001055b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001055e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010564:	85 c0                	test   eax,eax
c0010566:	74 26                	je     c001058e <sysCallIsATTY(regs*)+0x4e>
c0010568:	83 ec 0c             	sub    esp,0xc
c001056b:	8b 10                	mov    edx,DWORD PTR [eax]
c001056d:	50                   	push   eax
c001056e:	ff 12                	call   DWORD PTR [edx]
c0010570:	31 d2                	xor    edx,edx
c0010572:	25 ff 00 00 00       	and    eax,0xff
c0010577:	83 c4 10             	add    esp,0x10
c001057a:	83 c4 0c             	add    esp,0xc
c001057d:	c3                   	ret    
c001057e:	83 ec 0c             	sub    esp,0xc
c0010581:	50                   	push   eax
c0010582:	e8 c4 80 ff ff       	call   c000864b <getFromFileDescriptor(int)>
c0010587:	83 c4 10             	add    esp,0x10
c001058a:	85 c0                	test   eax,eax
c001058c:	75 da                	jne    c0010568 <sysCallIsATTY(regs*)+0x28>
c001058e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010593:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010598:	83 c4 0c             	add    esp,0xc
c001059b:	c3                   	ret    

c001059c <sysCallSeek(regs*)>:
c001059c:	53                   	push   ebx
c001059d:	83 ec 08             	sub    esp,0x8
c00105a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00105a7:	8d 50 fd             	lea    edx,[eax-0x3]
c00105aa:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00105b0:	77 34                	ja     c00105e6 <sysCallSeek(regs*)+0x4a>
c00105b2:	83 ec 0c             	sub    esp,0xc
c00105b5:	50                   	push   eax
c00105b6:	e8 90 80 ff ff       	call   c000864b <getFromFileDescriptor(int)>
c00105bb:	83 c4 0c             	add    esp,0xc
c00105be:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00105c1:	31 db                	xor    ebx,ebx
c00105c3:	53                   	push   ebx
c00105c4:	51                   	push   ecx
c00105c5:	50                   	push   eax
c00105c6:	e8 51 9b ff ff       	call   c000a11c <File::seek(unsigned long long)>
c00105cb:	83 c4 10             	add    esp,0x10
c00105ce:	85 c0                	test   eax,eax
c00105d0:	0f 95 c0             	setne  al
c00105d3:	31 d2                	xor    edx,edx
c00105d5:	25 ff 00 00 00       	and    eax,0xff
c00105da:	f7 d8                	neg    eax
c00105dc:	83 d2 00             	adc    edx,0x0
c00105df:	83 c4 08             	add    esp,0x8
c00105e2:	f7 da                	neg    edx
c00105e4:	5b                   	pop    ebx
c00105e5:	c3                   	ret    
c00105e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105eb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105f0:	83 c4 08             	add    esp,0x8
c00105f3:	5b                   	pop    ebx
c00105f4:	c3                   	ret    

c00105f5 <sysCallTell(regs*)>:
c00105f5:	53                   	push   ebx
c00105f6:	83 ec 08             	sub    esp,0x8
c00105f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010600:	83 f8 02             	cmp    eax,0x2
c0010603:	76 50                	jbe    c0010655 <sysCallTell(regs*)+0x60>
c0010605:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001060a:	76 19                	jbe    c0010625 <sysCallTell(regs*)+0x30>
c001060c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001060f:	31 d2                	xor    edx,edx
c0010611:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010617:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001061e:	31 c0                	xor    eax,eax
c0010620:	83 c4 08             	add    esp,0x8
c0010623:	5b                   	pop    ebx
c0010624:	c3                   	ret    
c0010625:	83 ec 0c             	sub    esp,0xc
c0010628:	50                   	push   eax
c0010629:	e8 1d 80 ff ff       	call   c000864b <getFromFileDescriptor(int)>
c001062e:	5a                   	pop    edx
c001062f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010632:	59                   	pop    ecx
c0010633:	53                   	push   ebx
c0010634:	50                   	push   eax
c0010635:	e8 38 9b ff ff       	call   c000a172 <File::tell(unsigned long long*)>
c001063a:	83 c4 10             	add    esp,0x10
c001063d:	85 c0                	test   eax,eax
c001063f:	0f 95 c0             	setne  al
c0010642:	31 d2                	xor    edx,edx
c0010644:	25 ff 00 00 00       	and    eax,0xff
c0010649:	f7 d8                	neg    eax
c001064b:	83 d2 00             	adc    edx,0x0
c001064e:	83 c4 08             	add    esp,0x8
c0010651:	f7 da                	neg    edx
c0010653:	5b                   	pop    ebx
c0010654:	c3                   	ret    
c0010655:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001065a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001065f:	83 c4 08             	add    esp,0x8
c0010662:	5b                   	pop    ebx
c0010663:	c3                   	ret    

c0010664 <sysCallSize(regs*)>:
c0010664:	53                   	push   ebx
c0010665:	83 ec 18             	sub    esp,0x18
c0010668:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001066c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001066f:	83 f8 02             	cmp    eax,0x2
c0010672:	76 56                	jbe    c00106ca <sysCallSize(regs*)+0x66>
c0010674:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010679:	76 19                	jbe    c0010694 <sysCallSize(regs*)+0x30>
c001067b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001067e:	31 d2                	xor    edx,edx
c0010680:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010686:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001068d:	31 c0                	xor    eax,eax
c001068f:	83 c4 18             	add    esp,0x18
c0010692:	5b                   	pop    ebx
c0010693:	c3                   	ret    
c0010694:	83 ec 0c             	sub    esp,0xc
c0010697:	50                   	push   eax
c0010698:	e8 ae 7f ff ff       	call   c000864b <getFromFileDescriptor(int)>
c001069d:	83 c4 0c             	add    esp,0xc
c00106a0:	8d 54 24 13          	lea    edx,[esp+0x13]
c00106a4:	52                   	push   edx
c00106a5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00106a8:	52                   	push   edx
c00106a9:	50                   	push   eax
c00106aa:	e8 5b 9c ff ff       	call   c000a30a <File::stat(unsigned long long*, bool*)>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	85 c0                	test   eax,eax
c00106b4:	0f 95 c0             	setne  al
c00106b7:	31 d2                	xor    edx,edx
c00106b9:	25 ff 00 00 00       	and    eax,0xff
c00106be:	f7 d8                	neg    eax
c00106c0:	83 d2 00             	adc    edx,0x0
c00106c3:	83 c4 18             	add    esp,0x18
c00106c6:	f7 da                	neg    edx
c00106c8:	5b                   	pop    ebx
c00106c9:	c3                   	ret    
c00106ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106d4:	83 c4 18             	add    esp,0x18
c00106d7:	5b                   	pop    ebx
c00106d8:	c3                   	ret    

c00106d9 <sysCallSizeFromFilename(regs*)>:
c00106d9:	57                   	push   edi
c00106da:	56                   	push   esi
c00106db:	53                   	push   ebx
c00106dc:	83 ec 20             	sub    esp,0x20
c00106df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00106e3:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00106e6:	83 fb 02             	cmp    ebx,0x2
c00106e9:	0f 86 8c 00 00 00    	jbe    c001077b <sysCallSizeFromFilename(regs*)+0xa2>
c00106ef:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00106f5:	76 1b                	jbe    c0010712 <sysCallSizeFromFilename(regs*)+0x39>
c00106f7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00106fa:	31 d2                	xor    edx,edx
c00106fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010702:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010709:	83 c4 20             	add    esp,0x20
c001070c:	31 c0                	xor    eax,eax
c001070e:	5b                   	pop    ebx
c001070f:	5e                   	pop    esi
c0010710:	5f                   	pop    edi
c0010711:	c3                   	ret    
c0010712:	83 ec 0c             	sub    esp,0xc
c0010715:	68 14 01 00 00       	push   0x114
c001071a:	e8 46 65 ff ff       	call   c0006c65 <malloc>
c001071f:	83 c4 0c             	add    esp,0xc
c0010722:	89 c7                	mov    edi,eax
c0010724:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010729:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001072c:	50                   	push   eax
c001072d:	53                   	push   ebx
c001072e:	57                   	push   edi
c001072f:	e8 6a 98 ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c0010734:	83 c4 0c             	add    esp,0xc
c0010737:	8d 44 24 23          	lea    eax,[esp+0x23]
c001073b:	50                   	push   eax
c001073c:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001073f:	52                   	push   edx
c0010740:	57                   	push   edi
c0010741:	e8 c4 9b ff ff       	call   c000a30a <File::stat(unsigned long long*, bool*)>
c0010746:	83 c4 10             	add    esp,0x10
c0010749:	85 ff                	test   edi,edi
c001074b:	74 14                	je     c0010761 <sysCallSizeFromFilename(regs*)+0x88>
c001074d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010751:	8b 17                	mov    edx,DWORD PTR [edi]
c0010753:	83 ec 0c             	sub    esp,0xc
c0010756:	57                   	push   edi
c0010757:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001075a:	83 c4 10             	add    esp,0x10
c001075d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010761:	85 c0                	test   eax,eax
c0010763:	0f 95 c0             	setne  al
c0010766:	31 d2                	xor    edx,edx
c0010768:	25 ff 00 00 00       	and    eax,0xff
c001076d:	f7 d8                	neg    eax
c001076f:	83 d2 00             	adc    edx,0x0
c0010772:	83 c4 20             	add    esp,0x20
c0010775:	f7 da                	neg    edx
c0010777:	5b                   	pop    ebx
c0010778:	5e                   	pop    esi
c0010779:	5f                   	pop    edi
c001077a:	c3                   	ret    
c001077b:	83 c4 20             	add    esp,0x20
c001077e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010783:	5b                   	pop    ebx
c0010784:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010789:	5e                   	pop    esi
c001078a:	5f                   	pop    edi
c001078b:	c3                   	ret    

c001078c <sysCallClose(regs*)>:
c001078c:	53                   	push   ebx
c001078d:	83 ec 08             	sub    esp,0x8
c0010790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010794:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010797:	83 f8 02             	cmp    eax,0x2
c001079a:	76 41                	jbe    c00107dd <sysCallClose(regs*)+0x51>
c001079c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00107a2:	83 fa 01             	cmp    edx,0x1
c00107a5:	76 2d                	jbe    c00107d4 <sysCallClose(regs*)+0x48>
c00107a7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00107ac:	77 2f                	ja     c00107dd <sysCallClose(regs*)+0x51>
c00107ae:	83 ec 0c             	sub    esp,0xc
c00107b1:	50                   	push   eax
c00107b2:	e8 94 7e ff ff       	call   c000864b <getFromFileDescriptor(int)>
c00107b7:	89 c3                	mov    ebx,eax
c00107b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00107bc:	e8 fb 98 ff ff       	call   c000a0bc <File::close()>
c00107c1:	83 c4 10             	add    esp,0x10
c00107c4:	85 db                	test   ebx,ebx
c00107c6:	74 0c                	je     c00107d4 <sysCallClose(regs*)+0x48>
c00107c8:	83 ec 0c             	sub    esp,0xc
c00107cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107cd:	53                   	push   ebx
c00107ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107d1:	83 c4 10             	add    esp,0x10
c00107d4:	31 c0                	xor    eax,eax
c00107d6:	31 d2                	xor    edx,edx
c00107d8:	83 c4 08             	add    esp,0x8
c00107db:	5b                   	pop    ebx
c00107dc:	c3                   	ret    
c00107dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107e7:	83 c4 08             	add    esp,0x8
c00107ea:	5b                   	pop    ebx
c00107eb:	c3                   	ret    

c00107ec <sysCallOpenDir(regs*)>:
c00107ec:	56                   	push   esi
c00107ed:	53                   	push   ebx
c00107ee:	50                   	push   eax
c00107ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00107f6:	85 c0                	test   eax,eax
c00107f8:	74 5b                	je     c0010855 <sysCallOpenDir(regs*)+0x69>
c00107fa:	83 ec 0c             	sub    esp,0xc
c00107fd:	68 14 01 00 00       	push   0x114
c0010802:	e8 5e 64 ff ff       	call   c0006c65 <malloc>
c0010807:	83 c4 0c             	add    esp,0xc
c001080a:	89 c6                	mov    esi,eax
c001080c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010811:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010814:	50                   	push   eax
c0010815:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010818:	50                   	push   eax
c0010819:	56                   	push   esi
c001081a:	e8 a9 9c ff ff       	call   c000a4c8 <Directory::Directory(char const*, Process*)>
c001081f:	83 c4 10             	add    esp,0x10
c0010822:	85 f6                	test   esi,esi
c0010824:	74 2f                	je     c0010855 <sysCallOpenDir(regs*)+0x69>
c0010826:	83 ec 0c             	sub    esp,0xc
c0010829:	56                   	push   esi
c001082a:	e8 59 9d ff ff       	call   c000a588 <Directory::open()>
c001082f:	83 c4 10             	add    esp,0x10
c0010832:	85 c0                	test   eax,eax
c0010834:	75 1f                	jne    c0010855 <sysCallOpenDir(regs*)+0x69>
c0010836:	83 ec 0c             	sub    esp,0xc
c0010839:	56                   	push   esi
c001083a:	e8 17 7b ff ff       	call   c0008356 <UnixFile::getFileDescriptor()>
c001083f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010842:	83 c4 10             	add    esp,0x10
c0010845:	89 02                	mov    DWORD PTR [edx],eax
c0010847:	c1 f8 1f             	sar    eax,0x1f
c001084a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001084d:	31 c0                	xor    eax,eax
c001084f:	59                   	pop    ecx
c0010850:	31 d2                	xor    edx,edx
c0010852:	5b                   	pop    ebx
c0010853:	5e                   	pop    esi
c0010854:	c3                   	ret    
c0010855:	59                   	pop    ecx
c0010856:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001085b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010860:	5b                   	pop    ebx
c0010861:	5e                   	pop    esi
c0010862:	c3                   	ret    

c0010863 <sysCallCloseDir(regs*)>:
c0010863:	53                   	push   ebx
c0010864:	83 ec 08             	sub    esp,0x8
c0010867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001086e:	8d 50 fd             	lea    edx,[eax-0x3]
c0010871:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010877:	77 2f                	ja     c00108a8 <sysCallCloseDir(regs*)+0x45>
c0010879:	83 ec 0c             	sub    esp,0xc
c001087c:	50                   	push   eax
c001087d:	e8 c9 7d ff ff       	call   c000864b <getFromFileDescriptor(int)>
c0010882:	89 c3                	mov    ebx,eax
c0010884:	89 04 24             	mov    DWORD PTR [esp],eax
c0010887:	e8 58 9d ff ff       	call   c000a5e4 <Directory::close()>
c001088c:	83 c4 10             	add    esp,0x10
c001088f:	85 db                	test   ebx,ebx
c0010891:	74 0c                	je     c001089f <sysCallCloseDir(regs*)+0x3c>
c0010893:	83 ec 0c             	sub    esp,0xc
c0010896:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010898:	53                   	push   ebx
c0010899:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001089c:	83 c4 10             	add    esp,0x10
c001089f:	31 c0                	xor    eax,eax
c00108a1:	31 d2                	xor    edx,edx
c00108a3:	83 c4 08             	add    esp,0x8
c00108a6:	5b                   	pop    ebx
c00108a7:	c3                   	ret    
c00108a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108ad:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108b2:	83 c4 08             	add    esp,0x8
c00108b5:	5b                   	pop    ebx
c00108b6:	c3                   	ret    

c00108b7 <sysCallMakeDir(regs*)>:
c00108b7:	56                   	push   esi
c00108b8:	53                   	push   ebx
c00108b9:	83 ec 10             	sub    esp,0x10
c00108bc:	68 14 01 00 00       	push   0x114
c00108c1:	e8 9f 63 ff ff       	call   c0006c65 <malloc>
c00108c6:	83 c4 0c             	add    esp,0xc
c00108c9:	89 c3                	mov    ebx,eax
c00108cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108d0:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c00108d3:	56                   	push   esi
c00108d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00108d8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00108db:	50                   	push   eax
c00108dc:	53                   	push   ebx
c00108dd:	e8 e6 9b ff ff       	call   c000a4c8 <Directory::Directory(char const*, Process*)>
c00108e2:	83 c4 10             	add    esp,0x10
c00108e5:	85 db                	test   ebx,ebx
c00108e7:	74 32                	je     c001091b <sysCallMakeDir(regs*)+0x64>
c00108e9:	83 ec 0c             	sub    esp,0xc
c00108ec:	53                   	push   ebx
c00108ed:	e8 76 9e ff ff       	call   c000a768 <Directory::create()>
c00108f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108f5:	89 c6                	mov    esi,eax
c00108f7:	e8 e8 9c ff ff       	call   c000a5e4 <Directory::close()>
c00108fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010901:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	31 c0                	xor    eax,eax
c0010909:	59                   	pop    ecx
c001090a:	85 f6                	test   esi,esi
c001090c:	5b                   	pop    ebx
c001090d:	0f 95 c0             	setne  al
c0010910:	5e                   	pop    esi
c0010911:	31 d2                	xor    edx,edx
c0010913:	f7 d8                	neg    eax
c0010915:	83 d2 00             	adc    edx,0x0
c0010918:	f7 da                	neg    edx
c001091a:	c3                   	ret    
c001091b:	59                   	pop    ecx
c001091c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010921:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010926:	5b                   	pop    ebx
c0010927:	5e                   	pop    esi
c0010928:	c3                   	ret    

c0010929 <sysCallWait(regs*)>:
c0010929:	83 ec 10             	sub    esp,0x10
c001092c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010930:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010933:	52                   	push   edx
c0010934:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010937:	51                   	push   ecx
c0010938:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001093b:	50                   	push   eax
c001093c:	e8 6b 23 00 00       	call   c0012cac <waitTask(int, int*, int)>
c0010941:	83 c4 1c             	add    esp,0x1c
c0010944:	99                   	cdq    
c0010945:	c3                   	ret    

c0010946 <sysCallNotImpl(regs*)>:
c0010946:	83 ec 18             	sub    esp,0x18
c0010949:	68 5d e0 01 c0       	push   0xc001e05d
c001094e:	e8 4e ec ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0010953:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010958:	ba ff ff ff ff       	mov    edx,0xffffffff
c001095d:	83 c4 1c             	add    esp,0x1c
c0010960:	c3                   	ret    

c0010961 <sysPanic(regs*)>:
c0010961:	83 ec 18             	sub    esp,0x18
c0010964:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010968:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001096b:	50                   	push   eax
c001096c:	e8 30 ec ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0010971:	b8 01 00 00 00       	mov    eax,0x1
c0010976:	31 d2                	xor    edx,edx
c0010978:	83 c4 1c             	add    esp,0x1c
c001097b:	c3                   	ret    

c001097c <sysCallRmdir(regs*)>:
c001097c:	56                   	push   esi
c001097d:	53                   	push   ebx
c001097e:	83 ec 20             	sub    esp,0x20
c0010981:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010985:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010988:	68 14 01 00 00       	push   0x114
c001098d:	e8 d3 62 ff ff       	call   c0006c65 <malloc>
c0010992:	83 c4 0c             	add    esp,0xc
c0010995:	89 c3                	mov    ebx,eax
c0010997:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001099c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001099f:	50                   	push   eax
c00109a0:	56                   	push   esi
c00109a1:	53                   	push   ebx
c00109a2:	e8 f7 95 ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c00109a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109aa:	e8 27 98 ff ff       	call   c000a1d6 <File::unlink()>
c00109af:	83 c4 10             	add    esp,0x10
c00109b2:	85 db                	test   ebx,ebx
c00109b4:	74 14                	je     c00109ca <sysCallRmdir(regs*)+0x4e>
c00109b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109ba:	8b 13                	mov    edx,DWORD PTR [ebx]
c00109bc:	83 ec 0c             	sub    esp,0xc
c00109bf:	53                   	push   ebx
c00109c0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00109c3:	83 c4 10             	add    esp,0x10
c00109c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109ca:	85 c0                	test   eax,eax
c00109cc:	0f 95 c0             	setne  al
c00109cf:	31 d2                	xor    edx,edx
c00109d1:	25 ff 00 00 00       	and    eax,0xff
c00109d6:	f7 d8                	neg    eax
c00109d8:	83 d2 00             	adc    edx,0x0
c00109db:	83 c4 14             	add    esp,0x14
c00109de:	f7 da                	neg    edx
c00109e0:	5b                   	pop    ebx
c00109e1:	5e                   	pop    esi
c00109e2:	c3                   	ret    

c00109e3 <sysCallUnlink(regs*)>:
c00109e3:	56                   	push   esi
c00109e4:	53                   	push   ebx
c00109e5:	83 ec 20             	sub    esp,0x20
c00109e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00109ec:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00109ef:	68 14 01 00 00       	push   0x114
c00109f4:	e8 6c 62 ff ff       	call   c0006c65 <malloc>
c00109f9:	83 c4 0c             	add    esp,0xc
c00109fc:	89 c3                	mov    ebx,eax
c00109fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a03:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a06:	50                   	push   eax
c0010a07:	56                   	push   esi
c0010a08:	53                   	push   ebx
c0010a09:	e8 90 95 ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c0010a0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a11:	e8 c0 97 ff ff       	call   c000a1d6 <File::unlink()>
c0010a16:	83 c4 10             	add    esp,0x10
c0010a19:	85 db                	test   ebx,ebx
c0010a1b:	74 14                	je     c0010a31 <sysCallUnlink(regs*)+0x4e>
c0010a1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a21:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a23:	83 ec 0c             	sub    esp,0xc
c0010a26:	53                   	push   ebx
c0010a27:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010a2a:	83 c4 10             	add    esp,0x10
c0010a2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a31:	85 c0                	test   eax,eax
c0010a33:	0f 95 c0             	setne  al
c0010a36:	31 d2                	xor    edx,edx
c0010a38:	25 ff 00 00 00       	and    eax,0xff
c0010a3d:	f7 d8                	neg    eax
c0010a3f:	83 d2 00             	adc    edx,0x0
c0010a42:	83 c4 14             	add    esp,0x14
c0010a45:	f7 da                	neg    edx
c0010a47:	5b                   	pop    ebx
c0010a48:	5e                   	pop    esi
c0010a49:	c3                   	ret    

c0010a4a <sysCallGetArgv(regs*)>:
c0010a4a:	83 ec 0c             	sub    esp,0xc
c0010a4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a51:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010a54:	85 c0                	test   eax,eax
c0010a56:	78 2c                	js     c0010a84 <sysCallGetArgv(regs*)+0x3a>
c0010a58:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010a5e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010a61:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010a67:	7d 1b                	jge    c0010a84 <sysCallGetArgv(regs*)+0x3a>
c0010a69:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010a70:	85 c0                	test   eax,eax
c0010a72:	74 18                	je     c0010a8c <sysCallGetArgv(regs*)+0x42>
c0010a74:	83 ec 08             	sub    esp,0x8
c0010a77:	50                   	push   eax
c0010a78:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010a7b:	50                   	push   eax
c0010a7c:	e8 9f fb fe ff       	call   c0000620 <strcpy>
c0010a81:	83 c4 10             	add    esp,0x10
c0010a84:	31 c0                	xor    eax,eax
c0010a86:	31 d2                	xor    edx,edx
c0010a88:	83 c4 0c             	add    esp,0xc
c0010a8b:	c3                   	ret    
c0010a8c:	b8 01 00 00 00       	mov    eax,0x1
c0010a91:	31 d2                	xor    edx,edx
c0010a93:	83 c4 0c             	add    esp,0xc
c0010a96:	c3                   	ret    

c0010a97 <sysCallUSleep(regs*)>:
c0010a97:	83 ec 1c             	sub    esp,0x1c
c0010a9a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a9e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010aa1:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010aa4:	6a 00                	push   0x0
c0010aa6:	6a 64                	push   0x64
c0010aa8:	52                   	push   edx
c0010aa9:	50                   	push   eax
c0010aaa:	e8 31 ad 00 00       	call   c001b7e0 <__udivdi3>
c0010aaf:	83 c4 14             	add    esp,0x14
c0010ab2:	50                   	push   eax
c0010ab3:	e8 c8 22 00 00       	call   c0012d80 <milliTenthSleep(unsigned int)>
c0010ab8:	31 c0                	xor    eax,eax
c0010aba:	31 d2                	xor    edx,edx
c0010abc:	83 c4 1c             	add    esp,0x1c
c0010abf:	c3                   	ret    

c0010ac0 <sysCallSpawn(regs*)>:
c0010ac0:	56                   	push   esi
c0010ac1:	53                   	push   ebx
c0010ac2:	50                   	push   eax
c0010ac3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ac7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010aca:	85 c0                	test   eax,eax
c0010acc:	75 08                	jne    c0010ad6 <sysCallSpawn(regs*)+0x16>
c0010ace:	59                   	pop    ecx
c0010acf:	31 c0                	xor    eax,eax
c0010ad1:	31 d2                	xor    edx,edx
c0010ad3:	5b                   	pop    ebx
c0010ad4:	5e                   	pop    esi
c0010ad5:	c3                   	ret    
c0010ad6:	83 ec 0c             	sub    esp,0xc
c0010ad9:	68 1f 07 00 00       	push   0x71f
c0010ade:	e8 82 61 ff ff       	call   c0006c65 <malloc>
c0010ae3:	83 c4 10             	add    esp,0x10
c0010ae6:	89 c6                	mov    esi,eax
c0010ae8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010aeb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010aee:	85 c0                	test   eax,eax
c0010af0:	75 33                	jne    c0010b25 <sysCallSpawn(regs*)+0x65>
c0010af2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010af7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010afa:	52                   	push   edx
c0010afb:	50                   	push   eax
c0010afc:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010aff:	53                   	push   ebx
c0010b00:	56                   	push   esi
c0010b01:	e8 5e 19 00 00       	call   c0012464 <Process::Process(char const*, Process*, char**)>
c0010b06:	83 c4 10             	add    esp,0x10
c0010b09:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010b10:	75 bc                	jne    c0010ace <sysCallSpawn(regs*)+0xe>
c0010b12:	83 ec 0c             	sub    esp,0xc
c0010b15:	56                   	push   esi
c0010b16:	e8 3d 1e 00 00       	call   c0012958 <Process::createUserThread()>
c0010b1b:	8b 06                	mov    eax,DWORD PTR [esi]
c0010b1d:	83 c4 10             	add    esp,0x10
c0010b20:	99                   	cdq    
c0010b21:	59                   	pop    ecx
c0010b22:	5b                   	pop    ebx
c0010b23:	5e                   	pop    esi
c0010b24:	c3                   	ret    
c0010b25:	31 c0                	xor    eax,eax
c0010b27:	eb d1                	jmp    c0010afa <sysCallSpawn(regs*)+0x3a>

c0010b29 <sysCallGetEnv(regs*)>:
c0010b29:	57                   	push   edi
c0010b2a:	56                   	push   esi
c0010b2b:	53                   	push   ebx
c0010b2c:	83 ec 1c             	sub    esp,0x1c
c0010b2f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b38:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010b3b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010b3e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b41:	50                   	push   eax
c0010b42:	e8 a6 e9 ff ff       	call   c000f4ed <Krnl::getProcessTotalEnvCount(Process*)>
c0010b47:	83 c4 10             	add    esp,0x10
c0010b4a:	39 c7                	cmp    edi,eax
c0010b4c:	7c 14                	jl     c0010b62 <sysCallGetEnv(regs*)+0x39>
c0010b4e:	85 f6                	test   esi,esi
c0010b50:	75 0b                	jne    c0010b5d <sysCallGetEnv(regs*)+0x34>
c0010b52:	83 c4 10             	add    esp,0x10
c0010b55:	31 c0                	xor    eax,eax
c0010b57:	5b                   	pop    ebx
c0010b58:	31 d2                	xor    edx,edx
c0010b5a:	5e                   	pop    esi
c0010b5b:	5f                   	pop    edi
c0010b5c:	c3                   	ret    
c0010b5d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010b60:	eb f0                	jmp    c0010b52 <sysCallGetEnv(regs*)+0x29>
c0010b62:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010b66:	52                   	push   edx
c0010b67:	57                   	push   edi
c0010b68:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010b6e:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010b71:	51                   	push   ecx
c0010b72:	50                   	push   eax
c0010b73:	e8 95 e9 ff ff       	call   c000f50d <Krnl::getProcessEnvPair(Process*, int)>
c0010b78:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010b7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b7f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010b83:	83 c4 0c             	add    esp,0xc
c0010b86:	85 db                	test   ebx,ebx
c0010b88:	75 23                	jne    c0010bad <sysCallGetEnv(regs*)+0x84>
c0010b8a:	83 ec 0c             	sub    esp,0xc
c0010b8d:	50                   	push   eax
c0010b8e:	e8 cd f9 fe ff       	call   c0000560 <strlen>
c0010b93:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b96:	89 c3                	mov    ebx,eax
c0010b98:	e8 c3 f9 fe ff       	call   c0000560 <strlen>
c0010b9d:	31 d2                	xor    edx,edx
c0010b9f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010ba3:	83 c4 10             	add    esp,0x10
c0010ba6:	83 c4 10             	add    esp,0x10
c0010ba9:	5b                   	pop    ebx
c0010baa:	5e                   	pop    esi
c0010bab:	5f                   	pop    edi
c0010bac:	c3                   	ret    
c0010bad:	83 ec 08             	sub    esp,0x8
c0010bb0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010bb3:	50                   	push   eax
c0010bb4:	56                   	push   esi
c0010bb5:	e8 66 fa fe ff       	call   c0000620 <strcpy>
c0010bba:	58                   	pop    eax
c0010bbb:	5a                   	pop    edx
c0010bbc:	68 77 e0 01 c0       	push   0xc001e077
c0010bc1:	56                   	push   esi
c0010bc2:	e8 19 fc fe ff       	call   c00007e0 <strcat>
c0010bc7:	59                   	pop    ecx
c0010bc8:	5b                   	pop    ebx
c0010bc9:	57                   	push   edi
c0010bca:	56                   	push   esi
c0010bcb:	e8 10 fc fe ff       	call   c00007e0 <strcat>
c0010bd0:	83 c4 10             	add    esp,0x10
c0010bd3:	e9 7a ff ff ff       	jmp    c0010b52 <sysCallGetEnv(regs*)+0x29>

c0010bd8 <sysSetFatAttrib(regs*)>:
c0010bd8:	57                   	push   edi
c0010bd9:	56                   	push   esi
c0010bda:	53                   	push   ebx
c0010bdb:	83 ec 1c             	sub    esp,0x1c
c0010bde:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010be2:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010be5:	68 14 01 00 00       	push   0x114
c0010bea:	e8 76 60 ff ff       	call   c0006c65 <malloc>
c0010bef:	83 c4 0c             	add    esp,0xc
c0010bf2:	89 c3                	mov    ebx,eax
c0010bf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bf9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bfc:	50                   	push   eax
c0010bfd:	57                   	push   edi
c0010bfe:	53                   	push   ebx
c0010bff:	e8 9a 93 ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c0010c04:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010c07:	83 c4 0c             	add    esp,0xc
c0010c0a:	0f b6 d4             	movzx  edx,ah
c0010c0d:	25 ff 00 00 00       	and    eax,0xff
c0010c12:	52                   	push   edx
c0010c13:	50                   	push   eax
c0010c14:	53                   	push   ebx
c0010c15:	e8 56 96 ff ff       	call   c000a270 <File::chfatattr(unsigned char, unsigned char)>
c0010c1a:	83 c4 10             	add    esp,0x10
c0010c1d:	85 db                	test   ebx,ebx
c0010c1f:	74 14                	je     c0010c35 <sysSetFatAttrib(regs*)+0x5d>
c0010c21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c25:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010c27:	83 ec 0c             	sub    esp,0xc
c0010c2a:	53                   	push   ebx
c0010c2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010c2e:	83 c4 10             	add    esp,0x10
c0010c31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c35:	85 c0                	test   eax,eax
c0010c37:	0f 95 c0             	setne  al
c0010c3a:	31 d2                	xor    edx,edx
c0010c3c:	25 ff 00 00 00       	and    eax,0xff
c0010c41:	f7 d8                	neg    eax
c0010c43:	83 d2 00             	adc    edx,0x0
c0010c46:	83 c4 10             	add    esp,0x10
c0010c49:	f7 da                	neg    edx
c0010c4b:	5b                   	pop    ebx
c0010c4c:	5e                   	pop    esi
c0010c4d:	5f                   	pop    edi
c0010c4e:	c3                   	ret    

c0010c4f <sysPipe(regs*)>:
c0010c4f:	57                   	push   edi
c0010c50:	56                   	push   esi
c0010c51:	53                   	push   ebx
c0010c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c56:	83 ec 0c             	sub    esp,0xc
c0010c59:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010c5c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010c5f:	6a 20                	push   0x20
c0010c61:	e8 ff 5f ff ff       	call   c0006c65 <malloc>
c0010c66:	89 c3                	mov    ebx,eax
c0010c68:	58                   	pop    eax
c0010c69:	5a                   	pop    edx
c0010c6a:	68 00 50 00 00       	push   0x5000
c0010c6f:	53                   	push   ebx
c0010c70:	e8 e7 69 ff ff       	call   c000765c <Pipe::Pipe(int)>
c0010c75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c78:	e8 d9 76 ff ff       	call   c0008356 <UnixFile::getFileDescriptor()>
c0010c7d:	89 07                	mov    DWORD PTR [edi],eax
c0010c7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c82:	e8 cf 76 ff ff       	call   c0008356 <UnixFile::getFileDescriptor()>
c0010c87:	83 c4 10             	add    esp,0x10
c0010c8a:	89 06                	mov    DWORD PTR [esi],eax
c0010c8c:	31 d2                	xor    edx,edx
c0010c8e:	5b                   	pop    ebx
c0010c8f:	31 c0                	xor    eax,eax
c0010c91:	5e                   	pop    esi
c0010c92:	5f                   	pop    edi
c0010c93:	c3                   	ret    

c0010c94 <sysGetUnixTime(regs*)>:
c0010c94:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0010c99:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010c9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ca3:	e9 06 9d ff ff       	jmp    c000a9ae <Clock::timeInSecondsLocal()>

c0010ca8 <string_ends_with(char const*, char const*)>:
c0010ca8:	57                   	push   edi
c0010ca9:	56                   	push   esi
c0010caa:	53                   	push   ebx
c0010cab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010caf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010cb3:	83 ec 0c             	sub    esp,0xc
c0010cb6:	53                   	push   ebx
c0010cb7:	e8 a4 f8 fe ff       	call   c0000560 <strlen>
c0010cbc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cbf:	89 c6                	mov    esi,eax
c0010cc1:	e8 9a f8 fe ff       	call   c0000560 <strlen>
c0010cc6:	83 c4 10             	add    esp,0x10
c0010cc9:	39 c6                	cmp    esi,eax
c0010ccb:	7d 06                	jge    c0010cd3 <string_ends_with(char const*, char const*)+0x2b>
c0010ccd:	5b                   	pop    ebx
c0010cce:	31 c0                	xor    eax,eax
c0010cd0:	5e                   	pop    esi
c0010cd1:	5f                   	pop    edi
c0010cd2:	c3                   	ret    
c0010cd3:	83 ec 08             	sub    esp,0x8
c0010cd6:	29 c6                	sub    esi,eax
c0010cd8:	57                   	push   edi
c0010cd9:	01 f3                	add    ebx,esi
c0010cdb:	53                   	push   ebx
c0010cdc:	e8 1f fa fe ff       	call   c0000700 <strcmp>
c0010ce1:	83 c4 10             	add    esp,0x10
c0010ce4:	85 c0                	test   eax,eax
c0010ce6:	5b                   	pop    ebx
c0010ce7:	0f 94 c0             	sete   al
c0010cea:	5e                   	pop    esi
c0010ceb:	25 ff 00 00 00       	and    eax,0xff
c0010cf0:	5f                   	pop    edi
c0010cf1:	c3                   	ret    

c0010cf2 <sysCallOpen(regs*)>:
c0010cf2:	56                   	push   esi
c0010cf3:	53                   	push   ebx
c0010cf4:	81 ec 04 01 00 00    	sub    esp,0x104
c0010cfa:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010d01:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010d04:	85 c9                	test   ecx,ecx
c0010d06:	0f 84 b9 01 00 00    	je     c0010ec5 <sysCallOpen(regs*)+0x1d3>
c0010d0c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d0f:	85 c0                	test   eax,eax
c0010d11:	0f 84 ae 01 00 00    	je     c0010ec5 <sysCallOpen(regs*)+0x1d3>
c0010d17:	52                   	push   edx
c0010d18:	68 79 e0 01 c0       	push   0xc001e079
c0010d1d:	50                   	push   eax
c0010d1e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010d22:	56                   	push   esi
c0010d23:	e8 cc 90 ff ff       	call   c0009df4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010d28:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d2b:	e8 30 f8 fe ff       	call   c0000560 <strlen>
c0010d30:	83 c4 10             	add    esp,0x10
c0010d33:	48                   	dec    eax
c0010d34:	74 1d                	je     c0010d53 <sysCallOpen(regs*)+0x61>
c0010d36:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010d39:	eb 0f                	jmp    c0010d4a <sysCallOpen(regs*)+0x58>
c0010d3b:	80 fa 3a             	cmp    dl,0x3a
c0010d3e:	74 0f                	je     c0010d4f <sysCallOpen(regs*)+0x5d>
c0010d40:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010d44:	48                   	dec    eax
c0010d45:	74 0c                	je     c0010d53 <sysCallOpen(regs*)+0x61>
c0010d47:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010d4a:	80 fa 2e             	cmp    dl,0x2e
c0010d4d:	75 ec                	jne    c0010d3b <sysCallOpen(regs*)+0x49>
c0010d4f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010d53:	83 ec 08             	sub    esp,0x8
c0010d56:	68 7d e0 01 c0       	push   0xc001e07d
c0010d5b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d5e:	50                   	push   eax
c0010d5f:	e8 44 ff ff ff       	call   c0010ca8 <string_ends_with(char const*, char const*)>
c0010d64:	83 c4 10             	add    esp,0x10
c0010d67:	85 c0                	test   eax,eax
c0010d69:	74 1d                	je     c0010d88 <sysCallOpen(regs*)+0x96>
c0010d6b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d6e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010d74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d7b:	81 c4 04 01 00 00    	add    esp,0x104
c0010d81:	31 c0                	xor    eax,eax
c0010d83:	31 d2                	xor    edx,edx
c0010d85:	5b                   	pop    ebx
c0010d86:	5e                   	pop    esi
c0010d87:	c3                   	ret    
c0010d88:	83 ec 08             	sub    esp,0x8
c0010d8b:	68 82 e0 01 c0       	push   0xc001e082
c0010d90:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d93:	50                   	push   eax
c0010d94:	e8 0f ff ff ff       	call   c0010ca8 <string_ends_with(char const*, char const*)>
c0010d99:	83 c4 10             	add    esp,0x10
c0010d9c:	85 c0                	test   eax,eax
c0010d9e:	75 cb                	jne    c0010d6b <sysCallOpen(regs*)+0x79>
c0010da0:	83 ec 08             	sub    esp,0x8
c0010da3:	68 7e e0 01 c0       	push   0xc001e07e
c0010da8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010dab:	50                   	push   eax
c0010dac:	e8 4f f9 fe ff       	call   c0000700 <strcmp>
c0010db1:	83 c4 10             	add    esp,0x10
c0010db4:	85 c0                	test   eax,eax
c0010db6:	74 b3                	je     c0010d6b <sysCallOpen(regs*)+0x79>
c0010db8:	83 ec 08             	sub    esp,0x8
c0010dbb:	68 7d e0 01 c0       	push   0xc001e07d
c0010dc0:	56                   	push   esi
c0010dc1:	e8 e2 fe ff ff       	call   c0010ca8 <string_ends_with(char const*, char const*)>
c0010dc6:	83 c4 10             	add    esp,0x10
c0010dc9:	85 c0                	test   eax,eax
c0010dcb:	75 9e                	jne    c0010d6b <sysCallOpen(regs*)+0x79>
c0010dcd:	83 ec 08             	sub    esp,0x8
c0010dd0:	68 87 e0 01 c0       	push   0xc001e087
c0010dd5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010dd8:	50                   	push   eax
c0010dd9:	e8 ca fe ff ff       	call   c0010ca8 <string_ends_with(char const*, char const*)>
c0010dde:	83 c4 10             	add    esp,0x10
c0010de1:	85 c0                	test   eax,eax
c0010de3:	0f 85 ef 00 00 00    	jne    c0010ed8 <sysCallOpen(regs*)+0x1e6>
c0010de9:	83 ec 08             	sub    esp,0x8
c0010dec:	68 8c e0 01 c0       	push   0xc001e08c
c0010df1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010df4:	50                   	push   eax
c0010df5:	e8 ae fe ff ff       	call   c0010ca8 <string_ends_with(char const*, char const*)>
c0010dfa:	83 c4 10             	add    esp,0x10
c0010dfd:	85 c0                	test   eax,eax
c0010dff:	0f 85 d3 00 00 00    	jne    c0010ed8 <sysCallOpen(regs*)+0x1e6>
c0010e05:	83 ec 08             	sub    esp,0x8
c0010e08:	68 88 e0 01 c0       	push   0xc001e088
c0010e0d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010e10:	51                   	push   ecx
c0010e11:	e8 ea f8 fe ff       	call   c0000700 <strcmp>
c0010e16:	83 c4 10             	add    esp,0x10
c0010e19:	85 c0                	test   eax,eax
c0010e1b:	0f 84 b7 00 00 00    	je     c0010ed8 <sysCallOpen(regs*)+0x1e6>
c0010e21:	83 ec 08             	sub    esp,0x8
c0010e24:	68 87 e0 01 c0       	push   0xc001e087
c0010e29:	56                   	push   esi
c0010e2a:	e8 79 fe ff ff       	call   c0010ca8 <string_ends_with(char const*, char const*)>
c0010e2f:	83 c4 10             	add    esp,0x10
c0010e32:	85 c0                	test   eax,eax
c0010e34:	0f 85 9e 00 00 00    	jne    c0010ed8 <sysCallOpen(regs*)+0x1e6>
c0010e3a:	83 ec 0c             	sub    esp,0xc
c0010e3d:	68 14 01 00 00       	push   0x114
c0010e42:	e8 1e 5e ff ff       	call   c0006c65 <malloc>
c0010e47:	83 c4 0c             	add    esp,0xc
c0010e4a:	89 c6                	mov    esi,eax
c0010e4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e51:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e54:	50                   	push   eax
c0010e55:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010e58:	52                   	push   edx
c0010e59:	56                   	push   esi
c0010e5a:	e8 3f 91 ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c0010e5f:	83 c4 10             	add    esp,0x10
c0010e62:	85 f6                	test   esi,esi
c0010e64:	74 5f                	je     c0010ec5 <sysCallOpen(regs*)+0x1d3>
c0010e66:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010e69:	89 d0                	mov    eax,edx
c0010e6b:	25 ff 00 00 00       	and    eax,0xff
c0010e70:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010e73:	89 d0                	mov    eax,edx
c0010e75:	83 e0 01             	and    eax,0x1
c0010e78:	f6 c2 02             	test   dl,0x2
c0010e7b:	74 03                	je     c0010e80 <sysCallOpen(regs*)+0x18e>
c0010e7d:	83 c8 02             	or     eax,0x2
c0010e80:	f6 c2 04             	test   dl,0x4
c0010e83:	74 03                	je     c0010e88 <sysCallOpen(regs*)+0x196>
c0010e85:	83 c8 04             	or     eax,0x4
c0010e88:	f6 c2 08             	test   dl,0x8
c0010e8b:	74 03                	je     c0010e90 <sysCallOpen(regs*)+0x19e>
c0010e8d:	83 c8 0a             	or     eax,0xa
c0010e90:	83 e2 10             	and    edx,0x10
c0010e93:	74 03                	je     c0010e98 <sysCallOpen(regs*)+0x1a6>
c0010e95:	83 c8 12             	or     eax,0x12
c0010e98:	83 ec 08             	sub    esp,0x8
c0010e9b:	50                   	push   eax
c0010e9c:	56                   	push   esi
c0010e9d:	e8 bc 91 ff ff       	call   c000a05e <File::open(FileOpenMode)>
c0010ea2:	83 c4 10             	add    esp,0x10
c0010ea5:	85 c0                	test   eax,eax
c0010ea7:	75 1c                	jne    c0010ec5 <sysCallOpen(regs*)+0x1d3>
c0010ea9:	83 ec 0c             	sub    esp,0xc
c0010eac:	56                   	push   esi
c0010ead:	e8 a4 74 ff ff       	call   c0008356 <UnixFile::getFileDescriptor()>
c0010eb2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010eb5:	83 c4 10             	add    esp,0x10
c0010eb8:	89 02                	mov    DWORD PTR [edx],eax
c0010eba:	c1 f8 1f             	sar    eax,0x1f
c0010ebd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010ec0:	e9 b6 fe ff ff       	jmp    c0010d7b <sysCallOpen(regs*)+0x89>
c0010ec5:	81 c4 04 01 00 00    	add    esp,0x104
c0010ecb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ed0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ed5:	5b                   	pop    ebx
c0010ed6:	5e                   	pop    esi
c0010ed7:	c3                   	ret    
c0010ed8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010edb:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010ee1:	e9 8e fe ff ff       	jmp    c0010d74 <sysCallOpen(regs*)+0x82>

c0010ee6 <Sys::loadSyscalls()>:
c0010ee6:	c7 05 20 21 02 c0 c2 02 01 c0 	mov    DWORD PTR ds:0xc0022120,0xc00102c2
c0010ef0:	c7 05 24 21 02 c0 b9 fe 00 c0 	mov    DWORD PTR ds:0xc0022124,0xc000feb9
c0010efa:	c7 05 28 21 02 c0 a8 00 01 c0 	mov    DWORD PTR ds:0xc0022128,0xc00100a8
c0010f04:	c7 05 2c 21 02 c0 f8 01 01 c0 	mov    DWORD PTR ds:0xc002212c,0xc00101f8
c0010f0e:	c7 05 30 21 02 c0 40 00 01 c0 	mov    DWORD PTR ds:0xc0022130,0xc0010040
c0010f18:	c7 05 34 21 02 c0 f0 fe 00 c0 	mov    DWORD PTR ds:0xc0022134,0xc000fef0
c0010f22:	c7 05 38 21 02 c0 d1 fe 00 c0 	mov    DWORD PTR ds:0xc0022138,0xc000fed1
c0010f2c:	c7 05 3c 21 02 c0 fd 00 01 c0 	mov    DWORD PTR ds:0xc002213c,0xc00100fd
c0010f36:	c7 05 44 21 02 c0 8c 07 01 c0 	mov    DWORD PTR ds:0xc0022144,0xc001078c
c0010f40:	c7 05 40 21 02 c0 f2 0c 01 c0 	mov    DWORD PTR ds:0xc0022140,0xc0010cf2
c0010f4a:	c7 05 48 21 02 c0 ec 07 01 c0 	mov    DWORD PTR ds:0xc0022148,0xc00107ec
c0010f54:	c7 05 4c 21 02 c0 c0 04 01 c0 	mov    DWORD PTR ds:0xc002214c,0xc00104c0
c0010f5e:	c7 05 50 21 02 c0 e7 02 01 c0 	mov    DWORD PTR ds:0xc0022150,0xc00102e7
c0010f68:	c7 05 54 21 02 c0 ec 02 01 c0 	mov    DWORD PTR ds:0xc0022154,0xc00102ec
c0010f72:	c7 05 58 21 02 c0 b7 08 01 c0 	mov    DWORD PTR ds:0xc0022158,0xc00108b7
c0010f7c:	c7 05 5c 21 02 c0 63 08 01 c0 	mov    DWORD PTR ds:0xc002215c,0xc0010863
c0010f86:	c7 05 60 21 02 c0 9c 05 01 c0 	mov    DWORD PTR ds:0xc0022160,0xc001059c
c0010f90:	c7 05 64 21 02 c0 f5 05 01 c0 	mov    DWORD PTR ds:0xc0022164,0xc00105f5
c0010f9a:	c7 05 68 21 02 c0 64 06 01 c0 	mov    DWORD PTR ds:0xc0022168,0xc0010664
c0010fa4:	c7 05 6c 21 02 c0 f1 02 01 c0 	mov    DWORD PTR ds:0xc002216c,0xc00102f1
c0010fae:	c7 05 70 21 02 c0 29 09 01 c0 	mov    DWORD PTR ds:0xc0022170,0xc0010929
c0010fb8:	c7 05 74 21 02 c0 46 09 01 c0 	mov    DWORD PTR ds:0xc0022174,0xc0010946
c0010fc2:	c7 05 78 21 02 c0 46 09 01 c0 	mov    DWORD PTR ds:0xc0022178,0xc0010946
c0010fcc:	c7 05 7c 21 02 c0 7c 09 01 c0 	mov    DWORD PTR ds:0xc002217c,0xc001097c
c0010fd6:	c7 05 80 21 02 c0 e3 09 01 c0 	mov    DWORD PTR ds:0xc0022180,0xc00109e3
c0010fe0:	c7 05 84 21 02 c0 fb 02 01 c0 	mov    DWORD PTR ds:0xc0022184,0xc00102fb
c0010fea:	c7 05 88 21 02 c0 4a 0a 01 c0 	mov    DWORD PTR ds:0xc0022188,0xc0010a4a
c0010ff4:	c7 05 8c 21 02 c0 7d 04 01 c0 	mov    DWORD PTR ds:0xc002218c,0xc001047d
c0010ffe:	c7 05 90 21 02 c0 0b 03 01 c0 	mov    DWORD PTR ds:0xc0022190,0xc001030b
c0011008:	c7 05 94 21 02 c0 40 05 01 c0 	mov    DWORD PTR ds:0xc0022194,0xc0010540
c0011012:	c7 05 98 21 02 c0 97 0a 01 c0 	mov    DWORD PTR ds:0xc0022198,0xc0010a97
c001101c:	c7 05 9c 21 02 c0 d9 06 01 c0 	mov    DWORD PTR ds:0xc002219c,0xc00106d9
c0011026:	c7 05 a0 21 02 c0 c0 0a 01 c0 	mov    DWORD PTR ds:0xc00221a0,0xc0010ac0
c0011030:	c7 05 a4 21 02 c0 29 0b 01 c0 	mov    DWORD PTR ds:0xc00221a4,0xc0010b29
c001103a:	c7 05 ac 21 02 c0 13 03 01 c0 	mov    DWORD PTR ds:0xc00221ac,0xc0010313
c0011044:	c7 05 b0 21 02 c0 80 03 01 c0 	mov    DWORD PTR ds:0xc00221b0,0xc0010380
c001104e:	c7 05 b4 21 02 c0 ca 03 01 c0 	mov    DWORD PTR ds:0xc00221b4,0xc00103ca
c0011058:	c7 05 b8 21 02 c0 d8 0b 01 c0 	mov    DWORD PTR ds:0xc00221b8,0xc0010bd8
c0011062:	c7 05 bc 21 02 c0 61 09 01 c0 	mov    DWORD PTR ds:0xc00221bc,0xc0010961
c001106c:	c7 05 c0 21 02 c0 1f 04 01 c0 	mov    DWORD PTR ds:0xc00221c0,0xc001041f
c0011076:	c7 05 c4 21 02 c0 4f 0c 01 c0 	mov    DWORD PTR ds:0xc00221c4,0xc0010c4f
c0011080:	c7 05 c8 21 02 c0 94 0c 01 c0 	mov    DWORD PTR ds:0xc00221c8,0xc0010c94
c001108a:	c7 05 cc 21 02 c0 98 ff 00 c0 	mov    DWORD PTR ds:0xc00221cc,0xc000ff98
c0011094:	c7 05 d0 21 02 c0 19 01 01 c0 	mov    DWORD PTR ds:0xc00221d0,0xc0010119
c001109e:	c7 05 d4 21 02 c0 ae 01 01 c0 	mov    DWORD PTR ds:0xc00221d4,0xc00101ae
c00110a8:	c7 05 d8 21 02 c0 83 fe 00 c0 	mov    DWORD PTR ds:0xc00221d8,0xc000fe83
c00110b2:	c7 05 dc 21 02 c0 60 02 01 c0 	mov    DWORD PTR ds:0xc00221dc,0xc0010260
c00110bc:	c7 05 e0 21 02 c0 fc fe 00 c0 	mov    DWORD PTR ds:0xc00221e0,0xc000fefc
c00110c6:	c7 05 e4 21 02 c0 16 ff 00 c0 	mov    DWORD PTR ds:0xc00221e4,0xc000ff16
c00110d0:	c3                   	ret    

c00110d1 <Sys::systemCall(regs*, void*)>:
c00110d1:	53                   	push   ebx
c00110d2:	83 ec 08             	sub    esp,0x8
c00110d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00110dc:	83 f8 7f             	cmp    eax,0x7f
c00110df:	77 16                	ja     c00110f7 <Sys::systemCall(regs*, void*)+0x26>
c00110e1:	8b 14 85 20 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddee0]
c00110e8:	85 d2                	test   edx,edx
c00110ea:	74 0b                	je     c00110f7 <Sys::systemCall(regs*, void*)+0x26>
c00110ec:	83 ec 0c             	sub    esp,0xc
c00110ef:	53                   	push   ebx
c00110f0:	ff d2                	call   edx
c00110f2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00110f5:	eb 0d                	jmp    c0011104 <Sys::systemCall(regs*, void*)+0x33>
c00110f7:	52                   	push   edx
c00110f8:	52                   	push   edx
c00110f9:	50                   	push   eax
c00110fa:	68 91 e0 01 c0       	push   0xc001e091
c00110ff:	e8 24 89 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0011104:	83 c4 10             	add    esp,0x10
c0011107:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001110c:	31 d2                	xor    edx,edx
c001110e:	83 c4 08             	add    esp,0x8
c0011111:	5b                   	pop    ebx
c0011112:	c3                   	ret    

c0011113 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011113:	55                   	push   ebp
c0011114:	57                   	push   edi
c0011115:	56                   	push   esi
c0011116:	53                   	push   ebx
c0011117:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001111d:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011125:	0f 95 c2             	setne  dl
c0011128:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011130:	0f 94 c0             	sete   al
c0011133:	84 c2                	test   dl,al
c0011135:	74 34                	je     c001116b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011137:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011142:	74 27                	je     c001116b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011144:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001114b:	05 00 10 00 00       	add    eax,0x1000
c0011150:	89 c1                	mov    ecx,eax
c0011152:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011157:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001115d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011164:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001116b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011172:	83 ec 0c             	sub    esp,0xc
c0011175:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001117b:	6a 01                	push   0x1
c001117d:	e8 1f 76 ff ff       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c0011182:	83 c4 10             	add    esp,0x10
c0011185:	89 c3                	mov    ebx,eax
c0011187:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001118d:	0f 86 25 01 00 00    	jbe    c00112b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011193:	c1 ee 0c             	shr    esi,0xc
c0011196:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001119d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00111a1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111a9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00111b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00111b4:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00111bb:	29 ef                	sub    edi,ebp
c00111bd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00111c1:	0f 83 f8 00 00 00    	jae    c00112bf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c00111c7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00111cd:	76 05                	jbe    c00111d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c00111cf:	bf 00 10 00 00       	mov    edi,0x1000
c00111d4:	83 ec 0c             	sub    esp,0xc
c00111d7:	31 d2                	xor    edx,edx
c00111d9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00111e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00111e2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00111e6:	50                   	push   eax
c00111e7:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111eb:	56                   	push   esi
c00111ec:	52                   	push   edx
c00111ed:	57                   	push   edi
c00111ee:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00111f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00111f8:	83 c4 20             	add    esp,0x20
c00111fb:	85 c0                	test   eax,eax
c00111fd:	75 06                	jne    c0011205 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c00111ff:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011203:	74 13                	je     c0011218 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011205:	83 ec 0c             	sub    esp,0xc
c0011208:	53                   	push   ebx
c0011209:	e8 87 78 ff ff       	call   c0008a95 <Virt::freeKernelVirtualPages(unsigned long)>
c001120e:	83 c4 10             	add    esp,0x10
c0011211:	31 c0                	xor    eax,eax
c0011213:	e9 7c 01 00 00       	jmp    c0011394 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011218:	fa                   	cli    
c0011219:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c001121f:	e8 0e 5e ff ff       	call   c0007032 <Phys::allocatePage()>
c0011224:	6a 07                	push   0x7
c0011226:	89 c7                	mov    edi,eax
c0011228:	53                   	push   ebx
c0011229:	50                   	push   eax
c001122a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001122f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011232:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011238:	e8 bd 7b ff ff       	call   c0008dfa <VAS::mapPage(unsigned long, unsigned long, int)>
c001123d:	83 c4 0c             	add    esp,0xc
c0011240:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011247:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001124d:	6a 00                	push   0x0
c001124f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011254:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011257:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001125d:	e8 0a 7a ff ff       	call   c0008c6c <VAS::mapOtherVASIn(bool, VAS*)>
c0011262:	58                   	pop    eax
c0011263:	5a                   	pop    edx
c0011264:	68 07 0c 00 00       	push   0xc07
c0011269:	55                   	push   ebp
c001126a:	57                   	push   edi
c001126b:	89 df                	mov    edi,ebx
c001126d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011274:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001127a:	6a 00                	push   0x0
c001127c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011281:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011284:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001128a:	e8 2b 7f ff ff       	call   c00091ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001128f:	b9 00 10 00 00       	mov    ecx,0x1000
c0011294:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011296:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c001129b:	83 c4 20             	add    esp,0x20
c001129e:	48                   	dec    eax
c001129f:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c00112a4:	85 c0                	test   eax,eax
c00112a6:	75 01                	jne    c00112a9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c00112a8:	fb                   	sti    
c00112a9:	81 c5 00 10 00 00    	add    ebp,0x1000
c00112af:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00112b3:	e9 f1 fe ff ff       	jmp    c00111a9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c00112b8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00112bf:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00112c6:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00112cc:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00112d2:	0f 86 ae 00 00 00    	jbe    c0011386 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00112d8:	fa                   	cli    
c00112d9:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c00112df:	c1 ee 0c             	shr    esi,0xc
c00112e2:	51                   	push   ecx
c00112e3:	31 ff                	xor    edi,edi
c00112e5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00112ec:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00112f2:	6a 00                	push   0x0
c00112f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112fc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011302:	e8 65 79 ff ff       	call   c0008c6c <VAS::mapOtherVASIn(bool, VAS*)>
c0011307:	83 c4 10             	add    esp,0x10
c001130a:	e8 23 5d ff ff       	call   c0007032 <Phys::allocatePage()>
c001130f:	47                   	inc    edi
c0011310:	6a 07                	push   0x7
c0011312:	53                   	push   ebx
c0011313:	50                   	push   eax
c0011314:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011318:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001131e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011321:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011327:	e8 ce 7a ff ff       	call   c0008dfa <VAS::mapPage(unsigned long, unsigned long, int)>
c001132c:	58                   	pop    eax
c001132d:	5a                   	pop    edx
c001132e:	68 07 0c 00 00       	push   0xc07
c0011333:	55                   	push   ebp
c0011334:	81 c5 00 10 00 00    	add    ebp,0x1000
c001133a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001133e:	50                   	push   eax
c001133f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011346:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001134c:	6a 00                	push   0x0
c001134e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011353:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011356:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001135c:	e8 59 7e ff ff       	call   c00091ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011361:	83 c4 1c             	add    esp,0x1c
c0011364:	68 00 10 00 00       	push   0x1000
c0011369:	6a 00                	push   0x0
c001136b:	53                   	push   ebx
c001136c:	e8 7f f1 fe ff       	call   c00004f0 <memset>
c0011371:	83 c4 10             	add    esp,0x10
c0011374:	39 fe                	cmp    esi,edi
c0011376:	77 92                	ja     c001130a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011378:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c001137d:	48                   	dec    eax
c001137e:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0011383:	75 01                	jne    c0011386 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011385:	fb                   	sti    
c0011386:	83 ec 0c             	sub    esp,0xc
c0011389:	53                   	push   ebx
c001138a:	e8 06 77 ff ff       	call   c0008a95 <Virt::freeKernelVirtualPages(unsigned long)>
c001138f:	83 c4 10             	add    esp,0x10
c0011392:	b0 01                	mov    al,0x1
c0011394:	81 c4 2c 10 00 00    	add    esp,0x102c
c001139a:	5b                   	pop    ebx
c001139b:	5e                   	pop    esi
c001139c:	5f                   	pop    edi
c001139d:	5d                   	pop    ebp
c001139e:	c3                   	ret    

c001139f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001139f:	55                   	push   ebp
c00113a0:	57                   	push   edi
c00113a1:	56                   	push   esi
c00113a2:	53                   	push   ebx
c00113a3:	83 ec 48             	sub    esp,0x48
c00113a6:	68 14 01 00 00       	push   0x114
c00113ab:	e8 b5 58 ff ff       	call   c0006c65 <malloc>
c00113b0:	83 c4 0c             	add    esp,0xc
c00113b3:	89 c6                	mov    esi,eax
c00113b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00113b9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00113bd:	50                   	push   eax
c00113be:	e8 db 8b ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c00113c3:	58                   	pop    eax
c00113c4:	5a                   	pop    edx
c00113c5:	6a 01                	push   0x1
c00113c7:	56                   	push   esi
c00113c8:	e8 91 8c ff ff       	call   c000a05e <File::open(FileOpenMode)>
c00113cd:	83 c4 10             	add    esp,0x10
c00113d0:	85 c0                	test   eax,eax
c00113d2:	0f 85 47 01 00 00    	jne    c001151f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00113d8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00113e0:	83 ec 0c             	sub    esp,0xc
c00113e3:	6a 34                	push   0x34
c00113e5:	e8 7b 58 ff ff       	call   c0006c65 <malloc>
c00113ea:	89 c3                	mov    ebx,eax
c00113ec:	58                   	pop    eax
c00113ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00113ef:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00113f3:	57                   	push   edi
c00113f4:	53                   	push   ebx
c00113f5:	6a 00                	push   0x0
c00113f7:	6a 34                	push   0x34
c00113f9:	56                   	push   esi
c00113fa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00113fd:	83 c4 20             	add    esp,0x20
c0011400:	85 c0                	test   eax,eax
c0011402:	0f 85 17 01 00 00    	jne    c001151f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011408:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001140e:	0f 85 0b 01 00 00    	jne    c001151f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011414:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011417:	85 c0                	test   eax,eax
c0011419:	0f 84 00 01 00 00    	je     c001151f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001141f:	31 d2                	xor    edx,edx
c0011421:	55                   	push   ebp
c0011422:	52                   	push   edx
c0011423:	50                   	push   eax
c0011424:	56                   	push   esi
c0011425:	e8 f2 8c ff ff       	call   c000a11c <File::seek(unsigned long long)>
c001142a:	83 c4 10             	add    esp,0x10
c001142d:	85 c0                	test   eax,eax
c001142f:	0f 85 ea 00 00 00    	jne    c001151f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011435:	83 ec 0c             	sub    esp,0xc
c0011438:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001143b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001143f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011443:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011447:	0f af c2             	imul   eax,edx
c001144a:	50                   	push   eax
c001144b:	e8 15 58 ff ff       	call   c0006c65 <malloc>
c0011450:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011452:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011456:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011459:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001145d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011461:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011465:	0f af c2             	imul   eax,edx
c0011468:	99                   	cdq    
c0011469:	52                   	push   edx
c001146a:	50                   	push   eax
c001146b:	56                   	push   esi
c001146c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001146f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011472:	83 c4 20             	add    esp,0x20
c0011475:	85 c0                	test   eax,eax
c0011477:	0f 84 a2 00 00 00    	je     c001151f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001147d:	31 d2                	xor    edx,edx
c001147f:	51                   	push   ecx
c0011480:	52                   	push   edx
c0011481:	50                   	push   eax
c0011482:	56                   	push   esi
c0011483:	e8 94 8c ff ff       	call   c000a11c <File::seek(unsigned long long)>
c0011488:	83 c4 10             	add    esp,0x10
c001148b:	85 c0                	test   eax,eax
c001148d:	0f 85 8c 00 00 00    	jne    c001151f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011493:	83 ec 0c             	sub    esp,0xc
c0011496:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001149a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001149e:	31 ed                	xor    ebp,ebp
c00114a0:	0f af c2             	imul   eax,edx
c00114a3:	50                   	push   eax
c00114a4:	e8 bc 57 ff ff       	call   c0006c65 <malloc>
c00114a9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00114ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114af:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114b6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00114ba:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00114be:	0f af c2             	imul   eax,edx
c00114c1:	99                   	cdq    
c00114c2:	52                   	push   edx
c00114c3:	50                   	push   eax
c00114c4:	56                   	push   esi
c00114c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00114c8:	83 c4 20             	add    esp,0x20
c00114cb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00114d3:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00114d7:	0f 86 80 00 00 00    	jbe    c001155d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00114dd:	0f b7 fd             	movzx  edi,bp
c00114e0:	c1 e7 05             	shl    edi,0x5
c00114e3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00114e7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00114ea:	75 6b                	jne    c0011557 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00114ec:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00114ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00114f3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00114f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00114fa:	52                   	push   edx
c00114fb:	31 d2                	xor    edx,edx
c00114fd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011500:	52                   	push   edx
c0011501:	50                   	push   eax
c0011502:	56                   	push   esi
c0011503:	e8 14 8c ff ff       	call   c000a11c <File::seek(unsigned long long)>
c0011508:	83 c4 10             	add    esp,0x10
c001150b:	85 c0                	test   eax,eax
c001150d:	74 17                	je     c0011526 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001150f:	83 ec 0c             	sub    esp,0xc
c0011512:	68 a5 e0 01 c0       	push   0xc001e0a5
c0011517:	e8 0c 85 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001151c:	83 c4 10             	add    esp,0x10
c001151f:	31 c0                	xor    eax,eax
c0011521:	e9 87 00 00 00       	jmp    c00115ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0011526:	83 ec 0c             	sub    esp,0xc
c0011529:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001152c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001152f:	50                   	push   eax
c0011530:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011534:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011538:	56                   	push   esi
c0011539:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001153d:	e8 d1 fb ff ff       	call   c0011113 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011542:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011546:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001154a:	83 c4 20             	add    esp,0x20
c001154d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011551:	73 04                	jae    c0011557 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011553:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011557:	45                   	inc    ebp
c0011558:	e9 76 ff ff ff       	jmp    c00114d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001155d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011561:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011569:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001156f:	83 ec 0c             	sub    esp,0xc
c0011572:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011578:	25 00 f0 ff ff       	and    eax,0xfffff000
c001157d:	05 00 10 00 00       	add    eax,0x1000
c0011582:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011589:	e8 e7 56 ff ff       	call   c0006c75 <free>
c001158e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011591:	e8 df 56 ff ff       	call   c0006c75 <free>
c0011596:	58                   	pop    eax
c0011597:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001159b:	e8 d5 56 ff ff       	call   c0006c75 <free>
c00115a0:	89 34 24             	mov    DWORD PTR [esp],esi
c00115a3:	e8 14 8b ff ff       	call   c000a0bc <File::close()>
c00115a8:	83 c4 10             	add    esp,0x10
c00115ab:	b0 01                	mov    al,0x1
c00115ad:	83 c4 3c             	add    esp,0x3c
c00115b0:	5b                   	pop    ebx
c00115b1:	5e                   	pop    esi
c00115b2:	5f                   	pop    edi
c00115b3:	5d                   	pop    ebp
c00115b4:	c3                   	ret    

c00115b5 <Thr::runtimeReferenceHelper()>:
c00115b5:	83 ec 18             	sub    esp,0x18
c00115b8:	68 ad e0 01 c0       	push   0xc001e0ad
c00115bd:	e8 66 84 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00115c2:	fa                   	cli    
c00115c3:	83 c4 10             	add    esp,0x10
c00115c6:	eb fe                	jmp    c00115c6 <Thr::runtimeReferenceHelper()+0x11>

c00115c8 <Thr::getAddressOfKernelSymbol(char const*)>:
c00115c8:	57                   	push   edi
c00115c9:	56                   	push   esi
c00115ca:	53                   	push   ebx
c00115cb:	31 db                	xor    ebx,ebx
c00115cd:	39 1d c0 2a 02 c0    	cmp    DWORD PTR ds:0xc0022ac0,ebx
c00115d3:	7e 3c                	jle    c0011611 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00115d5:	8b 34 9d 40 2a 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdd5c0]
c00115dc:	31 ff                	xor    edi,edi
c00115de:	39 3c 9d 40 29 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdd6c0],edi
c00115e5:	7e 27                	jle    c001160e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00115e7:	50                   	push   eax
c00115e8:	50                   	push   eax
c00115e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00115ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00115ef:	03 04 9d c0 29 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdd640]
c00115f6:	50                   	push   eax
c00115f7:	e8 04 f1 fe ff       	call   c0000700 <strcmp>
c00115fc:	83 c4 10             	add    esp,0x10
c00115ff:	85 c0                	test   eax,eax
c0011601:	75 05                	jne    c0011608 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011603:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011606:	eb 0b                	jmp    c0011613 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0011608:	83 c6 10             	add    esi,0x10
c001160b:	47                   	inc    edi
c001160c:	eb d0                	jmp    c00115de <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001160e:	43                   	inc    ebx
c001160f:	eb bc                	jmp    c00115cd <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011611:	31 c0                	xor    eax,eax
c0011613:	5b                   	pop    ebx
c0011614:	5e                   	pop    esi
c0011615:	5f                   	pop    edi
c0011616:	c3                   	ret    

c0011617 <Thr::loadKernelSymbolTable(char const*)>:
c0011617:	55                   	push   ebp
c0011618:	57                   	push   edi
c0011619:	56                   	push   esi
c001161a:	53                   	push   ebx
c001161b:	83 ec 68             	sub    esp,0x68
c001161e:	8b 35 10 2b 02 c0    	mov    esi,DWORD PTR ds:0xc0022b10
c0011624:	68 14 01 00 00       	push   0x114
c0011629:	e8 37 56 ff ff       	call   c0006c65 <malloc>
c001162e:	83 c4 0c             	add    esp,0xc
c0011631:	89 c3                	mov    ebx,eax
c0011633:	56                   	push   esi
c0011634:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011638:	50                   	push   eax
c0011639:	e8 60 89 ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c001163e:	5e                   	pop    esi
c001163f:	5f                   	pop    edi
c0011640:	6a 01                	push   0x1
c0011642:	53                   	push   ebx
c0011643:	e8 16 8a ff ff       	call   c000a05e <File::open(FileOpenMode)>
c0011648:	83 c4 10             	add    esp,0x10
c001164b:	85 c0                	test   eax,eax
c001164d:	74 0a                	je     c0011659 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001164f:	83 ec 0c             	sub    esp,0xc
c0011652:	68 cf e0 01 c0       	push   0xc001e0cf
c0011657:	eb 34                	jmp    c001168d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011659:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011661:	83 ec 0c             	sub    esp,0xc
c0011664:	6a 34                	push   0x34
c0011666:	e8 fa 55 ff ff       	call   c0006c65 <malloc>
c001166b:	59                   	pop    ecx
c001166c:	89 c7                	mov    edi,eax
c001166e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011672:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011674:	56                   	push   esi
c0011675:	57                   	push   edi
c0011676:	6a 00                	push   0x0
c0011678:	6a 34                	push   0x34
c001167a:	53                   	push   ebx
c001167b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001167e:	83 c4 20             	add    esp,0x20
c0011681:	85 c0                	test   eax,eax
c0011683:	74 17                	je     c001169c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011685:	83 ec 0c             	sub    esp,0xc
c0011688:	68 e6 e0 01 c0       	push   0xc001e0e6
c001168d:	e8 0f df ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0011692:	83 c4 10             	add    esp,0x10
c0011695:	31 c0                	xor    eax,eax
c0011697:	e9 31 02 00 00       	jmp    c00118cd <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001169c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00116a2:	75 e1                	jne    c0011685 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00116a4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00116a7:	85 c0                	test   eax,eax
c00116a9:	74 da                	je     c0011685 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00116ab:	52                   	push   edx
c00116ac:	31 d2                	xor    edx,edx
c00116ae:	52                   	push   edx
c00116af:	50                   	push   eax
c00116b0:	53                   	push   ebx
c00116b1:	e8 66 8a ff ff       	call   c000a11c <File::seek(unsigned long long)>
c00116b6:	83 c4 10             	add    esp,0x10
c00116b9:	85 c0                	test   eax,eax
c00116bb:	75 c8                	jne    c0011685 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00116bd:	83 ec 0c             	sub    esp,0xc
c00116c0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00116c4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00116c8:	31 ed                	xor    ebp,ebp
c00116ca:	0f af c2             	imul   eax,edx
c00116cd:	50                   	push   eax
c00116ce:	e8 92 55 ff ff       	call   c0006c65 <malloc>
c00116d3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00116d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00116d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00116dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00116e0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00116e4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00116e8:	0f af c2             	imul   eax,edx
c00116eb:	99                   	cdq    
c00116ec:	52                   	push   edx
c00116ed:	50                   	push   eax
c00116ee:	53                   	push   ebx
c00116ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00116f2:	83 c4 20             	add    esp,0x20
c00116f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00116fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0011705:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001170d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011715:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0011719:	0f 86 aa 00 00 00    	jbe    c00117c9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001171f:	0f b7 f5             	movzx  esi,bp
c0011722:	6b f6 28             	imul   esi,esi,0x28
c0011725:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011729:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001172c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011730:	50                   	push   eax
c0011731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011735:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0011739:	8b 16                	mov    edx,DWORD PTR [esi]
c001173b:	6b c0 28             	imul   eax,eax,0x28
c001173e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0011742:	89 d0                	mov    eax,edx
c0011744:	31 d2                	xor    edx,edx
c0011746:	52                   	push   edx
c0011747:	50                   	push   eax
c0011748:	53                   	push   ebx
c0011749:	e8 ce 89 ff ff       	call   c000a11c <File::seek(unsigned long long)>
c001174e:	83 c4 0c             	add    esp,0xc
c0011751:	6a 20                	push   0x20
c0011753:	6a 00                	push   0x0
c0011755:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011759:	52                   	push   edx
c001175a:	e8 91 ed fe ff       	call   c00004f0 <memset>
c001175f:	58                   	pop    eax
c0011760:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011762:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0011766:	51                   	push   ecx
c0011767:	8d 54 24 40          	lea    edx,[esp+0x40]
c001176b:	52                   	push   edx
c001176c:	6a 00                	push   0x0
c001176e:	6a 1f                	push   0x1f
c0011770:	53                   	push   ebx
c0011771:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011774:	83 c4 18             	add    esp,0x18
c0011777:	68 fd e0 01 c0       	push   0xc001e0fd
c001177c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011780:	52                   	push   edx
c0011781:	e8 7a ef fe ff       	call   c0000700 <strcmp>
c0011786:	83 c4 10             	add    esp,0x10
c0011789:	85 c0                	test   eax,eax
c001178b:	75 0f                	jne    c001179c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001178d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011790:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011794:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011798:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001179c:	50                   	push   eax
c001179d:	50                   	push   eax
c001179e:	68 05 e1 01 c0       	push   0xc001e105
c00117a3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00117a7:	50                   	push   eax
c00117a8:	e8 53 ef fe ff       	call   c0000700 <strcmp>
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	85 c0                	test   eax,eax
c00117b2:	75 0f                	jne    c00117c3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00117b4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00117b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00117bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117c3:	45                   	inc    ebp
c00117c4:	e9 4c ff ff ff       	jmp    c0011715 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00117c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00117ce:	75 10                	jne    c00117e0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00117d0:	83 ec 0c             	sub    esp,0xc
c00117d3:	68 0d e1 01 c0       	push   0xc001e10d
c00117d8:	e8 c4 dd ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c00117dd:	83 c4 10             	add    esp,0x10
c00117e0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00117e5:	75 10                	jne    c00117f7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00117e7:	83 ec 0c             	sub    esp,0xc
c00117ea:	68 0d e1 01 c0       	push   0xc001e10d
c00117ef:	e8 ad dd ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c00117f4:	83 c4 10             	add    esp,0x10
c00117f7:	31 d2                	xor    edx,edx
c00117f9:	50                   	push   eax
c00117fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117fe:	52                   	push   edx
c00117ff:	50                   	push   eax
c0011800:	53                   	push   ebx
c0011801:	e8 16 89 ff ff       	call   c000a11c <File::seek(unsigned long long)>
c0011806:	5a                   	pop    edx
c0011807:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001180b:	e8 55 54 ff ff       	call   c0006c65 <malloc>
c0011810:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011814:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011818:	31 c9                	xor    ecx,ecx
c001181a:	5e                   	pop    esi
c001181b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001181d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0011821:	55                   	push   ebp
c0011822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011826:	51                   	push   ecx
c0011827:	52                   	push   edx
c0011828:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001182c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0011830:	53                   	push   ebx
c0011831:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011834:	83 c4 14             	add    esp,0x14
c0011837:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001183b:	e8 25 54 ff ff       	call   c0006c65 <malloc>
c0011840:	89 c6                	mov    esi,eax
c0011842:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011844:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011847:	56                   	push   esi
c0011848:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001184c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011850:	51                   	push   ecx
c0011851:	52                   	push   edx
c0011852:	53                   	push   ebx
c0011853:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011856:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001185a:	8b 15 c0 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022ac0
c0011860:	83 c4 1c             	add    esp,0x1c
c0011863:	c1 e8 04             	shr    eax,0x4
c0011866:	89 04 95 40 29 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd6c0],eax
c001186d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011871:	31 d2                	xor    edx,edx
c0011873:	52                   	push   edx
c0011874:	50                   	push   eax
c0011875:	53                   	push   ebx
c0011876:	e8 a1 88 ff ff       	call   c000a11c <File::seek(unsigned long long)>
c001187b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001187d:	31 d2                	xor    edx,edx
c001187f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011882:	56                   	push   esi
c0011883:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011887:	52                   	push   edx
c0011888:	50                   	push   eax
c0011889:	53                   	push   ebx
c001188a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001188d:	83 c4 14             	add    esp,0x14
c0011890:	53                   	push   ebx
c0011891:	e8 26 88 ff ff       	call   c000a0bc <File::close()>
c0011896:	5d                   	pop    ebp
c0011897:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001189b:	e8 d5 53 ff ff       	call   c0006c75 <free>
c00118a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118a3:	e8 cd 53 ff ff       	call   c0006c75 <free>
c00118a8:	a1 c0 2a 02 c0       	mov    eax,ds:0xc0022ac0
c00118ad:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00118b1:	8d 50 01             	lea    edx,[eax+0x1]
c00118b4:	89 0c 85 40 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5c0],ecx
c00118bb:	89 34 85 c0 29 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd640],esi
c00118c2:	89 15 c0 2a 02 c0    	mov    DWORD PTR ds:0xc0022ac0,edx
c00118c8:	83 c4 10             	add    esp,0x10
c00118cb:	b0 01                	mov    al,0x1
c00118cd:	83 c4 5c             	add    esp,0x5c
c00118d0:	5b                   	pop    ebx
c00118d1:	5e                   	pop    esi
c00118d2:	5f                   	pop    edi
c00118d3:	5d                   	pop    ebp
c00118d4:	c3                   	ret    

c00118d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00118d5:	55                   	push   ebp
c00118d6:	57                   	push   edi
c00118d7:	56                   	push   esi
c00118d8:	53                   	push   ebx
c00118d9:	81 ec 68 03 00 00    	sub    esp,0x368
c00118df:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00118e6:	8b 1d 10 2b 02 c0    	mov    ebx,DWORD PTR ds:0xc0022b10
c00118ec:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00118f0:	68 14 01 00 00       	push   0x114
c00118f5:	e8 6b 53 ff ff       	call   c0006c65 <malloc>
c00118fa:	83 c4 0c             	add    esp,0xc
c00118fd:	89 c5                	mov    ebp,eax
c00118ff:	53                   	push   ebx
c0011900:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0011907:	50                   	push   eax
c0011908:	e8 91 86 ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c001190d:	5e                   	pop    esi
c001190e:	5f                   	pop    edi
c001190f:	6a 01                	push   0x1
c0011911:	55                   	push   ebp
c0011912:	e8 47 87 ff ff       	call   c000a05e <File::open(FileOpenMode)>
c0011917:	83 c4 10             	add    esp,0x10
c001191a:	85 c0                	test   eax,eax
c001191c:	0f 85 a7 06 00 00    	jne    c0011fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011922:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001192a:	83 ec 0c             	sub    esp,0xc
c001192d:	6a 34                	push   0x34
c001192f:	e8 31 53 ff ff       	call   c0006c65 <malloc>
c0011934:	5b                   	pop    ebx
c0011935:	89 c7                	mov    edi,eax
c0011937:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001193b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001193e:	53                   	push   ebx
c001193f:	57                   	push   edi
c0011940:	6a 00                	push   0x0
c0011942:	6a 34                	push   0x34
c0011944:	55                   	push   ebp
c0011945:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011948:	83 c4 20             	add    esp,0x20
c001194b:	85 c0                	test   eax,eax
c001194d:	0f 85 76 06 00 00    	jne    c0011fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011953:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011959:	0f 85 6a 06 00 00    	jne    c0011fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001195f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011962:	85 c0                	test   eax,eax
c0011964:	0f 84 5f 06 00 00    	je     c0011fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001196a:	31 d2                	xor    edx,edx
c001196c:	51                   	push   ecx
c001196d:	52                   	push   edx
c001196e:	50                   	push   eax
c001196f:	55                   	push   ebp
c0011970:	e8 a7 87 ff ff       	call   c000a11c <File::seek(unsigned long long)>
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	85 c0                	test   eax,eax
c001197a:	0f 85 49 06 00 00    	jne    c0011fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011980:	83 ec 0c             	sub    esp,0xc
c0011983:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0011986:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001198a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001198e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011992:	0f af c2             	imul   eax,edx
c0011995:	50                   	push   eax
c0011996:	e8 ca 52 ff ff       	call   c0006c65 <malloc>
c001199b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001199e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00119a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00119a9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00119ad:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00119b1:	0f af c2             	imul   eax,edx
c00119b4:	99                   	cdq    
c00119b5:	52                   	push   edx
c00119b6:	50                   	push   eax
c00119b7:	55                   	push   ebp
c00119b8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00119bb:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00119be:	83 c4 20             	add    esp,0x20
c00119c1:	85 c0                	test   eax,eax
c00119c3:	0f 84 00 06 00 00    	je     c0011fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00119c9:	52                   	push   edx
c00119ca:	31 d2                	xor    edx,edx
c00119cc:	52                   	push   edx
c00119cd:	50                   	push   eax
c00119ce:	55                   	push   ebp
c00119cf:	e8 48 87 ff ff       	call   c000a11c <File::seek(unsigned long long)>
c00119d4:	83 c4 10             	add    esp,0x10
c00119d7:	85 c0                	test   eax,eax
c00119d9:	0f 85 ea 05 00 00    	jne    c0011fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00119df:	83 ec 0c             	sub    esp,0xc
c00119e2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00119e6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00119ea:	31 f6                	xor    esi,esi
c00119ec:	0f af c2             	imul   eax,edx
c00119ef:	50                   	push   eax
c00119f0:	e8 70 52 ff ff       	call   c0006c65 <malloc>
c00119f5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00119f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00119fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011a03:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0011a07:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0011a0b:	0f af c2             	imul   eax,edx
c0011a0e:	99                   	cdq    
c0011a0f:	52                   	push   edx
c0011a10:	50                   	push   eax
c0011a11:	55                   	push   ebp
c0011a12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011a15:	83 c4 20             	add    esp,0x20
c0011a18:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0011a1c:	0f 86 8a 00 00 00    	jbe    c0011aac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0011a22:	0f b7 de             	movzx  ebx,si
c0011a25:	c1 e3 05             	shl    ebx,0x5
c0011a28:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0011a2c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0011a2f:	75 75                	jne    c0011aa6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0011a31:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011a34:	31 d2                	xor    edx,edx
c0011a36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0011a3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a41:	50                   	push   eax
c0011a42:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0011a45:	52                   	push   edx
c0011a46:	50                   	push   eax
c0011a47:	55                   	push   ebp
c0011a48:	e8 cf 86 ff ff       	call   c000a11c <File::seek(unsigned long long)>
c0011a4d:	83 c4 10             	add    esp,0x10
c0011a50:	85 c0                	test   eax,eax
c0011a52:	0f 85 71 05 00 00    	jne    c0011fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011a58:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0011a5f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011a62:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0011a66:	31 d2                	xor    edx,edx
c0011a68:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0011a6c:	83 ec 0c             	sub    esp,0xc
c0011a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011a73:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011a7a:	50                   	push   eax
c0011a7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a83:	52                   	push   edx
c0011a84:	50                   	push   eax
c0011a85:	55                   	push   ebp
c0011a86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011a89:	83 c4 1c             	add    esp,0x1c
c0011a8c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011a8f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0011a92:	50                   	push   eax
c0011a93:	6a 00                	push   0x0
c0011a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a99:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0011a9d:	50                   	push   eax
c0011a9e:	e8 4d ea fe ff       	call   c00004f0 <memset>
c0011aa3:	83 c4 10             	add    esp,0x10
c0011aa6:	46                   	inc    esi
c0011aa7:	e9 6c ff ff ff       	jmp    c0011a18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0011aac:	53                   	push   ebx
c0011aad:	31 db                	xor    ebx,ebx
c0011aaf:	68 00 01 00 00       	push   0x100
c0011ab4:	6a 00                	push   0x0
c0011ab6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0011aba:	50                   	push   eax
c0011abb:	e8 30 ea fe ff       	call   c00004f0 <memset>
c0011ac0:	83 c4 0c             	add    esp,0xc
c0011ac3:	68 00 01 00 00       	push   0x100
c0011ac8:	6a 00                	push   0x0
c0011aca:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0011ad1:	50                   	push   eax
c0011ad2:	e8 19 ea fe ff       	call   c00004f0 <memset>
c0011ad7:	83 c4 10             	add    esp,0x10
c0011ada:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011ae2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011aea:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0011af2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011afa:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011b02:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0011b06:	0f 86 30 01 00 00    	jbe    c0011c3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0011b0c:	0f b7 f3             	movzx  esi,bx
c0011b0f:	6b f6 28             	imul   esi,esi,0x28
c0011b12:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011b16:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011b19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b1d:	52                   	push   edx
c0011b1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011b22:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0011b26:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b28:	6b d2 28             	imul   edx,edx,0x28
c0011b2b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0011b2f:	31 d2                	xor    edx,edx
c0011b31:	52                   	push   edx
c0011b32:	50                   	push   eax
c0011b33:	55                   	push   ebp
c0011b34:	e8 e3 85 ff ff       	call   c000a11c <File::seek(unsigned long long)>
c0011b39:	83 c4 0c             	add    esp,0xc
c0011b3c:	6a 20                	push   0x20
c0011b3e:	6a 00                	push   0x0
c0011b40:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011b47:	51                   	push   ecx
c0011b48:	e8 a3 e9 fe ff       	call   c00004f0 <memset>
c0011b4d:	59                   	pop    ecx
c0011b4e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011b51:	8d 54 24 58          	lea    edx,[esp+0x58]
c0011b55:	52                   	push   edx
c0011b56:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0011b5d:	51                   	push   ecx
c0011b5e:	6a 00                	push   0x0
c0011b60:	6a 1f                	push   0x1f
c0011b62:	55                   	push   ebp
c0011b63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b66:	83 c4 1c             	add    esp,0x1c
c0011b69:	6a 09                	push   0x9
c0011b6b:	68 27 e1 01 c0       	push   0xc001e127
c0011b70:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011b77:	51                   	push   ecx
c0011b78:	e8 33 e8 fe ff       	call   c00003b0 <memcmp>
c0011b7d:	83 c4 10             	add    esp,0x10
c0011b80:	85 c0                	test   eax,eax
c0011b82:	75 21                	jne    c0011ba5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0011b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b8c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011b90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011b94:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011b97:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011b9e:	89 d0                	mov    eax,edx
c0011ba0:	40                   	inc    eax
c0011ba1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ba5:	50                   	push   eax
c0011ba6:	6a 09                	push   0x9
c0011ba8:	68 31 e1 01 c0       	push   0xc001e131
c0011bad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011bb4:	50                   	push   eax
c0011bb5:	e8 f6 e7 fe ff       	call   c00003b0 <memcmp>
c0011bba:	83 c4 10             	add    esp,0x10
c0011bbd:	85 c0                	test   eax,eax
c0011bbf:	75 21                	jne    c0011be2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0011bc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bc9:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011bcd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011bd1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011bd4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011bdb:	89 d0                	mov    eax,edx
c0011bdd:	40                   	inc    eax
c0011bde:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011be2:	50                   	push   eax
c0011be3:	50                   	push   eax
c0011be4:	68 fd e0 01 c0       	push   0xc001e0fd
c0011be9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011bf0:	50                   	push   eax
c0011bf1:	e8 0a eb fe ff       	call   c0000700 <strcmp>
c0011bf6:	83 c4 10             	add    esp,0x10
c0011bf9:	85 c0                	test   eax,eax
c0011bfb:	75 0f                	jne    c0011c0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0011bfd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011c00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011c0c:	50                   	push   eax
c0011c0d:	50                   	push   eax
c0011c0e:	68 05 e1 01 c0       	push   0xc001e105
c0011c13:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011c1a:	50                   	push   eax
c0011c1b:	e8 e0 ea fe ff       	call   c0000700 <strcmp>
c0011c20:	83 c4 10             	add    esp,0x10
c0011c23:	85 c0                	test   eax,eax
c0011c25:	75 0f                	jne    c0011c36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0011c27:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011c2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011c2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c32:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011c36:	43                   	inc    ebx
c0011c37:	e9 c6 fe ff ff       	jmp    c0011b02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0011c3c:	31 d2                	xor    edx,edx
c0011c3e:	50                   	push   eax
c0011c3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c43:	52                   	push   edx
c0011c44:	50                   	push   eax
c0011c45:	55                   	push   ebp
c0011c46:	e8 d1 84 ff ff       	call   c000a11c <File::seek(unsigned long long)>
c0011c4b:	58                   	pop    eax
c0011c4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011c50:	e8 10 50 ff ff       	call   c0006c65 <malloc>
c0011c55:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011c58:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011c5c:	31 d2                	xor    edx,edx
c0011c5e:	58                   	pop    eax
c0011c5f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011c63:	53                   	push   ebx
c0011c64:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011c68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c6c:	52                   	push   edx
c0011c6d:	50                   	push   eax
c0011c6e:	55                   	push   ebp
c0011c6f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011c72:	83 c4 14             	add    esp,0x14
c0011c75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011c79:	e8 e7 4f ff ff       	call   c0006c65 <malloc>
c0011c7e:	31 d2                	xor    edx,edx
c0011c80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011c84:	83 c4 0c             	add    esp,0xc
c0011c87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c8b:	52                   	push   edx
c0011c8c:	50                   	push   eax
c0011c8d:	55                   	push   ebp
c0011c8e:	e8 89 84 ff ff       	call   c000a11c <File::seek(unsigned long long)>
c0011c93:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011c96:	31 d2                	xor    edx,edx
c0011c98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c9b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011c9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ca3:	52                   	push   edx
c0011ca4:	50                   	push   eax
c0011ca5:	55                   	push   ebp
c0011ca6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ca9:	83 c4 20             	add    esp,0x20
c0011cac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011cb4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011cb8:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0011cbc:	0f 84 0b 03 00 00    	je     c0011fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0011cc2:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0011cc9:	31 d2                	xor    edx,edx
c0011ccb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ccf:	c1 e8 03             	shr    eax,0x3
c0011cd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011cd6:	51                   	push   ecx
c0011cd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011cdb:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0011cdf:	52                   	push   edx
c0011ce0:	50                   	push   eax
c0011ce1:	55                   	push   ebp
c0011ce2:	e8 35 84 ff ff       	call   c000a11c <File::seek(unsigned long long)>
c0011ce7:	5b                   	pop    ebx
c0011ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cec:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0011cf3:	e8 6d 4f ff ff       	call   c0006c65 <malloc>
c0011cf8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011cfb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011cff:	31 d2                	xor    edx,edx
c0011d01:	5e                   	pop    esi
c0011d02:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011d06:	50                   	push   eax
c0011d07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d0f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0011d16:	52                   	push   edx
c0011d17:	50                   	push   eax
c0011d18:	55                   	push   ebp
c0011d19:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d1c:	83 c4 20             	add    esp,0x20
c0011d1f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011d27:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d2b:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0011d2f:	0f 8d 7c 02 00 00    	jge    c0011fb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0011d35:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d3d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0011d42:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0011d45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011d49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d4d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0011d51:	89 d8                	mov    eax,ebx
c0011d53:	c1 e8 08             	shr    eax,0x8
c0011d56:	89 c6                	mov    esi,eax
c0011d58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011d5c:	c1 e6 04             	shl    esi,0x4
c0011d5f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0011d63:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0011d66:	85 d2                	test   edx,edx
c0011d68:	0f 85 bf 00 00 00    	jne    c0011e2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011d6e:	83 ec 0c             	sub    esp,0xc
c0011d71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011d75:	03 06                	add    eax,DWORD PTR [esi]
c0011d77:	50                   	push   eax
c0011d78:	e8 4b f8 ff ff       	call   c00115c8 <Thr::getAddressOfKernelSymbol(char const*)>
c0011d7d:	83 c4 10             	add    esp,0x10
c0011d80:	89 c2                	mov    edx,eax
c0011d82:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0011d87:	85 c0                	test   eax,eax
c0011d89:	0f 85 9e 00 00 00    	jne    c0011e2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011d8f:	83 ec 0c             	sub    esp,0xc
c0011d92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011d96:	03 06                	add    eax,DWORD PTR [esi]
c0011d98:	50                   	push   eax
c0011d99:	e8 7a 3e ff ff       	call   c0005c18 <Krnl::resolveCompatibilitySymbol(char*)>
c0011d9e:	83 c4 10             	add    esp,0x10
c0011da1:	89 c2                	mov    edx,eax
c0011da3:	85 c0                	test   eax,eax
c0011da5:	0f 85 82 00 00 00    	jne    c0011e2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011dab:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011daf:	50                   	push   eax
c0011db0:	50                   	push   eax
c0011db1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011db5:	03 06                	add    eax,DWORD PTR [esi]
c0011db7:	50                   	push   eax
c0011db8:	68 3b e1 01 c0       	push   0xc001e13b
c0011dbd:	e8 66 7c ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0011dc2:	58                   	pop    eax
c0011dc3:	5a                   	pop    edx
c0011dc4:	68 55 e1 01 c0       	push   0xc001e155
c0011dc9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011dd0:	50                   	push   eax
c0011dd1:	e8 4a e8 fe ff       	call   c0000620 <strcpy>
c0011dd6:	59                   	pop    ecx
c0011dd7:	58                   	pop    eax
c0011dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ddc:	03 06                	add    eax,DWORD PTR [esi]
c0011dde:	50                   	push   eax
c0011ddf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011de6:	50                   	push   eax
c0011de7:	e8 f4 e9 fe ff       	call   c00007e0 <strcat>
c0011dec:	58                   	pop    eax
c0011ded:	5a                   	pop    edx
c0011dee:	68 eb e1 01 c0       	push   0xc001e1eb
c0011df3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011dfa:	50                   	push   eax
c0011dfb:	e8 e0 e9 fe ff       	call   c00007e0 <strcat>
c0011e00:	83 c4 10             	add    esp,0x10
c0011e03:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011e08:	0f 84 5d 01 00 00    	je     c0011f6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011e0e:	83 ec 0c             	sub    esp,0xc
c0011e11:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011e18:	50                   	push   eax
c0011e19:	e8 83 d7 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0011e1e:	83 c4 10             	add    esp,0x10
c0011e21:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011e25:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011e29:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0011e2d:	80 fb 01             	cmp    bl,0x1
c0011e30:	0f 85 88 00 00 00    	jne    c0011ebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0011e36:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0011e3d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011e41:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0011e45:	01 ce                	add    esi,ecx
c0011e47:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011e4d:	0f 94 c0             	sete   al
c0011e50:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011e56:	0f 94 c3             	sete   bl
c0011e59:	09 c3                	or     ebx,eax
c0011e5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e5d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011e62:	74 41                	je     c0011ea5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0011e64:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0011e67:	84 db                	test   bl,bl
c0011e69:	75 15                	jne    c0011e80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0011e6b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011e6f:	66 83 f8 0c          	cmp    ax,0xc
c0011e73:	76 05                	jbe    c0011e7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0011e75:	b8 0c 00 00 00       	mov    eax,0xc
c0011e7a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011e7e:	76 37                	jbe    c0011eb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011e80:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0011e84:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011e89:	0f 84 dc 00 00 00    	je     c0011f6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011e8f:	83 ec 0c             	sub    esp,0xc
c0011e92:	68 6c e1 01 c0       	push   0xc001e16c
c0011e97:	e8 05 d7 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0011e9c:	83 c4 10             	add    esp,0x10
c0011e9f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ea3:	eb 12                	jmp    c0011eb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011ea5:	01 c1                	add    ecx,eax
c0011ea7:	84 db                	test   bl,bl
c0011ea9:	75 0c                	jne    c0011eb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011eab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011eaf:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011eb3:	77 02                	ja     c0011eb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011eb5:	01 d1                	add    ecx,edx
c0011eb7:	89 0e                	mov    DWORD PTR [esi],ecx
c0011eb9:	e9 ea 00 00 00       	jmp    c0011fa8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011ebe:	80 fb 02             	cmp    bl,0x2
c0011ec1:	75 7c                	jne    c0011f3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0011ec3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0011eca:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0011ece:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0011ed2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011ed8:	74 20                	je     c0011efa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011eda:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011ee0:	74 18                	je     c0011efa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011ee2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011ee6:	b9 0a 00 00 00       	mov    ecx,0xa
c0011eeb:	66 83 f8 0e          	cmp    ax,0xe
c0011eef:	77 03                	ja     c0011ef4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0011ef1:	8d 48 fc             	lea    ecx,[eax-0x4]
c0011ef4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0011ef8:	76 1f                	jbe    c0011f19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0011efa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0011efe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011f03:	74 66                	je     c0011f6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011f05:	83 ec 0c             	sub    esp,0xc
c0011f08:	68 88 e1 01 c0       	push   0xc001e188
c0011f0d:	e8 8f d6 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0011f12:	83 c4 10             	add    esp,0x10
c0011f15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f19:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f1b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011f20:	74 13                	je     c0011f35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0011f22:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011f26:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0011f2d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0011f31:	01 c8                	add    eax,ecx
c0011f33:	eb 04                	jmp    c0011f39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0011f35:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0011f39:	01 c2                	add    edx,eax
c0011f3b:	89 16                	mov    DWORD PTR [esi],edx
c0011f3d:	eb 69                	jmp    c0011fa8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011f3f:	0f b6 db             	movzx  ebx,bl
c0011f42:	50                   	push   eax
c0011f43:	50                   	push   eax
c0011f44:	53                   	push   ebx
c0011f45:	68 a4 e1 01 c0       	push   0xc001e1a4
c0011f4a:	e8 d9 7a ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0011f4f:	83 c4 10             	add    esp,0x10
c0011f52:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011f57:	74 12                	je     c0011f6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011f59:	83 ec 0c             	sub    esp,0xc
c0011f5c:	68 af e1 01 c0       	push   0xc001e1af
c0011f61:	e8 3b d6 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0011f66:	83 c4 10             	add    esp,0x10
c0011f69:	eb 3d                	jmp    c0011fa8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011f6b:	83 ec 0c             	sub    esp,0xc
c0011f6e:	55                   	push   ebp
c0011f6f:	e8 48 81 ff ff       	call   c000a0bc <File::close()>
c0011f74:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011f77:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011f7a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f7d:	59                   	pop    ecx
c0011f7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011f82:	e8 ee 4c ff ff       	call   c0006c75 <free>
c0011f87:	5b                   	pop    ebx
c0011f88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011f8c:	e8 e4 4c ff ff       	call   c0006c75 <free>
c0011f91:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f94:	e8 dc 4c ff ff       	call   c0006c75 <free>
c0011f99:	5e                   	pop    esi
c0011f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f9e:	e8 d2 4c ff ff       	call   c0006c75 <free>
c0011fa3:	83 c4 10             	add    esp,0x10
c0011fa6:	eb 21                	jmp    c0011fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011fa8:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0011fac:	e9 76 fd ff ff       	jmp    c0011d27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0011fb1:	83 ec 0c             	sub    esp,0xc
c0011fb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011fb8:	e8 b8 4c ff ff       	call   c0006c75 <free>
c0011fbd:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0011fc1:	83 c4 10             	add    esp,0x10
c0011fc4:	e9 eb fc ff ff       	jmp    c0011cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0011fc9:	31 c0                	xor    eax,eax
c0011fcb:	eb 33                	jmp    c0012000 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0011fcd:	83 ec 0c             	sub    esp,0xc
c0011fd0:	55                   	push   ebp
c0011fd1:	e8 e6 80 ff ff       	call   c000a0bc <File::close()>
c0011fd6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011fd9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011fdc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fdf:	58                   	pop    eax
c0011fe0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011fe4:	e8 8c 4c ff ff       	call   c0006c75 <free>
c0011fe9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011fec:	e8 84 4c ff ff       	call   c0006c75 <free>
c0011ff1:	5a                   	pop    edx
c0011ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ff6:	e8 7a 4c ff ff       	call   c0006c75 <free>
c0011ffb:	83 c4 10             	add    esp,0x10
c0011ffe:	b0 01                	mov    al,0x1
c0012000:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012006:	5b                   	pop    ebx
c0012007:	5e                   	pop    esi
c0012008:	5f                   	pop    edi
c0012009:	5d                   	pop    ebp
c001200a:	c3                   	ret    

c001200b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001200b:	56                   	push   esi
c001200c:	31 d2                	xor    edx,edx
c001200e:	53                   	push   ebx
c001200f:	8b 1d 20 23 02 c0    	mov    ebx,DWORD PTR ds:0xc0022320
c0012015:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012019:	39 d3                	cmp    ebx,edx
c001201b:	7e 1b                	jle    c0012038 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001201d:	8b 04 95 40 25 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddac0]
c0012024:	39 c8                	cmp    eax,ecx
c0012026:	77 0d                	ja     c0012035 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012028:	8b 34 95 40 23 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffddcc0]
c001202f:	01 c6                	add    esi,eax
c0012031:	39 ce                	cmp    esi,ecx
c0012033:	77 05                	ja     c001203a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012035:	42                   	inc    edx
c0012036:	eb e1                	jmp    c0012019 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012038:	31 c0                	xor    eax,eax
c001203a:	5b                   	pop    ebx
c001203b:	5e                   	pop    esi
c001203c:	c3                   	ret    

c001203d <Thr::getDriverNameFromAddress(unsigned long)>:
c001203d:	53                   	push   ebx
c001203e:	31 c0                	xor    eax,eax
c0012040:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012044:	8b 1d 20 23 02 c0    	mov    ebx,DWORD PTR ds:0xc0022320
c001204a:	39 c3                	cmp    ebx,eax
c001204c:	7e 22                	jle    c0012070 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001204e:	8b 14 85 40 25 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddac0]
c0012055:	39 ca                	cmp    edx,ecx
c0012057:	77 14                	ja     c001206d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012059:	03 14 85 40 23 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffddcc0]
c0012060:	39 ca                	cmp    edx,ecx
c0012062:	76 09                	jbe    c001206d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012064:	8b 04 85 40 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd8c0]
c001206b:	eb 05                	jmp    c0012072 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001206d:	40                   	inc    eax
c001206e:	eb da                	jmp    c001204a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012070:	31 c0                	xor    eax,eax
c0012072:	5b                   	pop    ebx
c0012073:	c3                   	ret    

c0012074 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012074:	53                   	push   ebx
c0012075:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012079:	53                   	push   ebx
c001207a:	e8 8c ff ff ff       	call   c001200b <Thr::getDriverBaseFromAddress(unsigned long)>
c001207f:	5a                   	pop    edx
c0012080:	31 d2                	xor    edx,edx
c0012082:	85 c0                	test   eax,eax
c0012084:	74 04                	je     c001208a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012086:	89 da                	mov    edx,ebx
c0012088:	29 c2                	sub    edx,eax
c001208a:	89 d0                	mov    eax,edx
c001208c:	5b                   	pop    ebx
c001208d:	c3                   	ret    

c001208e <Thr::loadDLL(char const*, bool)>:
c001208e:	55                   	push   ebp
c001208f:	57                   	push   edi
c0012090:	56                   	push   esi
c0012091:	53                   	push   ebx
c0012092:	81 ec 34 01 00 00    	sub    esp,0x134
c0012098:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001209f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00120a6:	56                   	push   esi
c00120a7:	68 c7 e1 01 c0       	push   0xc001e1c7
c00120ac:	e8 77 79 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00120b1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00120b8:	e8 a8 4b ff ff       	call   c0006c65 <malloc>
c00120bd:	83 c4 0c             	add    esp,0xc
c00120c0:	89 c3                	mov    ebx,eax
c00120c2:	ff 35 10 2b 02 c0    	push   DWORD PTR ds:0xc0022b10
c00120c8:	56                   	push   esi
c00120c9:	50                   	push   eax
c00120ca:	e8 cf 7e ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c00120cf:	83 c4 10             	add    esp,0x10
c00120d2:	85 db                	test   ebx,ebx
c00120d4:	75 3c                	jne    c0012112 <Thr::loadDLL(char const*, bool)+0x84>
c00120d6:	89 f8                	mov    eax,edi
c00120d8:	84 c0                	test   al,al
c00120da:	0f 84 d2 01 00 00    	je     c00122b2 <Thr::loadDLL(char const*, bool)+0x224>
c00120e0:	55                   	push   ebp
c00120e1:	55                   	push   ebp
c00120e2:	68 d8 e1 01 c0       	push   0xc001e1d8
c00120e7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00120eb:	55                   	push   ebp
c00120ec:	e8 2f e5 fe ff       	call   c0000620 <strcpy>
c00120f1:	58                   	pop    eax
c00120f2:	5a                   	pop    edx
c00120f3:	56                   	push   esi
c00120f4:	55                   	push   ebp
c00120f5:	e8 e6 e6 fe ff       	call   c00007e0 <strcat>
c00120fa:	59                   	pop    ecx
c00120fb:	58                   	pop    eax
c00120fc:	68 eb e1 01 c0       	push   0xc001e1eb
c0012101:	55                   	push   ebp
c0012102:	e8 d9 e6 fe ff       	call   c00007e0 <strcat>
c0012107:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001210a:	e8 92 d4 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001210f:	83 c4 10             	add    esp,0x10
c0012112:	51                   	push   ecx
c0012113:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012117:	50                   	push   eax
c0012118:	8d 44 24 20          	lea    eax,[esp+0x20]
c001211c:	50                   	push   eax
c001211d:	53                   	push   ebx
c001211e:	e8 e7 81 ff ff       	call   c000a30a <File::stat(unsigned long long*, bool*)>
c0012123:	83 c4 10             	add    esp,0x10
c0012126:	85 db                	test   ebx,ebx
c0012128:	74 0c                	je     c0012136 <Thr::loadDLL(char const*, bool)+0xa8>
c001212a:	83 ec 0c             	sub    esp,0xc
c001212d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001212f:	53                   	push   ebx
c0012130:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012133:	83 c4 10             	add    esp,0x10
c0012136:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001213b:	75 0a                	jne    c0012147 <Thr::loadDLL(char const*, bool)+0xb9>
c001213d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012141:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012145:	75 3c                	jne    c0012183 <Thr::loadDLL(char const*, bool)+0xf5>
c0012147:	89 f8                	mov    eax,edi
c0012149:	84 c0                	test   al,al
c001214b:	0f 84 49 01 00 00    	je     c001229a <Thr::loadDLL(char const*, bool)+0x20c>
c0012151:	51                   	push   ecx
c0012152:	51                   	push   ecx
c0012153:	68 d8 e1 01 c0       	push   0xc001e1d8
c0012158:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001215c:	53                   	push   ebx
c001215d:	e8 be e4 fe ff       	call   c0000620 <strcpy>
c0012162:	5d                   	pop    ebp
c0012163:	58                   	pop    eax
c0012164:	56                   	push   esi
c0012165:	53                   	push   ebx
c0012166:	e8 75 e6 fe ff       	call   c00007e0 <strcat>
c001216b:	58                   	pop    eax
c001216c:	5a                   	pop    edx
c001216d:	68 eb e1 01 c0       	push   0xc001e1eb
c0012172:	53                   	push   ebx
c0012173:	e8 68 e6 fe ff       	call   c00007e0 <strcat>
c0012178:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001217b:	e8 21 d4 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0012180:	83 c4 10             	add    esp,0x10
c0012183:	52                   	push   edx
c0012184:	6a 03                	push   0x3
c0012186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001218a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001218e:	05 ff 0f 00 00       	add    eax,0xfff
c0012193:	83 d2 00             	adc    edx,0x0
c0012196:	0f ac d0 0c          	shrd   eax,edx,0xc
c001219a:	50                   	push   eax
c001219b:	ff 35 f4 f6 01 c0    	push   DWORD PTR ds:0xc001f6f4
c00121a1:	e8 58 6d ff ff       	call   c0008efe <VAS::allocatePages(int, int)>
c00121a6:	59                   	pop    ecx
c00121a7:	89 c3                	mov    ebx,eax
c00121a9:	5d                   	pop    ebp
c00121aa:	50                   	push   eax
c00121ab:	68 4e ce 01 c0       	push   0xc001ce4e
c00121b0:	e8 73 78 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00121b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00121b8:	e8 a3 e3 fe ff       	call   c0000560 <strlen>
c00121bd:	8b 2d 20 23 02 c0    	mov    ebp,DWORD PTR ds:0xc0022320
c00121c3:	40                   	inc    eax
c00121c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00121c7:	e8 99 4a ff ff       	call   c0006c65 <malloc>
c00121cc:	89 04 ad 40 27 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdd8c0],eax
c00121d3:	58                   	pop    eax
c00121d4:	a1 20 23 02 c0       	mov    eax,ds:0xc0022320
c00121d9:	5a                   	pop    edx
c00121da:	56                   	push   esi
c00121db:	ff 34 85 40 27 02 c0 	push   DWORD PTR [eax*4-0x3ffdd8c0]
c00121e2:	e8 39 e4 fe ff       	call   c0000620 <strcpy>
c00121e7:	a1 20 23 02 c0       	mov    eax,ds:0xc0022320
c00121ec:	8d 50 01             	lea    edx,[eax+0x1]
c00121ef:	89 1c 85 40 25 02 c0 	mov    DWORD PTR [eax*4-0x3ffddac0],ebx
c00121f6:	89 15 20 23 02 c0    	mov    DWORD PTR ds:0xc0022320,edx
c00121fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012200:	83 c4 0c             	add    esp,0xc
c0012203:	89 14 85 40 23 02 c0 	mov    DWORD PTR [eax*4-0x3ffddcc0],edx
c001220a:	6a 01                	push   0x1
c001220c:	53                   	push   ebx
c001220d:	56                   	push   esi
c001220e:	e8 c2 f6 ff ff       	call   c00118d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012213:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012217:	83 c4 10             	add    esp,0x10
c001221a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001221f:	0f 85 89 00 00 00    	jne    c00122ae <Thr::loadDLL(char const*, bool)+0x220>
c0012225:	89 f8                	mov    eax,edi
c0012227:	84 c0                	test   al,al
c0012229:	74 73                	je     c001229e <Thr::loadDLL(char const*, bool)+0x210>
c001222b:	83 ec 0c             	sub    esp,0xc
c001222e:	68 ed e1 01 c0       	push   0xc001e1ed
c0012233:	e8 69 d3 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0012238:	83 c4 10             	add    esp,0x10
c001223b:	eb 61                	jmp    c001229e <Thr::loadDLL(char const*, bool)+0x210>
c001223d:	50                   	push   eax
c001223e:	50                   	push   eax
c001223f:	89 e8                	mov    eax,ebp
c0012241:	c1 e0 0c             	shl    eax,0xc
c0012244:	01 d8                	add    eax,ebx
c0012246:	50                   	push   eax
c0012247:	ff 35 f4 f6 01 c0    	push   DWORD PTR ds:0xc001f6f4
c001224d:	e8 24 68 ff ff       	call   c0008a76 <VAS::getPageTableEntry(unsigned long)>
c0012252:	83 c4 10             	add    esp,0x10
c0012255:	8b 00                	mov    eax,DWORD PTR [eax]
c0012257:	a8 60                	test   al,0x60
c0012259:	75 11                	jne    c001226c <Thr::loadDLL(char const*, bool)+0x1de>
c001225b:	83 ec 0c             	sub    esp,0xc
c001225e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012263:	50                   	push   eax
c0012264:	e8 67 4d ff ff       	call   c0006fd0 <Phys::freePage(unsigned long)>
c0012269:	83 c4 10             	add    esp,0x10
c001226c:	45                   	inc    ebp
c001226d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012271:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012275:	05 ff 0f 00 00       	add    eax,0xfff
c001227a:	bf 00 00 00 00       	mov    edi,0x0
c001227f:	83 d2 00             	adc    edx,0x0
c0012282:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012286:	c1 ea 0c             	shr    edx,0xc
c0012289:	39 c5                	cmp    ebp,eax
c001228b:	89 d1                	mov    ecx,edx
c001228d:	89 f8                	mov    eax,edi
c001228f:	19 c8                	sbb    eax,ecx
c0012291:	72 aa                	jb     c001223d <Thr::loadDLL(char const*, bool)+0x1af>
c0012293:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012298:	75 18                	jne    c00122b2 <Thr::loadDLL(char const*, bool)+0x224>
c001229a:	31 db                	xor    ebx,ebx
c001229c:	eb 14                	jmp    c00122b2 <Thr::loadDLL(char const*, bool)+0x224>
c001229e:	83 ec 0c             	sub    esp,0xc
c00122a1:	68 0c e2 01 c0       	push   0xc001e20c
c00122a6:	e8 f6 d2 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c00122ab:	83 c4 10             	add    esp,0x10
c00122ae:	31 ed                	xor    ebp,ebp
c00122b0:	eb bb                	jmp    c001226d <Thr::loadDLL(char const*, bool)+0x1df>
c00122b2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00122b8:	89 d8                	mov    eax,ebx
c00122ba:	5b                   	pop    ebx
c00122bb:	5e                   	pop    esi
c00122bc:	5f                   	pop    edi
c00122bd:	5d                   	pop    ebp
c00122be:	c3                   	ret    

c00122bf <Thr::executeDLL(unsigned long, void*)>:
c00122bf:	56                   	push   esi
c00122c0:	53                   	push   ebx
c00122c1:	52                   	push   edx
c00122c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00122ca:	85 db                	test   ebx,ebx
c00122cc:	75 10                	jne    c00122de <Thr::executeDLL(unsigned long, void*)+0x1f>
c00122ce:	83 ec 0c             	sub    esp,0xc
c00122d1:	68 28 e2 01 c0       	push   0xc001e228
c00122d6:	e8 c6 d2 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	50                   	push   eax
c00122df:	50                   	push   eax
c00122e0:	53                   	push   ebx
c00122e1:	68 52 e2 01 c0       	push   0xc001e252
c00122e6:	e8 3d 77 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00122eb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00122ef:	89 d8                	mov    eax,ebx
c00122f1:	83 c4 14             	add    esp,0x14
c00122f4:	5b                   	pop    ebx
c00122f5:	5e                   	pop    esi
c00122f6:	ff e0                	jmp    eax

c00122f8 <userModeEntryPoint(void*)>:
c00122f8:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c00122fd:	48                   	dec    eax
c00122fe:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012303:	75 03                	jne    c0012308 <userModeEntryPoint(void*)+0x10>
c0012305:	fb                   	sti    
c0012306:	66 90                	xchg   ax,ax
c0012308:	fb                   	sti    
c0012309:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001230e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012311:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012317:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001231b:	e9 3f df fe ff       	jmp    c000025f <goToUsermode>

c0012320 <changeTSS>:
c0012320:	83 ec 14             	sub    esp,0x14
c0012323:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012328:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001232b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012330:	c1 e2 15             	shl    edx,0x15
c0012333:	29 d0                	sub    eax,edx
c0012335:	50                   	push   eax
c0012336:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c001233b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012341:	05 7c 11 00 00       	add    eax,0x117c
c0012346:	50                   	push   eax
c0012347:	e8 a8 5d ff ff       	call   c00080f4 <TSS::setESP(unsigned long)>
c001234c:	83 c4 1c             	add    esp,0x1c
c001234f:	c3                   	ret    

c0012350 <switchToThread(ThreadControlBlock*)>:
c0012350:	57                   	push   edi
c0012351:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c0012356:	56                   	push   esi
c0012357:	85 c0                	test   eax,eax
c0012359:	53                   	push   ebx
c001235a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001235e:	0f 85 90 00 00 00    	jne    c00123f4 <switchToThread(ThreadControlBlock*)+0xa4>
c0012364:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012367:	80 fa ff             	cmp    dl,0xff
c001236a:	0f 84 80 00 00 00    	je     c00123f0 <switchToThread(ThreadControlBlock*)+0xa0>
c0012370:	81 e2 ff 00 00 00    	and    edx,0xff
c0012376:	b8 00 04 00 00       	mov    eax,0x400
c001237b:	29 d0                	sub    eax,edx
c001237d:	d1 f8                	sar    eax,1
c001237f:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012382:	66 90                	xchg   ax,ax
c0012384:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012387:	ff 15 90 2b 02 c0    	call   DWORD PTR ds:0xc0022b90
c001238d:	a3 28 2b 02 c0       	mov    ds:0xc0022b28,eax
c0012392:	89 15 2c 2b 02 c0    	mov    DWORD PTR ds:0xc0022b2c,edx
c0012398:	89 c6                	mov    esi,eax
c001239a:	89 d7                	mov    edi,edx
c001239c:	2b 35 18 2b 02 c0    	sub    esi,DWORD PTR ds:0xc0022b18
c00123a2:	a3 18 2b 02 c0       	mov    ds:0xc0022b18,eax
c00123a7:	1b 3d 1c 2b 02 c0    	sbb    edi,DWORD PTR ds:0xc0022b1c
c00123ad:	89 35 20 2b 02 c0    	mov    DWORD PTR ds:0xc0022b20,esi
c00123b3:	89 3d 24 2b 02 c0    	mov    DWORD PTR ds:0xc0022b24,edi
c00123b9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00123bf:	89 15 1c 2b 02 c0    	mov    DWORD PTR ds:0xc0022b1c,edx
c00123c5:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00123c8:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00123cb:	01 c6                	add    esi,eax
c00123cd:	11 d7                	adc    edi,edx
c00123cf:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00123d2:	83 ec 0c             	sub    esp,0xc
c00123d5:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00123d8:	53                   	push   ebx
c00123d9:	e8 b9 de fe ff       	call   c0000297 <switchToThreadASM>
c00123de:	0f 20 c0             	mov    eax,cr0
c00123e1:	83 c8 08             	or     eax,0x8
c00123e4:	0f 22 c0             	mov    cr0,eax
c00123e7:	83 c4 10             	add    esp,0x10
c00123ea:	5b                   	pop    ebx
c00123eb:	5e                   	pop    esi
c00123ec:	5f                   	pop    edi
c00123ed:	c3                   	ret    
c00123ee:	66 90                	xchg   ax,ax
c00123f0:	31 c0                	xor    eax,eax
c00123f2:	eb 90                	jmp    c0012384 <switchToThread(ThreadControlBlock*)+0x34>
c00123f4:	5b                   	pop    ebx
c00123f5:	c7 05 e0 2a 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x1
c00123ff:	5e                   	pop    esi
c0012400:	5f                   	pop    edi
c0012401:	c3                   	ret    
c0012402:	66 90                	xchg   ax,ax

c0012404 <Process::addArgs(char**)>:
c0012404:	57                   	push   edi
c0012405:	56                   	push   esi
c0012406:	53                   	push   ebx
c0012407:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001240b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001240f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012419:	85 ff                	test   edi,edi
c001241b:	74 43                	je     c0012460 <Process::addArgs(char**)+0x5c>
c001241d:	8b 07                	mov    eax,DWORD PTR [edi]
c001241f:	85 c0                	test   eax,eax
c0012421:	74 3d                	je     c0012460 <Process::addArgs(char**)+0x5c>
c0012423:	31 db                	xor    ebx,ebx
c0012425:	8d 76 00             	lea    esi,[esi+0x0]
c0012428:	83 ec 0c             	sub    esp,0xc
c001242b:	50                   	push   eax
c001242c:	e8 2f e1 fe ff       	call   c0000560 <strlen>
c0012431:	40                   	inc    eax
c0012432:	89 04 24             	mov    DWORD PTR [esp],eax
c0012435:	e8 2b 48 ff ff       	call   c0006c65 <malloc>
c001243a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012441:	5a                   	pop    edx
c0012442:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012445:	59                   	pop    ecx
c0012446:	43                   	inc    ebx
c0012447:	52                   	push   edx
c0012448:	50                   	push   eax
c0012449:	e8 d2 e1 fe ff       	call   c0000620 <strcpy>
c001244e:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012454:	83 c4 10             	add    esp,0x10
c0012457:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001245a:	85 c0                	test   eax,eax
c001245c:	75 ca                	jne    c0012428 <Process::addArgs(char**)+0x24>
c001245e:	66 90                	xchg   ax,ax
c0012460:	5b                   	pop    ebx
c0012461:	5e                   	pop    esi
c0012462:	5f                   	pop    edi
c0012463:	c3                   	ret    

c0012464 <Process::Process(char const*, Process*, char**)>:
c0012464:	56                   	push   esi
c0012465:	53                   	push   ebx
c0012466:	83 ec 14             	sub    esp,0x14
c0012469:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001246d:	05 0c 02 00 00       	add    eax,0x20c
c0012472:	bb 07 00 00 00       	mov    ebx,0x7
c0012477:	89 c6                	mov    esi,eax
c0012479:	8d 76 00             	lea    esi,[esi+0x0]
c001247c:	85 db                	test   ebx,ebx
c001247e:	78 14                	js     c0012494 <Process::Process(char const*, Process*, char**)+0x30>
c0012480:	83 ec 0c             	sub    esp,0xc
c0012483:	56                   	push   esi
c0012484:	e8 63 9c 00 00       	call   c001c0ec <ThreadControlBlock::ThreadControlBlock()>
c0012489:	83 c4 10             	add    esp,0x10
c001248c:	83 c6 5f             	add    esi,0x5f
c001248f:	4b                   	dec    ebx
c0012490:	eb ea                	jmp    c001247c <Process::Process(char const*, Process*, char**)+0x18>
c0012492:	66 90                	xchg   ax,ax
c0012494:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012498:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001249f:	83 ec 0c             	sub    esp,0xc
c00124a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00124a6:	e8 7f cf ff ff       	call   c000f42a <Krnl::newProcessEnv(Process*)>
c00124ab:	83 c4 10             	add    esp,0x10
c00124ae:	89 c2                	mov    edx,eax
c00124b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124b4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00124ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124be:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00124c7:	a1 30 f0 01 c0       	mov    eax,ds:0xc001f030
c00124cc:	8d 50 01             	lea    edx,[eax+0x1]
c00124cf:	89 15 30 f0 01 c0    	mov    DWORD PTR ds:0xc001f030,edx
c00124d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00124d9:	89 02                	mov    DWORD PTR [edx],eax
c00124db:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00124e3:	83 ec 0c             	sub    esp,0xc
c00124e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00124ea:	e8 76 47 ff ff       	call   c0006c65 <malloc>
c00124ef:	83 c4 10             	add    esp,0x10
c00124f2:	89 c3                	mov    ebx,eax
c00124f4:	83 ec 08             	sub    esp,0x8
c00124f7:	6a 00                	push   0x0
c00124f9:	53                   	push   ebx
c00124fa:	e8 a9 6d ff ff       	call   c00092a8 <VAS::VAS(bool)>
c00124ff:	83 c4 10             	add    esp,0x10
c0012502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012506:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001250c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012510:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001251a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001251e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012522:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001252c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012532:	85 c0                	test   eax,eax
c0012534:	74 42                	je     c0012578 <Process::Process(char const*, Process*, char**)+0x114>
c0012536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001253a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012540:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012546:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001254a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012554:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001255a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012564:	05 0c 01 00 00       	add    eax,0x10c
c0012569:	83 ec 08             	sub    esp,0x8
c001256c:	52                   	push   edx
c001256d:	50                   	push   eax
c001256e:	e8 ad e0 fe ff       	call   c0000620 <strcpy>
c0012573:	83 c4 10             	add    esp,0x10
c0012576:	eb 64                	jmp    c00125dc <Process::Process(char const*, Process*, char**)+0x178>
c0012578:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012580:	83 ec 0c             	sub    esp,0xc
c0012583:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012587:	e8 d9 46 ff ff       	call   c0006c65 <malloc>
c001258c:	83 c4 10             	add    esp,0x10
c001258f:	89 c3                	mov    ebx,eax
c0012591:	83 ec 08             	sub    esp,0x8
c0012594:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012598:	53                   	push   ebx
c0012599:	e8 fa 58 ff ff       	call   c0007e98 <VgaText::VgaText(char const*)>
c001259e:	83 c4 10             	add    esp,0x10
c00125a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125a5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00125ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00125b5:	83 ec 0c             	sub    esp,0xc
c00125b8:	50                   	push   eax
c00125b9:	e8 7a 51 ff ff       	call   c0007738 <addToTerminalCycle(VgaText*)>
c00125be:	83 c4 10             	add    esp,0x10
c00125c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125c5:	05 0c 01 00 00       	add    eax,0x10c
c00125ca:	83 ec 08             	sub    esp,0x8
c00125cd:	68 71 e2 01 c0       	push   0xc001e271
c00125d2:	50                   	push   eax
c00125d3:	e8 48 e0 fe ff       	call   c0000620 <strcpy>
c00125d8:	83 c4 10             	add    esp,0x10
c00125db:	90                   	nop
c00125dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125e0:	83 c0 0c             	add    eax,0xc
c00125e3:	83 ec 08             	sub    esp,0x8
c00125e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00125ea:	50                   	push   eax
c00125eb:	e8 30 e0 fe ff       	call   c0000620 <strcpy>
c00125f0:	83 c4 10             	add    esp,0x10
c00125f3:	83 ec 08             	sub    esp,0x8
c00125f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00125fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00125fe:	e8 01 fe ff ff       	call   c0012404 <Process::addArgs(char**)>
c0012603:	83 c4 10             	add    esp,0x10
c0012606:	83 ec 08             	sub    esp,0x8
c0012609:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001260d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012611:	e8 89 ed ff ff       	call   c001139f <Thr::loadProgramIntoMemory(Process*, char const*)>
c0012616:	83 c4 10             	add    esp,0x10
c0012619:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001261d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012621:	83 f0 01             	xor    eax,0x1
c0012624:	88 c2                	mov    dl,al
c0012626:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001262a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012630:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012634:	25 ff 00 00 00       	and    eax,0xff
c0012639:	83 ec 08             	sub    esp,0x8
c001263c:	50                   	push   eax
c001263d:	68 c8 e2 01 c0       	push   0xc001e2c8
c0012642:	e8 e1 73 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0012647:	83 c4 10             	add    esp,0x10
c001264a:	90                   	nop
c001264b:	83 c4 14             	add    esp,0x14
c001264e:	5b                   	pop    ebx
c001264f:	5e                   	pop    esi
c0012650:	c3                   	ret    
c0012651:	90                   	nop
c0012652:	66 90                	xchg   ax,ax

c0012654 <Process::Process(bool, char const*, Process*, char**)>:
c0012654:	56                   	push   esi
c0012655:	53                   	push   ebx
c0012656:	83 ec 24             	sub    esp,0x24
c0012659:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001265d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012661:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012665:	05 0c 02 00 00       	add    eax,0x20c
c001266a:	bb 07 00 00 00       	mov    ebx,0x7
c001266f:	89 c6                	mov    esi,eax
c0012671:	8d 76 00             	lea    esi,[esi+0x0]
c0012674:	85 db                	test   ebx,ebx
c0012676:	78 14                	js     c001268c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012678:	83 ec 0c             	sub    esp,0xc
c001267b:	56                   	push   esi
c001267c:	e8 6b 9a 00 00       	call   c001c0ec <ThreadControlBlock::ThreadControlBlock()>
c0012681:	83 c4 10             	add    esp,0x10
c0012684:	83 c6 5f             	add    esi,0x5f
c0012687:	4b                   	dec    ebx
c0012688:	eb ea                	jmp    c0012674 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001268a:	66 90                	xchg   ax,ax
c001268c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012690:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012697:	83 ec 0c             	sub    esp,0xc
c001269a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001269e:	e8 87 cd ff ff       	call   c000f42a <Krnl::newProcessEnv(Process*)>
c00126a3:	83 c4 10             	add    esp,0x10
c00126a6:	89 c2                	mov    edx,eax
c00126a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126ac:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00126b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126b6:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00126bf:	a1 30 f0 01 c0       	mov    eax,ds:0xc001f030
c00126c4:	8d 50 01             	lea    edx,[eax+0x1]
c00126c7:	89 15 30 f0 01 c0    	mov    DWORD PTR ds:0xc001f030,edx
c00126cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00126d1:	89 02                	mov    DWORD PTR [edx],eax
c00126d3:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00126db:	83 ec 0c             	sub    esp,0xc
c00126de:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00126e2:	e8 7e 45 ff ff       	call   c0006c65 <malloc>
c00126e7:	83 c4 10             	add    esp,0x10
c00126ea:	89 c3                	mov    ebx,eax
c00126ec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00126f0:	25 ff 00 00 00       	and    eax,0xff
c00126f5:	83 ec 08             	sub    esp,0x8
c00126f8:	50                   	push   eax
c00126f9:	53                   	push   ebx
c00126fa:	e8 a9 6b ff ff       	call   c00092a8 <VAS::VAS(bool)>
c00126ff:	83 c4 10             	add    esp,0x10
c0012702:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012706:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001270c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012710:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001271a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001271e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012722:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012728:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001272c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012732:	85 c0                	test   eax,eax
c0012734:	74 42                	je     c0012778 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0012736:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001273a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012740:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001274a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012750:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012754:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001275a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012760:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012764:	05 0c 01 00 00       	add    eax,0x10c
c0012769:	83 ec 08             	sub    esp,0x8
c001276c:	52                   	push   edx
c001276d:	50                   	push   eax
c001276e:	e8 ad de fe ff       	call   c0000620 <strcpy>
c0012773:	83 c4 10             	add    esp,0x10
c0012776:	eb 64                	jmp    c00127dc <Process::Process(bool, char const*, Process*, char**)+0x188>
c0012778:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0012780:	83 ec 0c             	sub    esp,0xc
c0012783:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012787:	e8 d9 44 ff ff       	call   c0006c65 <malloc>
c001278c:	83 c4 10             	add    esp,0x10
c001278f:	89 c3                	mov    ebx,eax
c0012791:	83 ec 08             	sub    esp,0x8
c0012794:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012798:	53                   	push   ebx
c0012799:	e8 fa 56 ff ff       	call   c0007e98 <VgaText::VgaText(char const*)>
c001279e:	83 c4 10             	add    esp,0x10
c00127a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127a5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00127ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00127b5:	83 ec 0c             	sub    esp,0xc
c00127b8:	50                   	push   eax
c00127b9:	e8 7a 4f ff ff       	call   c0007738 <addToTerminalCycle(VgaText*)>
c00127be:	83 c4 10             	add    esp,0x10
c00127c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127c5:	05 0c 01 00 00       	add    eax,0x10c
c00127ca:	83 ec 08             	sub    esp,0x8
c00127cd:	68 71 e2 01 c0       	push   0xc001e271
c00127d2:	50                   	push   eax
c00127d3:	e8 48 de fe ff       	call   c0000620 <strcpy>
c00127d8:	83 c4 10             	add    esp,0x10
c00127db:	90                   	nop
c00127dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e0:	83 c0 0c             	add    eax,0xc
c00127e3:	83 ec 08             	sub    esp,0x8
c00127e6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00127ea:	50                   	push   eax
c00127eb:	e8 30 de fe ff       	call   c0000620 <strcpy>
c00127f0:	83 c4 10             	add    esp,0x10
c00127f3:	83 ec 08             	sub    esp,0x8
c00127f6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00127fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127fe:	e8 01 fc ff ff       	call   c0012404 <Process::addArgs(char**)>
c0012803:	83 c4 10             	add    esp,0x10
c0012806:	90                   	nop
c0012807:	83 c4 24             	add    esp,0x24
c001280a:	5b                   	pop    ebx
c001280b:	5e                   	pop    esi
c001280c:	c3                   	ret    
c001280d:	8d 76 00             	lea    esi,[esi+0x0]

c0012810 <taskStartupFunction>:
c0012810:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012815:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0012818:	c3                   	ret    
c0012819:	90                   	nop
c001281a:	66 90                	xchg   ax,ax

c001281c <Semaphore::Semaphore(int)>:
c001281c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012820:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012824:	89 10                	mov    DWORD PTR [eax],edx
c0012826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001282a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0012831:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012835:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001283c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012840:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012847:	90                   	nop
c0012848:	c3                   	ret    
c0012849:	90                   	nop
c001284a:	66 90                	xchg   ax,ax

c001284c <Mutex::Mutex()>:
c001284c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012850:	6a 01                	push   0x1
c0012852:	50                   	push   eax
c0012853:	e8 c4 ff ff ff       	call   c001281c <Semaphore::Semaphore(int)>
c0012858:	83 c4 08             	add    esp,0x8
c001285b:	90                   	nop
c001285c:	c3                   	ret    
c001285d:	90                   	nop
c001285e:	66 90                	xchg   ax,ax

c0012860 <Process::createThread(void (*)(void*), void*, int)>:
c0012860:	57                   	push   edi
c0012861:	31 c9                	xor    ecx,ecx
c0012863:	56                   	push   esi
c0012864:	53                   	push   ebx
c0012865:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012869:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0012870:	89 f2                	mov    edx,esi
c0012872:	66 90                	xchg   ax,ax
c0012874:	31 c0                	xor    eax,eax
c0012876:	66 89 d0             	mov    ax,dx
c0012879:	83 e2 01             	and    edx,0x1
c001287c:	74 12                	je     c0012890 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001287e:	d1 f8                	sar    eax,1
c0012880:	41                   	inc    ecx
c0012881:	89 c2                	mov    edx,eax
c0012883:	83 f9 10             	cmp    ecx,0x10
c0012886:	75 ec                	jne    c0012874 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0012888:	31 db                	xor    ebx,ebx
c001288a:	89 d8                	mov    eax,ebx
c001288c:	5b                   	pop    ebx
c001288d:	5e                   	pop    esi
c001288e:	5f                   	pop    edi
c001288f:	c3                   	ret    
c0012890:	b8 01 00 00 00       	mov    eax,0x1
c0012895:	d3 e0                	shl    eax,cl
c0012897:	09 c6                	or     esi,eax
c0012899:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001289c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00128a3:	01 c0                	add    eax,eax
c00128a5:	01 c8                	add    eax,ecx
c00128a7:	8d 04 80             	lea    eax,[eax+eax*4]
c00128aa:	01 d8                	add    eax,ebx
c00128ac:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00128b3:	75 0b                	jne    c00128c0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00128b5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00128bf:	90                   	nop
c00128c0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00128c6:	83 ec 08             	sub    esp,0x8
c00128c9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00128cc:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00128cf:	01 c0                	add    eax,eax
c00128d1:	01 c8                	add    eax,ecx
c00128d3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00128d6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00128d9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00128df:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00128e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00128e9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00128ef:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00128f5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00128fc:	89 ca                	mov    edx,ecx
c00128fe:	f7 da                	neg    edx
c0012900:	c1 e2 15             	shl    edx,0x15
c0012903:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0012909:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001290f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012913:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001291d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0012923:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012927:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001292d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0012937:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0012941:	53                   	push   ebx
c0012942:	68 04 2b 02 c0       	push   0xc0022b04
c0012947:	e8 40 95 00 00       	call   c001be8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001294c:	83 c4 10             	add    esp,0x10
c001294f:	89 d8                	mov    eax,ebx
c0012951:	5b                   	pop    ebx
c0012952:	5e                   	pop    esi
c0012953:	5f                   	pop    edi
c0012954:	c3                   	ret    
c0012955:	90                   	nop
c0012956:	66 90                	xchg   ax,ax

c0012958 <Process::createUserThread()>:
c0012958:	83 ec 0c             	sub    esp,0xc
c001295b:	68 80 00 00 00       	push   0x80
c0012960:	6a 00                	push   0x0
c0012962:	68 f8 22 01 c0       	push   0xc00122f8
c0012967:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001296b:	50                   	push   eax
c001296c:	e8 ef fe ff ff       	call   c0012860 <Process::createThread(void (*)(void*), void*, int)>
c0012971:	83 c4 1c             	add    esp,0x1c
c0012974:	c3                   	ret    
c0012975:	8d 76 00             	lea    esi,[esi+0x0]

c0012978 <setupMultitasking(void (*)())>:
c0012978:	56                   	push   esi
c0012979:	53                   	push   ebx
c001297a:	53                   	push   ebx
c001297b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001297f:	eb 13                	jmp    c0012994 <setupMultitasking(void (*)())+0x1c>
c0012981:	8d 76 00             	lea    esi,[esi+0x0]
c0012984:	83 ec 0c             	sub    esp,0xc
c0012987:	68 04 2b 02 c0       	push   0xc0022b04
c001298c:	e8 43 94 00 00       	call   c001bdd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	83 ec 0c             	sub    esp,0xc
c0012997:	68 04 2b 02 c0       	push   0xc0022b04
c001299c:	e8 0f 94 00 00       	call   c001bdb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00129a1:	83 c4 10             	add    esp,0x10
c00129a4:	84 c0                	test   al,al
c00129a6:	74 dc                	je     c0012984 <setupMultitasking(void (*)())+0xc>
c00129a8:	83 ec 0c             	sub    esp,0xc
c00129ab:	68 1f 07 00 00       	push   0x71f
c00129b0:	e8 b0 42 ff ff       	call   c0006c65 <malloc>
c00129b5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00129bc:	89 c3                	mov    ebx,eax
c00129be:	6a 00                	push   0x0
c00129c0:	68 75 e2 01 c0       	push   0xc001e275
c00129c5:	6a 01                	push   0x1
c00129c7:	50                   	push   eax
c00129c8:	e8 87 fc ff ff       	call   c0012654 <Process::Process(bool, char const*, Process*, char**)>
c00129cd:	83 c4 14             	add    esp,0x14
c00129d0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00129d6:	89 1d 10 2b 02 c0    	mov    DWORD PTR ds:0xc0022b10,ebx
c00129dc:	50                   	push   eax
c00129dd:	e8 b3 4f ff ff       	call   c0007995 <setActiveTerminal(VgaText*)>
c00129e2:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00129ea:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00129f4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00129fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00129fd:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0012a07:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0012a0d:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0012a13:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0012a1d:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0012a27:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0012a31:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0012a37:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0012a3d:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0012a47:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0012a4d:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0012a57:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0012a5d:	5a                   	pop    edx
c0012a5e:	59                   	pop    ecx
c0012a5f:	68 71 e2 01 c0       	push   0xc001e271
c0012a64:	50                   	push   eax
c0012a65:	e8 b6 db fe ff       	call   c0000620 <strcpy>
c0012a6a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0012a71:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012a75:	83 c4 14             	add    esp,0x14
c0012a78:	5b                   	pop    ebx
c0012a79:	5e                   	pop    esi
c0012a7a:	e9 0a d8 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0012a7f:	90                   	nop

c0012a80 <schedule()>:
c0012a80:	8b 15 e4 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022ae4
c0012a86:	85 d2                	test   edx,edx
c0012a88:	74 0e                	je     c0012a98 <schedule()+0x18>
c0012a8a:	c7 05 e0 2a 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x1
c0012a94:	c3                   	ret    
c0012a95:	8d 76 00             	lea    esi,[esi+0x0]
c0012a98:	53                   	push   ebx
c0012a99:	83 ec 14             	sub    esp,0x14
c0012a9c:	68 04 2b 02 c0       	push   0xc0022b04
c0012aa1:	e8 0a 93 00 00       	call   c001bdb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012aa6:	83 c4 10             	add    esp,0x10
c0012aa9:	84 c0                	test   al,al
c0012aab:	75 3b                	jne    c0012ae8 <schedule()+0x68>
c0012aad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ab2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0012ab5:	4a                   	dec    edx
c0012ab6:	74 38                	je     c0012af0 <schedule()+0x70>
c0012ab8:	83 ec 0c             	sub    esp,0xc
c0012abb:	68 04 2b 02 c0       	push   0xc0022b04
c0012ac0:	e8 07 93 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012ac5:	c7 04 24 04 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b04
c0012acc:	89 c3                	mov    ebx,eax
c0012ace:	e8 01 93 00 00       	call   c001bdd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012ad3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0012ada:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012add:	e8 6e f8 ff ff       	call   c0012350 <switchToThread(ThreadControlBlock*)>
c0012ae2:	83 c4 10             	add    esp,0x10
c0012ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ae8:	83 c4 08             	add    esp,0x8
c0012aeb:	5b                   	pop    ebx
c0012aec:	c3                   	ret    
c0012aed:	8d 76 00             	lea    esi,[esi+0x0]
c0012af0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012af7:	83 ec 08             	sub    esp,0x8
c0012afa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012aff:	50                   	push   eax
c0012b00:	68 04 2b 02 c0       	push   0xc0022b04
c0012b05:	e8 82 93 00 00       	call   c001be8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012b0a:	83 c4 10             	add    esp,0x10
c0012b0d:	eb a9                	jmp    c0012ab8 <schedule()+0x38>
c0012b0f:	90                   	nop

c0012b10 <Semaphore::tryAcquire()>:
c0012b10:	53                   	push   ebx
c0012b11:	83 ec 08             	sub    esp,0x8
c0012b14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012b18:	fa                   	cli    
c0012b19:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0012b1e:	8d 50 01             	lea    edx,[eax+0x1]
c0012b21:	89 15 e8 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae8,edx
c0012b27:	8b 15 e4 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022ae4
c0012b2d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0012b30:	89 1d e4 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae4,ebx
c0012b36:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0012b39:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0012b3b:	7c 33                	jl     c0012b70 <Semaphore::tryAcquire()+0x60>
c0012b3d:	89 15 e4 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae4,edx
c0012b43:	85 d2                	test   edx,edx
c0012b45:	75 0d                	jne    c0012b54 <Semaphore::tryAcquire()+0x44>
c0012b47:	8b 15 e0 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022ae0
c0012b4d:	85 d2                	test   edx,edx
c0012b4f:	75 6b                	jne    c0012bbc <Semaphore::tryAcquire()+0xac>
c0012b51:	8d 76 00             	lea    esi,[esi+0x0]
c0012b54:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012b59:	85 c0                	test   eax,eax
c0012b5b:	74 0b                	je     c0012b68 <Semaphore::tryAcquire()+0x58>
c0012b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0012b60:	31 c0                	xor    eax,eax
c0012b62:	83 c4 08             	add    esp,0x8
c0012b65:	5b                   	pop    ebx
c0012b66:	c3                   	ret    
c0012b67:	90                   	nop
c0012b68:	fb                   	sti    
c0012b69:	83 c4 08             	add    esp,0x8
c0012b6c:	5b                   	pop    ebx
c0012b6d:	c3                   	ret    
c0012b6e:	66 90                	xchg   ax,ax
c0012b70:	43                   	inc    ebx
c0012b71:	89 15 e4 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae4,edx
c0012b77:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0012b7a:	85 d2                	test   edx,edx
c0012b7c:	75 22                	jne    c0012ba0 <Semaphore::tryAcquire()+0x90>
c0012b7e:	8b 0d e0 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ae0
c0012b84:	85 c9                	test   ecx,ecx
c0012b86:	74 18                	je     c0012ba0 <Semaphore::tryAcquire()+0x90>
c0012b88:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c0012b92:	e8 e9 fe ff ff       	call   c0012a80 <schedule()>
c0012b97:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0012b9c:	48                   	dec    eax
c0012b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0012ba0:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012ba5:	85 c0                	test   eax,eax
c0012ba7:	75 0b                	jne    c0012bb4 <Semaphore::tryAcquire()+0xa4>
c0012ba9:	fb                   	sti    
c0012baa:	b0 01                	mov    al,0x1
c0012bac:	83 c4 08             	add    esp,0x8
c0012baf:	5b                   	pop    ebx
c0012bb0:	c3                   	ret    
c0012bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb4:	b0 01                	mov    al,0x1
c0012bb6:	83 c4 08             	add    esp,0x8
c0012bb9:	5b                   	pop    ebx
c0012bba:	c3                   	ret    
c0012bbb:	90                   	nop
c0012bbc:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c0012bc6:	e8 b5 fe ff ff       	call   c0012a80 <schedule()>
c0012bcb:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0012bd0:	48                   	dec    eax
c0012bd1:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012bd6:	85 c0                	test   eax,eax
c0012bd8:	75 86                	jne    c0012b60 <Semaphore::tryAcquire()+0x50>
c0012bda:	eb 8c                	jmp    c0012b68 <Semaphore::tryAcquire()+0x58>

c0012bdc <Semaphore::assertLocked(char const*)>:
c0012bdc:	83 ec 0c             	sub    esp,0xc
c0012bdf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012be3:	fa                   	cli    
c0012be4:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0012bea:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c0012bef:	8d 48 01             	lea    ecx,[eax+0x1]
c0012bf2:	89 0d e4 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae4,ecx
c0012bf8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012bfa:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0012bfd:	7c 29                	jl     c0012c28 <Semaphore::assertLocked(char const*)+0x4c>
c0012bff:	90                   	nop
c0012c00:	a3 e4 2a 02 c0       	mov    ds:0xc0022ae4,eax
c0012c05:	85 c0                	test   eax,eax
c0012c07:	75 0b                	jne    c0012c14 <Semaphore::assertLocked(char const*)+0x38>
c0012c09:	a1 e0 2a 02 c0       	mov    eax,ds:0xc0022ae0
c0012c0e:	85 c0                	test   eax,eax
c0012c10:	75 2e                	jne    c0012c40 <Semaphore::assertLocked(char const*)+0x64>
c0012c12:	66 90                	xchg   ax,ax
c0012c14:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0012c19:	48                   	dec    eax
c0012c1a:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012c1f:	75 03                	jne    c0012c24 <Semaphore::assertLocked(char const*)+0x48>
c0012c21:	fb                   	sti    
c0012c22:	66 90                	xchg   ax,ax
c0012c24:	83 c4 0c             	add    esp,0xc
c0012c27:	c3                   	ret    
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012c2f:	52                   	push   edx
c0012c30:	e8 6c c9 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0012c35:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	48                   	dec    eax
c0012c3e:	eb c0                	jmp    c0012c00 <Semaphore::assertLocked(char const*)+0x24>
c0012c40:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c0012c4a:	e8 31 fe ff ff       	call   c0012a80 <schedule()>
c0012c4f:	eb c3                	jmp    c0012c14 <Semaphore::assertLocked(char const*)+0x38>
c0012c51:	8d 76 00             	lea    esi,[esi+0x0]

c0012c54 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0012c54:	83 ec 0c             	sub    esp,0xc
c0012c57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c60:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012c63:	e8 18 fe ff ff       	call   c0012a80 <schedule()>
c0012c68:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0012c6d:	48                   	dec    eax
c0012c6e:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012c73:	75 03                	jne    c0012c78 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0012c75:	fb                   	sti    
c0012c76:	66 90                	xchg   ax,ax
c0012c78:	83 c4 0c             	add    esp,0xc
c0012c7b:	c3                   	ret    

c0012c7c <blockTask(TaskState)>:
c0012c7c:	83 ec 0c             	sub    esp,0xc
c0012c7f:	fa                   	cli    
c0012c80:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0012c86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c8f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012c92:	e8 e9 fd ff ff       	call   c0012a80 <schedule()>
c0012c97:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0012c9c:	48                   	dec    eax
c0012c9d:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012ca2:	75 04                	jne    c0012ca8 <blockTask(TaskState)+0x2c>
c0012ca4:	fb                   	sti    
c0012ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ca8:	83 c4 0c             	add    esp,0xc
c0012cab:	c3                   	ret    

c0012cac <waitTask(int, int*, int)>:
c0012cac:	83 ec 18             	sub    esp,0x18
c0012caf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012cb8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0012cbb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012cbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cc4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0012cc7:	6a 07                	push   0x7
c0012cc9:	e8 ae ff ff ff       	call   c0012c7c <blockTask(TaskState)>
c0012cce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cd3:	83 c4 10             	add    esp,0x10
c0012cd6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0012cd9:	85 d2                	test   edx,edx
c0012cdb:	74 0b                	je     c0012ce8 <waitTask(int, int*, int)+0x3c>
c0012cdd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0012ce0:	89 02                	mov    DWORD PTR [edx],eax
c0012ce2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ce7:	90                   	nop
c0012ce8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0012ceb:	83 c4 0c             	add    esp,0xc
c0012cee:	c3                   	ret    
c0012cef:	90                   	nop

c0012cf0 <milliTenthSleepUntil(unsigned int)>:
c0012cf0:	83 ec 0c             	sub    esp,0xc
c0012cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf7:	39 05 ec 1b 02 c0    	cmp    DWORD PTR ds:0xc0021bec,eax
c0012cfd:	76 05                	jbe    c0012d04 <milliTenthSleepUntil(unsigned int)+0x14>
c0012cff:	90                   	nop
c0012d00:	83 c4 0c             	add    esp,0xc
c0012d03:	c3                   	ret    
c0012d04:	fa                   	cli    
c0012d05:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0012d0b:	83 ec 08             	sub    esp,0x8
c0012d0e:	ff 05 e4 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae4
c0012d14:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012d1a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0012d1d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012d23:	52                   	push   edx
c0012d24:	68 f8 2a 02 c0       	push   0xc0022af8
c0012d29:	e8 5e 91 00 00       	call   c001be8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012d2e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012d35:	e8 42 ff ff ff       	call   c0012c7c <blockTask(TaskState)>
c0012d3a:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c0012d3f:	83 c4 10             	add    esp,0x10
c0012d42:	48                   	dec    eax
c0012d43:	a3 e4 2a 02 c0       	mov    ds:0xc0022ae4,eax
c0012d48:	85 c0                	test   eax,eax
c0012d4a:	75 0c                	jne    c0012d58 <milliTenthSleepUntil(unsigned int)+0x68>
c0012d4c:	a1 e0 2a 02 c0       	mov    eax,ds:0xc0022ae0
c0012d51:	85 c0                	test   eax,eax
c0012d53:	75 17                	jne    c0012d6c <milliTenthSleepUntil(unsigned int)+0x7c>
c0012d55:	8d 76 00             	lea    esi,[esi+0x0]
c0012d58:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0012d5d:	48                   	dec    eax
c0012d5e:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012d63:	75 9b                	jne    c0012d00 <milliTenthSleepUntil(unsigned int)+0x10>
c0012d65:	fb                   	sti    
c0012d66:	83 c4 0c             	add    esp,0xc
c0012d69:	c3                   	ret    
c0012d6a:	66 90                	xchg   ax,ax
c0012d6c:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c0012d76:	e8 05 fd ff ff       	call   c0012a80 <schedule()>
c0012d7b:	eb db                	jmp    c0012d58 <milliTenthSleepUntil(unsigned int)+0x68>
c0012d7d:	8d 76 00             	lea    esi,[esi+0x0]

c0012d80 <milliTenthSleep(unsigned int)>:
c0012d80:	a1 ec 1b 02 c0       	mov    eax,ds:0xc0021bec
c0012d85:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0012d89:	e9 62 ff ff ff       	jmp    c0012cf0 <milliTenthSleepUntil(unsigned int)>
c0012d8e:	66 90                	xchg   ax,ax

c0012d90 <sleep(unsigned int)>:
c0012d90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d94:	8d 04 80             	lea    eax,[eax+eax*4]
c0012d97:	8d 04 80             	lea    eax,[eax+eax*4]
c0012d9a:	8d 04 80             	lea    eax,[eax+eax*4]
c0012d9d:	8d 04 80             	lea    eax,[eax+eax*4]
c0012da0:	c1 e0 04             	shl    eax,0x4
c0012da3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012da7:	eb d7                	jmp    c0012d80 <milliTenthSleep(unsigned int)>
c0012da9:	90                   	nop
c0012daa:	66 90                	xchg   ax,ax

c0012dac <Semaphore::acquire()>:
c0012dac:	83 ec 0c             	sub    esp,0xc
c0012daf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012db3:	fa                   	cli    
c0012db4:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c0012db9:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0012dbf:	8d 48 01             	lea    ecx,[eax+0x1]
c0012dc2:	89 0d e4 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae4,ecx
c0012dc8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0012dcb:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0012dcd:	7d 2d                	jge    c0012dfc <Semaphore::acquire()+0x50>
c0012dcf:	41                   	inc    ecx
c0012dd0:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0012dd3:	90                   	nop
c0012dd4:	a3 e4 2a 02 c0       	mov    ds:0xc0022ae4,eax
c0012dd9:	85 c0                	test   eax,eax
c0012ddb:	75 0b                	jne    c0012de8 <Semaphore::acquire()+0x3c>
c0012ddd:	a1 e0 2a 02 c0       	mov    eax,ds:0xc0022ae0
c0012de2:	85 c0                	test   eax,eax
c0012de4:	75 62                	jne    c0012e48 <Semaphore::acquire()+0x9c>
c0012de6:	66 90                	xchg   ax,ax
c0012de8:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0012ded:	48                   	dec    eax
c0012dee:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012df3:	75 03                	jne    c0012df8 <Semaphore::acquire()+0x4c>
c0012df5:	fb                   	sti    
c0012df6:	66 90                	xchg   ax,ax
c0012df8:	83 c4 0c             	add    esp,0xc
c0012dfb:	c3                   	ret    
c0012dfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012e08:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0012e0b:	85 c9                	test   ecx,ecx
c0012e0d:	74 4d                	je     c0012e5c <Semaphore::acquire()+0xb0>
c0012e0f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0012e12:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012e18:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0012e1b:	90                   	nop
c0012e1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e21:	83 ec 0c             	sub    esp,0xc
c0012e24:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0012e27:	68 f0 e2 01 c0       	push   0xc001e2f0
c0012e2c:	e8 f7 6b ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0012e31:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0012e38:	e8 3f fe ff ff       	call   c0012c7c <blockTask(TaskState)>
c0012e3d:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c0012e42:	83 c4 10             	add    esp,0x10
c0012e45:	48                   	dec    eax
c0012e46:	eb 8c                	jmp    c0012dd4 <Semaphore::acquire()+0x28>
c0012e48:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c0012e52:	e8 29 fc ff ff       	call   c0012a80 <schedule()>
c0012e57:	eb 8f                	jmp    c0012de8 <Semaphore::acquire()+0x3c>
c0012e59:	8d 76 00             	lea    esi,[esi+0x0]
c0012e5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012e64:	eb b6                	jmp    c0012e1c <Semaphore::acquire()+0x70>
c0012e66:	66 90                	xchg   ax,ax

c0012e68 <taskReturned>:
c0012e68:	83 ec 18             	sub    esp,0x18
c0012e6b:	68 10 e3 01 c0       	push   0xc001e310
c0012e70:	e8 2c c7 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0012e75:	83 c4 10             	add    esp,0x10
c0012e78:	83 ec 0c             	sub    esp,0xc
c0012e7b:	6a 02                	push   0x2
c0012e7d:	e8 fa fd ff ff       	call   c0012c7c <blockTask(TaskState)>
c0012e82:	fa                   	cli    
c0012e83:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0012e89:	e8 f2 fb ff ff       	call   c0012a80 <schedule()>
c0012e8e:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0012e93:	83 c4 10             	add    esp,0x10
c0012e96:	48                   	dec    eax
c0012e97:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012e9c:	85 c0                	test   eax,eax
c0012e9e:	75 d8                	jne    c0012e78 <taskReturned+0x10>
c0012ea0:	fb                   	sti    
c0012ea1:	eb d5                	jmp    c0012e78 <taskReturned+0x10>
c0012ea3:	90                   	nop

c0012ea4 <Thr::processFromPID(int)>:
c0012ea4:	57                   	push   edi
c0012ea5:	56                   	push   esi
c0012ea6:	53                   	push   ebx
c0012ea7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012eab:	fa                   	cli    
c0012eac:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0012eb2:	83 ec 0c             	sub    esp,0xc
c0012eb5:	68 04 2b 02 c0       	push   0xc0022b04
c0012eba:	e8 0d 8f 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012ebf:	83 c4 10             	add    esp,0x10
c0012ec2:	89 c7                	mov    edi,eax
c0012ec4:	eb 16                	jmp    c0012edc <Thr::processFromPID(int)+0x38>
c0012ec6:	66 90                	xchg   ax,ax
c0012ec8:	83 ec 0c             	sub    esp,0xc
c0012ecb:	68 04 2b 02 c0       	push   0xc0022b04
c0012ed0:	e8 f7 8e 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012ed5:	83 c4 10             	add    esp,0x10
c0012ed8:	39 f8                	cmp    eax,edi
c0012eda:	74 4c                	je     c0012f28 <Thr::processFromPID(int)+0x84>
c0012edc:	83 ec 0c             	sub    esp,0xc
c0012edf:	68 04 2b 02 c0       	push   0xc0022b04
c0012ee4:	e8 e3 8e 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012ee9:	c7 04 24 04 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b04
c0012ef0:	89 c3                	mov    ebx,eax
c0012ef2:	e8 dd 8e 00 00       	call   c001bdd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012ef7:	58                   	pop    eax
c0012ef8:	5a                   	pop    edx
c0012ef9:	53                   	push   ebx
c0012efa:	68 04 2b 02 c0       	push   0xc0022b04
c0012eff:	e8 88 8f 00 00       	call   c001be8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012f04:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012f07:	83 c4 10             	add    esp,0x10
c0012f0a:	39 30                	cmp    DWORD PTR [eax],esi
c0012f0c:	75 ba                	jne    c0012ec8 <Thr::processFromPID(int)+0x24>
c0012f0e:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0012f13:	48                   	dec    eax
c0012f14:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012f19:	74 09                	je     c0012f24 <Thr::processFromPID(int)+0x80>
c0012f1b:	90                   	nop
c0012f1c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012f1f:	5b                   	pop    ebx
c0012f20:	5e                   	pop    esi
c0012f21:	5f                   	pop    edi
c0012f22:	c3                   	ret    
c0012f23:	90                   	nop
c0012f24:	fb                   	sti    
c0012f25:	eb f5                	jmp    c0012f1c <Thr::processFromPID(int)+0x78>
c0012f27:	90                   	nop
c0012f28:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0012f2d:	48                   	dec    eax
c0012f2e:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012f33:	75 07                	jne    c0012f3c <Thr::processFromPID(int)+0x98>
c0012f35:	fb                   	sti    
c0012f36:	5b                   	pop    ebx
c0012f37:	5e                   	pop    esi
c0012f38:	5f                   	pop    edi
c0012f39:	c3                   	ret    
c0012f3a:	66 90                	xchg   ax,ax
c0012f3c:	5b                   	pop    ebx
c0012f3d:	31 c0                	xor    eax,eax
c0012f3f:	5e                   	pop    esi
c0012f40:	5f                   	pop    edi
c0012f41:	c3                   	ret    
c0012f42:	66 90                	xchg   ax,ax

c0012f44 <unblockTask(ThreadControlBlock*)>:
c0012f44:	53                   	push   ebx
c0012f45:	83 ec 08             	sub    esp,0x8
c0012f48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012f4c:	fa                   	cli    
c0012f4d:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0012f53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012f56:	85 c0                	test   eax,eax
c0012f58:	74 66                	je     c0012fc0 <unblockTask(ThreadControlBlock*)+0x7c>
c0012f5a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012f5d:	48                   	dec    eax
c0012f5e:	74 38                	je     c0012f98 <unblockTask(ThreadControlBlock*)+0x54>
c0012f60:	83 ec 0c             	sub    esp,0xc
c0012f63:	68 04 2b 02 c0       	push   0xc0022b04
c0012f68:	e8 5f 8e 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012f6d:	83 c4 10             	add    esp,0x10
c0012f70:	85 c0                	test   eax,eax
c0012f72:	75 1c                	jne    c0012f90 <unblockTask(ThreadControlBlock*)+0x4c>
c0012f74:	eb 5e                	jmp    c0012fd4 <unblockTask(ThreadControlBlock*)+0x90>
c0012f76:	66 90                	xchg   ax,ax
c0012f78:	83 ec 08             	sub    esp,0x8
c0012f7b:	50                   	push   eax
c0012f7c:	68 04 2b 02 c0       	push   0xc0022b04
c0012f81:	e8 f6 91 00 00       	call   c001c17c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012f86:	83 c4 10             	add    esp,0x10
c0012f89:	85 c0                	test   eax,eax
c0012f8b:	74 47                	je     c0012fd4 <unblockTask(ThreadControlBlock*)+0x90>
c0012f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0012f90:	39 c3                	cmp    ebx,eax
c0012f92:	75 e4                	jne    c0012f78 <unblockTask(ThreadControlBlock*)+0x34>
c0012f94:	eb 12                	jmp    c0012fa8 <unblockTask(ThreadControlBlock*)+0x64>
c0012f96:	66 90                	xchg   ax,ax
c0012f98:	83 ec 0c             	sub    esp,0xc
c0012f9b:	68 93 e2 01 c0       	push   0xc001e293
c0012fa0:	e8 83 6a ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0012fa5:	83 c4 10             	add    esp,0x10
c0012fa8:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0012fad:	48                   	dec    eax
c0012fae:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0012fb3:	75 03                	jne    c0012fb8 <unblockTask(ThreadControlBlock*)+0x74>
c0012fb5:	fb                   	sti    
c0012fb6:	66 90                	xchg   ax,ax
c0012fb8:	83 c4 08             	add    esp,0x8
c0012fbb:	5b                   	pop    ebx
c0012fbc:	c3                   	ret    
c0012fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0012fc0:	83 ec 0c             	sub    esp,0xc
c0012fc3:	68 7c e2 01 c0       	push   0xc001e27c
c0012fc8:	e8 5b 6a ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0012fcd:	83 c4 10             	add    esp,0x10
c0012fd0:	eb d6                	jmp    c0012fa8 <unblockTask(ThreadControlBlock*)+0x64>
c0012fd2:	66 90                	xchg   ax,ax
c0012fd4:	83 ec 08             	sub    esp,0x8
c0012fd7:	53                   	push   ebx
c0012fd8:	68 04 2b 02 c0       	push   0xc0022b04
c0012fdd:	e8 aa 8e 00 00       	call   c001be8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012fe2:	83 c4 10             	add    esp,0x10
c0012fe5:	eb c1                	jmp    c0012fa8 <unblockTask(ThreadControlBlock*)+0x64>
c0012fe7:	90                   	nop

c0012fe8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0012fe8:	55                   	push   ebp
c0012fe9:	57                   	push   edi
c0012fea:	56                   	push   esi
c0012feb:	53                   	push   ebx
c0012fec:	83 ec 1c             	sub    esp,0x1c
c0012fef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0012ff3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012ff6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0012ffc:	85 ed                	test   ebp,ebp
c0012ffe:	7e 24                	jle    c0013024 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013000:	31 f6                	xor    esi,esi
c0013002:	66 90                	xchg   ax,ax
c0013004:	83 ec 0c             	sub    esp,0xc
c0013007:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001300e:	46                   	inc    esi
c001300f:	57                   	push   edi
c0013010:	e8 60 3c ff ff       	call   c0006c75 <free>
c0013015:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013018:	83 c4 10             	add    esp,0x10
c001301b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013021:	7f e1                	jg     c0013004 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013023:	90                   	nop
c0013024:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001302e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013033:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013036:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013039:	d3 c0                	rol    eax,cl
c001303b:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013042:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013045:	89 f7                	mov    edi,esi
c0013047:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001304f:	0f 85 77 01 00 00    	jne    c00131cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013055:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001305b:	85 ed                	test   ebp,ebp
c001305d:	74 1d                	je     c001307c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001305f:	83 ec 0c             	sub    esp,0xc
c0013062:	55                   	push   ebp
c0013063:	e8 de c2 ff ff       	call   c000f346 <EnvVarContainer::~EnvVarContainer()>
c0013068:	59                   	pop    ecx
c0013069:	5e                   	pop    esi
c001306a:	6a 0c                	push   0xc
c001306c:	55                   	push   ebp
c001306d:	e8 c0 68 ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c0013072:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	89 f7                	mov    edi,esi
c001307a:	66 90                	xchg   ax,ax
c001307c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013082:	85 c0                	test   eax,eax
c0013084:	0f 84 b6 00 00 00    	je     c0013140 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001308a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001308d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013091:	31 c9                	xor    ecx,ecx
c0013093:	eb 17                	jmp    c00130ac <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013095:	8d 76 00             	lea    esi,[esi+0x0]
c0013098:	41                   	inc    ecx
c0013099:	83 f9 10             	cmp    ecx,0x10
c001309c:	0f 84 9e 00 00 00    	je     c0013140 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00130a2:	66 90                	xchg   ax,ax
c00130a4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00130aa:	66 90                	xchg   ax,ax
c00130ac:	31 d2                	xor    edx,edx
c00130ae:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c00130b5:	d3 fa                	sar    edx,cl
c00130b7:	83 e2 01             	and    edx,0x1
c00130ba:	74 dc                	je     c0013098 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00130bc:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00130bf:	01 d2                	add    edx,edx
c00130c1:	01 ca                	add    edx,ecx
c00130c3:	8d 14 92             	lea    edx,[edx+edx*4]
c00130c6:	01 d0                	add    eax,edx
c00130c8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00130ce:	83 fd 07             	cmp    ebp,0x7
c00130d1:	75 c5                	jne    c0013098 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00130d3:	05 40 02 00 00       	add    eax,0x240
c00130d8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00130db:	83 fd ff             	cmp    ebp,0xffffffff
c00130de:	0f 8c f0 00 00 00    	jl     c00131d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00130e4:	0f 84 ae 01 00 00    	je     c0013298 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00130ea:	85 ed                	test   ebp,ebp
c00130ec:	0f 84 92 01 00 00    	je     c0013284 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00130f2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00130f4:	75 a2                	jne    c0013098 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00130f6:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00130fc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013100:	01 d0                	add    eax,edx
c0013102:	66 90                	xchg   ax,ax
c0013104:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013108:	83 ec 0c             	sub    esp,0xc
c001310b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013111:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013114:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001311a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013121:	50                   	push   eax
c0013122:	e8 1d fe ff ff       	call   c0012f44 <unblockTask(ThreadControlBlock*)>
c0013127:	83 c4 10             	add    esp,0x10
c001312a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001312d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013131:	89 f7                	mov    edi,esi
c0013133:	41                   	inc    ecx
c0013134:	83 f9 10             	cmp    ecx,0x10
c0013137:	0f 85 67 ff ff ff    	jne    c00130a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001313d:	8d 76 00             	lea    esi,[esi+0x0]
c0013140:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013146:	85 c0                	test   eax,eax
c0013148:	74 62                	je     c00131ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c001314a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013150:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013156:	74 54                	je     c00131ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013158:	83 ec 0c             	sub    esp,0xc
c001315b:	68 04 2b 02 c0       	push   0xc0022b04
c0013160:	e8 67 8c 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013165:	c7 04 24 04 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b04
c001316c:	89 c7                	mov    edi,eax
c001316e:	e8 3d 8c 00 00       	call   c001bdb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013173:	83 c4 10             	add    esp,0x10
c0013176:	84 c0                	test   al,al
c0013178:	0f 84 ce 00 00 00    	je     c001324c <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001317e:	66 90                	xchg   ax,ax
c0013180:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013183:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013189:	85 d2                	test   edx,edx
c001318b:	74 0f                	je     c001319c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c001318d:	83 ec 0c             	sub    esp,0xc
c0013190:	8b 02                	mov    eax,DWORD PTR [edx]
c0013192:	52                   	push   edx
c0013193:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013196:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013199:	83 c4 10             	add    esp,0x10
c001319c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00131a6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00131a9:	8d 76 00             	lea    esi,[esi+0x0]
c00131ac:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00131b2:	85 db                	test   ebx,ebx
c00131b4:	74 16                	je     c00131cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00131b6:	83 ec 0c             	sub    esp,0xc
c00131b9:	53                   	push   ebx
c00131ba:	e8 d7 5a ff ff       	call   c0008c96 <VAS::~VAS()>
c00131bf:	58                   	pop    eax
c00131c0:	5a                   	pop    edx
c00131c1:	6a 14                	push   0x14
c00131c3:	53                   	push   ebx
c00131c4:	e8 69 67 ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c00131c9:	83 c4 10             	add    esp,0x10
c00131cc:	83 c4 1c             	add    esp,0x1c
c00131cf:	5b                   	pop    ebx
c00131d0:	5e                   	pop    esi
c00131d1:	5f                   	pop    edi
c00131d2:	5d                   	pop    ebp
c00131d3:	c3                   	ret    
c00131d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00131d8:	83 ec 0c             	sub    esp,0xc
c00131db:	68 44 e3 01 c0       	push   0xc001e344
c00131e0:	e8 bc c3 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c00131e5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00131e8:	83 c4 10             	add    esp,0x10
c00131eb:	89 f7                	mov    edi,esi
c00131ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00131f1:	e9 a2 fe ff ff       	jmp    c0013098 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00131f6:	66 90                	xchg   ax,ax
c00131f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00131fe:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013204:	75 1e                	jne    c0013224 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013206:	83 ec 0c             	sub    esp,0xc
c0013209:	68 ac e3 01 c0       	push   0xc001e3ac
c001320e:	e8 15 68 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0013213:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001321a:	e8 5d fa ff ff       	call   c0012c7c <blockTask(TaskState)>
c001321f:	83 c4 10             	add    esp,0x10
c0013222:	66 90                	xchg   ax,ax
c0013224:	83 ec 08             	sub    esp,0x8
c0013227:	56                   	push   esi
c0013228:	68 04 2b 02 c0       	push   0xc0022b04
c001322d:	e8 5a 8c 00 00       	call   c001be8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013232:	c7 04 24 04 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b04
c0013239:	e8 8e 8b 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001323e:	83 c4 10             	add    esp,0x10
c0013241:	39 f8                	cmp    eax,edi
c0013243:	0f 84 37 ff ff ff    	je     c0013180 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013249:	8d 76 00             	lea    esi,[esi+0x0]
c001324c:	83 ec 0c             	sub    esp,0xc
c001324f:	68 04 2b 02 c0       	push   0xc0022b04
c0013254:	e8 73 8b 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013259:	c7 04 24 04 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b04
c0013260:	89 c6                	mov    esi,eax
c0013262:	e8 6d 8b 00 00       	call   c001bdd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013267:	83 c4 10             	add    esp,0x10
c001326a:	39 f3                	cmp    ebx,esi
c001326c:	74 b6                	je     c0013224 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001326e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013271:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013274:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001327a:	75 a8                	jne    c0013224 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001327c:	e9 77 ff ff ff       	jmp    c00131f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013281:	8d 76 00             	lea    esi,[esi+0x0]
c0013284:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013288:	83 ec 0c             	sub    esp,0xc
c001328b:	68 78 e3 01 c0       	push   0xc001e378
c0013290:	e9 4b ff ff ff       	jmp    c00131e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013295:	8d 76 00             	lea    esi,[esi+0x0]
c0013298:	8b 36                	mov    esi,DWORD PTR [esi]
c001329a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001329e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00132a1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00132a4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00132aa:	01 d7                	add    edi,edx
c00132ac:	89 f8                	mov    eax,edi
c00132ae:	e9 51 fe ff ff       	jmp    c0013104 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c00132b3:	90                   	nop

c00132b4 <cleanerTaskFunction(void*)>:
c00132b4:	53                   	push   ebx
c00132b5:	83 ec 08             	sub    esp,0x8
c00132b8:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c00132bd:	48                   	dec    eax
c00132be:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c00132c3:	75 03                	jne    c00132c8 <cleanerTaskFunction(void*)+0x14>
c00132c5:	fb                   	sti    
c00132c6:	66 90                	xchg   ax,ax
c00132c8:	fa                   	cli    
c00132c9:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c00132ce:	80 3d cc 2a 02 c0 00 	cmp    BYTE PTR ds:0xc0022acc,0x0
c00132d5:	8d 50 01             	lea    edx,[eax+0x1]
c00132d8:	89 15 e8 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae8,edx
c00132de:	0f 84 ac 00 00 00    	je     c0013390 <cleanerTaskFunction(void*)+0xdc>
c00132e4:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c00132e9:	85 c0                	test   eax,eax
c00132eb:	75 03                	jne    c00132f0 <cleanerTaskFunction(void*)+0x3c>
c00132ed:	fb                   	sti    
c00132ee:	66 90                	xchg   ax,ax
c00132f0:	c6 05 cc 2a 02 c0 00 	mov    BYTE PTR ds:0xc0022acc,0x0
c00132f7:	fa                   	cli    
c00132f8:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c00132fe:	ff 05 e4 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae4
c0013304:	fa                   	cli    
c0013305:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c001330b:	eb 2b                	jmp    c0013338 <cleanerTaskFunction(void*)+0x84>
c001330d:	8d 76 00             	lea    esi,[esi+0x0]
c0013310:	83 ec 0c             	sub    esp,0xc
c0013313:	68 ec 2a 02 c0       	push   0xc0022aec
c0013318:	e8 af 8a 00 00       	call   c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001331d:	c7 04 24 ec 2a 02 c0 	mov    DWORD PTR [esp],0xc0022aec
c0013324:	89 c3                	mov    ebx,eax
c0013326:	e8 a9 8a 00 00       	call   c001bdd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001332b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001332e:	e8 b5 fc ff ff       	call   c0012fe8 <cleanupTerminatedTask(ThreadControlBlock*)>
c0013333:	83 c4 10             	add    esp,0x10
c0013336:	66 90                	xchg   ax,ax
c0013338:	83 ec 0c             	sub    esp,0xc
c001333b:	68 ec 2a 02 c0       	push   0xc0022aec
c0013340:	e8 6b 8a 00 00       	call   c001bdb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013345:	83 c4 10             	add    esp,0x10
c0013348:	84 c0                	test   al,al
c001334a:	74 c4                	je     c0013310 <cleanerTaskFunction(void*)+0x5c>
c001334c:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0013351:	48                   	dec    eax
c0013352:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0013357:	75 03                	jne    c001335c <cleanerTaskFunction(void*)+0xa8>
c0013359:	fb                   	sti    
c001335a:	66 90                	xchg   ax,ax
c001335c:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c0013361:	48                   	dec    eax
c0013362:	a3 e4 2a 02 c0       	mov    ds:0xc0022ae4,eax
c0013367:	0f 85 4b ff ff ff    	jne    c00132b8 <cleanerTaskFunction(void*)+0x4>
c001336d:	a1 e0 2a 02 c0       	mov    eax,ds:0xc0022ae0
c0013372:	85 c0                	test   eax,eax
c0013374:	0f 84 3e ff ff ff    	je     c00132b8 <cleanerTaskFunction(void*)+0x4>
c001337a:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c0013384:	e8 f7 f6 ff ff       	call   c0012a80 <schedule()>
c0013389:	e9 2a ff ff ff       	jmp    c00132b8 <cleanerTaskFunction(void*)+0x4>
c001338e:	66 90                	xchg   ax,ax
c0013390:	83 ec 0c             	sub    esp,0xc
c0013393:	6a 02                	push   0x2
c0013395:	e8 ba f8 ff ff       	call   c0012c54 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001339a:	83 c4 10             	add    esp,0x10
c001339d:	e9 4e ff ff ff       	jmp    c00132f0 <cleanerTaskFunction(void*)+0x3c>
c00133a2:	66 90                	xchg   ax,ax

c00133a4 <terminateTask(int)>:
c00133a4:	83 ec 14             	sub    esp,0x14
c00133a7:	fa                   	cli    
c00133a8:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c00133ae:	ff 05 e4 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae4
c00133b4:	fa                   	cli    
c00133b5:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c00133bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00133bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133c4:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00133c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133cc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00133cf:	50                   	push   eax
c00133d0:	68 ec 2a 02 c0       	push   0xc0022aec
c00133d5:	e8 b2 8a 00 00       	call   c001be8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00133da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133df:	83 c4 10             	add    esp,0x10
c00133e2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00133e9:	a1 c8 2a 02 c0       	mov    eax,ds:0xc0022ac8
c00133ee:	85 c0                	test   eax,eax
c00133f0:	74 5e                	je     c0013450 <terminateTask(int)+0xac>
c00133f2:	83 ec 0c             	sub    esp,0xc
c00133f5:	c6 05 cc 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022acc,0x1
c00133fc:	50                   	push   eax
c00133fd:	e8 42 fb ff ff       	call   c0012f44 <unblockTask(ThreadControlBlock*)>
c0013402:	83 c4 10             	add    esp,0x10
c0013405:	8d 76 00             	lea    esi,[esi+0x0]
c0013408:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c001340d:	48                   	dec    eax
c001340e:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0013413:	75 03                	jne    c0013418 <terminateTask(int)+0x74>
c0013415:	fb                   	sti    
c0013416:	66 90                	xchg   ax,ax
c0013418:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c001341d:	48                   	dec    eax
c001341e:	a3 e4 2a 02 c0       	mov    ds:0xc0022ae4,eax
c0013423:	75 0b                	jne    c0013430 <terminateTask(int)+0x8c>
c0013425:	83 3d e0 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022ae0,0x0
c001342c:	75 36                	jne    c0013464 <terminateTask(int)+0xc0>
c001342e:	66 90                	xchg   ax,ax
c0013430:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0013435:	48                   	dec    eax
c0013436:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c001343b:	75 03                	jne    c0013440 <terminateTask(int)+0x9c>
c001343d:	fb                   	sti    
c001343e:	66 90                	xchg   ax,ax
c0013440:	fa                   	cli    
c0013441:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0013447:	90                   	nop
c0013448:	e8 33 f6 ff ff       	call   c0012a80 <schedule()>
c001344d:	eb e1                	jmp    c0013430 <terminateTask(int)+0x8c>
c001344f:	90                   	nop
c0013450:	83 ec 0c             	sub    esp,0xc
c0013453:	68 aa e2 01 c0       	push   0xc001e2aa
c0013458:	e8 cb 65 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001345d:	83 c4 10             	add    esp,0x10
c0013460:	eb a6                	jmp    c0013408 <terminateTask(int)+0x64>
c0013462:	66 90                	xchg   ax,ax
c0013464:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c001346e:	eb d8                	jmp    c0013448 <terminateTask(int)+0xa4>

c0013470 <Thr::terminateFromIRQ(int)>:
c0013470:	83 ec 18             	sub    esp,0x18
c0013473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013477:	50                   	push   eax
c0013478:	e8 27 ff ff ff       	call   c00133a4 <terminateTask(int)>
c001347d:	90                   	nop
c001347e:	66 90                	xchg   ax,ax

c0013480 <Semaphore::release()>:
c0013480:	83 ec 0c             	sub    esp,0xc
c0013483:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013487:	fa                   	cli    
c0013488:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c001348d:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0013493:	8d 48 01             	lea    ecx,[eax+0x1]
c0013496:	89 0d e4 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae4,ecx
c001349c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001349f:	85 c9                	test   ecx,ecx
c00134a1:	74 41                	je     c00134e4 <Semaphore::release()+0x64>
c00134a3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00134a6:	83 ec 0c             	sub    esp,0xc
c00134a9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00134ac:	51                   	push   ecx
c00134ad:	e8 92 fa ff ff       	call   c0012f44 <unblockTask(ThreadControlBlock*)>
c00134b2:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c00134b7:	83 c4 10             	add    esp,0x10
c00134ba:	48                   	dec    eax
c00134bb:	90                   	nop
c00134bc:	a3 e4 2a 02 c0       	mov    ds:0xc0022ae4,eax
c00134c1:	85 c0                	test   eax,eax
c00134c3:	75 0b                	jne    c00134d0 <Semaphore::release()+0x50>
c00134c5:	a1 e0 2a 02 c0       	mov    eax,ds:0xc0022ae0
c00134ca:	85 c0                	test   eax,eax
c00134cc:	75 1e                	jne    c00134ec <Semaphore::release()+0x6c>
c00134ce:	66 90                	xchg   ax,ax
c00134d0:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c00134d5:	48                   	dec    eax
c00134d6:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c00134db:	75 03                	jne    c00134e0 <Semaphore::release()+0x60>
c00134dd:	fb                   	sti    
c00134de:	66 90                	xchg   ax,ax
c00134e0:	83 c4 0c             	add    esp,0xc
c00134e3:	c3                   	ret    
c00134e4:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00134e7:	eb d3                	jmp    c00134bc <Semaphore::release()+0x3c>
c00134e9:	8d 76 00             	lea    esi,[esi+0x0]
c00134ec:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c00134f6:	e8 85 f5 ff ff       	call   c0012a80 <schedule()>
c00134fb:	eb d3                	jmp    c00134d0 <Semaphore::release()+0x50>
c00134fd:	8d 76 00             	lea    esi,[esi+0x0]

c0013500 <__static_initialization_and_destruction_0(int, int)>:
c0013500:	83 ec 0c             	sub    esp,0xc
c0013503:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013508:	0f 85 8e 00 00 00    	jne    c001359c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001350e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013516:	0f 85 80 00 00 00    	jne    c001359c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001351c:	83 ec 0c             	sub    esp,0xc
c001351f:	68 04 2b 02 c0       	push   0xc0022b04
c0013524:	e8 0f 8c 00 00       	call   c001c138 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013529:	83 c4 10             	add    esp,0x10
c001352c:	83 ec 04             	sub    esp,0x4
c001352f:	68 c4 ed 01 c0       	push   0xc001edc4
c0013534:	68 04 2b 02 c0       	push   0xc0022b04
c0013539:	68 e8 c0 01 c0       	push   0xc001c0e8
c001353e:	e8 9f 63 ff ff       	call   c00098e2 <__cxa_atexit>
c0013543:	83 c4 10             	add    esp,0x10
c0013546:	83 ec 0c             	sub    esp,0xc
c0013549:	68 f8 2a 02 c0       	push   0xc0022af8
c001354e:	e8 e5 8b 00 00       	call   c001c138 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013553:	83 c4 10             	add    esp,0x10
c0013556:	83 ec 04             	sub    esp,0x4
c0013559:	68 c4 ed 01 c0       	push   0xc001edc4
c001355e:	68 f8 2a 02 c0       	push   0xc0022af8
c0013563:	68 e8 c0 01 c0       	push   0xc001c0e8
c0013568:	e8 75 63 ff ff       	call   c00098e2 <__cxa_atexit>
c001356d:	83 c4 10             	add    esp,0x10
c0013570:	83 ec 0c             	sub    esp,0xc
c0013573:	68 ec 2a 02 c0       	push   0xc0022aec
c0013578:	e8 bb 8b 00 00       	call   c001c138 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001357d:	83 c4 10             	add    esp,0x10
c0013580:	83 ec 04             	sub    esp,0x4
c0013583:	68 c4 ed 01 c0       	push   0xc001edc4
c0013588:	68 ec 2a 02 c0       	push   0xc0022aec
c001358d:	68 e8 c0 01 c0       	push   0xc001c0e8
c0013592:	e8 4b 63 ff ff       	call   c00098e2 <__cxa_atexit>
c0013597:	83 c4 10             	add    esp,0x10
c001359a:	66 90                	xchg   ax,ax
c001359c:	90                   	nop
c001359d:	83 c4 0c             	add    esp,0xc
c00135a0:	c3                   	ret    
c00135a1:	8d 76 00             	lea    esi,[esi+0x0]

c00135a4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00135a4:	83 ec 0c             	sub    esp,0xc
c00135a7:	83 ec 08             	sub    esp,0x8
c00135aa:	68 ff ff 00 00       	push   0xffff
c00135af:	6a 01                	push   0x1
c00135b1:	e8 4a ff ff ff       	call   c0013500 <__static_initialization_and_destruction_0(int, int)>
c00135b6:	83 c4 10             	add    esp,0x10
c00135b9:	83 c4 0c             	add    esp,0xc
c00135bc:	c3                   	ret    

c00135bd <Vm::inbv(unsigned short)>:
c00135bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00135c1:	66 81 fa fe fe       	cmp    dx,0xfefe
c00135c6:	75 06                	jne    c00135ce <Vm::inbv(unsigned short)+0x11>
c00135c8:	a0 4c 2b 02 c0       	mov    al,ds:0xc0022b4c
c00135cd:	c3                   	ret    
c00135ce:	ec                   	in     al,dx
c00135cf:	c3                   	ret    

c00135d0 <Vm::outbv(unsigned short, unsigned char)>:
c00135d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00135d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135d8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00135dd:	75 25                	jne    c0013604 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00135df:	8b 0d 4c 2b 02 c0    	mov    ecx,DWORD PTR ds:0xc0022b4c
c00135e5:	8d 51 01             	lea    edx,[ecx+0x1]
c00135e8:	88 81 60 2b 02 c0    	mov    BYTE PTR [ecx-0x3ffdd4a0],al
c00135ee:	89 15 4c 2b 02 c0    	mov    DWORD PTR ds:0xc0022b4c,edx
c00135f4:	83 fa 20             	cmp    edx,0x20
c00135f7:	75 0c                	jne    c0013605 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00135f9:	c7 05 4c 2b 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0022b4c,0x1f
c0013603:	c3                   	ret    
c0013604:	ee                   	out    dx,al
c0013605:	c3                   	ret    

c0013606 <Vm::realToLinear(unsigned short, unsigned short)>:
c0013606:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001360b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013610:	c1 e0 04             	shl    eax,0x4
c0013613:	01 d0                	add    eax,edx
c0013615:	c3                   	ret    

c0013616 <Vm::getSegment(unsigned int)>:
c0013616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001361a:	c1 e8 10             	shr    eax,0x10
c001361d:	c3                   	ret    

c001361e <Vm::getOffset(unsigned int)>:
c001361e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013622:	c3                   	ret    

c0013623 <Vm::mainloop2()>:
c0013623:	83 ec 18             	sub    esp,0x18
c0013626:	fa                   	cli    
c0013627:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c001362d:	6a 02                	push   0x2
c001362f:	c6 05 45 2b 02 c0 01 	mov    BYTE PTR ds:0xc0022b45,0x1
c0013636:	e8 19 f6 ff ff       	call   c0012c54 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001363b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013640:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013644:	52                   	push   edx
c0013645:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013649:	52                   	push   edx
c001364a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001364e:	52                   	push   edx
c001364f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013653:	50                   	push   eax
c0013654:	e8 d6 cb fe ff       	call   c000022f <goToVM86>
c0013659:	83 c4 2c             	add    esp,0x2c
c001365c:	c3                   	ret    

c001365d <Vm::mainVm8086Loop(void*)>:
c001365d:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0013662:	48                   	dec    eax
c0013663:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0013668:	75 01                	jne    c001366b <Vm::mainVm8086Loop(void*)+0xe>
c001366a:	fb                   	sti    
c001366b:	eb b6                	jmp    c0013623 <Vm::mainloop2()>

c001366d <Vm::mainloop3(unsigned long)>:
c001366d:	83 ec 18             	sub    esp,0x18
c0013670:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013674:	fa                   	cli    
c0013675:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c001367b:	6a 02                	push   0x2
c001367d:	c6 05 44 2b 02 c0 01 	mov    BYTE PTR ds:0xc0022b44,0x1
c0013684:	a3 40 2b 02 c0       	mov    ds:0xc0022b40,eax
c0013689:	e8 c6 f5 ff ff       	call   c0012c54 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001368e:	83 c4 1c             	add    esp,0x1c
c0013691:	eb 90                	jmp    c0013623 <Vm::mainloop2()>

c0013693 <Vm::initialise8086()>:
c0013693:	83 ec 0c             	sub    esp,0xc
c0013696:	68 80 00 00 00       	push   0x80
c001369b:	6a 00                	push   0x0
c001369d:	68 5d 36 01 c0       	push   0xc001365d
c00136a2:	ff 35 10 2b 02 c0    	push   DWORD PTR ds:0xc0022b10
c00136a8:	e8 b3 f1 ff ff       	call   c0012860 <Process::createThread(void (*)(void*), void*, int)>
c00136ad:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00136b4:	a3 48 2b 02 c0       	mov    ds:0xc0022b48,eax
c00136b9:	68 00 01 00 00       	push   0x100
c00136be:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c00136c3:	6a 00                	push   0x0
c00136c5:	6a 00                	push   0x0
c00136c7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00136cd:	e8 22 5a ff ff       	call   c00090f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00136d2:	83 c4 2c             	add    esp,0x2c
c00136d5:	c3                   	ret    

c00136d6 <Vm::finish8086()>:
c00136d6:	53                   	push   ebx
c00136d7:	83 ec 08             	sub    esp,0x8
c00136da:	fa                   	cli    
c00136db:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c00136e1:	80 3d 44 2b 02 c0 00 	cmp    BYTE PTR ds:0xc0022b44,0x0
c00136e8:	75 15                	jne    c00136ff <Vm::finish8086()+0x29>
c00136ea:	e8 91 f3 ff ff       	call   c0012a80 <schedule()>
c00136ef:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c00136f4:	48                   	dec    eax
c00136f5:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c00136fa:	75 de                	jne    c00136da <Vm::finish8086()+0x4>
c00136fc:	fb                   	sti    
c00136fd:	eb db                	jmp    c00136da <Vm::finish8086()+0x4>
c00136ff:	83 ec 0c             	sub    esp,0xc
c0013702:	8b 1d 40 2b 02 c0    	mov    ebx,DWORD PTR ds:0xc0022b40
c0013708:	ff 35 48 2b 02 c0    	push   DWORD PTR ds:0xc0022b48
c001370e:	c6 05 44 2b 02 c0 00 	mov    BYTE PTR ds:0xc0022b44,0x0
c0013715:	e8 2a f8 ff ff       	call   c0012f44 <unblockTask(ThreadControlBlock*)>
c001371a:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c001371f:	83 c4 10             	add    esp,0x10
c0013722:	8d 50 ff             	lea    edx,[eax-0x1]
c0013725:	89 15 e8 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae8,edx
c001372b:	85 d2                	test   edx,edx
c001372d:	75 01                	jne    c0013730 <Vm::finish8086()+0x5a>
c001372f:	fb                   	sti    
c0013730:	89 d8                	mov    eax,ebx
c0013732:	83 c4 08             	add    esp,0x8
c0013735:	5b                   	pop    ebx
c0013736:	c3                   	ret    

c0013737 <Vm::getOutput8086(unsigned char*)>:
c0013737:	57                   	push   edi
c0013738:	8b 0d 4c 2b 02 c0    	mov    ecx,DWORD PTR ds:0xc0022b4c
c001373e:	56                   	push   esi
c001373f:	be 60 2b 02 c0       	mov    esi,0xc0022b60
c0013744:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013748:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001374a:	a1 4c 2b 02 c0       	mov    eax,ds:0xc0022b4c
c001374f:	5e                   	pop    esi
c0013750:	c7 05 4c 2b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022b4c,0x0
c001375a:	5f                   	pop    edi
c001375b:	c3                   	ret    

c001375c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001375c:	55                   	push   ebp
c001375d:	57                   	push   edi
c001375e:	56                   	push   esi
c001375f:	53                   	push   ebx
c0013760:	83 ec 0c             	sub    esp,0xc
c0013763:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013767:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001376b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001376f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013773:	fa                   	cli    
c0013774:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c001377a:	80 3d 45 2b 02 c0 00 	cmp    BYTE PTR ds:0xc0022b45,0x0
c0013781:	75 15                	jne    c0013798 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0013783:	e8 f8 f2 ff ff       	call   c0012a80 <schedule()>
c0013788:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c001378d:	48                   	dec    eax
c001378e:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0013793:	75 de                	jne    c0013773 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013795:	fb                   	sti    
c0013796:	eb db                	jmp    c0013773 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013798:	a1 48 2b 02 c0       	mov    eax,ds:0xc0022b48
c001379d:	c7 05 4c 2b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022b4c,0x0
c00137a7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00137ab:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00137af:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00137b3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00137b7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00137bb:	0f b7 ff             	movzx  edi,di
c00137be:	0f b7 f6             	movzx  esi,si
c00137c1:	50                   	push   eax
c00137c2:	6a 20                	push   0x20
c00137c4:	6a 00                	push   0x0
c00137c6:	68 60 2b 02 c0       	push   0xc0022b60
c00137cb:	e8 20 cd fe ff       	call   c00004f0 <memset>
c00137d0:	5a                   	pop    edx
c00137d1:	59                   	pop    ecx
c00137d2:	57                   	push   edi
c00137d3:	56                   	push   esi
c00137d4:	e8 2d fe ff ff       	call   c0013606 <Vm::realToLinear(unsigned short, unsigned short)>
c00137d9:	83 c4 10             	add    esp,0x10
c00137dc:	89 c7                	mov    edi,eax
c00137de:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00137e2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00137e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137e8:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c00137ed:	c6 05 45 2b 02 c0 00 	mov    BYTE PTR ds:0xc0022b45,0x0
c00137f4:	48                   	dec    eax
c00137f5:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c00137fa:	75 01                	jne    c00137fd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00137fc:	fb                   	sti    
c00137fd:	83 ec 0c             	sub    esp,0xc
c0013800:	ff 35 48 2b 02 c0    	push   DWORD PTR ds:0xc0022b48
c0013806:	e8 39 f7 ff ff       	call   c0012f44 <unblockTask(ThreadControlBlock*)>
c001380b:	83 c4 1c             	add    esp,0x1c
c001380e:	b0 01                	mov    al,0x1
c0013810:	5b                   	pop    ebx
c0013811:	5e                   	pop    esi
c0013812:	5f                   	pop    edi
c0013813:	5d                   	pop    ebp
c0013814:	c3                   	ret    

c0013815 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013815:	55                   	push   ebp
c0013816:	57                   	push   edi
c0013817:	56                   	push   esi
c0013818:	53                   	push   ebx
c0013819:	83 ec 2c             	sub    esp,0x2c
c001381c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0013820:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0013824:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0013828:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001382c:	fa                   	cli    
c001382d:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c0013833:	0f b6 35 45 2b 02 c0 	movzx  esi,BYTE PTR ds:0xc0022b45
c001383a:	89 f0                	mov    eax,esi
c001383c:	84 c0                	test   al,al
c001383e:	75 1d                	jne    c001385d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0013840:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013844:	e8 37 f2 ff ff       	call   c0012a80 <schedule()>
c0013849:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c001384e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013852:	48                   	dec    eax
c0013853:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0013858:	75 d2                	jne    c001382c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001385a:	fb                   	sti    
c001385b:	eb cf                	jmp    c001382c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001385d:	a1 48 2b 02 c0       	mov    eax,ds:0xc0022b48
c0013862:	c7 05 4c 2b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022b4c,0x0
c001386c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0013870:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0013874:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0013878:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001387c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0013880:	50                   	push   eax
c0013881:	6a 20                	push   0x20
c0013883:	6a 00                	push   0x0
c0013885:	68 60 2b 02 c0       	push   0xc0022b60
c001388a:	e8 61 cc fe ff       	call   c00004f0 <memset>
c001388f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013896:	e8 ca 33 ff ff       	call   c0006c65 <malloc>
c001389b:	83 c4 0c             	add    esp,0xc
c001389e:	89 c3                	mov    ebx,eax
c00138a0:	ff 35 10 2b 02 c0    	push   DWORD PTR ds:0xc0022b10
c00138a6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00138aa:	50                   	push   eax
c00138ab:	e8 ee 66 ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c00138b0:	83 c4 10             	add    esp,0x10
c00138b3:	85 db                	test   ebx,ebx
c00138b5:	75 0a                	jne    c00138c1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00138b7:	83 ec 0c             	sub    esp,0xc
c00138ba:	68 d4 e3 01 c0       	push   0xc001e3d4
c00138bf:	eb 3e                	jmp    c00138ff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00138c1:	50                   	push   eax
c00138c2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00138c6:	50                   	push   eax
c00138c7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00138cb:	50                   	push   eax
c00138cc:	53                   	push   ebx
c00138cd:	e8 38 6a ff ff       	call   c000a30a <File::stat(unsigned long long*, bool*)>
c00138d2:	83 c4 10             	add    esp,0x10
c00138d5:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00138da:	74 0a                	je     c00138e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00138dc:	83 ec 0c             	sub    esp,0xc
c00138df:	68 e8 e3 01 c0       	push   0xc001e3e8
c00138e4:	eb 19                	jmp    c00138ff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00138e6:	51                   	push   ecx
c00138e7:	51                   	push   ecx
c00138e8:	6a 01                	push   0x1
c00138ea:	53                   	push   ebx
c00138eb:	e8 6e 67 ff ff       	call   c000a05e <File::open(FileOpenMode)>
c00138f0:	83 c4 10             	add    esp,0x10
c00138f3:	85 c0                	test   eax,eax
c00138f5:	74 24                	je     c001391b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00138f7:	83 ec 0c             	sub    esp,0xc
c00138fa:	68 01 e4 01 c0       	push   0xc001e401
c00138ff:	e8 9d bc ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0013904:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0013909:	83 c4 10             	add    esp,0x10
c001390c:	48                   	dec    eax
c001390d:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0013912:	85 c0                	test   eax,eax
c0013914:	75 01                	jne    c0013917 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0013916:	fb                   	sti    
c0013917:	31 f6                	xor    esi,esi
c0013919:	eb 58                	jmp    c0013973 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001391b:	0f b7 ed             	movzx  ebp,bp
c001391e:	50                   	push   eax
c001391f:	0f b7 ff             	movzx  edi,di
c0013922:	50                   	push   eax
c0013923:	55                   	push   ebp
c0013924:	57                   	push   edi
c0013925:	e8 dc fc ff ff       	call   c0013606 <Vm::realToLinear(unsigned short, unsigned short)>
c001392a:	5a                   	pop    edx
c001392b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001392d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013931:	51                   	push   ecx
c0013932:	50                   	push   eax
c0013933:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013937:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001393b:	53                   	push   ebx
c001393c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001393f:	83 c4 14             	add    esp,0x14
c0013942:	53                   	push   ebx
c0013943:	e8 74 67 ff ff       	call   c000a0bc <File::close()>
c0013948:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c001394d:	83 c4 10             	add    esp,0x10
c0013950:	48                   	dec    eax
c0013951:	c6 05 45 2b 02 c0 00 	mov    BYTE PTR ds:0xc0022b45,0x0
c0013958:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c001395d:	85 c0                	test   eax,eax
c001395f:	75 01                	jne    c0013962 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0013961:	fb                   	sti    
c0013962:	83 ec 0c             	sub    esp,0xc
c0013965:	ff 35 48 2b 02 c0    	push   DWORD PTR ds:0xc0022b48
c001396b:	e8 d4 f5 ff ff       	call   c0012f44 <unblockTask(ThreadControlBlock*)>
c0013970:	83 c4 10             	add    esp,0x10
c0013973:	83 c4 2c             	add    esp,0x2c
c0013976:	89 f0                	mov    eax,esi
c0013978:	5b                   	pop    ebx
c0013979:	5e                   	pop    esi
c001397a:	5f                   	pop    edi
c001397b:	5d                   	pop    ebp
c001397c:	c3                   	ret    

c001397d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001397d:	57                   	push   edi
c001397e:	56                   	push   esi
c001397f:	53                   	push   ebx
c0013980:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013988:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001398c:	83 e8 06             	sub    eax,0x6
c001398f:	0f b7 c0             	movzx  eax,ax
c0013992:	50                   	push   eax
c0013993:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0013998:	50                   	push   eax
c0013999:	e8 68 fc ff ff       	call   c0013606 <Vm::realToLinear(unsigned short, unsigned short)>
c001399e:	5a                   	pop    edx
c001399f:	5e                   	pop    esi
c00139a0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00139a3:	8d 56 fa             	lea    edx,[esi-0x6]
c00139a6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00139ac:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00139af:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00139b2:	83 c2 02             	add    edx,0x2
c00139b5:	66 89 10             	mov    WORD PTR [eax],dx
c00139b8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00139bb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00139bf:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00139c2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00139c6:	89 d6                	mov    esi,edx
c00139c8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00139ce:	66 81 e6 ff fd       	and    si,0xfdff
c00139d3:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00139d7:	74 07                	je     c00139e0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00139d9:	89 d6                	mov    esi,edx
c00139db:	66 81 ce 00 02       	or     si,0x200
c00139e0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00139e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139e9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00139ed:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00139f5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00139f8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0013a00:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0013a03:	5b                   	pop    ebx
c0013a04:	5e                   	pop    esi
c0013a05:	5f                   	pop    edi
c0013a06:	c3                   	ret    

c0013a07 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0013a07:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013a0c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013a11:	c1 e0 04             	shl    eax,0x4
c0013a14:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0013a17:	c3                   	ret    

c0013a18 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0013a18:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013a1d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013a22:	c1 e0 04             	shl    eax,0x4
c0013a25:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0013a29:	c3                   	ret    

c0013a2a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0013a2a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013a2f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013a34:	c1 e0 04             	shl    eax,0x4
c0013a37:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0013a3a:	c3                   	ret    

c0013a3b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0013a3b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013a40:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013a45:	c1 e0 04             	shl    eax,0x4
c0013a48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a4c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0013a4f:	c3                   	ret    

c0013a50 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0013a50:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013a55:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013a5a:	c1 e0 04             	shl    eax,0x4
c0013a5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a61:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0013a65:	c3                   	ret    

c0013a66 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0013a66:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013a6b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013a70:	c1 e0 04             	shl    eax,0x4
c0013a73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a77:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0013a7a:	c3                   	ret    

c0013a7b <Vm::faultHandler(regs*)>:
c0013a7b:	55                   	push   ebp
c0013a7c:	57                   	push   edi
c0013a7d:	56                   	push   esi
c0013a7e:	53                   	push   ebx
c0013a7f:	83 ec 1c             	sub    esp,0x1c
c0013a82:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013a86:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a89:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0013a8d:	0f b7 f8             	movzx  edi,ax
c0013a90:	52                   	push   edx
c0013a91:	0f b7 c0             	movzx  eax,ax
c0013a94:	50                   	push   eax
c0013a95:	e8 6c fb ff ff       	call   c0013606 <Vm::realToLinear(unsigned short, unsigned short)>
c0013a9a:	5a                   	pop    edx
c0013a9b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0013a9e:	59                   	pop    ecx
c0013a9f:	89 c1                	mov    ecx,eax
c0013aa1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013aa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013aa8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013aad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ab1:	0f b7 c5             	movzx  eax,bp
c0013ab4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ab8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0013abc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ac0:	e8 41 fb ff ff       	call   c0013606 <Vm::realToLinear(unsigned short, unsigned short)>
c0013ac5:	5e                   	pop    esi
c0013ac6:	be 06 00 00 00       	mov    esi,0x6
c0013acb:	5a                   	pop    edx
c0013acc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0013ad1:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0013ad6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0013ad9:	80 fa 9d             	cmp    dl,0x9d
c0013adc:	0f 84 2c 02 00 00    	je     c0013d0e <Vm::faultHandler(regs*)+0x293>
c0013ae2:	0f 87 91 00 00 00    	ja     c0013b79 <Vm::faultHandler(regs*)+0xfe>
c0013ae8:	80 fa 66             	cmp    dl,0x66
c0013aeb:	0f 84 98 01 00 00    	je     c0013c89 <Vm::faultHandler(regs*)+0x20e>
c0013af1:	77 47                	ja     c0013b3a <Vm::faultHandler(regs*)+0xbf>
c0013af3:	80 fa 36             	cmp    dl,0x36
c0013af6:	0f 84 80 01 00 00    	je     c0013c7c <Vm::faultHandler(regs*)+0x201>
c0013afc:	77 1a                	ja     c0013b18 <Vm::faultHandler(regs*)+0x9d>
c0013afe:	80 fa 26             	cmp    dl,0x26
c0013b01:	0f 84 4e 01 00 00    	je     c0013c55 <Vm::faultHandler(regs*)+0x1da>
c0013b07:	80 fa 2e             	cmp    dl,0x2e
c0013b0a:	0f 85 e2 05 00 00    	jne    c00140f2 <Vm::faultHandler(regs*)+0x677>
c0013b10:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b13:	31 f6                	xor    esi,esi
c0013b15:	41                   	inc    ecx
c0013b16:	eb be                	jmp    c0013ad6 <Vm::faultHandler(regs*)+0x5b>
c0013b18:	80 fa 64             	cmp    dl,0x64
c0013b1b:	0f 84 41 01 00 00    	je     c0013c62 <Vm::faultHandler(regs*)+0x1e7>
c0013b21:	0f 87 48 01 00 00    	ja     c0013c6f <Vm::faultHandler(regs*)+0x1f4>
c0013b27:	80 fa 3e             	cmp    dl,0x3e
c0013b2a:	0f 85 c2 05 00 00    	jne    c00140f2 <Vm::faultHandler(regs*)+0x677>
c0013b30:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b33:	be 01 00 00 00       	mov    esi,0x1
c0013b38:	eb db                	jmp    c0013b15 <Vm::faultHandler(regs*)+0x9a>
c0013b3a:	80 fa 6d             	cmp    dl,0x6d
c0013b3d:	0f 84 ec 02 00 00    	je     c0013e2f <Vm::faultHandler(regs*)+0x3b4>
c0013b43:	77 17                	ja     c0013b5c <Vm::faultHandler(regs*)+0xe1>
c0013b45:	80 fa 67             	cmp    dl,0x67
c0013b48:	0f 84 48 01 00 00    	je     c0013c96 <Vm::faultHandler(regs*)+0x21b>
c0013b4e:	80 fa 6c             	cmp    dl,0x6c
c0013b51:	0f 84 69 02 00 00    	je     c0013dc0 <Vm::faultHandler(regs*)+0x345>
c0013b57:	e9 96 05 00 00       	jmp    c00140f2 <Vm::faultHandler(regs*)+0x677>
c0013b5c:	80 fa 6f             	cmp    dl,0x6f
c0013b5f:	0f 84 f4 03 00 00    	je     c0013f59 <Vm::faultHandler(regs*)+0x4de>
c0013b65:	0f 82 59 03 00 00    	jb     c0013ec4 <Vm::faultHandler(regs*)+0x449>
c0013b6b:	80 fa 9c             	cmp    dl,0x9c
c0013b6e:	0f 84 2f 01 00 00    	je     c0013ca3 <Vm::faultHandler(regs*)+0x228>
c0013b74:	e9 79 05 00 00       	jmp    c00140f2 <Vm::faultHandler(regs*)+0x677>
c0013b79:	80 fa ec             	cmp    dl,0xec
c0013b7c:	0f 84 14 05 00 00    	je     c0014096 <Vm::faultHandler(regs*)+0x61b>
c0013b82:	77 7b                	ja     c0013bff <Vm::faultHandler(regs*)+0x184>
c0013b84:	80 fa e4             	cmp    dl,0xe4
c0013b87:	0f 84 93 04 00 00    	je     c0014020 <Vm::faultHandler(regs*)+0x5a5>
c0013b8d:	77 53                	ja     c0013be2 <Vm::faultHandler(regs*)+0x167>
c0013b8f:	80 fa cd             	cmp    dl,0xcd
c0013b92:	0f 84 d9 01 00 00    	je     c0013d71 <Vm::faultHandler(regs*)+0x2f6>
c0013b98:	80 fa cf             	cmp    dl,0xcf
c0013b9b:	0f 85 51 05 00 00    	jne    c00140f2 <Vm::faultHandler(regs*)+0x677>
c0013ba1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013ba4:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0013ba7:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0013bab:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0013bae:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0013bb2:	81 ca 00 02 02 00    	or     edx,0x20200
c0013bb8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013bbb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013bbf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013bc5:	66 c1 e8 09          	shr    ax,0x9
c0013bc9:	83 e0 01             	and    eax,0x1
c0013bcc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013bcf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013bd2:	83 c0 06             	add    eax,0x6
c0013bd5:	25 ff ff 00 00       	and    eax,0xffff
c0013bda:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013bdd:	e9 0c 05 00 00       	jmp    c00140ee <Vm::faultHandler(regs*)+0x673>
c0013be2:	80 fa e6             	cmp    dl,0xe6
c0013be5:	0f 84 7f 04 00 00    	je     c001406a <Vm::faultHandler(regs*)+0x5ef>
c0013beb:	0f 82 4b 04 00 00    	jb     c001403c <Vm::faultHandler(regs*)+0x5c1>
c0013bf1:	80 fa e7             	cmp    dl,0xe7
c0013bf4:	0f 84 87 04 00 00    	je     c0014081 <Vm::faultHandler(regs*)+0x606>
c0013bfa:	e9 f3 04 00 00       	jmp    c00140f2 <Vm::faultHandler(regs*)+0x677>
c0013bff:	80 fa ef             	cmp    dl,0xef
c0013c02:	0f 84 d1 04 00 00    	je     c00140d9 <Vm::faultHandler(regs*)+0x65e>
c0013c08:	77 28                	ja     c0013c32 <Vm::faultHandler(regs*)+0x1b7>
c0013c0a:	80 fa ed             	cmp    dl,0xed
c0013c0d:	0f 84 9f 04 00 00    	je     c00140b2 <Vm::faultHandler(regs*)+0x637>
c0013c13:	80 fa ee             	cmp    dl,0xee
c0013c16:	0f 85 d6 04 00 00    	jne    c00140f2 <Vm::faultHandler(regs*)+0x677>
c0013c1c:	50                   	push   eax
c0013c1d:	50                   	push   eax
c0013c1e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013c22:	50                   	push   eax
c0013c23:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013c27:	50                   	push   eax
c0013c28:	e8 a3 f9 ff ff       	call   c00135d0 <Vm::outbv(unsigned short, unsigned char)>
c0013c2d:	e9 9f 04 00 00       	jmp    c00140d1 <Vm::faultHandler(regs*)+0x656>
c0013c32:	80 fa fa             	cmp    dl,0xfa
c0013c35:	0f 84 69 01 00 00    	je     c0013da4 <Vm::faultHandler(regs*)+0x329>
c0013c3b:	80 fa fb             	cmp    dl,0xfb
c0013c3e:	0f 84 6e 01 00 00    	je     c0013db2 <Vm::faultHandler(regs*)+0x337>
c0013c44:	80 fa f3             	cmp    dl,0xf3
c0013c47:	0f 85 a5 04 00 00    	jne    c00140f2 <Vm::faultHandler(regs*)+0x677>
c0013c4d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c50:	e9 c0 fe ff ff       	jmp    c0013b15 <Vm::faultHandler(regs*)+0x9a>
c0013c55:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c58:	be 02 00 00 00       	mov    esi,0x2
c0013c5d:	e9 b3 fe ff ff       	jmp    c0013b15 <Vm::faultHandler(regs*)+0x9a>
c0013c62:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c65:	be 03 00 00 00       	mov    esi,0x3
c0013c6a:	e9 a6 fe ff ff       	jmp    c0013b15 <Vm::faultHandler(regs*)+0x9a>
c0013c6f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c72:	be 04 00 00 00       	mov    esi,0x4
c0013c77:	e9 99 fe ff ff       	jmp    c0013b15 <Vm::faultHandler(regs*)+0x9a>
c0013c7c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c7f:	be 05 00 00 00       	mov    esi,0x5
c0013c84:	e9 8c fe ff ff       	jmp    c0013b15 <Vm::faultHandler(regs*)+0x9a>
c0013c89:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c8c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0013c91:	e9 7f fe ff ff       	jmp    c0013b15 <Vm::faultHandler(regs*)+0x9a>
c0013c96:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013c99:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0013c9e:	e9 72 fe ff ff       	jmp    c0013b15 <Vm::faultHandler(regs*)+0x9a>
c0013ca3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0013ca6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013caa:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013caf:	74 30                	je     c0013ce1 <Vm::faultHandler(regs*)+0x266>
c0013cb1:	83 e9 04             	sub    ecx,0x4
c0013cb4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013cba:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013cc0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013cc3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013cc6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013ccc:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013cd0:	0f 84 15 04 00 00    	je     c00140eb <Vm::faultHandler(regs*)+0x670>
c0013cd6:	80 ce 02             	or     dh,0x2
c0013cd9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013cdc:	e9 0a 04 00 00       	jmp    c00140eb <Vm::faultHandler(regs*)+0x670>
c0013ce1:	83 e9 02             	sub    ecx,0x2
c0013ce4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013cea:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013ced:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013cf1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013cf7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013cfb:	74 05                	je     c0013d02 <Vm::faultHandler(regs*)+0x287>
c0013cfd:	80 ce 02             	or     dh,0x2
c0013d00:	eb 03                	jmp    c0013d05 <Vm::faultHandler(regs*)+0x28a>
c0013d02:	80 e6 fd             	and    dh,0xfd
c0013d05:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013d09:	e9 dd 03 00 00       	jmp    c00140eb <Vm::faultHandler(regs*)+0x670>
c0013d0e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013d13:	74 2a                	je     c0013d3f <Vm::faultHandler(regs*)+0x2c4>
c0013d15:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d17:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013d1d:	81 ca 00 02 02 00    	or     edx,0x20200
c0013d23:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d28:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d2e:	c1 e8 09             	shr    eax,0x9
c0013d31:	83 e0 01             	and    eax,0x1
c0013d34:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013d37:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013d3a:	83 c0 04             	add    eax,0x4
c0013d3d:	eb 25                	jmp    c0013d64 <Vm::faultHandler(regs*)+0x2e9>
c0013d3f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013d42:	81 ca 00 02 02 00    	or     edx,0x20200
c0013d48:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013d4b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013d4e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d54:	66 c1 e8 09          	shr    ax,0x9
c0013d58:	83 e0 01             	and    eax,0x1
c0013d5b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013d5e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013d61:	83 c0 02             	add    eax,0x2
c0013d64:	25 ff ff 00 00       	and    eax,0xffff
c0013d69:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013d6c:	e9 7a 03 00 00       	jmp    c00140eb <Vm::faultHandler(regs*)+0x670>
c0013d71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013d75:	3c ee                	cmp    al,0xee
c0013d77:	75 10                	jne    c0013d89 <Vm::faultHandler(regs*)+0x30e>
c0013d79:	83 ec 0c             	sub    esp,0xc
c0013d7c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013d7f:	e8 e9 f8 ff ff       	call   c001366d <Vm::mainloop3(unsigned long)>
c0013d84:	e9 4b 03 00 00       	jmp    c00140d4 <Vm::faultHandler(regs*)+0x659>
c0013d89:	83 ec 0c             	sub    esp,0xc
c0013d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d94:	51                   	push   ecx
c0013d95:	50                   	push   eax
c0013d96:	53                   	push   ebx
c0013d97:	e8 e1 fb ff ff       	call   c001397d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0013d9c:	83 c4 20             	add    esp,0x20
c0013d9f:	e9 4a 03 00 00       	jmp    c00140ee <Vm::faultHandler(regs*)+0x673>
c0013da4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013da9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013dad:	e9 39 03 00 00       	jmp    c00140eb <Vm::faultHandler(regs*)+0x670>
c0013db2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013db7:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0013dbb:	e9 2b 03 00 00       	jmp    c00140eb <Vm::faultHandler(regs*)+0x670>
c0013dc0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013dc3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013dc8:	74 2b                	je     c0013df5 <Vm::faultHandler(regs*)+0x37a>
c0013dca:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0013dd1:	76 22                	jbe    c0013df5 <Vm::faultHandler(regs*)+0x37a>
c0013dd3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013dd7:	50                   	push   eax
c0013dd8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013ddc:	50                   	push   eax
c0013ddd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013de1:	50                   	push   eax
c0013de2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013de6:	50                   	push   eax
c0013de7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013deb:	50                   	push   eax
c0013dec:	6a 6c                	push   0x6c
c0013dee:	6a 6c                	push   0x6c
c0013df0:	e9 b9 01 00 00       	jmp    c0013fae <Vm::faultHandler(regs*)+0x533>
c0013df5:	83 ec 0c             	sub    esp,0xc
c0013df8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013dfc:	0f b7 f6             	movzx  esi,si
c0013dff:	50                   	push   eax
c0013e00:	e8 b8 f7 ff ff       	call   c00135bd <Vm::inbv(unsigned short)>
c0013e05:	83 c4 0c             	add    esp,0xc
c0013e08:	0f b6 c0             	movzx  eax,al
c0013e0b:	50                   	push   eax
c0013e0c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0013e10:	50                   	push   eax
c0013e11:	56                   	push   esi
c0013e12:	e8 24 fc ff ff       	call   c0013a3b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0013e17:	83 c4 10             	add    esp,0x10
c0013e1a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013e1d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013e21:	74 03                	je     c0013e26 <Vm::faultHandler(regs*)+0x3ab>
c0013e23:	48                   	dec    eax
c0013e24:	eb 01                	jmp    c0013e27 <Vm::faultHandler(regs*)+0x3ac>
c0013e26:	40                   	inc    eax
c0013e27:	0f b7 c0             	movzx  eax,ax
c0013e2a:	e9 8d 00 00 00       	jmp    c0013ebc <Vm::faultHandler(regs*)+0x441>
c0013e2f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013e32:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013e35:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013e3a:	74 29                	je     c0013e65 <Vm::faultHandler(regs*)+0x3ea>
c0013e3c:	3d ff ff 00 00       	cmp    eax,0xffff
c0013e41:	76 22                	jbe    c0013e65 <Vm::faultHandler(regs*)+0x3ea>
c0013e43:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013e47:	50                   	push   eax
c0013e48:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013e4c:	50                   	push   eax
c0013e4d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013e51:	50                   	push   eax
c0013e52:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013e56:	50                   	push   eax
c0013e57:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013e5b:	50                   	push   eax
c0013e5c:	6a 6d                	push   0x6d
c0013e5e:	6a 6d                	push   0x6d
c0013e60:	e9 49 01 00 00       	jmp    c0013fae <Vm::faultHandler(regs*)+0x533>
c0013e65:	0f b7 c8             	movzx  ecx,ax
c0013e68:	0f b7 f6             	movzx  esi,si
c0013e6b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013e6e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013e73:	74 20                	je     c0013e95 <Vm::faultHandler(regs*)+0x41a>
c0013e75:	ed                   	in     eax,dx
c0013e76:	55                   	push   ebp
c0013e77:	50                   	push   eax
c0013e78:	51                   	push   ecx
c0013e79:	56                   	push   esi
c0013e7a:	e8 e7 fb ff ff       	call   c0013a66 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0013e7f:	83 c4 10             	add    esp,0x10
c0013e82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013e85:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013e89:	74 05                	je     c0013e90 <Vm::faultHandler(regs*)+0x415>
c0013e8b:	83 e8 04             	sub    eax,0x4
c0013e8e:	eb 27                	jmp    c0013eb7 <Vm::faultHandler(regs*)+0x43c>
c0013e90:	83 c0 04             	add    eax,0x4
c0013e93:	eb 22                	jmp    c0013eb7 <Vm::faultHandler(regs*)+0x43c>
c0013e95:	66 ed                	in     ax,dx
c0013e97:	0f b7 c0             	movzx  eax,ax
c0013e9a:	57                   	push   edi
c0013e9b:	50                   	push   eax
c0013e9c:	51                   	push   ecx
c0013e9d:	56                   	push   esi
c0013e9e:	e8 ad fb ff ff       	call   c0013a50 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0013ea3:	83 c4 10             	add    esp,0x10
c0013ea6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013ea9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013ead:	74 05                	je     c0013eb4 <Vm::faultHandler(regs*)+0x439>
c0013eaf:	83 e8 02             	sub    eax,0x2
c0013eb2:	eb 03                	jmp    c0013eb7 <Vm::faultHandler(regs*)+0x43c>
c0013eb4:	83 c0 02             	add    eax,0x2
c0013eb7:	25 ff ff 00 00       	and    eax,0xffff
c0013ebc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0013ebf:	e9 27 02 00 00       	jmp    c00140eb <Vm::faultHandler(regs*)+0x670>
c0013ec4:	8d 46 ff             	lea    eax,[esi-0x1]
c0013ec7:	3c 05                	cmp    al,0x5
c0013ec9:	77 24                	ja     c0013eef <Vm::faultHandler(regs*)+0x474>
c0013ecb:	0f b6 c0             	movzx  eax,al
c0013ece:	ff 24 85 74 e4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1b8c]
c0013ed5:	0f b7 fd             	movzx  edi,bp
c0013ed8:	eb 15                	jmp    c0013eef <Vm::faultHandler(regs*)+0x474>
c0013eda:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0013ede:	eb 0f                	jmp    c0013eef <Vm::faultHandler(regs*)+0x474>
c0013ee0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0013ee4:	eb 09                	jmp    c0013eef <Vm::faultHandler(regs*)+0x474>
c0013ee6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0013eea:	eb 03                	jmp    c0013eef <Vm::faultHandler(regs*)+0x474>
c0013eec:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0013eef:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013ef2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013ef7:	74 29                	je     c0013f22 <Vm::faultHandler(regs*)+0x4a7>
c0013ef9:	3d ff ff 00 00       	cmp    eax,0xffff
c0013efe:	76 22                	jbe    c0013f22 <Vm::faultHandler(regs*)+0x4a7>
c0013f00:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013f04:	50                   	push   eax
c0013f05:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013f09:	50                   	push   eax
c0013f0a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013f0e:	50                   	push   eax
c0013f0f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013f13:	50                   	push   eax
c0013f14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013f18:	50                   	push   eax
c0013f19:	6a 6e                	push   0x6e
c0013f1b:	6a 6e                	push   0x6e
c0013f1d:	e9 8c 00 00 00       	jmp    c0013fae <Vm::faultHandler(regs*)+0x533>
c0013f22:	0f b7 c0             	movzx  eax,ax
c0013f25:	52                   	push   edx
c0013f26:	52                   	push   edx
c0013f27:	50                   	push   eax
c0013f28:	57                   	push   edi
c0013f29:	e8 d9 fa ff ff       	call   c0013a07 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0013f2e:	59                   	pop    ecx
c0013f2f:	0f b6 c0             	movzx  eax,al
c0013f32:	5e                   	pop    esi
c0013f33:	50                   	push   eax
c0013f34:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013f38:	50                   	push   eax
c0013f39:	e8 92 f6 ff ff       	call   c00135d0 <Vm::outbv(unsigned short, unsigned char)>
c0013f3e:	83 c4 10             	add    esp,0x10
c0013f41:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013f44:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013f48:	74 03                	je     c0013f4d <Vm::faultHandler(regs*)+0x4d2>
c0013f4a:	48                   	dec    eax
c0013f4b:	eb 01                	jmp    c0013f4e <Vm::faultHandler(regs*)+0x4d3>
c0013f4d:	40                   	inc    eax
c0013f4e:	0f b7 c0             	movzx  eax,ax
c0013f51:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0013f54:	e9 92 01 00 00       	jmp    c00140eb <Vm::faultHandler(regs*)+0x670>
c0013f59:	8d 46 ff             	lea    eax,[esi-0x1]
c0013f5c:	3c 05                	cmp    al,0x5
c0013f5e:	77 1f                	ja     c0013f7f <Vm::faultHandler(regs*)+0x504>
c0013f60:	0f b6 c0             	movzx  eax,al
c0013f63:	ff 24 85 8c e4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1b74]
c0013f6a:	89 ef                	mov    edi,ebp
c0013f6c:	eb 11                	jmp    c0013f7f <Vm::faultHandler(regs*)+0x504>
c0013f6e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0013f71:	eb 0c                	jmp    c0013f7f <Vm::faultHandler(regs*)+0x504>
c0013f73:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0013f76:	eb 07                	jmp    c0013f7f <Vm::faultHandler(regs*)+0x504>
c0013f78:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0013f7b:	eb 02                	jmp    c0013f7f <Vm::faultHandler(regs*)+0x504>
c0013f7d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0013f7f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0013f82:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013f87:	74 37                	je     c0013fc0 <Vm::faultHandler(regs*)+0x545>
c0013f89:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0013f8f:	76 2f                	jbe    c0013fc0 <Vm::faultHandler(regs*)+0x545>
c0013f91:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013f95:	50                   	push   eax
c0013f96:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013f9a:	50                   	push   eax
c0013f9b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013f9f:	50                   	push   eax
c0013fa0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013fa4:	50                   	push   eax
c0013fa5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013fa9:	50                   	push   eax
c0013faa:	6a 6f                	push   0x6f
c0013fac:	6a 6f                	push   0x6f
c0013fae:	68 1a e4 01 c0       	push   0xc001e41a
c0013fb3:	e8 70 5a ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0013fb8:	83 c4 20             	add    esp,0x20
c0013fbb:	e9 86 01 00 00       	jmp    c0014146 <Vm::faultHandler(regs*)+0x6cb>
c0013fc0:	0f b7 d7             	movzx  edx,di
c0013fc3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0013fc6:	0f b7 c6             	movzx  eax,si
c0013fc9:	81 e1 00 04 00 00    	and    ecx,0x400
c0013fcf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0013fd2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013fd7:	74 1d                	je     c0013ff6 <Vm::faultHandler(regs*)+0x57b>
c0013fd9:	55                   	push   ebp
c0013fda:	55                   	push   ebp
c0013fdb:	50                   	push   eax
c0013fdc:	52                   	push   edx
c0013fdd:	e8 48 fa ff ff       	call   c0013a2a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0013fe2:	83 c4 10             	add    esp,0x10
c0013fe5:	89 fa                	mov    edx,edi
c0013fe7:	ef                   	out    dx,eax
c0013fe8:	85 c9                	test   ecx,ecx
c0013fea:	74 05                	je     c0013ff1 <Vm::faultHandler(regs*)+0x576>
c0013fec:	83 ee 04             	sub    esi,0x4
c0013fef:	eb 21                	jmp    c0014012 <Vm::faultHandler(regs*)+0x597>
c0013ff1:	83 c6 04             	add    esi,0x4
c0013ff4:	eb 1c                	jmp    c0014012 <Vm::faultHandler(regs*)+0x597>
c0013ff6:	55                   	push   ebp
c0013ff7:	55                   	push   ebp
c0013ff8:	50                   	push   eax
c0013ff9:	52                   	push   edx
c0013ffa:	e8 19 fa ff ff       	call   c0013a18 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0013fff:	83 c4 10             	add    esp,0x10
c0014002:	89 fa                	mov    edx,edi
c0014004:	66 ef                	out    dx,ax
c0014006:	85 c9                	test   ecx,ecx
c0014008:	74 05                	je     c001400f <Vm::faultHandler(regs*)+0x594>
c001400a:	83 ee 02             	sub    esi,0x2
c001400d:	eb 03                	jmp    c0014012 <Vm::faultHandler(regs*)+0x597>
c001400f:	83 c6 02             	add    esi,0x2
c0014012:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014018:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001401b:	e9 cb 00 00 00       	jmp    c00140eb <Vm::faultHandler(regs*)+0x670>
c0014020:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014027:	83 ec 0c             	sub    esp,0xc
c001402a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001402e:	50                   	push   eax
c001402f:	e8 89 f5 ff ff       	call   c00135bd <Vm::inbv(unsigned short)>
c0014034:	0f b6 c0             	movzx  eax,al
c0014037:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001403a:	eb 3f                	jmp    c001407b <Vm::faultHandler(regs*)+0x600>
c001403c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014041:	74 07                	je     c001404a <Vm::faultHandler(regs*)+0x5cf>
c0014043:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014047:	ed                   	in     eax,dx
c0014048:	eb 14                	jmp    c001405e <Vm::faultHandler(regs*)+0x5e3>
c001404a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001404d:	66 31 f6             	xor    si,si
c0014050:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014053:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014057:	66 ed                	in     ax,dx
c0014059:	0f b7 c0             	movzx  eax,ax
c001405c:	09 f0                	or     eax,esi
c001405e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014061:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014065:	e9 84 00 00 00       	jmp    c00140ee <Vm::faultHandler(regs*)+0x673>
c001406a:	52                   	push   edx
c001406b:	52                   	push   edx
c001406c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014070:	50                   	push   eax
c0014071:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014075:	50                   	push   eax
c0014076:	e8 55 f5 ff ff       	call   c00135d0 <Vm::outbv(unsigned short, unsigned char)>
c001407b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001407f:	eb 53                	jmp    c00140d4 <Vm::faultHandler(regs*)+0x659>
c0014081:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014084:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014088:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001408d:	74 03                	je     c0014092 <Vm::faultHandler(regs*)+0x617>
c001408f:	ef                   	out    dx,eax
c0014090:	eb cf                	jmp    c0014061 <Vm::faultHandler(regs*)+0x5e6>
c0014092:	66 ef                	out    dx,ax
c0014094:	eb cb                	jmp    c0014061 <Vm::faultHandler(regs*)+0x5e6>
c0014096:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001409d:	83 ec 0c             	sub    esp,0xc
c00140a0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00140a4:	50                   	push   eax
c00140a5:	e8 13 f5 ff ff       	call   c00135bd <Vm::inbv(unsigned short)>
c00140aa:	0f b6 c0             	movzx  eax,al
c00140ad:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00140b0:	eb 1f                	jmp    c00140d1 <Vm::faultHandler(regs*)+0x656>
c00140b2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00140b5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00140ba:	74 03                	je     c00140bf <Vm::faultHandler(regs*)+0x644>
c00140bc:	ed                   	in     eax,dx
c00140bd:	eb 0d                	jmp    c00140cc <Vm::faultHandler(regs*)+0x651>
c00140bf:	66 ed                	in     ax,dx
c00140c1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00140c4:	0f b7 c0             	movzx  eax,ax
c00140c7:	66 31 d2             	xor    dx,dx
c00140ca:	09 d0                	or     eax,edx
c00140cc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00140cf:	eb 1a                	jmp    c00140eb <Vm::faultHandler(regs*)+0x670>
c00140d1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00140d4:	83 c4 10             	add    esp,0x10
c00140d7:	eb 15                	jmp    c00140ee <Vm::faultHandler(regs*)+0x673>
c00140d9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00140dc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00140df:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00140e4:	74 03                	je     c00140e9 <Vm::faultHandler(regs*)+0x66e>
c00140e6:	ef                   	out    dx,eax
c00140e7:	eb 02                	jmp    c00140eb <Vm::faultHandler(regs*)+0x670>
c00140e9:	66 ef                	out    dx,ax
c00140eb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00140ee:	b0 01                	mov    al,0x1
c00140f0:	eb 56                	jmp    c0014148 <Vm::faultHandler(regs*)+0x6cd>
c00140f2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00140f6:	50                   	push   eax
c00140f7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00140fb:	50                   	push   eax
c00140fc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014100:	50                   	push   eax
c0014101:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014105:	50                   	push   eax
c0014106:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001410a:	50                   	push   eax
c001410b:	52                   	push   edx
c001410c:	52                   	push   edx
c001410d:	68 47 e4 01 c0       	push   0xc001e447
c0014112:	e8 11 59 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0014117:	83 c4 20             	add    esp,0x20
c001411a:	83 ec 0c             	sub    esp,0xc
c001411d:	6a 60                	push   0x60
c001411f:	e8 99 f4 ff ff       	call   c00135bd <Vm::inbv(unsigned short)>
c0014124:	83 c4 10             	add    esp,0x10
c0014127:	3c 1c                	cmp    al,0x1c
c0014129:	74 04                	je     c001412f <Vm::faultHandler(regs*)+0x6b4>
c001412b:	3c 5a                	cmp    al,0x5a
c001412d:	75 eb                	jne    c001411a <Vm::faultHandler(regs*)+0x69f>
c001412f:	3c 5a                	cmp    al,0x5a
c0014131:	74 04                	je     c0014137 <Vm::faultHandler(regs*)+0x6bc>
c0014133:	3c 1c                	cmp    al,0x1c
c0014135:	75 0f                	jne    c0014146 <Vm::faultHandler(regs*)+0x6cb>
c0014137:	83 ec 0c             	sub    esp,0xc
c001413a:	6a 60                	push   0x60
c001413c:	e8 7c f4 ff ff       	call   c00135bd <Vm::inbv(unsigned short)>
c0014141:	83 c4 10             	add    esp,0x10
c0014144:	eb e9                	jmp    c001412f <Vm::faultHandler(regs*)+0x6b4>
c0014146:	31 c0                	xor    eax,eax
c0014148:	83 c4 1c             	add    esp,0x1c
c001414b:	5b                   	pop    ebx
c001414c:	5e                   	pop    esi
c001414d:	5f                   	pop    edi
c001414e:	5d                   	pop    ebp
c001414f:	c3                   	ret    

c0014150 <Hal::noCopro(unsigned long)>:
c0014150:	c3                   	ret    

c0014151 <Hal::noTSC()>:
c0014151:	31 c0                	xor    eax,eax
c0014153:	31 d2                	xor    edx,edx
c0014155:	c3                   	ret    

c0014156 <Hal::readTSC()>:
c0014156:	0f 31                	rdtsc  
c0014158:	c3                   	ret    

c0014159 <nmiHandler(regs*, void*)>:
c0014159:	83 ec 0c             	sub    esp,0xc
c001415c:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0014161:	83 ec 0c             	sub    esp,0xc
c0014164:	50                   	push   eax
c0014165:	e8 b0 22 ff ff       	call   c000641a <Computer::handleNMI()>
c001416a:	83 c4 10             	add    esp,0x10
c001416d:	90                   	nop
c001416e:	83 c4 0c             	add    esp,0xc
c0014171:	c3                   	ret    

c0014172 <doubleFault(regs*, void*)>:
c0014172:	55                   	push   ebp
c0014173:	89 e5                	mov    ebp,esp
c0014175:	83 ec 08             	sub    esp,0x8
c0014178:	83 ec 0c             	sub    esp,0xc
c001417b:	68 a4 e4 01 c0       	push   0xc001e4a4
c0014180:	e8 1c b4 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0014185:	83 c4 10             	add    esp,0x10
c0014188:	90                   	nop
c0014189:	c9                   	leave  
c001418a:	c3                   	ret    

c001418b <displayDebugInfo(regs*)>:
c001418b:	83 ec 1c             	sub    esp,0x1c
c001418e:	0f 20 c0             	mov    eax,cr0
c0014191:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014195:	0f 20 d0             	mov    eax,cr2
c0014198:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001419c:	0f 20 d8             	mov    eax,cr3
c001419f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141a3:	0f 20 e0             	mov    eax,cr4
c00141a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00141a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141ad:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00141b0:	83 ec 08             	sub    esp,0x8
c00141b3:	50                   	push   eax
c00141b4:	68 c0 e4 01 c0       	push   0xc001e4c0
c00141b9:	e8 6a 58 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00141be:	83 c4 10             	add    esp,0x10
c00141c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141c5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00141c8:	83 ec 08             	sub    esp,0x8
c00141cb:	50                   	push   eax
c00141cc:	68 b1 e4 01 c0       	push   0xc001e4b1
c00141d1:	e8 52 58 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00141d6:	83 c4 10             	add    esp,0x10
c00141d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141dd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00141e0:	83 ec 08             	sub    esp,0x8
c00141e3:	50                   	push   eax
c00141e4:	68 bc e4 01 c0       	push   0xc001e4bc
c00141e9:	e8 3a 58 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00141ee:	83 c4 10             	add    esp,0x10
c00141f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00141f8:	83 ec 08             	sub    esp,0x8
c00141fb:	50                   	push   eax
c00141fc:	68 cb e4 01 c0       	push   0xc001e4cb
c0014201:	e8 22 58 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0014206:	83 c4 10             	add    esp,0x10
c0014209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001420d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014210:	83 ec 08             	sub    esp,0x8
c0014213:	50                   	push   eax
c0014214:	68 d6 e4 01 c0       	push   0xc001e4d6
c0014219:	e8 0a 58 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001421e:	83 c4 10             	add    esp,0x10
c0014221:	83 ec 08             	sub    esp,0x8
c0014224:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014228:	68 e1 e4 01 c0       	push   0xc001e4e1
c001422d:	e8 f6 57 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0014232:	83 c4 10             	add    esp,0x10
c0014235:	83 ec 08             	sub    esp,0x8
c0014238:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001423c:	68 ec e4 01 c0       	push   0xc001e4ec
c0014241:	e8 e2 57 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0014246:	83 c4 10             	add    esp,0x10
c0014249:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c001424e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014254:	83 ec 0c             	sub    esp,0xc
c0014257:	50                   	push   eax
c0014258:	e8 38 37 ff ff       	call   c0007995 <setActiveTerminal(VgaText*)>
c001425d:	83 c4 10             	add    esp,0x10
c0014260:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c0014265:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001426b:	83 ec 08             	sub    esp,0x8
c001426e:	68 f7 e4 01 c0       	push   0xc001e4f7
c0014273:	50                   	push   eax
c0014274:	e8 5b 3a ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c0014279:	83 c4 10             	add    esp,0x10
c001427c:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c0014281:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014287:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001428c:	8b 12                	mov    edx,DWORD PTR [edx]
c001428e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014291:	83 c2 0c             	add    edx,0xc
c0014294:	83 ec 08             	sub    esp,0x8
c0014297:	52                   	push   edx
c0014298:	50                   	push   eax
c0014299:	e8 36 3a ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c001429e:	83 c4 10             	add    esp,0x10
c00142a1:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c00142a6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142ac:	83 ec 08             	sub    esp,0x8
c00142af:	68 00 e5 01 c0       	push   0xc001e500
c00142b4:	50                   	push   eax
c00142b5:	e8 1a 3a ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c00142ba:	83 c4 10             	add    esp,0x10
c00142bd:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c00142c2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142cc:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00142cf:	83 ec 08             	sub    esp,0x8
c00142d2:	52                   	push   edx
c00142d3:	50                   	push   eax
c00142d4:	e8 b5 39 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c00142d9:	83 c4 10             	add    esp,0x10
c00142dc:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c00142e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142e7:	83 ec 08             	sub    esp,0x8
c00142ea:	68 08 e5 01 c0       	push   0xc001e508
c00142ef:	50                   	push   eax
c00142f0:	e8 df 39 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c00142f5:	83 c4 10             	add    esp,0x10
c00142f8:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c00142fd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014303:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014307:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001430a:	83 ec 08             	sub    esp,0x8
c001430d:	52                   	push   edx
c001430e:	50                   	push   eax
c001430f:	e8 7a 39 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c0014314:	83 c4 10             	add    esp,0x10
c0014317:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c001431c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014322:	83 ec 08             	sub    esp,0x8
c0014325:	68 10 e5 01 c0       	push   0xc001e510
c001432a:	50                   	push   eax
c001432b:	e8 a4 39 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c0014330:	83 c4 10             	add    esp,0x10
c0014333:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c0014338:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001433e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014342:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014345:	83 ec 08             	sub    esp,0x8
c0014348:	52                   	push   edx
c0014349:	50                   	push   eax
c001434a:	e8 3f 39 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c001434f:	83 c4 10             	add    esp,0x10
c0014352:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c0014357:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001435d:	83 ec 08             	sub    esp,0x8
c0014360:	68 18 e5 01 c0       	push   0xc001e518
c0014365:	50                   	push   eax
c0014366:	e8 69 39 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c001436b:	83 c4 10             	add    esp,0x10
c001436e:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c0014373:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014379:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001437d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014380:	83 ec 08             	sub    esp,0x8
c0014383:	52                   	push   edx
c0014384:	50                   	push   eax
c0014385:	e8 04 39 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c001438a:	83 c4 10             	add    esp,0x10
c001438d:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c0014392:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014398:	83 ec 08             	sub    esp,0x8
c001439b:	68 20 e5 01 c0       	push   0xc001e520
c00143a0:	50                   	push   eax
c00143a1:	e8 2e 39 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c00143a6:	83 c4 10             	add    esp,0x10
c00143a9:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c00143ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00143b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00143b8:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00143bb:	83 ec 08             	sub    esp,0x8
c00143be:	52                   	push   edx
c00143bf:	50                   	push   eax
c00143c0:	e8 c9 38 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c00143c5:	83 c4 10             	add    esp,0x10
c00143c8:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c00143cd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00143d3:	83 ec 08             	sub    esp,0x8
c00143d6:	68 28 e5 01 c0       	push   0xc001e528
c00143db:	50                   	push   eax
c00143dc:	e8 f3 38 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c00143e1:	83 c4 10             	add    esp,0x10
c00143e4:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c00143e9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00143ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00143f3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00143f6:	83 ec 08             	sub    esp,0x8
c00143f9:	52                   	push   edx
c00143fa:	50                   	push   eax
c00143fb:	e8 8e 38 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c0014400:	83 c4 10             	add    esp,0x10
c0014403:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c0014408:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001440e:	83 ec 08             	sub    esp,0x8
c0014411:	68 30 e5 01 c0       	push   0xc001e530
c0014416:	50                   	push   eax
c0014417:	e8 b8 38 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c001441c:	83 c4 10             	add    esp,0x10
c001441f:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c0014424:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001442a:	83 ec 08             	sub    esp,0x8
c001442d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014431:	50                   	push   eax
c0014432:	e8 57 38 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c0014437:	83 c4 10             	add    esp,0x10
c001443a:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c001443f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014445:	83 ec 08             	sub    esp,0x8
c0014448:	68 39 e5 01 c0       	push   0xc001e539
c001444d:	50                   	push   eax
c001444e:	e8 81 38 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c0014453:	83 c4 10             	add    esp,0x10
c0014456:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c001445b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014461:	83 ec 08             	sub    esp,0x8
c0014464:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014468:	50                   	push   eax
c0014469:	e8 20 38 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c001446e:	83 c4 10             	add    esp,0x10
c0014471:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c0014476:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001447c:	83 ec 08             	sub    esp,0x8
c001447f:	68 41 e5 01 c0       	push   0xc001e541
c0014484:	50                   	push   eax
c0014485:	e8 4a 38 ff ff       	call   c0007cd4 <VgaText::puts(char const*)>
c001448a:	83 c4 10             	add    esp,0x10
c001448d:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c0014492:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014498:	83 ec 08             	sub    esp,0x8
c001449b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001449f:	50                   	push   eax
c00144a0:	e8 e9 37 ff ff       	call   c0007c8e <VgaText::putx(unsigned int)>
c00144a5:	83 c4 10             	add    esp,0x10
c00144a8:	fa                   	cli    
c00144a9:	f4                   	hlt    
c00144aa:	eb fe                	jmp    c00144aa <displayDebugInfo(regs*)+0x31f>

c00144ac <displayProgramFault(char const*)>:
c00144ac:	83 ec 0c             	sub    esp,0xc
c00144af:	83 ec 0c             	sub    esp,0xc
c00144b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144b6:	e8 6d 55 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00144c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00144c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00144ce:	85 c0                	test   eax,eax
c00144d0:	74 21                	je     c00144f3 <displayProgramFault(char const*)+0x47>
c00144d2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00144d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00144d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00144e2:	6a 04                	push   0x4
c00144e4:	6a 0f                	push   0xf
c00144e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144ea:	50                   	push   eax
c00144eb:	e8 56 38 ff ff       	call   c0007d46 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00144f0:	83 c4 10             	add    esp,0x10
c00144f3:	90                   	nop
c00144f4:	83 c4 0c             	add    esp,0xc
c00144f7:	c3                   	ret    

c00144f8 <gpFault(regs*, void*)>:
c00144f8:	83 ec 1c             	sub    esp,0x1c
c00144fb:	c7 05 94 2b 02 c0 7b 3a 01 c0 	mov    DWORD PTR ds:0xc0022b94,0xc0013a7b
c0014505:	a1 94 2b 02 c0       	mov    eax,ds:0xc0022b94
c001450a:	85 c0                	test   eax,eax
c001450c:	74 1c                	je     c001452a <gpFault(regs*, void*)+0x32>
c001450e:	a1 94 2b 02 c0       	mov    eax,ds:0xc0022b94
c0014513:	83 ec 0c             	sub    esp,0xc
c0014516:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001451a:	ff d0                	call   eax
c001451c:	83 c4 10             	add    esp,0x10
c001451f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014523:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014528:	75 2e                	jne    c0014558 <gpFault(regs*, void*)+0x60>
c001452a:	83 ec 0c             	sub    esp,0xc
c001452d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014531:	e8 55 fc ff ff       	call   c001418b <displayDebugInfo(regs*)>
c0014536:	83 c4 10             	add    esp,0x10
c0014539:	83 ec 0c             	sub    esp,0xc
c001453c:	68 49 e5 01 c0       	push   0xc001e549
c0014541:	e8 66 ff ff ff       	call   c00144ac <displayProgramFault(char const*)>
c0014546:	83 c4 10             	add    esp,0x10
c0014549:	83 ec 0c             	sub    esp,0xc
c001454c:	6a 00                	push   0x0
c001454e:	e8 1d ef ff ff       	call   c0013470 <Thr::terminateFromIRQ(int)>
c0014553:	83 c4 10             	add    esp,0x10
c0014556:	eb 01                	jmp    c0014559 <gpFault(regs*, void*)+0x61>
c0014558:	90                   	nop
c0014559:	83 c4 1c             	add    esp,0x1c
c001455c:	c3                   	ret    

c001455d <pgFault(regs*, void*)>:
c001455d:	83 ec 1c             	sub    esp,0x1c
c0014560:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014565:	8b 00                	mov    eax,DWORD PTR [eax]
c0014567:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001456a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0014570:	0f 20 d2             	mov    edx,cr2
c0014573:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014577:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001457b:	83 ec 08             	sub    esp,0x8
c001457e:	52                   	push   edx
c001457f:	50                   	push   eax
c0014580:	e8 d5 50 ff ff       	call   c000965a <VAS::tryLoadBackOffDisk(unsigned long)>
c0014585:	83 c4 10             	add    esp,0x10
c0014588:	84 c0                	test   al,al
c001458a:	75 2e                	jne    c00145ba <pgFault(regs*, void*)+0x5d>
c001458c:	83 ec 0c             	sub    esp,0xc
c001458f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014593:	e8 f3 fb ff ff       	call   c001418b <displayDebugInfo(regs*)>
c0014598:	83 c4 10             	add    esp,0x10
c001459b:	83 ec 0c             	sub    esp,0xc
c001459e:	68 62 e5 01 c0       	push   0xc001e562
c00145a3:	e8 04 ff ff ff       	call   c00144ac <displayProgramFault(char const*)>
c00145a8:	83 c4 10             	add    esp,0x10
c00145ab:	83 ec 0c             	sub    esp,0xc
c00145ae:	6a 00                	push   0x0
c00145b0:	e8 bb ee ff ff       	call   c0013470 <Thr::terminateFromIRQ(int)>
c00145b5:	83 c4 10             	add    esp,0x10
c00145b8:	eb 01                	jmp    c00145bb <pgFault(regs*, void*)+0x5e>
c00145ba:	90                   	nop
c00145bb:	83 c4 1c             	add    esp,0x1c
c00145be:	c3                   	ret    

c00145bf <otherISRHandler(regs*, void*)>:
c00145bf:	83 ec 0c             	sub    esp,0xc
c00145c2:	83 ec 0c             	sub    esp,0xc
c00145c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145c9:	e8 bd fb ff ff       	call   c001418b <displayDebugInfo(regs*)>
c00145ce:	83 c4 10             	add    esp,0x10
c00145d1:	83 ec 0c             	sub    esp,0xc
c00145d4:	68 b4 e5 01 c0       	push   0xc001e5b4
c00145d9:	e8 ce fe ff ff       	call   c00144ac <displayProgramFault(char const*)>
c00145de:	83 c4 10             	add    esp,0x10
c00145e1:	83 ec 0c             	sub    esp,0xc
c00145e4:	6a 00                	push   0x0
c00145e6:	e8 85 ee ff ff       	call   c0013470 <Thr::terminateFromIRQ(int)>
c00145eb:	83 c4 10             	add    esp,0x10
c00145ee:	90                   	nop
c00145ef:	83 c4 0c             	add    esp,0xc
c00145f2:	c3                   	ret    

c00145f3 <opcodeFault(regs*, void*)>:
c00145f3:	55                   	push   ebp
c00145f4:	89 e5                	mov    ebp,esp
c00145f6:	83 ec 08             	sub    esp,0x8
c00145f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145ff:	83 ec 08             	sub    esp,0x8
c0014602:	50                   	push   eax
c0014603:	68 6d e5 01 c0       	push   0xc001e56d
c0014608:	e8 1b 54 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001460d:	83 c4 10             	add    esp,0x10
c0014610:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0014615:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001461b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014621:	84 c0                	test   al,al
c0014623:	74 21                	je     c0014646 <opcodeFault(regs*, void*)+0x53>
c0014625:	83 ec 0c             	sub    esp,0xc
c0014628:	68 dc e5 01 c0       	push   0xc001e5dc
c001462d:	e8 f6 53 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0014632:	83 c4 10             	add    esp,0x10
c0014635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014638:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001463b:	8d 50 19             	lea    edx,[eax+0x19]
c001463e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014641:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014644:	eb 2b                	jmp    c0014671 <opcodeFault(regs*, void*)+0x7e>
c0014646:	83 ec 0c             	sub    esp,0xc
c0014649:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001464c:	e8 3a fb ff ff       	call   c001418b <displayDebugInfo(regs*)>
c0014651:	83 c4 10             	add    esp,0x10
c0014654:	83 ec 0c             	sub    esp,0xc
c0014657:	68 7b e5 01 c0       	push   0xc001e57b
c001465c:	e8 4b fe ff ff       	call   c00144ac <displayProgramFault(char const*)>
c0014661:	83 c4 10             	add    esp,0x10
c0014664:	83 ec 0c             	sub    esp,0xc
c0014667:	6a 00                	push   0x0
c0014669:	e8 02 ee ff ff       	call   c0013470 <Thr::terminateFromIRQ(int)>
c001466e:	83 c4 10             	add    esp,0x10
c0014671:	c9                   	leave  
c0014672:	c3                   	ret    

c0014673 <i386SaveCoprocessor(void*)>:
c0014673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014677:	83 c0 3f             	add    eax,0x3f
c001467a:	83 e0 c0             	and    eax,0xffffffc0
c001467d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014681:	ff 25 8c 2b 02 c0    	jmp    DWORD PTR ds:0xc0022b8c

c0014687 <i386LoadCoprocessor(void*)>:
c0014687:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001468b:	83 c0 3f             	add    eax,0x3f
c001468e:	83 e0 c0             	and    eax,0xffffffc0
c0014691:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014695:	ff 25 88 2b 02 c0    	jmp    DWORD PTR ds:0xc0022b88

c001469b <x87EmulHandler(regs*, void*)>:
c001469b:	53                   	push   ebx
c001469c:	83 ec 08             	sub    esp,0x8
c001469f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146a4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00146a8:	74 10                	je     c00146ba <x87EmulHandler(regs*, void*)+0x1f>
c00146aa:	83 ec 0c             	sub    esp,0xc
c00146ad:	68 88 e5 01 c0       	push   0xc001e588
c00146b2:	e8 ea ae ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c00146b7:	83 c4 10             	add    esp,0x10
c00146ba:	0f 20 c0             	mov    eax,cr0
c00146bd:	a8 08                	test   al,0x8
c00146bf:	74 59                	je     c001471a <x87EmulHandler(regs*, void*)+0x7f>
c00146c1:	0f 06                	clts   
c00146c3:	a1 84 2b 02 c0       	mov    eax,ds:0xc0022b84
c00146c8:	85 c0                	test   eax,eax
c00146ca:	74 0e                	je     c00146da <x87EmulHandler(regs*, void*)+0x3f>
c00146cc:	83 ec 0c             	sub    esp,0xc
c00146cf:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00146d2:	e8 9c ff ff ff       	call   c0014673 <i386SaveCoprocessor(void*)>
c00146d7:	83 c4 10             	add    esp,0x10
c00146da:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00146e0:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00146e4:	75 12                	jne    c00146f8 <x87EmulHandler(regs*, void*)+0x5d>
c00146e6:	83 ec 0c             	sub    esp,0xc
c00146e9:	68 40 02 00 00       	push   0x240
c00146ee:	e8 72 25 ff ff       	call   c0006c65 <malloc>
c00146f3:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00146f6:	eb 10                	jmp    c0014708 <x87EmulHandler(regs*, void*)+0x6d>
c00146f8:	83 ec 0c             	sub    esp,0xc
c00146fb:	a1 84 2b 02 c0       	mov    eax,ds:0xc0022b84
c0014700:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014703:	e8 7f ff ff ff       	call   c0014687 <i386LoadCoprocessor(void*)>
c0014708:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001470d:	83 c4 10             	add    esp,0x10
c0014710:	a3 84 2b 02 c0       	mov    ds:0xc0022b84,eax
c0014715:	83 c4 08             	add    esp,0x8
c0014718:	5b                   	pop    ebx
c0014719:	c3                   	ret    
c001471a:	83 ec 0c             	sub    esp,0xc
c001471d:	68 9c e5 01 c0       	push   0xc001e59c
c0014722:	e8 01 53 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0014727:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001472f:	83 c4 18             	add    esp,0x18
c0014732:	5b                   	pop    ebx
c0014733:	e9 38 ed ff ff       	jmp    c0013470 <Thr::terminateFromIRQ(int)>

c0014738 <Hal::initialiseCoprocessor()>:
c0014738:	83 ec 10             	sub    esp,0x10
c001473b:	c7 05 84 2b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022b84,0x0
c0014745:	6a 00                	push   0x0
c0014747:	68 9b 46 01 c0       	push   0xc001469b
c001474c:	6a 07                	push   0x7
c001474e:	e8 49 6c ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014753:	e8 88 6a 00 00       	call   c001b1e0 <avxDetect>
c0014758:	83 c4 10             	add    esp,0x10
c001475b:	85 c0                	test   eax,eax
c001475d:	74 1c                	je     c001477b <Hal::initialiseCoprocessor()+0x43>
c001475f:	c7 05 8c 2b 02 c0 0a b2 01 c0 	mov    DWORD PTR ds:0xc0022b8c,0xc001b20a
c0014769:	c7 05 88 2b 02 c0 1b b2 01 c0 	mov    DWORD PTR ds:0xc0022b88,0xc001b21b
c0014773:	83 c4 0c             	add    esp,0xc
c0014776:	e9 b1 6a 00 00       	jmp    c001b22c <avxInit>
c001477b:	e8 e0 6c 00 00       	call   c001b460 <absolutelyNoChanceInHell>
c0014780:	85 c0                	test   eax,eax
c0014782:	74 1c                	je     c00147a0 <Hal::initialiseCoprocessor()+0x68>
c0014784:	c7 05 8c 2b 02 c0 78 b4 01 c0 	mov    DWORD PTR ds:0xc0022b8c,0xc001b478
c001478e:	c7 05 88 2b 02 c0 80 b4 01 c0 	mov    DWORD PTR ds:0xc0022b88,0xc001b480
c0014798:	83 c4 0c             	add    esp,0xc
c001479b:	e9 e8 6c 00 00       	jmp    c001b488 <sseInit>
c00147a0:	e8 01 6d 00 00       	call   c001b4a6 <x87Detect>
c00147a5:	85 c0                	test   eax,eax
c00147a7:	74 1c                	je     c00147c5 <Hal::initialiseCoprocessor()+0x8d>
c00147a9:	c7 05 8c 2b 02 c0 c1 b4 01 c0 	mov    DWORD PTR ds:0xc0022b8c,0xc001b4c1
c00147b3:	c7 05 88 2b 02 c0 c8 b4 01 c0 	mov    DWORD PTR ds:0xc0022b88,0xc001b4c8
c00147bd:	83 c4 0c             	add    esp,0xc
c00147c0:	e9 0a 6d 00 00       	jmp    c001b4cf <x87Init>
c00147c5:	c7 05 8c 2b 02 c0 50 41 01 c0 	mov    DWORD PTR ds:0xc0022b8c,0xc0014150
c00147cf:	c7 05 88 2b 02 c0 50 41 01 c0 	mov    DWORD PTR ds:0xc0022b88,0xc0014150
c00147d9:	0f 20 c0             	mov    eax,cr0
c00147dc:	83 c8 04             	or     eax,0x4
c00147df:	0f 22 c0             	mov    cr0,eax
c00147e2:	83 c4 0c             	add    esp,0xc
c00147e5:	c3                   	ret    

c00147e6 <Hal::panic(char const*)>:
c00147e6:	e9 b6 ad ff ff       	jmp    c000f5a1 <Krnl::panic(char const*)>

c00147eb <Hal::initialise()>:
c00147eb:	53                   	push   ebx
c00147ec:	83 ec 08             	sub    esp,0x8
c00147ef:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c00147f4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00147fa:	b8 51 41 01 c0       	mov    eax,0xc0014151
c00147ff:	f6 82 8c 11 00 00 02 	test   BYTE PTR [edx+0x118c],0x2
c0014806:	74 05                	je     c001480d <Hal::initialise()+0x22>
c0014808:	b8 56 41 01 c0       	mov    eax,0xc0014156
c001480d:	a3 90 2b 02 c0       	mov    ds:0xc0022b90,eax
c0014812:	e8 b8 6d ff ff       	call   c000b5cf <setupINTS()>
c0014817:	80 3d e0 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ee0,0x0
c001481e:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0014823:	75 07                	jne    c001482c <Hal::initialise()+0x41>
c0014825:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c001482c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014832:	83 e0 01             	and    eax,0x1
c0014835:	a2 80 2b 02 c0       	mov    ds:0xc0022b80,al
c001483a:	e8 a5 02 00 00       	call   c0014ae4 <picOpen()>
c001483f:	80 3d 80 2b 02 c0 00 	cmp    BYTE PTR ds:0xc0022b80,0x0
c0014846:	74 0a                	je     c0014852 <Hal::initialise()+0x67>
c0014848:	e8 df 01 00 00       	call   c0014a2c <picDisable()>
c001484d:	e8 04 63 00 00       	call   c001ab56 <apicOpen()>
c0014852:	bb 0f 00 00 00       	mov    ebx,0xf
c0014857:	50                   	push   eax
c0014858:	6a 00                	push   0x0
c001485a:	68 bf 45 01 c0       	push   0xc00145bf
c001485f:	6a 00                	push   0x0
c0014861:	e8 36 6b ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014866:	83 c4 0c             	add    esp,0xc
c0014869:	6a 00                	push   0x0
c001486b:	68 bf 45 01 c0       	push   0xc00145bf
c0014870:	6a 01                	push   0x1
c0014872:	e8 25 6b ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014877:	83 c4 0c             	add    esp,0xc
c001487a:	6a 00                	push   0x0
c001487c:	68 59 41 01 c0       	push   0xc0014159
c0014881:	6a 02                	push   0x2
c0014883:	e8 14 6b ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014888:	83 c4 0c             	add    esp,0xc
c001488b:	6a 00                	push   0x0
c001488d:	68 bf 45 01 c0       	push   0xc00145bf
c0014892:	6a 03                	push   0x3
c0014894:	e8 03 6b ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014899:	83 c4 0c             	add    esp,0xc
c001489c:	6a 00                	push   0x0
c001489e:	68 bf 45 01 c0       	push   0xc00145bf
c00148a3:	6a 04                	push   0x4
c00148a5:	e8 f2 6a ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00148aa:	83 c4 0c             	add    esp,0xc
c00148ad:	6a 00                	push   0x0
c00148af:	68 bf 45 01 c0       	push   0xc00145bf
c00148b4:	6a 05                	push   0x5
c00148b6:	e8 e1 6a ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00148bb:	83 c4 0c             	add    esp,0xc
c00148be:	6a 00                	push   0x0
c00148c0:	68 f3 45 01 c0       	push   0xc00145f3
c00148c5:	6a 06                	push   0x6
c00148c7:	e8 d0 6a ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00148cc:	83 c4 0c             	add    esp,0xc
c00148cf:	6a 00                	push   0x0
c00148d1:	68 72 41 01 c0       	push   0xc0014172
c00148d6:	6a 08                	push   0x8
c00148d8:	e8 bf 6a ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00148dd:	83 c4 0c             	add    esp,0xc
c00148e0:	6a 00                	push   0x0
c00148e2:	68 bf 45 01 c0       	push   0xc00145bf
c00148e7:	6a 09                	push   0x9
c00148e9:	e8 ae 6a ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00148ee:	83 c4 0c             	add    esp,0xc
c00148f1:	6a 00                	push   0x0
c00148f3:	68 bf 45 01 c0       	push   0xc00145bf
c00148f8:	6a 0a                	push   0xa
c00148fa:	e8 9d 6a ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00148ff:	83 c4 0c             	add    esp,0xc
c0014902:	6a 00                	push   0x0
c0014904:	68 bf 45 01 c0       	push   0xc00145bf
c0014909:	6a 0b                	push   0xb
c001490b:	e8 8c 6a ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014910:	83 c4 0c             	add    esp,0xc
c0014913:	6a 00                	push   0x0
c0014915:	68 f8 44 01 c0       	push   0xc00144f8
c001491a:	6a 0d                	push   0xd
c001491c:	e8 7b 6a ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014921:	83 c4 0c             	add    esp,0xc
c0014924:	6a 00                	push   0x0
c0014926:	68 5d 45 01 c0       	push   0xc001455d
c001492b:	6a 0e                	push   0xe
c001492d:	e8 6a 6a ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014932:	83 c4 10             	add    esp,0x10
c0014935:	50                   	push   eax
c0014936:	6a 00                	push   0x0
c0014938:	68 bf 45 01 c0       	push   0xc00145bf
c001493d:	53                   	push   ebx
c001493e:	43                   	inc    ebx
c001493f:	e8 58 6a ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014944:	83 c4 10             	add    esp,0x10
c0014947:	83 fb 1e             	cmp    ebx,0x1e
c001494a:	75 e9                	jne    c0014935 <Hal::initialise()+0x14a>
c001494c:	50                   	push   eax
c001494d:	6a 00                	push   0x0
c001494f:	68 d1 10 01 c0       	push   0xc00110d1
c0014954:	6a 60                	push   0x60
c0014956:	e8 41 6a ff ff       	call   c000b39c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001495b:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0014960:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001496a:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0014971:	e8 ef 22 ff ff       	call   c0006c65 <malloc>
c0014976:	89 04 24             	mov    DWORD PTR [esp],eax
c0014979:	89 c3                	mov    ebx,eax
c001497b:	e8 2c 09 00 00       	call   c00152ac <RTC::RTC()>
c0014980:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001498a:	5a                   	pop    edx
c001498b:	59                   	pop    ecx
c001498c:	53                   	push   ebx
c001498d:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014993:	e8 d0 64 ff ff       	call   c000ae68 <Device::addChild(Device*)>
c0014998:	8b 03                	mov    eax,DWORD PTR [ebx]
c001499a:	6a 00                	push   0x0
c001499c:	6a 00                	push   0x0
c001499e:	6a 00                	push   0x0
c00149a0:	53                   	push   ebx
c00149a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00149a4:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c00149a9:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00149af:	83 c4 28             	add    esp,0x28
c00149b2:	5b                   	pop    ebx
c00149b3:	c3                   	ret    

c00149b4 <Hal::makeBeep(int)>:
c00149b4:	53                   	push   ebx
c00149b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00149b9:	85 db                	test   ebx,ebx
c00149bb:	75 07                	jne    c00149c4 <Hal::makeBeep(int)+0x10>
c00149bd:	e4 61                	in     al,0x61
c00149bf:	83 e0 fc             	and    eax,0xfffffffc
c00149c2:	eb 26                	jmp    c00149ea <Hal::makeBeep(int)+0x36>
c00149c4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00149c9:	99                   	cdq    
c00149ca:	f7 fb                	idiv   ebx
c00149cc:	89 c1                	mov    ecx,eax
c00149ce:	b0 b6                	mov    al,0xb6
c00149d0:	e6 43                	out    0x43,al
c00149d2:	88 c8                	mov    al,cl
c00149d4:	e6 42                	out    0x42,al
c00149d6:	89 c8                	mov    eax,ecx
c00149d8:	c1 e8 08             	shr    eax,0x8
c00149db:	e6 42                	out    0x42,al
c00149dd:	e4 61                	in     al,0x61
c00149df:	88 c2                	mov    dl,al
c00149e1:	83 ca 03             	or     edx,0x3
c00149e4:	38 c2                	cmp    dl,al
c00149e6:	74 04                	je     c00149ec <Hal::makeBeep(int)+0x38>
c00149e8:	88 d0                	mov    al,dl
c00149ea:	e6 61                	out    0x61,al
c00149ec:	5b                   	pop    ebx
c00149ed:	c3                   	ret    

c00149ee <Hal::getRand()>:
c00149ee:	31 c0                	xor    eax,eax
c00149f0:	c3                   	ret    

c00149f1 <Hal::endOfInterrupt(int)>:
c00149f1:	80 3d 80 2b 02 c0 00 	cmp    BYTE PTR ds:0xc0022b80,0x0
c00149f8:	74 23                	je     c0014a1d <Hal::endOfInterrupt(int)+0x2c>
c00149fa:	83 ec 14             	sub    esp,0x14
c00149fd:	6a 1b                	push   0x1b
c00149ff:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014a05:	e8 28 18 ff ff       	call   c0006232 <Computer::rdmsr(unsigned int)>
c0014a0a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a0f:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0014a19:	83 c4 1c             	add    esp,0x1c
c0014a1c:	c3                   	ret    
c0014a1d:	e9 52 02 00 00       	jmp    c0014c74 <picEOI(int)>
c0014a22:	66 90                	xchg   ax,ax

c0014a24 <picIoWait()>:
c0014a24:	eb 00                	jmp    c0014a26 <picIoWait()+0x2>
c0014a26:	eb 00                	jmp    c0014a28 <picIoWait()+0x4>
c0014a28:	90                   	nop
c0014a29:	c3                   	ret    
c0014a2a:	66 90                	xchg   ax,ax

c0014a2c <picDisable()>:
c0014a2c:	83 ec 10             	sub    esp,0x10
c0014a2f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0014a36:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0014a3b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0014a3f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0014a44:	ee                   	out    dx,al
c0014a45:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0014a4c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0014a51:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0014a55:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014a5a:	ee                   	out    dx,al
c0014a5b:	90                   	nop
c0014a5c:	83 c4 10             	add    esp,0x10
c0014a5f:	c3                   	ret    

c0014a60 <picGetIRQReg(int)>:
c0014a60:	83 ec 10             	sub    esp,0x10
c0014a63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a67:	25 ff 00 00 00       	and    eax,0xff
c0014a6c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0014a73:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0014a77:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0014a7b:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0014a80:	ee                   	out    dx,al
c0014a81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a85:	25 ff 00 00 00       	and    eax,0xff
c0014a8a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0014a91:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0014a95:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0014a99:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0014a9e:	ee                   	out    dx,al
c0014a9f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0014aa6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014aab:	89 c2                	mov    edx,eax
c0014aad:	ec                   	in     al,dx
c0014aae:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0014ab2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0014ab6:	25 ff 00 00 00       	and    eax,0xff
c0014abb:	c1 e0 08             	shl    eax,0x8
c0014abe:	89 c1                	mov    ecx,eax
c0014ac0:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0014ac7:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0014acc:	89 c2                	mov    edx,eax
c0014ace:	ec                   	in     al,dx
c0014acf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0014ad3:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0014ad7:	25 ff 00 00 00       	and    eax,0xff
c0014adc:	09 c8                	or     eax,ecx
c0014ade:	83 c4 10             	add    esp,0x10
c0014ae1:	c3                   	ret    
c0014ae2:	66 90                	xchg   ax,ax

c0014ae4 <picOpen()>:
c0014ae4:	83 ec 50             	sub    esp,0x50
c0014ae7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0014aee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0014af3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014af7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014afb:	ee                   	out    dx,al
c0014afc:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0014b03:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0014b08:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0014b0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014b10:	ee                   	out    dx,al
c0014b11:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0014b19:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0014b21:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0014b28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b2c:	89 c2                	mov    edx,eax
c0014b2e:	ec                   	in     al,dx
c0014b2f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0014b33:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014b37:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014b3b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0014b42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b46:	89 c2                	mov    edx,eax
c0014b48:	ec                   	in     al,dx
c0014b49:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014b4d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0014b51:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0014b55:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0014b5c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0014b61:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0014b65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b69:	ee                   	out    dx,al
c0014b6a:	e8 b5 fe ff ff       	call   c0014a24 <picIoWait()>
c0014b6f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0014b76:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0014b7b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0014b7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014b83:	ee                   	out    dx,al
c0014b84:	e8 9b fe ff ff       	call   c0014a24 <picIoWait()>
c0014b89:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014b8d:	25 ff 00 00 00       	and    eax,0xff
c0014b92:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0014b99:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0014b9d:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0014ba1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014ba5:	ee                   	out    dx,al
c0014ba6:	e8 79 fe ff ff       	call   c0014a24 <picIoWait()>
c0014bab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014baf:	25 ff 00 00 00       	and    eax,0xff
c0014bb4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0014bbb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014bbf:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0014bc3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014bc7:	ee                   	out    dx,al
c0014bc8:	e8 57 fe ff ff       	call   c0014a24 <picIoWait()>
c0014bcd:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0014bd4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0014bd9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0014bdd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014be1:	ee                   	out    dx,al
c0014be2:	e8 3d fe ff ff       	call   c0014a24 <picIoWait()>
c0014be7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0014bee:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0014bf3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014bf7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014bfb:	ee                   	out    dx,al
c0014bfc:	e8 23 fe ff ff       	call   c0014a24 <picIoWait()>
c0014c01:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0014c08:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0014c0d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014c11:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014c15:	ee                   	out    dx,al
c0014c16:	e8 09 fe ff ff       	call   c0014a24 <picIoWait()>
c0014c1b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0014c22:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0014c27:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014c2b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014c2f:	ee                   	out    dx,al
c0014c30:	e8 ef fd ff ff       	call   c0014a24 <picIoWait()>
c0014c35:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0014c39:	25 ff 00 00 00       	and    eax,0xff
c0014c3e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0014c45:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0014c49:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0014c4d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014c51:	ee                   	out    dx,al
c0014c52:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0014c56:	25 ff 00 00 00       	and    eax,0xff
c0014c5b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0014c62:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014c66:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0014c6a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0014c6e:	ee                   	out    dx,al
c0014c6f:	90                   	nop
c0014c70:	83 c4 50             	add    esp,0x50
c0014c73:	c3                   	ret    

c0014c74 <picEOI(int)>:
c0014c74:	83 ec 10             	sub    esp,0x10
c0014c77:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0014c7c:	75 22                	jne    c0014ca0 <picEOI(int)+0x2c>
c0014c7e:	6a 0b                	push   0xb
c0014c80:	e8 db fd ff ff       	call   c0014a60 <picGetIRQReg(int)>
c0014c85:	83 c4 04             	add    esp,0x4
c0014c88:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014c8d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0014c92:	25 ff ff 00 00       	and    eax,0xffff
c0014c97:	25 80 00 00 00       	and    eax,0x80
c0014c9c:	74 72                	je     c0014d10 <picEOI(int)+0x9c>
c0014c9e:	66 90                	xchg   ax,ax
c0014ca0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014ca5:	75 31                	jne    c0014cd8 <picEOI(int)+0x64>
c0014ca7:	6a 0b                	push   0xb
c0014ca9:	e8 b2 fd ff ff       	call   c0014a60 <picGetIRQReg(int)>
c0014cae:	83 c4 04             	add    esp,0x4
c0014cb1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014cb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014cba:	66 85 c0             	test   ax,ax
c0014cbd:	78 19                	js     c0014cd8 <picEOI(int)+0x64>
c0014cbf:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0014cc6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0014ccb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0014ccf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0014cd4:	ee                   	out    dx,al
c0014cd5:	eb 3d                	jmp    c0014d14 <picEOI(int)+0xa0>
c0014cd7:	90                   	nop
c0014cd8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0014cdd:	7e 19                	jle    c0014cf8 <picEOI(int)+0x84>
c0014cdf:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0014ce6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0014ceb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0014cef:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0014cf4:	ee                   	out    dx,al
c0014cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0014cf8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0014cff:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0014d04:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0014d08:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0014d0d:	ee                   	out    dx,al
c0014d0e:	eb 04                	jmp    c0014d14 <picEOI(int)+0xa0>
c0014d10:	90                   	nop
c0014d11:	8d 76 00             	lea    esi,[esi+0x0]
c0014d14:	83 c4 10             	add    esp,0x10
c0014d17:	c3                   	ret    

c0014d18 <RTC::open(int, int, void*)>:
c0014d18:	31 c0                	xor    eax,eax
c0014d1a:	c3                   	ret    
c0014d1b:	90                   	nop

c0014d1c <RTC::close(int, int, void*)>:
c0014d1c:	31 c0                	xor    eax,eax
c0014d1e:	c3                   	ret    
c0014d1f:	90                   	nop

c0014d20 <RTC::timeInSecondsUTC()>:
c0014d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d24:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0014d2a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014d30:	c3                   	ret    
c0014d31:	90                   	nop

c0014d32 <RTC::timeInDatetimeUTC()>:
c0014d32:	53                   	push   ebx
c0014d33:	83 ec 14             	sub    esp,0x14
c0014d36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014d3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0014d40:	50                   	push   eax
c0014d41:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0014d44:	83 c4 0c             	add    esp,0xc
c0014d47:	52                   	push   edx
c0014d48:	50                   	push   eax
c0014d49:	53                   	push   ebx
c0014d4a:	e8 8d 5e ff ff       	call   c000abdc <secondsToDatetime(unsigned long long)>
c0014d4f:	89 d8                	mov    eax,ebx
c0014d51:	83 c4 14             	add    esp,0x14
c0014d54:	5b                   	pop    ebx
c0014d55:	c2 04 00             	ret    0x4

c0014d58 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0014d58:	56                   	push   esi
c0014d59:	53                   	push   ebx
c0014d5a:	83 ec 14             	sub    esp,0x14
c0014d5d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014d61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d63:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0014d66:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014d6a:	52                   	push   edx
c0014d6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d73:	50                   	push   eax
c0014d74:	e8 63 5e ff ff       	call   c000abdc <secondsToDatetime(unsigned long long)>
c0014d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d7d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014d85:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0014d89:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d8d:	89 f0                	mov    eax,esi
c0014d8f:	83 c4 20             	add    esp,0x20
c0014d92:	5b                   	pop    ebx
c0014d93:	5e                   	pop    esi
c0014d94:	ff e0                	jmp    eax

c0014d96 <RTC::~RTC()>:
c0014d96:	83 ec 0c             	sub    esp,0xc
c0014d99:	ba 1c e6 01 c0       	mov    edx,0xc001e61c
c0014d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014da2:	89 10                	mov    DWORD PTR [eax],edx
c0014da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014da8:	83 ec 0c             	sub    esp,0xc
c0014dab:	50                   	push   eax
c0014dac:	e8 af 5b ff ff       	call   c000a960 <Clock::~Clock()>
c0014db1:	83 c4 10             	add    esp,0x10
c0014db4:	90                   	nop
c0014db5:	83 c4 0c             	add    esp,0xc
c0014db8:	c3                   	ret    
c0014db9:	90                   	nop

c0014dba <RTC::~RTC()>:
c0014dba:	83 ec 0c             	sub    esp,0xc
c0014dbd:	83 ec 0c             	sub    esp,0xc
c0014dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dc4:	e8 cd ff ff ff       	call   c0014d96 <RTC::~RTC()>
c0014dc9:	83 c4 10             	add    esp,0x10
c0014dcc:	83 ec 08             	sub    esp,0x8
c0014dcf:	68 60 01 00 00       	push   0x160
c0014dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dd8:	e8 55 4b ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c0014ddd:	83 c4 10             	add    esp,0x10
c0014de0:	83 c4 0c             	add    esp,0xc
c0014de3:	c3                   	ret    

c0014de4 <RTC::get_update_in_progress_flag()>:
c0014de4:	83 ec 14             	sub    esp,0x14
c0014de7:	6a 0a                	push   0xa
c0014de9:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014def:	e8 f2 14 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014df4:	83 c4 1c             	add    esp,0x1c
c0014df7:	c0 e8 07             	shr    al,0x7
c0014dfa:	c3                   	ret    
c0014dfb:	90                   	nop

c0014dfc <RTC::completeRTCRefresh()>:
c0014dfc:	55                   	push   ebp
c0014dfd:	57                   	push   edi
c0014dfe:	56                   	push   esi
c0014dff:	53                   	push   ebx
c0014e00:	83 ec 2c             	sub    esp,0x2c
c0014e03:	8b 1d ec 1b 02 c0    	mov    ebx,DWORD PTR ds:0xc0021bec
c0014e09:	83 ec 0c             	sub    esp,0xc
c0014e0c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014e10:	e8 cf ff ff ff       	call   c0014de4 <RTC::get_update_in_progress_flag()>
c0014e15:	83 c4 10             	add    esp,0x10
c0014e18:	84 c0                	test   al,al
c0014e1a:	74 0e                	je     c0014e2a <RTC::completeRTCRefresh()+0x2e>
c0014e1c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014e22:	3b 05 ec 1b 02 c0    	cmp    eax,DWORD PTR ds:0xc0021bec
c0014e28:	73 df                	jae    c0014e09 <RTC::completeRTCRefresh()+0xd>
c0014e2a:	55                   	push   ebp
c0014e2b:	55                   	push   ebp
c0014e2c:	6a 00                	push   0x0
c0014e2e:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014e34:	e8 ad 14 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014e39:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014e3d:	58                   	pop    eax
c0014e3e:	5a                   	pop    edx
c0014e3f:	6a 02                	push   0x2
c0014e41:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014e47:	e8 9a 14 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014e4c:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0014e50:	59                   	pop    ecx
c0014e51:	5b                   	pop    ebx
c0014e52:	6a 04                	push   0x4
c0014e54:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014e5a:	e8 87 14 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014e5f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0014e63:	5e                   	pop    esi
c0014e64:	5f                   	pop    edi
c0014e65:	6a 07                	push   0x7
c0014e67:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014e6d:	e8 74 14 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014e72:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0014e76:	5d                   	pop    ebp
c0014e77:	58                   	pop    eax
c0014e78:	6a 08                	push   0x8
c0014e7a:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014e80:	e8 61 14 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014e85:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0014e89:	58                   	pop    eax
c0014e8a:	5a                   	pop    edx
c0014e8b:	6a 09                	push   0x9
c0014e8d:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014e93:	e8 4e 14 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014e98:	83 c4 10             	add    esp,0x10
c0014e9b:	0f b6 e8             	movzx  ebp,al
c0014e9e:	8b 1d ec 1b 02 c0    	mov    ebx,DWORD PTR ds:0xc0021bec
c0014ea4:	83 ec 0c             	sub    esp,0xc
c0014ea7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014eab:	e8 34 ff ff ff       	call   c0014de4 <RTC::get_update_in_progress_flag()>
c0014eb0:	83 c4 10             	add    esp,0x10
c0014eb3:	84 c0                	test   al,al
c0014eb5:	74 0e                	je     c0014ec5 <RTC::completeRTCRefresh()+0xc9>
c0014eb7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014ebd:	3b 05 ec 1b 02 c0    	cmp    eax,DWORD PTR ds:0xc0021bec
c0014ec3:	73 df                	jae    c0014ea4 <RTC::completeRTCRefresh()+0xa8>
c0014ec5:	50                   	push   eax
c0014ec6:	50                   	push   eax
c0014ec7:	6a 00                	push   0x0
c0014ec9:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014ecf:	e8 12 14 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014ed4:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0014ed8:	58                   	pop    eax
c0014ed9:	5a                   	pop    edx
c0014eda:	6a 02                	push   0x2
c0014edc:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014ee2:	e8 ff 13 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014ee7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014eeb:	59                   	pop    ecx
c0014eec:	5b                   	pop    ebx
c0014eed:	6a 04                	push   0x4
c0014eef:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014ef5:	e8 ec 13 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014efa:	5e                   	pop    esi
c0014efb:	88 c3                	mov    bl,al
c0014efd:	5f                   	pop    edi
c0014efe:	6a 07                	push   0x7
c0014f00:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014f06:	e8 db 13 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014f0b:	89 c6                	mov    esi,eax
c0014f0d:	58                   	pop    eax
c0014f0e:	5a                   	pop    edx
c0014f0f:	6a 08                	push   0x8
c0014f11:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014f17:	e8 ca 13 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014f1c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0014f20:	59                   	pop    ecx
c0014f21:	5f                   	pop    edi
c0014f22:	6a 09                	push   0x9
c0014f24:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014f2a:	e8 b7 13 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014f2f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0014f33:	0f b6 f8             	movzx  edi,al
c0014f36:	83 c4 10             	add    esp,0x10
c0014f39:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0014f3d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014f41:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0014f45:	89 f1                	mov    ecx,esi
c0014f47:	0f 94 c0             	sete   al
c0014f4a:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0014f4e:	0f 94 c2             	sete   dl
c0014f51:	21 d0                	and    eax,edx
c0014f53:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0014f57:	0f 94 c2             	sete   dl
c0014f5a:	21 c2                	and    edx,eax
c0014f5c:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0014f60:	0f 94 c0             	sete   al
c0014f63:	21 d0                	and    eax,edx
c0014f65:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014f69:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0014f6d:	0f 94 c1             	sete   cl
c0014f70:	84 c8                	test   al,cl
c0014f72:	75 29                	jne    c0014f9d <RTC::completeRTCRefresh()+0x1a1>
c0014f74:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014f78:	89 fd                	mov    ebp,edi
c0014f7a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014f7e:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0014f82:	89 f0                	mov    eax,esi
c0014f84:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0014f88:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014f8c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014f90:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014f94:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014f98:	e9 01 ff ff ff       	jmp    c0014e9e <RTC::completeRTCRefresh()+0xa2>
c0014f9d:	39 fd                	cmp    ebp,edi
c0014f9f:	75 d3                	jne    c0014f74 <RTC::completeRTCRefresh()+0x178>
c0014fa1:	55                   	push   ebp
c0014fa2:	55                   	push   ebp
c0014fa3:	6a 0b                	push   0xb
c0014fa5:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0014fab:	e8 36 13 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0014fb0:	83 c4 10             	add    esp,0x10
c0014fb3:	89 c5                	mov    ebp,eax
c0014fb5:	a8 04                	test   al,0x4
c0014fb7:	75 78                	jne    c0015031 <RTC::completeRTCRefresh()+0x235>
c0014fb9:	b1 0a                	mov    cl,0xa
c0014fbb:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0014fbf:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014fc3:	83 e2 0f             	and    edx,0xf
c0014fc6:	c0 e8 04             	shr    al,0x4
c0014fc9:	c1 ef 04             	shr    edi,0x4
c0014fcc:	f6 e1                	mul    cl
c0014fce:	6b ff 0a             	imul   edi,edi,0xa
c0014fd1:	01 d0                	add    eax,edx
c0014fd3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014fd7:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014fdb:	83 e2 0f             	and    edx,0xf
c0014fde:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014fe2:	c0 e8 04             	shr    al,0x4
c0014fe5:	f6 e1                	mul    cl
c0014fe7:	01 d0                	add    eax,edx
c0014fe9:	88 da                	mov    dl,bl
c0014feb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014fef:	83 e2 0f             	and    edx,0xf
c0014ff2:	88 d8                	mov    al,bl
c0014ff4:	83 e3 80             	and    ebx,0xffffff80
c0014ff7:	c0 e8 04             	shr    al,0x4
c0014ffa:	83 e0 07             	and    eax,0x7
c0014ffd:	f6 e1                	mul    cl
c0014fff:	01 d0                	add    eax,edx
c0015001:	89 f2                	mov    edx,esi
c0015003:	09 c3                	or     ebx,eax
c0015005:	83 e2 0f             	and    edx,0xf
c0015008:	89 f0                	mov    eax,esi
c001500a:	c0 e8 04             	shr    al,0x4
c001500d:	f6 e1                	mul    cl
c001500f:	8d 34 02             	lea    esi,[edx+eax*1]
c0015012:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015016:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001501a:	83 e2 0f             	and    edx,0xf
c001501d:	c0 e8 04             	shr    al,0x4
c0015020:	f6 e1                	mul    cl
c0015022:	01 d0                	add    eax,edx
c0015024:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015028:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001502c:	83 e0 0f             	and    eax,0xf
c001502f:	01 c7                	add    edi,eax
c0015031:	83 e5 02             	and    ebp,0x2
c0015034:	75 14                	jne    c001504a <RTC::completeRTCRefresh()+0x24e>
c0015036:	84 db                	test   bl,bl
c0015038:	79 10                	jns    c001504a <RTC::completeRTCRefresh()+0x24e>
c001503a:	83 e3 7f             	and    ebx,0x7f
c001503d:	b9 18 00 00 00       	mov    ecx,0x18
c0015042:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015045:	99                   	cdq    
c0015046:	f7 f9                	idiv   ecx
c0015048:	88 d3                	mov    bl,dl
c001504a:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015050:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015056:	77 06                	ja     c001505e <RTC::completeRTCRefresh()+0x262>
c0015058:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001505e:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015063:	31 d2                	xor    edx,edx
c0015065:	c1 e1 10             	shl    ecx,0x10
c0015068:	89 d7                	mov    edi,edx
c001506a:	c1 e5 10             	shl    ebp,0x10
c001506d:	31 c0                	xor    eax,eax
c001506f:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015075:	09 cf                	or     edi,ecx
c0015077:	89 fa                	mov    edx,edi
c0015079:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001507d:	88 da                	mov    dl,bl
c001507f:	89 f3                	mov    ebx,esi
c0015081:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015085:	88 d8                	mov    al,bl
c0015087:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001508b:	0f b7 c8             	movzx  ecx,ax
c001508e:	09 e9                	or     ecx,ebp
c0015090:	89 c8                	mov    eax,ecx
c0015092:	51                   	push   ecx
c0015093:	51                   	push   ecx
c0015094:	52                   	push   edx
c0015095:	50                   	push   eax
c0015096:	e8 b4 59 ff ff       	call   c000aa4f <datetimeToSeconds(datetime_t)>
c001509b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001509f:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00150a5:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00150ab:	83 c4 3c             	add    esp,0x3c
c00150ae:	5b                   	pop    ebx
c00150af:	5e                   	pop    esi
c00150b0:	5f                   	pop    edi
c00150b1:	5d                   	pop    ebp
c00150b2:	c3                   	ret    
c00150b3:	90                   	nop

c00150b4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00150b4:	55                   	push   ebp
c00150b5:	57                   	push   edi
c00150b6:	56                   	push   esi
c00150b7:	53                   	push   ebx
c00150b8:	83 ec 30             	sub    esp,0x30
c00150bb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00150bf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00150c3:	6a 00                	push   0x0
c00150c5:	6a 00                	push   0x0
c00150c7:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c00150cd:	e8 2a 13 ff ff       	call   c00063fc <Computer::writeCMOS(unsigned char, unsigned char)>
c00150d2:	83 c4 0c             	add    esp,0xc
c00150d5:	6a 00                	push   0x0
c00150d7:	6a 02                	push   0x2
c00150d9:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c00150df:	e8 18 13 ff ff       	call   c00063fc <Computer::writeCMOS(unsigned char, unsigned char)>
c00150e4:	31 d2                	xor    edx,edx
c00150e6:	89 f9                	mov    ecx,edi
c00150e8:	89 f8                	mov    eax,edi
c00150ea:	c1 e9 10             	shr    ecx,0x10
c00150ed:	0f b6 c4             	movzx  eax,ah
c00150f0:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c00150f4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00150f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00150fc:	b9 64 00 00 00       	mov    ecx,0x64
c0015101:	89 f0                	mov    eax,esi
c0015103:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015107:	89 f0                	mov    eax,esi
c0015109:	0f b6 c4             	movzx  eax,ah
c001510c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015110:	89 f0                	mov    eax,esi
c0015112:	c1 e8 10             	shr    eax,0x10
c0015115:	66 f7 f1             	div    cx
c0015118:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c001511d:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015122:	59                   	pop    ecx
c0015123:	5b                   	pop    ebx
c0015124:	89 fb                	mov    ebx,edi
c0015126:	6a 0b                	push   0xb
c0015128:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c001512e:	e8 b3 11 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0015133:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015137:	83 c4 10             	add    esp,0x10
c001513a:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001513f:	75 74                	jne    c00151b5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015141:	b2 0a                	mov    dl,0xa
c0015143:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015147:	0f b6 c1             	movzx  eax,cl
c001514a:	f6 f2                	div    dl
c001514c:	88 c3                	mov    bl,al
c001514e:	88 e0                	mov    al,ah
c0015150:	c1 e3 04             	shl    ebx,0x4
c0015153:	09 c3                	or     ebx,eax
c0015155:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001515a:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001515e:	f6 f2                	div    dl
c0015160:	88 c1                	mov    cl,al
c0015162:	88 e0                	mov    al,ah
c0015164:	c1 e1 04             	shl    ecx,0x4
c0015167:	09 c1                	or     ecx,eax
c0015169:	89 f8                	mov    eax,edi
c001516b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001516f:	0f b6 c0             	movzx  eax,al
c0015172:	f6 f2                	div    dl
c0015174:	88 c3                	mov    bl,al
c0015176:	88 e0                	mov    al,ah
c0015178:	c1 e3 04             	shl    ebx,0x4
c001517b:	09 c3                	or     ebx,eax
c001517d:	89 f0                	mov    eax,esi
c001517f:	0f b6 c0             	movzx  eax,al
c0015182:	f6 f2                	div    dl
c0015184:	88 c1                	mov    cl,al
c0015186:	88 e0                	mov    al,ah
c0015188:	c1 e1 04             	shl    ecx,0x4
c001518b:	09 c1                	or     ecx,eax
c001518d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015192:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015196:	f6 f2                	div    dl
c0015198:	88 c1                	mov    cl,al
c001519a:	88 e0                	mov    al,ah
c001519c:	c1 e1 04             	shl    ecx,0x4
c001519f:	09 c1                	or     ecx,eax
c00151a1:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00151a6:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00151aa:	f6 f2                	div    dl
c00151ac:	89 c5                	mov    ebp,eax
c00151ae:	88 e0                	mov    al,ah
c00151b0:	c1 e5 04             	shl    ebp,0x4
c00151b3:	09 c5                	or     ebp,eax
c00151b5:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00151ba:	75 17                	jne    c00151d3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00151bc:	80 fb 0b             	cmp    bl,0xb
c00151bf:	76 0c                	jbe    c00151cd <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00151c1:	80 eb 0c             	sub    bl,0xc
c00151c4:	75 02                	jne    c00151c8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00151c6:	b3 0c                	mov    bl,0xc
c00151c8:	83 cb 80             	or     ebx,0xffffff80
c00151cb:	eb 06                	jmp    c00151d3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00151cd:	84 db                	test   bl,bl
c00151cf:	75 02                	jne    c00151d3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00151d1:	b3 0c                	mov    bl,0xc
c00151d3:	0f b6 db             	movzx  ebx,bl
c00151d6:	50                   	push   eax
c00151d7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00151dc:	50                   	push   eax
c00151dd:	6a 00                	push   0x0
c00151df:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c00151e5:	e8 12 12 ff ff       	call   c00063fc <Computer::writeCMOS(unsigned char, unsigned char)>
c00151ea:	83 c4 0c             	add    esp,0xc
c00151ed:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00151f2:	50                   	push   eax
c00151f3:	6a 02                	push   0x2
c00151f5:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c00151fb:	e8 fc 11 ff ff       	call   c00063fc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015200:	83 c4 0c             	add    esp,0xc
c0015203:	53                   	push   ebx
c0015204:	6a 04                	push   0x4
c0015206:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c001520c:	e8 eb 11 ff ff       	call   c00063fc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015211:	83 c4 0c             	add    esp,0xc
c0015214:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015219:	50                   	push   eax
c001521a:	6a 07                	push   0x7
c001521c:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0015222:	e8 d5 11 ff ff       	call   c00063fc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015227:	83 c4 0c             	add    esp,0xc
c001522a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001522f:	50                   	push   eax
c0015230:	6a 08                	push   0x8
c0015232:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0015238:	e8 bf 11 ff ff       	call   c00063fc <Computer::writeCMOS(unsigned char, unsigned char)>
c001523d:	83 c4 0c             	add    esp,0xc
c0015240:	89 e8                	mov    eax,ebp
c0015242:	0f b6 e8             	movzx  ebp,al
c0015245:	55                   	push   ebp
c0015246:	6a 09                	push   0x9
c0015248:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c001524e:	e8 a9 11 ff ff       	call   c00063fc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015253:	5a                   	pop    edx
c0015254:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015258:	e8 9f fb ff ff       	call   c0014dfc <RTC::completeRTCRefresh()>
c001525d:	83 c4 3c             	add    esp,0x3c
c0015260:	b0 01                	mov    al,0x1
c0015262:	5b                   	pop    ebx
c0015263:	5e                   	pop    esi
c0015264:	5f                   	pop    edi
c0015265:	5d                   	pop    ebp
c0015266:	c3                   	ret    

c0015267 <rtcIRQHandler(regs*, void*)>:
c0015267:	53                   	push   ebx
c0015268:	83 ec 10             	sub    esp,0x10
c001526b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001526f:	6a 0c                	push   0xc
c0015271:	ff 35 08 f6 01 c0    	push   DWORD PTR ds:0xc001f608
c0015277:	e8 6a 10 ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c001527c:	83 c4 10             	add    esp,0x10
c001527f:	84 c0                	test   al,al
c0015281:	79 24                	jns    c00152a7 <rtcIRQHandler(regs*, void*)+0x40>
c0015283:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001528a:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015291:	66 ff 05 98 2b 02 c0 	inc    WORD PTR ds:0xc0022b98
c0015298:	75 0d                	jne    c00152a7 <rtcIRQHandler(regs*, void*)+0x40>
c001529a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001529e:	83 c4 08             	add    esp,0x8
c00152a1:	5b                   	pop    ebx
c00152a2:	e9 55 fb ff ff       	jmp    c0014dfc <RTC::completeRTCRefresh()>
c00152a7:	83 c4 08             	add    esp,0x8
c00152aa:	5b                   	pop    ebx
c00152ab:	c3                   	ret    

c00152ac <RTC::RTC()>:
c00152ac:	83 ec 1c             	sub    esp,0x1c
c00152af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152b3:	83 ec 08             	sub    esp,0x8
c00152b6:	68 ff e5 01 c0       	push   0xc001e5ff
c00152bb:	50                   	push   eax
c00152bc:	e8 69 56 ff ff       	call   c000a92a <Clock::Clock(char const*)>
c00152c1:	83 c4 10             	add    esp,0x10
c00152c4:	ba 1c e6 01 c0       	mov    edx,0xc001e61c
c00152c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152cd:	89 10                	mov    DWORD PTR [eax],edx
c00152cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152d3:	83 ec 0c             	sub    esp,0xc
c00152d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152da:	6a 01                	push   0x1
c00152dc:	68 67 52 01 c0       	push   0xc0015267
c00152e1:	6a 08                	push   0x8
c00152e3:	50                   	push   eax
c00152e4:	e8 2b 5b ff ff       	call   c000ae14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00152e9:	83 c4 20             	add    esp,0x20
c00152ec:	89 c2                	mov    edx,eax
c00152ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152f2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00152f8:	fa                   	cli    
c00152f9:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c00152fe:	40                   	inc    eax
c00152ff:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0015304:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0015309:	83 ec 08             	sub    esp,0x8
c001530c:	6a 0b                	push   0xb
c001530e:	50                   	push   eax
c001530f:	e8 d2 0f ff ff       	call   c00062e6 <Computer::readCMOS(unsigned char)>
c0015314:	83 c4 10             	add    esp,0x10
c0015317:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001531b:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c0015320:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015324:	83 ca 10             	or     edx,0x10
c0015327:	81 e2 ff 00 00 00    	and    edx,0xff
c001532d:	83 ec 04             	sub    esp,0x4
c0015330:	52                   	push   edx
c0015331:	6a 0b                	push   0xb
c0015333:	50                   	push   eax
c0015334:	e8 c3 10 ff ff       	call   c00063fc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	83 ec 0c             	sub    esp,0xc
c001533f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015343:	e8 b4 fa ff ff       	call   c0014dfc <RTC::completeRTCRefresh()>
c0015348:	83 c4 10             	add    esp,0x10
c001534b:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c0015350:	48                   	dec    eax
c0015351:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c0015356:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c001535b:	85 c0                	test   eax,eax
c001535d:	75 01                	jne    c0015360 <RTC::RTC()+0xb4>
c001535f:	fb                   	sti    
c0015360:	90                   	nop
c0015361:	83 c4 1c             	add    esp,0x1c
c0015364:	c3                   	ret    
c0015365:	66 90                	xchg   ax,ax
c0015367:	90                   	nop

c0015368 <Hal::consoleScroll(int, int)>:
c0015368:	83 ec 10             	sub    esp,0x10
c001536b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001537b:	90                   	nop
c001537c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015381:	0f 8f e1 00 00 00    	jg     c0015468 <Hal::consoleScroll(int, int)+0x100>
c0015387:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001538f:	90                   	nop
c0015390:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015398:	0f 8f be 00 00 00    	jg     c001545c <Hal::consoleScroll(int, int)+0xf4>
c001539e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153a2:	89 d0                	mov    eax,edx
c00153a4:	c1 e0 02             	shl    eax,0x2
c00153a7:	01 d0                	add    eax,edx
c00153a9:	c1 e0 05             	shl    eax,0x5
c00153ac:	89 c2                	mov    edx,eax
c00153ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153b2:	01 d0                	add    eax,edx
c00153b4:	89 c2                	mov    edx,eax
c00153b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153ba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00153bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153c1:	89 d0                	mov    eax,edx
c00153c3:	c1 e0 02             	shl    eax,0x2
c00153c6:	01 d0                	add    eax,edx
c00153c8:	c1 e0 05             	shl    eax,0x5
c00153cb:	89 c2                	mov    edx,eax
c00153cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153d1:	01 d0                	add    eax,edx
c00153d3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00153d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153dd:	01 c2                	add    edx,eax
c00153df:	8a 01                	mov    al,BYTE PTR [ecx]
c00153e1:	88 02                	mov    BYTE PTR [edx],al
c00153e3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00153e8:	75 66                	jne    c0015450 <Hal::consoleScroll(int, int)+0xe8>
c00153ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153ee:	83 e0 01             	and    eax,0x1
c00153f1:	74 39                	je     c001542c <Hal::consoleScroll(int, int)+0xc4>
c00153f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00153f7:	83 e0 0f             	and    eax,0xf
c00153fa:	88 c2                	mov    dl,al
c00153fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015400:	c1 e0 04             	shl    eax,0x4
c0015403:	88 d1                	mov    cl,dl
c0015405:	09 c1                	or     ecx,eax
c0015407:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001540b:	89 d0                	mov    eax,edx
c001540d:	c1 e0 02             	shl    eax,0x2
c0015410:	01 d0                	add    eax,edx
c0015412:	c1 e0 05             	shl    eax,0x5
c0015415:	89 c2                	mov    edx,eax
c0015417:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001541b:	01 d0                	add    eax,edx
c001541d:	89 c2                	mov    edx,eax
c001541f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015423:	01 d0                	add    eax,edx
c0015425:	88 ca                	mov    dl,cl
c0015427:	88 10                	mov    BYTE PTR [eax],dl
c0015429:	eb 25                	jmp    c0015450 <Hal::consoleScroll(int, int)+0xe8>
c001542b:	90                   	nop
c001542c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015430:	89 d0                	mov    eax,edx
c0015432:	c1 e0 02             	shl    eax,0x2
c0015435:	01 d0                	add    eax,edx
c0015437:	c1 e0 05             	shl    eax,0x5
c001543a:	89 c2                	mov    edx,eax
c001543c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015440:	01 d0                	add    eax,edx
c0015442:	89 c2                	mov    edx,eax
c0015444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015448:	01 d0                	add    eax,edx
c001544a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001544d:	8d 76 00             	lea    esi,[esi+0x0]
c0015450:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015454:	e9 37 ff ff ff       	jmp    c0015390 <Hal::consoleScroll(int, int)+0x28>
c0015459:	8d 76 00             	lea    esi,[esi+0x0]
c001545c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015460:	e9 17 ff ff ff       	jmp    c001537c <Hal::consoleScroll(int, int)+0x14>
c0015465:	8d 76 00             	lea    esi,[esi+0x0]
c0015468:	90                   	nop
c0015469:	83 c4 10             	add    esp,0x10
c001546c:	c3                   	ret    
c001546d:	8d 76 00             	lea    esi,[esi+0x0]

c0015470 <Hal::consoleWriteCharacter(char, int, int, int, int)>:
c0015470:	83 ec 14             	sub    esp,0x14
c0015473:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015477:	88 04 24             	mov    BYTE PTR [esp],al
c001547a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001547d:	25 ff 00 00 00       	and    eax,0xff
c0015482:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015486:	89 d1                	mov    ecx,edx
c0015488:	83 e1 0f             	and    ecx,0xf
c001548b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001548f:	c1 e2 04             	shl    edx,0x4
c0015492:	81 e2 ff 00 00 00    	and    edx,0xff
c0015498:	09 ca                	or     edx,ecx
c001549a:	c1 e2 08             	shl    edx,0x8
c001549d:	09 d0                	or     eax,edx
c001549f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00154a4:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00154ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00154b0:	89 d0                	mov    eax,edx
c00154b2:	c1 e0 02             	shl    eax,0x2
c00154b5:	01 d0                	add    eax,edx
c00154b7:	c1 e0 04             	shl    eax,0x4
c00154ba:	89 c2                	mov    edx,eax
c00154bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154c0:	01 d0                	add    eax,edx
c00154c2:	01 c0                	add    eax,eax
c00154c4:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00154c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00154cc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00154d1:	66 89 02             	mov    WORD PTR [edx],ax
c00154d4:	90                   	nop
c00154d5:	83 c4 14             	add    esp,0x14
c00154d8:	c3                   	ret    
c00154d9:	8d 76 00             	lea    esi,[esi+0x0]

c00154dc <Hal::consoleCursorUpdate(int, int)>:
c00154dc:	83 ec 20             	sub    esp,0x20
c00154df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00154e3:	89 c2                	mov    edx,eax
c00154e5:	89 d0                	mov    eax,edx
c00154e7:	c1 e0 02             	shl    eax,0x2
c00154ea:	01 d0                	add    eax,edx
c00154ec:	c1 e0 04             	shl    eax,0x4
c00154ef:	89 c2                	mov    edx,eax
c00154f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154f5:	01 d0                	add    eax,edx
c00154f7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00154fc:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0015503:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015508:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001550c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015510:	ee                   	out    dx,al
c0015511:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015516:	25 ff 00 00 00       	and    eax,0xff
c001551b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0015522:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015526:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001552a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001552e:	ee                   	out    dx,al
c001552f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015536:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001553b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001553f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015543:	ee                   	out    dx,al
c0015544:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015549:	66 c1 e8 08          	shr    ax,0x8
c001554d:	25 ff 00 00 00       	and    eax,0xff
c0015552:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015559:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001555d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015561:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015565:	ee                   	out    dx,al
c0015566:	90                   	nop
c0015567:	83 c4 20             	add    esp,0x20
c001556a:	c3                   	ret    
c001556b:	90                   	nop

c001556c <FAT::getName()>:
c001556c:	b8 50 e6 01 c0       	mov    eax,0xc001e650
c0015571:	c3                   	ret    
c0015572:	66 90                	xchg   ax,ax

c0015574 <FAT::tell(void*, unsigned long long*)>:
c0015574:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015579:	75 09                	jne    c0015584 <FAT::tell(void*, unsigned long long*)+0x10>
c001557b:	b8 04 00 00 00       	mov    eax,0x4
c0015580:	c3                   	ret    
c0015581:	8d 76 00             	lea    esi,[esi+0x0]
c0015584:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015589:	75 09                	jne    c0015594 <FAT::tell(void*, unsigned long long*)+0x20>
c001558b:	b8 04 00 00 00       	mov    eax,0x4
c0015590:	c3                   	ret    
c0015591:	8d 76 00             	lea    esi,[esi+0x0]
c0015594:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015598:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001559b:	ba 00 00 00 00       	mov    edx,0x0
c00155a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155a4:	89 01                	mov    DWORD PTR [ecx],eax
c00155a6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00155a9:	b8 00 00 00 00       	mov    eax,0x0
c00155ae:	c3                   	ret    
c00155af:	90                   	nop

c00155b0 <FAT::stat(void*, unsigned long long*)>:
c00155b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00155b5:	75 09                	jne    c00155c0 <FAT::stat(void*, unsigned long long*)+0x10>
c00155b7:	b8 04 00 00 00       	mov    eax,0x4
c00155bc:	c3                   	ret    
c00155bd:	8d 76 00             	lea    esi,[esi+0x0]
c00155c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00155c5:	75 09                	jne    c00155d0 <FAT::stat(void*, unsigned long long*)+0x20>
c00155c7:	b8 04 00 00 00       	mov    eax,0x4
c00155cc:	c3                   	ret    
c00155cd:	8d 76 00             	lea    esi,[esi+0x0]
c00155d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00155d7:	ba 00 00 00 00       	mov    edx,0x0
c00155dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155e0:	89 01                	mov    DWORD PTR [ecx],eax
c00155e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00155e5:	b8 00 00 00 00       	mov    eax,0x0
c00155ea:	c3                   	ret    
c00155eb:	90                   	nop

c00155ec <FAT::~FAT()>:
c00155ec:	83 ec 0c             	sub    esp,0xc
c00155ef:	ba 9c e6 01 c0       	mov    edx,0xc001e69c
c00155f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155f8:	89 10                	mov    DWORD PTR [eax],edx
c00155fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155fe:	83 ec 0c             	sub    esp,0xc
c0015601:	50                   	push   eax
c0015602:	e8 67 47 ff ff       	call   c0009d6e <Filesystem::~Filesystem()>
c0015607:	83 c4 10             	add    esp,0x10
c001560a:	90                   	nop
c001560b:	83 c4 0c             	add    esp,0xc
c001560e:	c3                   	ret    
c001560f:	90                   	nop

c0015610 <FAT::~FAT()>:
c0015610:	83 ec 0c             	sub    esp,0xc
c0015613:	83 ec 0c             	sub    esp,0xc
c0015616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001561a:	e8 cd ff ff ff       	call   c00155ec <FAT::~FAT()>
c001561f:	83 c4 10             	add    esp,0x10
c0015622:	83 ec 08             	sub    esp,0x8
c0015625:	6a 08                	push   0x8
c0015627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001562b:	e8 02 43 ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	83 c4 0c             	add    esp,0xc
c0015636:	c3                   	ret    
c0015637:	90                   	nop

c0015638 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0015638:	83 ec 1c             	sub    esp,0x1c
c001563b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0015642:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015647:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001564b:	8b 04 85 c0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd440]
c0015652:	83 f8 ff             	cmp    eax,0xffffffff
c0015655:	75 35                	jne    c001568c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0015657:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001565b:	88 c2                	mov    dl,al
c001565d:	a1 a0 2b 02 c0       	mov    eax,ds:0xc0022ba0
c0015662:	01 d0                	add    eax,edx
c0015664:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015668:	8b 15 a0 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022ba0
c001566e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015672:	89 14 85 c0 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd440],edx
c0015679:	a1 a0 2b 02 c0       	mov    eax,ds:0xc0022ba0
c001567e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015682:	89 14 85 40 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd3c0],edx
c0015689:	eb 19                	jmp    c00156a4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001568b:	90                   	nop
c001568c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015690:	88 c2                	mov    dl,al
c0015692:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015696:	8b 04 85 c0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd440]
c001569d:	01 d0                	add    eax,edx
c001569f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00156a3:	90                   	nop
c00156a4:	83 ec 04             	sub    esp,0x4
c00156a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00156ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00156af:	8d 44 24 15          	lea    eax,[esp+0x15]
c00156b3:	50                   	push   eax
c00156b4:	e8 c8 f5 fe ff       	call   c0004c81 <f_getlabel>
c00156b9:	83 c4 10             	add    esp,0x10
c00156bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00156c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00156c5:	75 09                	jne    c00156d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00156c7:	b8 00 00 00 00       	mov    eax,0x0
c00156cc:	eb 0a                	jmp    c00156d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00156ce:	66 90                	xchg   ax,ax
c00156d0:	b8 01 00 00 00       	mov    eax,0x1
c00156d5:	8d 76 00             	lea    esi,[esi+0x0]
c00156d8:	83 c4 1c             	add    esp,0x1c
c00156db:	c3                   	ret    

c00156dc <FAT::setlabel(LogicalDisk*, int, char*)>:
c00156dc:	57                   	push   edi
c00156dd:	83 ec 58             	sub    esp,0x58
c00156e0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00156e8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00156ec:	b8 00 00 00 00       	mov    eax,0x0
c00156f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00156f6:	fc                   	cld    
c00156f7:	89 d7                	mov    edi,edx
c00156f9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00156fb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00156ff:	8b 04 85 c0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd440]
c0015706:	83 f8 ff             	cmp    eax,0xffffffff
c0015709:	75 35                	jne    c0015740 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001570b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001570f:	88 c2                	mov    dl,al
c0015711:	a1 a0 2b 02 c0       	mov    eax,ds:0xc0022ba0
c0015716:	01 d0                	add    eax,edx
c0015718:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001571c:	8b 15 a0 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022ba0
c0015722:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015726:	89 14 85 c0 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd440],edx
c001572d:	a1 a0 2b 02 c0       	mov    eax,ds:0xc0022ba0
c0015732:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0015736:	89 14 85 40 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd3c0],edx
c001573d:	eb 19                	jmp    c0015758 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001573f:	90                   	nop
c0015740:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015744:	88 c2                	mov    dl,al
c0015746:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001574a:	8b 04 85 c0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd440]
c0015751:	01 d0                	add    eax,edx
c0015753:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015757:	90                   	nop
c0015758:	83 ec 08             	sub    esp,0x8
c001575b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001575f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015763:	50                   	push   eax
c0015764:	e8 77 b0 fe ff       	call   c00007e0 <strcat>
c0015769:	83 c4 10             	add    esp,0x10
c001576c:	83 ec 0c             	sub    esp,0xc
c001576f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015773:	50                   	push   eax
c0015774:	e8 59 f6 fe ff       	call   c0004dd2 <f_setlabel>
c0015779:	83 c4 10             	add    esp,0x10
c001577c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015780:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0015785:	75 09                	jne    c0015790 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0015787:	b8 00 00 00 00       	mov    eax,0x0
c001578c:	eb 0a                	jmp    c0015798 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001578e:	66 90                	xchg   ax,ax
c0015790:	b8 01 00 00 00       	mov    eax,0x1
c0015795:	8d 76 00             	lea    esi,[esi+0x0]
c0015798:	83 c4 58             	add    esp,0x58
c001579b:	5f                   	pop    edi
c001579c:	c3                   	ret    
c001579d:	90                   	nop
c001579e:	66 90                	xchg   ax,ax

c00157a0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00157a0:	83 ec 2c             	sub    esp,0x2c
c00157a3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00157ab:	83 ec 08             	sub    esp,0x8
c00157ae:	68 74 e6 01 c0       	push   0xc001e674
c00157b3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00157b7:	e8 44 af fe ff       	call   c0000700 <strcmp>
c00157bc:	83 c4 10             	add    esp,0x10
c00157bf:	85 c0                	test   eax,eax
c00157c1:	0f 94 c0             	sete   al
c00157c4:	84 c0                	test   al,al
c00157c6:	74 10                	je     c00157d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00157c8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00157d0:	e9 b3 00 00 00       	jmp    c0015888 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00157d5:	8d 76 00             	lea    esi,[esi+0x0]
c00157d8:	83 ec 08             	sub    esp,0x8
c00157db:	68 66 e6 01 c0       	push   0xc001e666
c00157e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00157e4:	e8 17 af fe ff       	call   c0000700 <strcmp>
c00157e9:	83 c4 10             	add    esp,0x10
c00157ec:	85 c0                	test   eax,eax
c00157ee:	0f 94 c0             	sete   al
c00157f1:	84 c0                	test   al,al
c00157f3:	74 0f                	je     c0015804 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00157f5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00157fd:	e9 86 00 00 00       	jmp    c0015888 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015802:	66 90                	xchg   ax,ax
c0015804:	83 ec 08             	sub    esp,0x8
c0015807:	68 6c e6 01 c0       	push   0xc001e66c
c001580c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015810:	e8 eb ae fe ff       	call   c0000700 <strcmp>
c0015815:	83 c4 10             	add    esp,0x10
c0015818:	85 c0                	test   eax,eax
c001581a:	0f 94 c0             	sete   al
c001581d:	84 c0                	test   al,al
c001581f:	74 0b                	je     c001582c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0015821:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0015829:	eb 5d                	jmp    c0015888 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001582b:	90                   	nop
c001582c:	83 ec 08             	sub    esp,0x8
c001582f:	68 dc c5 01 c0       	push   0xc001c5dc
c0015834:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015838:	e8 c3 ae fe ff       	call   c0000700 <strcmp>
c001583d:	83 c4 10             	add    esp,0x10
c0015840:	85 c0                	test   eax,eax
c0015842:	0f 94 c0             	sete   al
c0015845:	84 c0                	test   al,al
c0015847:	74 0b                	je     c0015854 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0015849:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0015851:	eb 35                	jmp    c0015888 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015853:	90                   	nop
c0015854:	83 ec 08             	sub    esp,0x8
c0015857:	68 72 e6 01 c0       	push   0xc001e672
c001585c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015860:	e8 9b ae fe ff       	call   c0000700 <strcmp>
c0015865:	83 c4 10             	add    esp,0x10
c0015868:	85 c0                	test   eax,eax
c001586a:	0f 94 c0             	sete   al
c001586d:	84 c0                	test   al,al
c001586f:	74 0b                	je     c001587c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0015871:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0015879:	eb 0d                	jmp    c0015888 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001587b:	90                   	nop
c001587c:	b8 08 00 00 00       	mov    eax,0x8
c0015881:	e9 ea 00 00 00       	jmp    c0015970 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0015886:	66 90                	xchg   ax,ax
c0015888:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001588f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015894:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015898:	8b 04 85 c0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd440]
c001589f:	83 f8 ff             	cmp    eax,0xffffffff
c00158a2:	75 34                	jne    c00158d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00158a4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00158a8:	88 c2                	mov    dl,al
c00158aa:	a1 a0 2b 02 c0       	mov    eax,ds:0xc0022ba0
c00158af:	01 d0                	add    eax,edx
c00158b1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00158b5:	8b 15 a0 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022ba0
c00158bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00158bf:	89 14 85 c0 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd440],edx
c00158c6:	a1 a0 2b 02 c0       	mov    eax,ds:0xc0022ba0
c00158cb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00158cf:	89 14 85 40 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd3c0],edx
c00158d6:	eb 18                	jmp    c00158f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00158d8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00158dc:	88 c2                	mov    dl,al
c00158de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00158e2:	8b 04 85 c0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd440]
c00158e9:	01 d0                	add    eax,edx
c00158eb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00158ef:	90                   	nop
c00158f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158f4:	88 04 24             	mov    BYTE PTR [esp],al
c00158f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00158fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00158ff:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015907:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001590c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015914:	83 ec 0c             	sub    esp,0xc
c0015917:	68 00 20 00 00       	push   0x2000
c001591c:	e8 44 13 ff ff       	call   c0006c65 <malloc>
c0015921:	83 c4 10             	add    esp,0x10
c0015924:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015928:	68 00 20 00 00       	push   0x2000
c001592d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015931:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015935:	50                   	push   eax
c0015936:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001593a:	50                   	push   eax
c001593b:	e8 82 f7 fe ff       	call   c00050c2 <f_mkfs>
c0015940:	83 c4 10             	add    esp,0x10
c0015943:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015947:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001594c:	75 0a                	jne    c0015958 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001594e:	b8 00 00 00 00       	mov    eax,0x0
c0015953:	eb 1b                	jmp    c0015970 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0015955:	8d 76 00             	lea    esi,[esi+0x0]
c0015958:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001595d:	75 09                	jne    c0015968 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001595f:	b8 09 00 00 00       	mov    eax,0x9
c0015964:	eb 0a                	jmp    c0015970 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0015966:	66 90                	xchg   ax,ax
c0015968:	b8 01 00 00 00       	mov    eax,0x1
c001596d:	8d 76 00             	lea    esi,[esi+0x0]
c0015970:	83 c4 2c             	add    esp,0x2c
c0015973:	c3                   	ret    

c0015974 <FAT::tryMount(LogicalDisk*, int)>:
c0015974:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001597a:	a1 a0 2b 02 c0       	mov    eax,ds:0xc0022ba0
c001597f:	83 f8 14             	cmp    eax,0x14
c0015982:	75 18                	jne    c001599c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0015984:	83 ec 0c             	sub    esp,0xc
c0015987:	68 78 e6 01 c0       	push   0xc001e678
c001598c:	e8 10 9c ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0015991:	83 c4 10             	add    esp,0x10
c0015994:	b0 00                	mov    al,0x0
c0015996:	e9 e9 01 00 00       	jmp    c0015b84 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001599b:	90                   	nop
c001599c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00159a3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00159a9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00159af:	3d 00 02 00 00       	cmp    eax,0x200
c00159b4:	74 0a                	je     c00159c0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00159b6:	b0 00                	mov    al,0x0
c00159b8:	e9 c7 01 00 00       	jmp    c0015b84 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00159bd:	8d 76 00             	lea    esi,[esi+0x0]
c00159c0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00159c8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00159cf:	8b 04 85 c0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd440]
c00159d6:	83 f8 ff             	cmp    eax,0xffffffff
c00159d9:	74 09                	je     c00159e4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00159db:	b0 01                	mov    al,0x1
c00159dd:	e9 a2 01 00 00       	jmp    c0015b84 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00159e2:	66 90                	xchg   ax,ax
c00159e4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00159ee:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00159f6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00159fd:	88 c2                	mov    dl,al
c00159ff:	a1 a0 2b 02 c0       	mov    eax,ds:0xc0022ba0
c0015a04:	01 d0                	add    eax,edx
c0015a06:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0015a0d:	8b 15 a0 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022ba0
c0015a13:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0015a1a:	89 14 85 c0 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd440],edx
c0015a21:	a1 a0 2b 02 c0       	mov    eax,ds:0xc0022ba0
c0015a26:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0015a2d:	89 14 85 40 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd3c0],edx
c0015a34:	83 ec 0c             	sub    esp,0xc
c0015a37:	68 34 02 00 00       	push   0x234
c0015a3c:	e8 24 12 ff ff       	call   c0006c65 <malloc>
c0015a41:	83 c4 10             	add    esp,0x10
c0015a44:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0015a4b:	83 ec 04             	sub    esp,0x4
c0015a4e:	6a 00                	push   0x0
c0015a50:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0015a57:	50                   	push   eax
c0015a58:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015a5f:	e8 84 de fe ff       	call   c00038e8 <f_mount>
c0015a64:	83 c4 10             	add    esp,0x10
c0015a67:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0015a6e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0015a76:	74 1c                	je     c0015a94 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0015a78:	83 ec 0c             	sub    esp,0xc
c0015a7b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015a82:	e8 fe 11 ff ff       	call   c0006c85 <rfree>
c0015a87:	83 c4 10             	add    esp,0x10
c0015a8a:	b0 00                	mov    al,0x0
c0015a8c:	e9 f3 00 00 00       	jmp    c0015b84 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015a91:	8d 76 00             	lea    esi,[esi+0x0]
c0015a94:	83 ec 04             	sub    esp,0x4
c0015a97:	68 00 01 00 00       	push   0x100
c0015a9c:	6a 00                	push   0x0
c0015a9e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0015aa5:	50                   	push   eax
c0015aa6:	e8 45 aa fe ff       	call   c00004f0 <memset>
c0015aab:	83 c4 10             	add    esp,0x10
c0015aae:	83 ec 08             	sub    esp,0x8
c0015ab1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0015ab8:	50                   	push   eax
c0015ab9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0015ac0:	50                   	push   eax
c0015ac1:	e8 1a ad fe ff       	call   c00007e0 <strcat>
c0015ac6:	83 c4 10             	add    esp,0x10
c0015ac9:	83 ec 08             	sub    esp,0x8
c0015acc:	68 86 e6 01 c0       	push   0xc001e686
c0015ad1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0015ad8:	50                   	push   eax
c0015ad9:	e8 02 ad fe ff       	call   c00007e0 <strcat>
c0015ade:	83 c4 10             	add    esp,0x10
c0015ae1:	83 ec 04             	sub    esp,0x4
c0015ae4:	6a 01                	push   0x1
c0015ae6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0015aed:	50                   	push   eax
c0015aee:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015af2:	50                   	push   eax
c0015af3:	e8 52 de fe ff       	call   c000394a <f_open>
c0015af8:	83 c4 10             	add    esp,0x10
c0015afb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0015b02:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0015b09:	85 c0                	test   eax,eax
c0015b0b:	74 0b                	je     c0015b18 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0015b0d:	78 31                	js     c0015b40 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0015b0f:	83 e8 04             	sub    eax,0x4
c0015b12:	83 f8 01             	cmp    eax,0x1
c0015b15:	77 29                	ja     c0015b40 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0015b17:	90                   	nop
c0015b18:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0015b20:	83 ec 0c             	sub    esp,0xc
c0015b23:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015b27:	50                   	push   eax
c0015b28:	e8 d0 e5 fe ff       	call   c00040fd <f_close>
c0015b2d:	83 c4 10             	add    esp,0x10
c0015b30:	90                   	nop
c0015b31:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0015b39:	74 41                	je     c0015b7c <FAT::tryMount(LogicalDisk*, int)+0x208>
c0015b3b:	eb 33                	jmp    c0015b70 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0015b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b40:	83 ec 0c             	sub    esp,0xc
c0015b43:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015b4a:	e8 36 11 ff ff       	call   c0006c85 <rfree>
c0015b4f:	83 c4 10             	add    esp,0x10
c0015b52:	83 ec 04             	sub    esp,0x4
c0015b55:	6a 00                	push   0x0
c0015b57:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0015b5e:	50                   	push   eax
c0015b5f:	6a 00                	push   0x0
c0015b61:	e8 82 dd fe ff       	call   c00038e8 <f_mount>
c0015b66:	83 c4 10             	add    esp,0x10
c0015b69:	b0 00                	mov    al,0x0
c0015b6b:	eb 17                	jmp    c0015b84 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b70:	a1 a0 2b 02 c0       	mov    eax,ds:0xc0022ba0
c0015b75:	40                   	inc    eax
c0015b76:	a3 a0 2b 02 c0       	mov    ds:0xc0022ba0,eax
c0015b7b:	90                   	nop
c0015b7c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0015b83:	90                   	nop
c0015b84:	81 c4 4c 03 00 00    	add    esp,0x34c
c0015b8a:	c3                   	ret    
c0015b8b:	90                   	nop

c0015b8c <FAT::allocateSwapfile(char const*, int)>:
c0015b8c:	55                   	push   ebp
c0015b8d:	57                   	push   edi
c0015b8e:	56                   	push   esi
c0015b8f:	53                   	push   ebx
c0015b90:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0015b96:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0015ba1:	83 ec 0c             	sub    esp,0xc
c0015ba4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0015bab:	e8 b5 10 ff ff       	call   c0006c65 <malloc>
c0015bb0:	83 c4 10             	add    esp,0x10
c0015bb3:	89 c7                	mov    edi,eax
c0015bb5:	a1 10 2b 02 c0       	mov    eax,ds:0xc0022b10
c0015bba:	83 ec 04             	sub    esp,0x4
c0015bbd:	50                   	push   eax
c0015bbe:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0015bc5:	57                   	push   edi
c0015bc6:	e8 d3 43 ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c0015bcb:	83 c4 10             	add    esp,0x10
c0015bce:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0015bd5:	83 ec 04             	sub    esp,0x4
c0015bd8:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015bdc:	50                   	push   eax
c0015bdd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015be1:	50                   	push   eax
c0015be2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015be9:	e8 1c 47 ff ff       	call   c000a30a <File::stat(unsigned long long*, bool*)>
c0015bee:	83 c4 10             	add    esp,0x10
c0015bf1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0015bf8:	c1 e0 14             	shl    eax,0x14
c0015bfb:	89 c7                	mov    edi,eax
c0015bfd:	89 c5                	mov    ebp,eax
c0015bff:	c1 fd 1f             	sar    ebp,0x1f
c0015c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015c0a:	89 f9                	mov    ecx,edi
c0015c0c:	31 c1                	xor    ecx,eax
c0015c0e:	89 cb                	mov    ebx,ecx
c0015c10:	89 e9                	mov    ecx,ebp
c0015c12:	31 d1                	xor    ecx,edx
c0015c14:	89 ce                	mov    esi,ecx
c0015c16:	89 f0                	mov    eax,esi
c0015c18:	09 d8                	or     eax,ebx
c0015c1a:	0f 84 9c 00 00 00    	je     c0015cbc <FAT::allocateSwapfile(char const*, int)+0x130>
c0015c20:	83 ec 0c             	sub    esp,0xc
c0015c23:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015c2a:	e8 a7 45 ff ff       	call   c000a1d6 <File::unlink()>
c0015c2f:	83 c4 10             	add    esp,0x10
c0015c32:	83 ec 08             	sub    esp,0x8
c0015c35:	6a 12                	push   0x12
c0015c37:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015c3e:	e8 1b 44 ff ff       	call   c000a05e <File::open(FileOpenMode)>
c0015c43:	83 c4 10             	add    esp,0x10
c0015c46:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015c4d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0015c53:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015c5a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0015c61:	c1 e0 14             	shl    eax,0x14
c0015c64:	83 ec 04             	sub    esp,0x4
c0015c67:	6a 01                	push   0x1
c0015c69:	50                   	push   eax
c0015c6a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0015c71:	e8 ec f2 fe ff       	call   c0004f62 <f_expand>
c0015c76:	83 c4 10             	add    esp,0x10
c0015c79:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c82:	83 c0 10             	add    eax,0x10
c0015c85:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c87:	83 ec 0c             	sub    esp,0xc
c0015c8a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015c8e:	52                   	push   edx
c0015c8f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0015c93:	52                   	push   edx
c0015c94:	6a 00                	push   0x0
c0015c96:	68 00 04 00 00       	push   0x400
c0015c9b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0015ca2:	ff d0                	call   eax
c0015ca4:	83 c4 20             	add    esp,0x20
c0015ca7:	83 ec 0c             	sub    esp,0xc
c0015caa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015cb1:	e8 06 44 ff ff       	call   c000a0bc <File::close()>
c0015cb6:	83 c4 10             	add    esp,0x10
c0015cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cbc:	83 ec 08             	sub    esp,0x8
c0015cbf:	6a 01                	push   0x1
c0015cc1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015cc8:	e8 91 43 ff ff       	call   c000a05e <File::open(FileOpenMode)>
c0015ccd:	83 c4 10             	add    esp,0x10
c0015cd0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd9:	83 c0 0c             	add    eax,0xc
c0015cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cde:	83 ec 0c             	sub    esp,0xc
c0015ce1:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015ce5:	52                   	push   edx
c0015ce6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0015cea:	52                   	push   edx
c0015ceb:	6a 00                	push   0x0
c0015ced:	6a 04                	push   0x4
c0015cef:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0015cf6:	ff d0                	call   eax
c0015cf8:	83 c4 20             	add    esp,0x20
c0015cfb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015d02:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0015d08:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015d0f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0015d16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015d19:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0015d20:	83 ec 0c             	sub    esp,0xc
c0015d23:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015d2a:	e8 8d 43 ff ff       	call   c000a0bc <File::close()>
c0015d2f:	83 c4 10             	add    esp,0x10
c0015d32:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0015d39:	ba 00 00 00 00       	mov    edx,0x0
c0015d3e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0015d44:	5b                   	pop    ebx
c0015d45:	5e                   	pop    esi
c0015d46:	5f                   	pop    edi
c0015d47:	5d                   	pop    ebp
c0015d48:	c3                   	ret    
c0015d49:	90                   	nop
c0015d4a:	66 90                	xchg   ax,ax

c0015d4c <FAT::readDir(void*, unsigned long, void*, int*)>:
c0015d4c:	57                   	push   edi
c0015d4d:	56                   	push   esi
c0015d4e:	53                   	push   ebx
c0015d4f:	81 ec 50 02 00 00    	sub    esp,0x250
c0015d55:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0015d5d:	74 0d                	je     c0015d6c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0015d5f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0015d67:	75 0f                	jne    c0015d78 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0015d69:	8d 76 00             	lea    esi,[esi+0x0]
c0015d6c:	b8 04 00 00 00       	mov    eax,0x4
c0015d71:	e9 36 01 00 00       	jmp    c0015eac <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015d76:	66 90                	xchg   ax,ax
c0015d78:	83 ec 08             	sub    esp,0x8
c0015d7b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015d82:	50                   	push   eax
c0015d83:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0015d8a:	e8 31 e6 fe ff       	call   c00043c0 <f_readdir>
c0015d8f:	83 c4 10             	add    esp,0x10
c0015d92:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0015d99:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0015da0:	83 ec 0c             	sub    esp,0xc
c0015da3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0015daa:	83 c0 16             	add    eax,0x16
c0015dad:	50                   	push   eax
c0015dae:	e8 ad a7 fe ff       	call   c0000560 <strlen>
c0015db3:	83 c4 10             	add    esp,0x10
c0015db6:	ba 00 00 00 00       	mov    edx,0x0
c0015dbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015dbf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015dc3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0015dca:	25 ff 00 00 00       	and    eax,0xff
c0015dcf:	83 e0 10             	and    eax,0x10
c0015dd2:	74 08                	je     c0015ddc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0015dd4:	b8 02 00 00 00       	mov    eax,0x2
c0015dd9:	eb 09                	jmp    c0015de4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0015ddb:	90                   	nop
c0015ddc:	b8 01 00 00 00       	mov    eax,0x1
c0015de1:	8d 76 00             	lea    esi,[esi+0x0]
c0015de4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015de8:	83 ec 08             	sub    esp,0x8
c0015deb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015df2:	83 c0 16             	add    eax,0x16
c0015df5:	50                   	push   eax
c0015df6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015dfa:	83 c0 10             	add    eax,0x10
c0015dfd:	50                   	push   eax
c0015dfe:	e8 1d a8 fe ff       	call   c0000620 <strcpy>
c0015e03:	83 c4 10             	add    esp,0x10
c0015e06:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0015e0d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0015e14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015e18:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0015e1f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0015e26:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0015e2d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0015e34:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0015e3b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0015e42:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0015e49:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0015e50:	89 c6                	mov    esi,eax
c0015e52:	89 d7                	mov    edi,edx
c0015e54:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e56:	89 c8                	mov    eax,ecx
c0015e58:	89 fa                	mov    edx,edi
c0015e5a:	89 f3                	mov    ebx,esi
c0015e5c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0015e63:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0015e6a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0015e71:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0015e78:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0015e7e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0015e85:	84 c0                	test   al,al
c0015e87:	75 07                	jne    c0015e90 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0015e89:	b8 07 00 00 00       	mov    eax,0x7
c0015e8e:	eb 1c                	jmp    c0015eac <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015e90:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0015e97:	85 c0                	test   eax,eax
c0015e99:	75 09                	jne    c0015ea4 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0015e9b:	b8 00 00 00 00       	mov    eax,0x0
c0015ea0:	eb 0a                	jmp    c0015eac <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015ea2:	66 90                	xchg   ax,ax
c0015ea4:	b8 01 00 00 00       	mov    eax,0x1
c0015ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0015eac:	81 c4 50 02 00 00    	add    esp,0x250
c0015eb2:	5b                   	pop    ebx
c0015eb3:	5e                   	pop    esi
c0015eb4:	5f                   	pop    edi
c0015eb5:	c3                   	ret    
c0015eb6:	66 90                	xchg   ax,ax

c0015eb8 <FAT::read(void*, unsigned long, void*, int*)>:
c0015eb8:	83 ec 1c             	sub    esp,0x1c
c0015ebb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015ec0:	74 0a                	je     c0015ecc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0015ec2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015ec7:	75 0b                	jne    c0015ed4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0015ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0015ecc:	b8 04 00 00 00       	mov    eax,0x4
c0015ed1:	eb 41                	jmp    c0015f14 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015ed3:	90                   	nop
c0015ed4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015ed8:	50                   	push   eax
c0015ed9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015edd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015ee1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ee5:	e8 2b dd fe ff       	call   c0003c15 <f_read>
c0015eea:	83 c4 10             	add    esp,0x10
c0015eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ef1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ef5:	89 c2                	mov    edx,eax
c0015ef7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015efb:	89 10                	mov    DWORD PTR [eax],edx
c0015efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f01:	85 c0                	test   eax,eax
c0015f03:	75 07                	jne    c0015f0c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0015f05:	b8 00 00 00 00       	mov    eax,0x0
c0015f0a:	eb 08                	jmp    c0015f14 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015f0c:	b8 01 00 00 00       	mov    eax,0x1
c0015f11:	8d 76 00             	lea    esi,[esi+0x0]
c0015f14:	83 c4 1c             	add    esp,0x1c
c0015f17:	c3                   	ret    

c0015f18 <FAT::write(void*, unsigned long, void*, int*)>:
c0015f18:	83 ec 1c             	sub    esp,0x1c
c0015f1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015f20:	74 0a                	je     c0015f2c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0015f22:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015f27:	75 0b                	jne    c0015f34 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0015f29:	8d 76 00             	lea    esi,[esi+0x0]
c0015f2c:	b8 04 00 00 00       	mov    eax,0x4
c0015f31:	eb 41                	jmp    c0015f74 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015f33:	90                   	nop
c0015f34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015f38:	50                   	push   eax
c0015f39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015f41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f45:	e8 ca de fe ff       	call   c0003e14 <f_write>
c0015f4a:	83 c4 10             	add    esp,0x10
c0015f4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f55:	89 c2                	mov    edx,eax
c0015f57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f5b:	89 10                	mov    DWORD PTR [eax],edx
c0015f5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f61:	85 c0                	test   eax,eax
c0015f63:	75 07                	jne    c0015f6c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0015f65:	b8 00 00 00 00       	mov    eax,0x0
c0015f6a:	eb 08                	jmp    c0015f74 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015f6c:	b8 01 00 00 00       	mov    eax,0x1
c0015f71:	8d 76 00             	lea    esi,[esi+0x0]
c0015f74:	83 c4 1c             	add    esp,0x1c
c0015f77:	c3                   	ret    

c0015f78 <FAT::close(void*)>:
c0015f78:	83 ec 1c             	sub    esp,0x1c
c0015f7b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015f80:	75 0a                	jne    c0015f8c <FAT::close(void*)+0x14>
c0015f82:	b8 04 00 00 00       	mov    eax,0x4
c0015f87:	eb 3f                	jmp    c0015fc8 <FAT::close(void*)+0x50>
c0015f89:	8d 76 00             	lea    esi,[esi+0x0]
c0015f8c:	83 ec 0c             	sub    esp,0xc
c0015f8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f93:	e8 65 e1 fe ff       	call   c00040fd <f_close>
c0015f98:	83 c4 10             	add    esp,0x10
c0015f9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f9f:	83 ec 0c             	sub    esp,0xc
c0015fa2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fa6:	e8 ca 0c ff ff       	call   c0006c75 <free>
c0015fab:	83 c4 10             	add    esp,0x10
c0015fae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fb2:	85 c0                	test   eax,eax
c0015fb4:	75 0a                	jne    c0015fc0 <FAT::close(void*)+0x48>
c0015fb6:	b8 00 00 00 00       	mov    eax,0x0
c0015fbb:	eb 0b                	jmp    c0015fc8 <FAT::close(void*)+0x50>
c0015fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0015fc0:	b8 01 00 00 00       	mov    eax,0x1
c0015fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0015fc8:	83 c4 1c             	add    esp,0x1c
c0015fcb:	c3                   	ret    

c0015fcc <FAT::closeDir(void*)>:
c0015fcc:	83 ec 1c             	sub    esp,0x1c
c0015fcf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015fd4:	75 0a                	jne    c0015fe0 <FAT::closeDir(void*)+0x14>
c0015fd6:	b8 04 00 00 00       	mov    eax,0x4
c0015fdb:	eb 3f                	jmp    c001601c <FAT::closeDir(void*)+0x50>
c0015fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0015fe0:	83 ec 0c             	sub    esp,0xc
c0015fe3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fe7:	e8 b2 e3 fe ff       	call   c000439e <f_closedir>
c0015fec:	83 c4 10             	add    esp,0x10
c0015fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ff3:	83 ec 0c             	sub    esp,0xc
c0015ff6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ffa:	e8 76 0c ff ff       	call   c0006c75 <free>
c0015fff:	83 c4 10             	add    esp,0x10
c0016002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016006:	85 c0                	test   eax,eax
c0016008:	75 0a                	jne    c0016014 <FAT::closeDir(void*)+0x48>
c001600a:	b8 00 00 00 00       	mov    eax,0x0
c001600f:	eb 0b                	jmp    c001601c <FAT::closeDir(void*)+0x50>
c0016011:	8d 76 00             	lea    esi,[esi+0x0]
c0016014:	b8 01 00 00 00       	mov    eax,0x1
c0016019:	8d 76 00             	lea    esi,[esi+0x0]
c001601c:	83 c4 1c             	add    esp,0x1c
c001601f:	c3                   	ret    

c0016020 <FAT::seek(void*, unsigned long long)>:
c0016020:	83 ec 2c             	sub    esp,0x2c
c0016023:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001602b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001602f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016033:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016038:	75 0a                	jne    c0016044 <FAT::seek(void*, unsigned long long)+0x24>
c001603a:	b8 04 00 00 00       	mov    eax,0x4
c001603f:	eb 33                	jmp    c0016074 <FAT::seek(void*, unsigned long long)+0x54>
c0016041:	8d 76 00             	lea    esi,[esi+0x0]
c0016044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016048:	83 ec 08             	sub    esp,0x8
c001604b:	50                   	push   eax
c001604c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016050:	e8 d7 e0 fe ff       	call   c000412c <f_lseek>
c0016055:	83 c4 10             	add    esp,0x10
c0016058:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001605c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016060:	85 c0                	test   eax,eax
c0016062:	75 08                	jne    c001606c <FAT::seek(void*, unsigned long long)+0x4c>
c0016064:	b8 00 00 00 00       	mov    eax,0x0
c0016069:	eb 09                	jmp    c0016074 <FAT::seek(void*, unsigned long long)+0x54>
c001606b:	90                   	nop
c001606c:	b8 01 00 00 00       	mov    eax,0x1
c0016071:	8d 76 00             	lea    esi,[esi+0x0]
c0016074:	83 c4 2c             	add    esp,0x2c
c0016077:	c3                   	ret    

c0016078 <fatWrapperReadDisk>:
c0016078:	53                   	push   ebx
c0016079:	83 ec 18             	sub    esp,0x18
c001607c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016080:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016084:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016088:	25 ff 00 00 00       	and    eax,0xff
c001608d:	8b 0c 85 80 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde480]
c0016094:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016098:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001609c:	ba 00 00 00 00       	mov    edx,0x0
c00160a1:	83 ec 0c             	sub    esp,0xc
c00160a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00160a8:	53                   	push   ebx
c00160a9:	52                   	push   edx
c00160aa:	50                   	push   eax
c00160ab:	51                   	push   ecx
c00160ac:	e8 5f 60 ff ff       	call   c000c110 <LogicalDisk::read(unsigned long long, int, void*)>
c00160b1:	83 c4 20             	add    esp,0x20
c00160b4:	83 c4 18             	add    esp,0x18
c00160b7:	5b                   	pop    ebx
c00160b8:	c3                   	ret    
c00160b9:	8d 76 00             	lea    esi,[esi+0x0]

c00160bc <fatWrapperWriteDisk>:
c00160bc:	53                   	push   ebx
c00160bd:	83 ec 18             	sub    esp,0x18
c00160c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00160c8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00160cc:	25 ff 00 00 00       	and    eax,0xff
c00160d1:	8b 0c 85 80 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde480]
c00160d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00160dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160e0:	ba 00 00 00 00       	mov    edx,0x0
c00160e5:	83 ec 0c             	sub    esp,0xc
c00160e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00160ec:	53                   	push   ebx
c00160ed:	52                   	push   edx
c00160ee:	50                   	push   eax
c00160ef:	51                   	push   ecx
c00160f0:	e8 87 60 ff ff       	call   c000c17c <LogicalDisk::write(unsigned long long, int, void*)>
c00160f5:	83 c4 20             	add    esp,0x20
c00160f8:	83 c4 18             	add    esp,0x18
c00160fb:	5b                   	pop    ebx
c00160fc:	c3                   	ret    
c00160fd:	8d 76 00             	lea    esi,[esi+0x0]

c0016100 <fatWrapperIoctl>:
c0016100:	53                   	push   ebx
c0016101:	83 ec 28             	sub    esp,0x28
c0016104:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016108:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001610c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016110:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016114:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016119:	75 35                	jne    c0016150 <fatWrapperIoctl+0x50>
c001611b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001611f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016123:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016127:	25 ff 00 00 00       	and    eax,0xff
c001612c:	8b 04 85 80 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde480]
c0016133:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016139:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001613f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016143:	66 89 02             	mov    WORD PTR [edx],ax
c0016146:	b8 00 00 00 00       	mov    eax,0x0
c001614b:	e9 c4 00 00 00       	jmp    c0016214 <fatWrapperIoctl+0x114>
c0016150:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016155:	75 75                	jne    c00161cc <fatWrapperIoctl+0xcc>
c0016157:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001615b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001615f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016163:	25 ff 00 00 00       	and    eax,0xff
c0016168:	8b 04 85 80 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde480]
c001616f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016175:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001617b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016181:	89 c8                	mov    eax,ecx
c0016183:	89 da                	mov    edx,ebx
c0016185:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016189:	c1 e0 0a             	shl    eax,0xa
c001618c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016190:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016196:	8b 0c 8d 80 1b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde480]
c001619d:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00161a3:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00161a9:	89 cb                	mov    ebx,ecx
c00161ab:	c1 fb 1f             	sar    ebx,0x1f
c00161ae:	53                   	push   ebx
c00161af:	51                   	push   ecx
c00161b0:	52                   	push   edx
c00161b1:	50                   	push   eax
c00161b2:	e8 29 56 00 00       	call   c001b7e0 <__udivdi3>
c00161b7:	83 c4 10             	add    esp,0x10
c00161ba:	89 c2                	mov    edx,eax
c00161bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00161c0:	89 10                	mov    DWORD PTR [eax],edx
c00161c2:	b8 00 00 00 00       	mov    eax,0x0
c00161c7:	eb 4b                	jmp    c0016214 <fatWrapperIoctl+0x114>
c00161c9:	8d 76 00             	lea    esi,[esi+0x0]
c00161cc:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00161d1:	75 09                	jne    c00161dc <fatWrapperIoctl+0xdc>
c00161d3:	b8 00 00 00 00       	mov    eax,0x0
c00161d8:	eb 3a                	jmp    c0016214 <fatWrapperIoctl+0x114>
c00161da:	66 90                	xchg   ax,ax
c00161dc:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00161e1:	75 19                	jne    c00161fc <fatWrapperIoctl+0xfc>
c00161e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00161e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00161ef:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00161f5:	b8 00 00 00 00       	mov    eax,0x0
c00161fa:	eb 18                	jmp    c0016214 <fatWrapperIoctl+0x114>
c00161fc:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016201:	75 09                	jne    c001620c <fatWrapperIoctl+0x10c>
c0016203:	b8 00 00 00 00       	mov    eax,0x0
c0016208:	eb 0a                	jmp    c0016214 <fatWrapperIoctl+0x114>
c001620a:	66 90                	xchg   ax,ax
c001620c:	b8 04 00 00 00       	mov    eax,0x4
c0016211:	8d 76 00             	lea    esi,[esi+0x0]
c0016214:	83 c4 28             	add    esp,0x28
c0016217:	5b                   	pop    ebx
c0016218:	c3                   	ret    
c0016219:	90                   	nop
c001621a:	66 90                	xchg   ax,ax

c001621c <FAT::FAT()>:
c001621c:	83 ec 1c             	sub    esp,0x1c
c001621f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016223:	83 ec 0c             	sub    esp,0xc
c0016226:	50                   	push   eax
c0016227:	e8 1e 3b ff ff       	call   c0009d4a <Filesystem::Filesystem()>
c001622c:	83 c4 10             	add    esp,0x10
c001622f:	ba 9c e6 01 c0       	mov    edx,0xc001e69c
c0016234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016238:	89 10                	mov    DWORD PTR [eax],edx
c001623a:	c7 05 a0 2b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ba0,0x0
c0016244:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001624c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016251:	7f 15                	jg     c0016268 <FAT::FAT()+0x4c>
c0016253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016257:	c7 04 85 c0 2b 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdd440],0xffffffff
c0016262:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016266:	eb e4                	jmp    c001624c <FAT::FAT()+0x30>
c0016268:	90                   	nop
c0016269:	83 c4 1c             	add    esp,0x1c
c001626c:	c3                   	ret    
c001626d:	90                   	nop
c001626e:	66 90                	xchg   ax,ax

c0016270 <FAT::fixFilepath(char*)>:
c0016270:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016274:	8a 00                	mov    al,BYTE PTR [eax]
c0016276:	3c 40                	cmp    al,0x40
c0016278:	7e 2e                	jle    c00162a8 <FAT::fixFilepath(char*)+0x38>
c001627a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001627e:	8a 00                	mov    al,BYTE PTR [eax]
c0016280:	83 e8 41             	sub    eax,0x41
c0016283:	88 c2                	mov    dl,al
c0016285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016289:	88 10                	mov    BYTE PTR [eax],dl
c001628b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001628f:	8a 00                	mov    al,BYTE PTR [eax]
c0016291:	0f be c0             	movsx  eax,al
c0016294:	8b 04 85 c0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd440]
c001629b:	83 c0 30             	add    eax,0x30
c001629e:	88 c2                	mov    dl,al
c00162a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162a4:	88 10                	mov    BYTE PTR [eax],dl
c00162a6:	66 90                	xchg   ax,ax
c00162a8:	90                   	nop
c00162a9:	c3                   	ret    
c00162aa:	66 90                	xchg   ax,ax

c00162ac <FAT::open(char const*, void**, FileOpenMode)>:
c00162ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00162b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00162ba:	74 0c                	je     c00162c8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00162bc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00162c4:	75 0e                	jne    c00162d4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00162c6:	66 90                	xchg   ax,ax
c00162c8:	b8 04 00 00 00       	mov    eax,0x4
c00162cd:	e9 0a 01 00 00       	jmp    c00163dc <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00162d2:	66 90                	xchg   ax,ax
c00162d4:	83 ec 08             	sub    esp,0x8
c00162d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00162de:	8d 44 24 14          	lea    eax,[esp+0x14]
c00162e2:	50                   	push   eax
c00162e3:	e8 38 a3 fe ff       	call   c0000620 <strcpy>
c00162e8:	83 c4 10             	add    esp,0x10
c00162eb:	83 ec 08             	sub    esp,0x8
c00162ee:	8d 44 24 10          	lea    eax,[esp+0x10]
c00162f2:	50                   	push   eax
c00162f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00162fa:	e8 71 ff ff ff       	call   c0016270 <FAT::fixFilepath(char*)>
c00162ff:	83 c4 10             	add    esp,0x10
c0016302:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001630a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016311:	83 e0 01             	and    eax,0x1
c0016314:	74 0a                	je     c0016320 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016316:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001631e:	66 90                	xchg   ax,ax
c0016320:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016327:	83 e0 04             	and    eax,0x4
c001632a:	74 10                	je     c001633c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001632c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016334:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001633c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016343:	83 e0 02             	and    eax,0x2
c0016346:	74 08                	je     c0016350 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016348:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016350:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016357:	83 e0 08             	and    eax,0x8
c001635a:	74 08                	je     c0016364 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001635c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016364:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001636b:	83 e0 10             	and    eax,0x10
c001636e:	74 08                	je     c0016378 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016370:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016378:	83 ec 0c             	sub    esp,0xc
c001637b:	68 28 02 00 00       	push   0x228
c0016380:	e8 e0 08 ff ff       	call   c0006c65 <malloc>
c0016385:	83 c4 10             	add    esp,0x10
c0016388:	89 c2                	mov    edx,eax
c001638a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016391:	89 10                	mov    DWORD PTR [eax],edx
c0016393:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001639a:	31 d2                	xor    edx,edx
c001639c:	88 c2                	mov    dl,al
c001639e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00163a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00163a7:	83 ec 04             	sub    esp,0x4
c00163aa:	52                   	push   edx
c00163ab:	8d 54 24 10          	lea    edx,[esp+0x10]
c00163af:	52                   	push   edx
c00163b0:	50                   	push   eax
c00163b1:	e8 94 d5 fe ff       	call   c000394a <f_open>
c00163b6:	83 c4 10             	add    esp,0x10
c00163b9:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00163c0:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00163c8:	74 0a                	je     c00163d4 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00163ca:	b8 01 00 00 00       	mov    eax,0x1
c00163cf:	eb 0b                	jmp    c00163dc <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00163d1:	8d 76 00             	lea    esi,[esi+0x0]
c00163d4:	b8 00 00 00 00       	mov    eax,0x0
c00163d9:	8d 76 00             	lea    esi,[esi+0x0]
c00163dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00163e2:	c3                   	ret    
c00163e3:	90                   	nop

c00163e4 <FAT::openDir(char const*, void**)>:
c00163e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00163ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00163f2:	74 0c                	je     c0016400 <FAT::openDir(char const*, void**)+0x1c>
c00163f4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00163fc:	75 0e                	jne    c001640c <FAT::openDir(char const*, void**)+0x28>
c00163fe:	66 90                	xchg   ax,ax
c0016400:	b8 04 00 00 00       	mov    eax,0x4
c0016405:	e9 82 00 00 00       	jmp    c001648c <FAT::openDir(char const*, void**)+0xa8>
c001640a:	66 90                	xchg   ax,ax
c001640c:	83 ec 08             	sub    esp,0x8
c001640f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016416:	8d 44 24 18          	lea    eax,[esp+0x18]
c001641a:	50                   	push   eax
c001641b:	e8 00 a2 fe ff       	call   c0000620 <strcpy>
c0016420:	83 c4 10             	add    esp,0x10
c0016423:	83 ec 08             	sub    esp,0x8
c0016426:	8d 44 24 14          	lea    eax,[esp+0x14]
c001642a:	50                   	push   eax
c001642b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016432:	e8 39 fe ff ff       	call   c0016270 <FAT::fixFilepath(char*)>
c0016437:	83 c4 10             	add    esp,0x10
c001643a:	83 ec 0c             	sub    esp,0xc
c001643d:	6a 30                	push   0x30
c001643f:	e8 21 08 ff ff       	call   c0006c65 <malloc>
c0016444:	83 c4 10             	add    esp,0x10
c0016447:	89 c2                	mov    edx,eax
c0016449:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016450:	89 10                	mov    DWORD PTR [eax],edx
c0016452:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016459:	8b 00                	mov    eax,DWORD PTR [eax]
c001645b:	83 ec 08             	sub    esp,0x8
c001645e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016462:	52                   	push   edx
c0016463:	50                   	push   eax
c0016464:	e8 6a de fe ff       	call   c00042d3 <f_opendir>
c0016469:	83 c4 10             	add    esp,0x10
c001646c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016473:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001647b:	74 07                	je     c0016484 <FAT::openDir(char const*, void**)+0xa0>
c001647d:	b8 01 00 00 00       	mov    eax,0x1
c0016482:	eb 08                	jmp    c001648c <FAT::openDir(char const*, void**)+0xa8>
c0016484:	b8 00 00 00 00       	mov    eax,0x0
c0016489:	8d 76 00             	lea    esi,[esi+0x0]
c001648c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016492:	c3                   	ret    
c0016493:	90                   	nop

c0016494 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016494:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001649a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00164a2:	75 0c                	jne    c00164b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00164a4:	b8 04 00 00 00       	mov    eax,0x4
c00164a9:	e9 d6 00 00 00       	jmp    c0016584 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00164ae:	66 90                	xchg   ax,ax
c00164b0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00164b8:	75 0a                	jne    c00164c4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00164ba:	b8 04 00 00 00       	mov    eax,0x4
c00164bf:	e9 c0 00 00 00       	jmp    c0016584 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00164c4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00164cc:	75 0a                	jne    c00164d8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00164ce:	b8 04 00 00 00       	mov    eax,0x4
c00164d3:	e9 ac 00 00 00       	jmp    c0016584 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00164d8:	83 ec 08             	sub    esp,0x8
c00164db:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00164e2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00164e9:	50                   	push   eax
c00164ea:	e8 31 a1 fe ff       	call   c0000620 <strcpy>
c00164ef:	83 c4 10             	add    esp,0x10
c00164f2:	83 ec 08             	sub    esp,0x8
c00164f5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00164fc:	50                   	push   eax
c00164fd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016504:	e8 67 fd ff ff       	call   c0016270 <FAT::fixFilepath(char*)>
c0016509:	83 c4 10             	add    esp,0x10
c001650c:	83 ec 08             	sub    esp,0x8
c001650f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016513:	50                   	push   eax
c0016514:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001651b:	50                   	push   eax
c001651c:	e8 31 df fe ff       	call   c0004452 <f_stat>
c0016521:	83 c4 10             	add    esp,0x10
c0016524:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001652b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0016532:	85 c0                	test   eax,eax
c0016534:	74 0a                	je     c0016540 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016536:	83 f8 04             	cmp    eax,0x4
c0016539:	74 39                	je     c0016574 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001653b:	eb 3f                	jmp    c001657c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001653d:	8d 76 00             	lea    esi,[esi+0x0]
c0016540:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016544:	25 ff 00 00 00       	and    eax,0xff
c0016549:	83 e0 10             	and    eax,0x10
c001654c:	0f 95 c2             	setne  dl
c001654f:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0016556:	88 10                	mov    BYTE PTR [eax],dl
c0016558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001655c:	ba 00 00 00 00       	mov    edx,0x0
c0016561:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016568:	89 01                	mov    DWORD PTR [ecx],eax
c001656a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001656d:	b8 00 00 00 00       	mov    eax,0x0
c0016572:	eb 10                	jmp    c0016584 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016574:	b8 02 00 00 00       	mov    eax,0x2
c0016579:	eb 09                	jmp    c0016584 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001657b:	90                   	nop
c001657c:	b8 01 00 00 00       	mov    eax,0x1
c0016581:	8d 76 00             	lea    esi,[esi+0x0]
c0016584:	81 c4 2c 02 00 00    	add    esp,0x22c
c001658a:	c3                   	ret    
c001658b:	90                   	nop

c001658c <FAT::unlink(char const*)>:
c001658c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016592:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001659a:	75 08                	jne    c00165a4 <FAT::unlink(char const*)+0x18>
c001659c:	b8 04 00 00 00       	mov    eax,0x4
c00165a1:	eb 61                	jmp    c0016604 <FAT::unlink(char const*)+0x78>
c00165a3:	90                   	nop
c00165a4:	83 ec 08             	sub    esp,0x8
c00165a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00165ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165b2:	50                   	push   eax
c00165b3:	e8 68 a0 fe ff       	call   c0000620 <strcpy>
c00165b8:	83 c4 10             	add    esp,0x10
c00165bb:	83 ec 08             	sub    esp,0x8
c00165be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00165c2:	50                   	push   eax
c00165c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00165ca:	e8 a1 fc ff ff       	call   c0016270 <FAT::fixFilepath(char*)>
c00165cf:	83 c4 10             	add    esp,0x10
c00165d2:	83 ec 0c             	sub    esp,0xc
c00165d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165d9:	50                   	push   eax
c00165da:	e8 d8 e0 fe ff       	call   c00046b7 <f_unlink>
c00165df:	83 c4 10             	add    esp,0x10
c00165e2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00165e9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00165f0:	85 c0                	test   eax,eax
c00165f2:	75 08                	jne    c00165fc <FAT::unlink(char const*)+0x70>
c00165f4:	b8 00 00 00 00       	mov    eax,0x0
c00165f9:	eb 09                	jmp    c0016604 <FAT::unlink(char const*)+0x78>
c00165fb:	90                   	nop
c00165fc:	b8 01 00 00 00       	mov    eax,0x1
c0016601:	8d 76 00             	lea    esi,[esi+0x0]
c0016604:	81 c4 1c 01 00 00    	add    esp,0x11c
c001660a:	c3                   	ret    
c001660b:	90                   	nop

c001660c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001660c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0016612:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0016619:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0016620:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016624:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016628:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0016630:	75 0a                	jne    c001663c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0016632:	b8 04 00 00 00       	mov    eax,0x4
c0016637:	e9 54 01 00 00       	jmp    c0016790 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001663c:	83 ec 08             	sub    esp,0x8
c001663f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016646:	8d 44 24 24          	lea    eax,[esp+0x24]
c001664a:	50                   	push   eax
c001664b:	e8 d0 9f fe ff       	call   c0000620 <strcpy>
c0016650:	83 c4 10             	add    esp,0x10
c0016653:	83 ec 08             	sub    esp,0x8
c0016656:	8d 44 24 20          	lea    eax,[esp+0x20]
c001665a:	50                   	push   eax
c001665b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016662:	e8 09 fc ff ff       	call   c0016270 <FAT::fixFilepath(char*)>
c0016667:	83 c4 10             	add    esp,0x10
c001666a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0016672:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001667a:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001667e:	25 ff 00 00 00       	and    eax,0xff
c0016683:	83 e0 01             	and    eax,0x1
c0016686:	74 08                	je     c0016690 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0016688:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0016690:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016694:	25 ff 00 00 00       	and    eax,0xff
c0016699:	83 e0 02             	and    eax,0x2
c001669c:	74 0a                	je     c00166a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001669e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00166a6:	66 90                	xchg   ax,ax
c00166a8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00166ac:	25 ff 00 00 00       	and    eax,0xff
c00166b1:	83 e0 04             	and    eax,0x4
c00166b4:	74 0a                	je     c00166c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00166b6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00166be:	66 90                	xchg   ax,ax
c00166c0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00166c4:	25 ff 00 00 00       	and    eax,0xff
c00166c9:	83 e0 08             	and    eax,0x8
c00166cc:	74 0a                	je     c00166d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00166ce:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00166d6:	66 90                	xchg   ax,ax
c00166d8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00166dc:	25 ff 00 00 00       	and    eax,0xff
c00166e1:	83 e0 01             	and    eax,0x1
c00166e4:	74 0a                	je     c00166f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00166e6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00166ee:	66 90                	xchg   ax,ax
c00166f0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00166f4:	25 ff 00 00 00       	and    eax,0xff
c00166f9:	83 e0 02             	and    eax,0x2
c00166fc:	74 0a                	je     c0016708 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00166fe:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0016706:	66 90                	xchg   ax,ax
c0016708:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001670c:	25 ff 00 00 00       	and    eax,0xff
c0016711:	83 e0 04             	and    eax,0x4
c0016714:	74 0a                	je     c0016720 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0016716:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001671e:	66 90                	xchg   ax,ax
c0016720:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016724:	25 ff 00 00 00       	and    eax,0xff
c0016729:	83 e0 08             	and    eax,0x8
c001672c:	74 0a                	je     c0016738 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001672e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0016736:	66 90                	xchg   ax,ax
c0016738:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001673f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0016746:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001674d:	31 d2                	xor    edx,edx
c001674f:	88 c2                	mov    dl,al
c0016751:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0016758:	25 ff 00 00 00       	and    eax,0xff
c001675d:	83 ec 04             	sub    esp,0x4
c0016760:	52                   	push   edx
c0016761:	50                   	push   eax
c0016762:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016766:	50                   	push   eax
c0016767:	e8 be e3 fe ff       	call   c0004b2a <f_chmod>
c001676c:	83 c4 10             	add    esp,0x10
c001676f:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0016776:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001677d:	85 c0                	test   eax,eax
c001677f:	75 07                	jne    c0016788 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0016781:	b8 00 00 00 00       	mov    eax,0x0
c0016786:	eb 08                	jmp    c0016790 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0016788:	b8 01 00 00 00       	mov    eax,0x1
c001678d:	8d 76 00             	lea    esi,[esi+0x0]
c0016790:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016796:	c3                   	ret    
c0016797:	90                   	nop

c0016798 <FAT::rename(char const*, char const*)>:
c0016798:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001679e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00167a6:	74 0c                	je     c00167b4 <FAT::rename(char const*, char const*)+0x1c>
c00167a8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00167b0:	75 0e                	jne    c00167c0 <FAT::rename(char const*, char const*)+0x28>
c00167b2:	66 90                	xchg   ax,ax
c00167b4:	b8 04 00 00 00       	mov    eax,0x4
c00167b9:	e9 9e 00 00 00       	jmp    c001685c <FAT::rename(char const*, char const*)+0xc4>
c00167be:	66 90                	xchg   ax,ax
c00167c0:	83 ec 08             	sub    esp,0x8
c00167c3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00167ca:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00167d1:	50                   	push   eax
c00167d2:	e8 49 9e fe ff       	call   c0000620 <strcpy>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	83 ec 08             	sub    esp,0x8
c00167dd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00167e4:	50                   	push   eax
c00167e5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00167ec:	e8 7f fa ff ff       	call   c0016270 <FAT::fixFilepath(char*)>
c00167f1:	83 c4 10             	add    esp,0x10
c00167f4:	83 ec 08             	sub    esp,0x8
c00167f7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00167fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016802:	50                   	push   eax
c0016803:	e8 18 9e fe ff       	call   c0000620 <strcpy>
c0016808:	83 c4 10             	add    esp,0x10
c001680b:	83 ec 08             	sub    esp,0x8
c001680e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016812:	50                   	push   eax
c0016813:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001681a:	e8 51 fa ff ff       	call   c0016270 <FAT::fixFilepath(char*)>
c001681f:	83 c4 10             	add    esp,0x10
c0016822:	83 ec 08             	sub    esp,0x8
c0016825:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016829:	50                   	push   eax
c001682a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0016831:	50                   	push   eax
c0016832:	e8 3d e1 fe ff       	call   c0004974 <f_rename>
c0016837:	83 c4 10             	add    esp,0x10
c001683a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0016841:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0016848:	85 c0                	test   eax,eax
c001684a:	75 08                	jne    c0016854 <FAT::rename(char const*, char const*)+0xbc>
c001684c:	b8 00 00 00 00       	mov    eax,0x0
c0016851:	eb 09                	jmp    c001685c <FAT::rename(char const*, char const*)+0xc4>
c0016853:	90                   	nop
c0016854:	b8 01 00 00 00       	mov    eax,0x1
c0016859:	8d 76 00             	lea    esi,[esi+0x0]
c001685c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0016862:	c3                   	ret    
c0016863:	90                   	nop

c0016864 <FAT::mkdir(char const*)>:
c0016864:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001686a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016872:	75 08                	jne    c001687c <FAT::mkdir(char const*)+0x18>
c0016874:	b8 04 00 00 00       	mov    eax,0x4
c0016879:	eb 61                	jmp    c00168dc <FAT::mkdir(char const*)+0x78>
c001687b:	90                   	nop
c001687c:	83 ec 08             	sub    esp,0x8
c001687f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016886:	8d 44 24 18          	lea    eax,[esp+0x18]
c001688a:	50                   	push   eax
c001688b:	e8 90 9d fe ff       	call   c0000620 <strcpy>
c0016890:	83 c4 10             	add    esp,0x10
c0016893:	83 ec 08             	sub    esp,0x8
c0016896:	8d 44 24 14          	lea    eax,[esp+0x14]
c001689a:	50                   	push   eax
c001689b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00168a2:	e8 c9 f9 ff ff       	call   c0016270 <FAT::fixFilepath(char*)>
c00168a7:	83 c4 10             	add    esp,0x10
c00168aa:	83 ec 0c             	sub    esp,0xc
c00168ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168b1:	50                   	push   eax
c00168b2:	e8 22 df fe ff       	call   c00047d9 <f_mkdir>
c00168b7:	83 c4 10             	add    esp,0x10
c00168ba:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00168c1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00168c8:	85 c0                	test   eax,eax
c00168ca:	75 08                	jne    c00168d4 <FAT::mkdir(char const*)+0x70>
c00168cc:	b8 00 00 00 00       	mov    eax,0x0
c00168d1:	eb 09                	jmp    c00168dc <FAT::mkdir(char const*)+0x78>
c00168d3:	90                   	nop
c00168d4:	b8 01 00 00 00       	mov    eax,0x1
c00168d9:	8d 76 00             	lea    esi,[esi+0x0]
c00168dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00168e2:	c3                   	ret    
c00168e3:	90                   	nop

c00168e4 <FAT::exists(char const*)>:
c00168e4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00168ea:	83 ec 08             	sub    esp,0x8
c00168ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00168f4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00168f8:	50                   	push   eax
c00168f9:	e8 22 9d fe ff       	call   c0000620 <strcpy>
c00168fe:	83 c4 10             	add    esp,0x10
c0016901:	83 ec 08             	sub    esp,0x8
c0016904:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016908:	50                   	push   eax
c0016909:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016910:	e8 5b f9 ff ff       	call   c0016270 <FAT::fixFilepath(char*)>
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	83 ec 08             	sub    esp,0x8
c001691b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0016922:	50                   	push   eax
c0016923:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016927:	50                   	push   eax
c0016928:	e8 25 db fe ff       	call   c0004452 <f_stat>
c001692d:	83 c4 10             	add    esp,0x10
c0016930:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016937:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001693e:	85 c0                	test   eax,eax
c0016940:	75 06                	jne    c0016948 <FAT::exists(char const*)+0x64>
c0016942:	b0 01                	mov    al,0x1
c0016944:	eb 06                	jmp    c001694c <FAT::exists(char const*)+0x68>
c0016946:	66 90                	xchg   ax,ax
c0016948:	b0 00                	mov    al,0x0
c001694a:	66 90                	xchg   ax,ax
c001694c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0016952:	c3                   	ret    
c0016953:	90                   	nop

c0016954 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0016954:	b8 08 00 00 00       	mov    eax,0x8
c0016959:	c3                   	ret    

c001695a <ISO9660::seek(void*, unsigned long long)>:
c001695a:	53                   	push   ebx
c001695b:	b8 04 00 00 00       	mov    eax,0x4
c0016960:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016964:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016968:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001696c:	85 d2                	test   edx,edx
c001696e:	74 17                	je     c0016987 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0016970:	89 c8                	mov    eax,ecx
c0016972:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0016975:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0016978:	b8 01 00 00 00       	mov    eax,0x1
c001697d:	73 08                	jae    c0016987 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001697f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0016982:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0016985:	31 c0                	xor    eax,eax
c0016987:	5b                   	pop    ebx
c0016988:	c3                   	ret    
c0016989:	90                   	nop

c001698a <ISO9660::tell(void*, unsigned long long*)>:
c001698a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001698e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016992:	85 d2                	test   edx,edx
c0016994:	74 12                	je     c00169a8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0016996:	85 c0                	test   eax,eax
c0016998:	74 0e                	je     c00169a8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001699a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001699d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00169a0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00169a3:	89 10                	mov    DWORD PTR [eax],edx
c00169a5:	31 c0                	xor    eax,eax
c00169a7:	c3                   	ret    
c00169a8:	b8 04 00 00 00       	mov    eax,0x4
c00169ad:	c3                   	ret    

c00169ae <ISO9660::getName()>:
c00169ae:	b8 fc e6 01 c0       	mov    eax,0xc001e6fc
c00169b3:	c3                   	ret    

c00169b4 <ISO9660::stat(void*, unsigned long long*)>:
c00169b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00169b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169bc:	85 d2                	test   edx,edx
c00169be:	74 12                	je     c00169d2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00169c0:	85 c0                	test   eax,eax
c00169c2:	74 0e                	je     c00169d2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00169c4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00169c7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00169ca:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00169cd:	89 10                	mov    DWORD PTR [eax],edx
c00169cf:	31 c0                	xor    eax,eax
c00169d1:	c3                   	ret    
c00169d2:	b8 04 00 00 00       	mov    eax,0x4
c00169d7:	c3                   	ret    

c00169d8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00169d8:	b8 01 00 00 00       	mov    eax,0x1
c00169dd:	c3                   	ret    

c00169de <ISO9660::unlink(char const*)>:
c00169de:	b8 01 00 00 00       	mov    eax,0x1
c00169e3:	c3                   	ret    

c00169e4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00169e4:	b8 01 00 00 00       	mov    eax,0x1
c00169e9:	c3                   	ret    

c00169ea <ISO9660::rename(char const*, char const*)>:
c00169ea:	b8 01 00 00 00       	mov    eax,0x1
c00169ef:	c3                   	ret    

c00169f0 <ISO9660::mkdir(char const*)>:
c00169f0:	b8 01 00 00 00       	mov    eax,0x1
c00169f5:	c3                   	ret    

c00169f6 <ISO9660::close(void*)>:
c00169f6:	83 ec 0c             	sub    esp,0xc
c00169f9:	b8 04 00 00 00       	mov    eax,0x4
c00169fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a02:	85 d2                	test   edx,edx
c0016a04:	74 0e                	je     c0016a14 <ISO9660::close(void*)+0x1e>
c0016a06:	83 ec 0c             	sub    esp,0xc
c0016a09:	52                   	push   edx
c0016a0a:	e8 66 02 ff ff       	call   c0006c75 <free>
c0016a0f:	83 c4 10             	add    esp,0x10
c0016a12:	31 c0                	xor    eax,eax
c0016a14:	83 c4 0c             	add    esp,0xc
c0016a17:	c3                   	ret    

c0016a18 <ISO9660::closeDir(void*)>:
c0016a18:	83 ec 0c             	sub    esp,0xc
c0016a1b:	b8 04 00 00 00       	mov    eax,0x4
c0016a20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a24:	85 d2                	test   edx,edx
c0016a26:	74 0e                	je     c0016a36 <ISO9660::closeDir(void*)+0x1e>
c0016a28:	83 ec 0c             	sub    esp,0xc
c0016a2b:	52                   	push   edx
c0016a2c:	e8 44 02 ff ff       	call   c0006c75 <free>
c0016a31:	83 c4 10             	add    esp,0x10
c0016a34:	31 c0                	xor    eax,eax
c0016a36:	83 c4 0c             	add    esp,0xc
c0016a39:	c3                   	ret    

c0016a3a <ISO9660::~ISO9660()>:
c0016a3a:	83 ec 0c             	sub    esp,0xc
c0016a3d:	ba 20 e7 01 c0       	mov    edx,0xc001e720
c0016a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a46:	89 10                	mov    DWORD PTR [eax],edx
c0016a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a4c:	83 ec 0c             	sub    esp,0xc
c0016a4f:	50                   	push   eax
c0016a50:	e8 19 33 ff ff       	call   c0009d6e <Filesystem::~Filesystem()>
c0016a55:	83 c4 10             	add    esp,0x10
c0016a58:	90                   	nop
c0016a59:	83 c4 0c             	add    esp,0xc
c0016a5c:	c3                   	ret    
c0016a5d:	90                   	nop

c0016a5e <ISO9660::~ISO9660()>:
c0016a5e:	83 ec 0c             	sub    esp,0xc
c0016a61:	83 ec 0c             	sub    esp,0xc
c0016a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a68:	e8 cd ff ff ff       	call   c0016a3a <ISO9660::~ISO9660()>
c0016a6d:	83 c4 10             	add    esp,0x10
c0016a70:	83 ec 08             	sub    esp,0x8
c0016a73:	6a 08                	push   0x8
c0016a75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a79:	e8 b4 2e ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c0016a7e:	83 c4 10             	add    esp,0x10
c0016a81:	83 c4 0c             	add    esp,0xc
c0016a84:	c3                   	ret    

c0016a85 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0016a85:	55                   	push   ebp
c0016a86:	31 c9                	xor    ecx,ecx
c0016a88:	57                   	push   edi
c0016a89:	56                   	push   esi
c0016a8a:	53                   	push   ebx
c0016a8b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0016a8f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016a93:	89 eb                	mov    ebx,ebp
c0016a95:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0016a99:	39 ce                	cmp    esi,ecx
c0016a9b:	7e 17                	jle    c0016ab4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0016a9d:	31 d2                	xor    edx,edx
c0016a9f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0016aa3:	7d 13                	jge    c0016ab8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0016aa5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0016aa9:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0016aac:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0016aaf:	75 0d                	jne    c0016abe <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0016ab1:	42                   	inc    edx
c0016ab2:	eb eb                	jmp    c0016a9f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0016ab4:	31 c0                	xor    eax,eax
c0016ab6:	eb 0a                	jmp    c0016ac2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0016ab8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0016abc:	eb 04                	jmp    c0016ac2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0016abe:	41                   	inc    ecx
c0016abf:	43                   	inc    ebx
c0016ac0:	eb d7                	jmp    c0016a99 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0016ac2:	5b                   	pop    ebx
c0016ac3:	5e                   	pop    esi
c0016ac4:	5f                   	pop    edi
c0016ac5:	5d                   	pop    ebp
c0016ac6:	c3                   	ret    

c0016ac7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0016ac7:	57                   	push   edi
c0016ac8:	56                   	push   esi
c0016ac9:	53                   	push   ebx
c0016aca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ace:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016ad2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016ad6:	39 35 a0 2c 02 c0    	cmp    DWORD PTR ds:0xc0022ca0,esi
c0016adc:	75 08                	jne    c0016ae6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0016ade:	38 1d 34 f0 01 c0    	cmp    BYTE PTR ds:0xc001f034,bl
c0016ae4:	74 4a                	je     c0016b30 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0016ae6:	83 ec 0c             	sub    esp,0xc
c0016ae9:	31 d2                	xor    edx,edx
c0016aeb:	68 c0 2c 02 c0       	push   0xc0022cc0
c0016af0:	0f be c3             	movsx  eax,bl
c0016af3:	6a 01                	push   0x1
c0016af5:	52                   	push   edx
c0016af6:	56                   	push   esi
c0016af7:	ff 34 85 7c 1a 02 c0 	push   DWORD PTR [eax*4-0x3ffde584]
c0016afe:	e8 0d 56 ff ff       	call   c000c110 <LogicalDisk::read(unsigned long long, int, void*)>
c0016b03:	83 c4 20             	add    esp,0x20
c0016b06:	85 c0                	test   eax,eax
c0016b08:	75 0e                	jne    c0016b18 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0016b0a:	89 35 a0 2c 02 c0    	mov    DWORD PTR ds:0xc0022ca0,esi
c0016b10:	88 1d 34 f0 01 c0    	mov    BYTE PTR ds:0xc001f034,bl
c0016b16:	eb 18                	jmp    c0016b30 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0016b18:	50                   	push   eax
c0016b19:	68 00 08 00 00       	push   0x800
c0016b1e:	6a 00                	push   0x0
c0016b20:	57                   	push   edi
c0016b21:	e8 ca 99 fe ff       	call   c00004f0 <memset>
c0016b26:	83 c4 10             	add    esp,0x10
c0016b29:	b8 01 00 00 00       	mov    eax,0x1
c0016b2e:	eb 0e                	jmp    c0016b3e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0016b30:	be c0 2c 02 c0       	mov    esi,0xc0022cc0
c0016b35:	b9 00 08 00 00       	mov    ecx,0x800
c0016b3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b3c:	31 c0                	xor    eax,eax
c0016b3e:	5b                   	pop    ebx
c0016b3f:	5e                   	pop    esi
c0016b40:	5f                   	pop    edi
c0016b41:	c3                   	ret    

c0016b42 <ISO9660::tryMount(LogicalDisk*, int)>:
c0016b42:	81 ec 10 08 00 00    	sub    esp,0x810
c0016b48:	c7 05 a0 2c 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0022ca0,0xdeadbeef
c0016b52:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0016b59:	83 c0 41             	add    eax,0x41
c0016b5c:	0f be c0             	movsx  eax,al
c0016b5f:	50                   	push   eax
c0016b60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016b64:	50                   	push   eax
c0016b65:	6a 10                	push   0x10
c0016b67:	e8 5b ff ff ff       	call   c0016ac7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016b6c:	83 c4 10             	add    esp,0x10
c0016b6f:	31 d2                	xor    edx,edx
c0016b71:	85 c0                	test   eax,eax
c0016b73:	75 24                	jne    c0016b99 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016b75:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0016b7a:	75 1d                	jne    c0016b99 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016b7c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0016b81:	75 16                	jne    c0016b99 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016b83:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0016b88:	75 0f                	jne    c0016b99 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016b8a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0016b8f:	75 08                	jne    c0016b99 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016b91:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0016b96:	0f 94 c2             	sete   dl
c0016b99:	88 d0                	mov    al,dl
c0016b9b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0016ba1:	c3                   	ret    

c0016ba2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0016ba2:	55                   	push   ebp
c0016ba3:	57                   	push   edi
c0016ba4:	56                   	push   esi
c0016ba5:	53                   	push   ebx
c0016ba6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0016bac:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0016bb3:	85 ed                	test   ebp,ebp
c0016bb5:	0f 84 da 01 00 00    	je     c0016d95 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0016bbb:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0016bc3:	0f 84 cc 01 00 00    	je     c0016d95 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0016bc9:	b8 01 00 00 00       	mov    eax,0x1
c0016bce:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0016bd2:	0f 85 c2 01 00 00    	jne    c0016d9a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016bd8:	31 d2                	xor    edx,edx
c0016bda:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0016be1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016be4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016be7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016bea:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016bf1:	01 c8                	add    eax,ecx
c0016bf3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016bf6:	11 da                	adc    edx,ebx
c0016bf8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0016bfc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016c00:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016c04:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016c08:	19 d7                	sbb    edi,edx
c0016c0a:	72 11                	jb     c0016c1d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0016c0c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016c0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016c13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c1b:	eb 0c                	jmp    c0016c29 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0016c1d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0016c21:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016c25:	29 ce                	sub    esi,ecx
c0016c27:	19 df                	sbb    edi,ebx
c0016c29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016c2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0016c2f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0016c33:	c1 e0 0b             	shl    eax,0xb
c0016c36:	01 c8                	add    eax,ecx
c0016c38:	11 da                	adc    edx,ebx
c0016c3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016c41:	51                   	push   ecx
c0016c42:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016c46:	50                   	push   eax
c0016c47:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0016c4b:	53                   	push   ebx
c0016c4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c54:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016c58:	50                   	push   eax
c0016c59:	e8 69 fe ff ff       	call   c0016ac7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016c5e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0016c61:	b8 00 08 00 00       	mov    eax,0x800
c0016c66:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0016c6c:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0016c70:	29 d0                	sub    eax,edx
c0016c72:	83 c4 10             	add    esp,0x10
c0016c75:	89 f9                	mov    ecx,edi
c0016c77:	39 c6                	cmp    esi,eax
c0016c79:	83 d9 00             	sbb    ecx,0x0
c0016c7c:	7d 1b                	jge    c0016c99 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0016c7e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016c83:	75 12                	jne    c0016c97 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0016c85:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016c8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016c92:	e9 fa 00 00 00       	jmp    c0016d91 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0016c97:	89 f0                	mov    eax,esi
c0016c99:	01 d3                	add    ebx,edx
c0016c9b:	31 d2                	xor    edx,edx
c0016c9d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016ca1:	39 c2                	cmp    edx,eax
c0016ca3:	7d 14                	jge    c0016cb9 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0016ca5:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0016cac:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016cb0:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0016cb3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0016cb6:	42                   	inc    edx
c0016cb7:	eb e8                	jmp    c0016ca1 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0016cb9:	89 c2                	mov    edx,eax
c0016cbb:	85 c0                	test   eax,eax
c0016cbd:	79 02                	jns    c0016cc1 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0016cbf:	31 d2                	xor    edx,edx
c0016cc1:	01 c2                	add    edx,eax
c0016cc3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016cc6:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0016ccd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0016cd1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016cd5:	99                   	cdq    
c0016cd6:	01 c1                	add    ecx,eax
c0016cd8:	11 d3                	adc    ebx,edx
c0016cda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0016cde:	29 c6                	sub    esi,eax
c0016ce0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0016ce4:	19 d7                	sbb    edi,edx
c0016ce6:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ce9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0016ced:	b8 ff 07 00 00       	mov    eax,0x7ff
c0016cf2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0016cf5:	b8 00 00 00 00       	mov    eax,0x0
c0016cfa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0016cfe:	7d 43                	jge    c0016d43 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0016d00:	52                   	push   edx
c0016d01:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016d05:	50                   	push   eax
c0016d06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d0e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d12:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016d16:	50                   	push   eax
c0016d17:	e8 ab fd ff ff       	call   c0016ac7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016d1c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0016d24:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0016d29:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0016d31:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0016d39:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0016d3e:	83 c4 10             	add    esp,0x10
c0016d41:	eb aa                	jmp    c0016ced <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0016d43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d47:	0b 04 24             	or     eax,DWORD PTR [esp]
c0016d4a:	74 2a                	je     c0016d76 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0016d4c:	50                   	push   eax
c0016d4d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016d51:	50                   	push   eax
c0016d52:	8d 74 24 28          	lea    esi,[esp+0x28]
c0016d56:	56                   	push   esi
c0016d57:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016d5b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016d5f:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0016d63:	51                   	push   ecx
c0016d64:	e8 5e fd ff ff       	call   c0016ac7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016d69:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016d6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016d71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016d7d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016d81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d85:	89 18                	mov    DWORD PTR [eax],ebx
c0016d87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d8b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016d8e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016d91:	31 c0                	xor    eax,eax
c0016d93:	eb 05                	jmp    c0016d9a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016d95:	b8 04 00 00 00       	mov    eax,0x4
c0016d9a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0016da0:	5b                   	pop    ebx
c0016da1:	5e                   	pop    esi
c0016da2:	5f                   	pop    edi
c0016da3:	5d                   	pop    ebp
c0016da4:	c3                   	ret    
c0016da5:	90                   	nop

c0016da6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0016da6:	55                   	push   ebp
c0016da7:	57                   	push   edi
c0016da8:	56                   	push   esi
c0016da9:	53                   	push   ebx
c0016daa:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0016db0:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0016db7:	85 ed                	test   ebp,ebp
c0016db9:	0f 84 4f 02 00 00    	je     c001700e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016dbf:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0016dc7:	0f 84 41 02 00 00    	je     c001700e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016dcd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016dd0:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0016dd3:	75 0a                	jne    c0016ddf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0016dd5:	b8 07 00 00 00       	mov    eax,0x7
c0016dda:	e9 34 02 00 00       	jmp    c0017013 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016ddf:	50                   	push   eax
c0016de0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016de4:	50                   	push   eax
c0016de5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016dec:	53                   	push   ebx
c0016ded:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016df0:	c1 e0 0b             	shl    eax,0xb
c0016df3:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0016df6:	c1 e8 0b             	shr    eax,0xb
c0016df9:	50                   	push   eax
c0016dfa:	e8 c8 fc ff ff       	call   c0016ac7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016dff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016e02:	83 c4 10             	add    esp,0x10
c0016e05:	89 c1                	mov    ecx,eax
c0016e07:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016e0a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0016e10:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0016e13:	84 db                	test   bl,bl
c0016e15:	0f 85 8b 00 00 00    	jne    c0016ea6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0016e1b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0016e21:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016e24:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0016e2a:	29 c6                	sub    esi,eax
c0016e2c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016e30:	89 f3                	mov    ebx,esi
c0016e32:	89 f1                	mov    ecx,esi
c0016e34:	c1 fb 1f             	sar    ebx,0x1f
c0016e37:	01 f0                	add    eax,esi
c0016e39:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016e3c:	11 da                	adc    edx,ebx
c0016e3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016e45:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016e48:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016e4b:	89 d8                	mov    eax,ebx
c0016e4d:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0016e51:	ba 00 00 00 00       	mov    edx,0x0
c0016e56:	19 f8                	sbb    eax,edi
c0016e58:	b8 00 00 00 00       	mov    eax,0x0
c0016e5d:	73 08                	jae    c0016e67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0016e5f:	89 f0                	mov    eax,esi
c0016e61:	89 fa                	mov    edx,edi
c0016e63:	29 c8                	sub    eax,ecx
c0016e65:	19 da                	sbb    edx,ebx
c0016e67:	89 d7                	mov    edi,edx
c0016e69:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016e6c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016e6f:	09 c7                	or     edi,eax
c0016e71:	0f 84 5e ff ff ff    	je     c0016dd5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0016e77:	57                   	push   edi
c0016e78:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016e7c:	50                   	push   eax
c0016e7d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016e84:	53                   	push   ebx
c0016e85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016e88:	c1 e0 0b             	shl    eax,0xb
c0016e8b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016e8f:	c1 e8 0b             	shr    eax,0xb
c0016e92:	50                   	push   eax
c0016e93:	e8 2f fc ff ff       	call   c0016ac7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016e98:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016e9b:	83 c4 10             	add    esp,0x10
c0016e9e:	25 ff 07 00 00       	and    eax,0x7ff
c0016ea3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0016ea6:	31 ff                	xor    edi,edi
c0016ea8:	56                   	push   esi
c0016ea9:	6a 28                	push   0x28
c0016eab:	6a 00                	push   0x0
c0016ead:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016eb1:	50                   	push   eax
c0016eb2:	e8 39 96 fe ff       	call   c00004f0 <memset>
c0016eb7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016eba:	25 ff 07 00 00       	and    eax,0x7ff
c0016ebf:	89 c6                	mov    esi,eax
c0016ec1:	83 c6 21             	add    esi,0x21
c0016ec4:	83 d7 00             	adc    edi,0x0
c0016ec7:	83 c4 10             	add    esp,0x10
c0016eca:	31 c9                	xor    ecx,ecx
c0016ecc:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0016ed3:	83 f9 28             	cmp    ecx,0x28
c0016ed6:	88 04 24             	mov    BYTE PTR [esp],al
c0016ed9:	0f 94 c2             	sete   dl
c0016edc:	88 d0                	mov    al,dl
c0016ede:	ba ff 07 00 00       	mov    edx,0x7ff
c0016ee3:	39 f2                	cmp    edx,esi
c0016ee5:	ba 00 00 00 00       	mov    edx,0x0
c0016eea:	19 fa                	sbb    edx,edi
c0016eec:	0f 92 c2             	setb   dl
c0016eef:	09 c2                	or     edx,eax
c0016ef1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0016ef5:	0f 94 c0             	sete   al
c0016ef8:	08 d0                	or     al,dl
c0016efa:	75 16                	jne    c0016f12 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016efc:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0016f00:	74 10                	je     c0016f12 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016f02:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016f05:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0016f09:	41                   	inc    ecx
c0016f0a:	83 c6 01             	add    esi,0x1
c0016f0d:	83 d7 00             	adc    edi,0x0
c0016f10:	eb ba                	jmp    c0016ecc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0016f12:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0016f19:	83 ec 0c             	sub    esp,0xc
c0016f1c:	8d 74 24 24          	lea    esi,[esp+0x24]
c0016f20:	56                   	push   esi
c0016f21:	e8 3a 96 fe ff       	call   c0000560 <strlen>
c0016f26:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0016f2d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016f31:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0016f39:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016f3c:	5a                   	pop    edx
c0016f3d:	25 ff 07 00 00       	and    eax,0x7ff
c0016f42:	59                   	pop    ecx
c0016f43:	01 f8                	add    eax,edi
c0016f45:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c0016f4c:	0f 95 c0             	setne  al
c0016f4f:	0f b6 c0             	movzx  eax,al
c0016f52:	40                   	inc    eax
c0016f53:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016f57:	56                   	push   esi
c0016f58:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016f5c:	50                   	push   eax
c0016f5d:	e8 be 96 fe ff       	call   c0000620 <strcpy>
c0016f62:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0016f66:	83 c4 10             	add    esp,0x10
c0016f69:	84 c0                	test   al,al
c0016f6b:	75 21                	jne    c0016f8e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1e8>
c0016f6d:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0016f75:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016f7d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016f85:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0016f8c:	eb 28                	jmp    c0016fb6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016f8e:	fe c8                	dec    al
c0016f90:	75 24                	jne    c0016fb6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016f92:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0016f9a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016fa2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016faa:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0016fb1:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0016fb6:	8d 74 24 40          	lea    esi,[esp+0x40]
c0016fba:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0016fc1:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0016fc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fca:	0f b6 f3             	movzx  esi,bl
c0016fcd:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0016fd4:	31 db                	xor    ebx,ebx
c0016fd6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016fdc:	89 df                	mov    edi,ebx
c0016fde:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0016fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016fe4:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0016fe7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0016fea:	39 c6                	cmp    esi,eax
c0016fec:	19 d7                	sbb    edi,edx
c0016fee:	72 10                	jb     c0017000 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25a>
c0016ff0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0016ff7:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0016ffe:	eb 0a                	jmp    c001700a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x264>
c0017000:	29 f0                	sub    eax,esi
c0017002:	19 da                	sbb    edx,ebx
c0017004:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0017007:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001700a:	31 c0                	xor    eax,eax
c001700c:	eb 05                	jmp    c0017013 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001700e:	b8 04 00 00 00       	mov    eax,0x4
c0017013:	81 c4 5c 09 00 00    	add    esp,0x95c
c0017019:	5b                   	pop    ebx
c001701a:	5e                   	pop    esi
c001701b:	5f                   	pop    edi
c001701c:	5d                   	pop    ebp
c001701d:	c3                   	ret    

c001701e <readRoot(unsigned int*, unsigned int*, char)>:
c001701e:	57                   	push   edi
c001701f:	56                   	push   esi
c0017020:	81 ec 38 08 00 00    	sub    esp,0x838
c0017026:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001702e:	50                   	push   eax
c001702f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017033:	50                   	push   eax
c0017034:	6a 10                	push   0x10
c0017036:	e8 8c fa ff ff       	call   c0016ac7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001703b:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0017042:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0017046:	b9 22 00 00 00       	mov    ecx,0x22
c001704b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001704d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0017054:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017058:	89 10                	mov    DWORD PTR [eax],edx
c001705a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0017061:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017065:	89 10                	mov    DWORD PTR [eax],edx
c0017067:	81 c4 44 08 00 00    	add    esp,0x844
c001706d:	b0 01                	mov    al,0x1
c001706f:	5e                   	pop    esi
c0017070:	5f                   	pop    edi
c0017071:	c3                   	ret    

c0017072 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0017072:	55                   	push   ebp
c0017073:	57                   	push   edi
c0017074:	56                   	push   esi
c0017075:	53                   	push   ebx
c0017076:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001707c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0017083:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001708a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001708e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0017092:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0017096:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001709a:	75 03                	jne    c001709f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001709c:	83 c3 02             	add    ebx,0x2
c001709f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00170a2:	75 03                	jne    c00170a7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00170a4:	43                   	inc    ebx
c00170a5:	eb f8                	jmp    c001709f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00170a7:	52                   	push   edx
c00170a8:	68 00 01 00 00       	push   0x100
c00170ad:	6a 00                	push   0x0
c00170af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00170b3:	50                   	push   eax
c00170b4:	e8 37 94 fe ff       	call   c00004f0 <memset>
c00170b9:	83 c4 10             	add    esp,0x10
c00170bc:	31 d2                	xor    edx,edx
c00170be:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00170c1:	84 c0                	test   al,al
c00170c3:	74 21                	je     c00170e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00170c5:	3c 2f                	cmp    al,0x2f
c00170c7:	75 0b                	jne    c00170d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00170c9:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00170cd:	bd 01 00 00 00       	mov    ebp,0x1
c00170d2:	eb 14                	jmp    c00170e8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00170d4:	8d 48 9f             	lea    ecx,[eax-0x61]
c00170d7:	80 f9 19             	cmp    cl,0x19
c00170da:	77 03                	ja     c00170df <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00170dc:	83 e8 20             	sub    eax,0x20
c00170df:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00170e3:	42                   	inc    edx
c00170e4:	eb d8                	jmp    c00170be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00170e6:	31 ed                	xor    ebp,ebp
c00170e8:	83 ec 0c             	sub    esp,0xc
c00170eb:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00170f2:	e8 6e fb fe ff       	call   c0006c65 <malloc>
c00170f7:	89 c6                	mov    esi,eax
c00170f9:	89 c2                	mov    edx,eax
c00170fb:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0017102:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0017108:	c1 ef 0b             	shr    edi,0xb
c001710b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0017112:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0017116:	83 c4 10             	add    esp,0x10
c0017119:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001711e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017122:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c0017129:	74 29                	je     c0017154 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001712b:	50                   	push   eax
c001712c:	57                   	push   edi
c001712d:	52                   	push   edx
c001712e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0017132:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0017139:	e8 89 f9 ff ff       	call   c0016ac7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001713e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017142:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0017149:	81 c2 00 08 00 00    	add    edx,0x800
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	eb ca                	jmp    c001711e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c0017154:	83 ec 0c             	sub    esp,0xc
c0017157:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001715b:	57                   	push   edi
c001715c:	e8 ff 93 fe ff       	call   c0000560 <strlen>
c0017161:	50                   	push   eax
c0017162:	57                   	push   edi
c0017163:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001716a:	56                   	push   esi
c001716b:	e8 15 f9 ff ff       	call   c0016a85 <__memmem(unsigned char*, int, unsigned char*, int)>
c0017170:	83 c4 20             	add    esp,0x20
c0017173:	85 c0                	test   eax,eax
c0017175:	75 13                	jne    c001718a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c0017177:	83 ec 0c             	sub    esp,0xc
c001717a:	56                   	push   esi
c001717b:	e8 f5 fa fe ff       	call   c0006c75 <free>
c0017180:	83 c4 10             	add    esp,0x10
c0017183:	31 c0                	xor    eax,eax
c0017185:	e9 b3 00 00 00       	jmp    c001723d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001718a:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001718e:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0017192:	c1 e7 08             	shl    edi,0x8
c0017195:	c1 e2 10             	shl    edx,0x10
c0017198:	09 d7                	or     edi,edx
c001719a:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001719e:	09 d7                	or     edi,edx
c00171a0:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00171a4:	c1 e2 18             	shl    edx,0x18
c00171a7:	09 d7                	or     edi,edx
c00171a9:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00171ad:	89 d1                	mov    ecx,edx
c00171af:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00171b3:	c1 e1 08             	shl    ecx,0x8
c00171b6:	c1 e2 10             	shl    edx,0x10
c00171b9:	09 ca                	or     edx,ecx
c00171bb:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00171bf:	09 ca                	or     edx,ecx
c00171c1:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00171c5:	c1 e1 18             	shl    ecx,0x18
c00171c8:	09 ca                	or     edx,ecx
c00171ca:	89 e9                	mov    ecx,ebp
c00171cc:	84 c9                	test   cl,cl
c00171ce:	74 3c                	je     c001720c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c00171d0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00171d4:	83 ec 0c             	sub    esp,0xc
c00171d7:	56                   	push   esi
c00171d8:	e8 98 fa fe ff       	call   c0006c75 <free>
c00171dd:	83 c4 0c             	add    esp,0xc
c00171e0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00171e7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00171ec:	50                   	push   eax
c00171ed:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00171f4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00171fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171ff:	52                   	push   edx
c0017200:	57                   	push   edi
c0017201:	53                   	push   ebx
c0017202:	e8 6b fe ff ff       	call   c0017072 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0017207:	83 c4 20             	add    esp,0x20
c001720a:	eb 31                	jmp    c001723d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001720c:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001720f:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0017216:	d0 e8                	shr    al,1
c0017218:	89 3b                	mov    DWORD PTR [ebx],edi
c001721a:	83 e0 01             	and    eax,0x1
c001721d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017224:	83 ec 0c             	sub    esp,0xc
c0017227:	89 13                	mov    DWORD PTR [ebx],edx
c0017229:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0017230:	89 03                	mov    DWORD PTR [ebx],eax
c0017232:	56                   	push   esi
c0017233:	e8 3d fa fe ff       	call   c0006c75 <free>
c0017238:	83 c4 10             	add    esp,0x10
c001723b:	b0 01                	mov    al,0x1
c001723d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017243:	5b                   	pop    ebx
c0017244:	5e                   	pop    esi
c0017245:	5f                   	pop    edi
c0017246:	5d                   	pop    ebp
c0017247:	c3                   	ret    

c0017248 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0017248:	55                   	push   ebp
c0017249:	57                   	push   edi
c001724a:	56                   	push   esi
c001724b:	53                   	push   ebx
c001724c:	83 ec 20             	sub    esp,0x20
c001724f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017253:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017257:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001725b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017263:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001726b:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0017270:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0017276:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001727c:	57                   	push   edi
c001727d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017281:	50                   	push   eax
c0017282:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017286:	50                   	push   eax
c0017287:	e8 92 fd ff ff       	call   c001701e <readRoot(unsigned int*, unsigned int*, char)>
c001728c:	5a                   	pop    edx
c001728d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017291:	e8 ca 92 fe ff       	call   c0000560 <strlen>
c0017296:	83 c4 10             	add    esp,0x10
c0017299:	83 f8 03             	cmp    eax,0x3
c001729c:	77 17                	ja     c00172b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001729e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172a2:	89 03                	mov    DWORD PTR [ebx],eax
c00172a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172a8:	89 06                	mov    DWORD PTR [esi],eax
c00172aa:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00172b1:	b0 01                	mov    al,0x1
c00172b3:	eb 19                	jmp    c00172ce <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00172b5:	50                   	push   eax
c00172b6:	55                   	push   ebp
c00172b7:	57                   	push   edi
c00172b8:	56                   	push   esi
c00172b9:	53                   	push   ebx
c00172ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00172c6:	e8 a7 fd ff ff       	call   c0017072 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00172cb:	83 c4 20             	add    esp,0x20
c00172ce:	83 c4 1c             	add    esp,0x1c
c00172d1:	5b                   	pop    ebx
c00172d2:	5e                   	pop    esi
c00172d3:	5f                   	pop    edi
c00172d4:	5d                   	pop    ebp
c00172d5:	c3                   	ret    

c00172d6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00172d6:	57                   	push   edi
c00172d7:	56                   	push   esi
c00172d8:	53                   	push   ebx
c00172d9:	83 ec 10             	sub    esp,0x10
c00172dc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00172e0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00172e4:	85 ff                	test   edi,edi
c00172e6:	0f 84 8b 00 00 00    	je     c0017377 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00172ec:	85 f6                	test   esi,esi
c00172ee:	0f 84 83 00 00 00    	je     c0017377 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00172f4:	b8 03 00 00 00       	mov    eax,0x3
c00172f9:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00172fe:	75 7c                	jne    c001737c <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0017300:	83 ec 0c             	sub    esp,0xc
c0017303:	6a 1c                	push   0x1c
c0017305:	e8 5b f9 fe ff       	call   c0006c65 <malloc>
c001730a:	89 07                	mov    DWORD PTR [edi],eax
c001730c:	89 c3                	mov    ebx,eax
c001730e:	58                   	pop    eax
c001730f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017313:	50                   	push   eax
c0017314:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017317:	50                   	push   eax
c0017318:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001731c:	50                   	push   eax
c001731d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017321:	50                   	push   eax
c0017322:	56                   	push   esi
c0017323:	e8 20 ff ff ff       	call   c0017248 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017328:	83 c4 20             	add    esp,0x20
c001732b:	84 c0                	test   al,al
c001732d:	74 07                	je     c0017336 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001732f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017334:	74 0b                	je     c0017341 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0017336:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001733a:	b8 01 00 00 00       	mov    eax,0x1
c001733f:	eb 3b                	jmp    c001737c <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0017341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017345:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0017349:	89 03                	mov    DWORD PTR [ebx],eax
c001734b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0017352:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017356:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001735d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017364:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0017367:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001736e:	8a 06                	mov    al,BYTE PTR [esi]
c0017370:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0017373:	31 c0                	xor    eax,eax
c0017375:	eb 05                	jmp    c001737c <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0017377:	b8 04 00 00 00       	mov    eax,0x4
c001737c:	83 c4 10             	add    esp,0x10
c001737f:	5b                   	pop    ebx
c0017380:	5e                   	pop    esi
c0017381:	5f                   	pop    edi
c0017382:	c3                   	ret    
c0017383:	90                   	nop

c0017384 <ISO9660::exists(char const*)>:
c0017384:	83 ec 28             	sub    esp,0x28
c0017387:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001738b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001738f:	52                   	push   edx
c0017390:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0017393:	52                   	push   edx
c0017394:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0017398:	52                   	push   edx
c0017399:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001739d:	52                   	push   edx
c001739e:	50                   	push   eax
c001739f:	e8 a4 fe ff ff       	call   c0017248 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00173a4:	83 c4 3c             	add    esp,0x3c
c00173a7:	c3                   	ret    

c00173a8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00173a8:	56                   	push   esi
c00173a9:	53                   	push   ebx
c00173aa:	83 ec 14             	sub    esp,0x14
c00173ad:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00173b1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00173b5:	85 db                	test   ebx,ebx
c00173b7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00173bb:	0f 94 c2             	sete   dl
c00173be:	85 f6                	test   esi,esi
c00173c0:	0f 94 c0             	sete   al
c00173c3:	08 c2                	or     dl,al
c00173c5:	75 68                	jne    c001742f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00173c7:	85 c9                	test   ecx,ecx
c00173c9:	74 64                	je     c001742f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00173cb:	83 ec 0c             	sub    esp,0xc
c00173ce:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00173d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173d5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00173db:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00173e2:	50                   	push   eax
c00173e3:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00173e6:	50                   	push   eax
c00173e7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00173eb:	50                   	push   eax
c00173ec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00173f0:	50                   	push   eax
c00173f1:	51                   	push   ecx
c00173f2:	e8 51 fe ff ff       	call   c0017248 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00173f7:	83 c4 20             	add    esp,0x20
c00173fa:	ba 01 00 00 00       	mov    edx,0x1
c00173ff:	84 c0                	test   al,al
c0017401:	74 31                	je     c0017434 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0017403:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017407:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001740e:	89 03                	mov    DWORD PTR [ebx],eax
c0017410:	ba 00 00 00 00       	mov    edx,0x0
c0017415:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017419:	85 c0                	test   eax,eax
c001741b:	0f 95 06             	setne  BYTE PTR [esi]
c001741e:	74 14                	je     c0017434 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0017420:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0017426:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001742d:	eb 05                	jmp    c0017434 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001742f:	ba 04 00 00 00       	mov    edx,0x4
c0017434:	83 c4 14             	add    esp,0x14
c0017437:	89 d0                	mov    eax,edx
c0017439:	5b                   	pop    ebx
c001743a:	5e                   	pop    esi
c001743b:	c3                   	ret    

c001743c <ISO9660::openDir(char const*, void**)>:
c001743c:	57                   	push   edi
c001743d:	56                   	push   esi
c001743e:	53                   	push   ebx
c001743f:	83 ec 10             	sub    esp,0x10
c0017442:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0017446:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001744a:	85 ff                	test   edi,edi
c001744c:	74 7b                	je     c00174c9 <ISO9660::openDir(char const*, void**)+0x8d>
c001744e:	85 f6                	test   esi,esi
c0017450:	74 77                	je     c00174c9 <ISO9660::openDir(char const*, void**)+0x8d>
c0017452:	83 ec 0c             	sub    esp,0xc
c0017455:	6a 1c                	push   0x1c
c0017457:	e8 09 f8 fe ff       	call   c0006c65 <malloc>
c001745c:	89 07                	mov    DWORD PTR [edi],eax
c001745e:	89 c3                	mov    ebx,eax
c0017460:	58                   	pop    eax
c0017461:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017465:	50                   	push   eax
c0017466:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017469:	50                   	push   eax
c001746a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001746e:	50                   	push   eax
c001746f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017473:	50                   	push   eax
c0017474:	56                   	push   esi
c0017475:	e8 ce fd ff ff       	call   c0017248 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001747a:	83 c4 20             	add    esp,0x20
c001747d:	84 c0                	test   al,al
c001747f:	74 07                	je     c0017488 <ISO9660::openDir(char const*, void**)+0x4c>
c0017481:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017486:	75 0b                	jne    c0017493 <ISO9660::openDir(char const*, void**)+0x57>
c0017488:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001748c:	b8 01 00 00 00       	mov    eax,0x1
c0017491:	eb 3b                	jmp    c00174ce <ISO9660::openDir(char const*, void**)+0x92>
c0017493:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017497:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001749b:	89 03                	mov    DWORD PTR [ebx],eax
c001749d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00174a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00174a8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00174af:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00174b6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00174b9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00174c0:	8a 06                	mov    al,BYTE PTR [esi]
c00174c2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00174c5:	31 c0                	xor    eax,eax
c00174c7:	eb 05                	jmp    c00174ce <ISO9660::openDir(char const*, void**)+0x92>
c00174c9:	b8 04 00 00 00       	mov    eax,0x4
c00174ce:	83 c4 10             	add    esp,0x10
c00174d1:	5b                   	pop    ebx
c00174d2:	5e                   	pop    esi
c00174d3:	5f                   	pop    edi
c00174d4:	c3                   	ret    
c00174d5:	90                   	nop

c00174d6 <ISO9660::ISO9660()>:
c00174d6:	83 ec 0c             	sub    esp,0xc
c00174d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174dd:	83 ec 0c             	sub    esp,0xc
c00174e0:	50                   	push   eax
c00174e1:	e8 64 28 ff ff       	call   c0009d4a <Filesystem::Filesystem()>
c00174e6:	83 c4 10             	add    esp,0x10
c00174e9:	ba 20 e7 01 c0       	mov    edx,0xc001e720
c00174ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f2:	89 10                	mov    DWORD PTR [eax],edx
c00174f4:	90                   	nop
c00174f5:	83 c4 0c             	add    esp,0xc
c00174f8:	c3                   	ret    
c00174f9:	90                   	nop

c00174fa <SoundCard::beginPlayback()>:
c00174fa:	c7 44 24 04 80 e7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e780
c0017502:	e9 9a 80 ff ff       	jmp    c000f5a1 <Krnl::panic(char const*)>
c0017507:	90                   	nop

c0017508 <SoundCard::stopPlayback()>:
c0017508:	c7 44 24 04 80 e7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e780
c0017510:	e9 8c 80 ff ff       	jmp    c000f5a1 <Krnl::panic(char const*)>
c0017515:	90                   	nop

c0017516 <SoundCard::SoundCard(char const*)>:
c0017516:	83 ec 1c             	sub    esp,0x1c
c0017519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001751d:	83 ec 08             	sub    esp,0x8
c0017520:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017524:	50                   	push   eax
c0017525:	e8 d6 3a ff ff       	call   c000b000 <Device::Device(char const*)>
c001752a:	83 c4 10             	add    esp,0x10
c001752d:	ba cc e7 01 c0       	mov    edx,0xc001e7cc
c0017532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017536:	89 10                	mov    DWORD PTR [eax],edx
c0017538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001753c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017547:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017555:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001755f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017563:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001756d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017571:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001757b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017583:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017588:	7f 19                	jg     c00175a3 <SoundCard::SoundCard(char const*)+0x8d>
c001758a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001758e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017592:	83 c2 54             	add    edx,0x54
c0017595:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001759d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00175a1:	eb e0                	jmp    c0017583 <SoundCard::SoundCard(char const*)+0x6d>
c00175a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175a7:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00175ae:	90                   	nop
c00175af:	83 c4 1c             	add    esp,0x1c
c00175b2:	c3                   	ret    
c00175b3:	90                   	nop

c00175b4 <SoundCard::~SoundCard()>:
c00175b4:	83 ec 0c             	sub    esp,0xc
c00175b7:	ba cc e7 01 c0       	mov    edx,0xc001e7cc
c00175bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c0:	89 10                	mov    DWORD PTR [eax],edx
c00175c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c6:	83 ec 0c             	sub    esp,0xc
c00175c9:	50                   	push   eax
c00175ca:	e8 9b 37 ff ff       	call   c000ad6a <Device::~Device()>
c00175cf:	83 c4 10             	add    esp,0x10
c00175d2:	90                   	nop
c00175d3:	83 c4 0c             	add    esp,0xc
c00175d6:	c3                   	ret    
c00175d7:	90                   	nop

c00175d8 <SoundCard::~SoundCard()>:
c00175d8:	83 ec 0c             	sub    esp,0xc
c00175db:	83 ec 0c             	sub    esp,0xc
c00175de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175e2:	e8 cd ff ff ff       	call   c00175b4 <SoundCard::~SoundCard()>
c00175e7:	83 c4 10             	add    esp,0x10
c00175ea:	83 ec 08             	sub    esp,0x8
c00175ed:	68 e8 01 00 00       	push   0x1e8
c00175f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175f6:	e8 37 23 ff ff       	call   c0009932 <operator delete(void*, unsigned long)>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	83 c4 0c             	add    esp,0xc
c0017601:	c3                   	ret    

c0017602 <SoundCard::configureRates(int, int, int)>:
c0017602:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017606:	31 c0                	xor    eax,eax
c0017608:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001760f:	75 20                	jne    c0017631 <SoundCard::configureRates(int, int, int)+0x2f>
c0017611:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017615:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001761b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001761f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017629:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001762f:	b0 01                	mov    al,0x1
c0017631:	c3                   	ret    

c0017632 <SoundCard::getSamples16(int, short*)>:
c0017632:	55                   	push   ebp
c0017633:	57                   	push   edi
c0017634:	31 ff                	xor    edi,edi
c0017636:	56                   	push   esi
c0017637:	53                   	push   ebx
c0017638:	31 db                	xor    ebx,ebx
c001763a:	83 ec 10             	sub    esp,0x10
c001763d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017641:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017645:	8d 04 36             	lea    eax,[esi+esi*1]
c0017648:	50                   	push   eax
c0017649:	6a 00                	push   0x0
c001764b:	55                   	push   ebp
c001764c:	e8 9f 8e fe ff       	call   c00004f0 <memset>
c0017651:	83 c4 10             	add    esp,0x10
c0017654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017658:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001765f:	85 c0                	test   eax,eax
c0017661:	74 1b                	je     c001767e <SoundCard::getSamples16(int, short*)+0x4c>
c0017663:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017667:	75 15                	jne    c001767e <SoundCard::getSamples16(int, short*)+0x4c>
c0017669:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001766d:	55                   	push   ebp
c001766e:	56                   	push   esi
c001766f:	50                   	push   eax
c0017670:	e8 ef 02 00 00       	call   c0017964 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017675:	83 c4 10             	add    esp,0x10
c0017678:	39 c7                	cmp    edi,eax
c001767a:	7d 02                	jge    c001767e <SoundCard::getSamples16(int, short*)+0x4c>
c001767c:	89 c7                	mov    edi,eax
c001767e:	43                   	inc    ebx
c001767f:	83 fb 20             	cmp    ebx,0x20
c0017682:	75 d0                	jne    c0017654 <SoundCard::getSamples16(int, short*)+0x22>
c0017684:	83 c4 0c             	add    esp,0xc
c0017687:	89 f8                	mov    eax,edi
c0017689:	5b                   	pop    ebx
c001768a:	5e                   	pop    esi
c001768b:	5f                   	pop    edi
c001768c:	5d                   	pop    ebp
c001768d:	c3                   	ret    

c001768e <SoundCard::getSamples32(int, int*)>:
c001768e:	55                   	push   ebp
c001768f:	57                   	push   edi
c0017690:	31 ff                	xor    edi,edi
c0017692:	56                   	push   esi
c0017693:	31 f6                	xor    esi,esi
c0017695:	53                   	push   ebx
c0017696:	83 ec 10             	sub    esp,0x10
c0017699:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001769d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00176a1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00176a5:	c1 e0 02             	shl    eax,0x2
c00176a8:	50                   	push   eax
c00176a9:	6a 00                	push   0x0
c00176ab:	55                   	push   ebp
c00176ac:	e8 3f 8e fe ff       	call   c00004f0 <memset>
c00176b1:	83 c4 10             	add    esp,0x10
c00176b4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00176bb:	85 c0                	test   eax,eax
c00176bd:	74 1b                	je     c00176da <SoundCard::getSamples32(int, int*)+0x4c>
c00176bf:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00176c3:	75 15                	jne    c00176da <SoundCard::getSamples32(int, int*)+0x4c>
c00176c5:	53                   	push   ebx
c00176c6:	55                   	push   ebp
c00176c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176cb:	50                   	push   eax
c00176cc:	e8 57 03 00 00       	call   c0017a28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00176d1:	83 c4 10             	add    esp,0x10
c00176d4:	39 c6                	cmp    esi,eax
c00176d6:	7d 02                	jge    c00176da <SoundCard::getSamples32(int, int*)+0x4c>
c00176d8:	89 c6                	mov    esi,eax
c00176da:	47                   	inc    edi
c00176db:	83 ff 20             	cmp    edi,0x20
c00176de:	75 d4                	jne    c00176b4 <SoundCard::getSamples32(int, int*)+0x26>
c00176e0:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00176e6:	85 f6                	test   esi,esi
c00176e8:	75 0f                	jne    c00176f9 <SoundCard::getSamples32(int, int*)+0x6b>
c00176ea:	84 c0                	test   al,al
c00176ec:	74 1b                	je     c0017709 <SoundCard::getSamples32(int, int*)+0x7b>
c00176ee:	83 ec 0c             	sub    esp,0xc
c00176f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00176f3:	53                   	push   ebx
c00176f4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00176f7:	eb 0d                	jmp    c0017706 <SoundCard::getSamples32(int, int*)+0x78>
c00176f9:	84 c0                	test   al,al
c00176fb:	75 0c                	jne    c0017709 <SoundCard::getSamples32(int, int*)+0x7b>
c00176fd:	83 ec 0c             	sub    esp,0xc
c0017700:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017702:	53                   	push   ebx
c0017703:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017706:	83 c4 10             	add    esp,0x10
c0017709:	83 c4 0c             	add    esp,0xc
c001770c:	89 f0                	mov    eax,esi
c001770e:	5b                   	pop    ebx
c001770f:	5e                   	pop    esi
c0017710:	5f                   	pop    edi
c0017711:	5d                   	pop    ebp
c0017712:	c3                   	ret    
c0017713:	90                   	nop

c0017714 <SoundCard::addChannel(SoundPort*)>:
c0017714:	83 ec 0c             	sub    esp,0xc
c0017717:	31 c0                	xor    eax,eax
c0017719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001771d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017725:	74 1b                	je     c0017742 <SoundCard::addChannel(SoundPort*)+0x2e>
c0017727:	40                   	inc    eax
c0017728:	83 f8 20             	cmp    eax,0x20
c001772b:	75 f0                	jne    c001771d <SoundCard::addChannel(SoundPort*)+0x9>
c001772d:	83 ec 0c             	sub    esp,0xc
c0017730:	68 a5 e7 01 c0       	push   0xc001e7a5
c0017735:	e8 67 7e ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001773a:	83 c4 10             	add    esp,0x10
c001773d:	83 c8 ff             	or     eax,0xffffffff
c0017740:	eb 0b                	jmp    c001774d <SoundCard::addChannel(SoundPort*)+0x39>
c0017742:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017746:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001774d:	83 c4 0c             	add    esp,0xc
c0017750:	c3                   	ret    
c0017751:	90                   	nop

c0017752 <SoundCard::removeChannel(int)>:
c0017752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017756:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001775a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017765:	c3                   	ret    
c0017766:	66 90                	xchg   ax,ax

c0017768 <SoundPort::SoundPort(int, int, int, int)>:
c0017768:	83 ec 0c             	sub    esp,0xc
c001776b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001776f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001777a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001777e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017782:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017786:	89 10                	mov    DWORD PTR [eax],edx
c0017788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001778c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017790:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017797:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001779b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001779e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00177a3:	75 13                	jne    c00177b8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00177a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00177ab:	05 a0 0f 00 00       	add    eax,0xfa0
c00177b0:	01 c0                	add    eax,eax
c00177b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177b6:	66 90                	xchg   ax,ax
c00177b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00177c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177c7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00177ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00177d5:	c1 e0 02             	shl    eax,0x2
c00177d8:	83 ec 0c             	sub    esp,0xc
c00177db:	50                   	push   eax
c00177dc:	e8 84 f4 fe ff       	call   c0006c65 <malloc>
c00177e1:	83 c4 10             	add    esp,0x10
c00177e4:	89 c2                	mov    edx,eax
c00177e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177ea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00177ed:	90                   	nop
c00177ee:	83 c4 0c             	add    esp,0xc
c00177f1:	c3                   	ret    
c00177f2:	66 90                	xchg   ax,ax

c00177f4 <SoundPort::~SoundPort()>:
c00177f4:	83 ec 0c             	sub    esp,0xc
c00177f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00177fe:	85 c0                	test   eax,eax
c0017800:	74 1e                	je     c0017820 <SoundPort::~SoundPort()+0x2c>
c0017802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017806:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017809:	83 ec 0c             	sub    esp,0xc
c001780c:	50                   	push   eax
c001780d:	e8 63 f4 fe ff       	call   c0006c75 <free>
c0017812:	83 c4 10             	add    esp,0x10
c0017815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017819:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017820:	90                   	nop
c0017821:	83 c4 0c             	add    esp,0xc
c0017824:	c3                   	ret    
c0017825:	90                   	nop
c0017826:	66 90                	xchg   ax,ax

c0017828 <SoundPort::unpause()>:
c0017828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001782c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017830:	c3                   	ret    
c0017831:	90                   	nop
c0017832:	66 90                	xchg   ax,ax

c0017834 <SoundPort::pause()>:
c0017834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017838:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001783c:	c3                   	ret    
c001783d:	90                   	nop
c001783e:	66 90                	xchg   ax,ax

c0017840 <SoundPort::getBufferUsed()>:
c0017840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017844:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017847:	c3                   	ret    

c0017848 <SoundPort::getBufferSize()>:
c0017848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001784c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001784f:	c3                   	ret    

c0017850 <SoundPort::buffer16(short*, int)>:
c0017850:	55                   	push   ebp
c0017851:	57                   	push   edi
c0017852:	56                   	push   esi
c0017853:	53                   	push   ebx
c0017854:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017858:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001785c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001785f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017862:	74 68                	je     c00178cc <SoundPort::buffer16(short*, int)+0x7c>
c0017864:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017868:	85 c9                	test   ecx,ecx
c001786a:	7e 60                	jle    c00178cc <SoundPort::buffer16(short*, int)+0x7c>
c001786c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017870:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017873:	c1 e1 0f             	shl    ecx,0xf
c0017876:	8d 70 01             	lea    esi,[eax+0x1]
c0017879:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001787c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001787f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017882:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017885:	74 4d                	je     c00178d4 <SoundPort::buffer16(short*, int)+0x84>
c0017887:	31 f6                	xor    esi,esi
c0017889:	eb 21                	jmp    c00178ac <SoundPort::buffer16(short*, int)+0x5c>
c001788b:	90                   	nop
c001788c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017891:	8d 79 01             	lea    edi,[ecx+0x1]
c0017894:	c1 e3 0f             	shl    ebx,0xf
c0017897:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001789a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001789d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00178a0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00178a3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00178a6:	74 1c                	je     c00178c4 <SoundPort::buffer16(short*, int)+0x74>
c00178a8:	89 c6                	mov    esi,eax
c00178aa:	66 90                	xchg   ax,ax
c00178ac:	8d 46 01             	lea    eax,[esi+0x1]
c00178af:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00178b3:	75 d7                	jne    c001788c <SoundPort::buffer16(short*, int)+0x3c>
c00178b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178b9:	8d 76 00             	lea    esi,[esi+0x0]
c00178bc:	5b                   	pop    ebx
c00178bd:	5e                   	pop    esi
c00178be:	5f                   	pop    edi
c00178bf:	5d                   	pop    ebp
c00178c0:	c3                   	ret    
c00178c1:	8d 76 00             	lea    esi,[esi+0x0]
c00178c4:	5b                   	pop    ebx
c00178c5:	8d 46 02             	lea    eax,[esi+0x2]
c00178c8:	5e                   	pop    esi
c00178c9:	5f                   	pop    edi
c00178ca:	5d                   	pop    ebp
c00178cb:	c3                   	ret    
c00178cc:	5b                   	pop    ebx
c00178cd:	31 c0                	xor    eax,eax
c00178cf:	5e                   	pop    esi
c00178d0:	5f                   	pop    edi
c00178d1:	5d                   	pop    ebp
c00178d2:	c3                   	ret    
c00178d3:	90                   	nop
c00178d4:	b8 01 00 00 00       	mov    eax,0x1
c00178d9:	eb e1                	jmp    c00178bc <SoundPort::buffer16(short*, int)+0x6c>
c00178db:	90                   	nop

c00178dc <SoundPort::buffer32(int*, int)>:
c00178dc:	55                   	push   ebp
c00178dd:	57                   	push   edi
c00178de:	56                   	push   esi
c00178df:	53                   	push   ebx
c00178e0:	51                   	push   ecx
c00178e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00178e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e9:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00178ec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00178f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00178f3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00178f6:	74 5c                	je     c0017954 <SoundPort::buffer32(int*, int)+0x78>
c00178f8:	85 c0                	test   eax,eax
c00178fa:	7e 58                	jle    c0017954 <SoundPort::buffer32(int*, int)+0x78>
c00178fc:	8d 71 01             	lea    esi,[ecx+0x1]
c00178ff:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017902:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017905:	8b 37                	mov    esi,DWORD PTR [edi]
c0017907:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001790a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001790d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017910:	74 4a                	je     c001795c <SoundPort::buffer32(int*, int)+0x80>
c0017912:	31 f6                	xor    esi,esi
c0017914:	eb 1e                	jmp    c0017934 <SoundPort::buffer32(int*, int)+0x58>
c0017916:	66 90                	xchg   ax,ax
c0017918:	8d 69 01             	lea    ebp,[ecx+0x1]
c001791b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001791e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017921:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017924:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017928:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001792b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001792e:	74 18                	je     c0017948 <SoundPort::buffer32(int*, int)+0x6c>
c0017930:	89 de                	mov    esi,ebx
c0017932:	66 90                	xchg   ax,ax
c0017934:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017937:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001793a:	75 dc                	jne    c0017918 <SoundPort::buffer32(int*, int)+0x3c>
c001793c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001793f:	90                   	nop
c0017940:	5a                   	pop    edx
c0017941:	5b                   	pop    ebx
c0017942:	5e                   	pop    esi
c0017943:	5f                   	pop    edi
c0017944:	5d                   	pop    ebp
c0017945:	c3                   	ret    
c0017946:	66 90                	xchg   ax,ax
c0017948:	5a                   	pop    edx
c0017949:	8d 46 02             	lea    eax,[esi+0x2]
c001794c:	5b                   	pop    ebx
c001794d:	5e                   	pop    esi
c001794e:	5f                   	pop    edi
c001794f:	5d                   	pop    ebp
c0017950:	c3                   	ret    
c0017951:	8d 76 00             	lea    esi,[esi+0x0]
c0017954:	5a                   	pop    edx
c0017955:	31 c0                	xor    eax,eax
c0017957:	5b                   	pop    ebx
c0017958:	5e                   	pop    esi
c0017959:	5f                   	pop    edi
c001795a:	5d                   	pop    ebp
c001795b:	c3                   	ret    
c001795c:	b8 01 00 00 00       	mov    eax,0x1
c0017961:	eb dd                	jmp    c0017940 <SoundPort::buffer32(int*, int)+0x64>
c0017963:	90                   	nop

c0017964 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017964:	57                   	push   edi
c0017965:	56                   	push   esi
c0017966:	53                   	push   ebx
c0017967:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001796b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001796f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017975:	39 03                	cmp    DWORD PTR [ebx],eax
c0017977:	74 13                	je     c001798c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017979:	83 ec 0c             	sub    esp,0xc
c001797c:	68 f8 e7 01 c0       	push   0xc001e7f8
c0017981:	e8 1b 7c ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0017986:	83 c4 10             	add    esp,0x10
c0017989:	8d 76 00             	lea    esi,[esi+0x0]
c001798c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017992:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017995:	74 11                	je     c00179a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017997:	83 ec 0c             	sub    esp,0xc
c001799a:	68 37 e8 01 c0       	push   0xc001e837
c001799f:	e8 fd 7b ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c00179a4:	83 c4 10             	add    esp,0x10
c00179a7:	90                   	nop
c00179a8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00179ae:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00179b1:	74 11                	je     c00179c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00179b3:	83 ec 0c             	sub    esp,0xc
c00179b6:	68 37 e8 01 c0       	push   0xc001e837
c00179bb:	e8 e1 7b ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c00179c0:	83 c4 10             	add    esp,0x10
c00179c3:	90                   	nop
c00179c4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00179c7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00179cb:	7e 07                	jle    c00179d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00179cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00179d1:	8d 76 00             	lea    esi,[esi+0x0]
c00179d4:	85 f6                	test   esi,esi
c00179d6:	7e 2c                	jle    c0017a04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00179d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179dc:	8d 3c 36             	lea    edi,[esi+esi*1]
c00179df:	31 c9                	xor    ecx,ecx
c00179e1:	01 d7                	add    edi,edx
c00179e3:	90                   	nop
c00179e4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00179e7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00179ea:	85 c0                	test   eax,eax
c00179ec:	79 06                	jns    c00179f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00179ee:	05 ff 7f 00 00       	add    eax,0x7fff
c00179f3:	90                   	nop
c00179f4:	c1 f8 0f             	sar    eax,0xf
c00179f7:	83 c1 04             	add    ecx,0x4
c00179fa:	66 01 02             	add    WORD PTR [edx],ax
c00179fd:	83 c2 02             	add    edx,0x2
c0017a00:	39 d7                	cmp    edi,edx
c0017a02:	75 e0                	jne    c00179e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017a04:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017a07:	50                   	push   eax
c0017a08:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017a0b:	29 f0                	sub    eax,esi
c0017a0d:	c1 e0 02             	shl    eax,0x2
c0017a10:	50                   	push   eax
c0017a11:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017a14:	50                   	push   eax
c0017a15:	52                   	push   edx
c0017a16:	e8 e5 89 fe ff       	call   c0000400 <memmove>
c0017a1b:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0017a1e:	83 c4 10             	add    esp,0x10
c0017a21:	89 f0                	mov    eax,esi
c0017a23:	5b                   	pop    ebx
c0017a24:	5e                   	pop    esi
c0017a25:	5f                   	pop    edi
c0017a26:	c3                   	ret    
c0017a27:	90                   	nop

c0017a28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017a28:	57                   	push   edi
c0017a29:	56                   	push   esi
c0017a2a:	53                   	push   ebx
c0017a2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017a2f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017a33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017a37:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017a3d:	39 06                	cmp    DWORD PTR [esi],eax
c0017a3f:	74 13                	je     c0017a54 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017a41:	83 ec 0c             	sub    esp,0xc
c0017a44:	68 18 e8 01 c0       	push   0xc001e818
c0017a49:	e8 53 7b ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0017a4e:	83 c4 10             	add    esp,0x10
c0017a51:	8d 76 00             	lea    esi,[esi+0x0]
c0017a54:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0017a5a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017a5d:	74 11                	je     c0017a70 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017a5f:	83 ec 0c             	sub    esp,0xc
c0017a62:	68 53 e8 01 c0       	push   0xc001e853
c0017a67:	e8 35 7b ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0017a6c:	83 c4 10             	add    esp,0x10
c0017a6f:	90                   	nop
c0017a70:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017a76:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017a79:	74 11                	je     c0017a8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0017a7b:	83 ec 0c             	sub    esp,0xc
c0017a7e:	68 53 e8 01 c0       	push   0xc001e853
c0017a83:	e8 19 7b ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0017a88:	83 c4 10             	add    esp,0x10
c0017a8b:	90                   	nop
c0017a8c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017a8f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017a93:	7e 07                	jle    c0017a9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017a95:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017a99:	8d 76 00             	lea    esi,[esi+0x0]
c0017a9c:	85 ff                	test   edi,edi
c0017a9e:	7e 1c                	jle    c0017abc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017aa0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017aa7:	31 c0                	xor    eax,eax
c0017aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0017aac:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017aaf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017ab2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017ab5:	83 c0 04             	add    eax,0x4
c0017ab8:	39 c1                	cmp    ecx,eax
c0017aba:	75 f0                	jne    c0017aac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017abc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017abf:	50                   	push   eax
c0017ac0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ac3:	29 f8                	sub    eax,edi
c0017ac5:	c1 e0 02             	shl    eax,0x2
c0017ac8:	50                   	push   eax
c0017ac9:	8d 04 ba             	lea    eax,[edx+edi*4]
c0017acc:	50                   	push   eax
c0017acd:	52                   	push   edx
c0017ace:	e8 2d 89 fe ff       	call   c0000400 <memmove>
c0017ad3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	89 f8                	mov    eax,edi
c0017adb:	5b                   	pop    ebx
c0017adc:	5e                   	pop    esi
c0017add:	5f                   	pop    edi
c0017ade:	c3                   	ret    
c0017adf:	90                   	nop

c0017ae0 <PCI::open(int, int, void*)>:
c0017ae0:	83 ec 18             	sub    esp,0x18
c0017ae3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ae7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017aeb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0017af1:	8b 10                	mov    edx,DWORD PTR [eax]
c0017af3:	50                   	push   eax
c0017af4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017af7:	31 c0                	xor    eax,eax
c0017af9:	83 c4 1c             	add    esp,0x1c
c0017afc:	c3                   	ret    
c0017afd:	90                   	nop

c0017afe <PCI::close(int, int, void*)>:
c0017afe:	31 c0                	xor    eax,eax
c0017b00:	c3                   	ret    
c0017b01:	90                   	nop

c0017b02 <PCI::PCI()>:
c0017b02:	83 ec 0c             	sub    esp,0xc
c0017b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b09:	83 ec 08             	sub    esp,0x8
c0017b0c:	68 6f e8 01 c0       	push   0xc001e86f
c0017b11:	50                   	push   eax
c0017b12:	e8 a5 2c ff ff       	call   c000a7bc <Bus::Bus(char const*)>
c0017b17:	83 c4 10             	add    esp,0x10
c0017b1a:	ba 18 e9 01 c0       	mov    edx,0xc001e918
c0017b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b23:	89 10                	mov    DWORD PTR [eax],edx
c0017b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b29:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0017b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b37:	a3 c0 34 02 c0       	mov    ds:0xc00234c0,eax
c0017b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b40:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017b46:	31 d2                	xor    edx,edx
c0017b48:	88 c2                	mov    dl,al
c0017b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b4e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0017b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b59:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017b5f:	31 d2                	xor    edx,edx
c0017b61:	88 c2                	mov    dl,al
c0017b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b67:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0017b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b70:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017b76:	8d 50 01             	lea    edx,[eax+0x1]
c0017b79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017b7d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0017b83:	31 d2                	xor    edx,edx
c0017b85:	88 c2                	mov    dl,al
c0017b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b8b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0017b8f:	83 c9 c0             	or     ecx,0xffffffc0
c0017b92:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0017b96:	90                   	nop
c0017b97:	83 c4 0c             	add    esp,0xc
c0017b9a:	c3                   	ret    
c0017b9b:	90                   	nop

c0017b9c <PCI::readBAR8(unsigned int, int)>:
c0017b9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ba0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ba4:	f6 c2 01             	test   dl,0x1
c0017ba7:	74 07                	je     c0017bb0 <PCI::readBAR8(unsigned int, int)+0x14>
c0017ba9:	83 e2 fc             	and    edx,0xfffffffc
c0017bac:	01 c2                	add    edx,eax
c0017bae:	ec                   	in     al,dx
c0017baf:	c3                   	ret    
c0017bb0:	83 e2 f0             	and    edx,0xfffffff0
c0017bb3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0017bb6:	c3                   	ret    
c0017bb7:	90                   	nop

c0017bb8 <PCI::readBAR16(unsigned int, int)>:
c0017bb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017bbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bc0:	f6 c2 01             	test   dl,0x1
c0017bc3:	74 08                	je     c0017bcd <PCI::readBAR16(unsigned int, int)+0x15>
c0017bc5:	83 e2 fc             	and    edx,0xfffffffc
c0017bc8:	01 c2                	add    edx,eax
c0017bca:	66 ed                	in     ax,dx
c0017bcc:	c3                   	ret    
c0017bcd:	83 e2 f0             	and    edx,0xfffffff0
c0017bd0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0017bd4:	c3                   	ret    
c0017bd5:	90                   	nop

c0017bd6 <PCI::readBAR32(unsigned int, int)>:
c0017bd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017bda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bde:	f6 c2 01             	test   dl,0x1
c0017be1:	74 07                	je     c0017bea <PCI::readBAR32(unsigned int, int)+0x14>
c0017be3:	83 e2 fc             	and    edx,0xfffffffc
c0017be6:	01 c2                	add    edx,eax
c0017be8:	ed                   	in     eax,dx
c0017be9:	c3                   	ret    
c0017bea:	83 e2 f0             	and    edx,0xfffffff0
c0017bed:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0017bf0:	c3                   	ret    
c0017bf1:	90                   	nop

c0017bf2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0017bf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017bf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bfa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017bfe:	f6 c2 01             	test   dl,0x1
c0017c01:	74 07                	je     c0017c0a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0017c03:	83 e2 fc             	and    edx,0xfffffffc
c0017c06:	01 ca                	add    edx,ecx
c0017c08:	ee                   	out    dx,al
c0017c09:	c3                   	ret    
c0017c0a:	83 e2 f0             	and    edx,0xfffffff0
c0017c0d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0017c10:	c3                   	ret    
c0017c11:	90                   	nop

c0017c12 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0017c12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017c1e:	f6 c2 01             	test   dl,0x1
c0017c21:	74 08                	je     c0017c2b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0017c23:	83 e2 fc             	and    edx,0xfffffffc
c0017c26:	01 ca                	add    edx,ecx
c0017c28:	66 ef                	out    dx,ax
c0017c2a:	c3                   	ret    
c0017c2b:	83 e2 f0             	and    edx,0xfffffff0
c0017c2e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0017c32:	c3                   	ret    
c0017c33:	90                   	nop

c0017c34 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0017c34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017c40:	f6 c2 01             	test   dl,0x1
c0017c43:	74 07                	je     c0017c4c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0017c45:	83 e2 fc             	and    edx,0xfffffffc
c0017c48:	01 ca                	add    edx,ecx
c0017c4a:	ef                   	out    dx,eax
c0017c4b:	c3                   	ret    
c0017c4c:	83 e2 f0             	and    edx,0xfffffff0
c0017c4f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0017c52:	c3                   	ret    
c0017c53:	90                   	nop

c0017c54 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017c54:	55                   	push   ebp
c0017c55:	57                   	push   edi
c0017c56:	56                   	push   esi
c0017c57:	53                   	push   ebx
c0017c58:	83 ec 0c             	sub    esp,0xc
c0017c5b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017c5f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0017c63:	89 f0                	mov    eax,esi
c0017c65:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0017c69:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0017c6d:	3c 07                	cmp    al,0x7
c0017c6f:	76 10                	jbe    c0017c81 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0017c71:	83 ec 0c             	sub    esp,0xc
c0017c74:	68 77 e8 01 c0       	push   0xc001e877
c0017c79:	e8 23 79 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	80 fb 0f             	cmp    bl,0xf
c0017c84:	76 10                	jbe    c0017c96 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0017c86:	83 ec 0c             	sub    esp,0xc
c0017c89:	68 a7 e8 01 c0       	push   0xc001e8a7
c0017c8e:	e8 0e 79 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0017c93:	83 c4 10             	add    esp,0x10
c0017c96:	8d 04 36             	lea    eax,[esi+esi*1]
c0017c99:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017c9e:	83 c8 f0             	or     eax,0xfffffff0
c0017ca1:	ee                   	out    dx,al
c0017ca2:	ba fa 0c 00 00       	mov    edx,0xcfa
c0017ca7:	89 e8                	mov    eax,ebp
c0017ca9:	ee                   	out    dx,al
c0017caa:	83 c4 0c             	add    esp,0xc
c0017cad:	89 d8                	mov    eax,ebx
c0017caf:	66 81 e7 fc 00       	and    di,0xfc
c0017cb4:	5b                   	pop    ebx
c0017cb5:	c1 e0 08             	shl    eax,0x8
c0017cb8:	5e                   	pop    esi
c0017cb9:	09 f8                	or     eax,edi
c0017cbb:	5f                   	pop    edi
c0017cbc:	66 0d 00 c0          	or     ax,0xc000
c0017cc0:	5d                   	pop    ebp
c0017cc1:	c3                   	ret    

c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017cc2:	57                   	push   edi
c0017cc3:	56                   	push   esi
c0017cc4:	53                   	push   ebx
c0017cc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017cc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ccd:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0017cd3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cd7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017cdb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017cdf:	83 ff 01             	cmp    edi,0x1
c0017ce2:	75 3e                	jne    c0017d22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0017ce4:	89 de                	mov    esi,ebx
c0017ce6:	0f b6 c0             	movzx  eax,al
c0017ce9:	81 e6 fc 00 00 00    	and    esi,0xfc
c0017cef:	c1 e0 10             	shl    eax,0x10
c0017cf2:	0f b6 c9             	movzx  ecx,cl
c0017cf5:	09 f0                	or     eax,esi
c0017cf7:	c1 e1 08             	shl    ecx,0x8
c0017cfa:	0f b6 d2             	movzx  edx,dl
c0017cfd:	09 c8                	or     eax,ecx
c0017cff:	c1 e2 0b             	shl    edx,0xb
c0017d02:	09 d0                	or     eax,edx
c0017d04:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017d09:	0d 00 00 00 80       	or     eax,0x80000000
c0017d0e:	ef                   	out    dx,eax
c0017d0f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017d14:	ed                   	in     eax,dx
c0017d15:	83 e3 02             	and    ebx,0x2
c0017d18:	0f b6 cb             	movzx  ecx,bl
c0017d1b:	c1 e1 03             	shl    ecx,0x3
c0017d1e:	d3 e8                	shr    eax,cl
c0017d20:	eb 43                	jmp    c0017d65 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017d22:	83 ff 02             	cmp    edi,0x2
c0017d25:	75 2c                	jne    c0017d53 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0017d27:	83 ec 0c             	sub    esp,0xc
c0017d2a:	0f b6 c9             	movzx  ecx,cl
c0017d2d:	0f b6 d2             	movzx  edx,dl
c0017d30:	0f b6 fb             	movzx  edi,bl
c0017d33:	0f b6 c0             	movzx  eax,al
c0017d36:	57                   	push   edi
c0017d37:	51                   	push   ecx
c0017d38:	52                   	push   edx
c0017d39:	50                   	push   eax
c0017d3a:	56                   	push   esi
c0017d3b:	e8 14 ff ff ff       	call   c0017c54 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d40:	89 c2                	mov    edx,eax
c0017d42:	ed                   	in     eax,dx
c0017d43:	83 e3 02             	and    ebx,0x2
c0017d46:	83 c4 20             	add    esp,0x20
c0017d49:	0f b6 cb             	movzx  ecx,bl
c0017d4c:	c1 e1 03             	shl    ecx,0x3
c0017d4f:	d3 e8                	shr    eax,cl
c0017d51:	eb 12                	jmp    c0017d65 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017d53:	83 ec 0c             	sub    esp,0xc
c0017d56:	68 d7 e8 01 c0       	push   0xc001e8d7
c0017d5b:	e8 41 78 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0017d60:	83 c4 10             	add    esp,0x10
c0017d63:	31 c0                	xor    eax,eax
c0017d65:	5b                   	pop    ebx
c0017d66:	5e                   	pop    esi
c0017d67:	5f                   	pop    edi
c0017d68:	c3                   	ret    
c0017d69:	90                   	nop

c0017d6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0017d6a:	83 ec 18             	sub    esp,0x18
c0017d6d:	6a 00                	push   0x0
c0017d6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d74:	50                   	push   eax
c0017d75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d7a:	50                   	push   eax
c0017d7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d80:	50                   	push   eax
c0017d81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d85:	e8 38 ff ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d8a:	83 c4 2c             	add    esp,0x2c
c0017d8d:	c3                   	ret    

c0017d8e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0017d8e:	83 ec 18             	sub    esp,0x18
c0017d91:	6a 0e                	push   0xe
c0017d93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d98:	50                   	push   eax
c0017d99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d9e:	50                   	push   eax
c0017d9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017da4:	50                   	push   eax
c0017da5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017da9:	e8 14 ff ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017dae:	83 c4 2c             	add    esp,0x2c
c0017db1:	0f b6 c0             	movzx  eax,al
c0017db4:	c3                   	ret    
c0017db5:	90                   	nop

c0017db6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0017db6:	55                   	push   ebp
c0017db7:	57                   	push   edi
c0017db8:	56                   	push   esi
c0017db9:	53                   	push   ebx
c0017dba:	83 ec 18             	sub    esp,0x18
c0017dbd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0017dc2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0017dc7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0017dcc:	6a 0a                	push   0xa
c0017dce:	56                   	push   esi
c0017dcf:	55                   	push   ebp
c0017dd0:	57                   	push   edi
c0017dd1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017dd5:	e8 e8 fe ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017dda:	83 c4 14             	add    esp,0x14
c0017ddd:	89 c3                	mov    ebx,eax
c0017ddf:	6a 0a                	push   0xa
c0017de1:	0f b6 db             	movzx  ebx,bl
c0017de4:	56                   	push   esi
c0017de5:	55                   	push   ebp
c0017de6:	57                   	push   edi
c0017de7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017deb:	e8 d2 fe ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017df0:	83 c4 2c             	add    esp,0x2c
c0017df3:	25 00 ff 00 00       	and    eax,0xff00
c0017df8:	09 d8                	or     eax,ebx
c0017dfa:	5b                   	pop    ebx
c0017dfb:	5e                   	pop    esi
c0017dfc:	5f                   	pop    edi
c0017dfd:	5d                   	pop    ebp
c0017dfe:	c3                   	ret    
c0017dff:	90                   	nop

c0017e00 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0017e00:	83 ec 18             	sub    esp,0x18
c0017e03:	6a 08                	push   0x8
c0017e05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e0a:	50                   	push   eax
c0017e0b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e10:	50                   	push   eax
c0017e11:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e16:	50                   	push   eax
c0017e17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e1b:	e8 a2 fe ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017e20:	83 c4 2c             	add    esp,0x2c
c0017e23:	0f b6 c4             	movzx  eax,ah
c0017e26:	c3                   	ret    
c0017e27:	90                   	nop

c0017e28 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0017e28:	83 ec 18             	sub    esp,0x18
c0017e2b:	6a 08                	push   0x8
c0017e2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e32:	50                   	push   eax
c0017e33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e38:	50                   	push   eax
c0017e39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e3e:	50                   	push   eax
c0017e3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e43:	e8 7a fe ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017e48:	83 c4 2c             	add    esp,0x2c
c0017e4b:	c3                   	ret    

c0017e4c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0017e4c:	83 ec 18             	sub    esp,0x18
c0017e4f:	6a 3c                	push   0x3c
c0017e51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e56:	50                   	push   eax
c0017e57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e5c:	50                   	push   eax
c0017e5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e62:	50                   	push   eax
c0017e63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e67:	e8 56 fe ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017e6c:	83 c4 2c             	add    esp,0x2c
c0017e6f:	c3                   	ret    

c0017e70 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0017e70:	83 ec 18             	sub    esp,0x18
c0017e73:	6a 18                	push   0x18
c0017e75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e7a:	50                   	push   eax
c0017e7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e80:	50                   	push   eax
c0017e81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017e86:	50                   	push   eax
c0017e87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e8b:	e8 32 fe ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017e90:	83 c4 2c             	add    esp,0x2c
c0017e93:	0f b6 c4             	movzx  eax,ah
c0017e96:	c3                   	ret    
c0017e97:	90                   	nop

c0017e98 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017e98:	55                   	push   ebp
c0017e99:	57                   	push   edi
c0017e9a:	56                   	push   esi
c0017e9b:	53                   	push   ebx
c0017e9c:	83 ec 28             	sub    esp,0x28
c0017e9f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0017ea3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0017ea8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0017ead:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0017eb2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0017eb9:	8d 43 12             	lea    eax,[ebx+0x12]
c0017ebc:	83 c3 10             	add    ebx,0x10
c0017ebf:	0f b6 c0             	movzx  eax,al
c0017ec2:	0f b6 db             	movzx  ebx,bl
c0017ec5:	50                   	push   eax
c0017ec6:	51                   	push   ecx
c0017ec7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0017ecb:	57                   	push   edi
c0017ecc:	55                   	push   ebp
c0017ecd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017ed1:	e8 ec fd ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017ed6:	83 c4 14             	add    esp,0x14
c0017ed9:	89 c6                	mov    esi,eax
c0017edb:	53                   	push   ebx
c0017edc:	c1 e6 10             	shl    esi,0x10
c0017edf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017ee3:	51                   	push   ecx
c0017ee4:	57                   	push   edi
c0017ee5:	55                   	push   ebp
c0017ee6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017eea:	e8 d3 fd ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017eef:	83 c4 3c             	add    esp,0x3c
c0017ef2:	0f b7 c0             	movzx  eax,ax
c0017ef5:	5b                   	pop    ebx
c0017ef6:	09 f0                	or     eax,esi
c0017ef8:	5e                   	pop    esi
c0017ef9:	5f                   	pop    edi
c0017efa:	5d                   	pop    ebp
c0017efb:	c3                   	ret    

c0017efc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0017efc:	55                   	push   ebp
c0017efd:	57                   	push   edi
c0017efe:	56                   	push   esi
c0017eff:	53                   	push   ebx
c0017f00:	83 ec 0c             	sub    esp,0xc
c0017f03:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017f07:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0017f0b:	89 f5                	mov    ebp,esi
c0017f0d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0017f13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f17:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017f1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017f23:	83 f9 01             	cmp    ecx,0x1
c0017f26:	75 5d                	jne    c0017f85 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0017f28:	0f b6 c8             	movzx  ecx,al
c0017f2b:	0f b6 d2             	movzx  edx,dl
c0017f2e:	c1 e1 10             	shl    ecx,0x10
c0017f31:	c1 e2 0b             	shl    edx,0xb
c0017f34:	89 f0                	mov    eax,esi
c0017f36:	25 fc 00 00 00       	and    eax,0xfc
c0017f3b:	09 c1                	or     ecx,eax
c0017f3d:	89 e8                	mov    eax,ebp
c0017f3f:	0f b6 c0             	movzx  eax,al
c0017f42:	c1 e0 08             	shl    eax,0x8
c0017f45:	09 c1                	or     ecx,eax
c0017f47:	09 d1                	or     ecx,edx
c0017f49:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017f4e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0017f54:	89 c8                	mov    eax,ecx
c0017f56:	ef                   	out    dx,eax
c0017f57:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017f5c:	ed                   	in     eax,dx
c0017f5d:	0f b7 db             	movzx  ebx,bx
c0017f60:	83 e6 02             	and    esi,0x2
c0017f63:	74 0a                	je     c0017f6f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0017f65:	0f b7 d0             	movzx  edx,ax
c0017f68:	c1 e3 10             	shl    ebx,0x10
c0017f6b:	09 d3                	or     ebx,edx
c0017f6d:	eb 05                	jmp    c0017f74 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0017f6f:	66 31 c0             	xor    ax,ax
c0017f72:	09 c3                	or     ebx,eax
c0017f74:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017f79:	89 c8                	mov    eax,ecx
c0017f7b:	ef                   	out    dx,eax
c0017f7c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017f81:	89 d8                	mov    eax,ebx
c0017f83:	eb 41                	jmp    c0017fc6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017f85:	83 f9 02             	cmp    ecx,0x2
c0017f88:	75 45                	jne    c0017fcf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0017f8a:	83 ec 0c             	sub    esp,0xc
c0017f8d:	0f b6 d2             	movzx  edx,dl
c0017f90:	89 f1                	mov    ecx,esi
c0017f92:	0f b6 c0             	movzx  eax,al
c0017f95:	0f b6 f1             	movzx  esi,cl
c0017f98:	89 e9                	mov    ecx,ebp
c0017f9a:	56                   	push   esi
c0017f9b:	0f b6 c9             	movzx  ecx,cl
c0017f9e:	51                   	push   ecx
c0017f9f:	52                   	push   edx
c0017fa0:	50                   	push   eax
c0017fa1:	57                   	push   edi
c0017fa2:	e8 ad fc ff ff       	call   c0017c54 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017fa7:	89 c2                	mov    edx,eax
c0017fa9:	ed                   	in     eax,dx
c0017faa:	83 c4 20             	add    esp,0x20
c0017fad:	0f b7 db             	movzx  ebx,bx
c0017fb0:	f6 c2 02             	test   dl,0x2
c0017fb3:	74 0c                	je     c0017fc1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0017fb5:	0f b7 c8             	movzx  ecx,ax
c0017fb8:	89 d8                	mov    eax,ebx
c0017fba:	c1 e0 10             	shl    eax,0x10
c0017fbd:	09 c8                	or     eax,ecx
c0017fbf:	eb 05                	jmp    c0017fc6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017fc1:	66 31 c0             	xor    ax,ax
c0017fc4:	09 d8                	or     eax,ebx
c0017fc6:	ef                   	out    dx,eax
c0017fc7:	83 c4 0c             	add    esp,0xc
c0017fca:	5b                   	pop    ebx
c0017fcb:	5e                   	pop    esi
c0017fcc:	5f                   	pop    edi
c0017fcd:	5d                   	pop    ebp
c0017fce:	c3                   	ret    
c0017fcf:	c7 44 24 20 d7 e8 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e8d7
c0017fd7:	83 c4 0c             	add    esp,0xc
c0017fda:	5b                   	pop    ebx
c0017fdb:	5e                   	pop    esi
c0017fdc:	5f                   	pop    edi
c0017fdd:	5d                   	pop    ebp
c0017fde:	e9 be 75 ff ff       	jmp    c000f5a1 <Krnl::panic(char const*)>
c0017fe3:	90                   	nop

c0017fe4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0017fe4:	55                   	push   ebp
c0017fe5:	57                   	push   edi
c0017fe6:	56                   	push   esi
c0017fe7:	53                   	push   ebx
c0017fe8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017fee:	80 3d cc 34 02 c0 00 	cmp    BYTE PTR ds:0xc00234cc,0x0
c0017ff5:	0f 85 84 00 00 00    	jne    c001807f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0017ffb:	83 ec 0c             	sub    esp,0xc
c0017ffe:	68 14 01 00 00       	push   0x114
c0018003:	e8 5d ec fe ff       	call   c0006c65 <malloc>
c0018008:	83 c4 0c             	add    esp,0xc
c001800b:	89 c3                	mov    ebx,eax
c001800d:	ff 35 10 2b 02 c0    	push   DWORD PTR ds:0xc0022b10
c0018013:	68 dd e8 01 c0       	push   0xc001e8dd
c0018018:	50                   	push   eax
c0018019:	e8 80 1f ff ff       	call   c0009f9e <File::File(char const*, Process*)>
c001801e:	5a                   	pop    edx
c001801f:	59                   	pop    ecx
c0018020:	6a 01                	push   0x1
c0018022:	53                   	push   ebx
c0018023:	e8 36 20 ff ff       	call   c000a05e <File::open(FileOpenMode)>
c0018028:	83 c4 0c             	add    esp,0xc
c001802b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001802f:	50                   	push   eax
c0018030:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018034:	50                   	push   eax
c0018035:	53                   	push   ebx
c0018036:	e8 cf 22 ff ff       	call   c000a30a <File::stat(unsigned long long*, bool*)>
c001803b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001803f:	40                   	inc    eax
c0018040:	89 04 24             	mov    DWORD PTR [esp],eax
c0018043:	e8 1d ec fe ff       	call   c0006c65 <malloc>
c0018048:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001804c:	a3 c8 34 02 c0       	mov    ds:0xc00234c8,eax
c0018051:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018055:	5e                   	pop    esi
c0018056:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018058:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001805c:	51                   	push   ecx
c001805d:	50                   	push   eax
c001805e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018062:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018066:	53                   	push   ebx
c0018067:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001806a:	83 c4 14             	add    esp,0x14
c001806d:	53                   	push   ebx
c001806e:	e8 49 20 ff ff       	call   c000a0bc <File::close()>
c0018073:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018077:	83 c4 10             	add    esp,0x10
c001807a:	a3 c4 34 02 c0       	mov    ds:0xc00234c4,eax
c001807f:	a1 c4 34 02 c0       	mov    eax,ds:0xc00234c4
c0018084:	8b 15 c8 34 02 c0    	mov    edx,DWORD PTR ds:0xc00234c8
c001808a:	89 04 24             	mov    DWORD PTR [esp],eax
c001808d:	31 ff                	xor    edi,edi
c001808f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018097:	31 f6                	xor    esi,esi
c0018099:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001809e:	31 db                	xor    ebx,ebx
c00180a0:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00180a8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00180ad:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00180b4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00180b8:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00180bf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00180c3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00180c6:	0f 8e 6b 01 00 00    	jle    c0018237 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00180cc:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00180cf:	d4 40                	aam    0x40
c00180d1:	d5 39                	aad    0x39
c00180d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00180d7:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00180db:	d4 40                	aam    0x40
c00180dd:	d5 39                	aad    0x39
c00180df:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00180e3:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00180e7:	d4 40                	aam    0x40
c00180e9:	d5 39                	aad    0x39
c00180eb:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00180ef:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00180f3:	d4 40                	aam    0x40
c00180f5:	d5 39                	aad    0x39
c00180f7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00180fb:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00180ff:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018103:	3c 56                	cmp    al,0x56
c0018105:	74 45                	je     c001814c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018107:	d4 40                	aam    0x40
c0018109:	d5 39                	aad    0x39
c001810b:	8d 48 d0             	lea    ecx,[eax-0x30]
c001810e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018112:	0f b6 c9             	movzx  ecx,cl
c0018115:	c1 e1 04             	shl    ecx,0x4
c0018118:	d4 40                	aam    0x40
c001811a:	d5 39                	aad    0x39
c001811c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001811f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018123:	0f b6 db             	movzx  ebx,bl
c0018126:	09 cb                	or     ebx,ecx
c0018128:	c1 e3 04             	shl    ebx,0x4
c001812b:	d4 40                	aam    0x40
c001812d:	d5 39                	aad    0x39
c001812f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018132:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018136:	0f b6 c9             	movzx  ecx,cl
c0018139:	09 cb                	or     ebx,ecx
c001813b:	c1 e3 04             	shl    ebx,0x4
c001813e:	89 d9                	mov    ecx,ebx
c0018140:	d4 40                	aam    0x40
c0018142:	d5 39                	aad    0x39
c0018144:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018147:	0f b6 db             	movzx  ebx,bl
c001814a:	09 cb                	or     ebx,ecx
c001814c:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018150:	80 f9 44             	cmp    cl,0x44
c0018153:	74 47                	je     c001819c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018155:	88 c8                	mov    al,cl
c0018157:	d4 40                	aam    0x40
c0018159:	d5 39                	aad    0x39
c001815b:	83 e8 30             	sub    eax,0x30
c001815e:	0f b6 e8             	movzx  ebp,al
c0018161:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018165:	c1 e5 04             	shl    ebp,0x4
c0018168:	d4 40                	aam    0x40
c001816a:	d5 39                	aad    0x39
c001816c:	83 e8 30             	sub    eax,0x30
c001816f:	0f b6 f0             	movzx  esi,al
c0018172:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018176:	09 ee                	or     esi,ebp
c0018178:	c1 e6 04             	shl    esi,0x4
c001817b:	d4 40                	aam    0x40
c001817d:	d5 39                	aad    0x39
c001817f:	83 e8 30             	sub    eax,0x30
c0018182:	0f b6 e8             	movzx  ebp,al
c0018185:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018189:	09 ee                	or     esi,ebp
c001818b:	c1 e6 04             	shl    esi,0x4
c001818e:	89 f5                	mov    ebp,esi
c0018190:	d4 40                	aam    0x40
c0018192:	d5 39                	aad    0x39
c0018194:	83 e8 30             	sub    eax,0x30
c0018197:	0f b6 f0             	movzx  esi,al
c001819a:	09 ee                	or     esi,ebp
c001819c:	83 c7 10             	add    edi,0x10
c001819f:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00181a3:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00181a6:	3c 0a                	cmp    al,0xa
c00181a8:	74 09                	je     c00181b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00181aa:	45                   	inc    ebp
c00181ab:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00181ae:	75 16                	jne    c00181c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c00181b0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00181b3:	3c 0a                	cmp    al,0xa
c00181b5:	0f 94 c0             	sete   al
c00181b8:	0f b6 c0             	movzx  eax,al
c00181bb:	01 c7                	add    edi,eax
c00181bd:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00181c2:	75 0c                	jne    c00181d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c00181c4:	eb 15                	jmp    c00181db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c00181c6:	47                   	inc    edi
c00181c7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00181ca:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00181ce:	eb d3                	jmp    c00181a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c00181d0:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00181d5:	0f 85 e8 fe ff ff    	jne    c00180c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00181db:	80 f9 44             	cmp    cl,0x44
c00181de:	74 0b                	je     c00181eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c00181e0:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00181e5:	0f 85 d8 fe ff ff    	jne    c00180c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00181eb:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00181ef:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00181f3:	c1 e1 04             	shl    ecx,0x4
c00181f6:	83 e8 30             	sub    eax,0x30
c00181f9:	09 c8                	or     eax,ecx
c00181fb:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00181ff:	0f 85 be fe ff ff    	jne    c00180c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018205:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018209:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001820d:	c1 e1 04             	shl    ecx,0x4
c0018210:	83 e8 30             	sub    eax,0x30
c0018213:	09 c8                	or     eax,ecx
c0018215:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018219:	0f 85 a4 fe ff ff    	jne    c00180c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001821f:	50                   	push   eax
c0018220:	50                   	push   eax
c0018221:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018225:	50                   	push   eax
c0018226:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001822d:	e8 ee 83 fe ff       	call   c0000620 <strcpy>
c0018232:	83 c4 10             	add    esp,0x10
c0018235:	eb 15                	jmp    c001824c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018237:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001823e:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018249:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001824c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018253:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018259:	5b                   	pop    ebx
c001825a:	5e                   	pop    esi
c001825b:	5f                   	pop    edi
c001825c:	5d                   	pop    ebp
c001825d:	c3                   	ret    

c001825e <PCI::checkBus(unsigned char)>:
c001825e:	56                   	push   esi
c001825f:	53                   	push   ebx
c0018260:	31 f6                	xor    esi,esi
c0018262:	51                   	push   ecx
c0018263:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018267:	0f b6 c3             	movzx  eax,bl
c001826a:	52                   	push   edx
c001826b:	56                   	push   esi
c001826c:	46                   	inc    esi
c001826d:	50                   	push   eax
c001826e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018272:	e8 f3 02 00 00       	call   c001856a <PCI::checkDevice(unsigned char, unsigned char)>
c0018277:	83 c4 10             	add    esp,0x10
c001827a:	83 fe 20             	cmp    esi,0x20
c001827d:	75 e8                	jne    c0018267 <PCI::checkBus(unsigned char)+0x9>
c001827f:	58                   	pop    eax
c0018280:	5b                   	pop    ebx
c0018281:	5e                   	pop    esi
c0018282:	c3                   	ret    
c0018283:	90                   	nop

c0018284 <PCI::foundDevice(PCIDeviceInfo)>:
c0018284:	55                   	push   ebp
c0018285:	57                   	push   edi
c0018286:	56                   	push   esi
c0018287:	53                   	push   ebx
c0018288:	83 ec 1c             	sub    esp,0x1c
c001828b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001828f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018295:	0f 84 52 01 00 00    	je     c00183ed <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001829b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001829f:	66 81 f9 06 04       	cmp    cx,0x406
c00182a4:	75 2c                	jne    c00182d2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00182a6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00182ab:	50                   	push   eax
c00182ac:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00182b1:	50                   	push   eax
c00182b2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00182b7:	50                   	push   eax
c00182b8:	56                   	push   esi
c00182b9:	e8 b2 fb ff ff       	call   c0017e70 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00182be:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00182c2:	0f b6 c0             	movzx  eax,al
c00182c5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00182c9:	83 c4 2c             	add    esp,0x2c
c00182cc:	5b                   	pop    ebx
c00182cd:	5e                   	pop    esi
c00182ce:	5f                   	pop    edi
c00182cf:	5d                   	pop    ebp
c00182d0:	eb 8c                	jmp    c001825e <PCI::checkBus(unsigned char)>
c00182d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00182d6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00182dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00182e0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00182e4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00182e8:	88 d3                	mov    bl,dl
c00182ea:	85 c0                	test   eax,eax
c00182ec:	74 33                	je     c0018321 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00182ee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00182f1:	85 d2                	test   edx,edx
c00182f3:	74 28                	je     c001831d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00182f5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00182fb:	31 ef                	xor    edi,ebp
c00182fd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018303:	75 18                	jne    c001831d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018305:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018309:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001830f:	75 0c                	jne    c001831d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018311:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018317:	0f 84 d0 00 00 00    	je     c00183ed <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001831d:	8b 00                	mov    eax,DWORD PTR [eax]
c001831f:	eb c9                	jmp    c00182ea <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018321:	66 81 f9 01 06       	cmp    cx,0x601
c0018326:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001832a:	75 19                	jne    c0018345 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001832c:	83 ec 0c             	sub    esp,0xc
c001832f:	68 64 01 00 00       	push   0x164
c0018334:	e8 2c e9 fe ff       	call   c0006c65 <malloc>
c0018339:	89 c5                	mov    ebp,eax
c001833b:	89 04 24             	mov    DWORD PTR [esp],eax
c001833e:	e8 47 0e 00 00       	call   c001918a <SATABus::SATABus()>
c0018343:	eb 1e                	jmp    c0018363 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018345:	66 81 f9 01 01       	cmp    cx,0x101
c001834a:	75 60                	jne    c00183ac <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001834c:	83 ec 0c             	sub    esp,0xc
c001834f:	68 70 02 00 00       	push   0x270
c0018354:	e8 0c e9 fe ff       	call   c0006c65 <malloc>
c0018359:	89 c5                	mov    ebp,eax
c001835b:	89 04 24             	mov    DWORD PTR [esp],eax
c001835e:	e8 cb 02 00 00       	call   c001862e <IDE::IDE()>
c0018363:	58                   	pop    eax
c0018364:	5a                   	pop    edx
c0018365:	55                   	push   ebp
c0018366:	56                   	push   esi
c0018367:	e8 fc 2a ff ff       	call   c000ae68 <Device::addChild(Device*)>
c001836c:	83 ec 1c             	sub    esp,0x1c
c001836f:	b9 09 00 00 00       	mov    ecx,0x9
c0018374:	fc                   	cld    
c0018375:	89 e7                	mov    edi,esp
c0018377:	89 de                	mov    esi,ebx
c0018379:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001837b:	55                   	push   ebp
c001837c:	e8 2d 2a ff ff       	call   c000adae <Device::preOpenPCI(PCIDeviceInfo)>
c0018381:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018384:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018388:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018390:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018398:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00183a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00183a3:	83 c4 4c             	add    esp,0x4c
c00183a6:	5b                   	pop    ebx
c00183a7:	5e                   	pop    esi
c00183a8:	5f                   	pop    edi
c00183a9:	5d                   	pop    ebp
c00183aa:	ff e0                	jmp    eax
c00183ac:	83 ec 0c             	sub    esp,0xc
c00183af:	68 58 01 00 00       	push   0x158
c00183b4:	e8 ac e8 fe ff       	call   c0006c65 <malloc>
c00183b9:	89 c5                	mov    ebp,eax
c00183bb:	58                   	pop    eax
c00183bc:	5a                   	pop    edx
c00183bd:	68 f6 e8 01 c0       	push   0xc001e8f6
c00183c2:	55                   	push   ebp
c00183c3:	e8 3e 2d ff ff       	call   c000b106 <DriverlessDevice::DriverlessDevice(char const*)>
c00183c8:	59                   	pop    ecx
c00183c9:	5f                   	pop    edi
c00183ca:	55                   	push   ebp
c00183cb:	56                   	push   esi
c00183cc:	e8 97 2a ff ff       	call   c000ae68 <Device::addChild(Device*)>
c00183d1:	b9 09 00 00 00       	mov    ecx,0x9
c00183d6:	fc                   	cld    
c00183d7:	89 df                	mov    edi,ebx
c00183d9:	89 de                	mov    esi,ebx
c00183db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00183dd:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00183e1:	83 c4 2c             	add    esp,0x2c
c00183e4:	5b                   	pop    ebx
c00183e5:	5e                   	pop    esi
c00183e6:	5f                   	pop    edi
c00183e7:	5d                   	pop    ebp
c00183e8:	e9 c1 29 ff ff       	jmp    c000adae <Device::preOpenPCI(PCIDeviceInfo)>
c00183ed:	83 c4 1c             	add    esp,0x1c
c00183f0:	5b                   	pop    ebx
c00183f1:	5e                   	pop    esi
c00183f2:	5f                   	pop    edi
c00183f3:	5d                   	pop    ebp
c00183f4:	c3                   	ret    
c00183f5:	90                   	nop

c00183f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00183f6:	55                   	push   ebp
c00183f7:	57                   	push   edi
c00183f8:	56                   	push   esi
c00183f9:	53                   	push   ebx
c00183fa:	83 ec 68             	sub    esp,0x68
c00183fd:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018401:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018408:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001840c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018413:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018418:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001841c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018423:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018428:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001842c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018431:	6a 0c                	push   0xc
c0018433:	57                   	push   edi
c0018434:	53                   	push   ebx
c0018435:	56                   	push   esi
c0018436:	55                   	push   ebp
c0018437:	e8 86 f8 ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001843c:	83 c4 20             	add    esp,0x20
c001843f:	57                   	push   edi
c0018440:	53                   	push   ebx
c0018441:	56                   	push   esi
c0018442:	55                   	push   ebp
c0018443:	e8 6e f9 ff ff       	call   c0017db6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018448:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001844d:	57                   	push   edi
c001844e:	53                   	push   ebx
c001844f:	56                   	push   esi
c0018450:	55                   	push   ebp
c0018451:	e8 f6 f9 ff ff       	call   c0017e4c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018456:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001845a:	83 c4 14             	add    esp,0x14
c001845d:	6a 3c                	push   0x3c
c001845f:	57                   	push   edi
c0018460:	53                   	push   ebx
c0018461:	56                   	push   esi
c0018462:	55                   	push   ebp
c0018463:	e8 5a f8 ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018468:	0f b6 c4             	movzx  eax,ah
c001846b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001846f:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018473:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018477:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c001847c:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [eax+0x1e4]
c0018482:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018488:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001848c:	83 c4 20             	add    esp,0x20
c001848f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018494:	74 30                	je     c00184c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018496:	31 c0                	xor    eax,eax
c0018498:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001849c:	7e 28                	jle    c00184c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001849e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c00184a6:	39 cb                	cmp    ebx,ecx
c00184a8:	75 19                	jne    c00184c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00184aa:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c00184b2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00184b6:	75 0b                	jne    c00184c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00184b8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c00184bf:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c00184c3:	40                   	inc    eax
c00184c4:	eb d2                	jmp    c0018498 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c00184c6:	31 d2                	xor    edx,edx
c00184c8:	83 ec 0c             	sub    esp,0xc
c00184cb:	57                   	push   edi
c00184cc:	53                   	push   ebx
c00184cd:	56                   	push   esi
c00184ce:	52                   	push   edx
c00184cf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00184d3:	55                   	push   ebp
c00184d4:	e8 bf f9 ff ff       	call   c0017e98 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00184d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00184dd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00184e1:	42                   	inc    edx
c00184e2:	83 c4 20             	add    esp,0x20
c00184e5:	83 fa 06             	cmp    edx,0x6
c00184e8:	75 de                	jne    c00184c8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c00184ea:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00184ef:	83 ec 0c             	sub    esp,0xc
c00184f2:	86 e0                	xchg   al,ah
c00184f4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00184f9:	6a 02                	push   0x2
c00184fb:	57                   	push   edi
c00184fc:	53                   	push   ebx
c00184fd:	56                   	push   esi
c00184fe:	55                   	push   ebp
c00184ff:	e8 be f7 ff ff       	call   c0017cc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018504:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018509:	83 c4 20             	add    esp,0x20
c001850c:	57                   	push   edi
c001850d:	53                   	push   ebx
c001850e:	56                   	push   esi
c001850f:	55                   	push   ebp
c0018510:	e8 eb f8 ff ff       	call   c0017e00 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018515:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018519:	57                   	push   edi
c001851a:	53                   	push   ebx
c001851b:	56                   	push   esi
c001851c:	55                   	push   ebp
c001851d:	e8 48 f8 ff ff       	call   c0017d6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018522:	b9 09 00 00 00       	mov    ecx,0x9
c0018527:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001852c:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018530:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018534:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018538:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001853c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018540:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018544:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018548:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001854c:	83 ec 0c             	sub    esp,0xc
c001854f:	fc                   	cld    
c0018550:	89 e7                	mov    edi,esp
c0018552:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018556:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018558:	55                   	push   ebp
c0018559:	e8 26 fd ff ff       	call   c0018284 <PCI::foundDevice(PCIDeviceInfo)>
c001855e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018564:	5b                   	pop    ebx
c0018565:	5e                   	pop    esi
c0018566:	5f                   	pop    edi
c0018567:	5d                   	pop    ebp
c0018568:	c3                   	ret    
c0018569:	90                   	nop

c001856a <PCI::checkDevice(unsigned char, unsigned char)>:
c001856a:	55                   	push   ebp
c001856b:	57                   	push   edi
c001856c:	56                   	push   esi
c001856d:	53                   	push   ebx
c001856e:	83 ec 0c             	sub    esp,0xc
c0018571:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018575:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001857a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001857f:	6a 00                	push   0x0
c0018581:	56                   	push   esi
c0018582:	57                   	push   edi
c0018583:	55                   	push   ebp
c0018584:	e8 e1 f7 ff ff       	call   c0017d6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018589:	6a 00                	push   0x0
c001858b:	56                   	push   esi
c001858c:	57                   	push   edi
c001858d:	55                   	push   ebp
c001858e:	e8 63 fe ff ff       	call   c00183f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018593:	83 c4 20             	add    esp,0x20
c0018596:	6a 00                	push   0x0
c0018598:	56                   	push   esi
c0018599:	57                   	push   edi
c001859a:	55                   	push   ebp
c001859b:	e8 ee f7 ff ff       	call   c0017d8e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00185a0:	83 c4 10             	add    esp,0x10
c00185a3:	84 c0                	test   al,al
c00185a5:	79 27                	jns    c00185ce <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00185a7:	bb 01 00 00 00       	mov    ebx,0x1
c00185ac:	53                   	push   ebx
c00185ad:	56                   	push   esi
c00185ae:	57                   	push   edi
c00185af:	55                   	push   ebp
c00185b0:	e8 b5 f7 ff ff       	call   c0017d6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00185b5:	83 c4 10             	add    esp,0x10
c00185b8:	66 40                	inc    ax
c00185ba:	74 0c                	je     c00185c8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00185bc:	53                   	push   ebx
c00185bd:	56                   	push   esi
c00185be:	57                   	push   edi
c00185bf:	55                   	push   ebp
c00185c0:	e8 31 fe ff ff       	call   c00183f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00185c5:	83 c4 10             	add    esp,0x10
c00185c8:	43                   	inc    ebx
c00185c9:	83 fb 08             	cmp    ebx,0x8
c00185cc:	75 de                	jne    c00185ac <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00185ce:	83 c4 0c             	add    esp,0xc
c00185d1:	5b                   	pop    ebx
c00185d2:	5e                   	pop    esi
c00185d3:	5f                   	pop    edi
c00185d4:	5d                   	pop    ebp
c00185d5:	c3                   	ret    

c00185d6 <PCI::detect()>:
c00185d6:	56                   	push   esi
c00185d7:	53                   	push   ebx
c00185d8:	53                   	push   ebx
c00185d9:	31 db                	xor    ebx,ebx
c00185db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00185df:	6a 00                	push   0x0
c00185e1:	6a 00                	push   0x0
c00185e3:	6a 00                	push   0x0
c00185e5:	56                   	push   esi
c00185e6:	e8 a3 f7 ff ff       	call   c0017d8e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00185eb:	83 c4 10             	add    esp,0x10
c00185ee:	a8 80                	test   al,0x80
c00185f0:	75 21                	jne    c0018613 <PCI::detect()+0x3d>
c00185f2:	51                   	push   ecx
c00185f3:	51                   	push   ecx
c00185f4:	6a 00                	push   0x0
c00185f6:	56                   	push   esi
c00185f7:	e8 62 fc ff ff       	call   c001825e <PCI::checkBus(unsigned char)>
c00185fc:	83 c4 10             	add    esp,0x10
c00185ff:	eb 24                	jmp    c0018625 <PCI::detect()+0x4f>
c0018601:	52                   	push   edx
c0018602:	52                   	push   edx
c0018603:	53                   	push   ebx
c0018604:	43                   	inc    ebx
c0018605:	56                   	push   esi
c0018606:	e8 53 fc ff ff       	call   c001825e <PCI::checkBus(unsigned char)>
c001860b:	83 c4 10             	add    esp,0x10
c001860e:	83 fb 08             	cmp    ebx,0x8
c0018611:	74 12                	je     c0018625 <PCI::detect()+0x4f>
c0018613:	53                   	push   ebx
c0018614:	6a 00                	push   0x0
c0018616:	6a 00                	push   0x0
c0018618:	56                   	push   esi
c0018619:	e8 4c f7 ff ff       	call   c0017d6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001861e:	83 c4 10             	add    esp,0x10
c0018621:	66 40                	inc    ax
c0018623:	74 dc                	je     c0018601 <PCI::detect()+0x2b>
c0018625:	58                   	pop    eax
c0018626:	5b                   	pop    ebx
c0018627:	5e                   	pop    esi
c0018628:	c3                   	ret    
c0018629:	90                   	nop

c001862a <IDE::close(int, int, void*)>:
c001862a:	83 c8 ff             	or     eax,0xffffffff
c001862d:	c3                   	ret    

c001862e <IDE::IDE()>:
c001862e:	83 ec 0c             	sub    esp,0xc
c0018631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018635:	83 ec 08             	sub    esp,0x8
c0018638:	68 3c e9 01 c0       	push   0xc001e93c
c001863d:	50                   	push   eax
c001863e:	e8 69 2b ff ff       	call   c000b1ac <HardDiskController::HardDiskController(char const*)>
c0018643:	83 c4 10             	add    esp,0x10
c0018646:	ba cc e9 01 c0       	mov    edx,0xc001e9cc
c001864b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001864f:	89 10                	mov    DWORD PTR [eax],edx
c0018651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018655:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001865c:	90                   	nop
c001865d:	83 c4 0c             	add    esp,0xc
c0018660:	c3                   	ret    
c0018661:	90                   	nop

c0018662 <IDE::prepareInterrupt(unsigned char)>:
c0018662:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018667:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001866b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018673:	c3                   	ret    

c0018674 <selectDrive(unsigned char, unsigned char)>:
c0018674:	c3                   	ret    
c0018675:	90                   	nop

c0018676 <IDE::getBase(unsigned char)>:
c0018676:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001867b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001867f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018687:	c3                   	ret    

c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018688:	55                   	push   ebp
c0018689:	57                   	push   edi
c001868a:	56                   	push   esi
c001868b:	53                   	push   ebx
c001868c:	83 ec 1c             	sub    esp,0x1c
c001868f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018693:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018697:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001869a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001869e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00186a2:	80 f9 03             	cmp    cl,0x3
c00186a5:	77 51                	ja     c00186f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00186a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00186ab:	0f b6 f2             	movzx  esi,dl
c00186ae:	0f b6 db             	movzx  ebx,bl
c00186b1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00186b4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00186b8:	83 ca 80             	or     edx,0xffffff80
c00186bb:	0f b6 d2             	movzx  edx,dl
c00186be:	52                   	push   edx
c00186bf:	6a 0c                	push   0xc
c00186c1:	56                   	push   esi
c00186c2:	57                   	push   edi
c00186c3:	e8 c0 ff ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00186c8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00186cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00186d1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00186d5:	ee                   	out    dx,al
c00186d6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00186db:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00186df:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00186e3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00186e7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00186ef:	83 c4 2c             	add    esp,0x2c
c00186f2:	5b                   	pop    ebx
c00186f3:	5e                   	pop    esi
c00186f4:	5f                   	pop    edi
c00186f5:	5d                   	pop    ebp
c00186f6:	eb 90                	jmp    c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00186f8:	80 fb 07             	cmp    bl,0x7
c00186fb:	77 12                	ja     c001870f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00186fd:	0f b6 d2             	movzx  edx,dl
c0018700:	0f b6 db             	movzx  ebx,bl
c0018703:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001870b:	89 da                	mov    edx,ebx
c001870d:	eb 2f                	jmp    c001873e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001870f:	80 fb 0d             	cmp    bl,0xd
c0018712:	77 13                	ja     c0018727 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018714:	0f b6 d2             	movzx  edx,dl
c0018717:	0f b6 db             	movzx  ebx,bl
c001871a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018721:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018725:	eb 17                	jmp    c001873e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018727:	80 fb 15             	cmp    bl,0x15
c001872a:	77 13                	ja     c001873f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001872c:	0f b6 d2             	movzx  edx,dl
c001872f:	0f b6 db             	movzx  ebx,bl
c0018732:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001873a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001873e:	ee                   	out    dx,al
c001873f:	83 c4 1c             	add    esp,0x1c
c0018742:	5b                   	pop    ebx
c0018743:	5e                   	pop    esi
c0018744:	5f                   	pop    edi
c0018745:	5d                   	pop    ebp
c0018746:	c3                   	ret    
c0018747:	90                   	nop

c0018748 <IDE::read(unsigned char, unsigned char)>:
c0018748:	55                   	push   ebp
c0018749:	57                   	push   edi
c001874a:	56                   	push   esi
c001874b:	53                   	push   ebx
c001874c:	83 ec 1c             	sub    esp,0x1c
c001874f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018753:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018757:	8d 43 f8             	lea    eax,[ebx-0x8]
c001875a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001875e:	3c 03                	cmp    al,0x3
c0018760:	77 43                	ja     c00187a5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0018762:	0f b6 f2             	movzx  esi,dl
c0018765:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018768:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001876c:	83 c8 80             	or     eax,0xffffff80
c001876f:	0f b6 c0             	movzx  eax,al
c0018772:	50                   	push   eax
c0018773:	6a 0c                	push   0xc
c0018775:	56                   	push   esi
c0018776:	57                   	push   edi
c0018777:	e8 0c ff ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001877c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018781:	0f b6 c3             	movzx  eax,bl
c0018784:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018788:	ec                   	in     al,dx
c0018789:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001878d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018792:	52                   	push   edx
c0018793:	6a 0c                	push   0xc
c0018795:	56                   	push   esi
c0018796:	57                   	push   edi
c0018797:	e8 ec fe ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001879c:	83 c4 20             	add    esp,0x20
c001879f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00187a3:	eb 49                	jmp    c00187ee <IDE::read(unsigned char, unsigned char)+0xa6>
c00187a5:	80 fb 07             	cmp    bl,0x7
c00187a8:	77 12                	ja     c00187bc <IDE::read(unsigned char, unsigned char)+0x74>
c00187aa:	0f b6 d2             	movzx  edx,dl
c00187ad:	0f b6 c3             	movzx  eax,bl
c00187b0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00187b8:	89 c2                	mov    edx,eax
c00187ba:	eb 31                	jmp    c00187ed <IDE::read(unsigned char, unsigned char)+0xa5>
c00187bc:	80 fb 0d             	cmp    bl,0xd
c00187bf:	77 13                	ja     c00187d4 <IDE::read(unsigned char, unsigned char)+0x8c>
c00187c1:	0f b6 d2             	movzx  edx,dl
c00187c4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00187cb:	0f b6 d3             	movzx  edx,bl
c00187ce:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00187d2:	eb 19                	jmp    c00187ed <IDE::read(unsigned char, unsigned char)+0xa5>
c00187d4:	31 c0                	xor    eax,eax
c00187d6:	80 fb 15             	cmp    bl,0x15
c00187d9:	77 13                	ja     c00187ee <IDE::read(unsigned char, unsigned char)+0xa6>
c00187db:	0f b6 d2             	movzx  edx,dl
c00187de:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00187e6:	0f b6 d3             	movzx  edx,bl
c00187e9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00187ed:	ec                   	in     al,dx
c00187ee:	83 c4 1c             	add    esp,0x1c
c00187f1:	5b                   	pop    ebx
c00187f2:	5e                   	pop    esi
c00187f3:	5f                   	pop    edi
c00187f4:	5d                   	pop    ebp
c00187f5:	c3                   	ret    

c00187f6 <IDE::waitInterrupt(unsigned char)>:
c00187f6:	57                   	push   edi
c00187f7:	56                   	push   esi
c00187f8:	31 f6                	xor    esi,esi
c00187fa:	53                   	push   ebx
c00187fb:	83 ec 10             	sub    esp,0x10
c00187fe:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018802:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018806:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001880a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001880f:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018816:	84 db                	test   bl,bl
c0018818:	75 33                	jne    c001884d <IDE::waitInterrupt(unsigned char)+0x57>
c001881a:	52                   	push   edx
c001881b:	6a 0c                	push   0xc
c001881d:	50                   	push   eax
c001881e:	57                   	push   edi
c001881f:	e8 24 ff ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018824:	83 c4 10             	add    esp,0x10
c0018827:	a8 01                	test   al,0x1
c0018829:	75 2a                	jne    c0018855 <IDE::waitInterrupt(unsigned char)+0x5f>
c001882b:	f7 c6 04 00 00 00    	test   esi,0x4
c0018831:	75 12                	jne    c0018845 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018833:	83 fe 32             	cmp    esi,0x32
c0018836:	7e 0d                	jle    c0018845 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018838:	83 ec 0c             	sub    esp,0xc
c001883b:	6a 64                	push   0x64
c001883d:	e8 3e a5 ff ff       	call   c0012d80 <milliTenthSleep(unsigned int)>
c0018842:	83 c4 10             	add    esp,0x10
c0018845:	83 fe 3c             	cmp    esi,0x3c
c0018848:	74 0b                	je     c0018855 <IDE::waitInterrupt(unsigned char)+0x5f>
c001884a:	46                   	inc    esi
c001884b:	eb bd                	jmp    c001880a <IDE::waitInterrupt(unsigned char)+0x14>
c001884d:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018855:	83 c4 10             	add    esp,0x10
c0018858:	88 d8                	mov    al,bl
c001885a:	5b                   	pop    ebx
c001885b:	5e                   	pop    esi
c001885c:	5f                   	pop    edi
c001885d:	c3                   	ret    

c001885e <ideChannel0IRQHandler(regs*, void*)>:
c001885e:	83 ec 10             	sub    esp,0x10
c0018861:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018865:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001886c:	6a 07                	push   0x7
c001886e:	6a 00                	push   0x0
c0018870:	50                   	push   eax
c0018871:	e8 d2 fe ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018876:	83 c4 1c             	add    esp,0x1c
c0018879:	c3                   	ret    

c001887a <ideChannel1IRQHandler(regs*, void*)>:
c001887a:	83 ec 10             	sub    esp,0x10
c001887d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018881:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018888:	6a 07                	push   0x7
c001888a:	6a 01                	push   0x1
c001888c:	50                   	push   eax
c001888d:	e8 b6 fe ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018892:	83 c4 1c             	add    esp,0x1c
c0018895:	c3                   	ret    

c0018896 <IDE::enableIRQs(unsigned char, bool)>:
c0018896:	57                   	push   edi
c0018897:	56                   	push   esi
c0018898:	be 04 00 00 00       	mov    esi,0x4
c001889d:	53                   	push   ebx
c001889e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00188a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00188a7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00188ac:	0f 94 c0             	sete   al
c00188af:	01 c0                	add    eax,eax
c00188b1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00188b8:	0f b6 c0             	movzx  eax,al
c00188bb:	50                   	push   eax
c00188bc:	6a 0c                	push   0xc
c00188be:	57                   	push   edi
c00188bf:	53                   	push   ebx
c00188c0:	e8 c3 fd ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00188c5:	83 c4 10             	add    esp,0x10
c00188c8:	50                   	push   eax
c00188c9:	6a 0c                	push   0xc
c00188cb:	57                   	push   edi
c00188cc:	53                   	push   ebx
c00188cd:	e8 76 fe ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c00188d2:	83 c4 10             	add    esp,0x10
c00188d5:	4e                   	dec    esi
c00188d6:	75 f0                	jne    c00188c8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00188d8:	5b                   	pop    ebx
c00188d9:	5e                   	pop    esi
c00188da:	5f                   	pop    edi
c00188db:	c3                   	ret    

c00188dc <IDE::open(int, int, void*)>:
c00188dc:	55                   	push   ebp
c00188dd:	57                   	push   edi
c00188de:	56                   	push   esi
c00188df:	53                   	push   ebx
c00188e0:	83 ec 1c             	sub    esp,0x1c
c00188e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00188e7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00188f0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00188f9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018900:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018907:	0f 85 b0 02 00 00    	jne    c0018bbd <IDE::open(int, int, void*)+0x2e1>
c001890d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018913:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018917:	83 e0 7f             	and    eax,0x7f
c001891a:	3c 05                	cmp    al,0x5
c001891c:	74 04                	je     c0018922 <IDE::open(int, int, void*)+0x46>
c001891e:	3c 0f                	cmp    al,0xf
c0018920:	75 32                	jne    c0018954 <IDE::open(int, int, void*)+0x78>
c0018922:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018928:	83 e0 fc             	and    eax,0xfffffffc
c001892b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018932:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018938:	83 e0 fc             	and    eax,0xfffffffc
c001893b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018942:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018948:	83 e0 fc             	and    eax,0xfffffffc
c001894b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018952:	eb 14                	jmp    c0018968 <IDE::open(int, int, void*)+0x8c>
c0018954:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001895e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018968:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001896f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001897a:	89 c6                	mov    esi,eax
c001897c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018981:	c1 e6 10             	shl    esi,0x10
c0018984:	89 e8                	mov    eax,ebp
c0018986:	89 fa                	mov    edx,edi
c0018988:	c1 e0 0b             	shl    eax,0xb
c001898b:	09 f0                	or     eax,esi
c001898d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018994:	c1 e6 08             	shl    esi,0x8
c0018997:	09 c6                	or     esi,eax
c0018999:	89 f0                	mov    eax,esi
c001899b:	0d 08 00 00 80       	or     eax,0x80000008
c00189a0:	ef                   	out    dx,eax
c00189a1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00189a6:	89 ca                	mov    edx,ecx
c00189a8:	ed                   	in     eax,dx
c00189a9:	c1 e8 10             	shr    eax,0x10
c00189ac:	3d ff ff 00 00       	cmp    eax,0xffff
c00189b1:	0f 84 f5 00 00 00    	je     c0018aac <IDE::open(int, int, void*)+0x1d0>
c00189b7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00189bd:	89 fa                	mov    edx,edi
c00189bf:	89 f0                	mov    eax,esi
c00189c1:	ef                   	out    dx,eax
c00189c2:	b0 fe                	mov    al,0xfe
c00189c4:	89 ca                	mov    edx,ecx
c00189c6:	ee                   	out    dx,al
c00189c7:	89 f0                	mov    eax,esi
c00189c9:	89 fa                	mov    edx,edi
c00189cb:	ef                   	out    dx,eax
c00189cc:	89 ca                	mov    edx,ecx
c00189ce:	ed                   	in     eax,dx
c00189cf:	3c fe                	cmp    al,0xfe
c00189d1:	0f 85 a9 00 00 00    	jne    c0018a80 <IDE::open(int, int, void*)+0x1a4>
c00189d7:	8b 15 08 f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f608
c00189dd:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00189e4:	74 33                	je     c0018a19 <IDE::open(int, int, void*)+0x13d>
c00189e6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00189ec:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00189f0:	40                   	inc    eax
c00189f1:	83 ec 0c             	sub    esp,0xc
c00189f4:	0f b6 c0             	movzx  eax,al
c00189f7:	50                   	push   eax
c00189f8:	55                   	push   ebp
c00189f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00189fd:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0018a03:	51                   	push   ecx
c0018a04:	e8 eb 51 ff ff       	call   c000dbf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018a09:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0018a0e:	83 c4 1c             	add    esp,0x1c
c0018a11:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018a17:	eb 0a                	jmp    c0018a23 <IDE::open(int, int, void*)+0x147>
c0018a19:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0018a23:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018a2a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018a31:	c1 e1 10             	shl    ecx,0x10
c0018a34:	c1 e0 08             	shl    eax,0x8
c0018a37:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018a3c:	09 c1                	or     ecx,eax
c0018a3e:	89 fa                	mov    edx,edi
c0018a40:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018a47:	c1 e0 0b             	shl    eax,0xb
c0018a4a:	09 c1                	or     ecx,eax
c0018a4c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018a52:	89 c8                	mov    eax,ecx
c0018a54:	ef                   	out    dx,eax
c0018a55:	be fc 0c 00 00       	mov    esi,0xcfc
c0018a5a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018a60:	89 f2                	mov    edx,esi
c0018a62:	ee                   	out    dx,al
c0018a63:	89 c8                	mov    eax,ecx
c0018a65:	89 fa                	mov    edx,edi
c0018a67:	ef                   	out    dx,eax
c0018a68:	89 f2                	mov    edx,esi
c0018a6a:	ed                   	in     eax,dx
c0018a6b:	0f b6 c0             	movzx  eax,al
c0018a6e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018a74:	74 46                	je     c0018abc <IDE::open(int, int, void*)+0x1e0>
c0018a76:	83 ec 0c             	sub    esp,0xc
c0018a79:	68 54 e9 01 c0       	push   0xc001e954
c0018a7e:	eb 34                	jmp    c0018ab4 <IDE::open(int, int, void*)+0x1d8>
c0018a80:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018a89:	75 17                	jne    c0018aa2 <IDE::open(int, int, void*)+0x1c6>
c0018a8b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018a90:	74 07                	je     c0018a99 <IDE::open(int, int, void*)+0x1bd>
c0018a92:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018a97:	75 09                	jne    c0018aa2 <IDE::open(int, int, void*)+0x1c6>
c0018a99:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018aa0:	eb 1a                	jmp    c0018abc <IDE::open(int, int, void*)+0x1e0>
c0018aa2:	83 ec 0c             	sub    esp,0xc
c0018aa5:	68 5c e9 01 c0       	push   0xc001e95c
c0018aaa:	eb 08                	jmp    c0018ab4 <IDE::open(int, int, void*)+0x1d8>
c0018aac:	83 ec 0c             	sub    esp,0xc
c0018aaf:	68 8d e9 01 c0       	push   0xc001e98d
c0018ab4:	e8 e8 6a ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c0018ab9:	83 c4 10             	add    esp,0x10
c0018abc:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018ac3:	79 1a                	jns    c0018adf <IDE::open(int, int, void*)+0x203>
c0018ac5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0018acb:	83 e0 fc             	and    eax,0xfffffffc
c0018ace:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018ad5:	83 c0 08             	add    eax,0x8
c0018ad8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0018adf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ae5:	89 c2                	mov    edx,eax
c0018ae7:	83 e2 0f             	and    edx,0xf
c0018aea:	66 83 fa 08          	cmp    dx,0x8
c0018aee:	75 0a                	jne    c0018afa <IDE::open(int, int, void*)+0x21e>
c0018af0:	83 e8 02             	sub    eax,0x2
c0018af3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018afa:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0018b00:	89 c2                	mov    edx,eax
c0018b02:	83 e2 0f             	and    edx,0xf
c0018b05:	66 83 fa 08          	cmp    dx,0x8
c0018b09:	75 0a                	jne    c0018b15 <IDE::open(int, int, void*)+0x239>
c0018b0b:	83 e8 02             	sub    eax,0x2
c0018b0e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018b15:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018b1c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0018b23:	89 d0                	mov    eax,edx
c0018b25:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018b28:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018b2c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0018b30:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018b33:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018b38:	0f b6 c9             	movzx  ecx,cl
c0018b3b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0018b42:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018b45:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018b49:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0018b4d:	8d 50 02             	lea    edx,[eax+0x2]
c0018b50:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018b55:	0f b6 d2             	movzx  edx,dl
c0018b58:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0018b5e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018b61:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018b65:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0018b69:	8d 48 03             	lea    ecx,[eax+0x3]
c0018b6c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018b71:	0f b6 c9             	movzx  ecx,cl
c0018b74:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0018b7a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018b7d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018b81:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0018b85:	8d 50 04             	lea    edx,[eax+0x4]
c0018b88:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0018b8e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018b93:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0018b9a:	66 85 f6             	test   si,si
c0018b9d:	74 5b                	je     c0018bfa <IDE::open(int, int, void*)+0x31e>
c0018b9f:	0f b6 d2             	movzx  edx,dl
c0018ba2:	83 c0 05             	add    eax,0x5
c0018ba5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018ba8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018bac:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0018bb0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018bb6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018bbb:	eb 3d                	jmp    c0018bfa <IDE::open(int, int, void*)+0x31e>
c0018bbd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0018bc3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018bca:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018bd1:	66 05 06 02          	add    ax,0x206
c0018bd5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018bdc:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0018be3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018bea:	66 05 06 02          	add    ax,0x206
c0018bee:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018bf5:	e9 e5 fe ff ff       	jmp    c0018adf <IDE::open(int, int, void*)+0x203>
c0018bfa:	50                   	push   eax
c0018bfb:	50                   	push   eax
c0018bfc:	6a 00                	push   0x0
c0018bfe:	53                   	push   ebx
c0018bff:	e8 5e fa ff ff       	call   c0018662 <IDE::prepareInterrupt(unsigned char)>
c0018c04:	5a                   	pop    edx
c0018c05:	59                   	pop    ecx
c0018c06:	6a 01                	push   0x1
c0018c08:	53                   	push   ebx
c0018c09:	e8 54 fa ff ff       	call   c0018662 <IDE::prepareInterrupt(unsigned char)>
c0018c0e:	83 c4 0c             	add    esp,0xc
c0018c11:	6a 00                	push   0x0
c0018c13:	6a 00                	push   0x0
c0018c15:	53                   	push   ebx
c0018c16:	e8 7b fc ff ff       	call   c0018896 <IDE::enableIRQs(unsigned char, bool)>
c0018c1b:	83 c4 0c             	add    esp,0xc
c0018c1e:	6a 00                	push   0x0
c0018c20:	6a 01                	push   0x1
c0018c22:	53                   	push   ebx
c0018c23:	e8 6e fc ff ff       	call   c0018896 <IDE::enableIRQs(unsigned char, bool)>
c0018c28:	83 c4 10             	add    esp,0x10
c0018c2b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0018c32:	74 34                	je     c0018c68 <IDE::open(int, int, void*)+0x38c>
c0018c34:	83 ec 0c             	sub    esp,0xc
c0018c37:	53                   	push   ebx
c0018c38:	6a 01                	push   0x1
c0018c3a:	68 5e 88 01 c0       	push   0xc001885e
c0018c3f:	6a 0e                	push   0xe
c0018c41:	53                   	push   ebx
c0018c42:	e8 cd 21 ff ff       	call   c000ae14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c47:	83 c4 14             	add    esp,0x14
c0018c4a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018c50:	53                   	push   ebx
c0018c51:	6a 01                	push   0x1
c0018c53:	68 7a 88 01 c0       	push   0xc001887a
c0018c58:	6a 0f                	push   0xf
c0018c5a:	53                   	push   ebx
c0018c5b:	e8 b4 21 ff ff       	call   c000ae14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c60:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0018c66:	eb 38                	jmp    c0018ca0 <IDE::open(int, int, void*)+0x3c4>
c0018c68:	83 ec 0c             	sub    esp,0xc
c0018c6b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0018c75:	53                   	push   ebx
c0018c76:	6a 00                	push   0x0
c0018c78:	68 5e 88 01 c0       	push   0xc001885e
c0018c7d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0018c83:	53                   	push   ebx
c0018c84:	e8 8b 21 ff ff       	call   c000ae14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c89:	83 c4 14             	add    esp,0x14
c0018c8c:	53                   	push   ebx
c0018c8d:	6a 00                	push   0x0
c0018c8f:	68 7a 88 01 c0       	push   0xc001887a
c0018c94:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0018c9a:	53                   	push   ebx
c0018c9b:	e8 74 21 ff ff       	call   c000ae14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018ca0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018ca2:	83 c4 20             	add    esp,0x20
c0018ca5:	83 ec 0c             	sub    esp,0xc
c0018ca8:	53                   	push   ebx
c0018ca9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0018cac:	83 c4 0c             	add    esp,0xc
c0018caf:	6a 07                	push   0x7
c0018cb1:	6a 00                	push   0x0
c0018cb3:	53                   	push   ebx
c0018cb4:	e8 8f fa ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018cb9:	83 c4 0c             	add    esp,0xc
c0018cbc:	6a 07                	push   0x7
c0018cbe:	6a 01                	push   0x1
c0018cc0:	53                   	push   ebx
c0018cc1:	e8 82 fa ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018cc6:	83 c4 0c             	add    esp,0xc
c0018cc9:	6a 01                	push   0x1
c0018ccb:	6a 00                	push   0x0
c0018ccd:	53                   	push   ebx
c0018cce:	e8 c3 fb ff ff       	call   c0018896 <IDE::enableIRQs(unsigned char, bool)>
c0018cd3:	83 c4 0c             	add    esp,0xc
c0018cd6:	6a 01                	push   0x1
c0018cd8:	6a 01                	push   0x1
c0018cda:	53                   	push   ebx
c0018cdb:	e8 b6 fb ff ff       	call   c0018896 <IDE::enableIRQs(unsigned char, bool)>
c0018ce0:	83 c4 2c             	add    esp,0x2c
c0018ce3:	31 c0                	xor    eax,eax
c0018ce5:	5b                   	pop    ebx
c0018ce6:	5e                   	pop    esi
c0018ce7:	5f                   	pop    edi
c0018ce8:	5d                   	pop    ebp
c0018ce9:	c3                   	ret    

c0018cea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0018cea:	55                   	push   ebp
c0018ceb:	57                   	push   edi
c0018cec:	56                   	push   esi
c0018ced:	53                   	push   ebx
c0018cee:	83 ec 1c             	sub    esp,0x1c
c0018cf1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018cf5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018cf9:	8d 50 f8             	lea    edx,[eax-0x8]
c0018cfc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018d00:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018d04:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018d08:	80 fa 03             	cmp    dl,0x3
c0018d0b:	77 5d                	ja     c0018d6a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0018d0d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018d11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018d15:	0f b6 db             	movzx  ebx,bl
c0018d18:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0018d1b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0018d1f:	83 ca 80             	or     edx,0xffffff80
c0018d22:	0f b6 d2             	movzx  edx,dl
c0018d25:	52                   	push   edx
c0018d26:	6a 0c                	push   0xc
c0018d28:	53                   	push   ebx
c0018d29:	56                   	push   esi
c0018d2a:	e8 59 f9 ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018d2f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0018d34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d38:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018d3c:	0f b6 c0             	movzx  eax,al
c0018d3f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0018d43:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018d45:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0018d4a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0018d4e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d52:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018d56:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018d5e:	83 c4 2c             	add    esp,0x2c
c0018d61:	5b                   	pop    ebx
c0018d62:	5e                   	pop    esi
c0018d63:	5f                   	pop    edi
c0018d64:	5d                   	pop    ebp
c0018d65:	e9 1e f9 ff ff       	jmp    c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018d6a:	3c 07                	cmp    al,0x7
c0018d6c:	77 10                	ja     c0018d7e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0018d6e:	0f b6 db             	movzx  ebx,bl
c0018d71:	0f b6 d0             	movzx  edx,al
c0018d74:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0018d7c:	eb 2d                	jmp    c0018dab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018d7e:	3c 0d                	cmp    al,0xd
c0018d80:	77 13                	ja     c0018d95 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0018d82:	0f b6 db             	movzx  ebx,bl
c0018d85:	0f b6 c0             	movzx  eax,al
c0018d88:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0018d8f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0018d93:	eb 16                	jmp    c0018dab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018d95:	3c 15                	cmp    al,0x15
c0018d97:	77 14                	ja     c0018dad <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0018d99:	0f b6 db             	movzx  ebx,bl
c0018d9c:	0f b6 c0             	movzx  eax,al
c0018d9f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0018da7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0018dab:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018dad:	83 c4 1c             	add    esp,0x1c
c0018db0:	5b                   	pop    ebx
c0018db1:	5e                   	pop    esi
c0018db2:	5f                   	pop    edi
c0018db3:	5d                   	pop    ebp
c0018db4:	c3                   	ret    
c0018db5:	90                   	nop

c0018db6 <IDE::detect()>:
c0018db6:	55                   	push   ebp
c0018db7:	57                   	push   edi
c0018db8:	56                   	push   esi
c0018db9:	53                   	push   ebx
c0018dba:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018dc0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0018dc7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0018dce:	0f 85 97 02 00 00    	jne    c001906b <IDE::detect()+0x2b5>
c0018dd4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0018ddb:	31 f6                	xor    esi,esi
c0018ddd:	31 ed                	xor    ebp,ebp
c0018ddf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018de7:	89 e8                	mov    eax,ebp
c0018de9:	c1 e0 06             	shl    eax,0x6
c0018dec:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0018df4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018df8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018dfc:	c1 e0 04             	shl    eax,0x4
c0018dff:	83 c8 a0             	or     eax,0xffffffa0
c0018e02:	0f b6 c0             	movzx  eax,al
c0018e05:	50                   	push   eax
c0018e06:	6a 06                	push   0x6
c0018e08:	56                   	push   esi
c0018e09:	53                   	push   ebx
c0018e0a:	e8 79 f8 ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018e0f:	83 c4 0c             	add    esp,0xc
c0018e12:	6a 0c                	push   0xc
c0018e14:	56                   	push   esi
c0018e15:	53                   	push   ebx
c0018e16:	e8 2d f9 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018e1b:	83 c4 0c             	add    esp,0xc
c0018e1e:	6a 0c                	push   0xc
c0018e20:	56                   	push   esi
c0018e21:	53                   	push   ebx
c0018e22:	e8 21 f9 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018e27:	83 c4 0c             	add    esp,0xc
c0018e2a:	6a 0c                	push   0xc
c0018e2c:	56                   	push   esi
c0018e2d:	53                   	push   ebx
c0018e2e:	e8 15 f9 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018e33:	83 c4 0c             	add    esp,0xc
c0018e36:	6a 0c                	push   0xc
c0018e38:	56                   	push   esi
c0018e39:	53                   	push   ebx
c0018e3a:	e8 09 f9 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018e3f:	68 ec 00 00 00       	push   0xec
c0018e44:	6a 07                	push   0x7
c0018e46:	56                   	push   esi
c0018e47:	53                   	push   ebx
c0018e48:	e8 3b f8 ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018e4d:	83 c4 1c             	add    esp,0x1c
c0018e50:	6a 0c                	push   0xc
c0018e52:	56                   	push   esi
c0018e53:	53                   	push   ebx
c0018e54:	e8 ef f8 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018e59:	83 c4 0c             	add    esp,0xc
c0018e5c:	6a 0c                	push   0xc
c0018e5e:	56                   	push   esi
c0018e5f:	53                   	push   ebx
c0018e60:	e8 e3 f8 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018e65:	83 c4 0c             	add    esp,0xc
c0018e68:	6a 0c                	push   0xc
c0018e6a:	56                   	push   esi
c0018e6b:	53                   	push   ebx
c0018e6c:	e8 d7 f8 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018e71:	83 c4 0c             	add    esp,0xc
c0018e74:	6a 0c                	push   0xc
c0018e76:	56                   	push   esi
c0018e77:	53                   	push   ebx
c0018e78:	e8 cb f8 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018e7d:	83 c4 0c             	add    esp,0xc
c0018e80:	6a 0c                	push   0xc
c0018e82:	56                   	push   esi
c0018e83:	53                   	push   ebx
c0018e84:	e8 bf f8 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018e89:	83 c4 10             	add    esp,0x10
c0018e8c:	84 c0                	test   al,al
c0018e8e:	0f 84 5f 01 00 00    	je     c0018ff3 <IDE::detect()+0x23d>
c0018e94:	31 ff                	xor    edi,edi
c0018e96:	50                   	push   eax
c0018e97:	6a 0c                	push   0xc
c0018e99:	56                   	push   esi
c0018e9a:	53                   	push   ebx
c0018e9b:	e8 a8 f8 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0018ea0:	83 c4 10             	add    esp,0x10
c0018ea3:	a8 01                	test   al,0x1
c0018ea5:	0f 85 69 01 00 00    	jne    c0019014 <IDE::detect()+0x25e>
c0018eab:	84 c0                	test   al,al
c0018ead:	78 04                	js     c0018eb3 <IDE::detect()+0xfd>
c0018eaf:	a8 08                	test   al,0x8
c0018eb1:	75 23                	jne    c0018ed6 <IDE::detect()+0x120>
c0018eb3:	47                   	inc    edi
c0018eb4:	81 ff 17 01 00 00    	cmp    edi,0x117
c0018eba:	7e da                	jle    c0018e96 <IDE::detect()+0xe0>
c0018ebc:	83 ec 0c             	sub    esp,0xc
c0018ebf:	6a 32                	push   0x32
c0018ec1:	e8 ba 9e ff ff       	call   c0012d80 <milliTenthSleep(unsigned int)>
c0018ec6:	83 c4 10             	add    esp,0x10
c0018ec9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0018ecf:	75 c5                	jne    c0018e96 <IDE::detect()+0xe0>
c0018ed1:	e9 3e 01 00 00       	jmp    c0019014 <IDE::detect()+0x25e>
c0018ed6:	31 c9                	xor    ecx,ecx
c0018ed8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0018edc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0018ee0:	83 ec 0c             	sub    esp,0xc
c0018ee3:	68 80 00 00 00       	push   0x80
c0018ee8:	57                   	push   edi
c0018ee9:	6a 00                	push   0x0
c0018eeb:	56                   	push   esi
c0018eec:	53                   	push   ebx
c0018eed:	e8 f8 fd ff ff       	call   c0018cea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0018ef2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0018ef7:	89 e8                	mov    eax,ebp
c0018ef9:	89 d1                	mov    ecx,edx
c0018efb:	c1 e0 06             	shl    eax,0x6
c0018efe:	01 d8                	add    eax,ebx
c0018f00:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0018f07:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0018f0e:	89 f2                	mov    edx,esi
c0018f10:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0018f16:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0018f1a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0018f20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018f24:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0018f2b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0018f33:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0018f3a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0018f42:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0018f48:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0018f4f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0018f55:	8d 54 24 58          	lea    edx,[esp+0x58]
c0018f59:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018f5d:	83 c4 20             	add    esp,0x20
c0018f60:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0018f63:	83 c0 02             	add    eax,0x2
c0018f66:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0018f6c:	83 c7 02             	add    edi,0x2
c0018f6f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0018f72:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0018f78:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0018f7c:	75 e2                	jne    c0018f60 <IDE::detect()+0x1aa>
c0018f7e:	89 e8                	mov    eax,ebp
c0018f80:	c1 e0 06             	shl    eax,0x6
c0018f83:	01 d8                	add    eax,ebx
c0018f85:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0018f8b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0018f92:	66 c1 ea 09          	shr    dx,0x9
c0018f96:	83 e2 01             	and    edx,0x1
c0018f99:	84 c9                	test   cl,cl
c0018f9b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0018fa1:	75 22                	jne    c0018fc5 <IDE::detect()+0x20f>
c0018fa3:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0018faa:	74 46                	je     c0018ff2 <IDE::detect()+0x23c>
c0018fac:	83 ec 0c             	sub    esp,0xc
c0018faf:	68 7c 01 00 00       	push   0x17c
c0018fb4:	e8 ac dc fe ff       	call   c0006c65 <malloc>
c0018fb9:	89 c7                	mov    edi,eax
c0018fbb:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fbe:	e8 07 05 00 00       	call   c00194ca <ATA::ATA()>
c0018fc3:	eb 17                	jmp    c0018fdc <IDE::detect()+0x226>
c0018fc5:	83 ec 0c             	sub    esp,0xc
c0018fc8:	68 84 01 00 00       	push   0x184
c0018fcd:	e8 93 dc fe ff       	call   c0006c65 <malloc>
c0018fd2:	89 c7                	mov    edi,eax
c0018fd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fd7:	e8 e6 0a 00 00       	call   c0019ac2 <ATAPI::ATAPI()>
c0018fdc:	5a                   	pop    edx
c0018fdd:	59                   	pop    ecx
c0018fde:	57                   	push   edi
c0018fdf:	53                   	push   ebx
c0018fe0:	e8 83 1e ff ff       	call   c000ae68 <Device::addChild(Device*)>
c0018fe5:	8b 07                	mov    eax,DWORD PTR [edi]
c0018fe7:	53                   	push   ebx
c0018fe8:	55                   	push   ebp
c0018fe9:	6a 00                	push   0x0
c0018feb:	57                   	push   edi
c0018fec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018fef:	83 c4 20             	add    esp,0x20
c0018ff2:	45                   	inc    ebp
c0018ff3:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0018ff8:	74 0d                	je     c0019007 <IDE::detect()+0x251>
c0018ffa:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019002:	e9 e0 fd ff ff       	jmp    c0018de7 <IDE::detect()+0x31>
c0019007:	4e                   	dec    esi
c0019008:	74 61                	je     c001906b <IDE::detect()+0x2b5>
c001900a:	be 01 00 00 00       	mov    esi,0x1
c001900f:	e9 cb fd ff ff       	jmp    c0018ddf <IDE::detect()+0x29>
c0019014:	50                   	push   eax
c0019015:	6a 04                	push   0x4
c0019017:	56                   	push   esi
c0019018:	53                   	push   ebx
c0019019:	e8 2a f7 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c001901e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019022:	83 c4 0c             	add    esp,0xc
c0019025:	6a 05                	push   0x5
c0019027:	56                   	push   esi
c0019028:	53                   	push   ebx
c0019029:	e8 1a f7 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c001902e:	83 c4 10             	add    esp,0x10
c0019031:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019035:	80 fa 14             	cmp    dl,0x14
c0019038:	75 04                	jne    c001903e <IDE::detect()+0x288>
c001903a:	3c eb                	cmp    al,0xeb
c001903c:	eb 07                	jmp    c0019045 <IDE::detect()+0x28f>
c001903e:	3c 96                	cmp    al,0x96
c0019040:	75 b1                	jne    c0018ff3 <IDE::detect()+0x23d>
c0019042:	80 fa 69             	cmp    dl,0x69
c0019045:	75 ac                	jne    c0018ff3 <IDE::detect()+0x23d>
c0019047:	68 a1 00 00 00       	push   0xa1
c001904c:	6a 07                	push   0x7
c001904e:	56                   	push   esi
c001904f:	53                   	push   ebx
c0019050:	e8 33 f6 ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019055:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001905c:	e8 1f 9d ff ff       	call   c0012d80 <milliTenthSleep(unsigned int)>
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	b1 01                	mov    cl,0x1
c0019066:	e9 6d fe ff ff       	jmp    c0018ed8 <IDE::detect()+0x122>
c001906b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019071:	5b                   	pop    ebx
c0019072:	5e                   	pop    esi
c0019073:	5f                   	pop    edi
c0019074:	5d                   	pop    ebp
c0019075:	c3                   	ret    

c0019076 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019076:	55                   	push   ebp
c0019077:	57                   	push   edi
c0019078:	56                   	push   esi
c0019079:	53                   	push   ebx
c001907a:	83 ec 1c             	sub    esp,0x1c
c001907d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019081:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019085:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019089:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001908d:	88 c3                	mov    bl,al
c001908f:	84 c0                	test   al,al
c0019091:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019095:	0f 84 81 00 00 00    	je     c001911c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001909b:	83 ec 0c             	sub    esp,0xc
c001909e:	68 b7 e9 01 c0       	push   0xc001e9b7
c00190a3:	e8 80 09 ff ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c00190a8:	83 c4 10             	add    esp,0x10
c00190ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00190af:	3c 01                	cmp    al,0x1
c00190b1:	74 63                	je     c0019116 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00190b3:	3c 02                	cmp    al,0x2
c00190b5:	75 53                	jne    c001910a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00190b7:	01 f6                	add    esi,esi
c00190b9:	09 ee                	or     esi,ebp
c00190bb:	50                   	push   eax
c00190bc:	89 f0                	mov    eax,esi
c00190be:	6a 01                	push   0x1
c00190c0:	0f b6 f0             	movzx  esi,al
c00190c3:	c1 e6 06             	shl    esi,0x6
c00190c6:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00190ce:	50                   	push   eax
c00190cf:	57                   	push   edi
c00190d0:	e8 73 f6 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c00190d5:	83 c4 10             	add    esp,0x10
c00190d8:	a8 01                	test   al,0x1
c00190da:	74 02                	je     c00190de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c00190dc:	b3 07                	mov    bl,0x7
c00190de:	a8 02                	test   al,0x2
c00190e0:	74 02                	je     c00190e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c00190e2:	b3 03                	mov    bl,0x3
c00190e4:	a8 04                	test   al,0x4
c00190e6:	74 02                	je     c00190ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00190e8:	b3 14                	mov    bl,0x14
c00190ea:	a8 08                	test   al,0x8
c00190ec:	74 02                	je     c00190f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00190ee:	b3 03                	mov    bl,0x3
c00190f0:	a8 10                	test   al,0x10
c00190f2:	74 02                	je     c00190f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00190f4:	b3 15                	mov    bl,0x15
c00190f6:	a8 20                	test   al,0x20
c00190f8:	74 02                	je     c00190fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00190fa:	b3 03                	mov    bl,0x3
c00190fc:	a8 40                	test   al,0x40
c00190fe:	74 02                	je     c0019102 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019100:	b3 16                	mov    bl,0x16
c0019102:	84 c0                	test   al,al
c0019104:	79 16                	jns    c001911c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019106:	b3 0d                	mov    bl,0xd
c0019108:	eb 12                	jmp    c001911c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001910a:	3c 03                	cmp    al,0x3
c001910c:	74 0c                	je     c001911a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001910e:	3c 04                	cmp    al,0x4
c0019110:	75 0a                	jne    c001911c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019112:	b3 08                	mov    bl,0x8
c0019114:	eb 06                	jmp    c001911c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019116:	b3 13                	mov    bl,0x13
c0019118:	eb 02                	jmp    c001911c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001911a:	b3 17                	mov    bl,0x17
c001911c:	83 c4 1c             	add    esp,0x1c
c001911f:	88 d8                	mov    al,bl
c0019121:	5b                   	pop    ebx
c0019122:	5e                   	pop    esi
c0019123:	5f                   	pop    edi
c0019124:	5d                   	pop    ebp
c0019125:	c3                   	ret    

c0019126 <IDE::polling(unsigned char, unsigned int)>:
c0019126:	55                   	push   ebp
c0019127:	bd 04 00 00 00       	mov    ebp,0x4
c001912c:	57                   	push   edi
c001912d:	56                   	push   esi
c001912e:	53                   	push   ebx
c001912f:	83 ec 0c             	sub    esp,0xc
c0019132:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019136:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001913a:	0f b6 f3             	movzx  esi,bl
c001913d:	52                   	push   edx
c001913e:	6a 0c                	push   0xc
c0019140:	56                   	push   esi
c0019141:	57                   	push   edi
c0019142:	e8 01 f6 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0019147:	83 c4 10             	add    esp,0x10
c001914a:	4d                   	dec    ebp
c001914b:	75 ed                	jne    c001913a <IDE::polling(unsigned char, unsigned int)+0x14>
c001914d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019152:	50                   	push   eax
c0019153:	6a 0c                	push   0xc
c0019155:	56                   	push   esi
c0019156:	57                   	push   edi
c0019157:	e8 ec f5 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c001915c:	83 c4 10             	add    esp,0x10
c001915f:	a8 01                	test   al,0x1
c0019161:	75 17                	jne    c001917a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019163:	a8 20                	test   al,0x20
c0019165:	75 0f                	jne    c0019176 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019167:	4b                   	dec    ebx
c0019168:	74 10                	je     c001917a <IDE::polling(unsigned char, unsigned int)+0x54>
c001916a:	84 c0                	test   al,al
c001916c:	78 e4                	js     c0019152 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001916e:	a8 08                	test   al,0x8
c0019170:	74 e0                	je     c0019152 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019172:	31 c0                	xor    eax,eax
c0019174:	eb 06                	jmp    c001917c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019176:	b0 01                	mov    al,0x1
c0019178:	eb 02                	jmp    c001917c <IDE::polling(unsigned char, unsigned int)+0x56>
c001917a:	b0 02                	mov    al,0x2
c001917c:	83 c4 0c             	add    esp,0xc
c001917f:	5b                   	pop    ebx
c0019180:	5e                   	pop    esi
c0019181:	5f                   	pop    edi
c0019182:	5d                   	pop    ebp
c0019183:	c3                   	ret    

c0019184 <SATABus::close(int, int, void*)>:
c0019184:	31 c0                	xor    eax,eax
c0019186:	c3                   	ret    
c0019187:	90                   	nop

c0019188 <SATABus::detect()>:
c0019188:	c3                   	ret    
c0019189:	90                   	nop

c001918a <SATABus::SATABus()>:
c001918a:	83 ec 0c             	sub    esp,0xc
c001918d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019191:	83 ec 08             	sub    esp,0x8
c0019194:	68 f0 e9 01 c0       	push   0xc001e9f0
c0019199:	50                   	push   eax
c001919a:	e8 0d 20 ff ff       	call   c000b1ac <HardDiskController::HardDiskController(char const*)>
c001919f:	83 c4 10             	add    esp,0x10
c00191a2:	ba 1c ea 01 c0       	mov    edx,0xc001ea1c
c00191a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191ab:	89 10                	mov    DWORD PTR [eax],edx
c00191ad:	83 ec 0c             	sub    esp,0xc
c00191b0:	6a 50                	push   0x50
c00191b2:	e8 39 df fe ff       	call   c00070f0 <Phys::allocateContiguousPages(int)>
c00191b7:	83 c4 10             	add    esp,0x10
c00191ba:	89 c2                	mov    edx,eax
c00191bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191c0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00191c6:	83 ec 0c             	sub    esp,0xc
c00191c9:	6a 50                	push   0x50
c00191cb:	e8 d1 f5 fe ff       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c00191d0:	83 c4 10             	add    esp,0x10
c00191d3:	89 c2                	mov    edx,eax
c00191d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191d9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00191df:	a1 f4 f6 01 c0       	mov    eax,ds:0xc001f6f4
c00191e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00191e8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00191ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00191f2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00191f8:	83 ec 0c             	sub    esp,0xc
c00191fb:	6a 03                	push   0x3
c00191fd:	6a 50                	push   0x50
c00191ff:	51                   	push   ecx
c0019200:	52                   	push   edx
c0019201:	50                   	push   eax
c0019202:	e8 ed fe fe ff       	call   c00090f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019207:	83 c4 20             	add    esp,0x20
c001920a:	90                   	nop
c001920b:	83 c4 0c             	add    esp,0xc
c001920e:	c3                   	ret    
c001920f:	90                   	nop

c0019210 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019214:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019217:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001921a:	09 c2                	or     edx,eax
c001921c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019220:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019226:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019228:	31 c0                	xor    eax,eax
c001922a:	c1 e9 08             	shr    ecx,0x8
c001922d:	83 e1 0f             	and    ecx,0xf
c0019230:	39 c8                	cmp    eax,ecx
c0019232:	74 0a                	je     c001923e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019234:	f6 c2 01             	test   dl,0x1
c0019237:	74 08                	je     c0019241 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019239:	d1 ea                	shr    edx,1
c001923b:	40                   	inc    eax
c001923c:	eb f2                	jmp    c0019230 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001923e:	83 c8 ff             	or     eax,0xffffffff
c0019241:	c3                   	ret    

c0019242 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019242:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019246:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019249:	89 c2                	mov    edx,eax
c001924b:	c1 ea 08             	shr    edx,0x8
c001924e:	83 e2 0f             	and    edx,0xf
c0019251:	fe ca                	dec    dl
c0019253:	75 31                	jne    c0019286 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019255:	83 e0 0f             	and    eax,0xf
c0019258:	3c 03                	cmp    al,0x3
c001925a:	75 2a                	jne    c0019286 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001925c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001925f:	b8 02 00 00 00       	mov    eax,0x2
c0019264:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001926a:	74 1c                	je     c0019288 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001926c:	b8 04 00 00 00       	mov    eax,0x4
c0019271:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019277:	74 0f                	je     c0019288 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019279:	31 c0                	xor    eax,eax
c001927b:	83 fa 03             	cmp    edx,0x3
c001927e:	0f 94 c0             	sete   al
c0019281:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019285:	c3                   	ret    
c0019286:	31 c0                	xor    eax,eax
c0019288:	c3                   	ret    
c0019289:	90                   	nop

c001928a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001928a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001928e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019291:	0f ba e2 0f          	bt     edx,0xf
c0019295:	72 f7                	jb     c001928e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019297:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001929a:	83 ca 10             	or     edx,0x10
c001929d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00192a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00192a3:	83 ca 01             	or     edx,0x1
c00192a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00192a9:	c3                   	ret    

c00192aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00192aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192ae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00192b1:	83 e2 fe             	and    edx,0xfffffffe
c00192b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00192b7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00192ba:	83 e2 ef             	and    edx,0xffffffef
c00192bd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00192c0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00192c3:	0f ba e2 0e          	bt     edx,0xe
c00192c7:	72 f7                	jb     c00192c0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00192c9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00192cc:	0f ba e2 0f          	bt     edx,0xf
c00192d0:	72 ee                	jb     c00192c0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00192d2:	c3                   	ret    
c00192d3:	90                   	nop

c00192d4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00192d4:	55                   	push   ebp
c00192d5:	57                   	push   edi
c00192d6:	56                   	push   esi
c00192d7:	53                   	push   ebx
c00192d8:	83 ec 1c             	sub    esp,0x1c
c00192db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00192df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00192e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00192e7:	53                   	push   ebx
c00192e8:	89 fd                	mov    ebp,edi
c00192ea:	56                   	push   esi
c00192eb:	c1 e5 0a             	shl    ebp,0xa
c00192ee:	e8 b7 ff ff ff       	call   c00192aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00192f3:	83 ec 0c             	sub    esp,0xc
c00192f6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00192fc:	01 e8                	add    eax,ebp
c00192fe:	89 03                	mov    DWORD PTR [ebx],eax
c0019300:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019302:	68 00 04 00 00       	push   0x400
c0019307:	6a 00                	push   0x0
c0019309:	50                   	push   eax
c001930a:	e8 e1 71 fe ff       	call   c00004f0 <memset>
c001930f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019315:	89 fa                	mov    edx,edi
c0019317:	01 e8                	add    eax,ebp
c0019319:	c1 e7 0d             	shl    edi,0xd
c001931c:	89 03                	mov    DWORD PTR [ebx],eax
c001931e:	c1 e2 08             	shl    edx,0x8
c0019321:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019328:	81 c2 00 80 00 00    	add    edx,0x8000
c001932e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0019332:	89 d0                	mov    eax,edx
c0019334:	83 c4 1c             	add    esp,0x1c
c0019337:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001933d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019340:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019343:	68 00 01 00 00       	push   0x100
c0019348:	6a 00                	push   0x0
c001934a:	50                   	push   eax
c001934b:	e8 a0 71 fe ff       	call   c00004f0 <memset>
c0019350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019354:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001935a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0019360:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019364:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019367:	83 c4 10             	add    esp,0x10
c001936a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019371:	31 ff                	xor    edi,edi
c0019373:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019379:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001937f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019383:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019389:	83 c5 20             	add    ebp,0x20
c001938c:	01 f8                	add    eax,edi
c001938e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019391:	52                   	push   edx
c0019392:	68 00 01 00 00       	push   0x100
c0019397:	6a 00                	push   0x0
c0019399:	50                   	push   eax
c001939a:	e8 51 71 fe ff       	call   c00004f0 <memset>
c001939f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00193a3:	83 c4 10             	add    esp,0x10
c00193a6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00193ac:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00193b3:	01 f8                	add    eax,edi
c00193b5:	81 c7 00 01 00 00    	add    edi,0x100
c00193bb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00193be:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00193c4:	75 b3                	jne    c0019379 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00193c6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00193ca:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00193ce:	83 c4 1c             	add    esp,0x1c
c00193d1:	5b                   	pop    ebx
c00193d2:	5e                   	pop    esi
c00193d3:	5f                   	pop    edi
c00193d4:	5d                   	pop    ebp
c00193d5:	e9 b0 fe ff ff       	jmp    c001928a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00193da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00193da:	55                   	push   ebp
c00193db:	57                   	push   edi
c00193dc:	56                   	push   esi
c00193dd:	53                   	push   ebx
c00193de:	31 db                	xor    ebx,ebx
c00193e0:	83 ec 0c             	sub    esp,0xc
c00193e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00193e7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00193eb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00193ee:	f7 c7 01 00 00 00    	test   edi,0x1
c00193f4:	74 7a                	je     c0019470 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00193f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00193fa:	89 d8                	mov    eax,ebx
c00193fc:	c1 e0 07             	shl    eax,0x7
c00193ff:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019406:	55                   	push   ebp
c0019407:	56                   	push   esi
c0019408:	e8 35 fe ff ff       	call   c0019242 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001940d:	5a                   	pop    edx
c001940e:	83 f8 01             	cmp    eax,0x1
c0019411:	59                   	pop    ecx
c0019412:	75 21                	jne    c0019435 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019414:	50                   	push   eax
c0019415:	53                   	push   ebx
c0019416:	55                   	push   ebp
c0019417:	56                   	push   esi
c0019418:	e8 b7 fe ff ff       	call   c00192d4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001941d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019424:	e8 3c d8 fe ff       	call   c0006c65 <malloc>
c0019429:	89 c5                	mov    ebp,eax
c001942b:	89 04 24             	mov    DWORD PTR [esp],eax
c001942e:	e8 43 0d 00 00       	call   c001a176 <SATA::SATA()>
c0019433:	eb 24                	jmp    c0019459 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019435:	83 f8 04             	cmp    eax,0x4
c0019438:	75 36                	jne    c0019470 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001943a:	51                   	push   ecx
c001943b:	53                   	push   ebx
c001943c:	55                   	push   ebp
c001943d:	56                   	push   esi
c001943e:	e8 91 fe ff ff       	call   c00192d4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019443:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001944a:	e8 16 d8 fe ff       	call   c0006c65 <malloc>
c001944f:	89 c5                	mov    ebp,eax
c0019451:	89 04 24             	mov    DWORD PTR [esp],eax
c0019454:	e8 79 10 00 00       	call   c001a4d2 <SATAPI::SATAPI()>
c0019459:	58                   	pop    eax
c001945a:	5a                   	pop    edx
c001945b:	55                   	push   ebp
c001945c:	56                   	push   esi
c001945d:	e8 06 1a ff ff       	call   c000ae68 <Device::addChild(Device*)>
c0019462:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019465:	56                   	push   esi
c0019466:	6a 00                	push   0x0
c0019468:	53                   	push   ebx
c0019469:	55                   	push   ebp
c001946a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001946d:	83 c4 20             	add    esp,0x20
c0019470:	d1 ef                	shr    edi,1
c0019472:	43                   	inc    ebx
c0019473:	83 fb 20             	cmp    ebx,0x20
c0019476:	0f 85 72 ff ff ff    	jne    c00193ee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001947c:	83 c4 0c             	add    esp,0xc
c001947f:	5b                   	pop    ebx
c0019480:	5e                   	pop    esi
c0019481:	5f                   	pop    edi
c0019482:	5d                   	pop    ebp
c0019483:	c3                   	ret    

c0019484 <SATABus::open(int, int, void*)>:
c0019484:	83 ec 14             	sub    esp,0x14
c0019487:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001948b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019491:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019497:	52                   	push   edx
c0019498:	50                   	push   eax
c0019499:	e8 3c ff ff ff       	call   c00193da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001949e:	31 c0                	xor    eax,eax
c00194a0:	83 c4 1c             	add    esp,0x1c
c00194a3:	c3                   	ret    

c00194a4 <ATA::close(int, int, void*)>:
c00194a4:	83 ec 0c             	sub    esp,0xc
c00194a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194ab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00194b1:	85 c0                	test   eax,eax
c00194b3:	74 0c                	je     c00194c1 <ATA::close(int, int, void*)+0x1d>
c00194b5:	83 ec 0c             	sub    esp,0xc
c00194b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00194ba:	50                   	push   eax
c00194bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00194be:	83 c4 10             	add    esp,0x10
c00194c1:	31 c0                	xor    eax,eax
c00194c3:	83 c4 0c             	add    esp,0xc
c00194c6:	c3                   	ret    
c00194c7:	90                   	nop

c00194c8 <ATA::powerSaving(PowerSavingLevel)>:
c00194c8:	c3                   	ret    
c00194c9:	90                   	nop

c00194ca <ATA::ATA()>:
c00194ca:	83 ec 0c             	sub    esp,0xc
c00194cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194d1:	83 ec 04             	sub    esp,0x4
c00194d4:	68 00 02 00 00       	push   0x200
c00194d9:	68 e9 ea 01 c0       	push   0xc001eae9
c00194de:	50                   	push   eax
c00194df:	e8 52 1d ff ff       	call   c000b236 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00194e4:	83 c4 10             	add    esp,0x10
c00194e7:	ba 5c ea 01 c0       	mov    edx,0xc001ea5c
c00194ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194f0:	89 10                	mov    DWORD PTR [eax],edx
c00194f2:	90                   	nop
c00194f3:	83 c4 0c             	add    esp,0xc
c00194f6:	c3                   	ret    
c00194f7:	90                   	nop

c00194f8 <ATA::flush(bool)>:
c00194f8:	53                   	push   ebx
c00194f9:	83 ec 08             	sub    esp,0x8
c00194fc:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019501:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019505:	19 c0                	sbb    eax,eax
c0019507:	83 e0 fd             	and    eax,0xfffffffd
c001950a:	05 ea 00 00 00       	add    eax,0xea
c001950f:	50                   	push   eax
c0019510:	6a 07                	push   0x7
c0019512:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019519:	50                   	push   eax
c001951a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019520:	e8 63 f1 ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019525:	83 c4 0c             	add    esp,0xc
c0019528:	6a 00                	push   0x0
c001952a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019531:	50                   	push   eax
c0019532:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019538:	e8 e9 fb ff ff       	call   c0019126 <IDE::polling(unsigned char, unsigned int)>
c001953d:	83 c4 18             	add    esp,0x18
c0019540:	5b                   	pop    ebx
c0019541:	c3                   	ret    

c0019542 <ATA::readyForCommand()>:
c0019542:	56                   	push   esi
c0019543:	53                   	push   ebx
c0019544:	53                   	push   ebx
c0019545:	31 db                	xor    ebx,ebx
c0019547:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001954b:	51                   	push   ecx
c001954c:	6a 0c                	push   0xc
c001954e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019555:	50                   	push   eax
c0019556:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001955c:	e8 e7 f1 ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0019561:	83 c4 10             	add    esp,0x10
c0019564:	a8 88                	test   al,0x88
c0019566:	74 1f                	je     c0019587 <ATA::readyForCommand()+0x45>
c0019568:	43                   	inc    ebx
c0019569:	83 fb 63             	cmp    ebx,0x63
c001956c:	7e dd                	jle    c001954b <ATA::readyForCommand()+0x9>
c001956e:	83 ec 0c             	sub    esp,0xc
c0019571:	6a 0a                	push   0xa
c0019573:	e8 08 98 ff ff       	call   c0012d80 <milliTenthSleep(unsigned int)>
c0019578:	83 c4 10             	add    esp,0x10
c001957b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019581:	75 c8                	jne    c001954b <ATA::readyForCommand()+0x9>
c0019583:	31 c0                	xor    eax,eax
c0019585:	eb 02                	jmp    c0019589 <ATA::readyForCommand()+0x47>
c0019587:	b0 01                	mov    al,0x1
c0019589:	5a                   	pop    edx
c001958a:	5b                   	pop    ebx
c001958b:	5e                   	pop    esi
c001958c:	c3                   	ret    
c001958d:	90                   	nop

c001958e <ATA::access(unsigned long long, int, void*, bool)>:
c001958e:	55                   	push   ebp
c001958f:	57                   	push   edi
c0019590:	56                   	push   esi
c0019591:	53                   	push   ebx
c0019592:	83 ec 2c             	sub    esp,0x2c
c0019595:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019599:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001959d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00195a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00195a5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00195a9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00195ad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00195b1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00195b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00195bb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00195c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00195c5:	c1 e0 06             	shl    eax,0x6
c00195c8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00195d0:	74 5d                	je     c001962f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00195d2:	89 fa                	mov    edx,edi
c00195d4:	89 f0                	mov    eax,esi
c00195d6:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00195da:	c1 ea 1c             	shr    edx,0x1c
c00195dd:	89 d1                	mov    ecx,edx
c00195df:	09 c1                	or     ecx,eax
c00195e1:	74 25                	je     c0019608 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00195e3:	31 ed                	xor    ebp,ebp
c00195e5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00195ec:	89 fa                	mov    edx,edi
c00195ee:	89 f0                	mov    eax,esi
c00195f0:	0f ad d0             	shrd   eax,edx,cl
c00195f3:	d3 ea                	shr    edx,cl
c00195f5:	f6 c1 20             	test   cl,0x20
c00195f8:	74 02                	je     c00195fc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00195fa:	89 d0                	mov    eax,edx
c00195fc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019600:	45                   	inc    ebp
c0019601:	83 fd 06             	cmp    ebp,0x6
c0019604:	75 df                	jne    c00195e5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019606:	eb 76                	jmp    c001967e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019608:	89 f0                	mov    eax,esi
c001960a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001960f:	89 fa                	mov    edx,edi
c0019611:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019618:	0f ac d0 10          	shrd   eax,edx,0x10
c001961c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019621:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019625:	c1 ee 18             	shr    esi,0x18
c0019628:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001962d:	eb 56                	jmp    c0019685 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001962f:	6a 00                	push   0x0
c0019631:	6a 3f                	push   0x3f
c0019633:	57                   	push   edi
c0019634:	56                   	push   esi
c0019635:	e8 a6 22 00 00       	call   c001b8e0 <__umoddi3>
c001963a:	83 c4 10             	add    esp,0x10
c001963d:	40                   	inc    eax
c001963e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019642:	6a 00                	push   0x0
c0019644:	68 f0 03 00 00       	push   0x3f0
c0019649:	57                   	push   edi
c001964a:	56                   	push   esi
c001964b:	e8 90 21 00 00       	call   c001b7e0 <__udivdi3>
c0019650:	83 c4 10             	add    esp,0x10
c0019653:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019658:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001965f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019664:	6a 00                	push   0x0
c0019666:	6a 3f                	push   0x3f
c0019668:	57                   	push   edi
c0019669:	56                   	push   esi
c001966a:	e8 71 21 00 00       	call   c001b7e0 <__udivdi3>
c001966f:	83 c4 10             	add    esp,0x10
c0019672:	89 c6                	mov    esi,eax
c0019674:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019679:	83 e6 0f             	and    esi,0xf
c001967c:	eb 07                	jmp    c0019685 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001967e:	31 f6                	xor    esi,esi
c0019680:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019685:	bf 01 00 00 00       	mov    edi,0x1
c001968a:	50                   	push   eax
c001968b:	6a 00                	push   0x0
c001968d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019694:	50                   	push   eax
c0019695:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019699:	e8 f8 f1 ff ff       	call   c0018896 <IDE::enableIRQs(unsigned char, bool)>
c001969e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196a1:	e8 9c fe ff ff       	call   c0019542 <ATA::readyForCommand()>
c00196a6:	83 c4 10             	add    esp,0x10
c00196a9:	84 c0                	test   al,al
c00196ab:	0f 84 4e 02 00 00    	je     c00198ff <ATA::access(unsigned long long, int, void*, bool)+0x371>
c00196b1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00196b7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00196bd:	c1 e0 04             	shl    eax,0x4
c00196c0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00196c7:	09 c6                	or     esi,eax
c00196c9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00196ce:	75 05                	jne    c00196d5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00196d0:	83 ce a0             	or     esi,0xffffffa0
c00196d3:	eb 03                	jmp    c00196d8 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00196d5:	83 ce e0             	or     esi,0xffffffe0
c00196d8:	89 f0                	mov    eax,esi
c00196da:	0f b6 f0             	movzx  esi,al
c00196dd:	56                   	push   esi
c00196de:	6a 06                	push   0x6
c00196e0:	51                   	push   ecx
c00196e1:	52                   	push   edx
c00196e2:	e8 a1 ef ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196e7:	83 c4 10             	add    esp,0x10
c00196ea:	6a 00                	push   0x0
c00196ec:	6a 01                	push   0x1
c00196ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00196f5:	50                   	push   eax
c00196f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196fc:	e8 87 ef ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019701:	83 c4 10             	add    esp,0x10
c0019704:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019709:	75 6e                	jne    c0019779 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001970b:	6a 00                	push   0x0
c001970d:	6a 08                	push   0x8
c001970f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019716:	50                   	push   eax
c0019717:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001971d:	e8 66 ef ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019722:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019727:	50                   	push   eax
c0019728:	6a 09                	push   0x9
c001972a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019731:	50                   	push   eax
c0019732:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019738:	e8 4b ef ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001973d:	83 c4 20             	add    esp,0x20
c0019740:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019745:	50                   	push   eax
c0019746:	6a 0a                	push   0xa
c0019748:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001974f:	50                   	push   eax
c0019750:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019756:	e8 2d ef ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001975b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019760:	50                   	push   eax
c0019761:	6a 0b                	push   0xb
c0019763:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001976a:	50                   	push   eax
c001976b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019771:	e8 12 ef ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019776:	83 c4 20             	add    esp,0x20
c0019779:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001977e:	50                   	push   eax
c001977f:	6a 02                	push   0x2
c0019781:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019788:	50                   	push   eax
c0019789:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001978f:	e8 f4 ee ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019794:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019799:	50                   	push   eax
c001979a:	6a 03                	push   0x3
c001979c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00197a3:	50                   	push   eax
c00197a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197aa:	e8 d9 ee ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197af:	83 c4 20             	add    esp,0x20
c00197b2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00197b7:	50                   	push   eax
c00197b8:	6a 04                	push   0x4
c00197ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00197c1:	50                   	push   eax
c00197c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197c8:	e8 bb ee ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00197d2:	50                   	push   eax
c00197d3:	6a 05                	push   0x5
c00197d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00197dc:	50                   	push   eax
c00197dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197e3:	e8 a0 ee ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197e8:	83 c4 20             	add    esp,0x20
c00197eb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00197f0:	0f 94 c0             	sete   al
c00197f3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00197f8:	74 09                	je     c0019803 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00197fa:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019801:	eb 07                	jmp    c001980a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019803:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001980a:	0f b6 c0             	movzx  eax,al
c001980d:	50                   	push   eax
c001980e:	6a 07                	push   0x7
c0019810:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019817:	50                   	push   eax
c0019818:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001981e:	e8 65 ee ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019823:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019827:	83 c4 10             	add    esp,0x10
c001982a:	85 f6                	test   esi,esi
c001982c:	0f 84 ae 00 00 00    	je     c00198e0 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019832:	50                   	push   eax
c0019833:	6a 01                	push   0x1
c0019835:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001983c:	50                   	push   eax
c001983d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019843:	e8 de f8 ff ff       	call   c0019126 <IDE::polling(unsigned char, unsigned int)>
c0019848:	83 c4 10             	add    esp,0x10
c001984b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019851:	84 c0                	test   al,al
c0019853:	74 20                	je     c0019875 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019855:	0f b6 f8             	movzx  edi,al
c0019858:	0f b6 d2             	movzx  edx,dl
c001985b:	57                   	push   edi
c001985c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019863:	50                   	push   eax
c0019864:	52                   	push   edx
c0019865:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001986b:	e8 06 f8 ff ff       	call   c0019076 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019870:	e9 87 00 00 00       	jmp    c00198fc <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019875:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001987a:	74 33                	je     c00198af <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001987c:	31 ed                	xor    ebp,ebp
c001987e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019882:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019886:	50                   	push   eax
c0019887:	50                   	push   eax
c0019888:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001988f:	50                   	push   eax
c0019890:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019896:	e8 db ed ff ff       	call   c0018676 <IDE::getBase(unsigned char)>
c001989b:	89 c2                	mov    edx,eax
c001989d:	89 f8                	mov    eax,edi
c001989f:	66 ef                	out    dx,ax
c00198a1:	45                   	inc    ebp
c00198a2:	83 c4 10             	add    esp,0x10
c00198a5:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00198ab:	75 d1                	jne    c001987e <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c00198ad:	eb 23                	jmp    c00198d2 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c00198af:	0f b6 d2             	movzx  edx,dl
c00198b2:	51                   	push   ecx
c00198b3:	51                   	push   ecx
c00198b4:	52                   	push   edx
c00198b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00198bb:	e8 b6 ed ff ff       	call   c0018676 <IDE::getBase(unsigned char)>
c00198c0:	b9 00 01 00 00       	mov    ecx,0x100
c00198c5:	89 c2                	mov    edx,eax
c00198c7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00198cb:	fc                   	cld    
c00198cc:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00198cf:	83 c4 10             	add    esp,0x10
c00198d2:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00198da:	4e                   	dec    esi
c00198db:	e9 4a ff ff ff       	jmp    c001982a <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00198e0:	31 ff                	xor    edi,edi
c00198e2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00198e7:	74 16                	je     c00198ff <ATA::access(unsigned long long, int, void*, bool)+0x371>
c00198e9:	50                   	push   eax
c00198ea:	50                   	push   eax
c00198eb:	31 c0                	xor    eax,eax
c00198ed:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00198f2:	0f 94 c0             	sete   al
c00198f5:	50                   	push   eax
c00198f6:	53                   	push   ebx
c00198f7:	e8 fc fb ff ff       	call   c00194f8 <ATA::flush(bool)>
c00198fc:	83 c4 10             	add    esp,0x10
c00198ff:	83 c4 2c             	add    esp,0x2c
c0019902:	89 f8                	mov    eax,edi
c0019904:	5b                   	pop    ebx
c0019905:	5e                   	pop    esi
c0019906:	5f                   	pop    edi
c0019907:	5d                   	pop    ebp
c0019908:	c3                   	ret    
c0019909:	90                   	nop

c001990a <ATA::read(unsigned long long, int, void*)>:
c001990a:	57                   	push   edi
c001990b:	b8 04 00 00 00       	mov    eax,0x4
c0019910:	56                   	push   esi
c0019911:	53                   	push   ebx
c0019912:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019916:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001991a:	8d 7a ff             	lea    edi,[edx-0x1]
c001991d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019921:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019925:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001992b:	77 25                	ja     c0019952 <ATA::read(unsigned long long, int, void*)+0x48>
c001992d:	b8 06 00 00 00       	mov    eax,0x6
c0019932:	85 f6                	test   esi,esi
c0019934:	74 1c                	je     c0019952 <ATA::read(unsigned long long, int, void*)+0x48>
c0019936:	50                   	push   eax
c0019937:	50                   	push   eax
c0019938:	6a 00                	push   0x0
c001993a:	56                   	push   esi
c001993b:	52                   	push   edx
c001993c:	53                   	push   ebx
c001993d:	51                   	push   ecx
c001993e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019942:	e8 47 fc ff ff       	call   c001958e <ATA::access(unsigned long long, int, void*, bool)>
c0019947:	83 c4 20             	add    esp,0x20
c001994a:	85 c0                	test   eax,eax
c001994c:	0f 95 c0             	setne  al
c001994f:	0f b6 c0             	movzx  eax,al
c0019952:	5b                   	pop    ebx
c0019953:	5e                   	pop    esi
c0019954:	5f                   	pop    edi
c0019955:	c3                   	ret    

c0019956 <ATA::write(unsigned long long, int, void*)>:
c0019956:	57                   	push   edi
c0019957:	b8 04 00 00 00       	mov    eax,0x4
c001995c:	56                   	push   esi
c001995d:	53                   	push   ebx
c001995e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019962:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019966:	8d 7a ff             	lea    edi,[edx-0x1]
c0019969:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001996d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019971:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019977:	77 25                	ja     c001999e <ATA::write(unsigned long long, int, void*)+0x48>
c0019979:	b8 06 00 00 00       	mov    eax,0x6
c001997e:	85 f6                	test   esi,esi
c0019980:	74 1c                	je     c001999e <ATA::write(unsigned long long, int, void*)+0x48>
c0019982:	50                   	push   eax
c0019983:	50                   	push   eax
c0019984:	6a 01                	push   0x1
c0019986:	56                   	push   esi
c0019987:	52                   	push   edx
c0019988:	53                   	push   ebx
c0019989:	51                   	push   ecx
c001998a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001998e:	e8 fb fb ff ff       	call   c001958e <ATA::access(unsigned long long, int, void*, bool)>
c0019993:	83 c4 20             	add    esp,0x20
c0019996:	85 c0                	test   eax,eax
c0019998:	0f 95 c0             	setne  al
c001999b:	0f b6 c0             	movzx  eax,al
c001999e:	5b                   	pop    ebx
c001999f:	5e                   	pop    esi
c00199a0:	5f                   	pop    edi
c00199a1:	c3                   	ret    

c00199a2 <ATA::detectCHS()>:
c00199a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00199a6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00199ac:	c1 e0 06             	shl    eax,0x6
c00199af:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00199b5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00199bf:	c7 44 24 04 40 ea 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ea40
c00199c7:	e9 d5 5b ff ff       	jmp    c000f5a1 <Krnl::panic(char const*)>

c00199cc <ATA::open(int, int, void*)>:
c00199cc:	53                   	push   ebx
c00199cd:	83 ec 08             	sub    esp,0x8
c00199d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00199d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199dc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00199e2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00199e8:	c1 e0 06             	shl    eax,0x6
c00199eb:	01 d0                	add    eax,edx
c00199ed:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00199f4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00199fa:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019a01:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019a0b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019a11:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019a18:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0019a1f:	75 0c                	jne    c0019a2d <ATA::open(int, int, void*)+0x61>
c0019a21:	83 ec 0c             	sub    esp,0xc
c0019a24:	53                   	push   ebx
c0019a25:	e8 78 ff ff ff       	call   c00199a2 <ATA::detectCHS()>
c0019a2a:	83 c4 10             	add    esp,0x10
c0019a2d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019a33:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019a39:	c1 e0 06             	shl    eax,0x6
c0019a3c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019a43:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019a4d:	d1 e8                	shr    eax,1
c0019a4f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019a55:	6a 04                	push   0x4
c0019a57:	6a 0c                	push   0xc
c0019a59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a60:	50                   	push   eax
c0019a61:	52                   	push   edx
c0019a62:	e8 21 ec ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a67:	90                   	nop
c0019a68:	90                   	nop
c0019a69:	6a 00                	push   0x0
c0019a6b:	6a 0c                	push   0xc
c0019a6d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a74:	50                   	push   eax
c0019a75:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a7b:	e8 08 ec ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a80:	83 c4 14             	add    esp,0x14
c0019a83:	53                   	push   ebx
c0019a84:	e8 15 18 ff ff       	call   c000b29e <PhysicalDisk::startCache()>
c0019a89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a8c:	e8 85 28 ff ff       	call   c000c316 <createPartitionsForDisk(PhysicalDisk*)>
c0019a91:	31 c0                	xor    eax,eax
c0019a93:	83 c4 18             	add    esp,0x18
c0019a96:	5b                   	pop    ebx
c0019a97:	c3                   	ret    

c0019a98 <ATAPI::write(unsigned long long, int, void*)>:
c0019a98:	b8 03 00 00 00       	mov    eax,0x3
c0019a9d:	c3                   	ret    

c0019a9e <ATAPI::close(int, int, void*)>:
c0019a9e:	83 ec 0c             	sub    esp,0xc
c0019aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aa5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019aab:	85 c0                	test   eax,eax
c0019aad:	74 0c                	je     c0019abb <ATAPI::close(int, int, void*)+0x1d>
c0019aaf:	83 ec 0c             	sub    esp,0xc
c0019ab2:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ab4:	50                   	push   eax
c0019ab5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019ab8:	83 c4 10             	add    esp,0x10
c0019abb:	31 c0                	xor    eax,eax
c0019abd:	83 c4 0c             	add    esp,0xc
c0019ac0:	c3                   	ret    
c0019ac1:	90                   	nop

c0019ac2 <ATAPI::ATAPI()>:
c0019ac2:	83 ec 0c             	sub    esp,0xc
c0019ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ac9:	83 ec 04             	sub    esp,0x4
c0019acc:	68 00 08 00 00       	push   0x800
c0019ad1:	68 89 eb 01 c0       	push   0xc001eb89
c0019ad6:	50                   	push   eax
c0019ad7:	e8 5a 17 ff ff       	call   c000b236 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019adc:	83 c4 10             	add    esp,0x10
c0019adf:	ba a4 ea 01 c0       	mov    edx,0xc001eaa4
c0019ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ae8:	89 10                	mov    DWORD PTR [eax],edx
c0019aea:	90                   	nop
c0019aeb:	83 c4 0c             	add    esp,0xc
c0019aee:	c3                   	ret    
c0019aef:	90                   	nop

c0019af0 <ATAPI::readyForCommand()>:
c0019af0:	56                   	push   esi
c0019af1:	53                   	push   ebx
c0019af2:	53                   	push   ebx
c0019af3:	31 db                	xor    ebx,ebx
c0019af5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019af9:	51                   	push   ecx
c0019afa:	6a 0c                	push   0xc
c0019afc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019b03:	50                   	push   eax
c0019b04:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019b0a:	e8 39 ec ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0019b0f:	83 c4 10             	add    esp,0x10
c0019b12:	a8 88                	test   al,0x88
c0019b14:	74 25                	je     c0019b3b <ATAPI::readyForCommand()+0x4b>
c0019b16:	43                   	inc    ebx
c0019b17:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0019b1d:	7e da                	jle    c0019af9 <ATAPI::readyForCommand()+0x9>
c0019b1f:	83 ec 0c             	sub    esp,0xc
c0019b22:	68 5e 01 00 00       	push   0x15e
c0019b27:	e8 54 92 ff ff       	call   c0012d80 <milliTenthSleep(unsigned int)>
c0019b2c:	83 c4 10             	add    esp,0x10
c0019b2f:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0019b35:	75 c2                	jne    c0019af9 <ATAPI::readyForCommand()+0x9>
c0019b37:	31 c0                	xor    eax,eax
c0019b39:	eb 02                	jmp    c0019b3d <ATAPI::readyForCommand()+0x4d>
c0019b3b:	b0 01                	mov    al,0x1
c0019b3d:	5a                   	pop    edx
c0019b3e:	5b                   	pop    ebx
c0019b3f:	5e                   	pop    esi
c0019b40:	c3                   	ret    
c0019b41:	90                   	nop

c0019b42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0019b42:	55                   	push   ebp
c0019b43:	57                   	push   edi
c0019b44:	56                   	push   esi
c0019b45:	53                   	push   ebx
c0019b46:	83 ec 20             	sub    esp,0x20
c0019b49:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019b4d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019b51:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019b55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019b59:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019b5d:	6a 01                	push   0x1
c0019b5f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b66:	50                   	push   eax
c0019b67:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b6d:	e8 24 ed ff ff       	call   c0018896 <IDE::enableIRQs(unsigned char, bool)>
c0019b72:	5e                   	pop    esi
c0019b73:	58                   	pop    eax
c0019b74:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b7b:	50                   	push   eax
c0019b7c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b82:	e8 db ea ff ff       	call   c0018662 <IDE::prepareInterrupt(unsigned char)>
c0019b87:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019b8a:	e8 61 ff ff ff       	call   c0019af0 <ATAPI::readyForCommand()>
c0019b8f:	83 c4 10             	add    esp,0x10
c0019b92:	84 c0                	test   al,al
c0019b94:	75 0a                	jne    c0019ba0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0019b96:	bb 01 00 00 00       	mov    ebx,0x1
c0019b9b:	e9 57 02 00 00       	jmp    c0019df7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019ba0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0019ba6:	c1 e0 04             	shl    eax,0x4
c0019ba9:	0f b6 c0             	movzx  eax,al
c0019bac:	50                   	push   eax
c0019bad:	6a 06                	push   0x6
c0019baf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019bb6:	50                   	push   eax
c0019bb7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019bbd:	e8 c6 ea ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bc2:	6a 00                	push   0x0
c0019bc4:	6a 01                	push   0x1
c0019bc6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019bcd:	50                   	push   eax
c0019bce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019bd4:	e8 af ea ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bd9:	83 c4 20             	add    esp,0x20
c0019bdc:	0f b6 c3             	movzx  eax,bl
c0019bdf:	0f b6 df             	movzx  ebx,bh
c0019be2:	50                   	push   eax
c0019be3:	6a 04                	push   0x4
c0019be5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019bec:	50                   	push   eax
c0019bed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019bf3:	e8 90 ea ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bf8:	53                   	push   ebx
c0019bf9:	6a 05                	push   0x5
c0019bfb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019c02:	50                   	push   eax
c0019c03:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c09:	e8 7a ea ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c0e:	83 c4 20             	add    esp,0x20
c0019c11:	68 a0 00 00 00       	push   0xa0
c0019c16:	6a 07                	push   0x7
c0019c18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019c1f:	50                   	push   eax
c0019c20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c26:	e8 5d ea ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c2b:	83 c4 0c             	add    esp,0xc
c0019c2e:	6a 01                	push   0x1
c0019c30:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019c37:	50                   	push   eax
c0019c38:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c3e:	e8 e3 f4 ff ff       	call   c0019126 <IDE::polling(unsigned char, unsigned int)>
c0019c43:	83 c4 10             	add    esp,0x10
c0019c46:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0019c4c:	84 c0                	test   al,al
c0019c4e:	74 23                	je     c0019c73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0019c50:	0f b6 d8             	movzx  ebx,al
c0019c53:	0f b6 d2             	movzx  edx,dl
c0019c56:	53                   	push   ebx
c0019c57:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0019c5e:	50                   	push   eax
c0019c5f:	52                   	push   edx
c0019c60:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c66:	e8 0b f4 ff ff       	call   c0019076 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019c6b:	83 c4 10             	add    esp,0x10
c0019c6e:	e9 84 01 00 00       	jmp    c0019df7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019c73:	0f b6 d2             	movzx  edx,dl
c0019c76:	53                   	push   ebx
c0019c77:	53                   	push   ebx
c0019c78:	52                   	push   edx
c0019c79:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c7f:	e8 f2 e9 ff ff       	call   c0018676 <IDE::getBase(unsigned char)>
c0019c84:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019c88:	b9 06 00 00 00       	mov    ecx,0x6
c0019c8d:	89 c2                	mov    edx,eax
c0019c8f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0019c92:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0019c96:	83 c4 10             	add    esp,0x10
c0019c99:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019c9f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019ca6:	85 db                	test   ebx,ebx
c0019ca8:	0f 84 ec 00 00 00    	je     c0019d9a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0019cae:	51                   	push   ecx
c0019caf:	51                   	push   ecx
c0019cb0:	52                   	push   edx
c0019cb1:	50                   	push   eax
c0019cb2:	e8 3f eb ff ff       	call   c00187f6 <IDE::waitInterrupt(unsigned char)>
c0019cb7:	83 c4 10             	add    esp,0x10
c0019cba:	84 c0                	test   al,al
c0019cbc:	0f 84 d4 fe ff ff    	je     c0019b96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019cc2:	56                   	push   esi
c0019cc3:	56                   	push   esi
c0019cc4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019ccb:	50                   	push   eax
c0019ccc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019cd2:	e8 8b e9 ff ff       	call   c0018662 <IDE::prepareInterrupt(unsigned char)>
c0019cd7:	83 c4 0c             	add    esp,0xc
c0019cda:	6a 04                	push   0x4
c0019cdc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019ce3:	50                   	push   eax
c0019ce4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019cea:	e8 59 ea ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0019cef:	83 c4 0c             	add    esp,0xc
c0019cf2:	89 c6                	mov    esi,eax
c0019cf4:	6a 05                	push   0x5
c0019cf6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019cfd:	50                   	push   eax
c0019cfe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019d04:	e8 3f ea ff ff       	call   c0018748 <IDE::read(unsigned char, unsigned char)>
c0019d09:	89 f1                	mov    ecx,esi
c0019d0b:	0f b6 c0             	movzx  eax,al
c0019d0e:	0f b6 f1             	movzx  esi,cl
c0019d11:	c1 e0 08             	shl    eax,0x8
c0019d14:	09 c6                	or     esi,eax
c0019d16:	d1 fe                	sar    esi,1
c0019d18:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0019d1c:	83 c4 10             	add    esp,0x10
c0019d1f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019d24:	74 41                	je     c0019d67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0019d26:	31 c9                	xor    ecx,ecx
c0019d28:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019d2e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019d35:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0019d39:	75 0a                	jne    c0019d45 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0019d3b:	01 c9                	add    ecx,ecx
c0019d3d:	01 cd                	add    ebp,ecx
c0019d3f:	4b                   	dec    ebx
c0019d40:	e9 54 ff ff ff       	jmp    c0019c99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0019d45:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0019d4a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019d4e:	51                   	push   ecx
c0019d4f:	51                   	push   ecx
c0019d50:	52                   	push   edx
c0019d51:	50                   	push   eax
c0019d52:	e8 1f e9 ff ff       	call   c0018676 <IDE::getBase(unsigned char)>
c0019d57:	89 c2                	mov    edx,eax
c0019d59:	89 f0                	mov    eax,esi
c0019d5b:	66 ef                	out    dx,ax
c0019d5d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d61:	83 c4 10             	add    esp,0x10
c0019d64:	41                   	inc    ecx
c0019d65:	eb c1                	jmp    c0019d28 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0019d67:	31 f6                	xor    esi,esi
c0019d69:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019d6f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019d76:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0019d7a:	75 06                	jne    c0019d82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0019d7c:	01 f6                	add    esi,esi
c0019d7e:	01 f5                	add    ebp,esi
c0019d80:	eb bd                	jmp    c0019d3f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0019d82:	51                   	push   ecx
c0019d83:	51                   	push   ecx
c0019d84:	52                   	push   edx
c0019d85:	50                   	push   eax
c0019d86:	e8 eb e8 ff ff       	call   c0018676 <IDE::getBase(unsigned char)>
c0019d8b:	89 c2                	mov    edx,eax
c0019d8d:	66 ed                	in     ax,dx
c0019d8f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0019d94:	83 c4 10             	add    esp,0x10
c0019d97:	46                   	inc    esi
c0019d98:	eb cf                	jmp    c0019d69 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0019d9a:	51                   	push   ecx
c0019d9b:	51                   	push   ecx
c0019d9c:	52                   	push   edx
c0019d9d:	50                   	push   eax
c0019d9e:	e8 53 ea ff ff       	call   c00187f6 <IDE::waitInterrupt(unsigned char)>
c0019da3:	83 c4 10             	add    esp,0x10
c0019da6:	84 c0                	test   al,al
c0019da8:	0f 84 e8 fd ff ff    	je     c0019b96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019dae:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019db3:	52                   	push   edx
c0019db4:	52                   	push   edx
c0019db5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019dbc:	50                   	push   eax
c0019dbd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019dc3:	e8 9a e8 ff ff       	call   c0018662 <IDE::prepareInterrupt(unsigned char)>
c0019dc8:	83 c4 10             	add    esp,0x10
c0019dcb:	50                   	push   eax
c0019dcc:	50                   	push   eax
c0019dcd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019dd4:	50                   	push   eax
c0019dd5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ddb:	e8 96 e8 ff ff       	call   c0018676 <IDE::getBase(unsigned char)>
c0019de0:	8d 50 07             	lea    edx,[eax+0x7]
c0019de3:	ec                   	in     al,dx
c0019de4:	83 c4 10             	add    esp,0x10
c0019de7:	a8 88                	test   al,0x88
c0019de9:	74 0a                	je     c0019df5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0019deb:	4b                   	dec    ebx
c0019dec:	75 dd                	jne    c0019dcb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0019dee:	bb 02 00 00 00       	mov    ebx,0x2
c0019df3:	eb 02                	jmp    c0019df7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019df5:	31 db                	xor    ebx,ebx
c0019df7:	83 c4 1c             	add    esp,0x1c
c0019dfa:	89 d8                	mov    eax,ebx
c0019dfc:	5b                   	pop    ebx
c0019dfd:	5e                   	pop    esi
c0019dfe:	5f                   	pop    edi
c0019dff:	5d                   	pop    ebp
c0019e00:	c3                   	ret    
c0019e01:	90                   	nop

c0019e02 <ATAPI::diskRemoved()>:
c0019e02:	53                   	push   ebx
c0019e03:	83 ec 14             	sub    esp,0x14
c0019e06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019e0a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019e11:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0019e17:	e8 7a 22 ff ff       	call   c000c096 <LogicalDisk::unmount()>
c0019e1c:	58                   	pop    eax
c0019e1d:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0019e23:	e8 b4 2b ff ff       	call   c000c9dc <VCache::writeWriteBuffer()>
c0019e28:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019e2e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019e32:	83 c4 18             	add    esp,0x18
c0019e35:	5b                   	pop    ebx
c0019e36:	e9 91 2b ff ff       	jmp    c000c9cc <VCache::invalidateReadBuffer()>
c0019e3b:	90                   	nop

c0019e3c <ATAPI::eject()>:
c0019e3c:	57                   	push   edi
c0019e3d:	b9 03 00 00 00       	mov    ecx,0x3
c0019e42:	53                   	push   ebx
c0019e43:	83 ec 14             	sub    esp,0x14
c0019e46:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019e4a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0019e4e:	fc                   	cld    
c0019e4f:	31 c0                	xor    eax,eax
c0019e51:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019e53:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0019e58:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0019e5d:	50                   	push   eax
c0019e5e:	50                   	push   eax
c0019e5f:	6a 00                	push   0x0
c0019e61:	6a 00                	push   0x0
c0019e63:	6a 00                	push   0x0
c0019e65:	6a 02                	push   0x2
c0019e67:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019e6b:	50                   	push   eax
c0019e6c:	53                   	push   ebx
c0019e6d:	e8 d0 fc ff ff       	call   c0019b42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019e72:	83 c4 14             	add    esp,0x14
c0019e75:	53                   	push   ebx
c0019e76:	e8 87 ff ff ff       	call   c0019e02 <ATAPI::diskRemoved()>
c0019e7b:	83 c4 24             	add    esp,0x24
c0019e7e:	31 c0                	xor    eax,eax
c0019e80:	5b                   	pop    ebx
c0019e81:	5f                   	pop    edi
c0019e82:	c3                   	ret    
c0019e83:	90                   	nop

c0019e84 <ATAPI::diskInserted()>:
c0019e84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e88:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0019e8f:	c3                   	ret    

c0019e90 <ATAPI::detectMedia()>:
c0019e90:	56                   	push   esi
c0019e91:	53                   	push   ebx
c0019e92:	83 ec 28             	sub    esp,0x28
c0019e95:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019e99:	6a 0c                	push   0xc
c0019e9b:	6a 00                	push   0x0
c0019e9d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0019ea1:	56                   	push   esi
c0019ea2:	e8 49 66 fe ff       	call   c00004f0 <memset>
c0019ea7:	58                   	pop    eax
c0019ea8:	5a                   	pop    edx
c0019ea9:	6a 00                	push   0x0
c0019eab:	6a 00                	push   0x0
c0019ead:	6a 00                	push   0x0
c0019eaf:	6a 00                	push   0x0
c0019eb1:	56                   	push   esi
c0019eb2:	53                   	push   ebx
c0019eb3:	e8 8a fc ff ff       	call   c0019b42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019eb8:	83 c4 1c             	add    esp,0x1c
c0019ebb:	6a 0c                	push   0xc
c0019ebd:	6a 00                	push   0x0
c0019ebf:	56                   	push   esi
c0019ec0:	e8 2b 66 fe ff       	call   c00004f0 <memset>
c0019ec5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0019eca:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0019ecf:	59                   	pop    ecx
c0019ed0:	58                   	pop    eax
c0019ed1:	6a 01                	push   0x1
c0019ed3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0019ed7:	50                   	push   eax
c0019ed8:	6a 00                	push   0x0
c0019eda:	6a 12                	push   0x12
c0019edc:	56                   	push   esi
c0019edd:	53                   	push   ebx
c0019ede:	e8 5f fc ff ff       	call   c0019b42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019ee3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0019ee7:	83 c4 20             	add    esp,0x20
c0019eea:	83 e0 7f             	and    eax,0x7f
c0019eed:	3c 70                	cmp    al,0x70
c0019eef:	74 15                	je     c0019f06 <ATAPI::detectMedia()+0x76>
c0019ef1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019ef8:	75 0c                	jne    c0019f06 <ATAPI::detectMedia()+0x76>
c0019efa:	83 ec 0c             	sub    esp,0xc
c0019efd:	53                   	push   ebx
c0019efe:	e8 81 ff ff ff       	call   c0019e84 <ATAPI::diskInserted()>
c0019f03:	83 c4 10             	add    esp,0x10
c0019f06:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019f0a:	83 e0 0f             	and    eax,0xf
c0019f0d:	3c 02                	cmp    al,0x2
c0019f0f:	75 1b                	jne    c0019f2c <ATAPI::detectMedia()+0x9c>
c0019f11:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0019f16:	75 2d                	jne    c0019f45 <ATAPI::detectMedia()+0xb5>
c0019f18:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019f1f:	74 24                	je     c0019f45 <ATAPI::detectMedia()+0xb5>
c0019f21:	83 ec 0c             	sub    esp,0xc
c0019f24:	53                   	push   ebx
c0019f25:	e8 d8 fe ff ff       	call   c0019e02 <ATAPI::diskRemoved()>
c0019f2a:	eb 16                	jmp    c0019f42 <ATAPI::detectMedia()+0xb2>
c0019f2c:	84 c0                	test   al,al
c0019f2e:	75 15                	jne    c0019f45 <ATAPI::detectMedia()+0xb5>
c0019f30:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019f37:	75 0c                	jne    c0019f45 <ATAPI::detectMedia()+0xb5>
c0019f39:	83 ec 0c             	sub    esp,0xc
c0019f3c:	53                   	push   ebx
c0019f3d:	e8 42 ff ff ff       	call   c0019e84 <ATAPI::diskInserted()>
c0019f42:	83 c4 10             	add    esp,0x10
c0019f45:	83 c4 24             	add    esp,0x24
c0019f48:	5b                   	pop    ebx
c0019f49:	5e                   	pop    esi
c0019f4a:	c3                   	ret    
c0019f4b:	90                   	nop

c0019f4c <ATAPI::open(int, int, void*)>:
c0019f4c:	56                   	push   esi
c0019f4d:	53                   	push   ebx
c0019f4e:	50                   	push   eax
c0019f4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f5b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019f61:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019f67:	c1 e0 06             	shl    eax,0x6
c0019f6a:	01 d0                	add    eax,edx
c0019f6c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0019f73:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0019f79:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0019f80:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0019f8a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0019f90:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0019f97:	6a 04                	push   0x4
c0019f99:	6a 0c                	push   0xc
c0019f9b:	51                   	push   ecx
c0019f9c:	52                   	push   edx
c0019f9d:	e8 e6 e6 ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fa2:	90                   	nop
c0019fa3:	90                   	nop
c0019fa4:	6a 00                	push   0x0
c0019fa6:	6a 0c                	push   0xc
c0019fa8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019faf:	50                   	push   eax
c0019fb0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fb6:	e8 cd e6 ff ff       	call   c0018688 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fbb:	83 c4 14             	add    esp,0x14
c0019fbe:	68 74 01 00 00       	push   0x174
c0019fc3:	e8 9d cc fe ff       	call   c0006c65 <malloc>
c0019fc8:	83 c4 0c             	add    esp,0xc
c0019fcb:	89 c6                	mov    esi,eax
c0019fcd:	6a 00                	push   0x0
c0019fcf:	68 ff ff ff 7f       	push   0x7fffffff
c0019fd4:	6a 00                	push   0x0
c0019fd6:	6a 00                	push   0x0
c0019fd8:	53                   	push   ebx
c0019fd9:	68 72 ec 01 c0       	push   0xc001ec72
c0019fde:	50                   	push   eax
c0019fdf:	e8 fe 1e ff ff       	call   c000bee2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0019fe4:	83 c4 14             	add    esp,0x14
c0019fe7:	56                   	push   esi
c0019fe8:	e8 ab 1f ff ff       	call   c000bf98 <LogicalDisk::assignDriveLetter()>
c0019fed:	5a                   	pop    edx
c0019fee:	0f be c0             	movsx  eax,al
c0019ff1:	59                   	pop    ecx
c0019ff2:	50                   	push   eax
c0019ff3:	68 8c ea 01 c0       	push   0xc001ea8c
c0019ff8:	e8 2b fa fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c0019ffd:	58                   	pop    eax
c0019ffe:	5a                   	pop    edx
c0019fff:	56                   	push   esi
c001a000:	53                   	push   ebx
c001a001:	e8 62 0e ff ff       	call   c000ae68 <Device::addChild(Device*)>
c001a006:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a00c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a00f:	e8 8a 12 ff ff       	call   c000b29e <PhysicalDisk::startCache()>
c001a014:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a01b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a01e:	e8 6d fe ff ff       	call   c0019e90 <ATAPI::detectMedia()>
c001a023:	83 c4 14             	add    esp,0x14
c001a026:	31 c0                	xor    eax,eax
c001a028:	5b                   	pop    ebx
c001a029:	5e                   	pop    esi
c001a02a:	c3                   	ret    
c001a02b:	90                   	nop

c001a02c <ATAPI::read(unsigned long long, int, void*)>:
c001a02c:	55                   	push   ebp
c001a02d:	57                   	push   edi
c001a02e:	56                   	push   esi
c001a02f:	53                   	push   ebx
c001a030:	83 ec 1c             	sub    esp,0x1c
c001a033:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a037:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a03b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a03f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a046:	74 3c                	je     c001a084 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a048:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a04c:	b9 03 00 00 00       	mov    ecx,0x3
c001a051:	fc                   	cld    
c001a052:	31 c0                	xor    eax,eax
c001a054:	0f ce                	bswap  esi
c001a056:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a058:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a05d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a061:	89 e8                	mov    eax,ebp
c001a063:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a067:	50                   	push   eax
c001a068:	50                   	push   eax
c001a069:	55                   	push   ebp
c001a06a:	c1 e5 0b             	shl    ebp,0xb
c001a06d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a071:	6a 00                	push   0x0
c001a073:	55                   	push   ebp
c001a074:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a078:	50                   	push   eax
c001a079:	53                   	push   ebx
c001a07a:	e8 c3 fa ff ff       	call   c0019b42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a07f:	83 c4 20             	add    esp,0x20
c001a082:	eb 1a                	jmp    c001a09e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a084:	83 ec 0c             	sub    esp,0xc
c001a087:	53                   	push   ebx
c001a088:	e8 03 fe ff ff       	call   c0019e90 <ATAPI::detectMedia()>
c001a08d:	83 c4 10             	add    esp,0x10
c001a090:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a097:	75 af                	jne    c001a048 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a099:	b8 02 00 00 00       	mov    eax,0x2
c001a09e:	83 c4 1c             	add    esp,0x1c
c001a0a1:	5b                   	pop    ebx
c001a0a2:	5e                   	pop    esi
c001a0a3:	5f                   	pop    edi
c001a0a4:	5d                   	pop    ebp
c001a0a5:	c3                   	ret    

c001a0a6 <SATA::close(int, int, void*)>:
c001a0a6:	83 ec 0c             	sub    esp,0xc
c001a0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a0b3:	85 c0                	test   eax,eax
c001a0b5:	74 0c                	je     c001a0c3 <SATA::close(int, int, void*)+0x1d>
c001a0b7:	83 ec 0c             	sub    esp,0xc
c001a0ba:	8b 10                	mov    edx,DWORD PTR [eax]
c001a0bc:	50                   	push   eax
c001a0bd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a0c0:	83 c4 10             	add    esp,0x10
c001a0c3:	31 c0                	xor    eax,eax
c001a0c5:	83 c4 0c             	add    esp,0xc
c001a0c8:	c3                   	ret    
c001a0c9:	90                   	nop

c001a0ca <SATA::powerSaving(PowerSavingLevel)>:
c001a0ca:	c3                   	ret    
c001a0cb:	90                   	nop

c001a0cc <SATA::open(int, int, void*)>:
c001a0cc:	56                   	push   esi
c001a0cd:	53                   	push   ebx
c001a0ce:	50                   	push   eax
c001a0cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a0d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0d7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a0e1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a0e7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a0f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0f5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a0ff:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a105:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a10c:	e8 21 cf fe ff       	call   c0007032 <Phys::allocatePage()>
c001a111:	89 c6                	mov    esi,eax
c001a113:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a119:	81 c6 00 10 00 00    	add    esi,0x1000
c001a11f:	e8 0e cf fe ff       	call   c0007032 <Phys::allocatePage()>
c001a124:	39 c6                	cmp    esi,eax
c001a126:	74 10                	je     c001a138 <SATA::open(int, int, void*)+0x6c>
c001a128:	83 ec 0c             	sub    esp,0xc
c001a12b:	68 d4 ea 01 c0       	push   0xc001ead4
c001a130:	e8 6c 54 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001a135:	83 c4 10             	add    esp,0x10
c001a138:	83 ec 0c             	sub    esp,0xc
c001a13b:	6a 02                	push   0x2
c001a13d:	e8 5f e6 fe ff       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c001a142:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a148:	6a 03                	push   0x3
c001a14a:	50                   	push   eax
c001a14b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a151:	ff 35 f4 f6 01 c0    	push   DWORD PTR ds:0xc001f6f4
c001a157:	e8 9e ec fe ff       	call   c0008dfa <VAS::mapPage(unsigned long, unsigned long, int)>
c001a15c:	83 c4 14             	add    esp,0x14
c001a15f:	53                   	push   ebx
c001a160:	e8 39 11 ff ff       	call   c000b29e <PhysicalDisk::startCache()>
c001a165:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a168:	e8 a9 21 ff ff       	call   c000c316 <createPartitionsForDisk(PhysicalDisk*)>
c001a16d:	83 c4 14             	add    esp,0x14
c001a170:	31 c0                	xor    eax,eax
c001a172:	5b                   	pop    ebx
c001a173:	5e                   	pop    esi
c001a174:	c3                   	ret    
c001a175:	90                   	nop

c001a176 <SATA::SATA()>:
c001a176:	83 ec 0c             	sub    esp,0xc
c001a179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a17d:	83 ec 04             	sub    esp,0x4
c001a180:	68 00 02 00 00       	push   0x200
c001a185:	68 e8 ea 01 c0       	push   0xc001eae8
c001a18a:	50                   	push   eax
c001a18b:	e8 a6 10 ff ff       	call   c000b236 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a190:	83 c4 10             	add    esp,0x10
c001a193:	ba 58 eb 01 c0       	mov    edx,0xc001eb58
c001a198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a19c:	89 10                	mov    DWORD PTR [eax],edx
c001a19e:	90                   	nop
c001a19f:	83 c4 0c             	add    esp,0xc
c001a1a2:	c3                   	ret    
c001a1a3:	90                   	nop

c001a1a4 <SATA::access(unsigned long long, int, void*, bool)>:
c001a1a4:	55                   	push   ebp
c001a1a5:	57                   	push   edi
c001a1a6:	56                   	push   esi
c001a1a7:	53                   	push   ebx
c001a1a8:	83 ec 2c             	sub    esp,0x2c
c001a1ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a1af:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a1b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a1b7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a1bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a1bf:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a1c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1c8:	7e 10                	jle    c001a1da <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a1ca:	83 ec 0c             	sub    esp,0xc
c001a1cd:	68 f8 ea 01 c0       	push   0xc001eaf8
c001a1d2:	e8 ca 53 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001a1d7:	83 c4 10             	add    esp,0x10
c001a1da:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a1e0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a1e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a1ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1f0:	89 d0                	mov    eax,edx
c001a1f2:	c1 e0 07             	shl    eax,0x7
c001a1f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a1f9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a203:	51                   	push   ecx
c001a204:	8d 42 02             	lea    eax,[edx+0x2]
c001a207:	51                   	push   ecx
c001a208:	c1 e0 07             	shl    eax,0x7
c001a20b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a20f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a213:	50                   	push   eax
c001a214:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a21a:	e8 f1 ef ff ff       	call   c0019210 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a21f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a223:	83 c4 10             	add    esp,0x10
c001a226:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a22b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a22f:	0f 84 4f 01 00 00    	je     c001a384 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a235:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a239:	c1 e0 09             	shl    eax,0x9
c001a23c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a241:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a245:	74 0e                	je     c001a255 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a247:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a24d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a251:	89 c1                	mov    ecx,eax
c001a253:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a255:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a259:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a25f:	8d 42 02             	lea    eax,[edx+0x2]
c001a262:	c1 e0 07             	shl    eax,0x7
c001a265:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a269:	8b 00                	mov    eax,DWORD PTR [eax]
c001a26b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a271:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a277:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a27b:	c1 e1 05             	shl    ecx,0x5
c001a27e:	01 c8                	add    eax,ecx
c001a280:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a284:	83 e1 01             	and    ecx,0x1
c001a287:	89 ce                	mov    esi,ecx
c001a289:	8a 08                	mov    cl,BYTE PTR [eax]
c001a28b:	c1 e6 06             	shl    esi,0x6
c001a28e:	83 e1 bf             	and    ecx,0xffffffbf
c001a291:	09 f1                	or     ecx,esi
c001a293:	88 08                	mov    BYTE PTR [eax],cl
c001a295:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a297:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a29d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a2a3:	89 08                	mov    DWORD PTR [eax],ecx
c001a2a5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a2ab:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a2b1:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a2b7:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a2ba:	50                   	push   eax
c001a2bb:	68 90 00 00 00       	push   0x90
c001a2c0:	6a 00                	push   0x0
c001a2c2:	56                   	push   esi
c001a2c3:	e8 28 62 fe ff       	call   c00004f0 <memset>
c001a2c8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a2ce:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a2d2:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a2d8:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a2dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a2e0:	83 c4 10             	add    esp,0x10
c001a2e3:	48                   	dec    eax
c001a2e4:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a2e9:	89 c1                	mov    ecx,eax
c001a2eb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a2f1:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a2f6:	09 c8                	or     eax,ecx
c001a2f8:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a2fe:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a301:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a308:	66 25 00 7f          	and    ax,0x7f00
c001a30c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a310:	66 0d 27 80          	or     ax,0x8027
c001a314:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a319:	66 89 06             	mov    WORD PTR [esi],ax
c001a31c:	19 c0                	sbb    eax,eax
c001a31e:	83 e0 f0             	and    eax,0xfffffff0
c001a321:	83 c0 35             	add    eax,0x35
c001a324:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a327:	89 e8                	mov    eax,ebp
c001a329:	c1 e8 10             	shr    eax,0x10
c001a32c:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a32f:	89 e8                	mov    eax,ebp
c001a331:	c1 e8 18             	shr    eax,0x18
c001a334:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a337:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a33b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a33e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a342:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a345:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a349:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a34d:	89 d6                	mov    esi,edx
c001a34f:	31 c0                	xor    eax,eax
c001a351:	c1 e6 07             	shl    esi,0x7
c001a354:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a358:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a35e:	80 e1 88             	and    cl,0x88
c001a361:	74 0a                	je     c001a36d <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a363:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a368:	74 0a                	je     c001a374 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a36a:	40                   	inc    eax
c001a36b:	eb eb                	jmp    c001a358 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a36d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a372:	75 17                	jne    c001a38b <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a374:	83 ec 0c             	sub    esp,0xc
c001a377:	68 31 eb 01 c0       	push   0xc001eb31
c001a37c:	e8 a7 f6 fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001a381:	83 c4 10             	add    esp,0x10
c001a384:	b8 01 00 00 00       	mov    eax,0x1
c001a389:	eb 5d                	jmp    c001a3e8 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a38b:	b8 01 00 00 00       	mov    eax,0x1
c001a390:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a394:	c1 e2 07             	shl    edx,0x7
c001a397:	d3 e0                	shl    eax,cl
c001a399:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a39d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a3a3:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a3a9:	85 c8                	test   eax,ecx
c001a3ab:	74 16                	je     c001a3c3 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a3ad:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a3b3:	0f ba e1 1e          	bt     ecx,0x1e
c001a3b7:	73 ea                	jae    c001a3a3 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a3b9:	83 ec 0c             	sub    esp,0xc
c001a3bc:	68 3f eb 01 c0       	push   0xc001eb3f
c001a3c1:	eb b9                	jmp    c001a37c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a3c3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a3c9:	0f ba e0 1e          	bt     eax,0x1e
c001a3cd:	72 b5                	jb     c001a384 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a3cf:	31 c0                	xor    eax,eax
c001a3d1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a3d6:	75 10                	jne    c001a3e8 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a3d8:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a3de:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a3e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3e8:	83 c4 2c             	add    esp,0x2c
c001a3eb:	5b                   	pop    ebx
c001a3ec:	5e                   	pop    esi
c001a3ed:	5f                   	pop    edi
c001a3ee:	5d                   	pop    ebp
c001a3ef:	c3                   	ret    

c001a3f0 <SATA::read(unsigned long long, int, void*)>:
c001a3f0:	57                   	push   edi
c001a3f1:	b8 04 00 00 00       	mov    eax,0x4
c001a3f6:	56                   	push   esi
c001a3f7:	53                   	push   ebx
c001a3f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a400:	8d 7a ff             	lea    edi,[edx-0x1]
c001a403:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a407:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a40b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a411:	77 25                	ja     c001a438 <SATA::read(unsigned long long, int, void*)+0x48>
c001a413:	b8 06 00 00 00       	mov    eax,0x6
c001a418:	85 f6                	test   esi,esi
c001a41a:	74 1c                	je     c001a438 <SATA::read(unsigned long long, int, void*)+0x48>
c001a41c:	50                   	push   eax
c001a41d:	50                   	push   eax
c001a41e:	6a 00                	push   0x0
c001a420:	56                   	push   esi
c001a421:	52                   	push   edx
c001a422:	53                   	push   ebx
c001a423:	51                   	push   ecx
c001a424:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a428:	e8 77 fd ff ff       	call   c001a1a4 <SATA::access(unsigned long long, int, void*, bool)>
c001a42d:	83 c4 20             	add    esp,0x20
c001a430:	85 c0                	test   eax,eax
c001a432:	0f 95 c0             	setne  al
c001a435:	0f b6 c0             	movzx  eax,al
c001a438:	5b                   	pop    ebx
c001a439:	5e                   	pop    esi
c001a43a:	5f                   	pop    edi
c001a43b:	c3                   	ret    

c001a43c <SATA::write(unsigned long long, int, void*)>:
c001a43c:	55                   	push   ebp
c001a43d:	b8 04 00 00 00       	mov    eax,0x4
c001a442:	57                   	push   edi
c001a443:	56                   	push   esi
c001a444:	53                   	push   ebx
c001a445:	83 ec 0c             	sub    esp,0xc
c001a448:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a44c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a450:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a453:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a457:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a45b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a461:	77 3d                	ja     c001a4a0 <SATA::write(unsigned long long, int, void*)+0x64>
c001a463:	b8 06 00 00 00       	mov    eax,0x6
c001a468:	85 ed                	test   ebp,ebp
c001a46a:	74 34                	je     c001a4a0 <SATA::write(unsigned long long, int, void*)+0x64>
c001a46c:	c1 e3 09             	shl    ebx,0x9
c001a46f:	01 eb                	add    ebx,ebp
c001a471:	89 d6                	mov    esi,edx
c001a473:	89 cf                	mov    edi,ecx
c001a475:	83 c6 01             	add    esi,0x1
c001a478:	83 d7 00             	adc    edi,0x0
c001a47b:	50                   	push   eax
c001a47c:	50                   	push   eax
c001a47d:	6a 01                	push   0x1
c001a47f:	55                   	push   ebp
c001a480:	81 c5 00 02 00 00    	add    ebp,0x200
c001a486:	6a 01                	push   0x1
c001a488:	51                   	push   ecx
c001a489:	52                   	push   edx
c001a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a48e:	e8 11 fd ff ff       	call   c001a1a4 <SATA::access(unsigned long long, int, void*, bool)>
c001a493:	83 c4 20             	add    esp,0x20
c001a496:	89 f2                	mov    edx,esi
c001a498:	89 f9                	mov    ecx,edi
c001a49a:	39 dd                	cmp    ebp,ebx
c001a49c:	75 d3                	jne    c001a471 <SATA::write(unsigned long long, int, void*)+0x35>
c001a49e:	31 c0                	xor    eax,eax
c001a4a0:	83 c4 0c             	add    esp,0xc
c001a4a3:	5b                   	pop    ebx
c001a4a4:	5e                   	pop    esi
c001a4a5:	5f                   	pop    edi
c001a4a6:	5d                   	pop    ebp
c001a4a7:	c3                   	ret    

c001a4a8 <SATAPI::write(unsigned long long, int, void*)>:
c001a4a8:	b8 03 00 00 00       	mov    eax,0x3
c001a4ad:	c3                   	ret    

c001a4ae <SATAPI::close(int, int, void*)>:
c001a4ae:	83 ec 0c             	sub    esp,0xc
c001a4b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4b5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a4bb:	85 c0                	test   eax,eax
c001a4bd:	74 0c                	je     c001a4cb <SATAPI::close(int, int, void*)+0x1d>
c001a4bf:	83 ec 0c             	sub    esp,0xc
c001a4c2:	8b 10                	mov    edx,DWORD PTR [eax]
c001a4c4:	50                   	push   eax
c001a4c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a4c8:	83 c4 10             	add    esp,0x10
c001a4cb:	31 c0                	xor    eax,eax
c001a4cd:	83 c4 0c             	add    esp,0xc
c001a4d0:	c3                   	ret    
c001a4d1:	90                   	nop

c001a4d2 <SATAPI::SATAPI()>:
c001a4d2:	83 ec 0c             	sub    esp,0xc
c001a4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4d9:	83 ec 04             	sub    esp,0x4
c001a4dc:	68 00 08 00 00       	push   0x800
c001a4e1:	68 88 eb 01 c0       	push   0xc001eb88
c001a4e6:	50                   	push   eax
c001a4e7:	e8 4a 0d ff ff       	call   c000b236 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a4ec:	83 c4 10             	add    esp,0x10
c001a4ef:	ba c4 ec 01 c0       	mov    edx,0xc001ecc4
c001a4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4f8:	89 10                	mov    DWORD PTR [eax],edx
c001a4fa:	90                   	nop
c001a4fb:	83 c4 0c             	add    esp,0xc
c001a4fe:	c3                   	ret    
c001a4ff:	90                   	nop

c001a500 <SATAPI::diskRemoved()>:
c001a500:	c3                   	ret    
c001a501:	90                   	nop

c001a502 <SATAPI::diskInserted()>:
c001a502:	83 ec 18             	sub    esp,0x18
c001a505:	68 94 eb 01 c0       	push   0xc001eb94
c001a50a:	e8 19 f5 fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001a50f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a513:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001a51a:	83 c4 1c             	add    esp,0x1c
c001a51d:	c3                   	ret    

c001a51e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001a51e:	55                   	push   ebp
c001a51f:	57                   	push   edi
c001a520:	56                   	push   esi
c001a521:	53                   	push   ebx
c001a522:	83 ec 38             	sub    esp,0x38
c001a525:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001a529:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a52d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001a531:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a535:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a539:	68 ac eb 01 c0       	push   0xc001ebac
c001a53e:	e8 e5 f4 fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001a543:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001a549:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a54f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a553:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001a559:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a55d:	c1 e0 07             	shl    eax,0x7
c001a560:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001a564:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a568:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a572:	5a                   	pop    edx
c001a573:	59                   	pop    ecx
c001a574:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a578:	8d 58 02             	lea    ebx,[eax+0x2]
c001a57b:	c1 e3 07             	shl    ebx,0x7
c001a57e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001a582:	53                   	push   ebx
c001a583:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001a589:	e8 82 ec ff ff       	call   c0019210 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a58e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a592:	83 c4 10             	add    esp,0x10
c001a595:	b8 01 00 00 00       	mov    eax,0x1
c001a59a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a59f:	0f 84 ff 01 00 00    	je     c001a7a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001a5a5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a5ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5ad:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a5b3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a5b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a5bd:	c1 e1 05             	shl    ecx,0x5
c001a5c0:	01 c8                	add    eax,ecx
c001a5c2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a5c4:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001a5ca:	81 c9 25 00 01 00    	or     ecx,0x10025
c001a5d0:	89 08                	mov    DWORD PTR [eax],ecx
c001a5d2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a5d8:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001a5de:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001a5e4:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001a5e7:	8d 7b 40             	lea    edi,[ebx+0x40]
c001a5ea:	50                   	push   eax
c001a5eb:	68 90 00 00 00       	push   0x90
c001a5f0:	6a 00                	push   0x0
c001a5f2:	53                   	push   ebx
c001a5f3:	e8 f8 5e fe ff       	call   c00004f0 <memset>
c001a5f8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001a5fc:	b9 0c 00 00 00       	mov    ecx,0xc
c001a601:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a603:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001a609:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001a60d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001a613:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001a617:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001a61b:	48                   	dec    eax
c001a61c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a621:	89 c1                	mov    ecx,eax
c001a623:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001a629:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a62e:	09 c8                	or     eax,ecx
c001a630:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001a636:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001a639:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001a640:	66 25 00 7f          	and    ax,0x7f00
c001a644:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a648:	66 0d 27 80          	or     ax,0x8027
c001a64c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001a650:	66 89 03             	mov    WORD PTR [ebx],ax
c001a653:	89 d0                	mov    eax,edx
c001a655:	c1 ea 18             	shr    edx,0x18
c001a658:	c1 e8 10             	shr    eax,0x10
c001a65b:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001a65e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001a661:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a665:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001a668:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a66c:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001a66f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a673:	83 c4 10             	add    esp,0x10
c001a676:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001a67a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a67e:	31 c0                	xor    eax,eax
c001a680:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001a686:	80 e1 88             	and    cl,0x88
c001a689:	74 0a                	je     c001a695 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001a68b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a690:	74 0a                	je     c001a69c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001a692:	40                   	inc    eax
c001a693:	eb eb                	jmp    c001a680 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001a695:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a69a:	75 0a                	jne    c001a6a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001a69c:	83 ec 0c             	sub    esp,0xc
c001a69f:	68 c6 eb 01 c0       	push   0xc001ebc6
c001a6a4:	eb 43                	jmp    c001a6e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a6a6:	be 01 00 00 00       	mov    esi,0x1
c001a6ab:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a6af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a6b3:	d3 e6                	shl    esi,cl
c001a6b5:	c1 e7 07             	shl    edi,0x7
c001a6b8:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001a6be:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c001a6c3:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001a6c7:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001a6cd:	85 c6                	test   esi,eax
c001a6cf:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001a6d5:	0f 84 96 00 00 00    	je     c001a771 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c001a6db:	0f ba e0 1e          	bt     eax,0x1e
c001a6df:	73 1a                	jae    c001a6fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c001a6e1:	83 ec 0c             	sub    esp,0xc
c001a6e4:	68 db eb 01 c0       	push   0xc001ebdb
c001a6e9:	e8 3a f3 fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001a6ee:	83 c4 10             	add    esp,0x10
c001a6f1:	b8 01 00 00 00       	mov    eax,0x1
c001a6f6:	e9 a9 00 00 00       	jmp    c001a7a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001a6fb:	83 fb 0d             	cmp    ebx,0xd
c001a6fe:	77 12                	ja     c001a712 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c001a700:	83 ec 0c             	sub    esp,0xc
c001a703:	68 c8 00 00 00       	push   0xc8
c001a708:	e8 73 86 ff ff       	call   c0012d80 <milliTenthSleep(unsigned int)>
c001a70d:	83 c4 10             	add    esp,0x10
c001a710:	eb 2a                	jmp    c001a73c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001a712:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c001a718:	83 f8 0d             	cmp    eax,0xd
c001a71b:	77 0a                	ja     c001a727 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c001a71d:	83 ec 0c             	sub    esp,0xc
c001a720:	68 58 02 00 00       	push   0x258
c001a725:	eb 28                	jmp    c001a74f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001a727:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c001a72d:	83 f8 0d             	cmp    eax,0xd
c001a730:	77 0a                	ja     c001a73c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001a732:	83 ec 0c             	sub    esp,0xc
c001a735:	68 dc 05 00 00       	push   0x5dc
c001a73a:	eb 13                	jmp    c001a74f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001a73c:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c001a742:	83 f8 0d             	cmp    eax,0xd
c001a745:	77 10                	ja     c001a757 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c001a747:	83 ec 0c             	sub    esp,0xc
c001a74a:	68 c4 09 00 00       	push   0x9c4
c001a74f:	e8 2c 86 ff ff       	call   c0012d80 <milliTenthSleep(unsigned int)>
c001a754:	83 c4 10             	add    esp,0x10
c001a757:	43                   	inc    ebx
c001a758:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c001a75e:	0f 85 63 ff ff ff    	jne    c001a6c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c001a764:	83 ec 0c             	sub    esp,0xc
c001a767:	68 ee eb 01 c0       	push   0xc001ebee
c001a76c:	e9 78 ff ff ff       	jmp    c001a6e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a771:	0f ba e0 1e          	bt     eax,0x1e
c001a775:	73 0d                	jae    c001a784 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001a777:	83 ec 0c             	sub    esp,0xc
c001a77a:	68 02 ec 01 c0       	push   0xc001ec02
c001a77f:	e9 65 ff ff ff       	jmp    c001a6e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a784:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001a789:	74 17                	je     c001a7a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001a78b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001a790:	74 10                	je     c001a7a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001a792:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001a798:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001a79c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a7a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7a2:	31 c0                	xor    eax,eax
c001a7a4:	83 c4 2c             	add    esp,0x2c
c001a7a7:	5b                   	pop    ebx
c001a7a8:	5e                   	pop    esi
c001a7a9:	5f                   	pop    edi
c001a7aa:	5d                   	pop    ebp
c001a7ab:	c3                   	ret    

c001a7ac <SATAPI::eject()>:
c001a7ac:	57                   	push   edi
c001a7ad:	b9 03 00 00 00       	mov    ecx,0x3
c001a7b2:	83 ec 18             	sub    esp,0x18
c001a7b5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a7b9:	fc                   	cld    
c001a7ba:	31 c0                	xor    eax,eax
c001a7bc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a7be:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a7c3:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a7c8:	50                   	push   eax
c001a7c9:	6a 00                	push   0x0
c001a7cb:	6a 00                	push   0x0
c001a7cd:	6a 00                	push   0x0
c001a7cf:	6a 00                	push   0x0
c001a7d1:	6a 02                	push   0x2
c001a7d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7d7:	50                   	push   eax
c001a7d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a7dc:	e8 3d fd ff ff       	call   c001a51e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a7e1:	31 c0                	xor    eax,eax
c001a7e3:	83 c4 38             	add    esp,0x38
c001a7e6:	5f                   	pop    edi
c001a7e7:	c3                   	ret    

c001a7e8 <SATAPI::detectMedia()>:
c001a7e8:	56                   	push   esi
c001a7e9:	53                   	push   ebx
c001a7ea:	83 ec 30             	sub    esp,0x30
c001a7ed:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a7f1:	68 17 ec 01 c0       	push   0xc001ec17
c001a7f6:	e8 2d f2 fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001a7fb:	83 c4 0c             	add    esp,0xc
c001a7fe:	6a 0c                	push   0xc
c001a800:	6a 00                	push   0x0
c001a802:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a806:	56                   	push   esi
c001a807:	e8 e4 5c fe ff       	call   c00004f0 <memset>
c001a80c:	83 c4 0c             	add    esp,0xc
c001a80f:	6a 00                	push   0x0
c001a811:	6a 00                	push   0x0
c001a813:	6a 00                	push   0x0
c001a815:	6a 00                	push   0x0
c001a817:	6a 00                	push   0x0
c001a819:	56                   	push   esi
c001a81a:	53                   	push   ebx
c001a81b:	e8 fe fc ff ff       	call   c001a51e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a820:	83 c4 20             	add    esp,0x20
c001a823:	48                   	dec    eax
c001a824:	74 34                	je     c001a85a <SATAPI::detectMedia()+0x72>
c001a826:	50                   	push   eax
c001a827:	6a 0c                	push   0xc
c001a829:	6a 00                	push   0x0
c001a82b:	56                   	push   esi
c001a82c:	e8 bf 5c fe ff       	call   c00004f0 <memset>
c001a831:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a836:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a83b:	83 c4 0c             	add    esp,0xc
c001a83e:	6a 01                	push   0x1
c001a840:	8d 44 24 16          	lea    eax,[esp+0x16]
c001a844:	50                   	push   eax
c001a845:	6a 00                	push   0x0
c001a847:	6a 00                	push   0x0
c001a849:	6a 12                	push   0x12
c001a84b:	56                   	push   esi
c001a84c:	53                   	push   ebx
c001a84d:	e8 cc fc ff ff       	call   c001a51e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a852:	83 c4 20             	add    esp,0x20
c001a855:	48                   	dec    eax
c001a856:	75 39                	jne    c001a891 <SATAPI::detectMedia()+0xa9>
c001a858:	eb 1e                	jmp    c001a878 <SATAPI::detectMedia()+0x90>
c001a85a:	83 ec 0c             	sub    esp,0xc
c001a85d:	68 2b ec 01 c0       	push   0xc001ec2b
c001a862:	e8 c1 f1 fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001a867:	83 c4 10             	add    esp,0x10
c001a86a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a871:	74 b3                	je     c001a826 <SATAPI::detectMedia()+0x3e>
c001a873:	e9 93 00 00 00       	jmp    c001a90b <SATAPI::detectMedia()+0x123>
c001a878:	83 ec 0c             	sub    esp,0xc
c001a87b:	68 35 ec 01 c0       	push   0xc001ec35
c001a880:	e8 a3 f1 fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001a885:	83 c4 10             	add    esp,0x10
c001a888:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a88f:	75 7a                	jne    c001a90b <SATAPI::detectMedia()+0x123>
c001a891:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a895:	83 e0 7f             	and    eax,0x7f
c001a898:	3c 70                	cmp    al,0x70
c001a89a:	74 25                	je     c001a8c1 <SATAPI::detectMedia()+0xd9>
c001a89c:	83 ec 0c             	sub    esp,0xc
c001a89f:	68 3f ec 01 c0       	push   0xc001ec3f
c001a8a4:	e8 7f f1 fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001a8a9:	83 c4 10             	add    esp,0x10
c001a8ac:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a8b3:	75 0c                	jne    c001a8c1 <SATAPI::detectMedia()+0xd9>
c001a8b5:	83 ec 0c             	sub    esp,0xc
c001a8b8:	53                   	push   ebx
c001a8b9:	e8 44 fc ff ff       	call   c001a502 <SATAPI::diskInserted()>
c001a8be:	83 c4 10             	add    esp,0x10
c001a8c1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a8c5:	83 e0 0f             	and    eax,0xf
c001a8c8:	3c 02                	cmp    al,0x2
c001a8ca:	75 16                	jne    c001a8e2 <SATAPI::detectMedia()+0xfa>
c001a8cc:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a8d1:	75 38                	jne    c001a90b <SATAPI::detectMedia()+0x123>
c001a8d3:	83 ec 0c             	sub    esp,0xc
c001a8d6:	68 48 ec 01 c0       	push   0xc001ec48
c001a8db:	e8 48 f1 fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001a8e0:	eb 26                	jmp    c001a908 <SATAPI::detectMedia()+0x120>
c001a8e2:	84 c0                	test   al,al
c001a8e4:	75 25                	jne    c001a90b <SATAPI::detectMedia()+0x123>
c001a8e6:	83 ec 0c             	sub    esp,0xc
c001a8e9:	68 51 ec 01 c0       	push   0xc001ec51
c001a8ee:	e8 35 f1 fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001a8f3:	83 c4 10             	add    esp,0x10
c001a8f6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a8fd:	75 0c                	jne    c001a90b <SATAPI::detectMedia()+0x123>
c001a8ff:	83 ec 0c             	sub    esp,0xc
c001a902:	53                   	push   ebx
c001a903:	e8 fa fb ff ff       	call   c001a502 <SATAPI::diskInserted()>
c001a908:	83 c4 10             	add    esp,0x10
c001a90b:	83 c4 24             	add    esp,0x24
c001a90e:	5b                   	pop    ebx
c001a90f:	5e                   	pop    esi
c001a910:	c3                   	ret    
c001a911:	90                   	nop

c001a912 <SATAPI::open(int, int, void*)>:
c001a912:	56                   	push   esi
c001a913:	53                   	push   ebx
c001a914:	51                   	push   ecx
c001a915:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a919:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a91d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a927:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a92d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a93b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a945:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a94b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a952:	e8 db c6 fe ff       	call   c0007032 <Phys::allocatePage()>
c001a957:	89 c6                	mov    esi,eax
c001a959:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001a95f:	81 c6 00 10 00 00    	add    esi,0x1000
c001a965:	e8 c8 c6 fe ff       	call   c0007032 <Phys::allocatePage()>
c001a96a:	39 c6                	cmp    esi,eax
c001a96c:	74 10                	je     c001a97e <SATAPI::open(int, int, void*)+0x6c>
c001a96e:	83 ec 0c             	sub    esp,0xc
c001a971:	68 5b ec 01 c0       	push   0xc001ec5b
c001a976:	e8 26 4c ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001a97b:	83 c4 10             	add    esp,0x10
c001a97e:	83 ec 0c             	sub    esp,0xc
c001a981:	6a 02                	push   0x2
c001a983:	e8 19 de fe ff       	call   c00087a1 <Virt::allocateKernelVirtualPages(int)>
c001a988:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001a98e:	6a 03                	push   0x3
c001a990:	50                   	push   eax
c001a991:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001a997:	ff 35 f4 f6 01 c0    	push   DWORD PTR ds:0xc001f6f4
c001a99d:	e8 58 e4 fe ff       	call   c0008dfa <VAS::mapPage(unsigned long, unsigned long, int)>
c001a9a2:	83 c4 14             	add    esp,0x14
c001a9a5:	68 74 01 00 00       	push   0x174
c001a9aa:	e8 b6 c2 fe ff       	call   c0006c65 <malloc>
c001a9af:	83 c4 0c             	add    esp,0xc
c001a9b2:	89 c6                	mov    esi,eax
c001a9b4:	6a 00                	push   0x0
c001a9b6:	68 ff ff ff 7f       	push   0x7fffffff
c001a9bb:	6a 00                	push   0x0
c001a9bd:	6a 00                	push   0x0
c001a9bf:	53                   	push   ebx
c001a9c0:	68 71 ec 01 c0       	push   0xc001ec71
c001a9c5:	50                   	push   eax
c001a9c6:	e8 17 15 ff ff       	call   c000bee2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a9cb:	83 c4 14             	add    esp,0x14
c001a9ce:	56                   	push   esi
c001a9cf:	e8 c4 15 ff ff       	call   c000bf98 <LogicalDisk::assignDriveLetter()>
c001a9d4:	5a                   	pop    edx
c001a9d5:	0f be c0             	movsx  eax,al
c001a9d8:	59                   	pop    ecx
c001a9d9:	50                   	push   eax
c001a9da:	68 8c ea 01 c0       	push   0xc001ea8c
c001a9df:	e8 44 f0 fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001a9e4:	58                   	pop    eax
c001a9e5:	5a                   	pop    edx
c001a9e6:	56                   	push   esi
c001a9e7:	53                   	push   ebx
c001a9e8:	e8 7b 04 ff ff       	call   c000ae68 <Device::addChild(Device*)>
c001a9ed:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001a9f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9f6:	e8 a3 08 ff ff       	call   c000b29e <PhysicalDisk::startCache()>
c001a9fb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001aa02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa05:	e8 de fd ff ff       	call   c001a7e8 <SATAPI::detectMedia()>
c001aa0a:	83 c4 14             	add    esp,0x14
c001aa0d:	31 c0                	xor    eax,eax
c001aa0f:	5b                   	pop    ebx
c001aa10:	5e                   	pop    esi
c001aa11:	c3                   	ret    

c001aa12 <SATAPI::read(unsigned long long, int, void*)>:
c001aa12:	55                   	push   ebp
c001aa13:	57                   	push   edi
c001aa14:	56                   	push   esi
c001aa15:	53                   	push   ebx
c001aa16:	83 ec 48             	sub    esp,0x48
c001aa19:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001aa1d:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001aa21:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c001aa25:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001aa29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001aa31:	68 7f ec 01 c0       	push   0xc001ec7f
c001aa36:	e8 ed ef fe ff       	call   c0009a28 <Dbg::kprintf(char const*, ...)>
c001aa3b:	83 c4 10             	add    esp,0x10
c001aa3e:	83 fb 04             	cmp    ebx,0x4
c001aa41:	7e 10                	jle    c001aa53 <SATAPI::read(unsigned long long, int, void*)+0x41>
c001aa43:	83 ec 0c             	sub    esp,0xc
c001aa46:	68 90 ec 01 c0       	push   0xc001ec90
c001aa4b:	e8 51 4b ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001aa50:	83 c4 10             	add    esp,0x10
c001aa53:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001aa57:	31 ed                	xor    ebp,ebp
c001aa59:	b9 03 00 00 00       	mov    ecx,0x3
c001aa5e:	fc                   	cld    
c001aa5f:	89 e8                	mov    eax,ebp
c001aa61:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa63:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c001aa68:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001aa6d:	50                   	push   eax
c001aa6e:	6a 00                	push   0x0
c001aa70:	6a 00                	push   0x0
c001aa72:	6a 00                	push   0x0
c001aa74:	6a 00                	push   0x0
c001aa76:	6a 02                	push   0x2
c001aa78:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aa7c:	50                   	push   eax
c001aa7d:	56                   	push   esi
c001aa7e:	e8 9b fa ff ff       	call   c001a51e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aa83:	8d 7c 24 44          	lea    edi,[esp+0x44]
c001aa87:	89 e8                	mov    eax,ebp
c001aa89:	b9 03 00 00 00       	mov    ecx,0x3
c001aa8e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aa94:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c001aa98:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c001aa9d:	0f c8                	bswap  eax
c001aa9f:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c001aaa3:	83 c4 1c             	add    esp,0x1c
c001aaa6:	53                   	push   ebx
c001aaa7:	c1 e3 0b             	shl    ebx,0xb
c001aaaa:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001aaae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aab6:	53                   	push   ebx
c001aab7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001aabb:	50                   	push   eax
c001aabc:	56                   	push   esi
c001aabd:	e8 5c fa ff ff       	call   c001a51e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aac2:	83 c4 20             	add    esp,0x20
c001aac5:	85 c0                	test   eax,eax
c001aac7:	74 14                	je     c001aadd <SATAPI::read(unsigned long long, int, void*)+0xcb>
c001aac9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aacd:	83 ec 0c             	sub    esp,0xc
c001aad0:	56                   	push   esi
c001aad1:	e8 12 fd ff ff       	call   c001a7e8 <SATAPI::detectMedia()>
c001aad6:	83 c4 10             	add    esp,0x10
c001aad9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aadd:	83 c4 3c             	add    esp,0x3c
c001aae0:	5b                   	pop    ebx
c001aae1:	5e                   	pop    esi
c001aae2:	5f                   	pop    edi
c001aae3:	5d                   	pop    ebp
c001aae4:	c3                   	ret    
c001aae5:	90                   	nop

c001aae6 <IOAPIC::close(int, int, void*)>:
c001aae6:	b8 00 00 00 00       	mov    eax,0x0
c001aaeb:	c3                   	ret    

c001aaec <apicGetBase()>:
c001aaec:	55                   	push   ebp
c001aaed:	89 e5                	mov    ebp,esp
c001aaef:	83 ec 18             	sub    esp,0x18
c001aaf2:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c001aaf7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001aafd:	83 e0 08             	and    eax,0x8
c001ab00:	84 c0                	test   al,al
c001ab02:	75 07                	jne    c001ab0b <apicGetBase()+0x1f>
c001ab04:	b8 00 00 00 00       	mov    eax,0x0
c001ab09:	eb 21                	jmp    c001ab2c <apicGetBase()+0x40>
c001ab0b:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c001ab10:	83 ec 08             	sub    esp,0x8
c001ab13:	6a 1b                	push   0x1b
c001ab15:	50                   	push   eax
c001ab16:	e8 17 b7 fe ff       	call   c0006232 <Computer::rdmsr(unsigned int)>
c001ab1b:	83 c4 10             	add    esp,0x10
c001ab1e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ab21:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ab24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ab27:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ab2c:	c9                   	leave  
c001ab2d:	c3                   	ret    

c001ab2e <IOAPIC::IOAPIC()>:
c001ab2e:	83 ec 0c             	sub    esp,0xc
c001ab31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab35:	83 ec 08             	sub    esp,0x8
c001ab38:	68 f4 ec 01 c0       	push   0xc001ecf4
c001ab3d:	50                   	push   eax
c001ab3e:	e8 bd 04 ff ff       	call   c000b000 <Device::Device(char const*)>
c001ab43:	83 c4 10             	add    esp,0x10
c001ab46:	ba 04 ed 01 c0       	mov    edx,0xc001ed04
c001ab4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab4f:	89 10                	mov    DWORD PTR [eax],edx
c001ab51:	90                   	nop
c001ab52:	83 c4 0c             	add    esp,0xc
c001ab55:	c3                   	ret    

c001ab56 <apicOpen()>:
c001ab56:	55                   	push   ebp
c001ab57:	89 e5                	mov    ebp,esp
c001ab59:	53                   	push   ebx
c001ab5a:	83 ec 34             	sub    esp,0x34
c001ab5d:	a0 20 35 02 c0       	mov    al,ds:0xc0023520
c001ab62:	83 f0 01             	xor    eax,0x1
c001ab65:	84 c0                	test   al,al
c001ab67:	0f 84 9d 00 00 00    	je     c001ac0a <apicOpen()+0xb4>
c001ab6d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ab71:	a0 e0 1e 02 c0       	mov    al,ds:0xc0021ee0
c001ab76:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001ab79:	0f 83 84 00 00 00    	jae    c001ac03 <apicOpen()+0xad>
c001ab7f:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ab86:	83 ec 0c             	sub    esp,0xc
c001ab89:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ab8c:	e8 d4 c0 fe ff       	call   c0006c65 <malloc>
c001ab91:	83 c4 10             	add    esp,0x10
c001ab94:	89 c3                	mov    ebx,eax
c001ab96:	83 ec 0c             	sub    esp,0xc
c001ab99:	53                   	push   ebx
c001ab9a:	e8 8f ff ff ff       	call   c001ab2e <IOAPIC::IOAPIC()>
c001ab9f:	83 c4 10             	add    esp,0x10
c001aba2:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001aba5:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001aba8:	25 ff 00 00 00       	and    eax,0xff
c001abad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001abb0:	89 14 85 00 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcb00],edx
c001abb7:	a1 e0 34 02 c0       	mov    eax,ds:0xc00234e0
c001abbc:	40                   	inc    eax
c001abbd:	a3 e0 34 02 c0       	mov    ds:0xc00234e0,eax
c001abc2:	a1 08 f6 01 c0       	mov    eax,ds:0xc001f608
c001abc7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001abcd:	83 ec 08             	sub    esp,0x8
c001abd0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001abd3:	50                   	push   eax
c001abd4:	e8 8f 02 ff ff       	call   c000ae68 <Device::addChild(Device*)>
c001abd9:	83 c4 10             	add    esp,0x10
c001abdc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001abdf:	8b 00                	mov    eax,DWORD PTR [eax]
c001abe1:	83 c0 08             	add    eax,0x8
c001abe4:	8b 10                	mov    edx,DWORD PTR [eax]
c001abe6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001abe9:	25 ff 00 00 00       	and    eax,0xff
c001abee:	6a 00                	push   0x0
c001abf0:	6a 00                	push   0x0
c001abf2:	50                   	push   eax
c001abf3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001abf6:	ff d2                	call   edx
c001abf8:	83 c4 10             	add    esp,0x10
c001abfb:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001abfe:	e9 6e ff ff ff       	jmp    c001ab71 <apicOpen()+0x1b>
c001ac03:	c6 05 20 35 02 c0 01 	mov    BYTE PTR ds:0xc0023520,0x1
c001ac0a:	e8 dd fe ff ff       	call   c001aaec <apicGetBase()>
c001ac0f:	05 f0 00 00 00       	add    eax,0xf0
c001ac14:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ac17:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ac1a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac1c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ac1f:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ac26:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ac2d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ac30:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ac33:	89 10                	mov    DWORD PTR [eax],edx
c001ac35:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ac3c:	a1 30 1e 02 c0       	mov    eax,ds:0xc0021e30
c001ac41:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ac44:	7d 70                	jge    c001acb6 <apicOpen()+0x160>
c001ac46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ac49:	8b 04 85 40 1e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde1c0]
c001ac50:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ac53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ac56:	8b 04 85 40 1e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde1c0]
c001ac5d:	c1 e8 08             	shr    eax,0x8
c001ac60:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ac64:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ac67:	8b 04 85 40 1e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde1c0]
c001ac6e:	c1 e8 18             	shr    eax,0x18
c001ac71:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ac74:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001ac78:	75 37                	jne    c001acb1 <apicOpen()+0x15b>
c001ac7a:	e8 6d fe ff ff       	call   c001aaec <apicGetBase()>
c001ac7f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001ac83:	75 07                	jne    c001ac8c <apicOpen()+0x136>
c001ac85:	ba 60 03 00 00       	mov    edx,0x360
c001ac8a:	eb 05                	jmp    c001ac91 <apicOpen()+0x13b>
c001ac8c:	ba 50 03 00 00       	mov    edx,0x350
c001ac91:	01 d0                	add    eax,edx
c001ac93:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ac96:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ac99:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac9b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ac9e:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001aca5:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001aca9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001acac:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001acaf:	89 10                	mov    DWORD PTR [eax],edx
c001acb1:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001acb4:	eb 86                	jmp    c001ac3c <apicOpen()+0xe6>
c001acb6:	90                   	nop
c001acb7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001acba:	c9                   	leave  
c001acbb:	c3                   	ret    

c001acbc <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001acbc:	55                   	push   ebp
c001acbd:	89 e5                	mov    ebp,esp
c001acbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001acc2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001acc8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001accb:	72 1d                	jb     c001acea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001accd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001acd0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001acd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001acd9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001acdf:	01 d0                	add    eax,edx
c001ace1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ace4:	73 04                	jae    c001acea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ace6:	b0 01                	mov    al,0x1
c001ace8:	eb 02                	jmp    c001acec <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001acea:	b0 00                	mov    al,0x0
c001acec:	5d                   	pop    ebp
c001aced:	c3                   	ret    

c001acee <IOAPIC::read(int)>:
c001acee:	55                   	push   ebp
c001acef:	89 e5                	mov    ebp,esp
c001acf1:	83 ec 10             	sub    esp,0x10
c001acf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001acf7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001acfd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ad00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ad03:	31 d2                	xor    edx,edx
c001ad05:	88 c2                	mov    dl,al
c001ad07:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ad0a:	89 10                	mov    DWORD PTR [eax],edx
c001ad0c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ad0f:	83 c0 10             	add    eax,0x10
c001ad12:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad14:	c9                   	leave  
c001ad15:	c3                   	ret    

c001ad16 <IOAPIC::open(int, int, void*)>:
c001ad16:	55                   	push   ebp
c001ad17:	89 e5                	mov    ebp,esp
c001ad19:	57                   	push   edi
c001ad1a:	56                   	push   esi
c001ad1b:	53                   	push   ebx
c001ad1c:	83 ec 04             	sub    esp,0x4
c001ad1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad22:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ad25:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ad2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad2e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ad34:	8b 14 85 20 1f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde0e0]
c001ad3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad3e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ad44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad47:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ad4d:	8b 14 85 a0 1f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde060]
c001ad54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad57:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ad5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad60:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ad66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ad69:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ad6f:	89 c6                	mov    esi,eax
c001ad71:	81 e6 ff 00 00 00    	and    esi,0xff
c001ad77:	89 d0                	mov    eax,edx
c001ad79:	ba 00 00 00 00       	mov    edx,0x0
c001ad7e:	89 c7                	mov    edi,eax
c001ad80:	83 e7 ff             	and    edi,0xffffffff
c001ad83:	89 f9                	mov    ecx,edi
c001ad85:	89 d0                	mov    eax,edx
c001ad87:	25 ff 00 00 00       	and    eax,0xff
c001ad8c:	89 c3                	mov    ebx,eax
c001ad8e:	89 c8                	mov    eax,ecx
c001ad90:	89 da                	mov    edx,ebx
c001ad92:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ad95:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ad98:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ad9c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ada0:	83 e0 00             	and    eax,0x0
c001ada3:	09 d0                	or     eax,edx
c001ada5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ada9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001adac:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001adb2:	8d 50 01             	lea    edx,[eax+0x1]
c001adb5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001adb8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001adbe:	31 d2                	xor    edx,edx
c001adc0:	88 c2                	mov    dl,al
c001adc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001adc5:	83 c2 08             	add    edx,0x8
c001adc8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001adcc:	81 e1 ff 00 00 00    	and    ecx,0xff
c001add2:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001add8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001addc:	6a 01                	push   0x1
c001adde:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ade1:	e8 08 ff ff ff       	call   c001acee <IOAPIC::read(int)>
c001ade6:	83 c4 08             	add    esp,0x8
c001ade9:	c1 f8 10             	sar    eax,0x10
c001adec:	25 ff 00 00 00       	and    eax,0xff
c001adf1:	8d 50 01             	lea    edx,[eax+0x1]
c001adf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001adf7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001adfd:	b8 00 00 00 00       	mov    eax,0x0
c001ae02:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ae05:	5b                   	pop    ebx
c001ae06:	5e                   	pop    esi
c001ae07:	5f                   	pop    edi
c001ae08:	5d                   	pop    ebp
c001ae09:	c3                   	ret    

c001ae0a <IOAPIC::write(int, int)>:
c001ae0a:	55                   	push   ebp
c001ae0b:	89 e5                	mov    ebp,esp
c001ae0d:	83 ec 10             	sub    esp,0x10
c001ae10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ae13:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ae19:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ae1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ae1f:	31 d2                	xor    edx,edx
c001ae21:	88 c2                	mov    dl,al
c001ae23:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ae26:	89 10                	mov    DWORD PTR [eax],edx
c001ae28:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ae2b:	8d 50 10             	lea    edx,[eax+0x10]
c001ae2e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ae31:	89 02                	mov    DWORD PTR [edx],eax
c001ae33:	90                   	nop
c001ae34:	c9                   	leave  
c001ae35:	c3                   	ret    

c001ae36 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ae36:	55                   	push   ebp
c001ae37:	89 e5                	mov    ebp,esp
c001ae39:	53                   	push   ebx
c001ae3a:	83 ec 2c             	sub    esp,0x2c
c001ae3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ae40:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ae43:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ae46:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ae49:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ae4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ae4f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ae52:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ae55:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ae58:	88 d8                	mov    al,bl
c001ae5a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ae5d:	88 c8                	mov    al,cl
c001ae5f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ae62:	88 d0                	mov    al,dl
c001ae64:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ae67:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ae6a:	25 ff 00 00 00       	and    eax,0xff
c001ae6f:	83 c0 08             	add    eax,0x8
c001ae72:	01 c0                	add    eax,eax
c001ae74:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ae77:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ae7a:	25 ff 00 00 00       	and    eax,0xff
c001ae7f:	83 c0 08             	add    eax,0x8
c001ae82:	01 c0                	add    eax,eax
c001ae84:	40                   	inc    eax
c001ae85:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ae88:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ae8b:	50                   	push   eax
c001ae8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ae8f:	e8 5a fe ff ff       	call   c001acee <IOAPIC::read(int)>
c001ae94:	83 c4 08             	add    esp,0x8
c001ae97:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ae9a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001aea1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001aea4:	c1 e0 18             	shl    eax,0x18
c001aea7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001aeaa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001aead:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001aeb0:	52                   	push   edx
c001aeb1:	50                   	push   eax
c001aeb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001aeb5:	e8 50 ff ff ff       	call   c001ae0a <IOAPIC::write(int, int)>
c001aeba:	83 c4 0c             	add    esp,0xc
c001aebd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aec0:	50                   	push   eax
c001aec1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001aec4:	e8 25 fe ff ff       	call   c001acee <IOAPIC::read(int)>
c001aec9:	83 c4 08             	add    esp,0x8
c001aecc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001aecf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001aed6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001aedd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001aee4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001aee8:	74 09                	je     c001aef3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001aeea:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001aef1:	eb 07                	jmp    c001aefa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001aef3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001aefa:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001aefe:	74 09                	je     c001af09 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001af00:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001af07:	eb 07                	jmp    c001af10 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001af09:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001af10:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001af17:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001af1a:	25 ff 00 00 00       	and    eax,0xff
c001af1f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001af22:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001af25:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001af28:	52                   	push   edx
c001af29:	50                   	push   eax
c001af2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001af2d:	e8 d8 fe ff ff       	call   c001ae0a <IOAPIC::write(int, int)>
c001af32:	83 c4 0c             	add    esp,0xc
c001af35:	90                   	nop
c001af36:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001af39:	c9                   	leave  
c001af3a:	c3                   	ret    
c001af3b:	90                   	nop

c001af3c <APICTimer::close(int, int, void*)>:
c001af3c:	b8 00 00 00 00       	mov    eax,0x0
c001af41:	c3                   	ret    
c001af42:	66 90                	xchg   ax,ax

c001af44 <apicTimerHandler(regs*, void*)>:
c001af44:	83 ec 0c             	sub    esp,0xc
c001af47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af4b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af4d:	b8 10 27 00 00       	mov    eax,0x2710
c001af52:	ba 00 00 00 00       	mov    edx,0x0
c001af57:	f7 f1                	div    ecx
c001af59:	83 ec 0c             	sub    esp,0xc
c001af5c:	50                   	push   eax
c001af5d:	e8 9a 17 ff ff       	call   c000c6fc <timerHandler(unsigned int)>
c001af62:	83 c4 10             	add    esp,0x10
c001af65:	90                   	nop
c001af66:	83 c4 0c             	add    esp,0xc
c001af69:	c3                   	ret    
c001af6a:	66 90                	xchg   ax,ax

c001af6c <APICTimer::open(int, int, void*)>:
c001af6c:	83 ec 0c             	sub    esp,0xc
c001af6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af73:	8b 00                	mov    eax,DWORD PTR [eax]
c001af75:	83 c0 24             	add    eax,0x24
c001af78:	8b 00                	mov    eax,DWORD PTR [eax]
c001af7a:	83 ec 08             	sub    esp,0x8
c001af7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af85:	ff d0                	call   eax
c001af87:	83 c4 10             	add    esp,0x10
c001af8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af8e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af92:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001af98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afa0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001afa6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afaa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001afb0:	83 ec 0c             	sub    esp,0xc
c001afb3:	51                   	push   ecx
c001afb4:	6a 01                	push   0x1
c001afb6:	68 44 af 01 c0       	push   0xc001af44
c001afbb:	52                   	push   edx
c001afbc:	50                   	push   eax
c001afbd:	e8 52 fe fe ff       	call   c000ae14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001afc2:	83 c4 20             	add    esp,0x20
c001afc5:	89 c2                	mov    edx,eax
c001afc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afcb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001afd1:	b8 00 00 00 00       	mov    eax,0x0
c001afd6:	83 c4 0c             	add    esp,0xc
c001afd9:	c3                   	ret    
c001afda:	66 90                	xchg   ax,ax

c001afdc <APICTimer::write(int)>:
c001afdc:	83 ec 0c             	sub    esp,0xc
c001afdf:	83 ec 0c             	sub    esp,0xc
c001afe2:	68 28 ed 01 c0       	push   0xc001ed28
c001afe7:	e8 b5 45 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001afec:	83 c4 10             	add    esp,0x10
c001afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aff7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001affd:	90                   	nop
c001affe:	83 c4 0c             	add    esp,0xc
c001b001:	c3                   	ret    
c001b002:	66 90                	xchg   ax,ax

c001b004 <APICTimer::APICTimer()>:
c001b004:	83 ec 0c             	sub    esp,0xc
c001b007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b00b:	83 ec 08             	sub    esp,0x8
c001b00e:	68 38 ed 01 c0       	push   0xc001ed38
c001b013:	50                   	push   eax
c001b014:	e8 17 16 ff ff       	call   c000c630 <Timer::Timer(char const*)>
c001b019:	83 c4 10             	add    esp,0x10
c001b01c:	ba 4c ed 01 c0       	mov    edx,0xc001ed4c
c001b021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b025:	89 10                	mov    DWORD PTR [eax],edx
c001b027:	90                   	nop
c001b028:	83 c4 0c             	add    esp,0xc
c001b02b:	c3                   	ret    

c001b02c <PIT::write(int)>:
c001b02c:	83 ec 10             	sub    esp,0x10
c001b02f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b033:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b037:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b03d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b041:	a3 24 35 02 c0       	mov    ds:0xc0023524,eax
c001b046:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b04b:	99                   	cdq    
c001b04c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b050:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b054:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b05b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b060:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b064:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b069:	ee                   	out    dx,al
c001b06a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b06e:	25 ff 00 00 00       	and    eax,0xff
c001b073:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b07a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b07e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b082:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b087:	ee                   	out    dx,al
c001b088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b08c:	c1 f8 08             	sar    eax,0x8
c001b08f:	25 ff 00 00 00       	and    eax,0xff
c001b094:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b09b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b09f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b0a3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b0a8:	ee                   	out    dx,al
c001b0a9:	90                   	nop
c001b0aa:	83 c4 10             	add    esp,0x10
c001b0ad:	c3                   	ret    
c001b0ae:	66 90                	xchg   ax,ax

c001b0b0 <pitHandler(regs*, void*)>:
c001b0b0:	83 ec 0c             	sub    esp,0xc
c001b0b3:	8b 0d 24 35 02 c0    	mov    ecx,DWORD PTR ds:0xc0023524
c001b0b9:	b8 10 27 00 00       	mov    eax,0x2710
c001b0be:	99                   	cdq    
c001b0bf:	f7 f9                	idiv   ecx
c001b0c1:	83 ec 0c             	sub    esp,0xc
c001b0c4:	50                   	push   eax
c001b0c5:	e8 32 16 ff ff       	call   c000c6fc <timerHandler(unsigned int)>
c001b0ca:	83 c4 10             	add    esp,0x10
c001b0cd:	90                   	nop
c001b0ce:	83 c4 0c             	add    esp,0xc
c001b0d1:	c3                   	ret    
c001b0d2:	66 90                	xchg   ax,ax

c001b0d4 <PIT::open(int, int, void*)>:
c001b0d4:	83 ec 0c             	sub    esp,0xc
c001b0d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0db:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0dd:	83 c0 24             	add    eax,0x24
c001b0e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0e2:	83 ec 08             	sub    esp,0x8
c001b0e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0ed:	ff d0                	call   eax
c001b0ef:	83 c4 10             	add    esp,0x10
c001b0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0f6:	83 ec 0c             	sub    esp,0xc
c001b0f9:	6a 00                	push   0x0
c001b0fb:	6a 01                	push   0x1
c001b0fd:	68 b0 b0 01 c0       	push   0xc001b0b0
c001b102:	6a 00                	push   0x0
c001b104:	50                   	push   eax
c001b105:	e8 0a fd fe ff       	call   c000ae14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b10a:	83 c4 20             	add    esp,0x20
c001b10d:	89 c2                	mov    edx,eax
c001b10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b113:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b119:	b8 00 00 00 00       	mov    eax,0x0
c001b11e:	83 c4 0c             	add    esp,0xc
c001b121:	c3                   	ret    
c001b122:	66 90                	xchg   ax,ax

c001b124 <PIT::close(int, int, void*)>:
c001b124:	83 ec 0c             	sub    esp,0xc
c001b127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b12b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b139:	6a 01                	push   0x1
c001b13b:	68 b0 b0 01 c0       	push   0xc001b0b0
c001b140:	6a 00                	push   0x0
c001b142:	50                   	push   eax
c001b143:	e8 02 fd fe ff       	call   c000ae4a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b148:	83 c4 10             	add    esp,0x10
c001b14b:	b8 00 00 00 00       	mov    eax,0x0
c001b150:	83 c4 0c             	add    esp,0xc
c001b153:	c3                   	ret    

c001b154 <PIT::PIT()>:
c001b154:	83 ec 0c             	sub    esp,0xc
c001b157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b15b:	83 ec 08             	sub    esp,0x8
c001b15e:	68 74 ed 01 c0       	push   0xc001ed74
c001b163:	50                   	push   eax
c001b164:	e8 c7 14 ff ff       	call   c000c630 <Timer::Timer(char const*)>
c001b169:	83 c4 10             	add    esp,0x10
c001b16c:	ba 9c ed 01 c0       	mov    edx,0xc001ed9c
c001b171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b175:	89 10                	mov    DWORD PTR [eax],edx
c001b177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b17b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b181:	31 d2                	xor    edx,edx
c001b183:	88 c2                	mov    dl,al
c001b185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b189:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b194:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b19a:	31 d2                	xor    edx,edx
c001b19c:	88 c2                	mov    dl,al
c001b19e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1a2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1ab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1b1:	8d 50 01             	lea    edx,[eax+0x1]
c001b1b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1b8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b1be:	31 d2                	xor    edx,edx
c001b1c0:	88 c2                	mov    dl,al
c001b1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1c6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b1ca:	83 e1 3f             	and    ecx,0x3f
c001b1cd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b1d1:	90                   	nop
c001b1d2:	83 c4 0c             	add    esp,0xc
c001b1d5:	c3                   	ret    
c001b1d6:	66 90                	xchg   ax,ax
c001b1d8:	66 90                	xchg   ax,ax
c001b1da:	66 90                	xchg   ax,ax
c001b1dc:	66 90                	xchg   ax,ax
c001b1de:	66 90                	xchg   ax,ax

c001b1e0 <avxDetect>:
c001b1e0:	b8 01 00 00 00       	mov    eax,0x1
c001b1e5:	0f a2                	cpuid  
c001b1e7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b1ed:	74 15                	je     c001b204 <avxDetect.noAVX>
c001b1ef:	b8 01 00 00 00       	mov    eax,0x1
c001b1f4:	0f a2                	cpuid  
c001b1f6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b1fc:	74 06                	je     c001b204 <avxDetect.noAVX>
c001b1fe:	b8 01 00 00 00       	mov    eax,0x1
c001b203:	c3                   	ret    

c001b204 <avxDetect.noAVX>:
c001b204:	b8 00 00 00 00       	mov    eax,0x0
c001b209:	c3                   	ret    

c001b20a <avxSave>:
c001b20a:	53                   	push   ebx
c001b20b:	52                   	push   edx
c001b20c:	31 c0                	xor    eax,eax
c001b20e:	48                   	dec    eax
c001b20f:	89 c2                	mov    edx,eax
c001b211:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b215:	0f ae 23             	xsave  [ebx]
c001b218:	5a                   	pop    edx
c001b219:	5b                   	pop    ebx
c001b21a:	c3                   	ret    

c001b21b <avxLoad>:
c001b21b:	53                   	push   ebx
c001b21c:	52                   	push   edx
c001b21d:	31 c0                	xor    eax,eax
c001b21f:	48                   	dec    eax
c001b220:	89 c2                	mov    edx,eax
c001b222:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b226:	0f ae 2b             	xrstor [ebx]
c001b229:	5a                   	pop    edx
c001b22a:	5b                   	pop    ebx
c001b22b:	c3                   	ret    

c001b22c <avxInit>:
c001b22c:	e8 57 02 00 00       	call   c001b488 <sseInit>
c001b231:	50                   	push   eax
c001b232:	51                   	push   ecx
c001b233:	0f 20 e0             	mov    eax,cr4
c001b236:	0d 00 00 04 00       	or     eax,0x40000
c001b23b:	0f 22 e0             	mov    cr4,eax
c001b23e:	31 c9                	xor    ecx,ecx
c001b240:	0f 01 d0             	xgetbv 
c001b243:	0d 07 00 00 00       	or     eax,0x7
c001b248:	0f 01 d1             	xsetbv 
c001b24b:	59                   	pop    ecx
c001b24c:	58                   	pop    eax
c001b24d:	c3                   	ret    

c001b24e <avxClose>:
c001b24e:	c3                   	ret    

c001b24f <wouldSheSayYes>:
c001b24f:	c3                   	ret    
c001b250:	49                   	dec    ecx
c001b251:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b255:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b259:	75 20                	jne    c001b27b <isr0+0xb>
c001b25b:	4e                   	dec    esi
c001b25c:	79 61                	jns    c001b2bf <isr7+0x3>
c001b25e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b263:	66 90                	xchg   ax,ax
c001b265:	66 90                	xchg   ax,ax
c001b267:	66 90                	xchg   ax,ax
c001b269:	66 90                	xchg   ax,ax
c001b26b:	66 90                	xchg   ax,ax
c001b26d:	66 90                	xchg   ax,ax
c001b26f:	90                   	nop

c001b270 <isr0>:
c001b270:	fa                   	cli    
c001b271:	68 00 00 00 00       	push   0x0
c001b276:	68 00 00 00 00       	push   0x0
c001b27b:	e9 44 01 00 00       	jmp    c001b3c4 <int_common_stub>

c001b280 <isr1>:
c001b280:	fa                   	cli    
c001b281:	6a 00                	push   0x0
c001b283:	6a 01                	push   0x1
c001b285:	e9 3a 01 00 00       	jmp    c001b3c4 <int_common_stub>

c001b28a <isr2>:
c001b28a:	fa                   	cli    
c001b28b:	6a 00                	push   0x0
c001b28d:	6a 02                	push   0x2
c001b28f:	e9 30 01 00 00       	jmp    c001b3c4 <int_common_stub>

c001b294 <isr3>:
c001b294:	fa                   	cli    
c001b295:	6a 00                	push   0x0
c001b297:	6a 03                	push   0x3
c001b299:	e9 26 01 00 00       	jmp    c001b3c4 <int_common_stub>

c001b29e <isr4>:
c001b29e:	fa                   	cli    
c001b29f:	6a 00                	push   0x0
c001b2a1:	6a 04                	push   0x4
c001b2a3:	e9 1c 01 00 00       	jmp    c001b3c4 <int_common_stub>

c001b2a8 <isr5>:
c001b2a8:	fa                   	cli    
c001b2a9:	6a 00                	push   0x0
c001b2ab:	6a 05                	push   0x5
c001b2ad:	e9 12 01 00 00       	jmp    c001b3c4 <int_common_stub>

c001b2b2 <isr6>:
c001b2b2:	fa                   	cli    
c001b2b3:	6a 00                	push   0x0
c001b2b5:	6a 06                	push   0x6
c001b2b7:	e9 08 01 00 00       	jmp    c001b3c4 <int_common_stub>

c001b2bc <isr7>:
c001b2bc:	fa                   	cli    
c001b2bd:	6a 00                	push   0x0
c001b2bf:	6a 07                	push   0x7
c001b2c1:	e9 fe 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b2c6 <isr8>:
c001b2c6:	fa                   	cli    
c001b2c7:	6a 08                	push   0x8
c001b2c9:	e9 f6 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b2ce <isr9>:
c001b2ce:	fa                   	cli    
c001b2cf:	6a 00                	push   0x0
c001b2d1:	6a 09                	push   0x9
c001b2d3:	e9 ec 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b2d8 <isr10>:
c001b2d8:	fa                   	cli    
c001b2d9:	6a 0a                	push   0xa
c001b2db:	e9 e4 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b2e0 <isr11>:
c001b2e0:	fa                   	cli    
c001b2e1:	6a 0b                	push   0xb
c001b2e3:	e9 dc 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b2e8 <isr12>:
c001b2e8:	fa                   	cli    
c001b2e9:	6a 0c                	push   0xc
c001b2eb:	e9 d4 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b2f0 <isr13>:
c001b2f0:	fa                   	cli    
c001b2f1:	6a 0d                	push   0xd
c001b2f3:	e9 cc 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b2f8 <isr14>:
c001b2f8:	fa                   	cli    
c001b2f9:	6a 0e                	push   0xe
c001b2fb:	e9 c4 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b300 <isr15>:
c001b300:	fa                   	cli    
c001b301:	6a 00                	push   0x0
c001b303:	6a 0f                	push   0xf
c001b305:	e9 ba 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b30a <isr16>:
c001b30a:	fa                   	cli    
c001b30b:	6a 00                	push   0x0
c001b30d:	6a 10                	push   0x10
c001b30f:	e9 b0 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b314 <isr17>:
c001b314:	fa                   	cli    
c001b315:	6a 00                	push   0x0
c001b317:	6a 11                	push   0x11
c001b319:	e9 a6 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b31e <isr18>:
c001b31e:	fa                   	cli    
c001b31f:	6a 00                	push   0x0
c001b321:	6a 12                	push   0x12
c001b323:	e9 9c 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b328 <irq3>:
c001b328:	fa                   	cli    
c001b329:	6a 00                	push   0x0
c001b32b:	6a 23                	push   0x23
c001b32d:	e9 92 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b332 <irq4>:
c001b332:	fa                   	cli    
c001b333:	6a 00                	push   0x0
c001b335:	6a 24                	push   0x24
c001b337:	e9 88 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b33c <irq5>:
c001b33c:	fa                   	cli    
c001b33d:	6a 00                	push   0x0
c001b33f:	6a 25                	push   0x25
c001b341:	e9 7e 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b346 <irq6>:
c001b346:	fa                   	cli    
c001b347:	6a 00                	push   0x0
c001b349:	6a 26                	push   0x26
c001b34b:	e9 74 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b350 <irq7>:
c001b350:	fa                   	cli    
c001b351:	6a 00                	push   0x0
c001b353:	6a 27                	push   0x27
c001b355:	e9 6a 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b35a <irq8>:
c001b35a:	fa                   	cli    
c001b35b:	6a 00                	push   0x0
c001b35d:	6a 28                	push   0x28
c001b35f:	e9 60 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b364 <irq9>:
c001b364:	fa                   	cli    
c001b365:	6a 00                	push   0x0
c001b367:	6a 29                	push   0x29
c001b369:	e9 56 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b36e <irq10>:
c001b36e:	fa                   	cli    
c001b36f:	6a 00                	push   0x0
c001b371:	6a 2a                	push   0x2a
c001b373:	e9 4c 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b378 <irq11>:
c001b378:	fa                   	cli    
c001b379:	6a 00                	push   0x0
c001b37b:	6a 2b                	push   0x2b
c001b37d:	e9 42 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b382 <irq12>:
c001b382:	fa                   	cli    
c001b383:	6a 00                	push   0x0
c001b385:	6a 2c                	push   0x2c
c001b387:	e9 38 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b38c <irq13>:
c001b38c:	fa                   	cli    
c001b38d:	6a 00                	push   0x0
c001b38f:	6a 2d                	push   0x2d
c001b391:	e9 2e 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b396 <irq14>:
c001b396:	fa                   	cli    
c001b397:	6a 00                	push   0x0
c001b399:	6a 2e                	push   0x2e
c001b39b:	e9 24 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b3a0 <irq15>:
c001b3a0:	fa                   	cli    
c001b3a1:	6a 00                	push   0x0
c001b3a3:	6a 2f                	push   0x2f
c001b3a5:	e9 1a 00 00 00       	jmp    c001b3c4 <int_common_stub>

c001b3aa <irq1>:
c001b3aa:	fa                   	cli    
c001b3ab:	6a 00                	push   0x0
c001b3ad:	6a 21                	push   0x21
c001b3af:	eb 13                	jmp    c001b3c4 <int_common_stub>

c001b3b1 <irq2>:
c001b3b1:	fa                   	cli    
c001b3b2:	6a 00                	push   0x0
c001b3b4:	6a 22                	push   0x22
c001b3b6:	eb 0c                	jmp    c001b3c4 <int_common_stub>

c001b3b8 <isr96>:
c001b3b8:	6a 00                	push   0x0
c001b3ba:	6a 60                	push   0x60
c001b3bc:	fb                   	sti    
c001b3bd:	eb 05                	jmp    c001b3c4 <int_common_stub>

c001b3bf <irq0>:
c001b3bf:	fa                   	cli    
c001b3c0:	6a 00                	push   0x0
c001b3c2:	6a 20                	push   0x20

c001b3c4 <int_common_stub>:
c001b3c4:	60                   	pusha  
c001b3c5:	1e                   	push   ds
c001b3c6:	06                   	push   es
c001b3c7:	0f a0                	push   fs
c001b3c9:	0f a8                	push   gs
c001b3cb:	66 b8 10 00          	mov    ax,0x10
c001b3cf:	66 8e d8             	mov    ds,ax
c001b3d2:	66 8e c0             	mov    es,ax
c001b3d5:	66 8e e0             	mov    fs,ax
c001b3d8:	66 8e e8             	mov    gs,ax
c001b3db:	54                   	push   esp
c001b3dc:	fc                   	cld    
c001b3dd:	e8 32 ff fe ff       	call   c000b314 <int_handler>
c001b3e2:	81 c4 04 00 00 00    	add    esp,0x4
c001b3e8:	0f a9                	pop    gs
c001b3ea:	0f a1                	pop    fs
c001b3ec:	07                   	pop    es
c001b3ed:	1f                   	pop    ds
c001b3ee:	61                   	popa   
c001b3ef:	81 c4 08 00 00 00    	add    esp,0x8
c001b3f5:	cf                   	iret   

c001b3f6 <irq16>:
c001b3f6:	fa                   	cli    
c001b3f7:	6a 00                	push   0x0
c001b3f9:	6a 30                	push   0x30
c001b3fb:	e9 c4 ff ff ff       	jmp    c001b3c4 <int_common_stub>

c001b400 <irq17>:
c001b400:	fa                   	cli    
c001b401:	6a 00                	push   0x0
c001b403:	6a 31                	push   0x31
c001b405:	e9 ba ff ff ff       	jmp    c001b3c4 <int_common_stub>

c001b40a <irq18>:
c001b40a:	fa                   	cli    
c001b40b:	6a 00                	push   0x0
c001b40d:	6a 32                	push   0x32
c001b40f:	e9 b0 ff ff ff       	jmp    c001b3c4 <int_common_stub>

c001b414 <irq19>:
c001b414:	fa                   	cli    
c001b415:	6a 00                	push   0x0
c001b417:	6a 33                	push   0x33
c001b419:	e9 a6 ff ff ff       	jmp    c001b3c4 <int_common_stub>

c001b41e <irq20>:
c001b41e:	fa                   	cli    
c001b41f:	6a 00                	push   0x0
c001b421:	6a 34                	push   0x34
c001b423:	e9 9c ff ff ff       	jmp    c001b3c4 <int_common_stub>

c001b428 <irq21>:
c001b428:	fa                   	cli    
c001b429:	6a 00                	push   0x0
c001b42b:	6a 35                	push   0x35
c001b42d:	e9 92 ff ff ff       	jmp    c001b3c4 <int_common_stub>

c001b432 <irq22>:
c001b432:	fa                   	cli    
c001b433:	6a 00                	push   0x0
c001b435:	6a 36                	push   0x36
c001b437:	e9 88 ff ff ff       	jmp    c001b3c4 <int_common_stub>

c001b43c <irq23>:
c001b43c:	fa                   	cli    
c001b43d:	6a 00                	push   0x0
c001b43f:	6a 37                	push   0x37
c001b441:	e9 7e ff ff ff       	jmp    c001b3c4 <int_common_stub>
c001b446:	66 90                	xchg   ax,ax
c001b448:	66 90                	xchg   ax,ax
c001b44a:	66 90                	xchg   ax,ax
c001b44c:	66 90                	xchg   ax,ax
c001b44e:	66 90                	xchg   ax,ax

c001b450 <i386GetRDRAND>:
c001b450:	b9 64 00 00 00       	mov    ecx,0x64

c001b455 <retry>:
c001b455:	0f c7 f0             	rdrand eax
c001b458:	72 05                	jb     c001b45f <retry.done>
c001b45a:	e2 f9                	loop   c001b455 <retry>

c001b45c <retry.fail>:
c001b45c:	31 c0                	xor    eax,eax
c001b45e:	c3                   	ret    

c001b45f <retry.done>:
c001b45f:	c3                   	ret    

c001b460 <absolutelyNoChanceInHell>:
c001b460:	b8 01 00 00 00       	mov    eax,0x1
c001b465:	0f a2                	cpuid  
c001b467:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b46d:	74 06                	je     c001b475 <sseDetect.noSSE>
c001b46f:	b8 01 00 00 00       	mov    eax,0x1
c001b474:	c3                   	ret    

c001b475 <sseDetect.noSSE>:
c001b475:	31 c0                	xor    eax,eax
c001b477:	c3                   	ret    

c001b478 <sseSave>:
c001b478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b47c:	0f ae 00             	fxsave [eax]
c001b47f:	c3                   	ret    

c001b480 <sseLoad>:
c001b480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b484:	0f ae 08             	fxrstor [eax]
c001b487:	c3                   	ret    

c001b488 <sseInit>:
c001b488:	e8 42 00 00 00       	call   c001b4cf <x87Init>
c001b48d:	0f 20 e0             	mov    eax,cr4
c001b490:	66 0d 00 06          	or     ax,0x600
c001b494:	0f 22 e0             	mov    cr4,eax
c001b497:	c3                   	ret    

c001b498 <sseClose>:
c001b498:	c3                   	ret    
c001b499:	66 90                	xchg   ax,ax
c001b49b:	66 90                	xchg   ax,ax
c001b49d:	66 90                	xchg   ax,ax
c001b49f:	90                   	nop

c001b4a0 <value_37F>:
c001b4a0:	7f 03                	jg     c001b4a5 <value_37A+0x1>

c001b4a2 <value_37E>:
c001b4a2:	7e 03                	jle    c001b4a7 <x87Detect+0x1>

c001b4a4 <value_37A>:
c001b4a4:	7a 03                	jp     c001b4a9 <x87Detect+0x3>

c001b4a6 <x87Detect>:
c001b4a6:	b8 01 00 00 00       	mov    eax,0x1
c001b4ab:	0f a2                	cpuid  
c001b4ad:	f7 c2 01 00 00 00    	test   edx,0x1
c001b4b3:	74 06                	je     c001b4bb <x87Detect.nox87>
c001b4b5:	b8 01 00 00 00       	mov    eax,0x1
c001b4ba:	c3                   	ret    

c001b4bb <x87Detect.nox87>:
c001b4bb:	b8 00 00 00 00       	mov    eax,0x0
c001b4c0:	c3                   	ret    

c001b4c1 <x87Save>:
c001b4c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4c5:	dd 30                	fnsave [eax]
c001b4c7:	c3                   	ret    

c001b4c8 <x87Load>:
c001b4c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4cc:	dd 20                	frstor [eax]
c001b4ce:	c3                   	ret    

c001b4cf <x87Init>:
c001b4cf:	0f 20 c0             	mov    eax,cr0
c001b4d2:	66 25 fb ff          	and    ax,0xfffb
c001b4d6:	66 0d 22 00          	or     ax,0x22
c001b4da:	0f 22 c0             	mov    cr0,eax
c001b4dd:	db e3                	fninit 
c001b4df:	0f 06                	clts   
c001b4e1:	d9 2d a4 b4 01 c0    	fldcw  WORD PTR ds:0xc001b4a4
c001b4e7:	c3                   	ret    

c001b4e8 <x87Close>:
c001b4e8:	c3                   	ret    
c001b4e9:	66 90                	xchg   ax,ax
c001b4eb:	90                   	nop

c001b4ec <__do_global_ctors_aux>:
c001b4ec:	a1 9c c4 01 c0       	mov    eax,ds:0xc001c49c
c001b4f1:	83 f8 ff             	cmp    eax,0xffffffff
c001b4f4:	74 1a                	je     c001b510 <__do_global_ctors_aux+0x24>
c001b4f6:	55                   	push   ebp
c001b4f7:	89 e5                	mov    ebp,esp
c001b4f9:	53                   	push   ebx
c001b4fa:	52                   	push   edx
c001b4fb:	bb 9c c4 01 c0       	mov    ebx,0xc001c49c
c001b500:	ff d0                	call   eax
c001b502:	83 eb 04             	sub    ebx,0x4
c001b505:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b507:	83 f8 ff             	cmp    eax,0xffffffff
c001b50a:	75 f4                	jne    c001b500 <__do_global_ctors_aux+0x14>
c001b50c:	58                   	pop    eax
c001b50d:	5b                   	pop    ebx
c001b50e:	5d                   	pop    ebp
c001b50f:	c3                   	ret    
c001b510:	c3                   	ret    
c001b511:	66 90                	xchg   ax,ax
c001b513:	90                   	nop

c001b514 <__divdi3>:
c001b514:	55                   	push   ebp
c001b515:	57                   	push   edi
c001b516:	56                   	push   esi
c001b517:	53                   	push   ebx
c001b518:	83 ec 1c             	sub    esp,0x1c
c001b51b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b51f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b523:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b526:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b52e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b532:	85 db                	test   ebx,ebx
c001b534:	0f 88 8e 00 00 00    	js     c001b5c8 <__divdi3+0xb4>
c001b53a:	89 dd                	mov    ebp,ebx
c001b53c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b544:	89 d3                	mov    ebx,edx
c001b546:	85 d2                	test   edx,edx
c001b548:	79 0d                	jns    c001b557 <__divdi3+0x43>
c001b54a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b54e:	f7 d8                	neg    eax
c001b550:	83 d2 00             	adc    edx,0x0
c001b553:	f7 da                	neg    edx
c001b555:	89 d3                	mov    ebx,edx
c001b557:	89 c7                	mov    edi,eax
c001b559:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b55c:	85 db                	test   ebx,ebx
c001b55e:	75 48                	jne    c001b5a8 <__divdi3+0x94>
c001b560:	39 ef                	cmp    edi,ebp
c001b562:	76 24                	jbe    c001b588 <__divdi3+0x74>
c001b564:	89 ea                	mov    edx,ebp
c001b566:	f7 f7                	div    edi
c001b568:	89 c1                	mov    ecx,eax
c001b56a:	31 f6                	xor    esi,esi
c001b56c:	89 c8                	mov    eax,ecx
c001b56e:	89 f2                	mov    edx,esi
c001b570:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b574:	85 c9                	test   ecx,ecx
c001b576:	74 07                	je     c001b57f <__divdi3+0x6b>
c001b578:	f7 d8                	neg    eax
c001b57a:	83 d2 00             	adc    edx,0x0
c001b57d:	f7 da                	neg    edx
c001b57f:	83 c4 1c             	add    esp,0x1c
c001b582:	5b                   	pop    ebx
c001b583:	5e                   	pop    esi
c001b584:	5f                   	pop    edi
c001b585:	5d                   	pop    ebp
c001b586:	c3                   	ret    
c001b587:	90                   	nop
c001b588:	85 ff                	test   edi,edi
c001b58a:	75 0b                	jne    c001b597 <__divdi3+0x83>
c001b58c:	b8 01 00 00 00       	mov    eax,0x1
c001b591:	31 d2                	xor    edx,edx
c001b593:	f7 f3                	div    ebx
c001b595:	89 c7                	mov    edi,eax
c001b597:	31 d2                	xor    edx,edx
c001b599:	89 e8                	mov    eax,ebp
c001b59b:	f7 f7                	div    edi
c001b59d:	89 c6                	mov    esi,eax
c001b59f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b5a2:	f7 f7                	div    edi
c001b5a4:	89 c1                	mov    ecx,eax
c001b5a6:	eb c4                	jmp    c001b56c <__divdi3+0x58>
c001b5a8:	39 eb                	cmp    ebx,ebp
c001b5aa:	77 3c                	ja     c001b5e8 <__divdi3+0xd4>
c001b5ac:	0f bd f3             	bsr    esi,ebx
c001b5af:	83 f6 1f             	xor    esi,0x1f
c001b5b2:	75 40                	jne    c001b5f4 <__divdi3+0xe0>
c001b5b4:	39 eb                	cmp    ebx,ebp
c001b5b6:	72 09                	jb     c001b5c1 <__divdi3+0xad>
c001b5b8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b5bb:	0f 87 97 00 00 00    	ja     c001b658 <__divdi3+0x144>
c001b5c1:	b9 01 00 00 00       	mov    ecx,0x1
c001b5c6:	eb a4                	jmp    c001b56c <__divdi3+0x58>
c001b5c8:	f7 d9                	neg    ecx
c001b5ca:	83 d3 00             	adc    ebx,0x0
c001b5cd:	f7 db                	neg    ebx
c001b5cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b5d2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b5d6:	89 dd                	mov    ebp,ebx
c001b5d8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001b5e0:	e9 5f ff ff ff       	jmp    c001b544 <__divdi3+0x30>
c001b5e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b5e8:	31 f6                	xor    esi,esi
c001b5ea:	31 c9                	xor    ecx,ecx
c001b5ec:	e9 7b ff ff ff       	jmp    c001b56c <__divdi3+0x58>
c001b5f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5f4:	b8 20 00 00 00       	mov    eax,0x20
c001b5f9:	29 f0                	sub    eax,esi
c001b5fb:	89 f1                	mov    ecx,esi
c001b5fd:	d3 e3                	shl    ebx,cl
c001b5ff:	89 fa                	mov    edx,edi
c001b601:	88 c1                	mov    cl,al
c001b603:	d3 ea                	shr    edx,cl
c001b605:	09 da                	or     edx,ebx
c001b607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b60b:	89 f1                	mov    ecx,esi
c001b60d:	d3 e7                	shl    edi,cl
c001b60f:	89 eb                	mov    ebx,ebp
c001b611:	88 c1                	mov    cl,al
c001b613:	d3 eb                	shr    ebx,cl
c001b615:	89 f1                	mov    ecx,esi
c001b617:	d3 e5                	shl    ebp,cl
c001b619:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001b61c:	88 c1                	mov    cl,al
c001b61e:	d3 ea                	shr    edx,cl
c001b620:	09 d5                	or     ebp,edx
c001b622:	89 e8                	mov    eax,ebp
c001b624:	89 da                	mov    edx,ebx
c001b626:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001b62a:	89 d3                	mov    ebx,edx
c001b62c:	89 c5                	mov    ebp,eax
c001b62e:	f7 e7                	mul    edi
c001b630:	39 d3                	cmp    ebx,edx
c001b632:	72 18                	jb     c001b64c <__divdi3+0x138>
c001b634:	74 0a                	je     c001b640 <__divdi3+0x12c>
c001b636:	89 e9                	mov    ecx,ebp
c001b638:	31 f6                	xor    esi,esi
c001b63a:	e9 2d ff ff ff       	jmp    c001b56c <__divdi3+0x58>
c001b63f:	90                   	nop
c001b640:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001b643:	89 f1                	mov    ecx,esi
c001b645:	d3 e7                	shl    edi,cl
c001b647:	39 c7                	cmp    edi,eax
c001b649:	73 eb                	jae    c001b636 <__divdi3+0x122>
c001b64b:	90                   	nop
c001b64c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001b64f:	31 f6                	xor    esi,esi
c001b651:	e9 16 ff ff ff       	jmp    c001b56c <__divdi3+0x58>
c001b656:	66 90                	xchg   ax,ax
c001b658:	31 c9                	xor    ecx,ecx
c001b65a:	e9 0d ff ff ff       	jmp    c001b56c <__divdi3+0x58>
c001b65f:	90                   	nop

c001b660 <__moddi3>:
c001b660:	55                   	push   ebp
c001b661:	57                   	push   edi
c001b662:	56                   	push   esi
c001b663:	53                   	push   ebx
c001b664:	83 ec 2c             	sub    esp,0x2c
c001b667:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b66b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001b66f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b673:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001b677:	85 db                	test   ebx,ebx
c001b679:	0f 88 85 00 00 00    	js     c001b704 <__moddi3+0xa4>
c001b67f:	89 de                	mov    esi,ebx
c001b681:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b689:	89 d7                	mov    edi,edx
c001b68b:	85 d2                	test   edx,edx
c001b68d:	79 09                	jns    c001b698 <__moddi3+0x38>
c001b68f:	f7 d8                	neg    eax
c001b691:	83 d2 00             	adc    edx,0x0
c001b694:	f7 da                	neg    edx
c001b696:	89 d7                	mov    edi,edx
c001b698:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b69c:	89 cd                	mov    ebp,ecx
c001b69e:	85 ff                	test   edi,edi
c001b6a0:	75 52                	jne    c001b6f4 <__moddi3+0x94>
c001b6a2:	89 c3                	mov    ebx,eax
c001b6a4:	39 f0                	cmp    eax,esi
c001b6a6:	76 24                	jbe    c001b6cc <__moddi3+0x6c>
c001b6a8:	89 c8                	mov    eax,ecx
c001b6aa:	89 f2                	mov    edx,esi
c001b6ac:	f7 f3                	div    ebx
c001b6ae:	89 d6                	mov    esi,edx
c001b6b0:	89 f0                	mov    eax,esi
c001b6b2:	31 d2                	xor    edx,edx
c001b6b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b6b8:	85 c9                	test   ecx,ecx
c001b6ba:	74 07                	je     c001b6c3 <__moddi3+0x63>
c001b6bc:	f7 d8                	neg    eax
c001b6be:	83 d2 00             	adc    edx,0x0
c001b6c1:	f7 da                	neg    edx
c001b6c3:	83 c4 2c             	add    esp,0x2c
c001b6c6:	5b                   	pop    ebx
c001b6c7:	5e                   	pop    esi
c001b6c8:	5f                   	pop    edi
c001b6c9:	5d                   	pop    ebp
c001b6ca:	c3                   	ret    
c001b6cb:	90                   	nop
c001b6cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b6d0:	85 db                	test   ebx,ebx
c001b6d2:	75 0d                	jne    c001b6e1 <__moddi3+0x81>
c001b6d4:	b8 01 00 00 00       	mov    eax,0x1
c001b6d9:	31 d2                	xor    edx,edx
c001b6db:	f7 f7                	div    edi
c001b6dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6e1:	89 f0                	mov    eax,esi
c001b6e3:	31 d2                	xor    edx,edx
c001b6e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b6e9:	f7 f7                	div    edi
c001b6eb:	89 e8                	mov    eax,ebp
c001b6ed:	f7 f7                	div    edi
c001b6ef:	89 d6                	mov    esi,edx
c001b6f1:	eb bd                	jmp    c001b6b0 <__moddi3+0x50>
c001b6f3:	90                   	nop
c001b6f4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b6f8:	39 f7                	cmp    edi,esi
c001b6fa:	76 20                	jbe    c001b71c <__moddi3+0xbc>
c001b6fc:	89 c8                	mov    eax,ecx
c001b6fe:	89 f2                	mov    edx,esi
c001b700:	eb b2                	jmp    c001b6b4 <__moddi3+0x54>
c001b702:	66 90                	xchg   ax,ax
c001b704:	f7 d9                	neg    ecx
c001b706:	83 d3 00             	adc    ebx,0x0
c001b709:	f7 db                	neg    ebx
c001b70b:	89 de                	mov    esi,ebx
c001b70d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001b715:	e9 6f ff ff ff       	jmp    c001b689 <__moddi3+0x29>
c001b71a:	66 90                	xchg   ax,ax
c001b71c:	0f bd c7             	bsr    eax,edi
c001b71f:	83 f0 1f             	xor    eax,0x1f
c001b722:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b726:	75 24                	jne    c001b74c <__moddi3+0xec>
c001b728:	39 f7                	cmp    edi,esi
c001b72a:	72 06                	jb     c001b732 <__moddi3+0xd2>
c001b72c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001b730:	77 0c                	ja     c001b73e <__moddi3+0xde>
c001b732:	89 e9                	mov    ecx,ebp
c001b734:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001b738:	19 fe                	sbb    esi,edi
c001b73a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b73e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b742:	89 f2                	mov    edx,esi
c001b744:	e9 6b ff ff ff       	jmp    c001b6b4 <__moddi3+0x54>
c001b749:	8d 76 00             	lea    esi,[esi+0x0]
c001b74c:	b8 20 00 00 00       	mov    eax,0x20
c001b751:	89 c2                	mov    edx,eax
c001b753:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b757:	29 da                	sub    edx,ebx
c001b759:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b75d:	88 d9                	mov    cl,bl
c001b75f:	d3 e7                	shl    edi,cl
c001b761:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b765:	88 d1                	mov    cl,dl
c001b767:	d3 e8                	shr    eax,cl
c001b769:	09 c7                	or     edi,eax
c001b76b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001b76f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b773:	89 d8                	mov    eax,ebx
c001b775:	88 d9                	mov    cl,bl
c001b777:	d3 e7                	shl    edi,cl
c001b779:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b77d:	89 f3                	mov    ebx,esi
c001b77f:	88 d1                	mov    cl,dl
c001b781:	d3 eb                	shr    ebx,cl
c001b783:	89 c7                	mov    edi,eax
c001b785:	88 c1                	mov    cl,al
c001b787:	d3 e6                	shl    esi,cl
c001b789:	89 e8                	mov    eax,ebp
c001b78b:	88 d1                	mov    cl,dl
c001b78d:	d3 e8                	shr    eax,cl
c001b78f:	09 f0                	or     eax,esi
c001b791:	89 f9                	mov    ecx,edi
c001b793:	d3 e5                	shl    ebp,cl
c001b795:	89 da                	mov    edx,ebx
c001b797:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001b79b:	89 d3                	mov    ebx,edx
c001b79d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b7a1:	89 c6                	mov    esi,eax
c001b7a3:	89 d1                	mov    ecx,edx
c001b7a5:	39 d3                	cmp    ebx,edx
c001b7a7:	72 27                	jb     c001b7d0 <__moddi3+0x170>
c001b7a9:	74 21                	je     c001b7cc <__moddi3+0x16c>
c001b7ab:	29 f5                	sub    ebp,esi
c001b7ad:	19 cb                	sbb    ebx,ecx
c001b7af:	89 de                	mov    esi,ebx
c001b7b1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001b7b5:	d3 e6                	shl    esi,cl
c001b7b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b7bb:	89 f9                	mov    ecx,edi
c001b7bd:	d3 ed                	shr    ebp,cl
c001b7bf:	09 ee                	or     esi,ebp
c001b7c1:	89 f0                	mov    eax,esi
c001b7c3:	d3 eb                	shr    ebx,cl
c001b7c5:	89 da                	mov    edx,ebx
c001b7c7:	e9 e8 fe ff ff       	jmp    c001b6b4 <__moddi3+0x54>
c001b7cc:	39 c5                	cmp    ebp,eax
c001b7ce:	73 db                	jae    c001b7ab <__moddi3+0x14b>
c001b7d0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b7d4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001b7d8:	89 d1                	mov    ecx,edx
c001b7da:	89 c6                	mov    esi,eax
c001b7dc:	eb cd                	jmp    c001b7ab <__moddi3+0x14b>
c001b7de:	66 90                	xchg   ax,ax

c001b7e0 <__udivdi3>:
c001b7e0:	55                   	push   ebp
c001b7e1:	57                   	push   edi
c001b7e2:	56                   	push   esi
c001b7e3:	53                   	push   ebx
c001b7e4:	83 ec 1c             	sub    esp,0x1c
c001b7e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b7eb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b7ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b7f3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b7f7:	85 d2                	test   edx,edx
c001b7f9:	75 41                	jne    c001b83c <__udivdi3+0x5c>
c001b7fb:	39 f7                	cmp    edi,esi
c001b7fd:	76 15                	jbe    c001b814 <__udivdi3+0x34>
c001b7ff:	89 e8                	mov    eax,ebp
c001b801:	89 f2                	mov    edx,esi
c001b803:	f7 f7                	div    edi
c001b805:	31 db                	xor    ebx,ebx
c001b807:	89 da                	mov    edx,ebx
c001b809:	83 c4 1c             	add    esp,0x1c
c001b80c:	5b                   	pop    ebx
c001b80d:	5e                   	pop    esi
c001b80e:	5f                   	pop    edi
c001b80f:	5d                   	pop    ebp
c001b810:	c3                   	ret    
c001b811:	8d 76 00             	lea    esi,[esi+0x0]
c001b814:	89 f9                	mov    ecx,edi
c001b816:	85 ff                	test   edi,edi
c001b818:	75 0b                	jne    c001b825 <__udivdi3+0x45>
c001b81a:	b8 01 00 00 00       	mov    eax,0x1
c001b81f:	31 d2                	xor    edx,edx
c001b821:	f7 f7                	div    edi
c001b823:	89 c1                	mov    ecx,eax
c001b825:	31 d2                	xor    edx,edx
c001b827:	89 f0                	mov    eax,esi
c001b829:	f7 f1                	div    ecx
c001b82b:	89 c3                	mov    ebx,eax
c001b82d:	89 e8                	mov    eax,ebp
c001b82f:	f7 f1                	div    ecx
c001b831:	89 da                	mov    edx,ebx
c001b833:	83 c4 1c             	add    esp,0x1c
c001b836:	5b                   	pop    ebx
c001b837:	5e                   	pop    esi
c001b838:	5f                   	pop    edi
c001b839:	5d                   	pop    ebp
c001b83a:	c3                   	ret    
c001b83b:	90                   	nop
c001b83c:	39 f2                	cmp    edx,esi
c001b83e:	77 1c                	ja     c001b85c <__udivdi3+0x7c>
c001b840:	0f bd da             	bsr    ebx,edx
c001b843:	83 f3 1f             	xor    ebx,0x1f
c001b846:	75 24                	jne    c001b86c <__udivdi3+0x8c>
c001b848:	39 f2                	cmp    edx,esi
c001b84a:	72 08                	jb     c001b854 <__udivdi3+0x74>
c001b84c:	39 ef                	cmp    edi,ebp
c001b84e:	0f 87 84 00 00 00    	ja     c001b8d8 <__udivdi3+0xf8>
c001b854:	b8 01 00 00 00       	mov    eax,0x1
c001b859:	eb ac                	jmp    c001b807 <__udivdi3+0x27>
c001b85b:	90                   	nop
c001b85c:	31 db                	xor    ebx,ebx
c001b85e:	31 c0                	xor    eax,eax
c001b860:	89 da                	mov    edx,ebx
c001b862:	83 c4 1c             	add    esp,0x1c
c001b865:	5b                   	pop    ebx
c001b866:	5e                   	pop    esi
c001b867:	5f                   	pop    edi
c001b868:	5d                   	pop    ebp
c001b869:	c3                   	ret    
c001b86a:	66 90                	xchg   ax,ax
c001b86c:	b8 20 00 00 00       	mov    eax,0x20
c001b871:	29 d8                	sub    eax,ebx
c001b873:	88 d9                	mov    cl,bl
c001b875:	d3 e2                	shl    edx,cl
c001b877:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b87b:	89 fa                	mov    edx,edi
c001b87d:	88 c1                	mov    cl,al
c001b87f:	d3 ea                	shr    edx,cl
c001b881:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b885:	09 d1                	or     ecx,edx
c001b887:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b88b:	88 d9                	mov    cl,bl
c001b88d:	d3 e7                	shl    edi,cl
c001b88f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b893:	89 f7                	mov    edi,esi
c001b895:	88 c1                	mov    cl,al
c001b897:	d3 ef                	shr    edi,cl
c001b899:	88 d9                	mov    cl,bl
c001b89b:	d3 e6                	shl    esi,cl
c001b89d:	89 ea                	mov    edx,ebp
c001b89f:	88 c1                	mov    cl,al
c001b8a1:	d3 ea                	shr    edx,cl
c001b8a3:	09 d6                	or     esi,edx
c001b8a5:	89 f0                	mov    eax,esi
c001b8a7:	89 fa                	mov    edx,edi
c001b8a9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b8ad:	89 d7                	mov    edi,edx
c001b8af:	89 c6                	mov    esi,eax
c001b8b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b8b5:	39 d7                	cmp    edi,edx
c001b8b7:	72 13                	jb     c001b8cc <__udivdi3+0xec>
c001b8b9:	74 09                	je     c001b8c4 <__udivdi3+0xe4>
c001b8bb:	89 f0                	mov    eax,esi
c001b8bd:	31 db                	xor    ebx,ebx
c001b8bf:	e9 43 ff ff ff       	jmp    c001b807 <__udivdi3+0x27>
c001b8c4:	88 d9                	mov    cl,bl
c001b8c6:	d3 e5                	shl    ebp,cl
c001b8c8:	39 c5                	cmp    ebp,eax
c001b8ca:	73 ef                	jae    c001b8bb <__udivdi3+0xdb>
c001b8cc:	8d 46 ff             	lea    eax,[esi-0x1]
c001b8cf:	31 db                	xor    ebx,ebx
c001b8d1:	e9 31 ff ff ff       	jmp    c001b807 <__udivdi3+0x27>
c001b8d6:	66 90                	xchg   ax,ax
c001b8d8:	31 c0                	xor    eax,eax
c001b8da:	e9 28 ff ff ff       	jmp    c001b807 <__udivdi3+0x27>
c001b8df:	90                   	nop

c001b8e0 <__umoddi3>:
c001b8e0:	55                   	push   ebp
c001b8e1:	57                   	push   edi
c001b8e2:	56                   	push   esi
c001b8e3:	53                   	push   ebx
c001b8e4:	83 ec 1c             	sub    esp,0x1c
c001b8e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b8eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b8ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b8f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b8f7:	89 da                	mov    edx,ebx
c001b8f9:	85 c0                	test   eax,eax
c001b8fb:	75 37                	jne    c001b934 <__umoddi3+0x54>
c001b8fd:	39 df                	cmp    edi,ebx
c001b8ff:	76 13                	jbe    c001b914 <__umoddi3+0x34>
c001b901:	89 f0                	mov    eax,esi
c001b903:	f7 f7                	div    edi
c001b905:	89 d0                	mov    eax,edx
c001b907:	31 d2                	xor    edx,edx
c001b909:	83 c4 1c             	add    esp,0x1c
c001b90c:	5b                   	pop    ebx
c001b90d:	5e                   	pop    esi
c001b90e:	5f                   	pop    edi
c001b90f:	5d                   	pop    ebp
c001b910:	c3                   	ret    
c001b911:	8d 76 00             	lea    esi,[esi+0x0]
c001b914:	89 fd                	mov    ebp,edi
c001b916:	85 ff                	test   edi,edi
c001b918:	75 0b                	jne    c001b925 <__umoddi3+0x45>
c001b91a:	b8 01 00 00 00       	mov    eax,0x1
c001b91f:	31 d2                	xor    edx,edx
c001b921:	f7 f7                	div    edi
c001b923:	89 c5                	mov    ebp,eax
c001b925:	89 d8                	mov    eax,ebx
c001b927:	31 d2                	xor    edx,edx
c001b929:	f7 f5                	div    ebp
c001b92b:	89 f0                	mov    eax,esi
c001b92d:	f7 f5                	div    ebp
c001b92f:	89 d0                	mov    eax,edx
c001b931:	eb d4                	jmp    c001b907 <__umoddi3+0x27>
c001b933:	90                   	nop
c001b934:	89 f1                	mov    ecx,esi
c001b936:	39 d8                	cmp    eax,ebx
c001b938:	76 0a                	jbe    c001b944 <__umoddi3+0x64>
c001b93a:	89 f0                	mov    eax,esi
c001b93c:	83 c4 1c             	add    esp,0x1c
c001b93f:	5b                   	pop    ebx
c001b940:	5e                   	pop    esi
c001b941:	5f                   	pop    edi
c001b942:	5d                   	pop    ebp
c001b943:	c3                   	ret    
c001b944:	0f bd e8             	bsr    ebp,eax
c001b947:	83 f5 1f             	xor    ebp,0x1f
c001b94a:	75 1c                	jne    c001b968 <__umoddi3+0x88>
c001b94c:	39 d8                	cmp    eax,ebx
c001b94e:	72 04                	jb     c001b954 <__umoddi3+0x74>
c001b950:	39 f7                	cmp    edi,esi
c001b952:	77 08                	ja     c001b95c <__umoddi3+0x7c>
c001b954:	89 da                	mov    edx,ebx
c001b956:	29 fe                	sub    esi,edi
c001b958:	19 c2                	sbb    edx,eax
c001b95a:	89 f1                	mov    ecx,esi
c001b95c:	89 c8                	mov    eax,ecx
c001b95e:	83 c4 1c             	add    esp,0x1c
c001b961:	5b                   	pop    ebx
c001b962:	5e                   	pop    esi
c001b963:	5f                   	pop    edi
c001b964:	5d                   	pop    ebp
c001b965:	c3                   	ret    
c001b966:	66 90                	xchg   ax,ax
c001b968:	ba 20 00 00 00       	mov    edx,0x20
c001b96d:	29 ea                	sub    edx,ebp
c001b96f:	89 e9                	mov    ecx,ebp
c001b971:	d3 e0                	shl    eax,cl
c001b973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b977:	89 f8                	mov    eax,edi
c001b979:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b97d:	88 d1                	mov    cl,dl
c001b97f:	d3 e8                	shr    eax,cl
c001b981:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b985:	09 c1                	or     ecx,eax
c001b987:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b98b:	89 e9                	mov    ecx,ebp
c001b98d:	d3 e7                	shl    edi,cl
c001b98f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b993:	89 d8                	mov    eax,ebx
c001b995:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b999:	88 d1                	mov    cl,dl
c001b99b:	d3 e8                	shr    eax,cl
c001b99d:	89 c7                	mov    edi,eax
c001b99f:	89 e9                	mov    ecx,ebp
c001b9a1:	d3 e3                	shl    ebx,cl
c001b9a3:	89 f0                	mov    eax,esi
c001b9a5:	88 d1                	mov    cl,dl
c001b9a7:	d3 e8                	shr    eax,cl
c001b9a9:	09 d8                	or     eax,ebx
c001b9ab:	89 e9                	mov    ecx,ebp
c001b9ad:	d3 e6                	shl    esi,cl
c001b9af:	89 f3                	mov    ebx,esi
c001b9b1:	89 fa                	mov    edx,edi
c001b9b3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b9b7:	89 d1                	mov    ecx,edx
c001b9b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b9bd:	89 c6                	mov    esi,eax
c001b9bf:	89 d7                	mov    edi,edx
c001b9c1:	39 d1                	cmp    ecx,edx
c001b9c3:	72 27                	jb     c001b9ec <__umoddi3+0x10c>
c001b9c5:	74 21                	je     c001b9e8 <__umoddi3+0x108>
c001b9c7:	89 ca                	mov    edx,ecx
c001b9c9:	29 f3                	sub    ebx,esi
c001b9cb:	19 fa                	sbb    edx,edi
c001b9cd:	89 d0                	mov    eax,edx
c001b9cf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001b9d3:	d3 e0                	shl    eax,cl
c001b9d5:	89 e9                	mov    ecx,ebp
c001b9d7:	d3 eb                	shr    ebx,cl
c001b9d9:	09 d8                	or     eax,ebx
c001b9db:	d3 ea                	shr    edx,cl
c001b9dd:	83 c4 1c             	add    esp,0x1c
c001b9e0:	5b                   	pop    ebx
c001b9e1:	5e                   	pop    esi
c001b9e2:	5f                   	pop    edi
c001b9e3:	5d                   	pop    ebp
c001b9e4:	c3                   	ret    
c001b9e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9e8:	39 c3                	cmp    ebx,eax
c001b9ea:	73 db                	jae    c001b9c7 <__umoddi3+0xe7>
c001b9ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b9f0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001b9f4:	89 d7                	mov    edi,edx
c001b9f6:	89 c6                	mov    esi,eax
c001b9f8:	eb cd                	jmp    c001b9c7 <__umoddi3+0xe7>

Disassembly of section .init:

c001b9fa <_init>:
c001b9fa:	55                   	push   ebp
c001b9fb:	89 e5                	mov    ebp,esp
c001b9fd:	e8 16 47 fe ff       	call   c0000118 <frame_dummy>
c001ba02:	e8 e5 fa ff ff       	call   c001b4ec <__do_global_ctors_aux>
c001ba07:	5d                   	pop    ebp
c001ba08:	c3                   	ret    

Disassembly of section .fini:

c001ba09 <_fini>:
c001ba09:	55                   	push   ebp
c001ba0a:	89 e5                	mov    ebp,esp
c001ba0c:	e8 97 46 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001ba11:	5d                   	pop    ebp
c001ba12:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001ba14 <Computer::~Computer()>:
c001ba14:	83 ec 0c             	sub    esp,0xc
c001ba17:	ba 10 cd 01 c0       	mov    edx,0xc001cd10
c001ba1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba20:	89 10                	mov    DWORD PTR [eax],edx
c001ba22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba26:	83 ec 0c             	sub    esp,0xc
c001ba29:	50                   	push   eax
c001ba2a:	e8 3b f3 fe ff       	call   c000ad6a <Device::~Device()>
c001ba2f:	83 c4 10             	add    esp,0x10
c001ba32:	90                   	nop
c001ba33:	83 c4 0c             	add    esp,0xc
c001ba36:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001ba38 <Computer::~Computer()>:
c001ba38:	83 ec 0c             	sub    esp,0xc
c001ba3b:	83 ec 0c             	sub    esp,0xc
c001ba3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba42:	e8 cd ff ff ff       	call   c001ba14 <Computer::~Computer()>
c001ba47:	83 c4 10             	add    esp,0x10
c001ba4a:	83 ec 08             	sub    esp,0x8
c001ba4d:	68 ec 01 00 00       	push   0x1ec
c001ba52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba56:	e8 d7 de fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001ba5b:	83 c4 10             	add    esp,0x10
c001ba5e:	83 c4 0c             	add    esp,0xc
c001ba61:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ba62 <idleCommon()>:
c001ba62:	83 ec 0c             	sub    esp,0xc
c001ba65:	fa                   	cli    
c001ba66:	ff 05 e8 2a 02 c0    	inc    DWORD PTR ds:0xc0022ae8
c001ba6c:	e8 0f 70 ff ff       	call   c0012a80 <schedule()>
c001ba71:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c001ba76:	48                   	dec    eax
c001ba77:	a3 e8 2a 02 c0       	mov    ds:0xc0022ae8,eax
c001ba7c:	75 01                	jne    c001ba7f <idleCommon()+0x1d>
c001ba7e:	fb                   	sti    
c001ba7f:	83 c4 0c             	add    esp,0xc
c001ba82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ba84 <LinkedList<UnixFile>::~LinkedList()>:
c001ba84:	90                   	nop
c001ba85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ba86 <LinkedList<UnixFile>::LinkedList()>:
c001ba86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba9f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001baa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baaa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bab4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001babb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001babf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bac6:	90                   	nop
c001bac7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001bac8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001bac8:	83 ec 0c             	sub    esp,0xc
c001bacb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bad0:	75 10                	jne    c001bae2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001bad2:	83 ec 0c             	sub    esp,0xc
c001bad5:	68 64 cf 01 c0       	push   0xc001cf64
c001bada:	e8 c2 3a ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001badf:	83 c4 10             	add    esp,0x10
c001bae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae6:	8b 00                	mov    eax,DWORD PTR [eax]
c001bae8:	85 c0                	test   eax,eax
c001baea:	74 34                	je     c001bb20 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001baec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001baf3:	85 c0                	test   eax,eax
c001baf5:	74 29                	je     c001bb20 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001baf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bafb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bafe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bb05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb0d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bb1e:	eb 65                	jmp    c001bb85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb24:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb26:	85 c0                	test   eax,eax
c001bb28:	75 4b                	jne    c001bb75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb31:	85 c0                	test   eax,eax
c001bb33:	75 40                	jne    c001bb75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bb35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb3d:	89 10                	mov    DWORD PTR [eax],edx
c001bb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bb5f:	85 c0                	test   eax,eax
c001bb61:	74 22                	je     c001bb85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bb63:	83 ec 0c             	sub    esp,0xc
c001bb66:	68 86 cf 01 c0       	push   0xc001cf86
c001bb6b:	e8 31 3a ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bb70:	83 c4 10             	add    esp,0x10
c001bb73:	eb 10                	jmp    c001bb85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bb75:	83 ec 0c             	sub    esp,0xc
c001bb78:	68 90 cf 01 c0       	push   0xc001cf90
c001bb7d:	e8 1f 3a ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bb82:	83 c4 10             	add    esp,0x10
c001bb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bb8c:	8d 50 01             	lea    edx,[eax+0x1]
c001bb8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb93:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bb96:	90                   	nop
c001bb97:	83 c4 0c             	add    esp,0xc
c001bb9a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001bb9c <LinkedList<UnixFile>::getFirstElement()>:
c001bb9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bba0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bba2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001bba4 <LinkedList<UnixFile>::removeFirst()>:
c001bba4:	83 ec 0c             	sub    esp,0xc
c001bba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbab:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbad:	85 c0                	test   eax,eax
c001bbaf:	75 12                	jne    c001bbc3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001bbb1:	83 ec 0c             	sub    esp,0xc
c001bbb4:	68 9c cf 01 c0       	push   0xc001cf9c
c001bbb9:	e8 e3 39 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bbbe:	83 c4 10             	add    esp,0x10
c001bbc1:	eb 7e                	jmp    c001bc41 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001bbc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bbca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bbcd:	85 c0                	test   eax,eax
c001bbcf:	74 10                	je     c001bbe1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001bbd1:	83 ec 0c             	sub    esp,0xc
c001bbd4:	68 e7 cf 01 c0       	push   0xc001cfe7
c001bbd9:	e8 c3 39 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bbde:	83 c4 10             	add    esp,0x10
c001bbe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbe7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bbea:	85 c0                	test   eax,eax
c001bbec:	75 33                	jne    c001bc21 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001bbee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bc0a:	83 f8 01             	cmp    eax,0x1
c001bc0d:	74 21                	je     c001bc30 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001bc0f:	83 ec 0c             	sub    esp,0xc
c001bc12:	68 c0 cf 01 c0       	push   0xc001cfc0
c001bc17:	e8 85 39 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bc1c:	83 c4 10             	add    esp,0x10
c001bc1f:	eb 0f                	jmp    c001bc30 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001bc21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc25:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc27:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2e:	89 10                	mov    DWORD PTR [eax],edx
c001bc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bc37:	8d 50 ff             	lea    edx,[eax-0x1]
c001bc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bc41:	83 c4 0c             	add    esp,0xc
c001bc44:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001bc46 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001bc46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bc4d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001bc4e <DriverlessDevice::~DriverlessDevice()>:
c001bc4e:	ba 3c d6 01 c0       	mov    edx,0xc001d63c
c001bc53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc57:	89 10                	mov    DWORD PTR [eax],edx
c001bc59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc5d:	50                   	push   eax
c001bc5e:	e8 07 f1 fe ff       	call   c000ad6a <Device::~Device()>
c001bc63:	83 c4 04             	add    esp,0x4
c001bc66:	90                   	nop
c001bc67:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001bc68 <DriverlessDevice::~DriverlessDevice()>:
c001bc68:	83 ec 0c             	sub    esp,0xc
c001bc6b:	83 ec 0c             	sub    esp,0xc
c001bc6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc72:	e8 d7 ff ff ff       	call   c001bc4e <DriverlessDevice::~DriverlessDevice()>
c001bc77:	83 c4 10             	add    esp,0x10
c001bc7a:	83 ec 08             	sub    esp,0x8
c001bc7d:	68 58 01 00 00       	push   0x158
c001bc82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc86:	e8 a7 dc fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001bc8b:	83 c4 10             	add    esp,0x10
c001bc8e:	83 c4 0c             	add    esp,0xc
c001bc91:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001bc92 <LinkedList<Device>::addElement(Device*)>:
c001bc92:	83 ec 0c             	sub    esp,0xc
c001bc95:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bc9a:	75 10                	jne    c001bcac <LinkedList<Device>::addElement(Device*)+0x1a>
c001bc9c:	83 ec 0c             	sub    esp,0xc
c001bc9f:	68 64 cf 01 c0       	push   0xc001cf64
c001bca4:	e8 f8 38 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bca9:	83 c4 10             	add    esp,0x10
c001bcac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcb2:	85 c0                	test   eax,eax
c001bcb4:	74 3a                	je     c001bcf0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001bcb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcbd:	85 c0                	test   eax,eax
c001bcbf:	74 2f                	je     c001bcf0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001bcc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bccc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001bcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bcda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bcdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bce4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001bcee:	eb 68                	jmp    c001bd58 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcf6:	85 c0                	test   eax,eax
c001bcf8:	75 4e                	jne    c001bd48 <LinkedList<Device>::addElement(Device*)+0xb6>
c001bcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd01:	85 c0                	test   eax,eax
c001bd03:	75 43                	jne    c001bd48 <LinkedList<Device>::addElement(Device*)+0xb6>
c001bd05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd0d:	89 10                	mov    DWORD PTR [eax],edx
c001bd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd21:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001bd2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bd32:	85 c0                	test   eax,eax
c001bd34:	74 22                	je     c001bd58 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bd36:	83 ec 0c             	sub    esp,0xc
c001bd39:	68 86 cf 01 c0       	push   0xc001cf86
c001bd3e:	e8 5e 38 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bd43:	83 c4 10             	add    esp,0x10
c001bd46:	eb 10                	jmp    c001bd58 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bd48:	83 ec 0c             	sub    esp,0xc
c001bd4b:	68 90 cf 01 c0       	push   0xc001cf90
c001bd50:	e8 4c 38 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bd55:	83 c4 10             	add    esp,0x10
c001bd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bd5f:	8d 50 01             	lea    edx,[eax+0x1]
c001bd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bd69:	90                   	nop
c001bd6a:	83 c4 0c             	add    esp,0xc
c001bd6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001bd6e <LinkedList<Device>::LinkedList()>:
c001bd6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bd78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bd8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bda3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bdae:	90                   	nop
c001bdaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001bdb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001bdb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdb6:	85 c0                	test   eax,eax
c001bdb8:	75 0e                	jne    c001bdc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001bdba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bdc1:	85 c0                	test   eax,eax
c001bdc3:	75 03                	jne    c001bdc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001bdc5:	b0 01                	mov    al,0x1
c001bdc7:	c3                   	ret    
c001bdc8:	b0 00                	mov    al,0x0
c001bdca:	90                   	nop
c001bdcb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001bdcc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001bdcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001bdd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001bdd4:	83 ec 0c             	sub    esp,0xc
c001bdd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bddb:	8b 00                	mov    eax,DWORD PTR [eax]
c001bddd:	85 c0                	test   eax,eax
c001bddf:	75 17                	jne    c001bdf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001bde1:	83 ec 0c             	sub    esp,0xc
c001bde4:	68 9c cf 01 c0       	push   0xc001cf9c
c001bde9:	e8 b3 37 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bdee:	83 c4 10             	add    esp,0x10
c001bdf1:	e9 92 00 00 00       	jmp    c001be88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001bdf6:	66 90                	xchg   ax,ax
c001bdf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bdff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001be02:	85 c0                	test   eax,eax
c001be04:	0f 95 c0             	setne  al
c001be07:	84 c0                	test   al,al
c001be09:	74 11                	je     c001be1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001be0b:	83 ec 0c             	sub    esp,0xc
c001be0e:	68 e7 cf 01 c0       	push   0xc001cfe7
c001be13:	e8 89 37 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001be18:	83 c4 10             	add    esp,0x10
c001be1b:	90                   	nop
c001be1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be20:	8b 00                	mov    eax,DWORD PTR [eax]
c001be22:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001be25:	85 c0                	test   eax,eax
c001be27:	0f 94 c0             	sete   al
c001be2a:	84 c0                	test   al,al
c001be2c:	74 36                	je     c001be64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001be2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001be4a:	83 f8 01             	cmp    eax,0x1
c001be4d:	74 25                	je     c001be74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001be4f:	83 ec 0c             	sub    esp,0xc
c001be52:	68 c0 cf 01 c0       	push   0xc001cfc0
c001be57:	e8 45 37 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001be5c:	83 c4 10             	add    esp,0x10
c001be5f:	eb 13                	jmp    c001be74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001be61:	8d 76 00             	lea    esi,[esi+0x0]
c001be64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be68:	8b 00                	mov    eax,DWORD PTR [eax]
c001be6a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001be6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be71:	89 10                	mov    DWORD PTR [eax],edx
c001be73:	90                   	nop
c001be74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001be7b:	8d 50 ff             	lea    edx,[eax-0x1]
c001be7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001be85:	8d 76 00             	lea    esi,[esi+0x0]
c001be88:	83 c4 0c             	add    esp,0xc
c001be8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001be8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001be8c:	83 ec 0c             	sub    esp,0xc
c001be8f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001be94:	75 12                	jne    c001bea8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001be96:	83 ec 0c             	sub    esp,0xc
c001be99:	68 64 cf 01 c0       	push   0xc001cf64
c001be9e:	e8 fe 36 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bea3:	83 c4 10             	add    esp,0x10
c001bea6:	66 90                	xchg   ax,ax
c001bea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beac:	8b 00                	mov    eax,DWORD PTR [eax]
c001beae:	85 c0                	test   eax,eax
c001beb0:	74 36                	je     c001bee8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001beb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001beb9:	85 c0                	test   eax,eax
c001bebb:	74 2b                	je     c001bee8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001bebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bec4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bec8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001becb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001becf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bed3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bedd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bee4:	eb 6a                	jmp    c001bf50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bee6:	66 90                	xchg   ax,ax
c001bee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beec:	8b 00                	mov    eax,DWORD PTR [eax]
c001beee:	85 c0                	test   eax,eax
c001bef0:	75 4e                	jne    c001bf40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001bef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bef9:	85 c0                	test   eax,eax
c001befb:	75 43                	jne    c001bf40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001befd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf05:	89 10                	mov    DWORD PTR [eax],edx
c001bf07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf0b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf0f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf19:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bf20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf27:	85 c0                	test   eax,eax
c001bf29:	74 25                	je     c001bf50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bf2b:	83 ec 0c             	sub    esp,0xc
c001bf2e:	68 86 cf 01 c0       	push   0xc001cf86
c001bf33:	e8 69 36 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bf38:	83 c4 10             	add    esp,0x10
c001bf3b:	eb 13                	jmp    c001bf50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bf3d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf40:	83 ec 0c             	sub    esp,0xc
c001bf43:	68 90 cf 01 c0       	push   0xc001cf90
c001bf48:	e8 54 36 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf57:	8d 50 01             	lea    edx,[eax+0x1]
c001bf5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf61:	90                   	nop
c001bf62:	83 c4 0c             	add    esp,0xc
c001bf65:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001bf68 <ACPI::~ACPI()>:
c001bf68:	83 ec 0c             	sub    esp,0xc
c001bf6b:	ba a4 db 01 c0       	mov    edx,0xc001dba4
c001bf70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf74:	89 10                	mov    DWORD PTR [eax],edx
c001bf76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf7a:	83 ec 0c             	sub    esp,0xc
c001bf7d:	50                   	push   eax
c001bf7e:	e8 e7 ed fe ff       	call   c000ad6a <Device::~Device()>
c001bf83:	83 c4 10             	add    esp,0x10
c001bf86:	90                   	nop
c001bf87:	83 c4 0c             	add    esp,0xc
c001bf8a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001bf8c <ACPI::~ACPI()>:
c001bf8c:	83 ec 0c             	sub    esp,0xc
c001bf8f:	83 ec 0c             	sub    esp,0xc
c001bf92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf96:	e8 cd ff ff ff       	call   c001bf68 <ACPI::~ACPI()>
c001bf9b:	83 c4 10             	add    esp,0x10
c001bf9e:	83 ec 08             	sub    esp,0x8
c001bfa1:	68 64 12 00 00       	push   0x1264
c001bfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfaa:	e8 83 d9 fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001bfaf:	83 c4 10             	add    esp,0x10
c001bfb2:	83 c4 0c             	add    esp,0xc
c001bfb5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001bfb8 <LinkedList<Device>::~LinkedList()>:
c001bfb8:	90                   	nop
c001bfb9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001bfbc <LinkedList<Device>::isEmpty()>:
c001bfbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfc2:	85 c0                	test   eax,eax
c001bfc4:	75 0e                	jne    c001bfd4 <LinkedList<Device>::isEmpty()+0x18>
c001bfc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfcd:	85 c0                	test   eax,eax
c001bfcf:	75 03                	jne    c001bfd4 <LinkedList<Device>::isEmpty()+0x18>
c001bfd1:	b0 01                	mov    al,0x1
c001bfd3:	c3                   	ret    
c001bfd4:	b0 00                	mov    al,0x0
c001bfd6:	90                   	nop
c001bfd7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001bfd8 <LinkedList<Device>::getFirstElement()>:
c001bfd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfdc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfde:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001bfe0 <LinkedList<Device>::removeFirst()>:
c001bfe0:	83 ec 0c             	sub    esp,0xc
c001bfe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfe7:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfe9:	85 c0                	test   eax,eax
c001bfeb:	75 17                	jne    c001c004 <LinkedList<Device>::removeFirst()+0x24>
c001bfed:	83 ec 0c             	sub    esp,0xc
c001bff0:	68 9c cf 01 c0       	push   0xc001cf9c
c001bff5:	e8 a7 35 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001bffa:	83 c4 10             	add    esp,0x10
c001bffd:	e9 92 00 00 00       	jmp    c001c094 <LinkedList<Device>::removeFirst()+0xb4>
c001c002:	66 90                	xchg   ax,ax
c001c004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c00b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c011:	85 c0                	test   eax,eax
c001c013:	74 13                	je     c001c028 <LinkedList<Device>::removeFirst()+0x48>
c001c015:	83 ec 0c             	sub    esp,0xc
c001c018:	68 e7 cf 01 c0       	push   0xc001cfe7
c001c01d:	e8 7f 35 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001c022:	83 c4 10             	add    esp,0x10
c001c025:	8d 76 00             	lea    esi,[esi+0x0]
c001c028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c02c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c02e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c034:	85 c0                	test   eax,eax
c001c036:	75 34                	jne    c001c06c <LinkedList<Device>::removeFirst()+0x8c>
c001c038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c03c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c046:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c051:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c054:	83 f8 01             	cmp    eax,0x1
c001c057:	74 27                	je     c001c080 <LinkedList<Device>::removeFirst()+0xa0>
c001c059:	83 ec 0c             	sub    esp,0xc
c001c05c:	68 c0 cf 01 c0       	push   0xc001cfc0
c001c061:	e8 3b 35 ff ff       	call   c000f5a1 <Krnl::panic(char const*)>
c001c066:	83 c4 10             	add    esp,0x10
c001c069:	eb 15                	jmp    c001c080 <LinkedList<Device>::removeFirst()+0xa0>
c001c06b:	90                   	nop
c001c06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c070:	8b 00                	mov    eax,DWORD PTR [eax]
c001c072:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c07c:	89 10                	mov    DWORD PTR [eax],edx
c001c07e:	66 90                	xchg   ax,ax
c001c080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c084:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c087:	8d 50 ff             	lea    edx,[eax-0x1]
c001c08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c08e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c091:	8d 76 00             	lea    esi,[esi+0x0]
c001c094:	83 c4 0c             	add    esp,0xc
c001c097:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c098 <CPU::~CPU()>:
c001c098:	83 ec 0c             	sub    esp,0xc
c001c09b:	ba 50 dd 01 c0       	mov    edx,0xc001dd50
c001c0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a4:	89 10                	mov    DWORD PTR [eax],edx
c001c0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0aa:	83 ec 0c             	sub    esp,0xc
c001c0ad:	50                   	push   eax
c001c0ae:	e8 b7 ec fe ff       	call   c000ad6a <Device::~Device()>
c001c0b3:	83 c4 10             	add    esp,0x10
c001c0b6:	90                   	nop
c001c0b7:	83 c4 0c             	add    esp,0xc
c001c0ba:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c0bc <CPU::~CPU()>:
c001c0bc:	83 ec 0c             	sub    esp,0xc
c001c0bf:	83 ec 0c             	sub    esp,0xc
c001c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0c6:	e8 cd ff ff ff       	call   c001c098 <CPU::~CPU()>
c001c0cb:	83 c4 10             	add    esp,0x10
c001c0ce:	83 ec 08             	sub    esp,0x8
c001c0d1:	68 94 11 00 00       	push   0x1194
c001c0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0da:	e8 53 d8 fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001c0df:	83 c4 10             	add    esp,0x10
c001c0e2:	83 c4 0c             	add    esp,0xc
c001c0e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c0e8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c0e8:	90                   	nop
c001c0e9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c0ec <ThreadControlBlock::ThreadControlBlock()>:
c001c0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0f0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c0f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0fb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c106:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c10d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c111:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c11c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c123:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c127:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c12b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c12f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c133:	90                   	nop
c001c134:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c138 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c13c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c146:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c14d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c151:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c15c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c166:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c16d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c171:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c178:	90                   	nop
c001c179:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c17c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c17c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c180:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c183:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c184 <PCI::~PCI()>:
c001c184:	83 ec 0c             	sub    esp,0xc
c001c187:	ba 18 e9 01 c0       	mov    edx,0xc001e918
c001c18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c190:	89 10                	mov    DWORD PTR [eax],edx
c001c192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c196:	83 ec 0c             	sub    esp,0xc
c001c199:	50                   	push   eax
c001c19a:	e8 55 e6 fe ff       	call   c000a7f4 <Bus::~Bus()>
c001c19f:	83 c4 10             	add    esp,0x10
c001c1a2:	90                   	nop
c001c1a3:	83 c4 0c             	add    esp,0xc
c001c1a6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c1a8 <PCI::~PCI()>:
c001c1a8:	83 ec 0c             	sub    esp,0xc
c001c1ab:	83 ec 0c             	sub    esp,0xc
c001c1ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1b2:	e8 cd ff ff ff       	call   c001c184 <PCI::~PCI()>
c001c1b7:	83 c4 10             	add    esp,0x10
c001c1ba:	83 ec 08             	sub    esp,0x8
c001c1bd:	68 5c 01 00 00       	push   0x15c
c001c1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1c6:	e8 67 d7 fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001c1cb:	83 c4 10             	add    esp,0x10
c001c1ce:	83 c4 0c             	add    esp,0xc
c001c1d1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c1d2 <IDE::~IDE()>:
c001c1d2:	83 ec 0c             	sub    esp,0xc
c001c1d5:	ba cc e9 01 c0       	mov    edx,0xc001e9cc
c001c1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1de:	89 10                	mov    DWORD PTR [eax],edx
c001c1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e4:	83 ec 0c             	sub    esp,0xc
c001c1e7:	50                   	push   eax
c001c1e8:	e8 f7 ef fe ff       	call   c000b1e4 <HardDiskController::~HardDiskController()>
c001c1ed:	83 c4 10             	add    esp,0x10
c001c1f0:	90                   	nop
c001c1f1:	83 c4 0c             	add    esp,0xc
c001c1f4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c1f6 <IDE::~IDE()>:
c001c1f6:	83 ec 0c             	sub    esp,0xc
c001c1f9:	83 ec 0c             	sub    esp,0xc
c001c1fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c200:	e8 cd ff ff ff       	call   c001c1d2 <IDE::~IDE()>
c001c205:	83 c4 10             	add    esp,0x10
c001c208:	83 ec 08             	sub    esp,0x8
c001c20b:	68 70 02 00 00       	push   0x270
c001c210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c214:	e8 19 d7 fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001c219:	83 c4 10             	add    esp,0x10
c001c21c:	83 c4 0c             	add    esp,0xc
c001c21f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c220 <SATABus::~SATABus()>:
c001c220:	83 ec 0c             	sub    esp,0xc
c001c223:	ba 1c ea 01 c0       	mov    edx,0xc001ea1c
c001c228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c22c:	89 10                	mov    DWORD PTR [eax],edx
c001c22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c232:	83 ec 0c             	sub    esp,0xc
c001c235:	50                   	push   eax
c001c236:	e8 a9 ef fe ff       	call   c000b1e4 <HardDiskController::~HardDiskController()>
c001c23b:	83 c4 10             	add    esp,0x10
c001c23e:	90                   	nop
c001c23f:	83 c4 0c             	add    esp,0xc
c001c242:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c244 <SATABus::~SATABus()>:
c001c244:	83 ec 0c             	sub    esp,0xc
c001c247:	83 ec 0c             	sub    esp,0xc
c001c24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c24e:	e8 cd ff ff ff       	call   c001c220 <SATABus::~SATABus()>
c001c253:	83 c4 10             	add    esp,0x10
c001c256:	83 ec 08             	sub    esp,0x8
c001c259:	68 64 01 00 00       	push   0x164
c001c25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c262:	e8 cb d6 fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001c267:	83 c4 10             	add    esp,0x10
c001c26a:	83 c4 0c             	add    esp,0xc
c001c26d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c26e <ATA::~ATA()>:
c001c26e:	83 ec 0c             	sub    esp,0xc
c001c271:	ba 5c ea 01 c0       	mov    edx,0xc001ea5c
c001c276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c27a:	89 10                	mov    DWORD PTR [eax],edx
c001c27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c280:	83 ec 0c             	sub    esp,0xc
c001c283:	50                   	push   eax
c001c284:	e8 3d f0 fe ff       	call   c000b2c6 <PhysicalDisk::~PhysicalDisk()>
c001c289:	83 c4 10             	add    esp,0x10
c001c28c:	90                   	nop
c001c28d:	83 c4 0c             	add    esp,0xc
c001c290:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c292 <ATA::~ATA()>:
c001c292:	83 ec 0c             	sub    esp,0xc
c001c295:	83 ec 0c             	sub    esp,0xc
c001c298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c29c:	e8 cd ff ff ff       	call   c001c26e <ATA::~ATA()>
c001c2a1:	83 c4 10             	add    esp,0x10
c001c2a4:	83 ec 08             	sub    esp,0x8
c001c2a7:	68 7c 01 00 00       	push   0x17c
c001c2ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2b0:	e8 7d d6 fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001c2b5:	83 c4 10             	add    esp,0x10
c001c2b8:	83 c4 0c             	add    esp,0xc
c001c2bb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c2bc <ATAPI::~ATAPI()>:
c001c2bc:	83 ec 0c             	sub    esp,0xc
c001c2bf:	ba a4 ea 01 c0       	mov    edx,0xc001eaa4
c001c2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c8:	89 10                	mov    DWORD PTR [eax],edx
c001c2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ce:	83 ec 0c             	sub    esp,0xc
c001c2d1:	50                   	push   eax
c001c2d2:	e8 ef ef fe ff       	call   c000b2c6 <PhysicalDisk::~PhysicalDisk()>
c001c2d7:	83 c4 10             	add    esp,0x10
c001c2da:	90                   	nop
c001c2db:	83 c4 0c             	add    esp,0xc
c001c2de:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c2e0 <ATAPI::~ATAPI()>:
c001c2e0:	83 ec 0c             	sub    esp,0xc
c001c2e3:	83 ec 0c             	sub    esp,0xc
c001c2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2ea:	e8 cd ff ff ff       	call   c001c2bc <ATAPI::~ATAPI()>
c001c2ef:	83 c4 10             	add    esp,0x10
c001c2f2:	83 ec 08             	sub    esp,0x8
c001c2f5:	68 84 01 00 00       	push   0x184
c001c2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2fe:	e8 2f d6 fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001c303:	83 c4 10             	add    esp,0x10
c001c306:	83 c4 0c             	add    esp,0xc
c001c309:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c30a <SATA::~SATA()>:
c001c30a:	83 ec 0c             	sub    esp,0xc
c001c30d:	ba 58 eb 01 c0       	mov    edx,0xc001eb58
c001c312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c316:	89 10                	mov    DWORD PTR [eax],edx
c001c318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c31c:	83 ec 0c             	sub    esp,0xc
c001c31f:	50                   	push   eax
c001c320:	e8 a1 ef fe ff       	call   c000b2c6 <PhysicalDisk::~PhysicalDisk()>
c001c325:	83 c4 10             	add    esp,0x10
c001c328:	90                   	nop
c001c329:	83 c4 0c             	add    esp,0xc
c001c32c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c32e <SATA::~SATA()>:
c001c32e:	83 ec 0c             	sub    esp,0xc
c001c331:	83 ec 0c             	sub    esp,0xc
c001c334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c338:	e8 cd ff ff ff       	call   c001c30a <SATA::~SATA()>
c001c33d:	83 c4 10             	add    esp,0x10
c001c340:	83 ec 08             	sub    esp,0x8
c001c343:	68 7c 01 00 00       	push   0x17c
c001c348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c34c:	e8 e1 d5 fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001c351:	83 c4 10             	add    esp,0x10
c001c354:	83 c4 0c             	add    esp,0xc
c001c357:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c358 <SATAPI::~SATAPI()>:
c001c358:	83 ec 0c             	sub    esp,0xc
c001c35b:	ba c4 ec 01 c0       	mov    edx,0xc001ecc4
c001c360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c364:	89 10                	mov    DWORD PTR [eax],edx
c001c366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c36a:	83 ec 0c             	sub    esp,0xc
c001c36d:	50                   	push   eax
c001c36e:	e8 53 ef fe ff       	call   c000b2c6 <PhysicalDisk::~PhysicalDisk()>
c001c373:	83 c4 10             	add    esp,0x10
c001c376:	90                   	nop
c001c377:	83 c4 0c             	add    esp,0xc
c001c37a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c37c <SATAPI::~SATAPI()>:
c001c37c:	83 ec 0c             	sub    esp,0xc
c001c37f:	83 ec 0c             	sub    esp,0xc
c001c382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c386:	e8 cd ff ff ff       	call   c001c358 <SATAPI::~SATAPI()>
c001c38b:	83 c4 10             	add    esp,0x10
c001c38e:	83 ec 08             	sub    esp,0x8
c001c391:	68 84 01 00 00       	push   0x184
c001c396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c39a:	e8 93 d5 fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001c39f:	83 c4 10             	add    esp,0x10
c001c3a2:	83 c4 0c             	add    esp,0xc
c001c3a5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c3a6 <IOAPIC::~IOAPIC()>:
c001c3a6:	83 ec 0c             	sub    esp,0xc
c001c3a9:	ba 04 ed 01 c0       	mov    edx,0xc001ed04
c001c3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b2:	89 10                	mov    DWORD PTR [eax],edx
c001c3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b8:	83 ec 0c             	sub    esp,0xc
c001c3bb:	50                   	push   eax
c001c3bc:	e8 a9 e9 fe ff       	call   c000ad6a <Device::~Device()>
c001c3c1:	83 c4 10             	add    esp,0x10
c001c3c4:	90                   	nop
c001c3c5:	83 c4 0c             	add    esp,0xc
c001c3c8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c3ca <IOAPIC::~IOAPIC()>:
c001c3ca:	83 ec 0c             	sub    esp,0xc
c001c3cd:	83 ec 0c             	sub    esp,0xc
c001c3d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3d4:	e8 cd ff ff ff       	call   c001c3a6 <IOAPIC::~IOAPIC()>
c001c3d9:	83 c4 10             	add    esp,0x10
c001c3dc:	83 ec 08             	sub    esp,0x8
c001c3df:	68 68 01 00 00       	push   0x168
c001c3e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3e8:	e8 45 d5 fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001c3ed:	83 c4 10             	add    esp,0x10
c001c3f0:	83 c4 0c             	add    esp,0xc
c001c3f3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c3f4 <APICTimer::~APICTimer()>:
c001c3f4:	83 ec 0c             	sub    esp,0xc
c001c3f7:	ba 4c ed 01 c0       	mov    edx,0xc001ed4c
c001c3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c400:	89 10                	mov    DWORD PTR [eax],edx
c001c402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c406:	83 ec 0c             	sub    esp,0xc
c001c409:	50                   	push   eax
c001c40a:	e8 59 02 ff ff       	call   c000c668 <Timer::~Timer()>
c001c40f:	83 c4 10             	add    esp,0x10
c001c412:	90                   	nop
c001c413:	83 c4 0c             	add    esp,0xc
c001c416:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c418 <APICTimer::~APICTimer()>:
c001c418:	83 ec 0c             	sub    esp,0xc
c001c41b:	83 ec 0c             	sub    esp,0xc
c001c41e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c422:	e8 cd ff ff ff       	call   c001c3f4 <APICTimer::~APICTimer()>
c001c427:	83 c4 10             	add    esp,0x10
c001c42a:	83 ec 08             	sub    esp,0x8
c001c42d:	68 60 01 00 00       	push   0x160
c001c432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c436:	e8 f7 d4 fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001c43b:	83 c4 10             	add    esp,0x10
c001c43e:	83 c4 0c             	add    esp,0xc
c001c441:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c444 <PIT::~PIT()>:
c001c444:	83 ec 0c             	sub    esp,0xc
c001c447:	ba 9c ed 01 c0       	mov    edx,0xc001ed9c
c001c44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c450:	89 10                	mov    DWORD PTR [eax],edx
c001c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c456:	83 ec 0c             	sub    esp,0xc
c001c459:	50                   	push   eax
c001c45a:	e8 09 02 ff ff       	call   c000c668 <Timer::~Timer()>
c001c45f:	83 c4 10             	add    esp,0x10
c001c462:	90                   	nop
c001c463:	83 c4 0c             	add    esp,0xc
c001c466:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c468 <PIT::~PIT()>:
c001c468:	83 ec 0c             	sub    esp,0xc
c001c46b:	83 ec 0c             	sub    esp,0xc
c001c46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c472:	e8 cd ff ff ff       	call   c001c444 <PIT::~PIT()>
c001c477:	83 c4 10             	add    esp,0x10
c001c47a:	83 ec 08             	sub    esp,0x8
c001c47d:	68 5c 01 00 00       	push   0x15c
c001c482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c486:	e8 a7 d4 fe ff       	call   c0009932 <operator delete(void*, unsigned long)>
c001c48b:	83 c4 10             	add    esp,0x10
c001c48e:	83 c4 0c             	add    esp,0xc
c001c491:	c3                   	ret    
