
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 cf f8 00 00       	call   c000f8ef <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a3 88 02 00       	call   c00288c8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 1c 95 02 c0       	mov    ebx,0xc002951c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 28 95 02 c0    	cmp    ebx,0xc0029528
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 d9 02 c0       	mov    eax,0xc002d918
c0000049:	3d 18 d9 02 c0       	cmp    eax,0xc002d918
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 d9 02 c0       	push   0xc002d918
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 d9 02 c0       	mov    eax,0xc002d918
c0000075:	2d 18 d9 02 c0       	sub    eax,0xc002d918
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 d9 02 c0       	push   0xc002d918
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df48,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 30 95 02 c0       	mov    ebx,0xc0029530
c00000bb:	81 eb 2c 95 02 c0    	sub    ebx,0xc002952c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 2c 95 02 c0       	mov    esi,0xc002952c
c00000ca:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c df 02 c0       	mov    ds:0xc002df4c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 d9 02 c0       	push   0xc002d918
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 df 02 c0 01 	mov    BYTE PTR ds:0xc002df48,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 df 02 c0       	push   0xc002df50
c000012c:	68 18 d9 02 c0       	push   0xc002d918
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 a9 d2 01 00       	call   c001d64c <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 3c 22 01 00       	call   c00125f7 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 87 d2 01 00       	call   c001d64c <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 2f d7 01 00       	call   c001db13 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 54 dd 01 00       	call   c001e141 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 90 e3 02 c0 	lgdtd  ds:0xc002e390
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 a5 3f 01 00       	call   c0014587 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 15 e1 00 00       	jmp    c000e760 <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 68 df 02 c0       	mov    ds:0xc002df68,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 68 df 02 c0    	mov    DWORD PTR ds:0xc002df68,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 68 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df68
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 40 95 02 c0 02 	test   BYTE PTR [edx-0x3ffd6ac0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 40 95 02 c0 01 	test   BYTE PTR [edx-0x3ffd6ac0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 40 95 02 c0 08 	test   BYTE PTR [edx-0x3ffd6ac0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 40 95 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6ac0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 40 95 02 c0 01 	test   BYTE PTR [edx-0x3ffd6ac0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 80 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df80
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 84 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd207c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 84 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd207c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d bc df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfbc
c0000e38:	c7 42 0c b4 df 02 c0 	mov    DWORD PTR [edx+0xc],0xc002dfb4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 80 df 02 c0 02 	test   BYTE PTR ds:0xc002df80,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 6f e7 00 00       	call   c000f688 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 b1 e6 00 00       	call   c000f688 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 9b e6 00 00       	call   c000f688 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 77 e6 00 00       	call   c000f688 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 80 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df80
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 84 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd207c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 84 df 02 c0 	mov    DWORD PTR [edx*4-0x3ffd207c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 b4 df 02 c0 	lea    edx,[eax*8-0x3ffd204c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d c0 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfc0
c00011ba:	81 fb b4 df 02 c0    	cmp    ebx,0xc002dfb4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d b4 df 02 c0       	cmp    eax,0xc002dfb4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d b0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfb0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 bc df 02 c0       	mov    ds:0xc002dfbc,eax
c00011f6:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c00011fb:	a3 b0 df 02 c0       	mov    ds:0xc002dfb0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 b4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfb4
c0001209:	c7 40 0c b4 df 02 c0 	mov    DWORD PTR [eax+0xc],0xc002dfb4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 b4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfb4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 78 df 02 c0 	lea    ebp,[edx*4-0x3ffd2088]
c000125a:	8b 14 95 80 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2080]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 80 df 02 c0 	lea    ecx,[edx*4-0x3ffd2080]
c0001275:	8b 14 95 80 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2080]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd b4 e2 02 c0 	or     DWORD PTR [edi*4-0x3ffd1d4c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 b4 df 02 c0 	lea    eax,[eax*8-0x3ffd204c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,ecx
c000132f:	89 0d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,ecx
c0001335:	c7 41 08 b4 df 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002dfb4
c000133c:	c7 41 0c b4 df 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002dfb4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ac df 02 c0 	lea    edx,[ecx*8-0x3ffd2054]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d b4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d4c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d b4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d4c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ac df 02 c0 	lea    edx,[eax*4-0x3ffd2054]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d b4 e2 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1d4c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,edi
c0001402:	89 3d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,edi
c0001408:	c7 47 08 b4 df 02 c0 	mov    DWORD PTR [edi+0x8],0xc002dfb4
c000140f:	c7 47 0c b4 df 02 c0 	mov    DWORD PTR [edi+0xc],0xc002dfb4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d b0 df 02 c0    	mov    DWORD PTR ds:0xc002dfb0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 80 df 02 c0       	mov    edx,0xc002df80
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d d4 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2d4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 d4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2d4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d d4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2d4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 dc e2 02 c0    	push   DWORD PTR ds:0xc002e2dc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 dc e2 02 c0       	mov    eax,ds:0xc002e2dc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ac df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfac,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 84 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd207c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 b4 df 02 c0       	mov    eax,0xc002dfb4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ac e2 02 c0       	cmp    eax,0xc002e2ac
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 d0 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2d0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 e4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2e4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 f4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2f4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 44 96 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd69bc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 80 df 02 c0       	mov    ds:0xc002df80,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d c4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d c8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d cc e2 02 c0    	mov    DWORD PTR ds:0xc002e2cc,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 d4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2d4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 20 fa 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd05e0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 46 f0 01 00       	jmp    c0020c38 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 20 fa 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd05e0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 77 f0 01 00       	jmp    c0020c7f <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 20 fa 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd05e0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 9f f0 01 00       	jmp    c0020cc6 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 1a 4d 02 00       	call   c0026c24 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 60 97 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd68a0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 60 97 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd68a0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 60 96 02 c0       	mov    edx,0xc0029660
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 80 97 02 c0       	mov    edx,0xc0029780
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 28 c8 02 c0       	mov    edx,0xc002c828
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 8c 97 02 c0       	mov    edx,0xc002978c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 70 97 02 c0       	mov    edx,0xc0029770
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 20 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1ce0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 00 e3 02 c0    	mov    ax,ds:0xc002e300
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 00 e3 02 c0    	mov    ds:0xc002e300,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 17 3b 02 00       	call   c0026c24 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 6b 50 00 00       	call   c0008690 <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 fd 4f 00 00       	call   c00086a6 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 92 97 02 c0       	mov    eax,0xc0029792
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 7e 48 00 00       	call   c00086bd <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad e0 96 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6920]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 9b 97 02 c0       	mov    eax,0xc002979b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 54 48 00 00       	call   c00087b9 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 60 97 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd68a0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 30 47 00 00       	call   c00087b9 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 17 47 00 00       	call   c00087b9 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 44 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 31 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 e2 24 02 00       	call   c0026c24 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 70 97 02 c0       	mov    edx,0xc0029770
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 60 96 02 c0       	mov    edx,0xc0029660
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 70 96 02 c0       	mov    edx,0xc0029670
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 7c 3a 00 00       	call   c000874d <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 20 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ce0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 20 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ce0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 d9 36 00 00       	call   c0008690 <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 2a 33 00 00       	call   c00086a6 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 26 2d 00 00       	call   c0008690 <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 65 2c 00 00       	call   c00086a6 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 a9 0e 02 00       	call   c0026c24 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 8f 0e 02 00       	call   c0026c24 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 c1 26 00 00       	call   c0008690 <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 38 26 00 00       	call   c00086a6 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 a4 25 00 00       	call   c0008690 <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 66 25 00 00       	call   c00086a6 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 11 25 00 00       	call   c0008690 <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 d5 24 00 00       	call   c00086a6 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 b6 21 00 00       	call   c0008690 <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 93 20 00 00       	call   c00086a6 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 2e 20 00 00       	call   c0008690 <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 c5 1f 00 00       	call   c00086a6 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 f9 1d 00 00       	call   c0008690 <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 76 1b 00 00       	call   c00086a6 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 11 1b 00 00       	call   c0008690 <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 94 1a 00 00       	call   c00086a6 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 38 1a 00 00       	call   c0008690 <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 b5 19 00 00       	call   c00086a6 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 39 19 00 00       	call   c000874d <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 b7 96 02 c0       	mov    eax,0xc00296b7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 cd 17 00 00       	call   c00087b9 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 c4 16 00 00       	call   c00086bd <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 b0 96 02 c0       	mov    eax,0xc00296b0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_expand>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 3c             	sub    esp,0x3c
c0007160:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007164:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007168:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000716c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007174:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007178:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000717c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007180:	89 d8                	mov    eax,ebx
c0007182:	e8 a3 b1 ff ff       	call   c000232a <validate>
c0007187:	89 c5                	mov    ebp,eax
c0007189:	85 c0                	test   eax,eax
c000718b:	0f 85 f4 01 00 00    	jne    c0007385 <f_expand+0x22c>
c0007191:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007195:	85 ed                	test   ebp,ebp
c0007197:	0f 85 e8 01 00 00    	jne    c0007385 <f_expand+0x22c>
c000719d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071a5:	75 0a                	jne    c00071b1 <f_expand+0x58>
c00071a7:	bd 07 00 00 00       	mov    ebp,0x7
c00071ac:	e9 d4 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c00071b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00071b4:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00071b7:	75 ee                	jne    c00071a7 <f_expand+0x4e>
c00071b9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00071bd:	74 e8                	je     c00071a7 <f_expand+0x4e>
c00071bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00071c3:	8a 0e                	mov    cl,BYTE PTR [esi]
c00071c5:	80 f9 04             	cmp    cl,0x4
c00071c8:	74 07                	je     c00071d1 <f_expand+0x78>
c00071ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00071cf:	77 d6                	ja     c00071a7 <f_expand+0x4e>
c00071d1:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00071d5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00071d9:	c1 e0 09             	shl    eax,0x9
c00071dc:	8d 50 ff             	lea    edx,[eax-0x1]
c00071df:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c00071e3:	0f 95 c2             	setne  dl
c00071e6:	0f b6 d2             	movzx  edx,dl
c00071e9:	89 d7                	mov    edi,edx
c00071eb:	31 d2                	xor    edx,edx
c00071ed:	52                   	push   edx
c00071ee:	50                   	push   eax
c00071ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f7:	e8 28 fa 01 00       	call   c0026c24 <__udivdi3>
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	01 f8                	add    eax,edi
c0007201:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007205:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000720c:	83 ff 01             	cmp    edi,0x1
c000720f:	76 05                	jbe    c0007216 <f_expand+0xbd>
c0007211:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007214:	77 05                	ja     c000721b <f_expand+0xc2>
c0007216:	bf 02 00 00 00       	mov    edi,0x2
c000721b:	80 f9 04             	cmp    cl,0x4
c000721e:	75 19                	jne    c0007239 <f_expand+0xe0>
c0007220:	89 f0                	mov    eax,esi
c0007222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007226:	89 fa                	mov    edx,edi
c0007228:	e8 f3 b9 ff ff       	call   c0002c20 <find_bitmap>
c000722d:	89 c6                	mov    esi,eax
c000722f:	85 c0                	test   eax,eax
c0007231:	0f 84 70 ff ff ff    	je     c00071a7 <f_expand+0x4e>
c0007237:	eb 7f                	jmp    c00072b8 <f_expand+0x15f>
c0007239:	89 fe                	mov    esi,edi
c000723b:	89 f9                	mov    ecx,edi
c000723d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007245:	89 ca                	mov    edx,ecx
c0007247:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000724b:	89 d8                	mov    eax,ebx
c000724d:	e8 3b bd ff ff       	call   c0002f8d <get_fat>
c0007252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000725a:	41                   	inc    ecx
c000725b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000725f:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007262:	77 05                	ja     c0007269 <f_expand+0x110>
c0007264:	b9 02 00 00 00       	mov    ecx,0x2
c0007269:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000726e:	74 3e                	je     c00072ae <f_expand+0x155>
c0007270:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0007275:	75 0a                	jne    c0007281 <f_expand+0x128>
c0007277:	bd 01 00 00 00       	mov    ebp,0x1
c000727c:	e9 04 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c0007281:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007286:	75 13                	jne    c000729b <f_expand+0x142>
c0007288:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000728c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007290:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0007294:	75 0f                	jne    c00072a5 <f_expand+0x14c>
c0007296:	e9 ce 00 00 00       	jmp    c0007369 <f_expand+0x210>
c000729b:	89 ce                	mov    esi,ecx
c000729d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a5:	39 f9                	cmp    ecx,edi
c00072a7:	75 9c                	jne    c0007245 <f_expand+0xec>
c00072a9:	e9 f9 fe ff ff       	jmp    c00071a7 <f_expand+0x4e>
c00072ae:	bd 02 00 00 00       	mov    ebp,0x2
c00072b3:	e9 cd 00 00 00       	jmp    c0007385 <f_expand+0x22c>
c00072b8:	83 f8 ff             	cmp    eax,0xffffffff
c00072bb:	74 ba                	je     c0007277 <f_expand+0x11e>
c00072bd:	8d 7e ff             	lea    edi,[esi-0x1]
c00072c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00072c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00072c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072cd:	74 51                	je     c0007320 <f_expand+0x1c7>
c00072cf:	83 ec 0c             	sub    esp,0xc
c00072d2:	89 f2                	mov    edx,esi
c00072d4:	6a 01                	push   0x1
c00072d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00072da:	e8 f4 b9 ff ff       	call   c0002cd3 <change_bitmap>
c00072df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00072e3:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c00072e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00072eb:	83 c4 10             	add    esp,0x10
c00072ee:	85 c0                	test   eax,eax
c00072f0:	74 2e                	je     c0007320 <f_expand+0x1c7>
c00072f2:	eb 71                	jmp    c0007365 <f_expand+0x20c>
c00072f4:	83 c9 ff             	or     ecx,0xffffffff
c00072f7:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00072fc:	74 03                	je     c0007301 <f_expand+0x1a8>
c00072fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007301:	89 fa                	mov    edx,edi
c0007303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007307:	e8 7c ba ff ff       	call   c0002d88 <put_fat>
c000730c:	85 c0                	test   eax,eax
c000730e:	75 55                	jne    c0007365 <f_expand+0x20c>
c0007310:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007314:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007318:	47                   	inc    edi
c0007319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000731e:	75 d4                	jne    c00072f4 <f_expand+0x19b>
c0007320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007328:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000732d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007330:	74 53                	je     c0007385 <f_expand+0x22c>
c0007332:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007335:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007339:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c000733d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007341:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007345:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007348:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000734b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000734e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007351:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007354:	39 ca                	cmp    edx,ecx
c0007356:	77 2d                	ja     c0007385 <f_expand+0x22c>
c0007358:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c000735c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007360:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007363:	eb 20                	jmp    c0007385 <f_expand+0x22c>
c0007365:	89 c5                	mov    ebp,eax
c0007367:	eb 1c                	jmp    c0007385 <f_expand+0x22c>
c0007369:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000736e:	74 0c                	je     c000737c <f_expand+0x223>
c0007370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007374:	89 f7                	mov    edi,esi
c0007376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737a:	eb 9d                	jmp    c0007319 <f_expand+0x1c0>
c000737c:	8d 46 ff             	lea    eax,[esi-0x1]
c000737f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007383:	eb 9b                	jmp    c0007320 <f_expand+0x1c7>
c0007385:	83 c4 3c             	add    esp,0x3c
c0007388:	89 e8                	mov    eax,ebp
c000738a:	5b                   	pop    ebx
c000738b:	5e                   	pop    esi
c000738c:	5f                   	pop    edi
c000738d:	5d                   	pop    ebp
c000738e:	c3                   	ret    

c000738f <f_forward>:
c000738f:	55                   	push   ebp
c0007390:	57                   	push   edi
c0007391:	56                   	push   esi
c0007392:	53                   	push   ebx
c0007393:	83 ec 2c             	sub    esp,0x2c
c0007396:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000739a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000739e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00073a8:	89 d8                	mov    eax,ebx
c00073aa:	e8 7b af ff ff       	call   c000232a <validate>
c00073af:	89 c5                	mov    ebp,eax
c00073b1:	85 c0                	test   eax,eax
c00073b3:	0f 85 aa 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073b9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00073bd:	85 ed                	test   ebp,ebp
c00073bf:	0f 85 9e 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073c5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00073c9:	0f 84 8f 01 00 00    	je     c000755e <f_forward+0x1cf>
c00073cf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00073d2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00073d5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00073d8:	bf 00 00 00 00       	mov    edi,0x0
c00073dd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00073e0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00073e4:	89 d1                	mov    ecx,edx
c00073e6:	19 f9                	sbb    ecx,edi
c00073e8:	0f 83 cf 00 00 00    	jae    c00074bd <f_forward+0x12e>
c00073ee:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073f2:	e9 c6 00 00 00       	jmp    c00074bd <f_forward+0x12e>
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 00                	push   0x0
c00073fb:	6a 00                	push   0x0
c00073fd:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	0f 84 57 01 00 00    	je     c0007563 <f_forward+0x1d4>
c000740c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000740f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007416:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000741a:	89 d7                	mov    edi,edx
c000741c:	8d 4e ff             	lea    ecx,[esi-0x1]
c000741f:	89 c6                	mov    esi,eax
c0007421:	0f ac fe 09          	shrd   esi,edi,0x9
c0007425:	21 ce                	and    esi,ecx
c0007427:	89 c1                	mov    ecx,eax
c0007429:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000742f:	0f 84 98 00 00 00    	je     c00074cd <f_forward+0x13e>
c0007435:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007439:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000743c:	89 c8                	mov    eax,ecx
c000743e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007442:	e8 79 aa ff ff       	call   c0001ec0 <clst2sect>
c0007447:	89 d7                	mov    edi,edx
c0007449:	09 c7                	or     edi,eax
c000744b:	0f 84 9e 00 00 00    	je     c00074ef <f_forward+0x160>
c0007451:	31 ff                	xor    edi,edi
c0007453:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007456:	01 c6                	add    esi,eax
c0007458:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000745c:	11 d7                	adc    edi,edx
c000745e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007461:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007468:	39 fa                	cmp    edx,edi
c000746a:	0f 85 a2 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007470:	39 f0                	cmp    eax,esi
c0007472:	0f 85 9a 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007478:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000747b:	ba 00 02 00 00       	mov    edx,0x200
c0007480:	25 ff 01 00 00       	and    eax,0x1ff
c0007485:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007489:	29 c2                	sub    edx,eax
c000748b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000748e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007491:	39 d1                	cmp    ecx,edx
c0007493:	76 02                	jbe    c0007497 <f_forward+0x108>
c0007495:	89 d1                	mov    ecx,edx
c0007497:	8d 73 50             	lea    esi,[ebx+0x50]
c000749a:	52                   	push   edx
c000749b:	01 c6                	add    esi,eax
c000749d:	52                   	push   edx
c000749e:	51                   	push   ecx
c000749f:	56                   	push   esi
c00074a0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00074a4:	83 c4 10             	add    esp,0x10
c00074a7:	85 c0                	test   eax,eax
c00074a9:	74 44                	je     c00074ef <f_forward+0x160>
c00074ab:	31 ff                	xor    edi,edi
c00074ad:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00074b0:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00074b3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00074b7:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00074bb:	01 07                	add    DWORD PTR [edi],eax
c00074bd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00074c2:	0f 85 2f ff ff ff    	jne    c00073f7 <f_forward+0x68>
c00074c8:	e9 96 00 00 00       	jmp    c0007563 <f_forward+0x1d4>
c00074cd:	85 f6                	test   esi,esi
c00074cf:	0f 85 60 ff ff ff    	jne    c0007435 <f_forward+0xa6>
c00074d5:	89 d7                	mov    edi,edx
c00074d7:	09 c7                	or     edi,eax
c00074d9:	75 05                	jne    c00074e0 <f_forward+0x151>
c00074db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00074de:	eb 0a                	jmp    c00074ea <f_forward+0x15b>
c00074e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00074e3:	89 d8                	mov    eax,ebx
c00074e5:	e8 a3 ba ff ff       	call   c0002f8d <get_fat>
c00074ea:	83 f8 01             	cmp    eax,0x1
c00074ed:	77 0b                	ja     c00074fa <f_forward+0x16b>
c00074ef:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00074f3:	bd 02 00 00 00       	mov    ebp,0x2
c00074f8:	eb 69                	jmp    c0007563 <f_forward+0x1d4>
c00074fa:	83 f8 ff             	cmp    eax,0xffffffff
c00074fd:	75 0b                	jne    c000750a <f_forward+0x17b>
c00074ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007503:	bd 01 00 00 00       	mov    ebp,0x1
c0007508:	eb 59                	jmp    c0007563 <f_forward+0x1d4>
c000750a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000750d:	e9 23 ff ff ff       	jmp    c0007435 <f_forward+0xa6>
c0007512:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007516:	79 20                	jns    c0007538 <f_forward+0x1a9>
c0007518:	83 ec 0c             	sub    esp,0xc
c000751b:	6a 01                	push   0x1
c000751d:	52                   	push   edx
c000751e:	50                   	push   eax
c000751f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007523:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007527:	50                   	push   eax
c0007528:	e8 c5 a6 ff ff       	call   c0001bf2 <disk_write>
c000752d:	83 c4 20             	add    esp,0x20
c0007530:	85 c0                	test   eax,eax
c0007532:	75 cb                	jne    c00074ff <f_forward+0x170>
c0007534:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007538:	83 ec 0c             	sub    esp,0xc
c000753b:	6a 01                	push   0x1
c000753d:	57                   	push   edi
c000753e:	56                   	push   esi
c000753f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007543:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007547:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000754b:	50                   	push   eax
c000754c:	e8 8b a6 ff ff       	call   c0001bdc <disk_read>
c0007551:	83 c4 20             	add    esp,0x20
c0007554:	85 c0                	test   eax,eax
c0007556:	0f 84 1c ff ff ff    	je     c0007478 <f_forward+0xe9>
c000755c:	eb a1                	jmp    c00074ff <f_forward+0x170>
c000755e:	bd 07 00 00 00       	mov    ebp,0x7
c0007563:	83 c4 2c             	add    esp,0x2c
c0007566:	89 e8                	mov    eax,ebp
c0007568:	5b                   	pop    ebx
c0007569:	5e                   	pop    esi
c000756a:	5f                   	pop    edi
c000756b:	5d                   	pop    ebp
c000756c:	c3                   	ret    

c000756d <f_mkfs>:
c000756d:	55                   	push   ebp
c000756e:	57                   	push   edi
c000756f:	56                   	push   esi
c0007570:	53                   	push   ebx
c0007571:	bb 0b 00 00 00       	mov    ebx,0xb
c0007576:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000757c:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007583:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000758a:	e8 7a ac ff ff       	call   c0002209 <get_ldnumber>
c000758f:	85 c0                	test   eax,eax
c0007591:	0f 88 ec 10 00 00    	js     c0008683 <f_mkfs+0x1116>
c0007597:	8b 14 85 20 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ce0]
c000759e:	85 d2                	test   edx,edx
c00075a0:	74 03                	je     c00075a5 <f_mkfs+0x38>
c00075a2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00075a5:	85 f6                	test   esi,esi
c00075a7:	75 05                	jne    c00075ae <f_mkfs+0x41>
c00075a9:	be a0 96 02 c0       	mov    esi,0xc00296a0
c00075ae:	83 ec 0c             	sub    esp,0xc
c00075b1:	0f b6 c0             	movzx  eax,al
c00075b4:	bb 03 00 00 00       	mov    ebx,0x3
c00075b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075c1:	e8 13 a6 ff ff       	call   c0001bd9 <disk_initialize>
c00075c6:	83 c4 10             	add    esp,0x10
c00075c9:	a8 01                	test   al,0x1
c00075cb:	0f 85 b2 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075d1:	bb 0a 00 00 00       	mov    ebx,0xa
c00075d6:	a8 04                	test   al,0x4
c00075d8:	0f 85 a5 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00075e1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00075e5:	85 c0                	test   eax,eax
c00075e7:	75 20                	jne    c0007609 <f_mkfs+0x9c>
c00075e9:	51                   	push   ecx
c00075ea:	8d 44 24 78          	lea    eax,[esp+0x78]
c00075ee:	50                   	push   eax
c00075ef:	6a 03                	push   0x3
c00075f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f5:	e8 0e a6 ff ff       	call   c0001c08 <disk_ioctl>
c00075fa:	83 c4 10             	add    esp,0x10
c00075fd:	85 c0                	test   eax,eax
c00075ff:	74 08                	je     c0007609 <f_mkfs+0x9c>
c0007601:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007609:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000760d:	8d 42 ff             	lea    eax,[edx-0x1]
c0007610:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007615:	77 04                	ja     c000761b <f_mkfs+0xae>
c0007617:	85 c2                	test   edx,eax
c0007619:	74 08                	je     c0007623 <f_mkfs+0xb6>
c000761b:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007623:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007626:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000762a:	48                   	dec    eax
c000762b:	3c 01                	cmp    al,0x1
c000762d:	76 05                	jbe    c0007634 <f_mkfs+0xc7>
c000762f:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007634:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000763b:	48                   	dec    eax
c000763c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007641:	77 07                	ja     c000764a <f_mkfs+0xdd>
c0007643:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007648:	74 08                	je     c0007652 <f_mkfs+0xe5>
c000764a:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007652:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007655:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000765b:	77 07                	ja     c0007664 <f_mkfs+0xf7>
c000765d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007660:	85 d8                	test   eax,ebx
c0007662:	74 02                	je     c0007666 <f_mkfs+0xf9>
c0007664:	31 db                	xor    ebx,ebx
c0007666:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007671:	77 0a                	ja     c000767d <f_mkfs+0x110>
c0007673:	bb 11 00 00 00       	mov    ebx,0x11
c0007678:	e9 06 10 00 00       	jmp    c0008683 <f_mkfs+0x1116>
c000767d:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007684:	8b 36                	mov    esi,DWORD PTR [esi]
c0007686:	85 ed                	test   ebp,ebp
c0007688:	75 1e                	jne    c00076a8 <f_mkfs+0x13b>
c000768a:	83 ec 0c             	sub    esp,0xc
c000768d:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	50                   	push   eax
c000769a:	e8 f1 0f 00 00       	call   c0008690 <ff_memalloc>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	89 c5                	mov    ebp,eax
c00076a4:	85 c0                	test   eax,eax
c00076a6:	74 cb                	je     c0007673 <f_mkfs+0x106>
c00076a8:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00076b0:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00076b8:	52                   	push   edx
c00076b9:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00076bd:	50                   	push   eax
c00076be:	6a 01                	push   0x1
c00076c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00076c4:	e8 3f a5 ff ff       	call   c0001c08 <disk_ioctl>
c00076c9:	83 c4 10             	add    esp,0x10
c00076cc:	85 c0                	test   eax,eax
c00076ce:	0f 85 4a 0f 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00076d4:	89 f1                	mov    ecx,esi
c00076d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00076de:	83 e1 0f             	and    ecx,0xf
c00076e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00076e9:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00076ed:	83 e6 08             	and    esi,0x8
c00076f0:	75 56                	jne    c0007748 <f_mkfs+0x1db>
c00076f2:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00076f6:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00076fa:	83 ff 00             	cmp    edi,0x0
c00076fd:	76 20                	jbe    c000771f <f_mkfs+0x1b2>
c00076ff:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007704:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000770c:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007712:	83 d7 ff             	adc    edi,0xffffffff
c0007715:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007719:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000771d:	eb 21                	jmp    c0007740 <f_mkfs+0x1d3>
c000771f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007724:	39 f2                	cmp    edx,esi
c0007726:	19 f8                	sbb    eax,edi
c0007728:	73 1e                	jae    c0007748 <f_mkfs+0x1db>
c000772a:	83 c6 c1             	add    esi,0xffffffc1
c000772d:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007735:	83 d7 ff             	adc    edi,0xffffffff
c0007738:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000773c:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007740:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007748:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000774c:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007750:	89 04 24             	mov    DWORD PTR [esp],eax
c0007753:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007757:	31 c0                	xor    eax,eax
c0007759:	ba 7f 00 00 00       	mov    edx,0x7f
c000775e:	89 c7                	mov    edi,eax
c0007760:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007763:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007767:	0f 83 c5 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c000776d:	89 df                	mov    edi,ebx
c000776f:	c1 ef 09             	shr    edi,0x9
c0007772:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007776:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000777d:	c1 ef 09             	shr    edi,0x9
c0007780:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007785:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007789:	74 29                	je     c00077b4 <f_mkfs+0x247>
c000778b:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007791:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007796:	0f 97 c2             	seta   dl
c0007799:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000779c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00077a0:	0f 92 c0             	setb   al
c00077a3:	08 c2                	or     dl,al
c00077a5:	75 5b                	jne    c0007802 <f_mkfs+0x295>
c00077a7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077ab:	83 e0 07             	and    eax,0x7
c00077ae:	3c 04                	cmp    al,0x4
c00077b0:	74 50                	je     c0007802 <f_mkfs+0x295>
c00077b2:	eb 1b                	jmp    c00077cf <f_mkfs+0x262>
c00077b4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00077b9:	0f 87 73 0a 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c00077bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00077c5:	76 08                	jbe    c00077cf <f_mkfs+0x262>
c00077c7:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00077cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077d3:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00077d7:	83 e0 01             	and    eax,0x1
c00077da:	80 e1 02             	and    cl,0x2
c00077dd:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00077e1:	74 0d                	je     c00077f0 <f_mkfs+0x283>
c00077e3:	84 c0                	test   al,al
c00077e5:	0f 84 53 09 00 00    	je     c000813e <f_mkfs+0xbd1>
c00077eb:	e9 12 08 00 00       	jmp    c0008002 <f_mkfs+0xa95>
c00077f0:	bb 13 00 00 00       	mov    ebx,0x13
c00077f5:	84 c0                	test   al,al
c00077f7:	0f 85 05 08 00 00    	jne    c0008002 <f_mkfs+0xa95>
c00077fd:	e9 39 0e 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c0007802:	31 c0                	xor    eax,eax
c0007804:	ba ff 0f 00 00       	mov    edx,0xfff
c0007809:	89 c7                	mov    edi,eax
c000780b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000780e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007812:	0f 83 1a 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c0007818:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000781e:	77 39                	ja     c0007859 <f_mkfs+0x2ec>
c0007820:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007825:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000782d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007830:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007834:	73 08                	jae    c000783e <f_mkfs+0x2d1>
c0007836:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000783e:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007843:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007846:	b8 00 00 00 00       	mov    eax,0x0
c000784b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000784f:	73 08                	jae    c0007859 <f_mkfs+0x2ec>
c0007851:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000785d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007861:	83 c0 20             	add    eax,0x20
c0007864:	83 d2 00             	adc    edx,0x0
c0007867:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000786b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000786f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007873:	31 d2                	xor    edx,edx
c0007875:	31 ff                	xor    edi,edi
c0007877:	52                   	push   edx
c0007878:	89 fb                	mov    ebx,edi
c000787a:	50                   	push   eax
c000787b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000787f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007883:	e8 9c f3 01 00       	call   c0026c24 <__udivdi3>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	c1 e0 02             	shl    eax,0x2
c000788e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007892:	05 07 02 00 00       	add    eax,0x207
c0007897:	89 f1                	mov    ecx,esi
c0007899:	c1 e8 09             	shr    eax,0x9
c000789c:	83 c1 ff             	add    ecx,0xffffffff
c000789f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00078a3:	83 d3 ff             	adc    ebx,0xffffffff
c00078a6:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00078aa:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00078ae:	31 d2                	xor    edx,edx
c00078b0:	01 c8                	add    eax,ecx
c00078b2:	11 da                	adc    edx,ebx
c00078b4:	89 c1                	mov    ecx,eax
c00078b6:	f7 de                	neg    esi
c00078b8:	89 d0                	mov    eax,edx
c00078ba:	83 d7 00             	adc    edi,0x0
c00078bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00078c1:	f7 df                	neg    edi
c00078c3:	21 f1                	and    ecx,esi
c00078c5:	21 f8                	and    eax,edi
c00078c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00078cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00078cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00078d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078d7:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00078db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078de:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00078e2:	0f ac d0 01          	shrd   eax,edx,0x1
c00078e6:	89 df                	mov    edi,ebx
c00078e8:	d1 ea                	shr    edx,1
c00078ea:	39 c1                	cmp    ecx,eax
c00078ec:	19 d7                	sbb    edi,edx
c00078ee:	0f 83 3e 09 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c00078f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00078f8:	31 d2                	xor    edx,edx
c00078fa:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00078fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007902:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007906:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007909:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000790d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007911:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007919:	83 f8 0f             	cmp    eax,0xf
c000791c:	0f 86 10 09 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0007922:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000792a:	0f 87 02 09 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c0007930:	31 d2                	xor    edx,edx
c0007932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007936:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000793e:	83 c0 07             	add    eax,0x7
c0007941:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007949:	c1 e8 03             	shr    eax,0x3
c000794c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007953:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	c1 e0 09             	shl    eax,0x9
c000795e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007962:	48                   	dec    eax
c0007963:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007967:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000796b:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000796f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007973:	31 d2                	xor    edx,edx
c0007975:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007979:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007984:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007989:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000798d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007991:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007995:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007999:	31 ff                	xor    edi,edi
c000799b:	31 f6                	xor    esi,esi
c000799d:	31 db                	xor    ebx,ebx
c000799f:	85 ff                	test   edi,edi
c00079a1:	74 05                	je     c00079a8 <f_mkfs+0x43b>
c00079a3:	4f                   	dec    edi
c00079a4:	74 44                	je     c00079ea <f_mkfs+0x47d>
c00079a6:	eb 4f                	jmp    c00079f7 <f_mkfs+0x48a>
c00079a8:	83 ec 0c             	sub    esp,0xc
c00079ab:	0f b7 c3             	movzx  eax,bx
c00079ae:	50                   	push   eax
c00079af:	e8 05 0e 00 00       	call   c00087b9 <ff_wtoupper>
c00079b4:	83 c4 10             	add    esp,0x10
c00079b7:	89 c1                	mov    ecx,eax
c00079b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00079bc:	66 39 c3             	cmp    bx,ax
c00079bf:	75 3e                	jne    c00079ff <f_mkfs+0x492>
c00079c1:	be 01 00 00 00       	mov    esi,0x1
c00079c6:	89 df                	mov    edi,ebx
c00079c8:	66 01 f7             	add    di,si
c00079cb:	75 07                	jne    c00079d4 <f_mkfs+0x467>
c00079cd:	83 fe 7f             	cmp    esi,0x7f
c00079d0:	77 31                	ja     c0007a03 <f_mkfs+0x496>
c00079d2:	eb 16                	jmp    c00079ea <f_mkfs+0x47d>
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	0f b7 ff             	movzx  edi,di
c00079da:	57                   	push   edi
c00079db:	e8 d9 0d 00 00       	call   c00087b9 <ff_wtoupper>
c00079e0:	83 c4 10             	add    esp,0x10
c00079e3:	39 c7                	cmp    edi,eax
c00079e5:	75 e6                	jne    c00079cd <f_mkfs+0x460>
c00079e7:	46                   	inc    esi
c00079e8:	eb dc                	jmp    c00079c6 <f_mkfs+0x459>
c00079ea:	31 c0                	xor    eax,eax
c00079ec:	89 d9                	mov    ecx,ebx
c00079ee:	4e                   	dec    esi
c00079ef:	0f 95 c0             	setne  al
c00079f2:	43                   	inc    ebx
c00079f3:	89 c7                	mov    edi,eax
c00079f5:	eb 14                	jmp    c0007a0b <f_mkfs+0x49e>
c00079f7:	89 f1                	mov    ecx,esi
c00079f9:	01 f3                	add    ebx,esi
c00079fb:	31 ff                	xor    edi,edi
c00079fd:	eb 0c                	jmp    c0007a0b <f_mkfs+0x49e>
c00079ff:	89 d3                	mov    ebx,edx
c0007a01:	eb 08                	jmp    c0007a0b <f_mkfs+0x49e>
c0007a03:	bf 02 00 00 00       	mov    edi,0x2
c0007a08:	83 c9 ff             	or     ecx,0xffffffff
c0007a0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a12:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007a16:	0f b6 c1             	movzx  eax,cl
c0007a19:	e8 04 a7 ff ff       	call   c0002122 <xsum32>
c0007a1e:	66 c1 e9 08          	shr    cx,0x8
c0007a22:	89 c2                	mov    edx,eax
c0007a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a27:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007a2b:	0f b7 c1             	movzx  eax,cx
c0007a2e:	e8 ef a6 ff ff       	call   c0002122 <xsum32>
c0007a33:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007a38:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007a3c:	66 85 db             	test   bx,bx
c0007a3f:	74 1f                	je     c0007a60 <f_mkfs+0x4f3>
c0007a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a44:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007a4b:	83 c0 02             	add    eax,0x2
c0007a4e:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007a54:	39 c2                	cmp    edx,eax
c0007a56:	74 08                	je     c0007a60 <f_mkfs+0x4f3>
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	e9 3f ff ff ff       	jmp    c000799f <f_mkfs+0x432>
c0007a60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a63:	83 ec 0c             	sub    esp,0xc
c0007a66:	05 01 02 00 00       	add    eax,0x201
c0007a6b:	c1 e8 09             	shr    eax,0x9
c0007a6e:	50                   	push   eax
c0007a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007a73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 6d a1 ff ff       	call   c0001bf2 <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007a8d:	0f 85 8b 0b 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007a93:	89 d0                	mov    eax,edx
c0007a95:	31 d2                	xor    edx,edx
c0007a97:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007a9b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007a9f:	66 85 db             	test   bx,bx
c0007aa2:	74 04                	je     c0007aa8 <f_mkfs+0x53b>
c0007aa4:	31 c0                	xor    eax,eax
c0007aa6:	eb b0                	jmp    c0007a58 <f_mkfs+0x4eb>
c0007aa8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007aac:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007ab0:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007ab4:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007aba:	31 d2                	xor    edx,edx
c0007abc:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007ac7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007acb:	c1 eb 09             	shr    ebx,0x9
c0007ace:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ad9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007add:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007ae5:	8d 70 01             	lea    esi,[eax+0x1]
c0007ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007af0:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b01:	89 c1                	mov    ecx,eax
c0007b03:	89 e8                	mov    eax,ebp
c0007b05:	e8 b1 a1 ff ff       	call   c0001cbb <mem_set>
c0007b0a:	31 c0                	xor    eax,eax
c0007b0c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b0f:	76 10                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b11:	83 fe 07             	cmp    esi,0x7
c0007b14:	76 0b                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b16:	40                   	inc    eax
c0007b17:	83 ee 08             	sub    esi,0x8
c0007b1a:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007b1f:	eb eb                	jmp    c0007b0c <f_mkfs+0x59f>
c0007b21:	b2 01                	mov    dl,0x1
c0007b23:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007b27:	85 f6                	test   esi,esi
c0007b29:	74 0c                	je     c0007b37 <f_mkfs+0x5ca>
c0007b2b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b2e:	76 07                	jbe    c0007b37 <f_mkfs+0x5ca>
c0007b30:	08 11                	or     BYTE PTR [ecx],dl
c0007b32:	4e                   	dec    esi
c0007b33:	d1 e2                	shl    edx,1
c0007b35:	eb f0                	jmp    c0007b27 <f_mkfs+0x5ba>
c0007b37:	89 df                	mov    edi,ebx
c0007b39:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007b3d:	76 04                	jbe    c0007b43 <f_mkfs+0x5d6>
c0007b3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	57                   	push   edi
c0007b47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4f:	55                   	push   ebp
c0007b50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b54:	e8 99 a0 ff ff       	call   c0001bf2 <disk_write>
c0007b59:	83 c4 20             	add    esp,0x20
c0007b5c:	85 c0                	test   eax,eax
c0007b5e:	0f 85 ba 0a 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007b6a:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007b6e:	29 fb                	sub    ebx,edi
c0007b70:	0f 85 7a ff ff ff    	jne    c0007af0 <f_mkfs+0x583>
c0007b76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007b82:	31 f6                	xor    esi,esi
c0007b84:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b88:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b8b:	31 d2                	xor    edx,edx
c0007b8d:	89 e8                	mov    eax,ebp
c0007b8f:	e8 27 a1 ff ff       	call   c0001cbb <mem_set>
c0007b94:	31 c9                	xor    ecx,ecx
c0007b96:	85 db                	test   ebx,ebx
c0007b98:	75 40                	jne    c0007bda <f_mkfs+0x66d>
c0007b9a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007b9f:	89 e8                	mov    eax,ebp
c0007ba1:	bb 02 00 00 00       	mov    ebx,0x2
c0007ba6:	e8 f2 a0 ff ff       	call   c0001c9d <st_dword>
c0007bab:	8d 45 04             	lea    eax,[ebp+0x4]
c0007bae:	83 ca ff             	or     edx,0xffffffff
c0007bb1:	e8 e7 a0 ff ff       	call   c0001c9d <st_dword>
c0007bb6:	b9 08 00 00 00       	mov    ecx,0x8
c0007bbb:	eb 1d                	jmp    c0007bda <f_mkfs+0x66d>
c0007bbd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bc0:	76 3b                	jbe    c0007bfd <f_mkfs+0x690>
c0007bc2:	43                   	inc    ebx
c0007bc3:	83 fe 01             	cmp    esi,0x1
c0007bc6:	89 da                	mov    edx,ebx
c0007bc8:	77 03                	ja     c0007bcd <f_mkfs+0x660>
c0007bca:	83 ca ff             	or     edx,0xffffffff
c0007bcd:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007bd1:	4e                   	dec    esi
c0007bd2:	e8 c6 a0 ff ff       	call   c0001c9d <st_dword>
c0007bd7:	83 c1 04             	add    ecx,0x4
c0007bda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bde:	85 f6                	test   esi,esi
c0007be0:	75 db                	jne    c0007bbd <f_mkfs+0x650>
c0007be2:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007be7:	77 14                	ja     c0007bfd <f_mkfs+0x690>
c0007be9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007bed:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007bf4:	85 f6                	test   esi,esi
c0007bf6:	74 05                	je     c0007bfd <f_mkfs+0x690>
c0007bf8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bfb:	77 dd                	ja     c0007bda <f_mkfs+0x66d>
c0007bfd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c01:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c05:	39 cf                	cmp    edi,ecx
c0007c07:	76 02                	jbe    c0007c0b <f_mkfs+0x69e>
c0007c09:	89 cf                	mov    edi,ecx
c0007c0b:	83 ec 0c             	sub    esp,0xc
c0007c0e:	57                   	push   edi
c0007c0f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c17:	55                   	push   ebp
c0007c18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c1c:	e8 d1 9f ff ff       	call   c0001bf2 <disk_write>
c0007c21:	83 c4 20             	add    esp,0x20
c0007c24:	85 c0                	test   eax,eax
c0007c26:	0f 85 f2 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007c32:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007c36:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007c3a:	0f 85 48 ff ff ff    	jne    c0007b88 <f_mkfs+0x61b>
c0007c40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c43:	31 d2                	xor    edx,edx
c0007c45:	89 e8                	mov    eax,ebp
c0007c47:	31 ff                	xor    edi,edi
c0007c49:	e8 6d a0 ff ff       	call   c0001cbb <mem_set>
c0007c4e:	8d 45 34             	lea    eax,[ebp+0x34]
c0007c51:	ba 02 00 00 00       	mov    edx,0x2
c0007c56:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007c5a:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007c5e:	e8 3a a0 ff ff       	call   c0001c9d <st_dword>
c0007c63:	8d 45 38             	lea    eax,[ebp+0x38]
c0007c66:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007c6a:	e8 2e a0 ff ff       	call   c0001c9d <st_dword>
c0007c6f:	8d 45 44             	lea    eax,[ebp+0x44]
c0007c72:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007c76:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007c7a:	e8 1e a0 ff ff       	call   c0001c9d <st_dword>
c0007c7f:	8d 45 54             	lea    eax,[ebp+0x54]
c0007c82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007c86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c8a:	83 c2 02             	add    edx,0x2
c0007c8d:	e8 0b a0 ff ff       	call   c0001c9d <st_dword>
c0007c92:	8d 45 58             	lea    eax,[ebp+0x58]
c0007c95:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007c99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c9d:	e8 fb 9f ff ff       	call   c0001c9d <st_dword>
c0007ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007cab:	89 c6                	mov    esi,eax
c0007cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cb8:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007cbc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007cbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007cc3:	39 cb                	cmp    ebx,ecx
c0007cc5:	76 02                	jbe    c0007cc9 <f_mkfs+0x75c>
c0007cc7:	89 cb                	mov    ebx,ecx
c0007cc9:	83 ec 0c             	sub    esp,0xc
c0007ccc:	53                   	push   ebx
c0007ccd:	57                   	push   edi
c0007cce:	56                   	push   esi
c0007ccf:	55                   	push   ebp
c0007cd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cd4:	e8 19 9f ff ff       	call   c0001bf2 <disk_write>
c0007cd9:	83 c4 20             	add    esp,0x20
c0007cdc:	85 c0                	test   eax,eax
c0007cde:	0f 85 3a 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ce4:	31 d2                	xor    edx,edx
c0007ce6:	b9 00 02 00 00       	mov    ecx,0x200
c0007ceb:	89 e8                	mov    eax,ebp
c0007ced:	e8 c9 9f ff ff       	call   c0001cbb <mem_set>
c0007cf2:	31 d2                	xor    edx,edx
c0007cf4:	01 de                	add    esi,ebx
c0007cf6:	11 d7                	adc    edi,edx
c0007cf8:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007cfb:	75 bf                	jne    c0007cbc <f_mkfs+0x74f>
c0007cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007d01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007d05:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007d0d:	b9 00 02 00 00       	mov    ecx,0x200
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	89 e8                	mov    eax,ebp
c0007d16:	e8 a0 9f ff ff       	call   c0001cbb <mem_set>
c0007d1b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d20:	ba 80 97 02 c0       	mov    edx,0xc0029780
c0007d25:	89 e8                	mov    eax,ebp
c0007d27:	e8 7a 9f ff ff       	call   c0001ca6 <mem_cpy>
c0007d2c:	8d 45 40             	lea    eax,[ebp+0x40]
c0007d2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007d37:	e8 64 9f ff ff       	call   c0001ca0 <st_qword>
c0007d3c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007d40:	8d 45 48             	lea    eax,[ebp+0x48]
c0007d43:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d47:	e8 54 9f ff ff       	call   c0001ca0 <st_qword>
c0007d4c:	8d 45 50             	lea    eax,[ebp+0x50]
c0007d4f:	ba 20 00 00 00       	mov    edx,0x20
c0007d54:	e8 44 9f ff ff       	call   c0001c9d <st_dword>
c0007d59:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007d5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d61:	e8 37 9f ff ff       	call   c0001c9d <st_dword>
c0007d66:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007d6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007d6e:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007d72:	e8 26 9f ff ff       	call   c0001c9d <st_dword>
c0007d77:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007d7a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d7e:	e8 1a 9f ff ff       	call   c0001c9d <st_dword>
c0007d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007d87:	8d 50 02             	lea    edx,[eax+0x2]
c0007d8a:	8d 45 60             	lea    eax,[ebp+0x60]
c0007d8d:	e8 0b 9f ff ff       	call   c0001c9d <st_dword>
c0007d92:	8d 45 64             	lea    eax,[ebp+0x64]
c0007d95:	ba 00 00 21 50       	mov    edx,0x50210000
c0007d9a:	e8 fe 9e ff ff       	call   c0001c9d <st_dword>
c0007d9f:	8d 45 68             	lea    eax,[ebp+0x68]
c0007da2:	ba 00 01 00 00       	mov    edx,0x100
c0007da7:	e8 ed 9e ff ff       	call   c0001c99 <st_word>
c0007dac:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007db0:	b8 0a 00 00 00       	mov    eax,0xa
c0007db5:	48                   	dec    eax
c0007db6:	74 05                	je     c0007dbd <f_mkfs+0x850>
c0007db8:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007dbb:	eb f8                	jmp    c0007db5 <f_mkfs+0x848>
c0007dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc1:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007dc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dc9:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007dcd:	74 05                	je     c0007dd4 <f_mkfs+0x867>
c0007dcf:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007dd2:	eb f5                	jmp    c0007dc9 <f_mkfs+0x85c>
c0007dd4:	8d 45 78             	lea    eax,[ebp+0x78]
c0007dd7:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ddc:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	e8 b0 9e ff ff       	call   c0001c99 <st_word>
c0007de9:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007def:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 9d 9e ff ff       	call   c0001c99 <st_word>
c0007dfc:	31 c9                	xor    ecx,ecx
c0007dfe:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007e01:	83 f8 01             	cmp    eax,0x1
c0007e04:	76 13                	jbe    c0007e19 <f_mkfs+0x8ac>
c0007e06:	83 f9 70             	cmp    ecx,0x70
c0007e09:	74 0e                	je     c0007e19 <f_mkfs+0x8ac>
c0007e0b:	89 da                	mov    edx,ebx
c0007e0d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007e12:	e8 0b a3 ff ff       	call   c0002122 <xsum32>
c0007e17:	89 c3                	mov    ebx,eax
c0007e19:	41                   	inc    ecx
c0007e1a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e20:	75 dc                	jne    c0007dfe <f_mkfs+0x891>
c0007e22:	89 f0                	mov    eax,esi
c0007e24:	89 fa                	mov    edx,edi
c0007e26:	83 c0 01             	add    eax,0x1
c0007e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e2d:	83 d2 00             	adc    edx,0x0
c0007e30:	83 ec 0c             	sub    esp,0xc
c0007e33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007e37:	6a 01                	push   0x1
c0007e39:	57                   	push   edi
c0007e3a:	56                   	push   esi
c0007e3b:	55                   	push   ebp
c0007e3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e40:	e8 ad 9d ff ff       	call   c0001bf2 <disk_write>
c0007e45:	83 c4 20             	add    esp,0x20
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	0f 85 ce 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 5d 9e ff ff       	call   c0001cbb <mem_set>
c0007e5e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e66:	e8 2e 9e ff ff       	call   c0001c99 <st_word>
c0007e6b:	89 f0                	mov    eax,esi
c0007e6d:	89 fa                	mov    edx,edi
c0007e6f:	83 c0 09             	add    eax,0x9
c0007e72:	83 d2 00             	adc    edx,0x0
c0007e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e7c:	31 c9                	xor    ecx,ecx
c0007e7e:	41                   	inc    ecx
c0007e7f:	89 da                	mov    edx,ebx
c0007e81:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e86:	e8 97 a2 ff ff       	call   c0002122 <xsum32>
c0007e8b:	89 c3                	mov    ebx,eax
c0007e8d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e93:	75 e9                	jne    c0007e7e <f_mkfs+0x911>
c0007e95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ea4:	83 d2 00             	adc    edx,0x0
c0007ea7:	83 ec 0c             	sub    esp,0xc
c0007eaa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007eae:	6a 01                	push   0x1
c0007eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb8:	55                   	push   ebp
c0007eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ebd:	e8 30 9d ff ff       	call   c0001bf2 <disk_write>
c0007ec2:	83 c4 20             	add    esp,0x20
c0007ec5:	85 c0                	test   eax,eax
c0007ec7:	0f 85 51 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ed1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ed5:	75 09                	jne    c0007ee0 <f_mkfs+0x973>
c0007ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007eda:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ede:	74 12                	je     c0007ef2 <f_mkfs+0x985>
c0007ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ee4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ee8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007eec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ef0:	eb 8a                	jmp    c0007e7c <f_mkfs+0x90f>
c0007ef2:	31 d2                	xor    edx,edx
c0007ef4:	b9 00 02 00 00       	mov    ecx,0x200
c0007ef9:	89 e8                	mov    eax,ebp
c0007efb:	e8 bb 9d ff ff       	call   c0001cbb <mem_set>
c0007f00:	83 c6 0b             	add    esi,0xb
c0007f03:	83 d7 00             	adc    edi,0x0
c0007f06:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007f0a:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007f0e:	31 c9                	xor    ecx,ecx
c0007f10:	41                   	inc    ecx
c0007f11:	89 da                	mov    edx,ebx
c0007f13:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007f18:	e8 05 a2 ff ff       	call   c0002122 <xsum32>
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007f25:	75 e9                	jne    c0007f10 <f_mkfs+0x9a3>
c0007f27:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f2a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f2e:	83 c6 01             	add    esi,0x1
c0007f31:	83 d7 00             	adc    edi,0x0
c0007f34:	83 ec 0c             	sub    esp,0xc
c0007f37:	6a 01                	push   0x1
c0007f39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f41:	55                   	push   ebp
c0007f42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f46:	e8 a7 9c ff ff       	call   c0001bf2 <disk_write>
c0007f4b:	83 c4 20             	add    esp,0x20
c0007f4e:	85 c0                	test   eax,eax
c0007f50:	0f 85 c8 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007f56:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007f5a:	75 06                	jne    c0007f62 <f_mkfs+0x9f5>
c0007f5c:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007f60:	74 09                	je     c0007f6b <f_mkfs+0x9fe>
c0007f62:	89 34 24             	mov    DWORD PTR [esp],esi
c0007f65:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007f69:	eb a3                	jmp    c0007f0e <f_mkfs+0x9a1>
c0007f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007f6f:	89 da                	mov    edx,ebx
c0007f71:	01 e8                	add    eax,ebp
c0007f73:	e8 25 9d ff ff       	call   c0001c9d <st_dword>
c0007f78:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007f7d:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007f85:	75 e4                	jne    c0007f6b <f_mkfs+0x9fe>
c0007f87:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f8a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f8e:	83 c6 02             	add    esi,0x2
c0007f91:	83 d7 00             	adc    edi,0x0
c0007f94:	83 ec 0c             	sub    esp,0xc
c0007f97:	6a 01                	push   0x1
c0007f99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fa1:	55                   	push   ebp
c0007fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa6:	e8 47 9c ff ff       	call   c0001bf2 <disk_write>
c0007fab:	83 c4 20             	add    esp,0x20
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	0f 85 68 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007fb6:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fbb:	74 0d                	je     c0007fca <f_mkfs+0xa5d>
c0007fbd:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007fc5:	e9 43 fd ff ff       	jmp    c0007d0d <f_mkfs+0x7a0>
c0007fca:	b1 07                	mov    cl,0x7
c0007fcc:	e9 e3 05 00 00       	jmp    c00085b4 <f_mkfs+0x1047>
c0007fd1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007fd6:	0f 85 4f 02 00 00    	jne    c000822b <f_mkfs+0xcbe>
c0007fdc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007fe1:	0f 86 22 02 00 00    	jbe    c0008209 <f_mkfs+0xc9c>
c0007fe7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fec:	0f 85 81 06 00 00    	jne    c0008673 <f_mkfs+0x1106>
c0007ff2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ff9:	83 f8 40             	cmp    eax,0x40
c0007ffc:	0f 87 51 06 00 00    	ja     c0008653 <f_mkfs+0x10e6>
c0008002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008006:	85 ff                	test   edi,edi
c0008008:	75 1c                	jne    c0008026 <f_mkfs+0xab9>
c000800a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000800d:	ba 80 96 02 c0       	mov    edx,0xc0029680
c0008012:	c1 e9 0c             	shr    ecx,0xc
c0008015:	bf 01 00 00 00       	mov    edi,0x1
c000801a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000801d:	66 85 c0             	test   ax,ax
c0008020:	0f 85 95 01 00 00    	jne    c00081bb <f_mkfs+0xc4e>
c0008026:	31 d2                	xor    edx,edx
c0008028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000802b:	f7 f7                	div    edi
c000802d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008032:	0f 86 95 01 00 00    	jbe    c00081cd <f_mkfs+0xc60>
c0008038:	83 c0 02             	add    eax,0x2
c000803b:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0008040:	01 c0                	add    eax,eax
c0008042:	05 ff 01 00 00       	add    eax,0x1ff
c0008047:	be 01 00 00 00       	mov    esi,0x1
c000804c:	c1 e8 09             	shr    eax,0x9
c000804f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008057:	c1 e0 05             	shl    eax,0x5
c000805a:	c1 e8 09             	shr    eax,0x9
c000805d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0008061:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0008066:	31 d2                	xor    edx,edx
c0008068:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000806c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0008070:	89 f0                	mov    eax,esi
c0008072:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0008076:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000807a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000807e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	31 d2                	xor    edx,edx
c0008088:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c000808d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0008091:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0008095:	31 db                	xor    ebx,ebx
c0008097:	01 c8                	add    eax,ecx
c0008099:	11 da                	adc    edx,ebx
c000809b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000809f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c00080a3:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00080a7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00080ab:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c00080af:	f7 da                	neg    edx
c00080b1:	21 d1                	and    ecx,edx
c00080b3:	29 d9                	sub    ecx,ebx
c00080b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ba:	0f 85 20 01 00 00    	jne    c00081e0 <f_mkfs+0xc73>
c00080c0:	31 db                	xor    ebx,ebx
c00080c2:	01 ce                	add    esi,ecx
c00080c4:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c00080c8:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c00080cc:	31 d2                	xor    edx,edx
c00080ce:	89 f8                	mov    eax,edi
c00080d0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00080d4:	c1 e0 04             	shl    eax,0x4
c00080d7:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00080db:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00080df:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c00080e3:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c00080e7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00080ea:	19 d3                	sbb    ebx,edx
c00080ec:	0f 82 40 01 00 00    	jb     c0008232 <f_mkfs+0xcc5>
c00080f2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00080f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f9:	89 c8                	mov    eax,ecx
c00080fb:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008100:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008104:	29 f0                	sub    eax,esi
c0008106:	29 d0                	sub    eax,edx
c0008108:	31 d2                	xor    edx,edx
c000810a:	f7 f7                	div    edi
c000810c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008111:	89 c3                	mov    ebx,eax
c0008113:	0f 85 b8 fe ff ff    	jne    c0007fd1 <f_mkfs+0xa64>
c0008119:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000811e:	0f 87 1d 01 00 00    	ja     c0008241 <f_mkfs+0xcd4>
c0008124:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008129:	0f 85 03 01 00 00    	jne    c0008232 <f_mkfs+0xcc5>
c000812f:	83 ff 01             	cmp    edi,0x1
c0008132:	0f 86 fa 00 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0008138:	d1 ef                	shr    edi,1
c000813a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000813e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008142:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008145:	85 db                	test   ebx,ebx
c0008147:	75 2d                	jne    c0008176 <f_mkfs+0xc09>
c0008149:	89 cb                	mov    ebx,ecx
c000814b:	ba 90 96 02 c0       	mov    edx,0xc0029690
c0008150:	c1 eb 11             	shr    ebx,0x11
c0008153:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000815b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000815e:	66 85 c0             	test   ax,ax
c0008161:	74 11                	je     c0008174 <f_mkfs+0xc07>
c0008163:	83 c2 02             	add    edx,0x2
c0008166:	39 d8                	cmp    eax,ebx
c0008168:	77 0a                	ja     c0008174 <f_mkfs+0xc07>
c000816a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000816e:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0008172:	eb e7                	jmp    c000815b <f_mkfs+0xbee>
c0008174:	31 db                	xor    ebx,ebx
c0008176:	31 d2                	xor    edx,edx
c0008178:	89 c8                	mov    eax,ecx
c000817a:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000817e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0008185:	2d f6 ff 00 00       	sub    eax,0xfff6
c000818a:	c1 ea 09             	shr    edx,0x9
c000818d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0008192:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0008196:	0f 87 96 00 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00081a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00081ac:	be 20 00 00 00       	mov    esi,0x20
c00081b1:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00081b6:	e9 a6 fe ff ff       	jmp    c0008061 <f_mkfs+0xaf4>
c00081bb:	83 c2 02             	add    edx,0x2
c00081be:	39 c8                	cmp    eax,ecx
c00081c0:	0f 87 60 fe ff ff    	ja     c0008026 <f_mkfs+0xab9>
c00081c6:	01 ff                	add    edi,edi
c00081c8:	e9 4d fe ff ff       	jmp    c000801a <f_mkfs+0xaad>
c00081cd:	8d 04 40             	lea    eax,[eax+eax*2]
c00081d0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c00081d5:	40                   	inc    eax
c00081d6:	d1 e8                	shr    eax,1
c00081d8:	83 c0 03             	add    eax,0x3
c00081db:	e9 62 fe ff ff       	jmp    c0008042 <f_mkfs+0xad5>
c00081e0:	31 d2                	xor    edx,edx
c00081e2:	89 c8                	mov    eax,ecx
c00081e4:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c00081e8:	85 d2                	test   edx,edx
c00081ea:	74 0c                	je     c00081f8 <f_mkfs+0xc8b>
c00081ec:	49                   	dec    ecx
c00081ed:	46                   	inc    esi
c00081ee:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00081f3:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c00081f8:	89 c8                	mov    eax,ecx
c00081fa:	31 d2                	xor    edx,edx
c00081fc:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008200:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008204:	e9 c3 fe ff ff       	jmp    c00080cc <f_mkfs+0xb5f>
c0008209:	3d f5 0f 00 00       	cmp    eax,0xff5
c000820e:	77 31                	ja     c0008241 <f_mkfs+0xcd4>
c0008210:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008215:	75 1b                	jne    c0008232 <f_mkfs+0xcc5>
c0008217:	8d 04 3f             	lea    eax,[edi+edi*1]
c000821a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000821e:	3d 80 00 00 00       	cmp    eax,0x80
c0008223:	0f 86 d9 fd ff ff    	jbe    c0008002 <f_mkfs+0xa95>
c0008229:	eb 07                	jmp    c0008232 <f_mkfs+0xcc5>
c000822b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008230:	76 0a                	jbe    c000823c <f_mkfs+0xccf>
c0008232:	bb 0e 00 00 00       	mov    ebx,0xe
c0008237:	e9 ff 03 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c000823c:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008241:	31 d2                	xor    edx,edx
c0008243:	b9 00 02 00 00       	mov    ecx,0x200
c0008248:	89 e8                	mov    eax,ebp
c000824a:	e8 6c 9a ff ff       	call   c0001cbb <mem_set>
c000824f:	b9 0b 00 00 00       	mov    ecx,0xb
c0008254:	ba a2 97 02 c0       	mov    edx,0xc00297a2
c0008259:	89 e8                	mov    eax,ebp
c000825b:	e8 46 9a ff ff       	call   c0001ca6 <mem_cpy>
c0008260:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008263:	ba 00 02 00 00       	mov    edx,0x200
c0008268:	e8 2c 9a ff ff       	call   c0001c99 <st_word>
c000826d:	89 f8                	mov    eax,edi
c000826f:	0f b7 d6             	movzx  edx,si
c0008272:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008275:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008278:	e8 1c 9a ff ff       	call   c0001c99 <st_word>
c000827d:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008281:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008286:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008289:	75 08                	jne    c0008293 <f_mkfs+0xd26>
c000828b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008293:	8d 45 11             	lea    eax,[ebp+0x11]
c0008296:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000829a:	e8 fa 99 ff ff       	call   c0001c99 <st_word>
c000829f:	b8 ff ff 00 00       	mov    eax,0xffff
c00082a4:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00082a8:	39 d0                	cmp    eax,edx
c00082aa:	b8 00 00 00 00       	mov    eax,0x0
c00082af:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00082b3:	72 0a                	jb     c00082bf <f_mkfs+0xd52>
c00082b5:	8d 45 13             	lea    eax,[ebp+0x13]
c00082b8:	e8 dc 99 ff ff       	call   c0001c99 <st_word>
c00082bd:	eb 08                	jmp    c00082c7 <f_mkfs+0xd5a>
c00082bf:	8d 45 20             	lea    eax,[ebp+0x20]
c00082c2:	e8 d6 99 ff ff       	call   c0001c9d <st_dword>
c00082c7:	8d 45 18             	lea    eax,[ebp+0x18]
c00082ca:	ba 3f 00 00 00       	mov    edx,0x3f
c00082cf:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00082d3:	e8 c1 99 ff ff       	call   c0001c99 <st_word>
c00082d8:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00082db:	ba ff 00 00 00       	mov    edx,0xff
c00082e0:	e8 b4 99 ff ff       	call   c0001c99 <st_word>
c00082e5:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00082e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00082ec:	e8 ac 99 ff ff       	call   c0001c9d <st_dword>
c00082f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f6:	75 57                	jne    c000834f <f_mkfs+0xde2>
c00082f8:	8d 45 43             	lea    eax,[ebp+0x43]
c00082fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0008300:	e8 98 99 ff ff       	call   c0001c9d <st_dword>
c0008305:	8d 45 24             	lea    eax,[ebp+0x24]
c0008308:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000830c:	e8 8c 99 ff ff       	call   c0001c9d <st_dword>
c0008311:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008314:	ba 02 00 00 00       	mov    edx,0x2
c0008319:	e8 7f 99 ff ff       	call   c0001c9d <st_dword>
c000831e:	8d 45 30             	lea    eax,[ebp+0x30]
c0008321:	ba 01 00 00 00       	mov    edx,0x1
c0008326:	e8 6e 99 ff ff       	call   c0001c99 <st_word>
c000832b:	8d 45 32             	lea    eax,[ebp+0x32]
c000832e:	ba 06 00 00 00       	mov    edx,0x6
c0008333:	e8 61 99 ff ff       	call   c0001c99 <st_word>
c0008338:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000833c:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008340:	8d 45 47             	lea    eax,[ebp+0x47]
c0008343:	b9 13 00 00 00       	mov    ecx,0x13
c0008348:	ba ae 97 02 c0       	mov    edx,0xc00297ae
c000834d:	eb 2f                	jmp    c000837e <f_mkfs+0xe11>
c000834f:	8d 45 27             	lea    eax,[ebp+0x27]
c0008352:	ba 00 00 21 50       	mov    edx,0x50210000
c0008357:	e8 41 99 ff ff       	call   c0001c9d <st_dword>
c000835c:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008361:	8d 45 16             	lea    eax,[ebp+0x16]
c0008364:	e8 30 99 ff ff       	call   c0001c99 <st_word>
c0008369:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000836d:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008371:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008374:	b9 13 00 00 00       	mov    ecx,0x13
c0008379:	ba c2 97 02 c0       	mov    edx,0xc00297c2
c000837e:	e8 23 99 ff ff       	call   c0001ca6 <mem_cpy>
c0008383:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008389:	ba 55 aa 00 00       	mov    edx,0xaa55
c000838e:	89 f0                	mov    eax,esi
c0008390:	e8 04 99 ff ff       	call   c0001c99 <st_word>
c0008395:	83 ec 0c             	sub    esp,0xc
c0008398:	6a 01                	push   0x1
c000839a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000839e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00083a2:	55                   	push   ebp
c00083a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a7:	e8 46 98 ff ff       	call   c0001bf2 <disk_write>
c00083ac:	83 c4 20             	add    esp,0x20
c00083af:	85 c0                	test   eax,eax
c00083b1:	0f 85 67 02 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00083b7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bc:	0f 85 b7 00 00 00    	jne    c0008479 <f_mkfs+0xf0c>
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	6a 01                	push   0x1
c00083c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083cf:	83 c0 06             	add    eax,0x6
c00083d2:	83 d2 00             	adc    edx,0x0
c00083d5:	52                   	push   edx
c00083d6:	50                   	push   eax
c00083d7:	55                   	push   ebp
c00083d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083dc:	e8 11 98 ff ff       	call   c0001bf2 <disk_write>
c00083e1:	83 c4 20             	add    esp,0x20
c00083e4:	b9 00 02 00 00       	mov    ecx,0x200
c00083e9:	31 d2                	xor    edx,edx
c00083eb:	89 e8                	mov    eax,ebp
c00083ed:	e8 c9 98 ff ff       	call   c0001cbb <mem_set>
c00083f2:	ba 52 52 61 41       	mov    edx,0x41615252
c00083f7:	89 e8                	mov    eax,ebp
c00083f9:	e8 9f 98 ff ff       	call   c0001c9d <st_dword>
c00083fe:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008404:	ba 72 72 41 61       	mov    edx,0x61417272
c0008409:	e8 8f 98 ff ff       	call   c0001c9d <st_dword>
c000840e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008411:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008417:	e8 81 98 ff ff       	call   c0001c9d <st_dword>
c000841c:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008422:	ba 02 00 00 00       	mov    edx,0x2
c0008427:	e8 71 98 ff ff       	call   c0001c9d <st_dword>
c000842c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008431:	89 f0                	mov    eax,esi
c0008433:	e8 61 98 ff ff       	call   c0001c99 <st_word>
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	6a 01                	push   0x1
c000843d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008445:	83 c0 07             	add    eax,0x7
c0008448:	83 d2 00             	adc    edx,0x0
c000844b:	52                   	push   edx
c000844c:	50                   	push   eax
c000844d:	55                   	push   ebp
c000844e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008452:	e8 9b 97 ff ff       	call   c0001bf2 <disk_write>
c0008457:	83 c4 14             	add    esp,0x14
c000845a:	6a 01                	push   0x1
c000845c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008460:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008464:	83 c0 01             	add    eax,0x1
c0008467:	83 d2 00             	adc    edx,0x0
c000846a:	52                   	push   edx
c000846b:	50                   	push   eax
c000846c:	55                   	push   ebp
c000846d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008471:	e8 7c 97 ff ff       	call   c0001bf2 <disk_write>
c0008476:	83 c4 20             	add    esp,0x20
c0008479:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008480:	31 d2                	xor    edx,edx
c0008482:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008488:	31 db                	xor    ebx,ebx
c000848a:	89 e8                	mov    eax,ebp
c000848c:	e8 2a 98 ff ff       	call   c0001cbb <mem_set>
c0008491:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000849d:	0f 94 c3             	sete   bl
c00084a0:	4b                   	dec    ebx
c00084a1:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00084a7:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00084ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084b2:	75 21                	jne    c00084d5 <f_mkfs+0xf68>
c00084b4:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00084b9:	89 e8                	mov    eax,ebp
c00084bb:	e8 dd 97 ff ff       	call   c0001c9d <st_dword>
c00084c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00084c3:	83 ca ff             	or     edx,0xffffffff
c00084c6:	e8 d2 97 ff ff       	call   c0001c9d <st_dword>
c00084cb:	8d 45 08             	lea    eax,[ebp+0x8]
c00084ce:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00084d3:	eb 04                	jmp    c00084d9 <f_mkfs+0xf6c>
c00084d5:	89 da                	mov    edx,ebx
c00084d7:	89 e8                	mov    eax,ebp
c00084d9:	e8 bf 97 ff ff       	call   c0001c9d <st_dword>
c00084de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00084e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084e6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00084ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00084ee:	39 ce                	cmp    esi,ecx
c00084f0:	76 02                	jbe    c00084f4 <f_mkfs+0xf87>
c00084f2:	89 ce                	mov    esi,ecx
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	56                   	push   esi
c00084f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008500:	55                   	push   ebp
c0008501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008505:	e8 e8 96 ff ff       	call   c0001bf2 <disk_write>
c000850a:	83 c4 20             	add    esp,0x20
c000850d:	85 c0                	test   eax,eax
c000850f:	0f 85 09 01 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008515:	31 d2                	xor    edx,edx
c0008517:	b9 00 02 00 00       	mov    ecx,0x200
c000851c:	89 e8                	mov    eax,ebp
c000851e:	e8 98 97 ff ff       	call   c0001cbb <mem_set>
c0008523:	31 d2                	xor    edx,edx
c0008525:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008529:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000852d:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008531:	75 b3                	jne    c00084e6 <f_mkfs+0xf79>
c0008533:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008536:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000853d:	40                   	inc    eax
c000853e:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008542:	0f 87 65 ff ff ff    	ja     c00084ad <f_mkfs+0xf40>
c0008548:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000854d:	74 04                	je     c0008553 <f_mkfs+0xfe6>
c000854f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008553:	89 fb                	mov    ebx,edi
c0008555:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008559:	76 04                	jbe    c000855f <f_mkfs+0xff2>
c000855b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000855f:	83 ec 0c             	sub    esp,0xc
c0008562:	53                   	push   ebx
c0008563:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008567:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000856b:	55                   	push   ebp
c000856c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008570:	e8 7d 96 ff ff       	call   c0001bf2 <disk_write>
c0008575:	83 c4 20             	add    esp,0x20
c0008578:	85 c0                	test   eax,eax
c000857a:	0f 85 9e 00 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008580:	31 d2                	xor    edx,edx
c0008582:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008586:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000858a:	29 df                	sub    edi,ebx
c000858c:	75 c5                	jne    c0008553 <f_mkfs+0xfe6>
c000858e:	b1 0c                	mov    cl,0xc
c0008590:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008595:	74 1d                	je     c00085b4 <f_mkfs+0x1047>
c0008597:	b8 ff ff 00 00       	mov    eax,0xffff
c000859c:	b1 06                	mov    cl,0x6
c000859e:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00085a2:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00085a6:	72 0c                	jb     c00085b4 <f_mkfs+0x1047>
c00085a8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00085ad:	0f 94 c1             	sete   cl
c00085b0:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00085b4:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00085b9:	75 4c                	jne    c0008607 <f_mkfs+0x109a>
c00085bb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00085bf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00085c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00085ca:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00085d1:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00085dc:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00085e7:	0f b6 c9             	movzx  ecx,cl
c00085ea:	83 ec 0c             	sub    esp,0xc
c00085ed:	55                   	push   ebp
c00085ee:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00085f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f9:	e8 f9 bf ff ff       	call   c00045f7 <create_partition>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	89 c3                	mov    ebx,eax
c0008603:	85 c0                	test   eax,eax
c0008605:	75 34                	jne    c000863b <f_mkfs+0x10ce>
c0008607:	31 db                	xor    ebx,ebx
c0008609:	50                   	push   eax
c000860a:	6a 00                	push   0x0
c000860c:	6a 00                	push   0x0
c000860e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008612:	e8 f1 95 ff ff       	call   c0001c08 <disk_ioctl>
c0008617:	83 c4 10             	add    esp,0x10
c000861a:	85 c0                	test   eax,eax
c000861c:	74 1d                	je     c000863b <f_mkfs+0x10ce>
c000861e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008626:	75 0c                	jne    c0008634 <f_mkfs+0x10c7>
c0008628:	83 ec 0c             	sub    esp,0xc
c000862b:	55                   	push   ebp
c000862c:	e8 75 00 00 00       	call   c00086a6 <ff_memfree>
c0008631:	83 c4 10             	add    esp,0x10
c0008634:	bb 01 00 00 00       	mov    ebx,0x1
c0008639:	eb 48                	jmp    c0008683 <f_mkfs+0x1116>
c000863b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008643:	75 3e                	jne    c0008683 <f_mkfs+0x1116>
c0008645:	83 ec 0c             	sub    esp,0xc
c0008648:	55                   	push   ebp
c0008649:	e8 58 00 00 00       	call   c00086a6 <ff_memfree>
c000864e:	83 c4 10             	add    esp,0x10
c0008651:	eb 30                	jmp    c0008683 <f_mkfs+0x1116>
c0008653:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008658:	0f 85 eb fa ff ff    	jne    c0008149 <f_mkfs+0xbdc>
c000865e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008662:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008668:	0f 86 b8 f9 ff ff    	jbe    c0008026 <f_mkfs+0xab9>
c000866e:	e9 bf fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008673:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008678:	0f 85 c0 fa ff ff    	jne    c000813e <f_mkfs+0xbd1>
c000867e:	e9 af fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008683:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008689:	89 d8                	mov    eax,ebx
c000868b:	5b                   	pop    ebx
c000868c:	5e                   	pop    esi
c000868d:	5f                   	pop    edi
c000868e:	5d                   	pop    ebp
c000868f:	c3                   	ret    

c0008690 <ff_memalloc>:
c0008690:	83 ec 0c             	sub    esp,0xc
c0008693:	83 ec 0c             	sub    esp,0xc
c0008696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000869a:	e8 8a 71 00 00       	call   c000f829 <malloc>
c000869f:	83 c4 10             	add    esp,0x10
c00086a2:	83 c4 0c             	add    esp,0xc
c00086a5:	c3                   	ret    

c00086a6 <ff_memfree>:
c00086a6:	83 ec 0c             	sub    esp,0xc
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	e8 84 71 00 00       	call   c000f839 <free>
c00086b5:	83 c4 10             	add    esp,0x10
c00086b8:	90                   	nop
c00086b9:	83 c4 0c             	add    esp,0xc
c00086bc:	c3                   	ret    

c00086bd <ff_uni2oem>:
c00086bd:	83 ec 14             	sub    esp,0x14
c00086c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086c4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086c8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00086cf:	c7 44 24 0c e0 9a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029ae0
c00086d7:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00086dc:	77 0b                	ja     c00086e9 <ff_uni2oem+0x2c>
c00086de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00086e2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00086e7:	eb 5b                	jmp    c0008744 <ff_uni2oem+0x87>
c00086e9:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00086f1:	77 51                	ja     c0008744 <ff_uni2oem+0x87>
c00086f3:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086f9:	75 49                	jne    c0008744 <ff_uni2oem+0x87>
c00086fb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008702:	eb 0b                	jmp    c000870f <ff_uni2oem+0x52>
c0008704:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008709:	40                   	inc    eax
c000870a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000870f:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008715:	77 1b                	ja     c0008732 <ff_uni2oem+0x75>
c0008717:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000871c:	01 c0                	add    eax,eax
c000871e:	89 c2                	mov    edx,eax
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	01 d0                	add    eax,edx
c0008726:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008729:	0f b7 c0             	movzx  eax,ax
c000872c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008730:	75 d2                	jne    c0008704 <ff_uni2oem+0x47>
c0008732:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008737:	83 e8 80             	sub    eax,0xffffff80
c000873a:	25 ff 00 00 00       	and    eax,0xff
c000873f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008744:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008749:	83 c4 14             	add    esp,0x14
c000874c:	c3                   	ret    

c000874d <ff_oem2uni>:
c000874d:	83 ec 18             	sub    esp,0x18
c0008750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008758:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000875d:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008761:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008768:	c7 44 24 10 e0 9a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ae0
c0008770:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008776:	77 0b                	ja     c0008783 <ff_oem2uni+0x36>
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008781:	eb 2d                	jmp    c00087b0 <ff_oem2uni+0x63>
c0008783:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008789:	75 25                	jne    c00087b0 <ff_oem2uni+0x63>
c000878b:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008792:	77 1c                	ja     c00087b0 <ff_oem2uni+0x63>
c0008794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008799:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000879e:	01 c0                	add    eax,eax
c00087a0:	89 c2                	mov    edx,eax
c00087a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a6:	01 d0                	add    eax,edx
c00087a8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087ab:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00087b0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00087b5:	83 c4 18             	add    esp,0x18
c00087b8:	c3                   	ret    

c00087b9 <ff_wtoupper>:
c00087b9:	83 ec 10             	sub    esp,0x10
c00087bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00087c4:	0f 87 3e 01 00 00    	ja     c0008908 <ff_wtoupper+0x14f>
c00087ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d3:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00087da:	77 07                	ja     c00087e3 <ff_wtoupper+0x2a>
c00087dc:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c00087e1:	eb 05                	jmp    c00087e8 <ff_wtoupper+0x2f>
c00087e3:	b8 20 98 02 c0       	mov    eax,0xc0029820
c00087e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f0:	8d 50 02             	lea    edx,[eax+0x2]
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087fa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00087ff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008805:	0f 84 f4 00 00 00    	je     c00088ff <ff_wtoupper+0x146>
c000880b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008810:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008815:	0f 82 e4 00 00 00    	jb     c00088ff <ff_wtoupper+0x146>
c000881b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881f:	8d 50 02             	lea    edx,[eax+0x2]
c0008822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008826:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008829:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000882e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008833:	66 c1 e8 08          	shr    ax,0x8
c0008837:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000883c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008843:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008848:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000884d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008852:	01 ca                	add    edx,ecx
c0008854:	39 d0                	cmp    eax,edx
c0008856:	0f 8d 86 00 00 00    	jge    c00088e2 <ff_wtoupper+0x129>
c000885c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008861:	83 f8 08             	cmp    eax,0x8
c0008864:	0f 87 94 00 00 00    	ja     c00088fe <ff_wtoupper+0x145>
c000886a:	8b 04 85 e0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6820]
c0008871:	ff e0                	jmp    eax
c0008873:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008878:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000887d:	29 c2                	sub    edx,eax
c000887f:	89 d0                	mov    eax,edx
c0008881:	01 c0                	add    eax,eax
c0008883:	89 c2                	mov    edx,eax
c0008885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008889:	01 d0                	add    eax,edx
c000888b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000888e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008893:	eb 4b                	jmp    c00088e0 <ff_wtoupper+0x127>
c0008895:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000889a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000889e:	83 e0 01             	and    eax,0x1
c00088a1:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00088a6:	eb 38                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088a8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00088ae:	eb 30                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00088b6:	eb 28                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00088be:	eb 20                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00088c6:	eb 18                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00088ce:	eb 10                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00088d6:	eb 08                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00088df:	90                   	nop
c00088e0:	eb 1c                	jmp    c00088fe <ff_wtoupper+0x145>
c00088e2:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00088e8:	0f 85 fe fe ff ff    	jne    c00087ec <ff_wtoupper+0x33>
c00088ee:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00088f3:	01 c0                	add    eax,eax
c00088f5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00088f9:	e9 ee fe ff ff       	jmp    c00087ec <ff_wtoupper+0x33>
c00088fe:	90                   	nop
c00088ff:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000890c:	83 c4 10             	add    esp,0x10
c000890f:	c3                   	ret    

c0008910 <psrc_set_converter>:
c0008910:	56                   	push   esi
c0008911:	89 d6                	mov    esi,edx
c0008913:	53                   	push   ebx
c0008914:	89 c3                	mov    ebx,eax
c0008916:	83 ec 0c             	sub    esp,0xc
c0008919:	52                   	push   edx
c000891a:	50                   	push   eax
c000891b:	e8 6f 55 00 00       	call   c000de8f <sinc_set_converter>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	85 c0                	test   eax,eax
c0008925:	74 25                	je     c000894c <psrc_set_converter+0x3c>
c0008927:	50                   	push   eax
c0008928:	50                   	push   eax
c0008929:	56                   	push   esi
c000892a:	53                   	push   ebx
c000892b:	e8 17 5d 00 00       	call   c000e647 <zoh_set_converter>
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	85 c0                	test   eax,eax
c0008935:	74 15                	je     c000894c <psrc_set_converter+0x3c>
c0008937:	51                   	push   ecx
c0008938:	51                   	push   ecx
c0008939:	56                   	push   esi
c000893a:	53                   	push   ebx
c000893b:	e8 0f 11 00 00       	call   c0009a4f <linear_set_converter>
c0008940:	83 c4 10             	add    esp,0x10
c0008943:	ba 0a 00 00 00       	mov    edx,0xa
c0008948:	85 c0                	test   eax,eax
c000894a:	75 02                	jne    c000894e <psrc_set_converter+0x3e>
c000894c:	31 d2                	xor    edx,edx
c000894e:	89 d0                	mov    eax,edx
c0008950:	5a                   	pop    edx
c0008951:	5b                   	pop    ebx
c0008952:	5e                   	pop    esi
c0008953:	c3                   	ret    

c0008954 <src_delete>:
c0008954:	53                   	push   ebx
c0008955:	83 ec 08             	sub    esp,0x8
c0008958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000895c:	85 db                	test   ebx,ebx
c000895e:	74 29                	je     c0008989 <src_delete+0x35>
c0008960:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008963:	85 c0                	test   eax,eax
c0008965:	74 0c                	je     c0008973 <src_delete+0x1f>
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	50                   	push   eax
c000896b:	e8 c9 6e 00 00       	call   c000f839 <free>
c0008970:	83 c4 10             	add    esp,0x10
c0008973:	50                   	push   eax
c0008974:	6a 3c                	push   0x3c
c0008976:	6a 00                	push   0x0
c0008978:	53                   	push   ebx
c0008979:	e8 d2 7d ff ff       	call   c0000750 <memset>
c000897e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008981:	e8 b3 6e 00 00       	call   c000f839 <free>
c0008986:	83 c4 10             	add    esp,0x10
c0008989:	31 c0                	xor    eax,eax
c000898b:	83 c4 08             	add    esp,0x8
c000898e:	5b                   	pop    ebx
c000898f:	c3                   	ret    

c0008990 <src_process>:
c0008990:	55                   	push   ebp
c0008991:	57                   	push   edi
c0008992:	56                   	push   esi
c0008993:	53                   	push   ebx
c0008994:	83 ec 1c             	sub    esp,0x1c
c0008997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000899b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000899f:	85 ed                	test   ebp,ebp
c00089a1:	0f 84 6f 01 00 00    	je     c0008b16 <src_process+0x186>
c00089a7:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00089ab:	0f 84 6c 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089b1:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00089b5:	0f 84 62 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089bb:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00089c2:	0f 85 5c 01 00 00    	jne    c0008b24 <src_process+0x194>
c00089c8:	85 db                	test   ebx,ebx
c00089ca:	0f 84 5b 01 00 00    	je     c0008b2b <src_process+0x19b>
c00089d0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00089d2:	85 f6                	test   esi,esi
c00089d4:	0f 84 58 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089da:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00089dd:	85 ff                	test   edi,edi
c00089df:	0f 84 4d 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089e5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00089e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00089eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00089f3:	68 00 00 70 3f       	push   0x3f700000
c00089f8:	6a 00                	push   0x0
c00089fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a02:	e8 f0 fc 01 00       	call   c00286f7 <__ltdf2>
c0008a07:	83 c4 10             	add    esp,0x10
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	0f 88 27 01 00 00    	js     c0008b39 <src_process+0x1a9>
c0008a12:	68 00 00 70 40       	push   0x40700000
c0008a17:	6a 00                	push   0x0
c0008a19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a21:	e8 b3 fc 01 00       	call   c00286d9 <__gtdf2>
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	85 c0                	test   eax,eax
c0008a2b:	0f 8f 08 01 00 00    	jg     c0008b39 <src_process+0x1a9>
c0008a31:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008a35:	79 07                	jns    c0008a3e <src_process+0xae>
c0008a37:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008a3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a41:	85 c0                	test   eax,eax
c0008a43:	79 50                	jns    c0008a95 <src_process+0x105>
c0008a45:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008a4c:	39 fe                	cmp    esi,edi
c0008a4e:	72 37                	jb     c0008a87 <src_process+0xf7>
c0008a50:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008a57:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008a5e:	68 00 00 70 3f       	push   0x3f700000
c0008a63:	6a 00                	push   0x0
c0008a65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008a68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008a6b:	e8 87 fc 01 00       	call   c00286f7 <__ltdf2>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	79 37                	jns    c0008aae <src_process+0x11e>
c0008a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008a82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008a85:	eb 27                	jmp    c0008aae <src_process+0x11e>
c0008a87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008a8a:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a8e:	8d 04 86             	lea    eax,[esi+eax*4]
c0008a91:	39 c7                	cmp    edi,eax
c0008a93:	eb 0d                	jmp    c0008aa2 <src_process+0x112>
c0008a95:	39 fe                	cmp    esi,edi
c0008a97:	72 ee                	jb     c0008a87 <src_process+0xf7>
c0008a99:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a9d:	8d 04 87             	lea    eax,[edi+eax*4]
c0008aa0:	39 c6                	cmp    esi,eax
c0008aa2:	73 ac                	jae    c0008a50 <src_process+0xc0>
c0008aa4:	b8 10 00 00 00       	mov    eax,0x10
c0008aa9:	e9 90 00 00 00       	jmp    c0008b3e <src_process+0x1ae>
c0008aae:	83 ec 10             	sub    esp,0x10
c0008ab1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008ab4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008ab7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008aba:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008abd:	e8 3a f3 01 00       	call   c0027dfc <__subdf3>
c0008ac2:	83 c4 18             	add    esp,0x18
c0008ac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ac9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008acd:	52                   	push   edx
c0008ace:	50                   	push   eax
c0008acf:	e8 bc fd 01 00       	call   c0028890 <fabs>
c0008ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ad8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008adc:	83 c4 10             	add    esp,0x10
c0008adf:	68 af 03 d2 3c       	push   0x3cd203af
c0008ae4:	68 16 56 e7 9e       	push   0x9ee75616
c0008ae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af1:	e8 01 fc 01 00       	call   c00286f7 <__ltdf2>
c0008af6:	83 c4 10             	add    esp,0x10
c0008af9:	85 c0                	test   eax,eax
c0008afb:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008aff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008b03:	79 05                	jns    c0008b0a <src_process+0x17a>
c0008b05:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008b08:	eb 03                	jmp    c0008b0d <src_process+0x17d>
c0008b0a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008b0d:	83 c4 1c             	add    esp,0x1c
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	5f                   	pop    edi
c0008b13:	5d                   	pop    ebp
c0008b14:	ff e0                	jmp    eax
c0008b16:	b8 02 00 00 00       	mov    eax,0x2
c0008b1b:	eb 21                	jmp    c0008b3e <src_process+0x1ae>
c0008b1d:	b8 07 00 00 00       	mov    eax,0x7
c0008b22:	eb 1a                	jmp    c0008b3e <src_process+0x1ae>
c0008b24:	b8 12 00 00 00       	mov    eax,0x12
c0008b29:	eb 13                	jmp    c0008b3e <src_process+0x1ae>
c0008b2b:	b8 03 00 00 00       	mov    eax,0x3
c0008b30:	eb 0c                	jmp    c0008b3e <src_process+0x1ae>
c0008b32:	b8 04 00 00 00       	mov    eax,0x4
c0008b37:	eb 05                	jmp    c0008b3e <src_process+0x1ae>
c0008b39:	b8 06 00 00 00       	mov    eax,0x6
c0008b3e:	83 c4 1c             	add    esp,0x1c
c0008b41:	5b                   	pop    ebx
c0008b42:	5e                   	pop    esi
c0008b43:	5f                   	pop    edi
c0008b44:	5d                   	pop    ebp
c0008b45:	c3                   	ret    

c0008b46 <src_callback_read>:
c0008b46:	55                   	push   ebp
c0008b47:	57                   	push   edi
c0008b48:	56                   	push   esi
c0008b49:	53                   	push   ebx
c0008b4a:	83 ec 3c             	sub    esp,0x3c
c0008b4d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008b51:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008b55:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008b59:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008b5d:	85 ed                	test   ebp,ebp
c0008b5f:	0f 8e 52 01 00 00    	jle    c0008cb7 <src_callback_read+0x171>
c0008b65:	85 db                	test   ebx,ebx
c0008b67:	0f 84 4a 01 00 00    	je     c0008cb7 <src_callback_read+0x171>
c0008b6d:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008b74:	74 0c                	je     c0008b82 <src_callback_read+0x3c>
c0008b76:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008b7d:	e9 35 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b82:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008b86:	75 0c                	jne    c0008b94 <src_callback_read+0x4e>
c0008b88:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008b8f:	e9 23 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b94:	51                   	push   ecx
c0008b95:	6a 24                	push   0x24
c0008b97:	6a 00                	push   0x0
c0008b99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008b9d:	50                   	push   eax
c0008b9e:	e8 ad 7b ff ff       	call   c0000750 <memset>
c0008ba3:	83 c4 10             	add    esp,0x10
c0008ba6:	68 00 00 70 3f       	push   0x3f700000
c0008bab:	6a 00                	push   0x0
c0008bad:	57                   	push   edi
c0008bae:	56                   	push   esi
c0008baf:	e8 43 fb 01 00       	call   c00286f7 <__ltdf2>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	85 c0                	test   eax,eax
c0008bb9:	78 3e                	js     c0008bf9 <src_callback_read+0xb3>
c0008bbb:	68 00 00 70 40       	push   0x40700000
c0008bc0:	6a 00                	push   0x0
c0008bc2:	57                   	push   edi
c0008bc3:	56                   	push   esi
c0008bc4:	e8 10 fb 01 00       	call   c00286d9 <__gtdf2>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	85 c0                	test   eax,eax
c0008bce:	7f 29                	jg     c0008bf9 <src_callback_read+0xb3>
c0008bd0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008bd4:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bdc:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008be0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008be3:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008beb:	31 f6                	xor    esi,esi
c0008bed:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008bf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008bf4:	e9 97 00 00 00       	jmp    c0008c90 <src_callback_read+0x14a>
c0008bf9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008c00:	e9 b2 00 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008c05:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0d:	52                   	push   edx
c0008c0e:	52                   	push   edx
c0008c0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008c13:	50                   	push   eax
c0008c14:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c17:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008c1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008c22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	75 08                	jne    c0008c35 <src_callback_read+0xef>
c0008c2d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008c35:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008c3c:	50                   	push   eax
c0008c3d:	50                   	push   eax
c0008c3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008c42:	50                   	push   eax
c0008c43:	53                   	push   ebx
c0008c44:	e8 47 fd ff ff       	call   c0008990 <src_process>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c53:	85 c0                	test   eax,eax
c0008c55:	75 49                	jne    c0008ca0 <src_callback_read+0x15a>
c0008c57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008c5b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c5e:	89 f9                	mov    ecx,edi
c0008c60:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008c64:	0f af ca             	imul   ecx,edx
c0008c67:	c1 e1 02             	shl    ecx,0x2
c0008c6a:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008c6e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008c72:	0f af d1             	imul   edx,ecx
c0008c75:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008c79:	c1 e2 02             	shl    edx,0x2
c0008c7c:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008c80:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008c83:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008c88:	74 12                	je     c0008c9c <src_callback_read+0x156>
c0008c8a:	39 d5                	cmp    ebp,edx
c0008c8c:	7e 14                	jle    c0008ca2 <src_callback_read+0x15c>
c0008c8e:	89 d6                	mov    esi,edx
c0008c90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008c95:	75 9e                	jne    c0008c35 <src_callback_read+0xef>
c0008c97:	e9 69 ff ff ff       	jmp    c0008c05 <src_callback_read+0xbf>
c0008c9c:	85 c9                	test   ecx,ecx
c0008c9e:	75 ea                	jne    c0008c8a <src_callback_read+0x144>
c0008ca0:	89 f2                	mov    edx,esi
c0008ca2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ca6:	85 c0                	test   eax,eax
c0008ca8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008cab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008caf:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008cb2:	74 05                	je     c0008cb9 <src_callback_read+0x173>
c0008cb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008cb7:	31 d2                	xor    edx,edx
c0008cb9:	83 c4 3c             	add    esp,0x3c
c0008cbc:	89 d0                	mov    eax,edx
c0008cbe:	5b                   	pop    ebx
c0008cbf:	5e                   	pop    esi
c0008cc0:	5f                   	pop    edi
c0008cc1:	5d                   	pop    ebp
c0008cc2:	c3                   	ret    

c0008cc3 <src_set_ratio>:
c0008cc3:	57                   	push   edi
c0008cc4:	ba 02 00 00 00       	mov    edx,0x2
c0008cc9:	56                   	push   esi
c0008cca:	53                   	push   ebx
c0008ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ccf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008cd3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008cd7:	85 db                	test   ebx,ebx
c0008cd9:	74 4c                	je     c0008d27 <src_set_ratio+0x64>
c0008cdb:	ba 07 00 00 00       	mov    edx,0x7
c0008ce0:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ce4:	74 41                	je     c0008d27 <src_set_ratio+0x64>
c0008ce6:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008cea:	74 3b                	je     c0008d27 <src_set_ratio+0x64>
c0008cec:	68 00 00 70 3f       	push   0x3f700000
c0008cf1:	6a 00                	push   0x0
c0008cf3:	57                   	push   edi
c0008cf4:	56                   	push   esi
c0008cf5:	e8 fd f9 01 00       	call   c00286f7 <__ltdf2>
c0008cfa:	83 c4 10             	add    esp,0x10
c0008cfd:	ba 06 00 00 00       	mov    edx,0x6
c0008d02:	85 c0                	test   eax,eax
c0008d04:	78 21                	js     c0008d27 <src_set_ratio+0x64>
c0008d06:	68 00 00 70 40       	push   0x40700000
c0008d0b:	6a 00                	push   0x0
c0008d0d:	57                   	push   edi
c0008d0e:	56                   	push   esi
c0008d0f:	e8 c5 f9 01 00       	call   c00286d9 <__gtdf2>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	ba 06 00 00 00       	mov    edx,0x6
c0008d1c:	85 c0                	test   eax,eax
c0008d1e:	7f 07                	jg     c0008d27 <src_set_ratio+0x64>
c0008d20:	89 33                	mov    DWORD PTR [ebx],esi
c0008d22:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008d25:	31 d2                	xor    edx,edx
c0008d27:	5b                   	pop    ebx
c0008d28:	89 d0                	mov    eax,edx
c0008d2a:	5e                   	pop    esi
c0008d2b:	5f                   	pop    edi
c0008d2c:	c3                   	ret    

c0008d2d <src_get_channels>:
c0008d2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d31:	b8 02 00 00 00       	mov    eax,0x2
c0008d36:	85 d2                	test   edx,edx
c0008d38:	74 14                	je     c0008d4e <src_get_channels+0x21>
c0008d3a:	b8 07 00 00 00       	mov    eax,0x7
c0008d3f:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008d43:	74 09                	je     c0008d4e <src_get_channels+0x21>
c0008d45:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008d49:	74 03                	je     c0008d4e <src_get_channels+0x21>
c0008d4b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008d4e:	c3                   	ret    

c0008d4f <src_reset>:
c0008d4f:	53                   	push   ebx
c0008d50:	b8 02 00 00 00       	mov    eax,0x2
c0008d55:	83 ec 08             	sub    esp,0x8
c0008d58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008d5c:	85 db                	test   ebx,ebx
c0008d5e:	74 36                	je     c0008d96 <src_reset+0x47>
c0008d60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008d63:	85 c0                	test   eax,eax
c0008d65:	74 09                	je     c0008d70 <src_reset+0x21>
c0008d67:	83 ec 0c             	sub    esp,0xc
c0008d6a:	53                   	push   ebx
c0008d6b:	ff d0                	call   eax
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	31 c0                	xor    eax,eax
c0008d72:	31 d2                	xor    edx,edx
c0008d74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008d77:	89 03                	mov    DWORD PTR [ebx],eax
c0008d79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008d7c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008d7f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008d86:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008d8d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d94:	31 c0                	xor    eax,eax
c0008d96:	83 c4 08             	add    esp,0x8
c0008d99:	5b                   	pop    ebx
c0008d9a:	c3                   	ret    

c0008d9b <src_new>:
c0008d9b:	57                   	push   edi
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008da2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008da6:	85 f6                	test   esi,esi
c0008da8:	74 73                	je     c0008e1d <src_new+0x82>
c0008daa:	85 ff                	test   edi,edi
c0008dac:	7f 08                	jg     c0008db6 <src_new+0x1b>
c0008dae:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008db4:	eb 1e                	jmp    c0008dd4 <src_new+0x39>
c0008db6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008dbc:	50                   	push   eax
c0008dbd:	50                   	push   eax
c0008dbe:	6a 3c                	push   0x3c
c0008dc0:	6a 01                	push   0x1
c0008dc2:	e8 92 6a 00 00       	call   c000f859 <calloc>
c0008dc7:	83 c4 10             	add    esp,0x10
c0008dca:	89 c3                	mov    ebx,eax
c0008dcc:	85 c0                	test   eax,eax
c0008dce:	75 10                	jne    c0008de0 <src_new+0x45>
c0008dd0:	85 f6                	test   esi,esi
c0008dd2:	75 04                	jne    c0008dd8 <src_new+0x3d>
c0008dd4:	31 db                	xor    ebx,ebx
c0008dd6:	eb 4b                	jmp    c0008e23 <src_new+0x88>
c0008dd8:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008dde:	eb 43                	jmp    c0008e23 <src_new+0x88>
c0008de0:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008de3:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008dea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008dee:	e8 1d fb ff ff       	call   c0008910 <psrc_set_converter>
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 18                	je     c0008e0f <src_new+0x74>
c0008df7:	85 f6                	test   esi,esi
c0008df9:	74 06                	je     c0008e01 <src_new+0x66>
c0008dfb:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008e01:	83 ec 0c             	sub    esp,0xc
c0008e04:	53                   	push   ebx
c0008e05:	31 db                	xor    ebx,ebx
c0008e07:	e8 2d 6a 00 00       	call   c000f839 <free>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	83 ec 0c             	sub    esp,0xc
c0008e12:	53                   	push   ebx
c0008e13:	e8 37 ff ff ff       	call   c0008d4f <src_reset>
c0008e18:	83 c4 10             	add    esp,0x10
c0008e1b:	eb 06                	jmp    c0008e23 <src_new+0x88>
c0008e1d:	85 ff                	test   edi,edi
c0008e1f:	7f 9b                	jg     c0008dbc <src_new+0x21>
c0008e21:	eb b1                	jmp    c0008dd4 <src_new+0x39>
c0008e23:	89 d8                	mov    eax,ebx
c0008e25:	5b                   	pop    ebx
c0008e26:	5e                   	pop    esi
c0008e27:	5f                   	pop    edi
c0008e28:	c3                   	ret    

c0008e29 <src_callback_new>:
c0008e29:	56                   	push   esi
c0008e2a:	53                   	push   ebx
c0008e2b:	53                   	push   ebx
c0008e2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008e34:	85 f6                	test   esi,esi
c0008e36:	75 0e                	jne    c0008e46 <src_callback_new+0x1d>
c0008e38:	31 db                	xor    ebx,ebx
c0008e3a:	85 c0                	test   eax,eax
c0008e3c:	74 47                	je     c0008e85 <src_callback_new+0x5c>
c0008e3e:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008e44:	eb 3f                	jmp    c0008e85 <src_callback_new+0x5c>
c0008e46:	85 c0                	test   eax,eax
c0008e48:	74 06                	je     c0008e50 <src_callback_new+0x27>
c0008e4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008e50:	51                   	push   ecx
c0008e51:	50                   	push   eax
c0008e52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e5a:	e8 3c ff ff ff       	call   c0008d9b <src_new>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	85 c0                	test   eax,eax
c0008e66:	74 1d                	je     c0008e85 <src_callback_new+0x5c>
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	50                   	push   eax
c0008e6c:	e8 de fe ff ff       	call   c0008d4f <src_reset>
c0008e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e75:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008e7c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008e7f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008e82:	83 c4 10             	add    esp,0x10
c0008e85:	89 d8                	mov    eax,ebx
c0008e87:	5a                   	pop    edx
c0008e88:	5b                   	pop    ebx
c0008e89:	5e                   	pop    esi
c0008e8a:	c3                   	ret    

c0008e8b <src_get_name>:
c0008e8b:	53                   	push   ebx
c0008e8c:	83 ec 14             	sub    esp,0x14
c0008e8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e93:	53                   	push   ebx
c0008e94:	e8 d0 4f 00 00       	call   c000de69 <sinc_get_name>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	75 1d                	jne    c0008ebd <src_get_name+0x32>
c0008ea0:	83 ec 0c             	sub    esp,0xc
c0008ea3:	53                   	push   ebx
c0008ea4:	e8 80 57 00 00       	call   c000e629 <zoh_get_name>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	75 0d                	jne    c0008ebd <src_get_name+0x32>
c0008eb0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eb4:	83 c4 08             	add    esp,0x8
c0008eb7:	5b                   	pop    ebx
c0008eb8:	e9 74 0b 00 00       	jmp    c0009a31 <linear_get_name>
c0008ebd:	83 c4 08             	add    esp,0x8
c0008ec0:	5b                   	pop    ebx
c0008ec1:	c3                   	ret    

c0008ec2 <src_get_description>:
c0008ec2:	53                   	push   ebx
c0008ec3:	83 ec 14             	sub    esp,0x14
c0008ec6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008eca:	53                   	push   ebx
c0008ecb:	e8 ac 4f 00 00       	call   c000de7c <sinc_get_description>
c0008ed0:	83 c4 10             	add    esp,0x10
c0008ed3:	85 c0                	test   eax,eax
c0008ed5:	75 1d                	jne    c0008ef4 <src_get_description+0x32>
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	53                   	push   ebx
c0008edb:	e8 58 57 00 00       	call   c000e638 <zoh_get_description>
c0008ee0:	83 c4 10             	add    esp,0x10
c0008ee3:	85 c0                	test   eax,eax
c0008ee5:	75 0d                	jne    c0008ef4 <src_get_description+0x32>
c0008ee7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eeb:	83 c4 08             	add    esp,0x8
c0008eee:	5b                   	pop    ebx
c0008eef:	e9 4c 0b 00 00       	jmp    c0009a40 <linear_get_description>
c0008ef4:	83 c4 08             	add    esp,0x8
c0008ef7:	5b                   	pop    ebx
c0008ef8:	c3                   	ret    

c0008ef9 <src_get_version>:
c0008ef9:	b8 e0 9b 02 c0       	mov    eax,0xc0029be0
c0008efe:	c3                   	ret    

c0008eff <src_is_valid_ratio>:
c0008eff:	83 ec 1c             	sub    esp,0x1c
c0008f02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	68 00 00 70 3f       	push   0x3f700000
c0008f17:	6a 00                	push   0x0
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	e8 d1 f7 01 00       	call   c00286f7 <__ltdf2>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	31 d2                	xor    edx,edx
c0008f2b:	85 c0                	test   eax,eax
c0008f2d:	78 1e                	js     c0008f4d <src_is_valid_ratio+0x4e>
c0008f2f:	68 00 00 70 40       	push   0x40700000
c0008f34:	6a 00                	push   0x0
c0008f36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3e:	e8 96 f7 01 00       	call   c00286d9 <__gtdf2>
c0008f43:	31 d2                	xor    edx,edx
c0008f45:	83 c4 10             	add    esp,0x10
c0008f48:	85 c0                	test   eax,eax
c0008f4a:	0f 9e c2             	setle  dl
c0008f4d:	89 d0                	mov    eax,edx
c0008f4f:	83 c4 1c             	add    esp,0x1c
c0008f52:	c3                   	ret    

c0008f53 <src_error>:
c0008f53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f57:	31 c0                	xor    eax,eax
c0008f59:	85 d2                	test   edx,edx
c0008f5b:	74 03                	je     c0008f60 <src_error+0xd>
c0008f5d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008f60:	c3                   	ret    

c0008f61 <src_strerror>:
c0008f61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f65:	31 c0                	xor    eax,eax
c0008f67:	83 fa 17             	cmp    edx,0x17
c0008f6a:	77 07                	ja     c0008f73 <src_strerror+0x12>
c0008f6c:	8b 04 95 40 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5fc0]
c0008f73:	c3                   	ret    

c0008f74 <src_simple>:
c0008f74:	56                   	push   esi
c0008f75:	53                   	push   ebx
c0008f76:	83 ec 18             	sub    esp,0x18
c0008f79:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008f81:	50                   	push   eax
c0008f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f8a:	e8 0c fe ff ff       	call   c0008d9b <src_new>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	85 c0                	test   eax,eax
c0008f94:	75 06                	jne    c0008f9c <src_simple+0x28>
c0008f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f9a:	eb 25                	jmp    c0008fc1 <src_simple+0x4d>
c0008f9c:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008fa3:	89 c3                	mov    ebx,eax
c0008fa5:	50                   	push   eax
c0008fa6:	50                   	push   eax
c0008fa7:	56                   	push   esi
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 e2 f9 ff ff       	call   c0008990 <src_process>
c0008fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008fb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fb5:	e8 9a f9 ff ff       	call   c0008954 <src_delete>
c0008fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	83 c4 14             	add    esp,0x14
c0008fc4:	5b                   	pop    ebx
c0008fc5:	5e                   	pop    esi
c0008fc6:	c3                   	ret    

c0008fc7 <src_short_to_float_array>:
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 18             	sub    esp,0x18
c0008fcb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008fcf:	85 db                	test   ebx,ebx
c0008fd1:	74 54                	je     c0009027 <src_short_to_float_array+0x60>
c0008fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fd7:	4b                   	dec    ebx
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008fdf:	50                   	push   eax
c0008fe0:	e8 a6 f4 01 00       	call   c002848b <__floatsidf>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ff0:	68 00 00 00 3f       	push   0x3f000000
c0008ff5:	6a 00                	push   0x0
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fff:	e8 24 ee 01 00       	call   c0027e28 <__muldf3>
c0009004:	59                   	pop    ecx
c0009005:	59                   	pop    ecx
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000900e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009016:	e8 e0 f6 01 00       	call   c00286fb <__truncdfsf2>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009022:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009025:	eb a8                	jmp    c0008fcf <src_short_to_float_array+0x8>
c0009027:	83 c4 18             	add    esp,0x18
c000902a:	5b                   	pop    ebx
c000902b:	c3                   	ret    

c000902c <src_float_to_short_array>:
c000902c:	56                   	push   esi
c000902d:	53                   	push   ebx
c000902e:	83 ec 14             	sub    esp,0x14
c0009031:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009035:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009039:	85 db                	test   ebx,ebx
c000903b:	0f 84 a4 00 00 00    	je     c00090e5 <src_float_to_short_array+0xb9>
c0009041:	83 ec 0c             	sub    esp,0xc
c0009044:	4b                   	dec    ebx
c0009045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009049:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000904c:	e8 ce f7 01 00       	call   c002881f <__extendsfdf2>
c0009051:	83 c4 10             	add    esp,0x10
c0009054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009058:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000905c:	68 00 00 e0 41       	push   0x41e00000
c0009061:	6a 00                	push   0x0
c0009063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000906b:	e8 b8 ed 01 00       	call   c0027e28 <__muldf3>
c0009070:	83 c4 10             	add    esp,0x10
c0009073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009077:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000907b:	68 ff ff df 41       	push   0x41dfffff
c0009080:	68 00 00 c0 ff       	push   0xffc00000
c0009085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000908d:	e8 63 f6 01 00       	call   c00286f5 <__gedf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	85 c0                	test   eax,eax
c0009097:	78 08                	js     c00090a1 <src_float_to_short_array+0x75>
c0009099:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c000909f:	eb 98                	jmp    c0009039 <src_float_to_short_array+0xd>
c00090a1:	68 00 00 e0 c1       	push   0xc1e00000
c00090a6:	6a 00                	push   0x0
c00090a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b0:	e8 44 f6 01 00       	call   c00286f9 <__ledf2>
c00090b5:	83 c4 10             	add    esp,0x10
c00090b8:	85 c0                	test   eax,eax
c00090ba:	7f 0b                	jg     c00090c7 <src_float_to_short_array+0x9b>
c00090bc:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c00090c2:	e9 72 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090c7:	50                   	push   eax
c00090c8:	50                   	push   eax
c00090c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d1:	e8 da f7 01 00       	call   c00288b0 <lrint>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	c1 f8 10             	sar    eax,0x10
c00090dc:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00090e0:	e9 54 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090e5:	83 c4 14             	add    esp,0x14
c00090e8:	5b                   	pop    ebx
c00090e9:	5e                   	pop    esi
c00090ea:	c3                   	ret    

c00090eb <src_int_to_float_array>:
c00090eb:	53                   	push   ebx
c00090ec:	83 ec 18             	sub    esp,0x18
c00090ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00090f3:	85 db                	test   ebx,ebx
c00090f5:	74 52                	je     c0009149 <src_int_to_float_array+0x5e>
c00090f7:	83 ec 0c             	sub    esp,0xc
c00090fa:	4b                   	dec    ebx
c00090fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00090ff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0009102:	e8 84 f3 01 00       	call   c002848b <__floatsidf>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000910e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009112:	68 00 00 00 3e       	push   0x3e000000
c0009117:	6a 00                	push   0x0
c0009119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009121:	e8 02 ed 01 00       	call   c0027e28 <__muldf3>
c0009126:	59                   	pop    ecx
c0009127:	59                   	pop    ecx
c0009128:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000912c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	e8 be f5 01 00       	call   c00286fb <__truncdfsf2>
c000913d:	83 c4 10             	add    esp,0x10
c0009140:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009144:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009147:	eb aa                	jmp    c00090f3 <src_int_to_float_array+0x8>
c0009149:	83 c4 18             	add    esp,0x18
c000914c:	5b                   	pop    ebx
c000914d:	c3                   	ret    

c000914e <src_float_to_int_array>:
c000914e:	56                   	push   esi
c000914f:	53                   	push   ebx
c0009150:	83 ec 14             	sub    esp,0x14
c0009153:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009157:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000915b:	85 db                	test   ebx,ebx
c000915d:	0f 84 a2 00 00 00    	je     c0009205 <src_float_to_int_array+0xb7>
c0009163:	83 ec 0c             	sub    esp,0xc
c0009166:	4b                   	dec    ebx
c0009167:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000916b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000916e:	e8 ac f6 01 00       	call   c002881f <__extendsfdf2>
c0009173:	83 c4 10             	add    esp,0x10
c0009176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000917a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000917e:	68 00 00 e0 41       	push   0x41e00000
c0009183:	6a 00                	push   0x0
c0009185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000918d:	e8 96 ec 01 00       	call   c0027e28 <__muldf3>
c0009192:	83 c4 10             	add    esp,0x10
c0009195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000919d:	68 ff ff df 41       	push   0x41dfffff
c00091a2:	68 00 00 c0 ff       	push   0xffc00000
c00091a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091af:	e8 41 f5 01 00       	call   c00286f5 <__gedf2>
c00091b4:	83 c4 10             	add    esp,0x10
c00091b7:	85 c0                	test   eax,eax
c00091b9:	78 09                	js     c00091c4 <src_float_to_int_array+0x76>
c00091bb:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c00091c2:	eb 97                	jmp    c000915b <src_float_to_int_array+0xd>
c00091c4:	68 00 00 e0 c1       	push   0xc1e00000
c00091c9:	6a 00                	push   0x0
c00091cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d3:	e8 21 f5 01 00       	call   c00286f9 <__ledf2>
c00091d8:	83 c4 10             	add    esp,0x10
c00091db:	85 c0                	test   eax,eax
c00091dd:	7f 0c                	jg     c00091eb <src_float_to_int_array+0x9d>
c00091df:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c00091e6:	e9 70 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c00091eb:	50                   	push   eax
c00091ec:	50                   	push   eax
c00091ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f5:	e8 b6 f6 01 00       	call   c00288b0 <lrint>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009200:	e9 56 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c0009205:	83 c4 14             	add    esp,0x14
c0009208:	5b                   	pop    ebx
c0009209:	5e                   	pop    esi
c000920a:	c3                   	ret    

c000920b <linear_vari_process>:
c000920b:	55                   	push   ebp
c000920c:	31 d2                	xor    edx,edx
c000920e:	57                   	push   edi
c000920f:	56                   	push   esi
c0009210:	53                   	push   ebx
c0009211:	83 ec 3c             	sub    esp,0x3c
c0009214:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009218:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000921c:	0f 8e d3 07 00 00    	jle    c00099f5 <linear_vari_process+0x7ea>
c0009222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009226:	ba 05 00 00 00       	mov    edx,0x5
c000922b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000922e:	85 db                	test   ebx,ebx
c0009230:	0f 84 bf 07 00 00    	je     c00099f5 <linear_vari_process+0x7ea>
c0009236:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009239:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000923d:	74 19                	je     c0009258 <linear_vari_process+0x4d>
c000923f:	31 d2                	xor    edx,edx
c0009241:	39 c2                	cmp    edx,eax
c0009243:	7d 0c                	jge    c0009251 <linear_vari_process+0x46>
c0009245:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009247:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000924a:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000924e:	42                   	inc    edx
c000924f:	eb f0                	jmp    c0009241 <linear_vari_process+0x36>
c0009251:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009258:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000925b:	0f af d0             	imul   edx,eax
c000925e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009261:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009265:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000926c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000926f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009276:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000927a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000927d:	8b 00                	mov    eax,DWORD PTR [eax]
c000927f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009287:	68 00 00 70 3f       	push   0x3f700000
c000928c:	6a 00                	push   0x0
c000928e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009296:	e8 5c f4 01 00       	call   c00286f7 <__ltdf2>
c000929b:	83 c4 10             	add    esp,0x10
c000929e:	ba 16 00 00 00       	mov    edx,0x16
c00092a3:	85 c0                	test   eax,eax
c00092a5:	0f 88 4a 07 00 00    	js     c00099f5 <linear_vari_process+0x7ea>
c00092ab:	68 00 00 70 40       	push   0x40700000
c00092b0:	6a 00                	push   0x0
c00092b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092ba:	e8 1a f4 01 00       	call   c00286d9 <__gtdf2>
c00092bf:	83 c4 10             	add    esp,0x10
c00092c2:	ba 16 00 00 00       	mov    edx,0x16
c00092c7:	85 c0                	test   eax,eax
c00092c9:	0f 8f 26 07 00 00    	jg     c00099f5 <linear_vari_process+0x7ea>
c00092cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00092d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00092d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e1:	68 00 00 f0 3f       	push   0x3ff00000
c00092e6:	6a 00                	push   0x0
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f0:	e8 02 f4 01 00       	call   c00286f7 <__ltdf2>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	85 c0                	test   eax,eax
c00092fa:	0f 89 89 02 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c0009300:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009303:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009306:	0f 8d 7d 02 00 00    	jge    c0009589 <linear_vari_process+0x37e>
c000930c:	83 ec 0c             	sub    esp,0xc
c000930f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009312:	e8 74 f1 01 00       	call   c002848b <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 04 24             	mov    DWORD PTR [esp],eax
c000931d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009321:	68 00 00 f0 3f       	push   0x3ff00000
c0009326:	6a 00                	push   0x0
c0009328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	e8 76 e4 01 00       	call   c00277ab <__adddf3>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009340:	52                   	push   edx
c0009341:	50                   	push   eax
c0009342:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000934a:	e8 d9 ea 01 00       	call   c0027e28 <__muldf3>
c000934f:	5d                   	pop    ebp
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009358:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000935b:	e8 2b f1 01 00       	call   c002848b <__floatsidf>
c0009360:	83 c4 10             	add    esp,0x10
c0009363:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009367:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000936b:	52                   	push   edx
c000936c:	50                   	push   eax
c000936d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009371:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009375:	e8 31 e4 01 00       	call   c00277ab <__adddf3>
c000937a:	59                   	pop    ecx
c000937b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000937f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009383:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009386:	e8 00 f1 01 00       	call   c002848b <__floatsidf>
c000938b:	83 c4 10             	add    esp,0x10
c000938e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009392:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009396:	52                   	push   edx
c0009397:	50                   	push   eax
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a0:	e8 50 f3 01 00       	call   c00286f5 <__gedf2>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	85 c0                	test   eax,eax
c00093aa:	0f 89 d9 01 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c00093b0:	85 ff                	test   edi,edi
c00093b2:	0f 8e f4 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c00093b8:	83 ec 10             	sub    esp,0x10
c00093bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00093be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00093c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00093c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00093c8:	ff 30                	push   DWORD PTR [eax]
c00093ca:	e8 2d ea 01 00       	call   c0027dfc <__subdf3>
c00093cf:	83 c4 18             	add    esp,0x18
c00093d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093da:	52                   	push   edx
c00093db:	50                   	push   eax
c00093dc:	e8 af f4 01 00       	call   c0028890 <fabs>
c00093e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00093f1:	68 23 42 92 0c       	push   0xc924223
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fe:	e8 d6 f2 01 00       	call   c00286d9 <__gtdf2>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	85 c0                	test   eax,eax
c0009408:	0f 8e 9e 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c000940e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009412:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009415:	8b 00                	mov    eax,DWORD PTR [eax]
c0009417:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000941b:	89 04 24             	mov    DWORD PTR [esp],eax
c000941e:	52                   	push   edx
c000941f:	50                   	push   eax
c0009420:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009423:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009426:	e8 d1 e9 01 00       	call   c0027dfc <__subdf3>
c000942b:	59                   	pop    ecx
c000942c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009430:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009434:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009437:	e8 4f f0 01 00       	call   c002848b <__floatsidf>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009443:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009447:	52                   	push   edx
c0009448:	50                   	push   eax
c0009449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009451:	e8 d2 e9 01 00       	call   c0027e28 <__muldf3>
c0009456:	5f                   	pop    edi
c0009457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000945b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000945f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009462:	e8 24 f0 01 00       	call   c002848b <__floatsidf>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	52                   	push   edx
c0009473:	50                   	push   eax
c0009474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947c:	e8 8b ec 01 00       	call   c002810c <__divdf3>
c0009481:	83 c4 10             	add    esp,0x10
c0009484:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009488:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000948c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009490:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949c:	e8 0a e3 01 00       	call   c00277ab <__adddf3>
c00094a1:	83 c4 10             	add    esp,0x10
c00094a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ac:	31 ff                	xor    edi,edi
c00094ae:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00094b1:	0f 8e 9d 00 00 00    	jle    c0009554 <linear_vari_process+0x349>
c00094b7:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00094ba:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00094be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00094c1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00094c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00094c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00094ca:	52                   	push   edx
c00094cb:	52                   	push   edx
c00094cc:	55                   	push   ebp
c00094cd:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00094d0:	47                   	inc    edi
c00094d1:	e8 6a dc 01 00       	call   c0027140 <__subsf3>
c00094d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00094d9:	e8 41 f3 01 00       	call   c002881f <__extendsfdf2>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f9:	e8 2a e9 01 00       	call   c0027e28 <__muldf3>
c00094fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009509:	e8 11 f3 01 00       	call   c002881f <__extendsfdf2>
c000950e:	83 c4 10             	add    esp,0x10
c0009511:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009515:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009519:	52                   	push   edx
c000951a:	50                   	push   eax
c000951b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000951f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009523:	e8 83 e2 01 00       	call   c00277ab <__adddf3>
c0009528:	59                   	pop    ecx
c0009529:	5d                   	pop    ebp
c000952a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000952e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009532:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	e8 bc f1 01 00       	call   c00286fb <__truncdfsf2>
c000953f:	83 c4 10             	add    esp,0x10
c0009542:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009545:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009549:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000954c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000954f:	e9 5a ff ff ff       	jmp    c00094ae <linear_vari_process+0x2a3>
c0009554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000955c:	68 00 00 f0 3f       	push   0x3ff00000
c0009561:	6a 00                	push   0x0
c0009563:	e8 a4 eb 01 00       	call   c002810c <__divdf3>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	89 04 24             	mov    DWORD PTR [esp],eax
c000956e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000957c:	e8 2a e2 01 00       	call   c00277ab <__adddf3>
c0009581:	83 c4 10             	add    esp,0x10
c0009584:	e9 50 fd ff ff       	jmp    c00092d9 <linear_vari_process+0xce>
c0009589:	50                   	push   eax
c000958a:	50                   	push   eax
c000958b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000958f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009593:	e8 18 f3 01 00       	call   c00288b0 <lrint>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	50                   	push   eax
c000959c:	e8 ea ee 01 00       	call   c002848b <__floatsidf>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095ac:	52                   	push   edx
c00095ad:	50                   	push   eax
c00095ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b6:	e8 41 e8 01 00       	call   c0027dfc <__subdf3>
c00095bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00095bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00095c3:	83 c4 20             	add    esp,0x20
c00095c6:	6a 00                	push   0x0
c00095c8:	6a 00                	push   0x0
c00095ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095d2:	e8 20 f1 01 00       	call   c00286f7 <__ltdf2>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	85 c0                	test   eax,eax
c00095dc:	79 1e                	jns    c00095fc <linear_vari_process+0x3f1>
c00095de:	68 00 00 f0 3f       	push   0x3ff00000
c00095e3:	6a 00                	push   0x0
c00095e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ed:	e8 b9 e1 01 00       	call   c00277ab <__adddf3>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00095fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00095ff:	83 ec 10             	sub    esp,0x10
c0009602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000960a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	e8 e5 e7 01 00       	call   c0027dfc <__subdf3>
c0009617:	83 c4 18             	add    esp,0x18
c000961a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000961e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009622:	52                   	push   edx
c0009623:	50                   	push   eax
c0009624:	e8 87 f2 01 00       	call   c00288b0 <lrint>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	0f af f8             	imul   edi,eax
c000962f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009632:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009635:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009638:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000963b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000963e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009642:	0f 8d 13 03 00 00    	jge    c000995b <linear_vari_process+0x750>
c0009648:	83 ec 0c             	sub    esp,0xc
c000964b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000964e:	e8 38 ee 01 00       	call   c002848b <__floatsidf>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000965a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000965e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009662:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 b5 e7 01 00       	call   c0027e28 <__muldf3>
c0009673:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000967a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000967e:	e8 08 ee 01 00       	call   c002848b <__floatsidf>
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000968a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000968e:	52                   	push   edx
c000968f:	50                   	push   eax
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	e8 0e e1 01 00       	call   c00277ab <__adddf3>
c000969d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00096a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096a8:	e8 de ed 01 00       	call   c002848b <__floatsidf>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096b8:	52                   	push   edx
c00096b9:	50                   	push   eax
c00096ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c2:	e8 30 f0 01 00       	call   c00286f7 <__ltdf2>
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	85 c0                	test   eax,eax
c00096cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d0:	0f 89 85 02 00 00    	jns    c000995b <linear_vari_process+0x750>
c00096d6:	85 c9                	test   ecx,ecx
c00096d8:	0f 8e f5 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c00096de:	83 ec 10             	sub    esp,0x10
c00096e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00096e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00096e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00096eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00096ee:	ff 30                	push   DWORD PTR [eax]
c00096f0:	e8 07 e7 01 00       	call   c0027dfc <__subdf3>
c00096f5:	83 c4 18             	add    esp,0x18
c00096f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009700:	52                   	push   edx
c0009701:	50                   	push   eax
c0009702:	e8 89 f1 01 00       	call   c0028890 <fabs>
c0009707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000970b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009717:	68 23 42 92 0c       	push   0xc924223
c000971c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009724:	e8 b0 ef 01 00       	call   c00286d9 <__gtdf2>
c0009729:	83 c4 10             	add    esp,0x10
c000972c:	85 c0                	test   eax,eax
c000972e:	0f 8e 9f 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c0009734:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009738:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000973b:	8b 00                	mov    eax,DWORD PTR [eax]
c000973d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000974a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000974d:	e8 aa e6 01 00       	call   c0027dfc <__subdf3>
c0009752:	5f                   	pop    edi
c0009753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009757:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000975b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000975e:	e8 28 ed 01 00       	call   c002848b <__floatsidf>
c0009763:	83 c4 10             	add    esp,0x10
c0009766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000976a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000976e:	52                   	push   edx
c000976f:	50                   	push   eax
c0009770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009778:	e8 ab e6 01 00       	call   c0027e28 <__muldf3>
c000977d:	5d                   	pop    ebp
c000977e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009782:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009786:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009789:	e8 fd ec 01 00       	call   c002848b <__floatsidf>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009795:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009799:	52                   	push   edx
c000979a:	50                   	push   eax
c000979b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097a3:	e8 64 e9 01 00       	call   c002810c <__divdf3>
c00097a8:	83 c4 10             	add    esp,0x10
c00097ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097c3:	e8 e3 df 01 00       	call   c00277ab <__adddf3>
c00097c8:	83 c4 10             	add    esp,0x10
c00097cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097d3:	31 ff                	xor    edi,edi
c00097d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00097d8:	39 f8                	cmp    eax,edi
c00097da:	0f 8e ac 00 00 00    	jle    c000988c <linear_vari_process+0x681>
c00097e0:	8b 16                	mov    edx,DWORD PTR [esi]
c00097e2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00097e5:	29 c1                	sub    ecx,eax
c00097e7:	89 c8                	mov    eax,ecx
c00097e9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00097ec:	01 f8                	add    eax,edi
c00097ee:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00097f2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00097f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097ff:	51                   	push   ecx
c0009800:	01 f8                	add    eax,edi
c0009802:	51                   	push   ecx
c0009803:	47                   	inc    edi
c0009804:	55                   	push   ebp
c0009805:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009808:	e8 33 d9 01 00       	call   c0027140 <__subsf3>
c000980d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009810:	e8 0a f0 01 00       	call   c002881f <__extendsfdf2>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000981c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009820:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009824:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000982c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009830:	e8 f3 e5 01 00       	call   c0027e28 <__muldf3>
c0009835:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000983c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009840:	e8 da ef 01 00       	call   c002881f <__extendsfdf2>
c0009845:	83 c4 10             	add    esp,0x10
c0009848:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000984c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009850:	52                   	push   edx
c0009851:	50                   	push   eax
c0009852:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009856:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000985a:	e8 4c df 01 00       	call   c00277ab <__adddf3>
c000985f:	5d                   	pop    ebp
c0009860:	59                   	pop    ecx
c0009861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009865:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000986d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009871:	e8 85 ee 01 00       	call   c00286fb <__truncdfsf2>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000987d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009881:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009884:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009887:	e9 49 ff ff ff       	jmp    c00097d5 <linear_vari_process+0x5ca>
c000988c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009894:	68 00 00 f0 3f       	push   0x3ff00000
c0009899:	6a 00                	push   0x0
c000989b:	e8 6c e8 01 00       	call   c002810c <__divdf3>
c00098a0:	83 c4 10             	add    esp,0x10
c00098a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098bb:	e8 eb de 01 00       	call   c00277ab <__adddf3>
c00098c0:	59                   	pop    ecx
c00098c1:	5f                   	pop    edi
c00098c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d2:	e8 d9 ef 01 00       	call   c00288b0 <lrint>
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	50                   	push   eax
c00098db:	e8 ab eb 01 00       	call   c002848b <__floatsidf>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098eb:	52                   	push   edx
c00098ec:	50                   	push   eax
c00098ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f5:	e8 02 e5 01 00       	call   c0027dfc <__subdf3>
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	83 c4 20             	add    esp,0x20
c0009905:	6a 00                	push   0x0
c0009907:	6a 00                	push   0x0
c0009909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000990d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009911:	e8 e1 ed 01 00       	call   c00286f7 <__ltdf2>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	85 c0                	test   eax,eax
c000991b:	79 1e                	jns    c000993b <linear_vari_process+0x730>
c000991d:	68 00 00 f0 3f       	push   0x3ff00000
c0009922:	6a 00                	push   0x0
c0009924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000992c:	e8 7a de 01 00       	call   c00277ab <__adddf3>
c0009931:	83 c4 10             	add    esp,0x10
c0009934:	89 04 24             	mov    DWORD PTR [esp],eax
c0009937:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000993b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000993e:	83 ec 10             	sub    esp,0x10
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009951:	e8 a6 e4 01 00       	call   c0027dfc <__subdf3>
c0009956:	e9 bc fc ff ff       	jmp    c0009617 <linear_vari_process+0x40c>
c000995b:	39 fd                	cmp    ebp,edi
c000995d:	7d 38                	jge    c0009997 <linear_vari_process+0x78c>
c000995f:	83 ec 0c             	sub    esp,0xc
c0009962:	89 f8                	mov    eax,edi
c0009964:	29 e8                	sub    eax,ebp
c0009966:	99                   	cdq    
c0009967:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000996a:	50                   	push   eax
c000996b:	e8 1b eb 01 00       	call   c002848b <__floatsidf>
c0009970:	83 c4 10             	add    esp,0x10
c0009973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000997b:	52                   	push   edx
c000997c:	50                   	push   eax
c000997d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009981:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009985:	e8 21 de 01 00       	call   c00277ab <__adddf3>
c000998a:	83 c4 10             	add    esp,0x10
c000998d:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009990:	89 04 24             	mov    DWORD PTR [esp],eax
c0009993:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009997:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000999b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000999e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099a2:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00099a5:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00099a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099ab:	85 c0                	test   eax,eax
c00099ad:	7f 29                	jg     c00099d8 <linear_vari_process+0x7cd>
c00099af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00099b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00099bb:	89 01                	mov    DWORD PTR [ecx],eax
c00099bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00099c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099c3:	99                   	cdq    
c00099c4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099c7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00099ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099cd:	99                   	cdq    
c00099ce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099d1:	31 d2                	xor    edx,edx
c00099d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00099d6:	eb 1d                	jmp    c00099f5 <linear_vari_process+0x7ea>
c00099d8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00099db:	31 d2                	xor    edx,edx
c00099dd:	29 c8                	sub    eax,ecx
c00099df:	c1 e0 02             	shl    eax,0x2
c00099e2:	39 d1                	cmp    ecx,edx
c00099e4:	7e c9                	jle    c00099af <linear_vari_process+0x7a4>
c00099e6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00099e8:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00099eb:	83 c0 04             	add    eax,0x4
c00099ee:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00099f2:	42                   	inc    edx
c00099f3:	eb ed                	jmp    c00099e2 <linear_vari_process+0x7d7>
c00099f5:	83 c4 3c             	add    esp,0x3c
c00099f8:	89 d0                	mov    eax,edx
c00099fa:	5b                   	pop    ebx
c00099fb:	5e                   	pop    esi
c00099fc:	5f                   	pop    edi
c00099fd:	5d                   	pop    ebp
c00099fe:	c3                   	ret    

c00099ff <linear_reset>:
c00099ff:	83 ec 0c             	sub    esp,0xc
c0009a02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a06:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009a09:	85 c0                	test   eax,eax
c0009a0b:	74 20                	je     c0009a2d <linear_reset+0x2e>
c0009a0d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009a10:	83 c0 1c             	add    eax,0x1c
c0009a13:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009a16:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009a1d:	c1 e2 02             	shl    edx,0x2
c0009a20:	51                   	push   ecx
c0009a21:	52                   	push   edx
c0009a22:	6a 00                	push   0x0
c0009a24:	50                   	push   eax
c0009a25:	e8 26 6d ff ff       	call   c0000750 <memset>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	83 c4 0c             	add    esp,0xc
c0009a30:	c3                   	ret    

c0009a31 <linear_get_name>:
c0009a31:	31 c0                	xor    eax,eax
c0009a33:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a38:	75 05                	jne    c0009a3f <linear_get_name+0xe>
c0009a3a:	b8 a0 a0 02 c0       	mov    eax,0xc002a0a0
c0009a3f:	c3                   	ret    

c0009a40 <linear_get_description>:
c0009a40:	31 c0                	xor    eax,eax
c0009a42:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a47:	75 05                	jne    c0009a4e <linear_get_description+0xe>
c0009a49:	b8 b4 a0 02 c0       	mov    eax,0xc002a0b4
c0009a4e:	c3                   	ret    

c0009a4f <linear_set_converter>:
c0009a4f:	53                   	push   ebx
c0009a50:	b8 0a 00 00 00       	mov    eax,0xa
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009a5c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009a61:	75 6e                	jne    c0009ad1 <linear_set_converter+0x82>
c0009a63:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009a66:	85 c0                	test   eax,eax
c0009a68:	74 13                	je     c0009a7d <linear_set_converter+0x2e>
c0009a6a:	83 ec 0c             	sub    esp,0xc
c0009a6d:	50                   	push   eax
c0009a6e:	e8 c6 5d 00 00       	call   c000f839 <free>
c0009a73:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009a7a:	83 c4 10             	add    esp,0x10
c0009a7d:	50                   	push   eax
c0009a7e:	50                   	push   eax
c0009a7f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009a82:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009a89:	50                   	push   eax
c0009a8a:	6a 01                	push   0x1
c0009a8c:	e8 c8 5d 00 00       	call   c000f859 <calloc>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 c2                	mov    edx,eax
c0009a96:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009a99:	85 d2                	test   edx,edx
c0009a9b:	b8 01 00 00 00       	mov    eax,0x1
c0009aa0:	74 2f                	je     c0009ad1 <linear_set_converter+0x82>
c0009aa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009aab:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009ab1:	c7 43 24 0b 92 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000920b
c0009ab8:	c7 43 20 0b 92 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000920b
c0009abf:	c7 43 28 ff 99 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00099ff
c0009ac6:	53                   	push   ebx
c0009ac7:	e8 33 ff ff ff       	call   c00099ff <linear_reset>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	31 c0                	xor    eax,eax
c0009ad1:	83 c4 08             	add    esp,0x8
c0009ad4:	5b                   	pop    ebx
c0009ad5:	c3                   	ret    

c0009ad6 <int_to_fp>:
c0009ad6:	c1 e0 0c             	shl    eax,0xc
c0009ad9:	c3                   	ret    

c0009ada <fp_to_int>:
c0009ada:	c1 f8 0c             	sar    eax,0xc
c0009add:	c3                   	ret    

c0009ade <fp_fraction_part>:
c0009ade:	25 ff 0f 00 00       	and    eax,0xfff
c0009ae3:	c3                   	ret    

c0009ae4 <fp_to_double>:
c0009ae4:	83 ec 1c             	sub    esp,0x1c
c0009ae7:	e8 f2 ff ff ff       	call   c0009ade <fp_fraction_part>
c0009aec:	83 ec 0c             	sub    esp,0xc
c0009aef:	50                   	push   eax
c0009af0:	e8 96 e9 01 00       	call   c002848b <__floatsidf>
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009afc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b00:	68 00 00 30 3f       	push   0x3f300000
c0009b05:	6a 00                	push   0x0
c0009b07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0f:	e8 14 e3 01 00       	call   c0027e28 <__muldf3>
c0009b14:	83 c4 2c             	add    esp,0x2c
c0009b17:	c3                   	ret    

c0009b18 <calc_output_single>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	89 c6                	mov    esi,eax
c0009b1d:	53                   	push   ebx
c0009b1e:	89 d3                	mov    ebx,edx
c0009b20:	83 ec 4c             	sub    esp,0x4c
c0009b23:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009b27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009b2a:	e8 a7 ff ff ff       	call   c0009ad6 <int_to_fp>
c0009b2f:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009b32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b36:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009b3a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009b3e:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009b41:	99                   	cdq    
c0009b42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009b4a:	f7 fb                	idiv   ebx
c0009b4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009b54:	89 da                	mov    edx,ebx
c0009b56:	0f af d0             	imul   edx,eax
c0009b59:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009b61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b65:	29 c2                	sub    edx,eax
c0009b67:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b6e:	83 c5 04             	add    ebp,0x4
c0009b71:	e8 6e ff ff ff       	call   c0009ae4 <fp_to_double>
c0009b76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b82:	e8 53 ff ff ff       	call   c0009ada <fp_to_int>
c0009b87:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009b8a:	52                   	push   edx
c0009b8b:	52                   	push   edx
c0009b8c:	51                   	push   ecx
c0009b8d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009b91:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009b95:	e8 a6 d5 01 00       	call   c0027140 <__subsf3>
c0009b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b9d:	e8 7d ec 01 00       	call   c002881f <__extendsfdf2>
c0009ba2:	83 c4 10             	add    esp,0x10
c0009ba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bbd:	e8 66 e2 01 00       	call   c0027e28 <__muldf3>
c0009bc2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009bcd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bd1:	e8 49 ec 01 00       	call   c002881f <__extendsfdf2>
c0009bd6:	83 c4 10             	add    esp,0x10
c0009bd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009be1:	52                   	push   edx
c0009be2:	50                   	push   eax
c0009be3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009beb:	e8 bb db 01 00       	call   c00277ab <__adddf3>
c0009bf0:	59                   	pop    ecx
c0009bf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009bf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009bf9:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009bff:	e8 1b ec 01 00       	call   c002881f <__extendsfdf2>
c0009c04:	83 c4 10             	add    esp,0x10
c0009c07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c0f:	52                   	push   edx
c0009c10:	50                   	push   eax
c0009c11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c19:	e8 0a e2 01 00       	call   c0027e28 <__muldf3>
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c29:	52                   	push   edx
c0009c2a:	50                   	push   eax
c0009c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c33:	e8 73 db 01 00       	call   c00277ab <__adddf3>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c43:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009c47:	0f 89 1d ff ff ff    	jns    c0009b6a <calc_output_single+0x52>
c0009c4d:	89 d9                	mov    ecx,ebx
c0009c4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009c53:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009c57:	89 dd                	mov    ebp,ebx
c0009c59:	29 c8                	sub    eax,ecx
c0009c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009c63:	99                   	cdq    
c0009c64:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c6c:	f7 fb                	idiv   ebx
c0009c6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c72:	0f af e8             	imul   ebp,eax
c0009c75:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009c79:	01 cd                	add    ebp,ecx
c0009c7b:	8d 34 86             	lea    esi,[esi+eax*4]
c0009c7e:	89 e8                	mov    eax,ebp
c0009c80:	83 ee 04             	sub    esi,0x4
c0009c83:	e8 5c fe ff ff       	call   c0009ae4 <fp_to_double>
c0009c88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c90:	89 e8                	mov    eax,ebp
c0009c92:	29 dd                	sub    ebp,ebx
c0009c94:	e8 41 fe ff ff       	call   c0009ada <fp_to_int>
c0009c99:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009c9c:	52                   	push   edx
c0009c9d:	52                   	push   edx
c0009c9e:	51                   	push   ecx
c0009c9f:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009ca3:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ca7:	e8 94 d4 01 00       	call   c0027140 <__subsf3>
c0009cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0009caf:	e8 6b eb 01 00       	call   c002881f <__extendsfdf2>
c0009cb4:	83 c4 10             	add    esp,0x10
c0009cb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccf:	e8 54 e1 01 00       	call   c0027e28 <__muldf3>
c0009cd4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009cd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cdc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009cdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ce3:	e8 37 eb 01 00       	call   c002881f <__extendsfdf2>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf3:	52                   	push   edx
c0009cf4:	50                   	push   eax
c0009cf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cfd:	e8 a9 da 01 00       	call   c00277ab <__adddf3>
c0009d02:	59                   	pop    ecx
c0009d03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d07:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009d0b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009d11:	e8 09 eb 01 00       	call   c002881f <__extendsfdf2>
c0009d16:	83 c4 10             	add    esp,0x10
c0009d19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d21:	52                   	push   edx
c0009d22:	50                   	push   eax
c0009d23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d2b:	e8 f8 e0 01 00       	call   c0027e28 <__muldf3>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d3b:	52                   	push   edx
c0009d3c:	50                   	push   eax
c0009d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d45:	e8 61 da 01 00       	call   c00277ab <__adddf3>
c0009d4a:	83 c4 10             	add    esp,0x10
c0009d4d:	85 ed                	test   ebp,ebp
c0009d4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d57:	0f 8f 21 ff ff ff    	jg     c0009c7e <calc_output_single+0x166>
c0009d5d:	52                   	push   edx
c0009d5e:	50                   	push   eax
c0009d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d67:	e8 3f da 01 00       	call   c00277ab <__adddf3>
c0009d6c:	83 c4 5c             	add    esp,0x5c
c0009d6f:	5b                   	pop    ebx
c0009d70:	5e                   	pop    esi
c0009d71:	5f                   	pop    edi
c0009d72:	5d                   	pop    ebp
c0009d73:	c3                   	ret    

c0009d74 <calc_output_stereo>:
c0009d74:	55                   	push   ebp
c0009d75:	89 cd                	mov    ebp,ecx
c0009d77:	57                   	push   edi
c0009d78:	56                   	push   esi
c0009d79:	53                   	push   ebx
c0009d7a:	89 c3                	mov    ebx,eax
c0009d7c:	83 ec 6c             	sub    esp,0x6c
c0009d7f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d83:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009d8a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009d91:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d95:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d99:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009d9c:	e8 35 fd ff ff       	call   c0009ad6 <int_to_fp>
c0009da1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009da9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dad:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009db5:	29 c8                	sub    eax,ecx
c0009db7:	99                   	cdq    
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dc0:	0f af d0             	imul   edx,eax
c0009dc3:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009dc6:	31 d2                	xor    edx,edx
c0009dc8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009dcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009dd0:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009dd3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009dd7:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009dda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009dde:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009de2:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009de5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009dea:	29 c1                	sub    ecx,eax
c0009dec:	31 c0                	xor    eax,eax
c0009dee:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009df1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009df9:	83 c7 08             	add    edi,0x8
c0009dfc:	e8 e3 fc ff ff       	call   c0009ae4 <fp_to_double>
c0009e01:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009e05:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009e09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e0d:	e8 c8 fc ff ff       	call   c0009ada <fp_to_int>
c0009e12:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009e15:	52                   	push   edx
c0009e16:	52                   	push   edx
c0009e17:	51                   	push   ecx
c0009e18:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009e1c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009e20:	e8 1b d3 01 00       	call   c0027140 <__subsf3>
c0009e25:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e28:	e8 f2 e9 01 00       	call   c002881f <__extendsfdf2>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e40:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e48:	e8 db df 01 00       	call   c0027e28 <__muldf3>
c0009e4d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009e51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009e55:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e58:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009e5c:	e8 be e9 01 00       	call   c002881f <__extendsfdf2>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e68:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e6c:	52                   	push   edx
c0009e6d:	50                   	push   eax
c0009e6e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e76:	e8 30 d9 01 00       	call   c00277ab <__adddf3>
c0009e7b:	59                   	pop    ecx
c0009e7c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009e80:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009e84:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009e8a:	e8 90 e9 01 00       	call   c002881f <__extendsfdf2>
c0009e8f:	83 c4 10             	add    esp,0x10
c0009e92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ea2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ea6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009eaa:	e8 79 df 01 00       	call   c0027e28 <__muldf3>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009eb6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009eba:	52                   	push   edx
c0009ebb:	50                   	push   eax
c0009ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec4:	e8 e2 d8 01 00       	call   c00277ab <__adddf3>
c0009ec9:	59                   	pop    ecx
c0009eca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ece:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ed2:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ed8:	e8 42 e9 01 00       	call   c002881f <__extendsfdf2>
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ee4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009eec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ef0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef8:	e8 2b df 01 00       	call   c0027e28 <__muldf3>
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009f04:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009f08:	52                   	push   edx
c0009f09:	50                   	push   eax
c0009f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f12:	e8 94 d8 01 00       	call   c00277ab <__adddf3>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f22:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009f26:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009f2a:	0f 89 c5 fe ff ff    	jns    c0009df5 <calc_output_stereo+0x81>
c0009f30:	29 e9                	sub    ecx,ebp
c0009f32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009f3a:	29 c8                	sub    eax,ecx
c0009f3c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009f44:	99                   	cdq    
c0009f45:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f49:	31 d2                	xor    edx,edx
c0009f4b:	0f af f8             	imul   edi,eax
c0009f4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f52:	40                   	inc    eax
c0009f53:	01 cf                	add    edi,ecx
c0009f55:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009f5a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009f5e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009f66:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009f69:	31 c0                	xor    eax,eax
c0009f6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6f:	89 f8                	mov    eax,edi
c0009f71:	83 eb 08             	sub    ebx,0x8
c0009f74:	e8 6b fb ff ff       	call   c0009ae4 <fp_to_double>
c0009f79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f81:	89 f8                	mov    eax,edi
c0009f83:	e8 52 fb ff ff       	call   c0009ada <fp_to_int>
c0009f88:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009f8b:	52                   	push   edx
c0009f8c:	52                   	push   edx
c0009f8d:	55                   	push   ebp
c0009f8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009f92:	e8 a9 d1 01 00       	call   c0027140 <__subsf3>
c0009f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f9a:	e8 80 e8 01 00       	call   c002881f <__extendsfdf2>
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fa6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009faa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fba:	e8 69 de 01 00       	call   c0027e28 <__muldf3>
c0009fbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009fc2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fc6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fca:	e8 50 e8 01 00       	call   c002881f <__extendsfdf2>
c0009fcf:	83 c4 10             	add    esp,0x10
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	52                   	push   edx
c0009fdb:	50                   	push   eax
c0009fdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe4:	e8 c2 d7 01 00       	call   c00277ab <__adddf3>
c0009fe9:	59                   	pop    ecx
c0009fea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009fee:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ff2:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ff8:	e8 22 e8 01 00       	call   c002881f <__extendsfdf2>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a004:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a008:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a010:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a014:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a018:	e8 0b de 01 00       	call   c0027e28 <__muldf3>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a024:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a028:	52                   	push   edx
c000a029:	50                   	push   eax
c000a02a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a032:	e8 74 d7 01 00       	call   c00277ab <__adddf3>
c000a037:	5d                   	pop    ebp
c000a038:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a03c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a040:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a046:	e8 d4 e7 01 00       	call   c002881f <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a052:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a056:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a062:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a066:	e8 bd dd 01 00       	call   c0027e28 <__muldf3>
c000a06b:	83 c4 10             	add    esp,0x10
c000a06e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a072:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a076:	52                   	push   edx
c000a077:	50                   	push   eax
c000a078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a080:	e8 26 d7 01 00       	call   c00277ab <__adddf3>
c000a085:	83 c4 10             	add    esp,0x10
c000a088:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c000a08c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a090:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a094:	85 ff                	test   edi,edi
c000a096:	0f 8f d3 fe ff ff    	jg     c0009f6f <calc_output_stereo+0x1fb>
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	e8 fa d6 01 00       	call   c00277ab <__adddf3>
c000a0b1:	83 c4 10             	add    esp,0x10
c000a0b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a0b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0cc:	e8 57 dd 01 00       	call   c0027e28 <__muldf3>
c000a0d1:	59                   	pop    ecx
c000a0d2:	5b                   	pop    ebx
c000a0d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a0d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0e3:	e8 13 e6 01 00       	call   c00286fb <__truncdfsf2>
c000a0e8:	83 c4 10             	add    esp,0x10
c000a0eb:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c000a0f2:	89 03                	mov    DWORD PTR [ebx],eax
c000a0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a104:	e8 a2 d6 01 00       	call   c00277ab <__adddf3>
c000a109:	83 c4 10             	add    esp,0x10
c000a10c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a110:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a114:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a124:	e8 ff dc 01 00       	call   c0027e28 <__muldf3>
c000a129:	5e                   	pop    esi
c000a12a:	5f                   	pop    edi
c000a12b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a12f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a13b:	e8 bb e5 01 00       	call   c00286fb <__truncdfsf2>
c000a140:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c000a147:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a14a:	83 c4 7c             	add    esp,0x7c
c000a14d:	5b                   	pop    ebx
c000a14e:	5e                   	pop    esi
c000a14f:	5f                   	pop    edi
c000a150:	5d                   	pop    ebp
c000a151:	c3                   	ret    

c000a152 <calc_output_quad>:
c000a152:	55                   	push   ebp
c000a153:	57                   	push   edi
c000a154:	56                   	push   esi
c000a155:	89 c6                	mov    esi,eax
c000a157:	53                   	push   ebx
c000a158:	83 ec 7c             	sub    esp,0x7c
c000a15b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a15f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a163:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000a16a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000a171:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a179:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000a17c:	e8 55 f9 ff ff       	call   c0009ad6 <int_to_fp>
c000a181:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000a184:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000a187:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a18b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a18f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a193:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000a197:	99                   	cdq    
c000a198:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000a19c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1a0:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000a1a3:	31 d2                	xor    edx,edx
c000a1a5:	0f af d8             	imul   ebx,eax
c000a1a8:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000a1b0:	0f af c7             	imul   eax,edi
c000a1b3:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c000a1b7:	29 c1                	sub    ecx,eax
c000a1b9:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000a1c1:	31 c0                	xor    eax,eax
c000a1c3:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c000a1c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a1ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a1d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a1d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a1de:	89 d8                	mov    eax,ebx
c000a1e0:	83 c7 10             	add    edi,0x10
c000a1e3:	e8 fc f8 ff ff       	call   c0009ae4 <fp_to_double>
c000a1e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1f0:	89 d8                	mov    eax,ebx
c000a1f2:	e8 e3 f8 ff ff       	call   c0009ada <fp_to_int>
c000a1f7:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a1fb:	52                   	push   edx
c000a1fc:	52                   	push   edx
c000a1fd:	51                   	push   ecx
c000a1fe:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a202:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a206:	e8 35 cf 01 00       	call   c0027140 <__subsf3>
c000a20b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a20e:	e8 0c e6 01 00       	call   c002881f <__extendsfdf2>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a21a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22e:	e8 f5 db 01 00       	call   c0027e28 <__muldf3>
c000a233:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a237:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a23b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a23e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a242:	e8 d8 e5 01 00       	call   c002881f <__extendsfdf2>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a24e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a252:	52                   	push   edx
c000a253:	50                   	push   eax
c000a254:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a258:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25c:	e8 4a d5 01 00       	call   c00277ab <__adddf3>
c000a261:	59                   	pop    ecx
c000a262:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a266:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26a:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a270:	e8 aa e5 01 00       	call   c002881f <__extendsfdf2>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a288:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a290:	e8 93 db 01 00       	call   c0027e28 <__muldf3>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a0:	52                   	push   edx
c000a2a1:	50                   	push   eax
c000a2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2aa:	e8 fc d4 01 00       	call   c00277ab <__adddf3>
c000a2af:	59                   	pop    ecx
c000a2b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a2b4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a2b8:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a2be:	e8 5c e5 01 00       	call   c002881f <__extendsfdf2>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ca:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2de:	e8 45 db 01 00       	call   c0027e28 <__muldf3>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ee:	52                   	push   edx
c000a2ef:	50                   	push   eax
c000a2f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f8:	e8 ae d4 01 00       	call   c00277ab <__adddf3>
c000a2fd:	59                   	pop    ecx
c000a2fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a302:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a306:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a30c:	e8 0e e5 01 00       	call   c002881f <__extendsfdf2>
c000a311:	83 c4 10             	add    esp,0x10
c000a314:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a318:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a324:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a328:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32c:	e8 f7 da 01 00       	call   c0027e28 <__muldf3>
c000a331:	83 c4 10             	add    esp,0x10
c000a334:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a338:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33c:	52                   	push   edx
c000a33d:	50                   	push   eax
c000a33e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a346:	e8 60 d4 01 00       	call   c00277ab <__adddf3>
c000a34b:	59                   	pop    ecx
c000a34c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a350:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a354:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a35a:	e8 c0 e4 01 00       	call   c002881f <__extendsfdf2>
c000a35f:	83 c4 10             	add    esp,0x10
c000a362:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a366:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a372:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a376:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37a:	e8 a9 da 01 00       	call   c0027e28 <__muldf3>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	52                   	push   edx
c000a38b:	50                   	push   eax
c000a38c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a390:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a394:	e8 12 d4 01 00       	call   c00277ab <__adddf3>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3a0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a4:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a8:	0f 89 30 fe ff ff    	jns    c000a1de <calc_output_quad+0x8c>
c000a3ae:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a3b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3b6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3ba:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a3be:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a3c6:	29 c8                	sub    eax,ecx
c000a3c8:	99                   	cdq    
c000a3c9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a3cd:	31 d2                	xor    edx,edx
c000a3cf:	0f af d8             	imul   ebx,eax
c000a3d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a3d6:	40                   	inc    eax
c000a3d7:	01 cb                	add    ebx,ecx
c000a3d9:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a3de:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a3e2:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a3e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3ea:	8d 34 86             	lea    esi,[esi+eax*4]
c000a3ed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a3f5:	31 c0                	xor    eax,eax
c000a3f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a3fb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a403:	89 d8                	mov    eax,ebx
c000a405:	83 ee 10             	sub    esi,0x10
c000a408:	e8 d7 f6 ff ff       	call   c0009ae4 <fp_to_double>
c000a40d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a415:	89 d8                	mov    eax,ebx
c000a417:	e8 be f6 ff ff       	call   c0009ada <fp_to_int>
c000a41c:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a420:	52                   	push   edx
c000a421:	52                   	push   edx
c000a422:	57                   	push   edi
c000a423:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a427:	e8 14 cd 01 00       	call   c0027140 <__subsf3>
c000a42c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a42f:	e8 eb e3 01 00       	call   c002881f <__extendsfdf2>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a447:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44f:	e8 d4 d9 01 00       	call   c0027e28 <__muldf3>
c000a454:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a457:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a45b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a45f:	e8 bb e3 01 00       	call   c002881f <__extendsfdf2>
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46f:	52                   	push   edx
c000a470:	50                   	push   eax
c000a471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	e8 2d d3 01 00       	call   c00277ab <__adddf3>
c000a47e:	59                   	pop    ecx
c000a47f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a483:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a487:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a48d:	e8 8d e3 01 00       	call   c002881f <__extendsfdf2>
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a499:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	e8 76 d9 01 00       	call   c0027e28 <__muldf3>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bd:	52                   	push   edx
c000a4be:	50                   	push   eax
c000a4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c7:	e8 df d2 01 00       	call   c00277ab <__adddf3>
c000a4cc:	5f                   	pop    edi
c000a4cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a4d1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a4d5:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a4db:	e8 3f e3 01 00       	call   c002881f <__extendsfdf2>
c000a4e0:	83 c4 10             	add    esp,0x10
c000a4e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	e8 28 d9 01 00       	call   c0027e28 <__muldf3>
c000a500:	83 c4 10             	add    esp,0x10
c000a503:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a507:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50b:	52                   	push   edx
c000a50c:	50                   	push   eax
c000a50d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a511:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a515:	e8 91 d2 01 00       	call   c00277ab <__adddf3>
c000a51a:	59                   	pop    ecx
c000a51b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a51f:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a523:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a529:	e8 f1 e2 01 00       	call   c002881f <__extendsfdf2>
c000a52e:	83 c4 10             	add    esp,0x10
c000a531:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a535:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a541:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	e8 da d8 01 00       	call   c0027e28 <__muldf3>
c000a54e:	83 c4 10             	add    esp,0x10
c000a551:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a555:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a559:	52                   	push   edx
c000a55a:	50                   	push   eax
c000a55b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a55f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a563:	e8 43 d2 01 00       	call   c00277ab <__adddf3>
c000a568:	5f                   	pop    edi
c000a569:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a56d:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a571:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a577:	e8 a3 e2 01 00       	call   c002881f <__extendsfdf2>
c000a57c:	83 c4 10             	add    esp,0x10
c000a57f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a583:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	e8 8c d8 01 00       	call   c0027e28 <__muldf3>
c000a59c:	83 c4 10             	add    esp,0x10
c000a59f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a7:	52                   	push   edx
c000a5a8:	50                   	push   eax
c000a5a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5b1:	e8 f5 d1 01 00       	call   c00277ab <__adddf3>
c000a5b6:	83 c4 10             	add    esp,0x10
c000a5b9:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a5bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a5c1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a5c5:	85 db                	test   ebx,ebx
c000a5c7:	0f 8f 36 fe ff ff    	jg     c000a403 <calc_output_quad+0x2b1>
c000a5cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5dd:	e8 c9 d1 01 00       	call   c00277ab <__adddf3>
c000a5e2:	83 c4 10             	add    esp,0x10
c000a5e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	e8 26 d8 01 00       	call   c0027e28 <__muldf3>
c000a602:	59                   	pop    ecx
c000a603:	5b                   	pop    ebx
c000a604:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a614:	e8 e2 e0 01 00       	call   c00286fb <__truncdfsf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a623:	89 06                	mov    DWORD PTR [esi],eax
c000a625:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a629:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a62d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a631:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a635:	e8 71 d1 01 00       	call   c00277ab <__adddf3>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a655:	e8 ce d7 01 00       	call   c0027e28 <__muldf3>
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a660:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66c:	e8 8a e0 01 00       	call   c00286fb <__truncdfsf2>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a67b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a67e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a686:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68e:	e8 18 d1 01 00       	call   c00277ab <__adddf3>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a69a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ae:	e8 75 d7 01 00       	call   c0027e28 <__muldf3>
c000a6b3:	5d                   	pop    ebp
c000a6b4:	59                   	pop    ecx
c000a6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c5:	e8 31 e0 01 00       	call   c00286fb <__truncdfsf2>
c000a6ca:	83 c4 10             	add    esp,0x10
c000a6cd:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a6d4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e7:	e8 bf d0 01 00       	call   c00277ab <__adddf3>
c000a6ec:	83 c4 10             	add    esp,0x10
c000a6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a707:	e8 1c d7 01 00       	call   c0027e28 <__muldf3>
c000a70c:	5b                   	pop    ebx
c000a70d:	5e                   	pop    esi
c000a70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71e:	e8 d8 df 01 00       	call   c00286fb <__truncdfsf2>
c000a723:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a72a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a72d:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a733:	5b                   	pop    ebx
c000a734:	5e                   	pop    esi
c000a735:	5f                   	pop    edi
c000a736:	5d                   	pop    ebp
c000a737:	c3                   	ret    

c000a738 <calc_output_hex>:
c000a738:	55                   	push   ebp
c000a739:	89 cd                	mov    ebp,ecx
c000a73b:	57                   	push   edi
c000a73c:	56                   	push   esi
c000a73d:	53                   	push   ebx
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a746:	89 14 24             	mov    DWORD PTR [esp],edx
c000a749:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a750:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a75b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a75f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a762:	e8 6f f3 ff ff       	call   c0009ad6 <int_to_fp>
c000a767:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a76a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a76e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a771:	29 c8                	sub    eax,ecx
c000a773:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a777:	99                   	cdq    
c000a778:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a780:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a783:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a78b:	0f af f8             	imul   edi,eax
c000a78e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a791:	01 cf                	add    edi,ecx
c000a793:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a797:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a79a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a79e:	0f af c2             	imul   eax,edx
c000a7a1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a7a5:	29 c1                	sub    ecx,eax
c000a7a7:	31 d2                	xor    edx,edx
c000a7a9:	31 c0                	xor    eax,eax
c000a7ab:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a7b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a7ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a7be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7c2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a7ca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a7ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a7d6:	89 f8                	mov    eax,edi
c000a7d8:	e8 07 f3 ff ff       	call   c0009ae4 <fp_to_double>
c000a7dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7e5:	89 f8                	mov    eax,edi
c000a7e7:	e8 ee f2 ff ff       	call   c0009ada <fp_to_int>
c000a7ec:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a7f0:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a7f3:	52                   	push   edx
c000a7f4:	52                   	push   edx
c000a7f5:	51                   	push   ecx
c000a7f6:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a7fa:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a801:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a805:	e8 36 c9 01 00       	call   c0027140 <__subsf3>
c000a80a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a80d:	e8 0d e0 01 00       	call   c002881f <__extendsfdf2>
c000a812:	83 c4 10             	add    esp,0x10
c000a815:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a819:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a829:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82d:	e8 f6 d5 01 00       	call   c0027e28 <__muldf3>
c000a832:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a836:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a83d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a841:	e8 d9 df 01 00       	call   c002881f <__extendsfdf2>
c000a846:	83 c4 10             	add    esp,0x10
c000a849:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a84d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a851:	52                   	push   edx
c000a852:	50                   	push   eax
c000a853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a85b:	e8 4b cf 01 00       	call   c00277ab <__adddf3>
c000a860:	59                   	pop    ecx
c000a861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a865:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a869:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a86f:	e8 ab df 01 00       	call   c002881f <__extendsfdf2>
c000a874:	83 c4 10             	add    esp,0x10
c000a877:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a87b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a87f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a887:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88f:	e8 94 d5 01 00       	call   c0027e28 <__muldf3>
c000a894:	83 c4 10             	add    esp,0x10
c000a897:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a89b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a89f:	52                   	push   edx
c000a8a0:	50                   	push   eax
c000a8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a9:	e8 fd ce 01 00       	call   c00277ab <__adddf3>
c000a8ae:	59                   	pop    ecx
c000a8af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a8b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a8b7:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a8bd:	e8 5d df 01 00       	call   c002881f <__extendsfdf2>
c000a8c2:	83 c4 10             	add    esp,0x10
c000a8c5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8c9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8dd:	e8 46 d5 01 00       	call   c0027e28 <__muldf3>
c000a8e2:	83 c4 10             	add    esp,0x10
c000a8e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8ed:	52                   	push   edx
c000a8ee:	50                   	push   eax
c000a8ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f7:	e8 af ce 01 00       	call   c00277ab <__adddf3>
c000a8fc:	59                   	pop    ecx
c000a8fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a901:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a905:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a90b:	e8 0f df 01 00       	call   c002881f <__extendsfdf2>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a917:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a923:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a927:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a92b:	e8 f8 d4 01 00       	call   c0027e28 <__muldf3>
c000a930:	83 c4 10             	add    esp,0x10
c000a933:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a937:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a93b:	52                   	push   edx
c000a93c:	50                   	push   eax
c000a93d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a941:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a945:	e8 61 ce 01 00       	call   c00277ab <__adddf3>
c000a94a:	59                   	pop    ecx
c000a94b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a94f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a953:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a959:	e8 c1 de 01 00       	call   c002881f <__extendsfdf2>
c000a95e:	83 c4 10             	add    esp,0x10
c000a961:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a965:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a971:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a975:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a979:	e8 aa d4 01 00       	call   c0027e28 <__muldf3>
c000a97e:	83 c4 10             	add    esp,0x10
c000a981:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a985:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a989:	52                   	push   edx
c000a98a:	50                   	push   eax
c000a98b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a98f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a993:	e8 13 ce 01 00       	call   c00277ab <__adddf3>
c000a998:	59                   	pop    ecx
c000a999:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a99d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a9a1:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a9a7:	e8 73 de 01 00       	call   c002881f <__extendsfdf2>
c000a9ac:	83 c4 10             	add    esp,0x10
c000a9af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c7:	e8 5c d4 01 00       	call   c0027e28 <__muldf3>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	83 c6 18             	add    esi,0x18
c000a9d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9da:	52                   	push   edx
c000a9db:	50                   	push   eax
c000a9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e4:	e8 c2 cd 01 00       	call   c00277ab <__adddf3>
c000a9e9:	59                   	pop    ecx
c000a9ea:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a9ee:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a9f2:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a9f8:	e8 22 de 01 00       	call   c002881f <__extendsfdf2>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000aa04:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000aa08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	e8 0b d4 01 00       	call   c0027e28 <__muldf3>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aa28:	52                   	push   edx
c000aa29:	50                   	push   eax
c000aa2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa32:	e8 74 cd 01 00       	call   c00277ab <__adddf3>
c000aa37:	83 c4 10             	add    esp,0x10
c000aa3a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000aa3e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000aa42:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000aa45:	0f 89 8b fd ff ff    	jns    c000a7d6 <calc_output_hex+0x9e>
c000aa4b:	31 f6                	xor    esi,esi
c000aa4d:	31 ff                	xor    edi,edi
c000aa4f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000aa53:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa56:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000aa5a:	29 e9                	sub    ecx,ebp
c000aa5c:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000aa60:	29 c8                	sub    eax,ecx
c000aa62:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000aa65:	99                   	cdq    
c000aa66:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000aa6a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000aa6d:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000aa71:	0f af e8             	imul   ebp,eax
c000aa74:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000aa78:	40                   	inc    eax
c000aa79:	01 cd                	add    ebp,ecx
c000aa7b:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000aa80:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000aa84:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa88:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000aa8c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000aa8f:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000aa93:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000aa97:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000aa9b:	89 e8                	mov    eax,ebp
c000aa9d:	e8 42 f0 ff ff       	call   c0009ae4 <fp_to_double>
c000aaa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaaa:	89 e8                	mov    eax,ebp
c000aaac:	e8 29 f0 ff ff       	call   c0009ada <fp_to_int>
c000aab1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000aab5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000aab8:	52                   	push   edx
c000aab9:	52                   	push   edx
c000aaba:	51                   	push   ecx
c000aabb:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000aac2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000aac9:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aacd:	e8 6e c6 01 00       	call   c0027140 <__subsf3>
c000aad2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad5:	e8 45 dd 01 00       	call   c002881f <__extendsfdf2>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aae1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf5:	e8 2e d3 01 00       	call   c0027e28 <__muldf3>
c000aafa:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000ab01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ab08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab0c:	e8 0e dd 01 00       	call   c002881f <__extendsfdf2>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab18:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab1c:	52                   	push   edx
c000ab1d:	50                   	push   eax
c000ab1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab26:	e8 80 cc 01 00       	call   c00277ab <__adddf3>
c000ab2b:	59                   	pop    ecx
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab34:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000ab3a:	e8 e0 dc 01 00       	call   c002881f <__extendsfdf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab46:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab52:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab56:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab5a:	e8 c9 d2 01 00       	call   c0027e28 <__muldf3>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab66:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab6a:	52                   	push   edx
c000ab6b:	50                   	push   eax
c000ab6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab74:	e8 32 cc 01 00       	call   c00277ab <__adddf3>
c000ab79:	59                   	pop    ecx
c000ab7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ab7e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ab82:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000ab88:	e8 92 dc 01 00       	call   c002881f <__extendsfdf2>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab94:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aba0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba8:	e8 7b d2 01 00       	call   c0027e28 <__muldf3>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abb4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abb8:	52                   	push   edx
c000abb9:	50                   	push   eax
c000abba:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abbe:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abc2:	e8 e4 cb 01 00       	call   c00277ab <__adddf3>
c000abc7:	59                   	pop    ecx
c000abc8:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000abcc:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000abd0:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000abd6:	e8 44 dc 01 00       	call   c002881f <__extendsfdf2>
c000abdb:	83 c4 10             	add    esp,0x10
c000abde:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abe2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf6:	e8 2d d2 01 00       	call   c0027e28 <__muldf3>
c000abfb:	83 c4 10             	add    esp,0x10
c000abfe:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac02:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac06:	52                   	push   edx
c000ac07:	50                   	push   eax
c000ac08:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac10:	e8 96 cb 01 00       	call   c00277ab <__adddf3>
c000ac15:	59                   	pop    ecx
c000ac16:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000ac1a:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000ac1e:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000ac24:	e8 f6 db 01 00       	call   c002881f <__extendsfdf2>
c000ac29:	83 c4 10             	add    esp,0x10
c000ac2c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac30:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac44:	e8 df d1 01 00       	call   c0027e28 <__muldf3>
c000ac49:	83 c4 10             	add    esp,0x10
c000ac4c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac50:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac54:	52                   	push   edx
c000ac55:	50                   	push   eax
c000ac56:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5e:	e8 48 cb 01 00       	call   c00277ab <__adddf3>
c000ac63:	59                   	pop    ecx
c000ac64:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ac68:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000ac6c:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000ac72:	e8 a8 db 01 00       	call   c002881f <__extendsfdf2>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac7e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac8a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac92:	e8 91 d1 01 00       	call   c0027e28 <__muldf3>
c000ac97:	83 c4 10             	add    esp,0x10
c000ac9a:	83 eb 18             	sub    ebx,0x18
c000ac9d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aca1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aca5:	52                   	push   edx
c000aca6:	50                   	push   eax
c000aca7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acaf:	e8 f7 ca 01 00       	call   c00277ab <__adddf3>
c000acb4:	59                   	pop    ecx
c000acb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000acb9:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000acbd:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000acc3:	e8 57 db 01 00       	call   c002881f <__extendsfdf2>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000accf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000acd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000acdf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ace3:	e8 40 d1 01 00       	call   c0027e28 <__muldf3>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acf3:	52                   	push   edx
c000acf4:	50                   	push   eax
c000acf5:	57                   	push   edi
c000acf6:	56                   	push   esi
c000acf7:	e8 af ca 01 00       	call   c00277ab <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 c6                	mov    esi,eax
c000ad01:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ad04:	89 d7                	mov    edi,edx
c000ad06:	85 ed                	test   ebp,ebp
c000ad08:	0f 8f 8d fd ff ff    	jg     c000aa9b <calc_output_hex+0x363>
c000ad0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1e:	e8 88 ca 01 00       	call   c00277ab <__adddf3>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad3d:	e8 e6 d0 01 00       	call   c0027e28 <__muldf3>
c000ad42:	59                   	pop    ecx
c000ad43:	5b                   	pop    ebx
c000ad44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad54:	e8 a2 d9 01 00       	call   c00286fb <__truncdfsf2>
c000ad59:	83 c4 10             	add    esp,0x10
c000ad5c:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ad63:	89 03                	mov    DWORD PTR [ebx],eax
c000ad65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad75:	e8 31 ca 01 00       	call   c00277ab <__adddf3>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad94:	e8 8f d0 01 00       	call   c0027e28 <__muldf3>
c000ad99:	5d                   	pop    ebp
c000ad9a:	59                   	pop    ecx
c000ad9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ada3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ada7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adab:	e8 4b d9 01 00       	call   c00286fb <__truncdfsf2>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000adba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000adbd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adcd:	e8 d9 c9 01 00       	call   c00277ab <__adddf3>
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	89 04 24             	mov    DWORD PTR [esp],eax
c000add8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000addc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adec:	e8 37 d0 01 00       	call   c0027e28 <__muldf3>
c000adf1:	5b                   	pop    ebx
c000adf2:	5d                   	pop    ebp
c000adf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae03:	e8 f3 d8 01 00       	call   c00286fb <__truncdfsf2>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ae15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae25:	e8 81 c9 01 00       	call   c00277ab <__adddf3>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae44:	e8 df cf 01 00       	call   c0027e28 <__muldf3>
c000ae49:	59                   	pop    ecx
c000ae4a:	5b                   	pop    ebx
c000ae4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae5b:	e8 9b d8 01 00       	call   c00286fb <__truncdfsf2>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae6a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ae6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae7d:	e8 29 c9 01 00       	call   c00277ab <__adddf3>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae9c:	e8 87 cf 01 00       	call   c0027e28 <__muldf3>
c000aea1:	5d                   	pop    ebp
c000aea2:	59                   	pop    ecx
c000aea3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aeab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeb3:	e8 43 d8 01 00       	call   c00286fb <__truncdfsf2>
c000aeb8:	83 c4 10             	add    esp,0x10
c000aebb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aec2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aec5:	57                   	push   edi
c000aec6:	56                   	push   esi
c000aec7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecf:	e8 d7 c8 01 00       	call   c00277ab <__adddf3>
c000aed4:	83 c4 10             	add    esp,0x10
c000aed7:	89 04 24             	mov    DWORD PTR [esp],eax
c000aeda:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aede:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeee:	e8 35 cf 01 00       	call   c0027e28 <__muldf3>
c000aef3:	5b                   	pop    ebx
c000aef4:	5e                   	pop    esi
c000aef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aefd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af05:	e8 f1 d7 01 00       	call   c00286fb <__truncdfsf2>
c000af0a:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000af11:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000af14:	81 c4 9c 00 00 00    	add    esp,0x9c
c000af1a:	5b                   	pop    ebx
c000af1b:	5e                   	pop    esi
c000af1c:	5f                   	pop    edi
c000af1d:	5d                   	pop    ebp
c000af1e:	c3                   	ret    

c000af1f <sinc_reset>:
c000af1f:	56                   	push   esi
c000af20:	53                   	push   ebx
c000af21:	51                   	push   ecx
c000af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af26:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000af29:	85 db                	test   ebx,ebx
c000af2b:	74 59                	je     c000af86 <sinc_reset+0x67>
c000af2d:	31 d2                	xor    edx,edx
c000af2f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000af36:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000af39:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000af3c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000af43:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000af4a:	31 c0                	xor    eax,eax
c000af4c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000af52:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000af55:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000af58:	52                   	push   edx
c000af59:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af5c:	c1 e0 02             	shl    eax,0x2
c000af5f:	50                   	push   eax
c000af60:	6a 00                	push   0x0
c000af62:	56                   	push   esi
c000af63:	e8 e8 57 ff ff       	call   c0000750 <memset>
c000af68:	83 c4 0c             	add    esp,0xc
c000af6b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000af6e:	c1 e0 02             	shl    eax,0x2
c000af71:	50                   	push   eax
c000af72:	68 aa 00 00 00       	push   0xaa
c000af77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af7a:	8d 04 86             	lea    eax,[esi+eax*4]
c000af7d:	50                   	push   eax
c000af7e:	e8 cd 57 ff ff       	call   c0000750 <memset>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	58                   	pop    eax
c000af87:	5b                   	pop    ebx
c000af88:	5e                   	pop    esi
c000af89:	c3                   	ret    

c000af8a <calc_output_multi>:
c000af8a:	55                   	push   ebp
c000af8b:	57                   	push   edi
c000af8c:	56                   	push   esi
c000af8d:	89 c6                	mov    esi,eax
c000af8f:	53                   	push   ebx
c000af90:	83 ec 4c             	sub    esp,0x4c
c000af93:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000af97:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000af9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000af9f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000afa3:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000afa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000afab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000afaf:	8d 46 44             	lea    eax,[esi+0x44]
c000afb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000afb5:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000afbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000afbf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000afc2:	e8 0f eb ff ff       	call   c0009ad6 <int_to_fp>
c000afc7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000afca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000afce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000afd2:	99                   	cdq    
c000afd3:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afdb:	0f af d0             	imul   edx,eax
c000afde:	0f af c3             	imul   eax,ebx
c000afe1:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000afe5:	29 c1                	sub    ecx,eax
c000afe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000afeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000afef:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000aff6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000affa:	57                   	push   edi
c000affb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afff:	6a 00                	push   0x0
c000b001:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b005:	e8 46 57 ff ff       	call   c0000750 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b011:	89 df                	mov    edi,ebx
c000b013:	e8 cc ea ff ff       	call   c0009ae4 <fp_to_double>
c000b018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b024:	e8 b1 ea ff ff       	call   c0009ada <fp_to_int>
c000b029:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b02c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b02f:	51                   	push   ecx
c000b030:	51                   	push   ecx
c000b031:	55                   	push   ebp
c000b032:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b036:	e8 05 c1 01 00       	call   c0027140 <__subsf3>
c000b03b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b03e:	e8 dc d7 01 00       	call   c002881f <__extendsfdf2>
c000b043:	83 c4 10             	add    esp,0x10
c000b046:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b04a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b04e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b056:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05e:	e8 c5 cd 01 00       	call   c0027e28 <__muldf3>
c000b063:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b066:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b06a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b06e:	e8 ac d7 01 00       	call   c002881f <__extendsfdf2>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07e:	52                   	push   edx
c000b07f:	50                   	push   eax
c000b080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b088:	e8 1e c7 01 00       	call   c00277ab <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b094:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b098:	89 f8                	mov    eax,edi
c000b09a:	b9 08 00 00 00       	mov    ecx,0x8
c000b09f:	99                   	cdq    
c000b0a0:	f7 f9                	idiv   ecx
c000b0a2:	4a                   	dec    edx
c000b0a3:	83 fa 06             	cmp    edx,0x6
c000b0a6:	77 07                	ja     c000b0af <calc_output_multi+0x125>
c000b0a8:	ff 24 95 e4 a0 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5f1c]
c000b0af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b2:	4f                   	dec    edi
c000b0b3:	83 ec 0c             	sub    esp,0xc
c000b0b6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0bd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0c8:	e8 52 d7 01 00       	call   c002881f <__extendsfdf2>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	e8 3b cd 01 00       	call   c0027e28 <__muldf3>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	52                   	push   edx
c000b0f9:	50                   	push   eax
c000b0fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0fd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b100:	e8 a6 c6 01 00       	call   c00277ab <__adddf3>
c000b105:	83 c4 10             	add    esp,0x10
c000b108:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b10e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b111:	4f                   	dec    edi
c000b112:	83 ec 0c             	sub    esp,0xc
c000b115:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b118:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b123:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b127:	e8 f3 d6 01 00       	call   c002881f <__extendsfdf2>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b133:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	e8 dc cc 01 00       	call   c0027e28 <__muldf3>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	52                   	push   edx
c000b158:	50                   	push   eax
c000b159:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b15f:	e8 47 c6 01 00       	call   c00277ab <__adddf3>
c000b164:	83 c4 10             	add    esp,0x10
c000b167:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b16d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b170:	4f                   	dec    edi
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b182:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b186:	e8 94 d6 01 00       	call   c002881f <__extendsfdf2>
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b192:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a6:	e8 7d cc 01 00       	call   c0027e28 <__muldf3>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b6:	52                   	push   edx
c000b1b7:	50                   	push   eax
c000b1b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1be:	e8 e8 c5 01 00       	call   c00277ab <__adddf3>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b1cf:	4f                   	dec    edi
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1da:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1e5:	e8 35 d6 01 00       	call   c002881f <__extendsfdf2>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1f1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b205:	e8 1e cc 01 00       	call   c0027e28 <__muldf3>
c000b20a:	83 c4 10             	add    esp,0x10
c000b20d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b211:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b215:	52                   	push   edx
c000b216:	50                   	push   eax
c000b217:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b21a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b21d:	e8 89 c5 01 00       	call   c00277ab <__adddf3>
c000b222:	83 c4 10             	add    esp,0x10
c000b225:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b228:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b22b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b22e:	4f                   	dec    edi
c000b22f:	83 ec 0c             	sub    esp,0xc
c000b232:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b239:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b240:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b244:	e8 d6 d5 01 00       	call   c002881f <__extendsfdf2>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b250:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b260:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b264:	e8 bf cb 01 00       	call   c0027e28 <__muldf3>
c000b269:	83 c4 10             	add    esp,0x10
c000b26c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b270:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b274:	52                   	push   edx
c000b275:	50                   	push   eax
c000b276:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b279:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b27c:	e8 2a c5 01 00       	call   c00277ab <__adddf3>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b287:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b28a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b28d:	4f                   	dec    edi
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b298:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b29f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2a3:	e8 77 d5 01 00       	call   c002881f <__extendsfdf2>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2c3:	e8 60 cb 01 00       	call   c0027e28 <__muldf3>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2cf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2d3:	52                   	push   edx
c000b2d4:	50                   	push   eax
c000b2d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2db:	e8 cb c4 01 00       	call   c00277ab <__adddf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b2ec:	4f                   	dec    edi
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2fe:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b302:	e8 18 d5 01 00       	call   c002881f <__extendsfdf2>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b30e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b312:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b31e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b322:	e8 01 cb 01 00       	call   c0027e28 <__muldf3>
c000b327:	83 c4 10             	add    esp,0x10
c000b32a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b32e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b332:	52                   	push   edx
c000b333:	50                   	push   eax
c000b334:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b337:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b33a:	e8 6c c4 01 00       	call   c00277ab <__adddf3>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b345:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b34b:	4f                   	dec    edi
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b352:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b356:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b35d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b361:	e8 b9 d4 01 00       	call   c002881f <__extendsfdf2>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b36d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b379:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b37d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b381:	e8 a2 ca 01 00       	call   c0027e28 <__muldf3>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b38d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b391:	52                   	push   edx
c000b392:	50                   	push   eax
c000b393:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b396:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b399:	e8 0d c4 01 00       	call   c00277ab <__adddf3>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a7:	85 ff                	test   edi,edi
c000b3a9:	0f 8f e9 fc ff ff    	jg     c000b098 <calc_output_multi+0x10e>
c000b3af:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b3b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3b7:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3bb:	0f 89 4c fc ff ff    	jns    c000b00d <calc_output_multi+0x83>
c000b3c1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b3c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3c9:	29 c8                	sub    eax,ecx
c000b3cb:	99                   	cdq    
c000b3cc:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b3d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b3d4:	0f af d0             	imul   edx,eax
c000b3d7:	40                   	inc    eax
c000b3d8:	01 d1                	add    ecx,edx
c000b3da:	0f af c3             	imul   eax,ebx
c000b3dd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b3e1:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e8:	55                   	push   ebp
c000b3e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ed:	6a 00                	push   0x0
c000b3ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f3:	e8 58 53 ff ff       	call   c0000750 <memset>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3ff:	e8 e0 e6 ff ff       	call   c0009ae4 <fp_to_double>
c000b404:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b40c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b410:	e8 c5 e6 ff ff       	call   c0009ada <fp_to_int>
c000b415:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b418:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b41b:	57                   	push   edi
c000b41c:	57                   	push   edi
c000b41d:	89 df                	mov    edi,ebx
c000b41f:	55                   	push   ebp
c000b420:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b424:	e8 17 bd 01 00       	call   c0027140 <__subsf3>
c000b429:	89 04 24             	mov    DWORD PTR [esp],eax
c000b42c:	e8 ee d3 01 00       	call   c002881f <__extendsfdf2>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b438:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b444:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b44c:	e8 d7 c9 01 00       	call   c0027e28 <__muldf3>
c000b451:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b454:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b458:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b45c:	e8 be d3 01 00       	call   c002881f <__extendsfdf2>
c000b461:	83 c4 10             	add    esp,0x10
c000b464:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b468:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46c:	52                   	push   edx
c000b46d:	50                   	push   eax
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b476:	e8 30 c3 01 00       	call   c00277ab <__adddf3>
c000b47b:	83 c4 10             	add    esp,0x10
c000b47e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b486:	89 f8                	mov    eax,edi
c000b488:	b9 08 00 00 00       	mov    ecx,0x8
c000b48d:	99                   	cdq    
c000b48e:	f7 f9                	idiv   ecx
c000b490:	4a                   	dec    edx
c000b491:	83 fa 06             	cmp    edx,0x6
c000b494:	77 07                	ja     c000b49d <calc_output_multi+0x513>
c000b496:	ff 24 95 00 a1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5f00]
c000b49d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a1:	4f                   	dec    edi
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4ac:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4b3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4b7:	e8 63 d3 01 00       	call   c002881f <__extendsfdf2>
c000b4bc:	83 c4 10             	add    esp,0x10
c000b4bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d7:	e8 4c c9 01 00       	call   c0027e28 <__muldf3>
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4e7:	52                   	push   edx
c000b4e8:	50                   	push   eax
c000b4e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4ec:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4ef:	e8 b7 c2 01 00       	call   c00277ab <__adddf3>
c000b4f4:	83 c4 10             	add    esp,0x10
c000b4f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4fa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b501:	4f                   	dec    edi
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b50c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b513:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b517:	e8 03 d3 01 00       	call   c002881f <__extendsfdf2>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b523:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b537:	e8 ec c8 01 00       	call   c0027e28 <__muldf3>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b543:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b547:	52                   	push   edx
c000b548:	50                   	push   eax
c000b549:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b54c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b54f:	e8 57 c2 01 00       	call   c00277ab <__adddf3>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b55a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b55d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b561:	4f                   	dec    edi
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b56c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b573:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b577:	e8 a3 d2 01 00       	call   c002881f <__extendsfdf2>
c000b57c:	83 c4 10             	add    esp,0x10
c000b57f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b583:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b597:	e8 8c c8 01 00       	call   c0027e28 <__muldf3>
c000b59c:	83 c4 10             	add    esp,0x10
c000b59f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5a7:	52                   	push   edx
c000b5a8:	50                   	push   eax
c000b5a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5ac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5af:	e8 f7 c1 01 00       	call   c00277ab <__adddf3>
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5ba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c1:	4f                   	dec    edi
c000b5c2:	83 ec 0c             	sub    esp,0xc
c000b5c5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b5cc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b5d3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b5d7:	e8 43 d2 01 00       	call   c002881f <__extendsfdf2>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f7:	e8 2c c8 01 00       	call   c0027e28 <__muldf3>
c000b5fc:	83 c4 10             	add    esp,0x10
c000b5ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b603:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b607:	52                   	push   edx
c000b608:	50                   	push   eax
c000b609:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b60c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b60f:	e8 97 c1 01 00       	call   c00277ab <__adddf3>
c000b614:	83 c4 10             	add    esp,0x10
c000b617:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b61a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4f                   	dec    edi
c000b622:	83 ec 0c             	sub    esp,0xc
c000b625:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b62c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b633:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b637:	e8 e3 d1 01 00       	call   c002881f <__extendsfdf2>
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b643:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b657:	e8 cc c7 01 00       	call   c0027e28 <__muldf3>
c000b65c:	83 c4 10             	add    esp,0x10
c000b65f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b663:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b667:	52                   	push   edx
c000b668:	50                   	push   eax
c000b669:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b66c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b66f:	e8 37 c1 01 00       	call   c00277ab <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b67a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b67d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b681:	4f                   	dec    edi
c000b682:	83 ec 0c             	sub    esp,0xc
c000b685:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b68c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b693:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b697:	e8 83 d1 01 00       	call   c002881f <__extendsfdf2>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b7:	e8 6c c7 01 00       	call   c0027e28 <__muldf3>
c000b6bc:	83 c4 10             	add    esp,0x10
c000b6bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6c7:	52                   	push   edx
c000b6c8:	50                   	push   eax
c000b6c9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b6cc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b6cf:	e8 d7 c0 01 00       	call   c00277ab <__adddf3>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b6da:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b6dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e1:	4f                   	dec    edi
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b6e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6ec:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b6f3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b6f7:	e8 23 d1 01 00       	call   c002881f <__extendsfdf2>
c000b6fc:	83 c4 10             	add    esp,0x10
c000b6ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b703:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b713:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b717:	e8 0c c7 01 00       	call   c0027e28 <__muldf3>
c000b71c:	83 c4 10             	add    esp,0x10
c000b71f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b723:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b727:	52                   	push   edx
c000b728:	50                   	push   eax
c000b729:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b72c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b72f:	e8 77 c0 01 00       	call   c00277ab <__adddf3>
c000b734:	83 c4 10             	add    esp,0x10
c000b737:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b73a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b741:	4f                   	dec    edi
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b74c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b753:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b757:	e8 c3 d0 01 00       	call   c002881f <__extendsfdf2>
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b777:	e8 ac c6 01 00       	call   c0027e28 <__muldf3>
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b783:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b787:	52                   	push   edx
c000b788:	50                   	push   eax
c000b789:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b78c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b78f:	e8 17 c0 01 00       	call   c00277ab <__adddf3>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b79a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b79d:	85 ff                	test   edi,edi
c000b79f:	0f 8f e1 fc ff ff    	jg     c000b486 <calc_output_multi+0x4fc>
c000b7a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b7a9:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b7ad:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b7b1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b7b6:	0f 8f 3f fc ff ff    	jg     c000b3fb <calc_output_multi+0x471>
c000b7bc:	be 08 00 00 00       	mov    esi,0x8
c000b7c1:	89 d8                	mov    eax,ebx
c000b7c3:	99                   	cdq    
c000b7c4:	f7 fe                	idiv   esi
c000b7c6:	4a                   	dec    edx
c000b7c7:	83 fa 06             	cmp    edx,0x6
c000b7ca:	77 07                	ja     c000b7d3 <calc_output_multi+0x849>
c000b7cc:	ff 24 95 1c a1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5ee4]
c000b7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d7:	4b                   	dec    ebx
c000b7d8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7dc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7ea:	e8 bc bf 01 00       	call   c00277ab <__adddf3>
c000b7ef:	83 c4 10             	add    esp,0x10
c000b7f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b80a:	e8 19 c6 01 00       	call   c0027e28 <__muldf3>
c000b80f:	5d                   	pop    ebp
c000b810:	59                   	pop    ecx
c000b811:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b815:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b821:	e8 d5 ce 01 00       	call   c00286fb <__truncdfsf2>
c000b826:	83 c4 10             	add    esp,0x10
c000b829:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b82d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b834:	4b                   	dec    ebx
c000b835:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b839:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b840:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b844:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b847:	e8 5f bf 01 00       	call   c00277ab <__adddf3>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b867:	e8 bc c5 01 00       	call   c0027e28 <__muldf3>
c000b86c:	59                   	pop    ecx
c000b86d:	5f                   	pop    edi
c000b86e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b872:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87e:	e8 78 ce 01 00       	call   c00286fb <__truncdfsf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b88a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b88d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b891:	4b                   	dec    ebx
c000b892:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b896:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b89d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8a1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8a4:	e8 02 bf 01 00       	call   c00277ab <__adddf3>
c000b8a9:	83 c4 10             	add    esp,0x10
c000b8ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c4:	e8 5f c5 01 00       	call   c0027e28 <__muldf3>
c000b8c9:	5f                   	pop    edi
c000b8ca:	5d                   	pop    ebp
c000b8cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8db:	e8 1b ce 01 00       	call   c00286fb <__truncdfsf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b8e7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ee:	4b                   	dec    ebx
c000b8ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fa:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8fe:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b901:	e8 a5 be 01 00       	call   c00277ab <__adddf3>
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b90d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b921:	e8 02 c5 01 00       	call   c0027e28 <__muldf3>
c000b926:	5d                   	pop    ebp
c000b927:	59                   	pop    ecx
c000b928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b938:	e8 be cd 01 00       	call   c00286fb <__truncdfsf2>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b944:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94b:	4b                   	dec    ebx
c000b94c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b950:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b957:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b95b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b95e:	e8 48 be 01 00       	call   c00277ab <__adddf3>
c000b963:	83 c4 10             	add    esp,0x10
c000b966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97e:	e8 a5 c4 01 00       	call   c0027e28 <__muldf3>
c000b983:	59                   	pop    ecx
c000b984:	5f                   	pop    edi
c000b985:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b989:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b98d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b995:	e8 61 cd 01 00       	call   c00286fb <__truncdfsf2>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9a1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9a8:	4b                   	dec    ebx
c000b9a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9b4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9b8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9bb:	e8 eb bd 01 00       	call   c00277ab <__adddf3>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9db:	e8 48 c4 01 00       	call   c0027e28 <__muldf3>
c000b9e0:	5f                   	pop    edi
c000b9e1:	5d                   	pop    ebp
c000b9e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9f2:	e8 04 cd 01 00       	call   c00286fb <__truncdfsf2>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9fe:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba05:	4b                   	dec    ebx
c000ba06:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba0a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba11:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba15:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba18:	e8 8e bd 01 00       	call   c00277ab <__adddf3>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba38:	e8 eb c3 01 00       	call   c0027e28 <__muldf3>
c000ba3d:	5d                   	pop    ebp
c000ba3e:	59                   	pop    ecx
c000ba3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba43:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4f:	e8 a7 cc 01 00       	call   c00286fb <__truncdfsf2>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000ba5b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	4b                   	dec    ebx
c000ba63:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba67:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba72:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba75:	e8 31 bd 01 00       	call   c00277ab <__adddf3>
c000ba7a:	83 c4 10             	add    esp,0x10
c000ba7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba95:	e8 8e c3 01 00       	call   c0027e28 <__muldf3>
c000ba9a:	59                   	pop    ecx
c000ba9b:	5f                   	pop    edi
c000ba9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baac:	e8 4a cc 01 00       	call   c00286fb <__truncdfsf2>
c000bab1:	83 c4 10             	add    esp,0x10
c000bab4:	85 db                	test   ebx,ebx
c000bab6:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000baba:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000babd:	0f 8f fe fc ff ff    	jg     c000b7c1 <calc_output_multi+0x837>
c000bac3:	83 c4 4c             	add    esp,0x4c
c000bac6:	5b                   	pop    ebx
c000bac7:	5e                   	pop    esi
c000bac8:	5f                   	pop    edi
c000bac9:	5d                   	pop    ebp
c000baca:	c3                   	ret    

c000bacb <double_to_fp>:
c000bacb:	83 ec 0c             	sub    esp,0xc
c000bace:	68 00 00 b0 40       	push   0x40b00000
c000bad3:	6a 00                	push   0x0
c000bad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badd:	e8 46 c3 01 00       	call   c0027e28 <__muldf3>
c000bae2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bae6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baea:	83 c4 1c             	add    esp,0x1c
c000baed:	e9 be cd 01 00       	jmp    c00288b0 <lrint>

c000baf2 <prepare_data>:
c000baf2:	55                   	push   ebp
c000baf3:	57                   	push   edi
c000baf4:	56                   	push   esi
c000baf5:	53                   	push   ebx
c000baf6:	83 ec 1c             	sub    esp,0x1c
c000baf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bafd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bb01:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000bb05:	0f 89 57 01 00 00    	jns    c000bc62 <prepare_data+0x170>
c000bb0b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000bb0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb11:	85 d2                	test   edx,edx
c000bb13:	75 0d                	jne    c000bb22 <prepare_data+0x30>
c000bb15:	8d 14 36             	lea    edx,[esi+esi*1]
c000bb18:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000bb1b:	29 d0                	sub    eax,edx
c000bb1d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb20:	eb 44                	jmp    c000bb66 <prepare_data+0x74>
c000bb22:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000bb25:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000bb28:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000bb2b:	39 c1                	cmp    ecx,eax
c000bb2d:	7d 04                	jge    c000bb33 <prepare_data+0x41>
c000bb2f:	29 d0                	sub    eax,edx
c000bb31:	eb 2d                	jmp    c000bb60 <prepare_data+0x6e>
c000bb33:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000bb39:	29 d7                	sub    edi,edx
c000bb3b:	01 f7                	add    edi,esi
c000bb3d:	51                   	push   ecx
c000bb3e:	29 f2                	sub    edx,esi
c000bb40:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000bb47:	8d 14 90             	lea    edx,[eax+edx*4]
c000bb4a:	51                   	push   ecx
c000bb4b:	52                   	push   edx
c000bb4c:	50                   	push   eax
c000bb4d:	e8 36 4b ff ff       	call   c0000688 <memmove>
c000bb52:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb55:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb58:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bb5b:	29 f0                	sub    eax,esi
c000bb5d:	83 c4 10             	add    esp,0x10
c000bb60:	29 f0                	sub    eax,esi
c000bb62:	79 02                	jns    c000bb66 <prepare_data+0x74>
c000bb64:	31 c0                	xor    eax,eax
c000bb66:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000bb69:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000bb6c:	29 ef                	sub    edi,ebp
c000bb6e:	39 c7                	cmp    edi,eax
c000bb70:	7e 02                	jle    c000bb74 <prepare_data+0x82>
c000bb72:	89 c7                	mov    edi,eax
c000bb74:	89 f8                	mov    eax,edi
c000bb76:	99                   	cdq    
c000bb77:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb7a:	b8 15 00 00 00       	mov    eax,0x15
c000bb7f:	29 d7                	sub    edi,edx
c000bb81:	0f 88 dd 00 00 00    	js     c000bc64 <prepare_data+0x172>
c000bb87:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000bb8a:	8d 14 39             	lea    edx,[ecx+edi*1]
c000bb8d:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000bb90:	0f 8f ce 00 00 00    	jg     c000bc64 <prepare_data+0x172>
c000bb96:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000bb9c:	50                   	push   eax
c000bb9d:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bba4:	50                   	push   eax
c000bba5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bba9:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbab:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000bbae:	50                   	push   eax
c000bbaf:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bbb2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bbb6:	50                   	push   eax
c000bbb7:	e8 8a 4a ff ff       	call   c0000646 <memcpy>
c000bbbc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000bbbf:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000bbc2:	01 fd                	add    ebp,edi
c000bbc4:	01 f9                	add    ecx,edi
c000bbc6:	83 c4 10             	add    esp,0x10
c000bbc9:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000bbcc:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000bbcf:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000bbd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbd6:	0f 85 86 00 00 00    	jne    c000bc62 <prepare_data+0x170>
c000bbdc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000bbdf:	89 e8                	mov    eax,ebp
c000bbe1:	8d 3c 36             	lea    edi,[esi+esi*1]
c000bbe4:	29 c8                	sub    eax,ecx
c000bbe6:	39 f8                	cmp    eax,edi
c000bbe8:	7d 78                	jge    c000bc62 <prepare_data+0x170>
c000bbea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bbee:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000bbf2:	74 6e                	je     c000bc62 <prepare_data+0x170>
c000bbf4:	8d 7e 04             	lea    edi,[esi+0x4]
c000bbf7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bbfb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000bbfe:	29 ef                	sub    edi,ebp
c000bc00:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000bc04:	7c 29                	jl     c000bc2f <prepare_data+0x13d>
c000bc06:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc09:	29 f1                	sub    ecx,esi
c000bc0b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bc12:	55                   	push   ebp
c000bc13:	50                   	push   eax
c000bc14:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bc17:	50                   	push   eax
c000bc18:	52                   	push   edx
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	e8 66 4a ff ff       	call   c0000688 <memmove>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bc28:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bc2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc2f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bc32:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bc35:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000bc38:	83 c6 05             	add    esi,0x5
c000bc3b:	78 07                	js     c000bc44 <prepare_data+0x152>
c000bc3d:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc40:	39 cf                	cmp    edi,ecx
c000bc42:	7e 04                	jle    c000bc48 <prepare_data+0x156>
c000bc44:	89 ce                	mov    esi,ecx
c000bc46:	29 c6                	sub    esi,eax
c000bc48:	8d 04 82             	lea    eax,[edx+eax*4]
c000bc4b:	51                   	push   ecx
c000bc4c:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000bc53:	51                   	push   ecx
c000bc54:	6a 00                	push   0x0
c000bc56:	50                   	push   eax
c000bc57:	e8 f4 4a ff ff       	call   c0000750 <memset>
c000bc5c:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000bc5f:	83 c4 10             	add    esp,0x10
c000bc62:	31 c0                	xor    eax,eax
c000bc64:	83 c4 1c             	add    esp,0x1c
c000bc67:	5b                   	pop    ebx
c000bc68:	5e                   	pop    esi
c000bc69:	5f                   	pop    edi
c000bc6a:	5d                   	pop    ebp
c000bc6b:	c3                   	ret    

c000bc6c <sinc_multichan_vari_process>:
c000bc6c:	55                   	push   ebp
c000bc6d:	ba 05 00 00 00       	mov    edx,0x5
c000bc72:	57                   	push   edi
c000bc73:	56                   	push   esi
c000bc74:	53                   	push   ebx
c000bc75:	83 ec 4c             	sub    esp,0x4c
c000bc78:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000bc7c:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000bc80:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000bc83:	85 db                	test   ebx,ebx
c000bc85:	0f 84 9b 06 00 00    	je     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bc8b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bc8e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc91:	0f af c5             	imul   eax,ebp
c000bc94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bc97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bc9a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bca1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bca8:	0f af c5             	imul   eax,ebp
c000bcab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bcae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcb1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcbb:	68 00 00 70 3f       	push   0x3f700000
c000bcc0:	6a 00                	push   0x0
c000bcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcca:	e8 28 ca 01 00       	call   c00286f7 <__ltdf2>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	ba 16 00 00 00       	mov    edx,0x16
c000bcd7:	85 c0                	test   eax,eax
c000bcd9:	0f 88 47 06 00 00    	js     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bcdf:	68 00 00 70 40       	push   0x40700000
c000bce4:	6a 00                	push   0x0
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	e8 e6 c9 01 00       	call   c00286d9 <__gtdf2>
c000bcf3:	83 c4 10             	add    esp,0x10
c000bcf6:	ba 16 00 00 00       	mov    edx,0x16
c000bcfb:	85 c0                	test   eax,eax
c000bcfd:	0f 8f 23 06 00 00    	jg     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bd03:	83 ec 0c             	sub    esp,0xc
c000bd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bd09:	e8 7d c7 01 00       	call   c002848b <__floatsidf>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd19:	68 00 00 00 40       	push   0x40000000
c000bd1e:	6a 00                	push   0x0
c000bd20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd28:	e8 7e ba 01 00       	call   c00277ab <__adddf3>
c000bd2d:	59                   	pop    ecx
c000bd2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd36:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd39:	e8 4d c7 01 00       	call   c002848b <__floatsidf>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd49:	52                   	push   edx
c000bd4a:	50                   	push   eax
c000bd4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd53:	e8 b4 c3 01 00       	call   c002810c <__divdf3>
c000bd58:	83 c4 10             	add    esp,0x10
c000bd5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd63:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bd66:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bd69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd81:	e8 53 c9 01 00       	call   c00286d9 <__gtdf2>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	85 c0                	test   eax,eax
c000bd8b:	7e 2d                	jle    c000bdba <sinc_multichan_vari_process+0x14e>
c000bd8d:	68 00 00 f0 3f       	push   0x3ff00000
c000bd92:	6a 00                	push   0x0
c000bd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9c:	e8 56 c9 01 00       	call   c00286f7 <__ltdf2>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	85 c0                	test   eax,eax
c000bda6:	79 4d                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdb8:	eb 1b                	jmp    c000bdd5 <sinc_multichan_vari_process+0x169>
c000bdba:	68 00 00 f0 3f       	push   0x3ff00000
c000bdbf:	6a 00                	push   0x0
c000bdc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc9:	e8 29 c9 01 00       	call   c00286f7 <__ltdf2>
c000bdce:	83 c4 10             	add    esp,0x10
c000bdd1:	85 c0                	test   eax,eax
c000bdd3:	79 20                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bdd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde5:	e8 22 c3 01 00       	call   c002810c <__divdf3>
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdf1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdf5:	50                   	push   eax
c000bdf6:	50                   	push   eax
c000bdf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdff:	e8 ac ca 01 00       	call   c00288b0 <lrint>
c000be04:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000be07:	40                   	inc    eax
c000be08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be0c:	0f af c5             	imul   eax,ebp
c000be0f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be13:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000be16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1a:	58                   	pop    eax
c000be1b:	5a                   	pop    edx
c000be1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be24:	e8 87 ca 01 00       	call   c00288b0 <lrint>
c000be29:	83 ec 0c             	sub    esp,0xc
c000be2c:	50                   	push   eax
c000be2d:	e8 59 c6 01 00       	call   c002848b <__floatsidf>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3d:	52                   	push   edx
c000be3e:	50                   	push   eax
c000be3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be47:	e8 b0 bf 01 00       	call   c0027dfc <__subdf3>
c000be4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be54:	83 c4 20             	add    esp,0x20
c000be57:	6a 00                	push   0x0
c000be59:	6a 00                	push   0x0
c000be5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be63:	e8 8f c8 01 00       	call   c00286f7 <__ltdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	79 1f                	jns    c000be8e <sinc_multichan_vari_process+0x222>
c000be6f:	68 00 00 f0 3f       	push   0x3ff00000
c000be74:	6a 00                	push   0x0
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 28 b9 01 00       	call   c00277ab <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bea7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beab:	e8 4c bf 01 00       	call   c0027dfc <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 ee c9 01 00       	call   c00288b0 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bec9:	01 e8                	add    eax,ebp
c000becb:	99                   	cdq    
c000becc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000becf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bed6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beda:	68 00 00 f0 3f       	push   0x3ff00000
c000bedf:	6a 00                	push   0x0
c000bee1:	e8 26 c2 01 00       	call   c002810c <__divdf3>
c000bee6:	83 c4 10             	add    esp,0x10
c000bee9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bef6:	68 23 42 92 0c       	push   0xc924223
c000befb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf03:	e8 a3 b8 01 00       	call   c00277ab <__adddf3>
c000bf08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bf10:	83 c4 20             	add    esp,0x20
c000bf13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf1b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bf23:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bf26:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bf29:	7d 50                	jge    c000bf7b <sinc_multichan_vari_process+0x30f>
c000bf2b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf2e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf31:	01 c8                	add    eax,ecx
c000bf33:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf36:	99                   	cdq    
c000bf37:	f7 f9                	idiv   ecx
c000bf39:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf3d:	7d 0c                	jge    c000bf4b <sinc_multichan_vari_process+0x2df>
c000bf3f:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bf42:	85 ed                	test   ebp,ebp
c000bf44:	79 6b                	jns    c000bfb1 <sinc_multichan_vari_process+0x345>
c000bf46:	e9 e6 00 00 00       	jmp    c000c031 <sinc_multichan_vari_process+0x3c5>
c000bf4b:	50                   	push   eax
c000bf4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bf50:	57                   	push   edi
c000bf51:	53                   	push   ebx
c000bf52:	e8 9b fb ff ff       	call   c000baf2 <prepare_data>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bf5f:	85 c0                	test   eax,eax
c000bf61:	0f 85 bf 03 00 00    	jne    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf6d:	01 c8                	add    eax,ecx
c000bf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf72:	99                   	cdq    
c000bf73:	f7 f9                	idiv   ecx
c000bf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf79:	7c c4                	jl     c000bf3f <sinc_multichan_vari_process+0x2d3>
c000bf7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf83:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bf86:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bf89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf91:	89 06                	mov    DWORD PTR [esi],eax
c000bf93:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bf96:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bf99:	99                   	cdq    
c000bf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bf9d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bfa0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bfa3:	99                   	cdq    
c000bfa4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bfa7:	31 d2                	xor    edx,edx
c000bfa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bfac:	e9 75 03 00 00       	jmp    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bfb7:	e8 cf c4 01 00       	call   c002848b <__floatsidf>
c000bfbc:	83 c4 10             	add    esp,0x10
c000bfbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd7:	e8 cf b7 01 00       	call   c00277ab <__adddf3>
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfe3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff7:	e8 af b7 01 00       	call   c00277ab <__adddf3>
c000bffc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bfff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c003:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c007:	e8 7f c4 01 00       	call   c002848b <__floatsidf>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c013:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c017:	52                   	push   edx
c000c018:	50                   	push   eax
c000c019:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c021:	e8 cf c6 01 00       	call   c00286f5 <__gedf2>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	85 c0                	test   eax,eax
c000c02b:	0f 89 4a ff ff ff    	jns    c000bf7b <sinc_multichan_vari_process+0x30f>
c000c031:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c035:	0f 8e ed 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c03b:	83 ec 10             	sub    esp,0x10
c000c03e:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c041:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c044:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000c047:	ff 36                	push   DWORD PTR [esi]
c000c049:	e8 ae bd 01 00       	call   c0027dfc <__subdf3>
c000c04e:	83 c4 18             	add    esp,0x18
c000c051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c059:	52                   	push   edx
c000c05a:	50                   	push   eax
c000c05b:	e8 30 c8 01 00       	call   c0028890 <fabs>
c000c060:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c064:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c070:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07d:	e8 57 c6 01 00       	call   c00286d9 <__gtdf2>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	85 c0                	test   eax,eax
c000c087:	0f 8e 9b 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c08d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c08f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000c092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c09a:	52                   	push   edx
c000c09b:	50                   	push   eax
c000c09c:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c09f:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c0a2:	e8 55 bd 01 00       	call   c0027dfc <__subdf3>
c000c0a7:	59                   	pop    ecx
c000c0a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ac:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c0b3:	e8 d3 c3 01 00       	call   c002848b <__floatsidf>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c3:	52                   	push   edx
c000c0c4:	50                   	push   eax
c000c0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0cd:	e8 56 bd 01 00       	call   c0027e28 <__muldf3>
c000c0d2:	5d                   	pop    ebp
c000c0d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0db:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c0de:	e8 a8 c3 01 00       	call   c002848b <__floatsidf>
c000c0e3:	83 c4 10             	add    esp,0x10
c000c0e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ee:	52                   	push   edx
c000c0ef:	50                   	push   eax
c000c0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f8:	e8 0f c0 01 00       	call   c002810c <__divdf3>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c104:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c118:	e8 8e b6 01 00       	call   c00277ab <__adddf3>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c124:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c12e:	e8 58 c3 01 00       	call   c002848b <__floatsidf>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c13a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14e:	e8 a4 c5 01 00       	call   c00286f7 <__ltdf2>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	85 c0                	test   eax,eax
c000c158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c160:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c164:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c168:	78 10                	js     c000c17a <sinc_multichan_vari_process+0x50e>
c000c16a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c16e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c172:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c176:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c17a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c17e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c182:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c186:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c18a:	e8 99 bc 01 00       	call   c0027e28 <__muldf3>
c000c18f:	59                   	pop    ecx
c000c190:	5d                   	pop    ebp
c000c191:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c195:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c19d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c1a1:	e8 25 f9 ff ff       	call   c000bacb <double_to_fp>
c000c1a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1aa:	89 c5                	mov    ebp,eax
c000c1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b8:	e8 6b bc 01 00       	call   c0027e28 <__muldf3>
c000c1bd:	83 c4 18             	add    esp,0x18
c000c1c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c1c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c8:	52                   	push   edx
c000c1c9:	50                   	push   eax
c000c1ca:	e8 fc f8 ff ff       	call   c000bacb <double_to_fp>
c000c1cf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c1d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c1d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1d9:	8d 04 90             	lea    eax,[eax+edx*4]
c000c1dc:	50                   	push   eax
c000c1dd:	50                   	push   eax
c000c1de:	50                   	push   eax
c000c1df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e2:	e8 a4 c2 01 00       	call   c002848b <__floatsidf>
c000c1e7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c1eb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c1ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1ff:	e8 08 bf 01 00       	call   c002810c <__divdf3>
c000c204:	83 c4 1c             	add    esp,0x1c
c000c207:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c20b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c20f:	52                   	push   edx
c000c210:	89 ea                	mov    edx,ebp
c000c212:	50                   	push   eax
c000c213:	89 d8                	mov    eax,ebx
c000c215:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c218:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c21c:	e8 69 ed ff ff       	call   c000af8a <calc_output_multi>
c000c221:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c224:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c233:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c237:	e8 d0 be 01 00       	call   c002810c <__divdf3>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c243:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c253:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c257:	e8 4f b5 01 00       	call   c00277ab <__adddf3>
c000c25c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c260:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c264:	83 c4 28             	add    esp,0x28
c000c267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26f:	e8 3c c6 01 00       	call   c00288b0 <lrint>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	50                   	push   eax
c000c278:	e8 0e c2 01 00       	call   c002848b <__floatsidf>
c000c27d:	83 c4 10             	add    esp,0x10
c000c280:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c288:	52                   	push   edx
c000c289:	50                   	push   eax
c000c28a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c28e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c292:	e8 65 bb 01 00       	call   c0027dfc <__subdf3>
c000c297:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c29b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29f:	83 c4 20             	add    esp,0x20
c000c2a2:	6a 00                	push   0x0
c000c2a4:	6a 00                	push   0x0
c000c2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ae:	e8 44 c4 01 00       	call   c00286f7 <__ltdf2>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	85 c0                	test   eax,eax
c000c2b8:	79 20                	jns    c000c2da <sinc_multichan_vari_process+0x66e>
c000c2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ca:	e8 dc b4 01 00       	call   c00277ab <__adddf3>
c000c2cf:	83 c4 10             	add    esp,0x10
c000c2d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c2dd:	83 ec 10             	sub    esp,0x10
c000c2e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c2e4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f7:	e8 00 bb 01 00       	call   c0027dfc <__subdf3>
c000c2fc:	83 c4 18             	add    esp,0x18
c000c2ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	52                   	push   edx
c000c308:	50                   	push   eax
c000c309:	e8 a2 c5 01 00       	call   c00288b0 <lrint>
c000c30e:	0f af e8             	imul   ebp,eax
c000c311:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c315:	83 c4 10             	add    esp,0x10
c000c318:	01 e8                	add    eax,ebp
c000c31a:	99                   	cdq    
c000c31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c321:	e9 fd fb ff ff       	jmp    c000bf23 <sinc_multichan_vari_process+0x2b7>
c000c326:	83 c4 4c             	add    esp,0x4c
c000c329:	89 d0                	mov    eax,edx
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    

c000c330 <sinc_hex_vari_process>:
c000c330:	55                   	push   ebp
c000c331:	ba 05 00 00 00       	mov    edx,0x5
c000c336:	57                   	push   edi
c000c337:	56                   	push   esi
c000c338:	53                   	push   ebx
c000c339:	83 ec 4c             	sub    esp,0x4c
c000c33c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c340:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c344:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c347:	85 db                	test   ebx,ebx
c000c349:	0f 84 9c 06 00 00    	je     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c34f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c352:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c355:	0f af c7             	imul   eax,edi
c000c358:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c35b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c35e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c365:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c36c:	0f af c7             	imul   eax,edi
c000c36f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c372:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c375:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c378:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c37c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c380:	68 00 00 70 3f       	push   0x3f700000
c000c385:	6a 00                	push   0x0
c000c387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38f:	e8 63 c3 01 00       	call   c00286f7 <__ltdf2>
c000c394:	83 c4 10             	add    esp,0x10
c000c397:	ba 16 00 00 00       	mov    edx,0x16
c000c39c:	85 c0                	test   eax,eax
c000c39e:	0f 88 47 06 00 00    	js     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3a4:	68 00 00 70 40       	push   0x40700000
c000c3a9:	6a 00                	push   0x0
c000c3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	e8 21 c3 01 00       	call   c00286d9 <__gtdf2>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	ba 16 00 00 00       	mov    edx,0x16
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 8f 23 06 00 00    	jg     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c3ce:	e8 b8 c0 01 00       	call   c002848b <__floatsidf>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3de:	68 00 00 00 40       	push   0x40000000
c000c3e3:	6a 00                	push   0x0
c000c3e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3ed:	e8 b9 b3 01 00       	call   c00277ab <__adddf3>
c000c3f2:	59                   	pop    ecx
c000c3f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3f7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3fe:	e8 88 c0 01 00       	call   c002848b <__floatsidf>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c40a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c40e:	52                   	push   edx
c000c40f:	50                   	push   eax
c000c410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c418:	e8 ef bc 01 00       	call   c002810c <__divdf3>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c424:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c428:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c42b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c42e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c432:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c446:	e8 8e c2 01 00       	call   c00286d9 <__gtdf2>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	85 c0                	test   eax,eax
c000c450:	7e 2d                	jle    c000c47f <sinc_hex_vari_process+0x14f>
c000c452:	68 00 00 f0 3f       	push   0x3ff00000
c000c457:	6a 00                	push   0x0
c000c459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c461:	e8 91 c2 01 00       	call   c00286f7 <__ltdf2>
c000c466:	83 c4 10             	add    esp,0x10
c000c469:	85 c0                	test   eax,eax
c000c46b:	79 4d                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c475:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c479:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c47d:	eb 1b                	jmp    c000c49a <sinc_hex_vari_process+0x16a>
c000c47f:	68 00 00 f0 3f       	push   0x3ff00000
c000c484:	6a 00                	push   0x0
c000c486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48e:	e8 64 c2 01 00       	call   c00286f7 <__ltdf2>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	85 c0                	test   eax,eax
c000c498:	79 20                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c49a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4aa:	e8 5d bc 01 00       	call   c002810c <__divdf3>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4ba:	50                   	push   eax
c000c4bb:	50                   	push   eax
c000c4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c4:	e8 e7 c3 01 00       	call   c00288b0 <lrint>
c000c4c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c4cc:	40                   	inc    eax
c000c4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d1:	0f af c7             	imul   eax,edi
c000c4d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4df:	58                   	pop    eax
c000c4e0:	5a                   	pop    edx
c000c4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e9:	e8 c2 c3 01 00       	call   c00288b0 <lrint>
c000c4ee:	83 ec 0c             	sub    esp,0xc
c000c4f1:	50                   	push   eax
c000c4f2:	e8 94 bf 01 00       	call   c002848b <__floatsidf>
c000c4f7:	83 c4 10             	add    esp,0x10
c000c4fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c502:	52                   	push   edx
c000c503:	50                   	push   eax
c000c504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c50c:	e8 eb b8 01 00       	call   c0027dfc <__subdf3>
c000c511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c519:	83 c4 20             	add    esp,0x20
c000c51c:	6a 00                	push   0x0
c000c51e:	6a 00                	push   0x0
c000c520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c528:	e8 ca c1 01 00       	call   c00286f7 <__ltdf2>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	85 c0                	test   eax,eax
c000c532:	79 1f                	jns    c000c553 <sinc_hex_vari_process+0x223>
c000c534:	68 00 00 f0 3f       	push   0x3ff00000
c000c539:	6a 00                	push   0x0
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 63 b2 01 00       	call   c00277ab <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c56c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c570:	e8 87 b8 01 00       	call   c0027dfc <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c57c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 29 c3 01 00       	call   c00288b0 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c58e:	01 f8                	add    eax,edi
c000c590:	99                   	cdq    
c000c591:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c594:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59f:	68 00 00 f0 3f       	push   0x3ff00000
c000c5a4:	6a 00                	push   0x0
c000c5a6:	e8 61 bb 01 00       	call   c002810c <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c5bb:	68 23 42 92 0c       	push   0xc924223
c000c5c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c8:	e8 de b1 01 00       	call   c00277ab <__adddf3>
c000c5cd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c5d1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c5d5:	83 c4 20             	add    esp,0x20
c000c5d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c5e0:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c5e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5eb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c5ee:	7d 50                	jge    c000c640 <sinc_hex_vari_process+0x310>
c000c5f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c5f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c5f6:	01 c8                	add    eax,ecx
c000c5f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c5fb:	99                   	cdq    
c000c5fc:	f7 f9                	idiv   ecx
c000c5fe:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c602:	7d 0c                	jge    c000c610 <sinc_hex_vari_process+0x2e0>
c000c604:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c607:	85 ff                	test   edi,edi
c000c609:	79 6c                	jns    c000c677 <sinc_hex_vari_process+0x347>
c000c60b:	e9 e7 00 00 00       	jmp    c000c6f7 <sinc_hex_vari_process+0x3c7>
c000c610:	50                   	push   eax
c000c611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c615:	56                   	push   esi
c000c616:	53                   	push   ebx
c000c617:	e8 d6 f4 ff ff       	call   c000baf2 <prepare_data>
c000c61c:	83 c4 10             	add    esp,0x10
c000c61f:	89 c2                	mov    edx,eax
c000c621:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c624:	85 c0                	test   eax,eax
c000c626:	0f 85 bf 03 00 00    	jne    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c62c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c62f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c632:	01 c8                	add    eax,ecx
c000c634:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c637:	99                   	cdq    
c000c638:	f7 f9                	idiv   ecx
c000c63a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c63e:	7c c4                	jl     c000c604 <sinc_hex_vari_process+0x2d4>
c000c640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c648:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c64b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c652:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c656:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c659:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c65c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c65f:	99                   	cdq    
c000c660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c663:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c666:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c669:	99                   	cdq    
c000c66a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c66d:	31 d2                	xor    edx,edx
c000c66f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c672:	e9 74 03 00 00       	jmp    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c677:	83 ec 0c             	sub    esp,0xc
c000c67a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c67d:	e8 09 be 01 00       	call   c002848b <__floatsidf>
c000c682:	83 c4 10             	add    esp,0x10
c000c685:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c689:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c68d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c69d:	e8 09 b1 01 00       	call   c00277ab <__adddf3>
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6bd:	e8 e9 b0 01 00       	call   c00277ab <__adddf3>
c000c6c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6cd:	e8 b9 bd 01 00       	call   c002848b <__floatsidf>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	50                   	push   eax
c000c6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e7:	e8 09 c0 01 00       	call   c00286f5 <__gedf2>
c000c6ec:	83 c4 10             	add    esp,0x10
c000c6ef:	85 c0                	test   eax,eax
c000c6f1:	0f 89 49 ff ff ff    	jns    c000c640 <sinc_hex_vari_process+0x310>
c000c6f7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c6fb:	0f 8e ef 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c701:	83 ec 10             	sub    esp,0x10
c000c704:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c707:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c70a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c70d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c710:	e8 e7 b6 01 00       	call   c0027dfc <__subdf3>
c000c715:	83 c4 18             	add    esp,0x18
c000c718:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c71c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c720:	52                   	push   edx
c000c721:	50                   	push   eax
c000c722:	e8 69 c1 01 00       	call   c0028890 <fabs>
c000c727:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c72b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c737:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c744:	e8 90 bf 01 00       	call   c00286d9 <__gtdf2>
c000c749:	83 c4 10             	add    esp,0x10
c000c74c:	85 c0                	test   eax,eax
c000c74e:	0f 8e 9c 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c754:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c757:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c75e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c762:	52                   	push   edx
c000c763:	50                   	push   eax
c000c764:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c767:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c76a:	e8 8d b6 01 00       	call   c0027dfc <__subdf3>
c000c76f:	59                   	pop    ecx
c000c770:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c774:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c778:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c77b:	e8 0b bd 01 00       	call   c002848b <__floatsidf>
c000c780:	83 c4 10             	add    esp,0x10
c000c783:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c787:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78b:	52                   	push   edx
c000c78c:	50                   	push   eax
c000c78d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c795:	e8 8e b6 01 00       	call   c0027e28 <__muldf3>
c000c79a:	5f                   	pop    edi
c000c79b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c79f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c7a3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c7a6:	e8 e0 bc 01 00       	call   c002848b <__floatsidf>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b6:	52                   	push   edx
c000c7b7:	50                   	push   eax
c000c7b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c0:	e8 47 b9 01 00       	call   c002810c <__divdf3>
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7e0:	e8 c6 af 01 00       	call   c00277ab <__adddf3>
c000c7e5:	83 c4 10             	add    esp,0x10
c000c7e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c7f6:	e8 90 bc 01 00       	call   c002848b <__floatsidf>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c802:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	e8 dc be 01 00       	call   c00286f7 <__ltdf2>
c000c81b:	83 c4 10             	add    esp,0x10
c000c81e:	85 c0                	test   eax,eax
c000c820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c824:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c828:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c82c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c830:	78 10                	js     c000c842 <sinc_hex_vari_process+0x512>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c83a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c83e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c842:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c846:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c84e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c852:	e8 d1 b5 01 00       	call   c0027e28 <__muldf3>
c000c857:	59                   	pop    ecx
c000c858:	5f                   	pop    edi
c000c859:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c861:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c869:	e8 5d f2 ff ff       	call   c000bacb <double_to_fp>
c000c86e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c872:	89 c7                	mov    edi,eax
c000c874:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c87c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c880:	e8 a3 b5 01 00       	call   c0027e28 <__muldf3>
c000c885:	83 c4 18             	add    esp,0x18
c000c888:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c88c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c890:	52                   	push   edx
c000c891:	50                   	push   eax
c000c892:	e8 34 f2 ff ff       	call   c000bacb <double_to_fp>
c000c897:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c89a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c89e:	83 c4 0c             	add    esp,0xc
c000c8a1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c8a4:	8d 04 90             	lea    eax,[eax+edx*4]
c000c8a7:	50                   	push   eax
c000c8a8:	50                   	push   eax
c000c8a9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8ac:	e8 da bb 01 00       	call   c002848b <__floatsidf>
c000c8b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c8b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c8b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c9:	e8 3e b8 01 00       	call   c002810c <__divdf3>
c000c8ce:	83 c4 18             	add    esp,0x18
c000c8d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d9:	52                   	push   edx
c000c8da:	89 fa                	mov    edx,edi
c000c8dc:	50                   	push   eax
c000c8dd:	89 d8                	mov    eax,ebx
c000c8df:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c8e3:	e8 50 de ff ff       	call   c000a738 <calc_output_hex>
c000c8e8:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c8ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8fc:	e8 0b b8 01 00       	call   c002810c <__divdf3>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c908:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c918:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c91c:	e8 8a ae 01 00       	call   c00277ab <__adddf3>
c000c921:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c925:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c929:	83 c4 18             	add    esp,0x18
c000c92c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c934:	e8 77 bf 01 00       	call   c00288b0 <lrint>
c000c939:	83 ec 0c             	sub    esp,0xc
c000c93c:	50                   	push   eax
c000c93d:	e8 49 bb 01 00       	call   c002848b <__floatsidf>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c949:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c94d:	52                   	push   edx
c000c94e:	50                   	push   eax
c000c94f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c957:	e8 a0 b4 01 00       	call   c0027dfc <__subdf3>
c000c95c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c960:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c964:	83 c4 20             	add    esp,0x20
c000c967:	6a 00                	push   0x0
c000c969:	6a 00                	push   0x0
c000c96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c96f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c973:	e8 7f bd 01 00       	call   c00286f7 <__ltdf2>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	85 c0                	test   eax,eax
c000c97d:	79 20                	jns    c000c99f <sinc_hex_vari_process+0x66f>
c000c97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c987:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98f:	e8 17 ae 01 00       	call   c00277ab <__adddf3>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c99b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c99f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9a2:	83 ec 10             	sub    esp,0x10
c000c9a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9a9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9bc:	e8 3b b4 01 00       	call   c0027dfc <__subdf3>
c000c9c1:	83 c4 18             	add    esp,0x18
c000c9c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	52                   	push   edx
c000c9cd:	50                   	push   eax
c000c9ce:	e8 dd be 01 00       	call   c00288b0 <lrint>
c000c9d3:	0f af f8             	imul   edi,eax
c000c9d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	01 f8                	add    eax,edi
c000c9df:	99                   	cdq    
c000c9e0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c9e3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c9e6:	e9 fd fb ff ff       	jmp    c000c5e8 <sinc_hex_vari_process+0x2b8>
c000c9eb:	83 c4 4c             	add    esp,0x4c
c000c9ee:	89 d0                	mov    eax,edx
c000c9f0:	5b                   	pop    ebx
c000c9f1:	5e                   	pop    esi
c000c9f2:	5f                   	pop    edi
c000c9f3:	5d                   	pop    ebp
c000c9f4:	c3                   	ret    

c000c9f5 <sinc_quad_vari_process>:
c000c9f5:	55                   	push   ebp
c000c9f6:	ba 05 00 00 00       	mov    edx,0x5
c000c9fb:	57                   	push   edi
c000c9fc:	56                   	push   esi
c000c9fd:	53                   	push   ebx
c000c9fe:	83 ec 4c             	sub    esp,0x4c
c000ca01:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca05:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca09:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca0c:	85 db                	test   ebx,ebx
c000ca0e:	0f 84 9c 06 00 00    	je     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca14:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ca17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca1a:	0f af c7             	imul   eax,edi
c000ca1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ca20:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ca23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ca2a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ca31:	0f af c7             	imul   eax,edi
c000ca34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca37:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca45:	68 00 00 70 3f       	push   0x3f700000
c000ca4a:	6a 00                	push   0x0
c000ca4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 9e bc 01 00       	call   c00286f7 <__ltdf2>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	ba 16 00 00 00       	mov    edx,0x16
c000ca61:	85 c0                	test   eax,eax
c000ca63:	0f 88 47 06 00 00    	js     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca69:	68 00 00 70 40       	push   0x40700000
c000ca6e:	6a 00                	push   0x0
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca78:	e8 5c bc 01 00       	call   c00286d9 <__gtdf2>
c000ca7d:	83 c4 10             	add    esp,0x10
c000ca80:	ba 16 00 00 00       	mov    edx,0x16
c000ca85:	85 c0                	test   eax,eax
c000ca87:	0f 8f 23 06 00 00    	jg     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca8d:	83 ec 0c             	sub    esp,0xc
c000ca90:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ca93:	e8 f3 b9 01 00       	call   c002848b <__floatsidf>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000caa3:	68 00 00 00 40       	push   0x40000000
c000caa8:	6a 00                	push   0x0
c000caaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cab2:	e8 f4 ac 01 00       	call   c00277ab <__adddf3>
c000cab7:	59                   	pop    ecx
c000cab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cabc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cac0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cac3:	e8 c3 b9 01 00       	call   c002848b <__floatsidf>
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cacf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cad3:	52                   	push   edx
c000cad4:	50                   	push   eax
c000cad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cadd:	e8 2a b6 01 00       	call   c002810c <__divdf3>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000caed:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000caf0:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000caf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0b:	e8 c9 bb 01 00       	call   c00286d9 <__gtdf2>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	85 c0                	test   eax,eax
c000cb15:	7e 2d                	jle    c000cb44 <sinc_quad_vari_process+0x14f>
c000cb17:	68 00 00 f0 3f       	push   0x3ff00000
c000cb1c:	6a 00                	push   0x0
c000cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb26:	e8 cc bb 01 00       	call   c00286f7 <__ltdf2>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	85 c0                	test   eax,eax
c000cb30:	79 4d                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb42:	eb 1b                	jmp    c000cb5f <sinc_quad_vari_process+0x16a>
c000cb44:	68 00 00 f0 3f       	push   0x3ff00000
c000cb49:	6a 00                	push   0x0
c000cb4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb53:	e8 9f bb 01 00       	call   c00286f7 <__ltdf2>
c000cb58:	83 c4 10             	add    esp,0x10
c000cb5b:	85 c0                	test   eax,eax
c000cb5d:	79 20                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6f:	e8 98 b5 01 00       	call   c002810c <__divdf3>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb7f:	50                   	push   eax
c000cb80:	50                   	push   eax
c000cb81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb89:	e8 22 bd 01 00       	call   c00288b0 <lrint>
c000cb8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cb91:	40                   	inc    eax
c000cb92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb96:	0f af c7             	imul   eax,edi
c000cb99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cb9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba4:	58                   	pop    eax
c000cba5:	5a                   	pop    edx
c000cba6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbae:	e8 fd bc 01 00       	call   c00288b0 <lrint>
c000cbb3:	83 ec 0c             	sub    esp,0xc
c000cbb6:	50                   	push   eax
c000cbb7:	e8 cf b8 01 00       	call   c002848b <__floatsidf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc7:	52                   	push   edx
c000cbc8:	50                   	push   eax
c000cbc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbd1:	e8 26 b2 01 00       	call   c0027dfc <__subdf3>
c000cbd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbde:	83 c4 20             	add    esp,0x20
c000cbe1:	6a 00                	push   0x0
c000cbe3:	6a 00                	push   0x0
c000cbe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbed:	e8 05 bb 01 00       	call   c00286f7 <__ltdf2>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	85 c0                	test   eax,eax
c000cbf7:	79 1f                	jns    c000cc18 <sinc_quad_vari_process+0x223>
c000cbf9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbfe:	6a 00                	push   0x0
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 9e ab 01 00       	call   c00277ab <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc35:	e8 c2 b1 01 00       	call   c0027dfc <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 64 bc 01 00       	call   c00288b0 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc53:	01 f8                	add    eax,edi
c000cc55:	99                   	cdq    
c000cc56:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc59:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc64:	68 00 00 f0 3f       	push   0x3ff00000
c000cc69:	6a 00                	push   0x0
c000cc6b:	e8 9c b4 01 00       	call   c002810c <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc80:	68 23 42 92 0c       	push   0xc924223
c000cc85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc8d:	e8 19 ab 01 00       	call   c00277ab <__adddf3>
c000cc92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc9a:	83 c4 20             	add    esp,0x20
c000cc9d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cca5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ccad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccb0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccb3:	7d 50                	jge    c000cd05 <sinc_quad_vari_process+0x310>
c000ccb5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccbb:	01 c8                	add    eax,ecx
c000ccbd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccc0:	99                   	cdq    
c000ccc1:	f7 f9                	idiv   ecx
c000ccc3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ccc7:	7d 0c                	jge    c000ccd5 <sinc_quad_vari_process+0x2e0>
c000ccc9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cccc:	85 ff                	test   edi,edi
c000ccce:	79 6c                	jns    c000cd3c <sinc_quad_vari_process+0x347>
c000ccd0:	e9 e7 00 00 00       	jmp    c000cdbc <sinc_quad_vari_process+0x3c7>
c000ccd5:	50                   	push   eax
c000ccd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ccda:	56                   	push   esi
c000ccdb:	53                   	push   ebx
c000ccdc:	e8 11 ee ff ff       	call   c000baf2 <prepare_data>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	89 c2                	mov    edx,eax
c000cce6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cce9:	85 c0                	test   eax,eax
c000cceb:	0f 85 bf 03 00 00    	jne    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ccf1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccf7:	01 c8                	add    eax,ecx
c000ccf9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccfc:	99                   	cdq    
c000ccfd:	f7 f9                	idiv   ecx
c000ccff:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cd03:	7c c4                	jl     c000ccc9 <sinc_quad_vari_process+0x2d4>
c000cd05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd0d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd24:	99                   	cdq    
c000cd25:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd28:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd2e:	99                   	cdq    
c000cd2f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd32:	31 d2                	xor    edx,edx
c000cd34:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd37:	e9 74 03 00 00       	jmp    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd42:	e8 44 b7 01 00       	call   c002848b <__floatsidf>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd4e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd62:	e8 44 aa 01 00       	call   c00277ab <__adddf3>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd82:	e8 24 aa 01 00       	call   c00277ab <__adddf3>
c000cd87:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd92:	e8 f4 b6 01 00       	call   c002848b <__floatsidf>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	50                   	push   eax
c000cda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cda8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdac:	e8 44 b9 01 00       	call   c00286f5 <__gedf2>
c000cdb1:	83 c4 10             	add    esp,0x10
c000cdb4:	85 c0                	test   eax,eax
c000cdb6:	0f 89 49 ff ff ff    	jns    c000cd05 <sinc_quad_vari_process+0x310>
c000cdbc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdc0:	0f 8e ef 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000cdc6:	83 ec 10             	sub    esp,0x10
c000cdc9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdcc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdcf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdd2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdd5:	e8 22 b0 01 00       	call   c0027dfc <__subdf3>
c000cdda:	83 c4 18             	add    esp,0x18
c000cddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde5:	52                   	push   edx
c000cde6:	50                   	push   eax
c000cde7:	e8 a4 ba 01 00       	call   c0028890 <fabs>
c000cdec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdfc:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce09:	e8 cb b8 01 00       	call   c00286d9 <__gtdf2>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	85 c0                	test   eax,eax
c000ce13:	0f 8e 9c 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000ce19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ce27:	52                   	push   edx
c000ce28:	50                   	push   eax
c000ce29:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce2c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce2f:	e8 c8 af 01 00       	call   c0027dfc <__subdf3>
c000ce34:	59                   	pop    ecx
c000ce35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce39:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce40:	e8 46 b6 01 00       	call   c002848b <__floatsidf>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce50:	52                   	push   edx
c000ce51:	50                   	push   eax
c000ce52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce5a:	e8 c9 af 01 00       	call   c0027e28 <__muldf3>
c000ce5f:	5f                   	pop    edi
c000ce60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce64:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce68:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce6b:	e8 1b b6 01 00       	call   c002848b <__floatsidf>
c000ce70:	83 c4 10             	add    esp,0x10
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce7b:	52                   	push   edx
c000ce7c:	50                   	push   eax
c000ce7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce85:	e8 82 b2 01 00       	call   c002810c <__divdf3>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea5:	e8 01 a9 01 00       	call   c00277ab <__adddf3>
c000ceaa:	83 c4 10             	add    esp,0x10
c000cead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceb5:	83 ec 0c             	sub    esp,0xc
c000ceb8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cebb:	e8 cb b5 01 00       	call   c002848b <__floatsidf>
c000cec0:	83 c4 10             	add    esp,0x10
c000cec3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cec7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	e8 17 b8 01 00       	call   c00286f7 <__ltdf2>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	85 c0                	test   eax,eax
c000cee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cee9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ceed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cef1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cef5:	78 10                	js     c000cf07 <sinc_quad_vari_process+0x512>
c000cef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cefb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ceff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	e8 0c af 01 00       	call   c0027e28 <__muldf3>
c000cf1c:	59                   	pop    ecx
c000cf1d:	5f                   	pop    edi
c000cf1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2e:	e8 98 eb ff ff       	call   c000bacb <double_to_fp>
c000cf33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf37:	89 c7                	mov    edi,eax
c000cf39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf45:	e8 de ae 01 00       	call   c0027e28 <__muldf3>
c000cf4a:	83 c4 18             	add    esp,0x18
c000cf4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf55:	52                   	push   edx
c000cf56:	50                   	push   eax
c000cf57:	e8 6f eb ff ff       	call   c000bacb <double_to_fp>
c000cf5c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf63:	83 c4 0c             	add    esp,0xc
c000cf66:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf69:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf6c:	50                   	push   eax
c000cf6d:	50                   	push   eax
c000cf6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf71:	e8 15 b5 01 00       	call   c002848b <__floatsidf>
c000cf76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8e:	e8 79 b1 01 00       	call   c002810c <__divdf3>
c000cf93:	83 c4 18             	add    esp,0x18
c000cf96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf9e:	52                   	push   edx
c000cf9f:	89 fa                	mov    edx,edi
c000cfa1:	50                   	push   eax
c000cfa2:	89 d8                	mov    eax,ebx
c000cfa4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfa8:	e8 a5 d1 ff ff       	call   c000a152 <calc_output_quad>
c000cfad:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cfb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc1:	e8 46 b1 01 00       	call   c002810c <__divdf3>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe1:	e8 c5 a7 01 00       	call   c00277ab <__adddf3>
c000cfe6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cfea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cfee:	83 c4 18             	add    esp,0x18
c000cff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff9:	e8 b2 b8 01 00       	call   c00288b0 <lrint>
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	50                   	push   eax
c000d002:	e8 84 b4 01 00       	call   c002848b <__floatsidf>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d012:	52                   	push   edx
c000d013:	50                   	push   eax
c000d014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d018:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01c:	e8 db ad 01 00       	call   c0027dfc <__subdf3>
c000d021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d029:	83 c4 20             	add    esp,0x20
c000d02c:	6a 00                	push   0x0
c000d02e:	6a 00                	push   0x0
c000d030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d038:	e8 ba b6 01 00       	call   c00286f7 <__ltdf2>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	85 c0                	test   eax,eax
c000d042:	79 20                	jns    c000d064 <sinc_quad_vari_process+0x66f>
c000d044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d04c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d054:	e8 52 a7 01 00       	call   c00277ab <__adddf3>
c000d059:	83 c4 10             	add    esp,0x10
c000d05c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d064:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d067:	83 ec 10             	sub    esp,0x10
c000d06a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d06e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d07d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d081:	e8 76 ad 01 00       	call   c0027dfc <__subdf3>
c000d086:	83 c4 18             	add    esp,0x18
c000d089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 18 b8 01 00       	call   c00288b0 <lrint>
c000d098:	0f af f8             	imul   edi,eax
c000d09b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d09f:	83 c4 10             	add    esp,0x10
c000d0a2:	01 f8                	add    eax,edi
c000d0a4:	99                   	cdq    
c000d0a5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0a8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0ab:	e9 fd fb ff ff       	jmp    c000ccad <sinc_quad_vari_process+0x2b8>
c000d0b0:	83 c4 4c             	add    esp,0x4c
c000d0b3:	89 d0                	mov    eax,edx
c000d0b5:	5b                   	pop    ebx
c000d0b6:	5e                   	pop    esi
c000d0b7:	5f                   	pop    edi
c000d0b8:	5d                   	pop    ebp
c000d0b9:	c3                   	ret    

c000d0ba <sinc_stereo_vari_process>:
c000d0ba:	55                   	push   ebp
c000d0bb:	ba 05 00 00 00       	mov    edx,0x5
c000d0c0:	57                   	push   edi
c000d0c1:	56                   	push   esi
c000d0c2:	53                   	push   ebx
c000d0c3:	83 ec 4c             	sub    esp,0x4c
c000d0c6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0ca:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0ce:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	0f 84 9c 06 00 00    	je     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d0d9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d0dc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0df:	0f af c7             	imul   eax,edi
c000d0e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d0e5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d0e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0f6:	0f af c7             	imul   eax,edi
c000d0f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d102:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d10a:	68 00 00 70 3f       	push   0x3f700000
c000d10f:	6a 00                	push   0x0
c000d111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d119:	e8 d9 b5 01 00       	call   c00286f7 <__ltdf2>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	ba 16 00 00 00       	mov    edx,0x16
c000d126:	85 c0                	test   eax,eax
c000d128:	0f 88 47 06 00 00    	js     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d12e:	68 00 00 70 40       	push   0x40700000
c000d133:	6a 00                	push   0x0
c000d135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13d:	e8 97 b5 01 00       	call   c00286d9 <__gtdf2>
c000d142:	83 c4 10             	add    esp,0x10
c000d145:	ba 16 00 00 00       	mov    edx,0x16
c000d14a:	85 c0                	test   eax,eax
c000d14c:	0f 8f 23 06 00 00    	jg     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d152:	83 ec 0c             	sub    esp,0xc
c000d155:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d158:	e8 2e b3 01 00       	call   c002848b <__floatsidf>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d164:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d168:	68 00 00 00 40       	push   0x40000000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d173:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d177:	e8 2f a6 01 00       	call   c00277ab <__adddf3>
c000d17c:	59                   	pop    ecx
c000d17d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d181:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d185:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d188:	e8 fe b2 01 00       	call   c002848b <__floatsidf>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d198:	52                   	push   edx
c000d199:	50                   	push   eax
c000d19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d19e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1a2:	e8 65 af 01 00       	call   c002810c <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d1b5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d1b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1d0:	e8 04 b5 01 00       	call   c00286d9 <__gtdf2>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	85 c0                	test   eax,eax
c000d1da:	7e 2d                	jle    c000d209 <sinc_stereo_vari_process+0x14f>
c000d1dc:	68 00 00 f0 3f       	push   0x3ff00000
c000d1e1:	6a 00                	push   0x0
c000d1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1eb:	e8 07 b5 01 00       	call   c00286f7 <__ltdf2>
c000d1f0:	83 c4 10             	add    esp,0x10
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	79 4d                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d203:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d207:	eb 1b                	jmp    c000d224 <sinc_stereo_vari_process+0x16a>
c000d209:	68 00 00 f0 3f       	push   0x3ff00000
c000d20e:	6a 00                	push   0x0
c000d210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d218:	e8 da b4 01 00       	call   c00286f7 <__ltdf2>
c000d21d:	83 c4 10             	add    esp,0x10
c000d220:	85 c0                	test   eax,eax
c000d222:	79 20                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d224:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d228:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d234:	e8 d3 ae 01 00       	call   c002810c <__divdf3>
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d240:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d244:	50                   	push   eax
c000d245:	50                   	push   eax
c000d246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24e:	e8 5d b6 01 00       	call   c00288b0 <lrint>
c000d253:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d256:	40                   	inc    eax
c000d257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d25b:	0f af c7             	imul   eax,edi
c000d25e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d269:	58                   	pop    eax
c000d26a:	5a                   	pop    edx
c000d26b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d273:	e8 38 b6 01 00       	call   c00288b0 <lrint>
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	50                   	push   eax
c000d27c:	e8 0a b2 01 00       	call   c002848b <__floatsidf>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28c:	52                   	push   edx
c000d28d:	50                   	push   eax
c000d28e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d296:	e8 61 ab 01 00       	call   c0027dfc <__subdf3>
c000d29b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a3:	83 c4 20             	add    esp,0x20
c000d2a6:	6a 00                	push   0x0
c000d2a8:	6a 00                	push   0x0
c000d2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b2:	e8 40 b4 01 00       	call   c00286f7 <__ltdf2>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	85 c0                	test   eax,eax
c000d2bc:	79 1f                	jns    c000d2dd <sinc_stereo_vari_process+0x223>
c000d2be:	68 00 00 f0 3f       	push   0x3ff00000
c000d2c3:	6a 00                	push   0x0
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 d9 a4 01 00       	call   c00277ab <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2fa:	e8 fd aa 01 00       	call   c0027dfc <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 9f b5 01 00       	call   c00288b0 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d318:	01 f8                	add    eax,edi
c000d31a:	99                   	cdq    
c000d31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d329:	68 00 00 f0 3f       	push   0x3ff00000
c000d32e:	6a 00                	push   0x0
c000d330:	e8 d7 ad 01 00       	call   c002810c <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d33c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d340:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d345:	68 23 42 92 0c       	push   0xc924223
c000d34a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d352:	e8 54 a4 01 00       	call   c00277ab <__adddf3>
c000d357:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d35b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d35f:	83 c4 20             	add    esp,0x20
c000d362:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d36a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d372:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d375:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d378:	7d 50                	jge    c000d3ca <sinc_stereo_vari_process+0x310>
c000d37a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d37d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d380:	01 c8                	add    eax,ecx
c000d382:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d385:	99                   	cdq    
c000d386:	f7 f9                	idiv   ecx
c000d388:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d38c:	7d 0c                	jge    c000d39a <sinc_stereo_vari_process+0x2e0>
c000d38e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d391:	85 ff                	test   edi,edi
c000d393:	79 6c                	jns    c000d401 <sinc_stereo_vari_process+0x347>
c000d395:	e9 e7 00 00 00       	jmp    c000d481 <sinc_stereo_vari_process+0x3c7>
c000d39a:	50                   	push   eax
c000d39b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d39f:	56                   	push   esi
c000d3a0:	53                   	push   ebx
c000d3a1:	e8 4c e7 ff ff       	call   c000baf2 <prepare_data>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	89 c2                	mov    edx,eax
c000d3ab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d3ae:	85 c0                	test   eax,eax
c000d3b0:	0f 85 bf 03 00 00    	jne    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d3b6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d3b9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d3bc:	01 c8                	add    eax,ecx
c000d3be:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d3c1:	99                   	cdq    
c000d3c2:	f7 f9                	idiv   ecx
c000d3c4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d3c8:	7c c4                	jl     c000d38e <sinc_stereo_vari_process+0x2d4>
c000d3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d3d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d3e0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d3e3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d3e6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d3e9:	99                   	cdq    
c000d3ea:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3ed:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d3f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d3f3:	99                   	cdq    
c000d3f4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3f7:	31 d2                	xor    edx,edx
c000d3f9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d3fc:	e9 74 03 00 00       	jmp    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d401:	83 ec 0c             	sub    esp,0xc
c000d404:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d407:	e8 7f b0 01 00       	call   c002848b <__floatsidf>
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d413:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d427:	e8 7f a3 01 00       	call   c00277ab <__adddf3>
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d433:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d447:	e8 5f a3 01 00       	call   c00277ab <__adddf3>
c000d44c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d44f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d453:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d457:	e8 2f b0 01 00       	call   c002848b <__floatsidf>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	50                   	push   eax
c000d469:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d46d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d471:	e8 7f b2 01 00       	call   c00286f5 <__gedf2>
c000d476:	83 c4 10             	add    esp,0x10
c000d479:	85 c0                	test   eax,eax
c000d47b:	0f 89 49 ff ff ff    	jns    c000d3ca <sinc_stereo_vari_process+0x310>
c000d481:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d485:	0f 8e ef 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d48b:	83 ec 10             	sub    esp,0x10
c000d48e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d491:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d494:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d497:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d49a:	e8 5d a9 01 00       	call   c0027dfc <__subdf3>
c000d49f:	83 c4 18             	add    esp,0x18
c000d4a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4aa:	52                   	push   edx
c000d4ab:	50                   	push   eax
c000d4ac:	e8 df b3 01 00       	call   c0028890 <fabs>
c000d4b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4b9:	83 c4 10             	add    esp,0x10
c000d4bc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d4c1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ce:	e8 06 b2 01 00       	call   c00286d9 <__gtdf2>
c000d4d3:	83 c4 10             	add    esp,0x10
c000d4d6:	85 c0                	test   eax,eax
c000d4d8:	0f 8e 9c 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d4de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d4e1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d4e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d4ec:	52                   	push   edx
c000d4ed:	50                   	push   eax
c000d4ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d4f1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d4f4:	e8 03 a9 01 00       	call   c0027dfc <__subdf3>
c000d4f9:	59                   	pop    ecx
c000d4fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d4fe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d502:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d505:	e8 81 af 01 00       	call   c002848b <__floatsidf>
c000d50a:	83 c4 10             	add    esp,0x10
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	52                   	push   edx
c000d516:	50                   	push   eax
c000d517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51f:	e8 04 a9 01 00       	call   c0027e28 <__muldf3>
c000d524:	5f                   	pop    edi
c000d525:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d529:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d52d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d530:	e8 56 af 01 00       	call   c002848b <__floatsidf>
c000d535:	83 c4 10             	add    esp,0x10
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d540:	52                   	push   edx
c000d541:	50                   	push   eax
c000d542:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d546:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d54a:	e8 bd ab 01 00       	call   c002810c <__divdf3>
c000d54f:	83 c4 10             	add    esp,0x10
c000d552:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d556:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d56a:	e8 3c a2 01 00       	call   c00277ab <__adddf3>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d580:	e8 06 af 01 00       	call   c002848b <__floatsidf>
c000d585:	83 c4 10             	add    esp,0x10
c000d588:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d58c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a0:	e8 52 b1 01 00       	call   c00286f7 <__ltdf2>
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	85 c0                	test   eax,eax
c000d5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d5b2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d5b6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d5ba:	78 10                	js     c000d5cc <sinc_stereo_vari_process+0x512>
c000d5bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d5c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5dc:	e8 47 a8 01 00       	call   c0027e28 <__muldf3>
c000d5e1:	59                   	pop    ecx
c000d5e2:	5f                   	pop    edi
c000d5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5f3:	e8 d3 e4 ff ff       	call   c000bacb <double_to_fp>
c000d5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fc:	89 c7                	mov    edi,eax
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d606:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d60a:	e8 19 a8 01 00       	call   c0027e28 <__muldf3>
c000d60f:	83 c4 18             	add    esp,0x18
c000d612:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d616:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d61a:	52                   	push   edx
c000d61b:	50                   	push   eax
c000d61c:	e8 aa e4 ff ff       	call   c000bacb <double_to_fp>
c000d621:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d624:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d628:	83 c4 0c             	add    esp,0xc
c000d62b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d62e:	8d 04 90             	lea    eax,[eax+edx*4]
c000d631:	50                   	push   eax
c000d632:	50                   	push   eax
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 50 ae 01 00       	call   c002848b <__floatsidf>
c000d63b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d63f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d643:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d647:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d653:	e8 b4 aa 01 00       	call   c002810c <__divdf3>
c000d658:	83 c4 18             	add    esp,0x18
c000d65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d65f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d663:	52                   	push   edx
c000d664:	89 fa                	mov    edx,edi
c000d666:	50                   	push   eax
c000d667:	89 d8                	mov    eax,ebx
c000d669:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d66d:	e8 02 c7 ff ff       	call   c0009d74 <calc_output_stereo>
c000d672:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d676:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d686:	e8 81 aa 01 00       	call   c002810c <__divdf3>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d692:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a6:	e8 00 a1 01 00       	call   c00277ab <__adddf3>
c000d6ab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d6af:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6b3:	83 c4 18             	add    esp,0x18
c000d6b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 ed b1 01 00       	call   c00288b0 <lrint>
c000d6c3:	83 ec 0c             	sub    esp,0xc
c000d6c6:	50                   	push   eax
c000d6c7:	e8 bf ad 01 00       	call   c002848b <__floatsidf>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d7:	52                   	push   edx
c000d6d8:	50                   	push   eax
c000d6d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e1:	e8 16 a7 01 00       	call   c0027dfc <__subdf3>
c000d6e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ee:	83 c4 20             	add    esp,0x20
c000d6f1:	6a 00                	push   0x0
c000d6f3:	6a 00                	push   0x0
c000d6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6fd:	e8 f5 af 01 00       	call   c00286f7 <__ltdf2>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	85 c0                	test   eax,eax
c000d707:	79 20                	jns    c000d729 <sinc_stereo_vari_process+0x66f>
c000d709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d719:	e8 8d a0 01 00       	call   c00277ab <__adddf3>
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d725:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d729:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d72c:	83 ec 10             	sub    esp,0x10
c000d72f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d733:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d746:	e8 b1 a6 01 00       	call   c0027dfc <__subdf3>
c000d74b:	83 c4 18             	add    esp,0x18
c000d74e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d752:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d756:	52                   	push   edx
c000d757:	50                   	push   eax
c000d758:	e8 53 b1 01 00       	call   c00288b0 <lrint>
c000d75d:	0f af f8             	imul   edi,eax
c000d760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	01 f8                	add    eax,edi
c000d769:	99                   	cdq    
c000d76a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d76d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d770:	e9 fd fb ff ff       	jmp    c000d372 <sinc_stereo_vari_process+0x2b8>
c000d775:	83 c4 4c             	add    esp,0x4c
c000d778:	89 d0                	mov    eax,edx
c000d77a:	5b                   	pop    ebx
c000d77b:	5e                   	pop    esi
c000d77c:	5f                   	pop    edi
c000d77d:	5d                   	pop    ebp
c000d77e:	c3                   	ret    

c000d77f <sinc_mono_vari_process>:
c000d77f:	55                   	push   ebp
c000d780:	ba 05 00 00 00       	mov    edx,0x5
c000d785:	57                   	push   edi
c000d786:	56                   	push   esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 4c             	sub    esp,0x4c
c000d78b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d78f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d793:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d796:	85 db                	test   ebx,ebx
c000d798:	0f 84 c1 06 00 00    	je     c000de5f <sinc_mono_vari_process+0x6e0>
c000d79e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d7a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7a4:	0f af c7             	imul   eax,edi
c000d7a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d7aa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d7ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d7b4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d7bb:	0f af c7             	imul   eax,edi
c000d7be:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d7c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7d2:	68 00 00 70 3f       	push   0x3f700000
c000d7d7:	6a 00                	push   0x0
c000d7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e1:	e8 11 af 01 00       	call   c00286f7 <__ltdf2>
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	ba 16 00 00 00       	mov    edx,0x16
c000d7ee:	85 c0                	test   eax,eax
c000d7f0:	0f 88 69 06 00 00    	js     c000de5f <sinc_mono_vari_process+0x6e0>
c000d7f6:	68 00 00 70 40       	push   0x40700000
c000d7fb:	6a 00                	push   0x0
c000d7fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d805:	e8 cf ae 01 00       	call   c00286d9 <__gtdf2>
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	ba 16 00 00 00       	mov    edx,0x16
c000d812:	85 c0                	test   eax,eax
c000d814:	0f 8f 45 06 00 00    	jg     c000de5f <sinc_mono_vari_process+0x6e0>
c000d81a:	83 ec 0c             	sub    esp,0xc
c000d81d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d820:	e8 66 ac 01 00       	call   c002848b <__floatsidf>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d830:	68 00 00 00 40       	push   0x40000000
c000d835:	6a 00                	push   0x0
c000d837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83f:	e8 67 9f 01 00       	call   c00277ab <__adddf3>
c000d844:	59                   	pop    ecx
c000d845:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d849:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d84d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d850:	e8 36 ac 01 00       	call   c002848b <__floatsidf>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d85c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d860:	52                   	push   edx
c000d861:	50                   	push   eax
c000d862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d866:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d86a:	e8 9d a8 01 00       	call   c002810c <__divdf3>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d876:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d87a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d87d:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d88c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d898:	e8 3c ae 01 00       	call   c00286d9 <__gtdf2>
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	85 c0                	test   eax,eax
c000d8a2:	7e 2d                	jle    c000d8d1 <sinc_mono_vari_process+0x152>
c000d8a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b3:	e8 3f ae 01 00       	call   c00286f7 <__ltdf2>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	85 c0                	test   eax,eax
c000d8bd:	79 4d                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8cf:	eb 1b                	jmp    c000d8ec <sinc_mono_vari_process+0x16d>
c000d8d1:	68 00 00 f0 3f       	push   0x3ff00000
c000d8d6:	6a 00                	push   0x0
c000d8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8e0:	e8 12 ae 01 00       	call   c00286f7 <__ltdf2>
c000d8e5:	83 c4 10             	add    esp,0x10
c000d8e8:	85 c0                	test   eax,eax
c000d8ea:	79 20                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8fc:	e8 0b a8 01 00       	call   c002810c <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d908:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d90c:	50                   	push   eax
c000d90d:	50                   	push   eax
c000d90e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d912:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d916:	e8 95 af 01 00       	call   c00288b0 <lrint>
c000d91b:	40                   	inc    eax
c000d91c:	0f af c7             	imul   eax,edi
c000d91f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d923:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d927:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d92d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d931:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d935:	58                   	pop    eax
c000d936:	5a                   	pop    edx
c000d937:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93f:	e8 6c af 01 00       	call   c00288b0 <lrint>
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	50                   	push   eax
c000d948:	e8 3e ab 01 00       	call   c002848b <__floatsidf>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d954:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d958:	52                   	push   edx
c000d959:	50                   	push   eax
c000d95a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d962:	e8 95 a4 01 00       	call   c0027dfc <__subdf3>
c000d967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d96b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d96f:	83 c4 20             	add    esp,0x20
c000d972:	6a 00                	push   0x0
c000d974:	6a 00                	push   0x0
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	e8 74 ad 01 00       	call   c00286f7 <__ltdf2>
c000d983:	83 c4 10             	add    esp,0x10
c000d986:	85 c0                	test   eax,eax
c000d988:	79 1f                	jns    c000d9a9 <sinc_mono_vari_process+0x22a>
c000d98a:	68 00 00 f0 3f       	push   0x3ff00000
c000d98f:	6a 00                	push   0x0
c000d991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d995:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d999:	e8 0d 9e 01 00       	call   c00277ab <__adddf3>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9a9:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9ac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9af:	83 ec 10             	sub    esp,0x10
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9c2:	e8 35 a4 01 00       	call   c0027dfc <__subdf3>
c000d9c7:	83 c4 18             	add    esp,0x18
c000d9ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d9ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	e8 d7 ae 01 00       	call   c00288b0 <lrint>
c000d9d9:	0f af f8             	imul   edi,eax
c000d9dc:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9df:	31 ff                	xor    edi,edi
c000d9e1:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d9e6:	99                   	cdq    
c000d9e7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9ea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f5:	55                   	push   ebp
c000d9f6:	57                   	push   edi
c000d9f7:	e8 10 a7 01 00       	call   c002810c <__divdf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da07:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da0c:	68 23 42 92 0c       	push   0xc924223
c000da11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da19:	e8 8d 9d 01 00       	call   c00277ab <__adddf3>
c000da1e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000da22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000da26:	83 c4 20             	add    esp,0x20
c000da29:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000da2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000da31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000da34:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000da37:	7d 54                	jge    c000da8d <sinc_mono_vari_process+0x30e>
c000da39:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da3f:	01 c8                	add    eax,ecx
c000da41:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da44:	99                   	cdq    
c000da45:	f7 f9                	idiv   ecx
c000da47:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da4b:	7d 0c                	jge    c000da59 <sinc_mono_vari_process+0x2da>
c000da4d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000da50:	85 ff                	test   edi,edi
c000da52:	79 73                	jns    c000dac7 <sinc_mono_vari_process+0x348>
c000da54:	e9 ee 00 00 00       	jmp    c000db47 <sinc_mono_vari_process+0x3c8>
c000da59:	50                   	push   eax
c000da5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da5e:	56                   	push   esi
c000da5f:	53                   	push   ebx
c000da60:	e8 8d e0 ff ff       	call   c000baf2 <prepare_data>
c000da65:	89 c2                	mov    edx,eax
c000da67:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000da71:	85 d2                	test   edx,edx
c000da73:	0f 85 e6 03 00 00    	jne    c000de5f <sinc_mono_vari_process+0x6e0>
c000da79:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da7c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da7f:	01 c8                	add    eax,ecx
c000da81:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da84:	99                   	cdq    
c000da85:	f7 f9                	idiv   ecx
c000da87:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da8b:	7c c0                	jl     c000da4d <sinc_mono_vari_process+0x2ce>
c000da8d:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000da91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da99:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000da9c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000daa7:	89 01                	mov    DWORD PTR [ecx],eax
c000daa9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000daac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000daaf:	99                   	cdq    
c000dab0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dab3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000dab6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dab9:	99                   	cdq    
c000daba:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dabd:	31 d2                	xor    edx,edx
c000dabf:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dac2:	e9 98 03 00 00       	jmp    c000de5f <sinc_mono_vari_process+0x6e0>
c000dac7:	83 ec 0c             	sub    esp,0xc
c000daca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000dacd:	e8 b9 a9 01 00       	call   c002848b <__floatsidf>
c000dad2:	83 c4 10             	add    esp,0x10
c000dad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dadd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daed:	e8 b9 9c 01 00       	call   c00277ab <__adddf3>
c000daf2:	83 c4 10             	add    esp,0x10
c000daf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dafd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db0d:	e8 99 9c 01 00       	call   c00277ab <__adddf3>
c000db12:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1d:	e8 69 a9 01 00       	call   c002848b <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db37:	e8 9d ab 01 00       	call   c00286d9 <__gtdf2>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	85 c0                	test   eax,eax
c000db41:	0f 8f 46 ff ff ff    	jg     c000da8d <sinc_mono_vari_process+0x30e>
c000db47:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000db4b:	0f 8e f5 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000db51:	83 ec 10             	sub    esp,0x10
c000db54:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000db57:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000db5a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000db5e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000db61:	ff 30                	push   DWORD PTR [eax]
c000db63:	e8 94 a2 01 00       	call   c0027dfc <__subdf3>
c000db68:	83 c4 18             	add    esp,0x18
c000db6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db73:	52                   	push   edx
c000db74:	50                   	push   eax
c000db75:	e8 16 ad 01 00       	call   c0028890 <fabs>
c000db7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	68 df 7c db 3d       	push   0x3ddb7cdf
c000db8a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000db8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db97:	e8 3d ab 01 00       	call   c00286d9 <__gtdf2>
c000db9c:	83 c4 10             	add    esp,0x10
c000db9f:	85 c0                	test   eax,eax
c000dba1:	0f 8e 9f 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000dba7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dbab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dbae:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb8:	52                   	push   edx
c000dbb9:	50                   	push   eax
c000dbba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbbd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbc0:	e8 37 a2 01 00       	call   c0027dfc <__subdf3>
c000dbc5:	5f                   	pop    edi
c000dbc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbca:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dbd1:	e8 b5 a8 01 00       	call   c002848b <__floatsidf>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dbe1:	52                   	push   edx
c000dbe2:	50                   	push   eax
c000dbe3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbeb:	e8 38 a2 01 00       	call   c0027e28 <__muldf3>
c000dbf0:	5d                   	pop    ebp
c000dbf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbf9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dbfc:	e8 8a a8 01 00       	call   c002848b <__floatsidf>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc0c:	52                   	push   edx
c000dc0d:	50                   	push   eax
c000dc0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc16:	e8 f1 a4 01 00       	call   c002810c <__divdf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc36:	e8 70 9b 01 00       	call   c00277ab <__adddf3>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dc4c:	e8 3a a8 01 00       	call   c002848b <__floatsidf>
c000dc51:	83 c4 10             	add    esp,0x10
c000dc54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	e8 86 aa 01 00       	call   c00286f7 <__ltdf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000dc7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc7e:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000dc82:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000dc86:	78 10                	js     c000dc98 <sinc_mono_vari_process+0x519>
c000dc88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dc8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dc90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca8:	e8 7b a1 01 00       	call   c0027e28 <__muldf3>
c000dcad:	59                   	pop    ecx
c000dcae:	5f                   	pop    edi
c000dcaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dcb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbf:	e8 07 de ff ff       	call   c000bacb <double_to_fp>
c000dcc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcc8:	89 c7                	mov    edi,eax
c000dcca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd6:	e8 4d a1 01 00       	call   c0027e28 <__muldf3>
c000dcdb:	83 c4 18             	add    esp,0x18
c000dcde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dce2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dce6:	52                   	push   edx
c000dce7:	50                   	push   eax
c000dce8:	e8 de dd ff ff       	call   c000bacb <double_to_fp>
c000dced:	83 ec 0c             	sub    esp,0xc
c000dcf0:	89 c5                	mov    ebp,eax
c000dcf2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dcf5:	e8 91 a7 01 00       	call   c002848b <__floatsidf>
c000dcfa:	83 c4 10             	add    esp,0x10
c000dcfd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd01:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd05:	52                   	push   edx
c000dd06:	50                   	push   eax
c000dd07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0f:	e8 f8 a3 01 00       	call   c002810c <__divdf3>
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	89 e9                	mov    ecx,ebp
c000dd19:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd1d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd21:	89 d8                	mov    eax,ebx
c000dd23:	89 fa                	mov    edx,edi
c000dd25:	e8 ee bd ff ff       	call   c0009b18 <calc_output_single>
c000dd2a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dd2d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dd30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd38:	52                   	push   edx
c000dd39:	50                   	push   eax
c000dd3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd42:	e8 e1 a0 01 00       	call   c0027e28 <__muldf3>
c000dd47:	59                   	pop    ecx
c000dd48:	59                   	pop    ecx
c000dd49:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd59:	e8 9d a9 01 00       	call   c00286fb <__truncdfsf2>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000dd64:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000dd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd77:	e8 90 a3 01 00       	call   c002810c <__divdf3>
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd97:	e8 0f 9a 01 00       	call   c00277ab <__adddf3>
c000dd9c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dda0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dda4:	83 c4 18             	add    esp,0x18
c000dda7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddaf:	e8 fc aa 01 00       	call   c00288b0 <lrint>
c000ddb4:	83 ec 0c             	sub    esp,0xc
c000ddb7:	50                   	push   eax
c000ddb8:	e8 ce a6 01 00       	call   c002848b <__floatsidf>
c000ddbd:	83 c4 10             	add    esp,0x10
c000ddc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ddc8:	52                   	push   edx
c000ddc9:	50                   	push   eax
c000ddca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddd2:	e8 25 a0 01 00       	call   c0027dfc <__subdf3>
c000ddd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dddf:	83 c4 20             	add    esp,0x20
c000dde2:	6a 00                	push   0x0
c000dde4:	6a 00                	push   0x0
c000dde6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddee:	e8 04 a9 01 00       	call   c00286f7 <__ltdf2>
c000ddf3:	83 c4 10             	add    esp,0x10
c000ddf6:	85 c0                	test   eax,eax
c000ddf8:	79 20                	jns    c000de1a <sinc_mono_vari_process+0x69b>
c000ddfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de0a:	e8 9c 99 01 00       	call   c00277ab <__adddf3>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1a:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000de1d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000de20:	83 ec 10             	sub    esp,0x10
c000de23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de33:	e8 c4 9f 01 00       	call   c0027dfc <__subdf3>
c000de38:	83 c4 18             	add    esp,0x18
c000de3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de43:	52                   	push   edx
c000de44:	50                   	push   eax
c000de45:	e8 66 aa 01 00       	call   c00288b0 <lrint>
c000de4a:	83 c4 10             	add    esp,0x10
c000de4d:	0f af f8             	imul   edi,eax
c000de50:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000de53:	99                   	cdq    
c000de54:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000de57:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de5a:	e9 d2 fb ff ff       	jmp    c000da31 <sinc_mono_vari_process+0x2b2>
c000de5f:	83 c4 4c             	add    esp,0x4c
c000de62:	89 d0                	mov    eax,edx
c000de64:	5b                   	pop    ebx
c000de65:	5e                   	pop    esi
c000de66:	5f                   	pop    edi
c000de67:	5d                   	pop    ebp
c000de68:	c3                   	ret    

c000de69 <sinc_get_name>:
c000de69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de6d:	31 c0                	xor    eax,eax
c000de6f:	83 fa 02             	cmp    edx,0x2
c000de72:	77 07                	ja     c000de7b <sinc_get_name+0x12>
c000de74:	8b 04 95 44 a1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5ebc]
c000de7b:	c3                   	ret    

c000de7c <sinc_get_description>:
c000de7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de80:	31 c0                	xor    eax,eax
c000de82:	83 fa 02             	cmp    edx,0x2
c000de85:	77 07                	ja     c000de8e <sinc_get_description+0x12>
c000de87:	8b 04 95 38 a1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5ec8]
c000de8e:	c3                   	ret    

c000de8f <sinc_set_converter>:
c000de8f:	53                   	push   ebx
c000de90:	81 ec 58 08 00 00    	sub    esp,0x858
c000de96:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000de9d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dea0:	85 c0                	test   eax,eax
c000dea2:	74 13                	je     c000deb7 <sinc_set_converter+0x28>
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	50                   	push   eax
c000dea8:	e8 8c 19 00 00       	call   c000f839 <free>
c000dead:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	50                   	push   eax
c000deb8:	68 44 08 00 00       	push   0x844
c000debd:	6a 00                	push   0x0
c000debf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dec3:	50                   	push   eax
c000dec4:	e8 87 28 ff ff       	call   c0000750 <memset>
c000dec9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	b8 0b 00 00 00       	mov    eax,0xb
c000ded4:	81 fa 80 00 00 00    	cmp    edx,0x80
c000deda:	7f 6e                	jg     c000df4a <sinc_set_converter+0xbb>
c000dedc:	83 fa 01             	cmp    edx,0x1
c000dedf:	75 10                	jne    c000def1 <sinc_set_converter+0x62>
c000dee1:	c7 43 24 7f d7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d77f
c000dee8:	c7 43 20 7f d7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d77f
c000deef:	eb 4d                	jmp    c000df3e <sinc_set_converter+0xaf>
c000def1:	83 fa 02             	cmp    edx,0x2
c000def4:	75 10                	jne    c000df06 <sinc_set_converter+0x77>
c000def6:	c7 43 24 ba d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0ba
c000defd:	c7 43 20 ba d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0ba
c000df04:	eb 38                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df06:	83 fa 04             	cmp    edx,0x4
c000df09:	75 10                	jne    c000df1b <sinc_set_converter+0x8c>
c000df0b:	c7 43 24 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c9f5
c000df12:	c7 43 20 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c9f5
c000df19:	eb 23                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df1b:	83 fa 06             	cmp    edx,0x6
c000df1e:	75 10                	jne    c000df30 <sinc_set_converter+0xa1>
c000df20:	c7 43 24 30 c3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c330
c000df27:	c7 43 20 30 c3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c330
c000df2e:	eb 0e                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df30:	c7 43 24 6c bc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bc6c
c000df37:	c7 43 20 6c bc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bc6c
c000df3e:	c7 43 28 1f af 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000af1f
c000df45:	b8 0a 00 00 00       	mov    eax,0xa
c000df4a:	81 c4 58 08 00 00    	add    esp,0x858
c000df50:	5b                   	pop    ebx
c000df51:	c3                   	ret    

c000df52 <zoh_vari_process>:
c000df52:	55                   	push   ebp
c000df53:	31 d2                	xor    edx,edx
c000df55:	57                   	push   edi
c000df56:	56                   	push   esi
c000df57:	53                   	push   ebx
c000df58:	83 ec 3c             	sub    esp,0x3c
c000df5b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000df5f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000df63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000df67:	0f 8e 80 06 00 00    	jle    c000e5ed <zoh_vari_process+0x69b>
c000df6d:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000df70:	ba 05 00 00 00       	mov    edx,0x5
c000df75:	85 db                	test   ebx,ebx
c000df77:	0f 84 70 06 00 00    	je     c000e5ed <zoh_vari_process+0x69b>
c000df7d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df80:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000df84:	74 19                	je     c000df9f <zoh_vari_process+0x4d>
c000df86:	31 d2                	xor    edx,edx
c000df88:	39 c2                	cmp    edx,eax
c000df8a:	7d 0c                	jge    c000df98 <zoh_vari_process+0x46>
c000df8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df8e:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000df91:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000df95:	42                   	inc    edx
c000df96:	eb f0                	jmp    c000df88 <zoh_vari_process+0x36>
c000df98:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000df9f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dfa2:	0f af d0             	imul   edx,eax
c000dfa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dfa8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dfac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dfb3:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dfb6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dfbd:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfc0:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	68 00 00 70 3f       	push   0x3f700000
c000dfcf:	6a 00                	push   0x0
c000dfd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd9:	e8 19 a7 01 00       	call   c00286f7 <__ltdf2>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	ba 16 00 00 00       	mov    edx,0x16
c000dfe6:	85 c0                	test   eax,eax
c000dfe8:	0f 88 ff 05 00 00    	js     c000e5ed <zoh_vari_process+0x69b>
c000dfee:	68 00 00 70 40       	push   0x40700000
c000dff3:	6a 00                	push   0x0
c000dff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dffd:	e8 d7 a6 01 00       	call   c00286d9 <__gtdf2>
c000e002:	83 c4 10             	add    esp,0x10
c000e005:	ba 16 00 00 00       	mov    edx,0x16
c000e00a:	85 c0                	test   eax,eax
c000e00c:	0f 8f db 05 00 00    	jg     c000e5ed <zoh_vari_process+0x69b>
c000e012:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e015:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000e018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e020:	68 00 00 f0 3f       	push   0x3ff00000
c000e025:	6a 00                	push   0x0
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 c3 a6 01 00       	call   c00286f7 <__ltdf2>
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	85 c0                	test   eax,eax
c000e039:	0f 89 da 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e03f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000e042:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000e045:	0f 8d ce 01 00 00    	jge    c000e219 <zoh_vari_process+0x2c7>
c000e04b:	83 ec 0c             	sub    esp,0xc
c000e04e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e051:	e8 35 a4 01 00       	call   c002848b <__floatsidf>
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	89 04 24             	mov    DWORD PTR [esp],eax
c000e05c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	e8 b3 9d 01 00       	call   c0027e28 <__muldf3>
c000e075:	59                   	pop    ecx
c000e076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e07a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e07e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e081:	e8 05 a4 01 00       	call   c002848b <__floatsidf>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e08d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e091:	52                   	push   edx
c000e092:	50                   	push   eax
c000e093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e097:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e09b:	e8 0b 97 01 00       	call   c00277ab <__adddf3>
c000e0a0:	59                   	pop    ecx
c000e0a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0a9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000e0ac:	e8 da a3 01 00       	call   c002848b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	52                   	push   edx
c000e0bd:	50                   	push   eax
c000e0be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c6:	e8 2a a6 01 00       	call   c00286f5 <__gedf2>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	85 c0                	test   eax,eax
c000e0d0:	0f 89 43 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e0d6:	85 ed                	test   ebp,ebp
c000e0d8:	0f 8e ec 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e0de:	83 ec 10             	sub    esp,0x10
c000e0e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e0e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e0e7:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e0ea:	ff 37                	push   DWORD PTR [edi]
c000e0ec:	e8 0b 9d 01 00       	call   c0027dfc <__subdf3>
c000e0f1:	83 c4 18             	add    esp,0x18
c000e0f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e0fc:	52                   	push   edx
c000e0fd:	50                   	push   eax
c000e0fe:	e8 8d a7 01 00       	call   c0028890 <fabs>
c000e103:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e107:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e113:	68 23 42 92 0c       	push   0xc924223
c000e118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e11c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e120:	e8 b4 a5 01 00       	call   c00286d9 <__gtdf2>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	85 c0                	test   eax,eax
c000e12a:	0f 8e 9a 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e130:	8b 07                	mov    eax,DWORD PTR [edi]
c000e132:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	52                   	push   edx
c000e13d:	50                   	push   eax
c000e13e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e141:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e144:	e8 b3 9c 01 00       	call   c0027dfc <__subdf3>
c000e149:	59                   	pop    ecx
c000e14a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e14e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e152:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e155:	e8 31 a3 01 00       	call   c002848b <__floatsidf>
c000e15a:	83 c4 10             	add    esp,0x10
c000e15d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e161:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e165:	52                   	push   edx
c000e166:	50                   	push   eax
c000e167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16f:	e8 b4 9c 01 00       	call   c0027e28 <__muldf3>
c000e174:	5d                   	pop    ebp
c000e175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e179:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e17d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e180:	e8 06 a3 01 00       	call   c002848b <__floatsidf>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e18c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e190:	52                   	push   edx
c000e191:	50                   	push   eax
c000e192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e19a:	e8 6d 9f 01 00       	call   c002810c <__divdf3>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ba:	e8 ec 95 01 00       	call   c00277ab <__adddf3>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1ca:	31 c0                	xor    eax,eax
c000e1cc:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000e1cf:	7e 13                	jle    c000e1e4 <zoh_vari_process+0x292>
c000e1d1:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000e1d5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e1d8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e1db:	40                   	inc    eax
c000e1dc:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e1df:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e1e2:	eb e8                	jmp    c000e1cc <zoh_vari_process+0x27a>
c000e1e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1ec:	68 00 00 f0 3f       	push   0x3ff00000
c000e1f1:	6a 00                	push   0x0
c000e1f3:	e8 14 9f 01 00       	call   c002810c <__divdf3>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e202:	52                   	push   edx
c000e203:	50                   	push   eax
c000e204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20c:	e8 9a 95 01 00       	call   c00277ab <__adddf3>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	e9 ff fd ff ff       	jmp    c000e018 <zoh_vari_process+0xc6>
c000e219:	55                   	push   ebp
c000e21a:	55                   	push   ebp
c000e21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e223:	e8 88 a6 01 00       	call   c00288b0 <lrint>
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	50                   	push   eax
c000e22c:	e8 5a a2 01 00       	call   c002848b <__floatsidf>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e23c:	52                   	push   edx
c000e23d:	50                   	push   eax
c000e23e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e246:	e8 b1 9b 01 00       	call   c0027dfc <__subdf3>
c000e24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e253:	83 c4 20             	add    esp,0x20
c000e256:	6a 00                	push   0x0
c000e258:	6a 00                	push   0x0
c000e25a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e25e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e262:	e8 90 a4 01 00       	call   c00286f7 <__ltdf2>
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	85 c0                	test   eax,eax
c000e26c:	79 1e                	jns    c000e28c <zoh_vari_process+0x33a>
c000e26e:	68 00 00 f0 3f       	push   0x3ff00000
c000e273:	6a 00                	push   0x0
c000e275:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e279:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27d:	e8 29 95 01 00       	call   c00277ab <__adddf3>
c000e282:	83 c4 10             	add    esp,0x10
c000e285:	89 04 24             	mov    DWORD PTR [esp],eax
c000e288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e28c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e28f:	83 ec 10             	sub    esp,0x10
c000e292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2a2:	e8 55 9b 01 00       	call   c0027dfc <__subdf3>
c000e2a7:	83 c4 18             	add    esp,0x18
c000e2aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b2:	52                   	push   edx
c000e2b3:	50                   	push   eax
c000e2b4:	e8 f7 a5 01 00       	call   c00288b0 <lrint>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	0f af e8             	imul   ebp,eax
c000e2bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e2c2:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e2c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e2c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e2cc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e2cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d3:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e2d6:	0f 8d 7a 02 00 00    	jge    c000e556 <zoh_vari_process+0x604>
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e2:	e8 a4 a1 01 00       	call   c002848b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2f2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e302:	e8 21 9b 01 00       	call   c0027e28 <__muldf3>
c000e307:	59                   	pop    ecx
c000e308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e30c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 72 a1 01 00       	call   c002848b <__floatsidf>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e324:	52                   	push   edx
c000e325:	50                   	push   eax
c000e326:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32e:	e8 78 94 01 00       	call   c00277ab <__adddf3>
c000e333:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e33a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e33e:	e8 48 a1 01 00       	call   c002848b <__floatsidf>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e34a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e34e:	52                   	push   edx
c000e34f:	50                   	push   eax
c000e350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e354:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e358:	e8 9c a3 01 00       	call   c00286f9 <__ledf2>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	85 c0                	test   eax,eax
c000e362:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e366:	0f 8f ea 01 00 00    	jg     c000e556 <zoh_vari_process+0x604>
c000e36c:	85 c9                	test   ecx,ecx
c000e36e:	0f 8e ed 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e374:	83 ec 10             	sub    esp,0x10
c000e377:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e37a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e37d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e380:	ff 37                	push   DWORD PTR [edi]
c000e382:	e8 75 9a 01 00       	call   c0027dfc <__subdf3>
c000e387:	83 c4 18             	add    esp,0x18
c000e38a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e38e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e392:	52                   	push   edx
c000e393:	50                   	push   eax
c000e394:	e8 f7 a4 01 00       	call   c0028890 <fabs>
c000e399:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e39d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e3a1:	83 c4 10             	add    esp,0x10
c000e3a4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e3a9:	68 23 42 92 0c       	push   0xc924223
c000e3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b6:	e8 1e a3 01 00       	call   c00286d9 <__gtdf2>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	85 c0                	test   eax,eax
c000e3c0:	0f 8e 9b 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e3c6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e3c8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e3d3:	52                   	push   edx
c000e3d4:	50                   	push   eax
c000e3d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e3d8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e3db:	e8 1c 9a 01 00       	call   c0027dfc <__subdf3>
c000e3e0:	5d                   	pop    ebp
c000e3e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3e5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e3e9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e3ec:	e8 9a a0 01 00       	call   c002848b <__floatsidf>
c000e3f1:	83 c4 10             	add    esp,0x10
c000e3f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e3f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3fc:	52                   	push   edx
c000e3fd:	50                   	push   eax
c000e3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 1d 9a 01 00       	call   c0027e28 <__muldf3>
c000e40b:	59                   	pop    ecx
c000e40c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e410:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e414:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e417:	e8 6f a0 01 00       	call   c002848b <__floatsidf>
c000e41c:	83 c4 10             	add    esp,0x10
c000e41f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e423:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e427:	52                   	push   edx
c000e428:	50                   	push   eax
c000e429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e431:	e8 d6 9c 01 00       	call   c002810c <__divdf3>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e43d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e441:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e445:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e451:	e8 55 93 01 00       	call   c00277ab <__adddf3>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e461:	31 d2                	xor    edx,edx
c000e463:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e466:	39 d0                	cmp    eax,edx
c000e468:	7e 1d                	jle    c000e487 <zoh_vari_process+0x535>
c000e46a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e46d:	29 c1                	sub    ecx,eax
c000e46f:	89 c8                	mov    eax,ecx
c000e471:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e473:	01 d0                	add    eax,edx
c000e475:	42                   	inc    edx
c000e476:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e479:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e47c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e47f:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e482:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e485:	eb dc                	jmp    c000e463 <zoh_vari_process+0x511>
c000e487:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48f:	68 00 00 f0 3f       	push   0x3ff00000
c000e494:	6a 00                	push   0x0
c000e496:	e8 71 9c 01 00       	call   c002810c <__divdf3>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4a6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b6:	e8 f0 92 01 00       	call   c00277ab <__adddf3>
c000e4bb:	5d                   	pop    ebp
c000e4bc:	59                   	pop    ecx
c000e4bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cd:	e8 de a3 01 00       	call   c00288b0 <lrint>
c000e4d2:	83 ec 0c             	sub    esp,0xc
c000e4d5:	50                   	push   eax
c000e4d6:	e8 b0 9f 01 00       	call   c002848b <__floatsidf>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4e6:	52                   	push   edx
c000e4e7:	50                   	push   eax
c000e4e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4f0:	e8 07 99 01 00       	call   c0027dfc <__subdf3>
c000e4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e4f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e4fd:	83 c4 20             	add    esp,0x20
c000e500:	6a 00                	push   0x0
c000e502:	6a 00                	push   0x0
c000e504:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e50c:	e8 e6 a1 01 00       	call   c00286f7 <__ltdf2>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	79 1e                	jns    c000e536 <zoh_vari_process+0x5e4>
c000e518:	68 00 00 f0 3f       	push   0x3ff00000
c000e51d:	6a 00                	push   0x0
c000e51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e527:	e8 7f 92 01 00       	call   c00277ab <__adddf3>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e532:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e536:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e539:	83 ec 10             	sub    esp,0x10
c000e53c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e54c:	e8 ab 98 01 00       	call   c0027dfc <__subdf3>
c000e551:	e9 51 fd ff ff       	jmp    c000e2a7 <zoh_vari_process+0x355>
c000e556:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e55a:	7d 3a                	jge    c000e596 <zoh_vari_process+0x644>
c000e55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	29 e8                	sub    eax,ebp
c000e565:	99                   	cdq    
c000e566:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e569:	50                   	push   eax
c000e56a:	e8 1c 9f 01 00       	call   c002848b <__floatsidf>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e57a:	52                   	push   edx
c000e57b:	50                   	push   eax
c000e57c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e580:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e584:	e8 22 92 01 00       	call   c00277ab <__adddf3>
c000e589:	83 c4 10             	add    esp,0x10
c000e58c:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e58f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e592:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e596:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e599:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e59d:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e5a0:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e5a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5a6:	85 c0                	test   eax,eax
c000e5a8:	7f 25                	jg     c000e5cf <zoh_vari_process+0x67d>
c000e5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5b2:	89 07                	mov    DWORD PTR [edi],eax
c000e5b4:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e5b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5ba:	99                   	cdq    
c000e5bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5be:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e5c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e5c4:	99                   	cdq    
c000e5c5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5c8:	31 d2                	xor    edx,edx
c000e5ca:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e5cd:	eb 1e                	jmp    c000e5ed <zoh_vari_process+0x69b>
c000e5cf:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e5d2:	31 d2                	xor    edx,edx
c000e5d4:	29 c8                	sub    eax,ecx
c000e5d6:	c1 e0 02             	shl    eax,0x2
c000e5d9:	39 d1                	cmp    ecx,edx
c000e5db:	7e cd                	jle    c000e5aa <zoh_vari_process+0x658>
c000e5dd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e5df:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e5e3:	83 c0 04             	add    eax,0x4
c000e5e6:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e5ea:	42                   	inc    edx
c000e5eb:	eb ec                	jmp    c000e5d9 <zoh_vari_process+0x687>
c000e5ed:	83 c4 3c             	add    esp,0x3c
c000e5f0:	89 d0                	mov    eax,edx
c000e5f2:	5b                   	pop    ebx
c000e5f3:	5e                   	pop    esi
c000e5f4:	5f                   	pop    edi
c000e5f5:	5d                   	pop    ebp
c000e5f6:	c3                   	ret    

c000e5f7 <zoh_reset>:
c000e5f7:	83 ec 0c             	sub    esp,0xc
c000e5fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5fe:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e601:	85 c0                	test   eax,eax
c000e603:	74 20                	je     c000e625 <zoh_reset+0x2e>
c000e605:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e608:	83 c0 1c             	add    eax,0x1c
c000e60b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e60e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e615:	c1 e2 02             	shl    edx,0x2
c000e618:	51                   	push   ecx
c000e619:	52                   	push   edx
c000e61a:	6a 00                	push   0x0
c000e61c:	50                   	push   eax
c000e61d:	e8 2e 21 ff ff       	call   c0000750 <memset>
c000e622:	83 c4 10             	add    esp,0x10
c000e625:	83 c4 0c             	add    esp,0xc
c000e628:	c3                   	ret    

c000e629 <zoh_get_name>:
c000e629:	31 c0                	xor    eax,eax
c000e62b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e630:	75 05                	jne    c000e637 <zoh_get_name+0xe>
c000e632:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c000e637:	c3                   	ret    

c000e638 <zoh_get_description>:
c000e638:	31 c0                	xor    eax,eax
c000e63a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e63f:	75 05                	jne    c000e646 <zoh_get_description+0xe>
c000e641:	b8 6f a2 02 c0       	mov    eax,0xc002a26f
c000e646:	c3                   	ret    

c000e647 <zoh_set_converter>:
c000e647:	53                   	push   ebx
c000e648:	b8 0a 00 00 00       	mov    eax,0xa
c000e64d:	83 ec 08             	sub    esp,0x8
c000e650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e654:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e659:	75 6e                	jne    c000e6c9 <zoh_set_converter+0x82>
c000e65b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e65e:	85 c0                	test   eax,eax
c000e660:	74 13                	je     c000e675 <zoh_set_converter+0x2e>
c000e662:	83 ec 0c             	sub    esp,0xc
c000e665:	50                   	push   eax
c000e666:	e8 ce 11 00 00       	call   c000f839 <free>
c000e66b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e672:	83 c4 10             	add    esp,0x10
c000e675:	50                   	push   eax
c000e676:	50                   	push   eax
c000e677:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e67a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e681:	50                   	push   eax
c000e682:	6a 01                	push   0x1
c000e684:	e8 d0 11 00 00       	call   c000f859 <calloc>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	89 c2                	mov    edx,eax
c000e68e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e691:	85 d2                	test   edx,edx
c000e693:	b8 01 00 00 00       	mov    eax,0x1
c000e698:	74 2f                	je     c000e6c9 <zoh_set_converter+0x82>
c000e69a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e6a3:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e6a9:	c7 43 24 52 df 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000df52
c000e6b0:	c7 43 20 52 df 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000df52
c000e6b7:	c7 43 28 f7 e5 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e5f7
c000e6be:	53                   	push   ebx
c000e6bf:	e8 33 ff ff ff       	call   c000e5f7 <zoh_reset>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	31 c0                	xor    eax,eax
c000e6c9:	83 c4 08             	add    esp,0x8
c000e6cc:	5b                   	pop    ebx
c000e6cd:	c3                   	ret    

c000e6ce <CPU::current()>:
c000e6ce:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e6d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6d9:	c3                   	ret    

c000e6da <operator new(unsigned long)>:
c000e6da:	e9 4a 11 00 00       	jmp    c000f829 <malloc>

c000e6df <operator delete(void*)>:
c000e6df:	e9 65 11 00 00       	jmp    c000f849 <rfree>

c000e6e4 <disableIRQs()>:
c000e6e4:	fa                   	cli    
c000e6e5:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c000e6eb:	c3                   	ret    

c000e6ec <enableIRQs()>:
c000e6ec:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c000e6f1:	48                   	dec    eax
c000e6f2:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c000e6f7:	75 01                	jne    c000e6fa <enableIRQs()+0xe>
c000e6f9:	fb                   	sti    
c000e6fa:	c3                   	ret    

c000e6fb <lockScheduler()>:
c000e6fb:	fa                   	cli    
c000e6fc:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c000e702:	c3                   	ret    

c000e703 <unlockScheduler()>:
c000e703:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c000e708:	48                   	dec    eax
c000e709:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c000e70e:	75 01                	jne    c000e711 <unlockScheduler()+0xe>
c000e710:	fb                   	sti    
c000e711:	c3                   	ret    

c000e712 <lockStuff()>:
c000e712:	fa                   	cli    
c000e713:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c000e719:	ff 05 84 f8 02 c0    	inc    DWORD PTR ds:0xc002f884
c000e71f:	c3                   	ret    

c000e720 <unlockStuff()>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c000e728:	48                   	dec    eax
c000e729:	a3 84 f8 02 c0       	mov    ds:0xc002f884,eax
c000e72e:	75 18                	jne    c000e748 <unlockStuff()+0x28>
c000e730:	83 3d 80 f8 02 c0 00 	cmp    DWORD PTR ds:0xc002f880,0x0
c000e737:	74 0f                	je     c000e748 <unlockStuff()+0x28>
c000e739:	c7 05 80 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x0
c000e743:	e8 39 f6 00 00       	call   c001dd81 <schedule()>
c000e748:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c000e74d:	48                   	dec    eax
c000e74e:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c000e753:	75 01                	jne    c000e756 <unlockStuff()+0x36>
c000e755:	fb                   	sti    
c000e756:	83 c4 0c             	add    esp,0xc
c000e759:	c3                   	ret    

c000e75a <Virt::getAKernelVAS()>:
c000e75a:	a1 f0 e4 02 c0       	mov    eax,ds:0xc002e4f0
c000e75f:	c3                   	ret    

c000e760 <__not_memcpy>:
c000e760:	57                   	push   edi
c000e761:	56                   	push   esi
c000e762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e76a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e76e:	89 c7                	mov    edi,eax
c000e770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e772:	5e                   	pop    esi
c000e773:	5f                   	pop    edi
c000e774:	c3                   	ret    

c000e775 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e775:	83 ec 0c             	sub    esp,0xc
c000e778:	83 ec 08             	sub    esp,0x8
c000e77b:	68 a6 a2 02 c0       	push   0xc002a2a6
c000e780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e784:	e8 0f 21 ff ff       	call   c0000898 <strcmp>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	85 c0                	test   eax,eax
c000e78e:	0f 94 c0             	sete   al
c000e791:	84 c0                	test   al,al
c000e793:	74 0a                	je     c000e79f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e795:	b8 88 e3 02 c0       	mov    eax,0xc002e388
c000e79a:	e9 e3 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e79f:	83 ec 08             	sub    esp,0x8
c000e7a2:	68 af a2 02 c0       	push   0xc002a2af
c000e7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ab:	e8 e8 20 ff ff       	call   c0000898 <strcmp>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	85 c0                	test   eax,eax
c000e7b5:	0f 94 c0             	sete   al
c000e7b8:	84 c0                	test   al,al
c000e7ba:	74 0a                	je     c000e7c6 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e7bc:	b8 24 6c 02 c0       	mov    eax,0xc0026c24
c000e7c1:	e9 bc 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	68 b9 a2 02 c0       	push   0xc002a2b9
c000e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d2:	e8 c1 20 ff ff       	call   c0000898 <strcmp>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	85 c0                	test   eax,eax
c000e7dc:	0f 94 c0             	sete   al
c000e7df:	84 c0                	test   al,al
c000e7e1:	74 0a                	je     c000e7ed <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e7e3:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e7e8:	e9 95 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7ed:	83 ec 08             	sub    esp,0x8
c000e7f0:	68 c2 a2 02 c0       	push   0xc002a2c2
c000e7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f9:	e8 9a 20 ff ff       	call   c0000898 <strcmp>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	85 c0                	test   eax,eax
c000e803:	0f 94 c0             	sete   al
c000e806:	84 c0                	test   al,al
c000e808:	74 07                	je     c000e811 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e80a:	b8 24 6d 02 c0       	mov    eax,0xc0026d24
c000e80f:	eb 71                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e811:	83 ec 08             	sub    esp,0x8
c000e814:	68 cc a2 02 c0       	push   0xc002a2cc
c000e819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81d:	e8 76 20 ff ff       	call   c0000898 <strcmp>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	85 c0                	test   eax,eax
c000e827:	0f 94 c0             	sete   al
c000e82a:	84 c0                	test   al,al
c000e82c:	74 07                	je     c000e835 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e82e:	b8 a4 6a 02 c0       	mov    eax,0xc0026aa4
c000e833:	eb 4d                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	68 d5 a2 02 c0       	push   0xc002a2d5
c000e83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e841:	e8 52 20 ff ff       	call   c0000898 <strcmp>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	85 c0                	test   eax,eax
c000e84b:	0f 94 c0             	sete   al
c000e84e:	84 c0                	test   al,al
c000e850:	74 07                	je     c000e859 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e852:	b8 8c e3 02 c0       	mov    eax,0xc002e38c
c000e857:	eb 29                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e859:	83 ec 08             	sub    esp,0x8
c000e85c:	68 e2 a2 02 c0       	push   0xc002a2e2
c000e861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e865:	e8 2e 20 ff ff       	call   c0000898 <strcmp>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	85 c0                	test   eax,eax
c000e86f:	0f 94 c0             	sete   al
c000e872:	84 c0                	test   al,al
c000e874:	74 07                	je     c000e87d <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e876:	b8 8d e3 02 c0       	mov    eax,0xc002e38d
c000e87b:	eb 05                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e87d:	b8 00 00 00 00       	mov    eax,0x0
c000e882:	83 c4 0c             	add    esp,0xc
c000e885:	c3                   	ret    

c000e886 <Computer::close(int, int, void*)>:
c000e886:	57                   	push   edi
c000e887:	56                   	push   esi
c000e888:	53                   	push   ebx
c000e889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e88d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e891:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e895:	83 ec 0c             	sub    esp,0xc
c000e898:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e89e:	e8 a1 55 00 00       	call   c0013e44 <Device::closeAll()>
c000e8a3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e8b2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e8ba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e8be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8c2:	5b                   	pop    ebx
c000e8c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e8c6:	5e                   	pop    esi
c000e8c7:	5f                   	pop    edi
c000e8c8:	ff e0                	jmp    eax

c000e8ca <Krnl::firstTask()>:
c000e8ca:	53                   	push   ebx
c000e8cb:	83 ec 14             	sub    esp,0x14
c000e8ce:	68 ef a2 02 c0       	push   0xc002a2ef
c000e8d3:	e8 ab 0f 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000e8d8:	fb                   	sti    
c000e8d9:	c7 04 24 06 a3 02 c0 	mov    DWORD PTR [esp],0xc002a306
c000e8e0:	e8 9e 0f 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000e8e5:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e8ec:	e8 38 0f 00 00       	call   c000f829 <malloc>
c000e8f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e8f8:	89 c3                	mov    ebx,eax
c000e8fa:	ff 35 b0 f8 02 c0    	push   DWORD PTR ds:0xc002f8b0
c000e900:	68 1f a3 02 c0       	push   0xc002a31f
c000e905:	6a 01                	push   0x1
c000e907:	50                   	push   eax
c000e908:	e8 57 f0 00 00       	call   c001d964 <Process::Process(bool, char const*, Process*, char**)>
c000e90d:	83 c4 20             	add    esp,0x20
c000e910:	68 ff 00 00 00       	push   0xff
c000e915:	6a 00                	push   0x0
c000e917:	68 bf f1 00 c0       	push   0xc000f1bf
c000e91c:	53                   	push   ebx
c000e91d:	e8 3a f2 00 00       	call   c001db5c <Process::createThread(void (*)(void*), void*, int)>
c000e922:	6a 7a                	push   0x7a
c000e924:	6a 00                	push   0x0
c000e926:	68 4f e5 01 c0       	push   0xc001e54f
c000e92b:	ff 35 b0 f8 02 c0    	push   DWORD PTR ds:0xc002f8b0
c000e931:	e8 26 f2 00 00       	call   c001db5c <Process::createThread(void (*)(void*), void*, int)>
c000e936:	83 c4 14             	add    esp,0x14
c000e939:	a3 68 f8 02 c0       	mov    ds:0xc002f868,eax
c000e93e:	68 48 a4 02 c0       	push   0xc002a448
c000e943:	c6 05 8d e3 02 c0 01 	mov    BYTE PTR ds:0xc002e38d,0x1
c000e94a:	e8 34 0f 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000e94f:	e8 a7 ff 00 00       	call   c001e8fb <Vm::initialise8086()>
c000e954:	e8 b3 42 00 00       	call   c0012c0c <Fs::initVFS()>
c000e959:	c7 04 24 2c a3 02 c0 	mov    DWORD PTR [esp],0xc002a32c
c000e960:	e8 1e 0f 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000e965:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e96a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e970:	8b 10                	mov    edx,DWORD PTR [eax]
c000e972:	6a 00                	push   0x0
c000e974:	6a 00                	push   0x0
c000e976:	6a 00                	push   0x0
c000e978:	50                   	push   eax
c000e979:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e97c:	83 c4 14             	add    esp,0x14
c000e97f:	68 48 a4 02 c0       	push   0xc002a448
c000e984:	e8 fa 0e 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000e989:	e8 5e d8 00 00       	call   c001c1ec <Sys::loadSyscalls()>
c000e98e:	e8 53 b7 00 00       	call   c001a0e6 <Krnl::loadSystemEnv()>
c000e993:	83 c4 0c             	add    esp,0xc
c000e996:	6a 3a                	push   0x3a
c000e998:	68 46 a3 02 c0       	push   0xc002a346
c000e99d:	68 4f a3 02 c0       	push   0xc002a34f
c000e9a2:	e8 04 c6 00 00       	call   c001afab <Reg::readIntWithDefault(char*, char*, int)>
c000e9a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9aa:	e8 4d 4d 00 00       	call   c00136fc <User::loadClockSettings(int)>
c000e9af:	c7 04 24 6c a4 02 c0 	mov    DWORD PTR [esp],0xc002a46c
c000e9b6:	e8 c8 0e 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000e9bb:	58                   	pop    eax
c000e9bc:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e9c1:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e9c7:	e8 38 54 00 00       	call   c0013e04 <Device::loadDriversForAll()>
c000e9cc:	c7 04 24 57 a3 02 c0 	mov    DWORD PTR [esp],0xc002a357
c000e9d3:	e8 ab 0e 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000e9d8:	e8 71 b2 00 00       	call   c0019c4e <Krnl::startCPUs()>
c000e9dd:	c7 04 24 71 a3 02 c0 	mov    DWORD PTR [esp],0xc002a371
c000e9e4:	e8 9a 0e 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000e9e9:	5a                   	pop    edx
c000e9ea:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c000e9f0:	59                   	pop    ecx
c000e9f1:	6a 01                	push   0x1
c000e9f3:	68 82 a3 02 c0       	push   0xc002a382
c000e9f8:	e8 bf e9 00 00       	call   c001d3bc <Thr::loadDLL(char const*, bool)>
c000e9fd:	5a                   	pop    edx
c000e9fe:	59                   	pop    ecx
c000e9ff:	53                   	push   ebx
c000ea00:	50                   	push   eax
c000ea01:	e8 e7 eb 00 00       	call   c001d5ed <Thr::executeDLL(unsigned long, void*)>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	83 ec 0c             	sub    esp,0xc
c000ea0c:	6a 02                	push   0x2
c000ea0e:	e8 44 f5 00 00       	call   c001df57 <blockTask(TaskState)>
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	eb f1                	jmp    c000ea09 <Krnl::firstTask()+0x13f>

c000ea18 <Computer::Computer()>:
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1f:	83 ec 08             	sub    esp,0x8
c000ea22:	68 9e a3 02 c0       	push   0xc002a39e
c000ea27:	50                   	push   eax
c000ea28:	e8 91 54 00 00       	call   c0013ebe <Device::Device(char const*)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	ba 1c a5 02 c0       	mov    edx,0xc002a51c
c000ea35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea39:	89 10                	mov    DWORD PTR [eax],edx
c000ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ea49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ea57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea5b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ea61:	83 ca 04             	or     edx,0x4
c000ea64:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ea6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea74:	0f b6 d0             	movzx  edx,al
c000ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea8c:	0f b6 d0             	movzx  edx,al
c000ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea93:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ea98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaa2:	8d 50 01             	lea    edx,[eax+0x1]
c000eaa5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eaa9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eaaf:	0f b6 d0             	movzx  edx,al
c000eab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eaba:	83 e1 3f             	and    ecx,0x3f
c000eabd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eacb:	0f b6 d0             	movzx  edx,al
c000eace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead2:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ead9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eadd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eae3:	0f b6 d0             	movzx  edx,al
c000eae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaea:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaf9:	8d 50 01             	lea    edx,[eax+0x1]
c000eafc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb00:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb06:	0f b6 d0             	movzx  edx,al
c000eb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb11:	83 e1 3f             	and    ecx,0x3f
c000eb14:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb22:	0f b6 d0             	movzx  edx,al
c000eb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb29:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000eb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb3a:	0f b6 d0             	movzx  edx,al
c000eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb41:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb50:	8d 50 01             	lea    edx,[eax+0x1]
c000eb53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb57:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb5d:	0f b6 d0             	movzx  edx,al
c000eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb64:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb68:	83 e1 3f             	and    ecx,0x3f
c000eb6b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb6f:	90                   	nop
c000eb70:	83 c4 0c             	add    esp,0xc
c000eb73:	c3                   	ret    

c000eb74 <Computer::setBootMessage(char const*)>:
c000eb74:	c3                   	ret    
c000eb75:	90                   	nop

c000eb76 <Computer::detectFeatures()>:
c000eb76:	55                   	push   ebp
c000eb77:	57                   	push   edi
c000eb78:	56                   	push   esi
c000eb79:	53                   	push   ebx
c000eb7a:	83 ec 1c             	sub    esp,0x1c
c000eb7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000eb81:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000eb8b:	e8 54 17 ff ff       	call   c00002e4 <detectCPUID>
c000eb90:	85 c0                	test   eax,eax
c000eb92:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb98:	0f 95 c2             	setne  dl
c000eb9b:	83 e0 fd             	and    eax,0xfffffffd
c000eb9e:	d1 e2                	shl    edx,1
c000eba0:	09 d0                	or     eax,edx
c000eba2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eba8:	a8 02                	test   al,0x2
c000ebaa:	75 46                	jne    c000ebf2 <Computer::detectFeatures()+0x7c>
c000ebac:	f6 05 a1 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3a1,0x4
c000ebb3:	74 07                	je     c000ebbc <Computer::detectFeatures()+0x46>
c000ebb5:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000ebbc:	e8 25 7d 01 00       	call   c00268e6 <x87Detect>
c000ebc1:	83 e0 01             	and    eax,0x1
c000ebc4:	c1 e0 04             	shl    eax,0x4
c000ebc7:	88 c2                	mov    dl,al
c000ebc9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ebcf:	83 e0 ef             	and    eax,0xffffffef
c000ebd2:	09 d0                	or     eax,edx
c000ebd4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ebda:	a8 10                	test   al,0x10
c000ebdc:	0f 85 2a 01 00 00    	jne    c000ed0c <Computer::detectFeatures()+0x196>
c000ebe2:	84 c0                	test   al,al
c000ebe4:	0f 88 45 01 00 00    	js     c000ed2f <Computer::detectFeatures()+0x1b9>
c000ebea:	83 c4 1c             	add    esp,0x1c
c000ebed:	5b                   	pop    ebx
c000ebee:	5e                   	pop    esi
c000ebef:	5f                   	pop    edi
c000ebf0:	5d                   	pop    ebp
c000ebf1:	c3                   	ret    
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	6a 20                	push   0x20
c000ebf7:	e8 54 9f 00 00       	call   c0018b50 <CPU::cpuidCheckEDX(unsigned int)>
c000ebfc:	83 e0 01             	and    eax,0x1
c000ebff:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ec06:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec0c:	83 e0 f7             	and    eax,0xfffffff7
c000ec0f:	09 d0                	or     eax,edx
c000ec11:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec17:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ec1e:	e8 2d 9f 00 00       	call   c0018b50 <CPU::cpuidCheckEDX(unsigned int)>
c000ec23:	83 e0 01             	and    eax,0x1
c000ec26:	88 c2                	mov    dl,al
c000ec28:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec2e:	83 e0 fe             	and    eax,0xfffffffe
c000ec31:	09 d0                	or     eax,edx
c000ec33:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec39:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ec40:	e8 0b 9f 00 00       	call   c0018b50 <CPU::cpuidCheckEDX(unsigned int)>
c000ec45:	c1 e0 07             	shl    eax,0x7
c000ec48:	88 c2                	mov    dl,al
c000ec4a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec50:	83 e0 7f             	and    eax,0x7f
c000ec53:	09 d0                	or     eax,edx
c000ec55:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec5b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ec62:	e8 e9 9e 00 00       	call   c0018b50 <CPU::cpuidCheckEDX(unsigned int)>
c000ec67:	83 c4 10             	add    esp,0x10
c000ec6a:	83 e0 01             	and    eax,0x1
c000ec6d:	c1 e0 05             	shl    eax,0x5
c000ec70:	88 c2                	mov    dl,al
c000ec72:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec78:	83 e0 df             	and    eax,0xffffffdf
c000ec7b:	09 d0                	or     eax,edx
c000ec7d:	f7 05 a0 e3 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e3a0,0x401
c000ec87:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec8d:	0f 84 c2 00 00 00    	je     c000ed55 <Computer::detectFeatures()+0x1df>
c000ec93:	83 e0 fe             	and    eax,0xfffffffe
c000ec96:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec9c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eca2:	88 c2                	mov    dl,al
c000eca4:	83 e2 09             	and    edx,0x9
c000eca7:	fe ca                	dec    dl
c000eca9:	75 09                	jne    c000ecb4 <Computer::detectFeatures()+0x13e>
c000ecab:	83 e0 fe             	and    eax,0xfffffffe
c000ecae:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ecbb:	50                   	push   eax
c000ecbc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ecc0:	55                   	push   ebp
c000ecc1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ecc5:	57                   	push   edi
c000ecc6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ecca:	56                   	push   esi
c000eccb:	68 00 00 00 80       	push   0x80000000
c000ecd0:	e8 f7 9d 00 00       	call   c0018acc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecd5:	83 c4 20             	add    esp,0x20
c000ecd8:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ecdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ece3:	0f 86 c3 fe ff ff    	jbe    c000ebac <Computer::detectFeatures()+0x36>
c000ece9:	83 ec 0c             	sub    esp,0xc
c000ecec:	50                   	push   eax
c000eced:	55                   	push   ebp
c000ecee:	57                   	push   edi
c000ecef:	56                   	push   esi
c000ecf0:	68 01 00 00 80       	push   0x80000001
c000ecf5:	e8 d2 9d 00 00       	call   c0018acc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecfa:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ed04:	83 c4 20             	add    esp,0x20
c000ed07:	e9 a0 fe ff ff       	jmp    c000ebac <Computer::detectFeatures()+0x36>
c000ed0c:	e8 8f 7b 01 00       	call   c00268a0 <absolutelyNoChanceInHell>
c000ed11:	88 c2                	mov    dl,al
c000ed13:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed19:	c1 e2 07             	shl    edx,0x7
c000ed1c:	83 e0 7f             	and    eax,0x7f
c000ed1f:	09 d0                	or     eax,edx
c000ed21:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed27:	84 c0                	test   al,al
c000ed29:	0f 89 bb fe ff ff    	jns    c000ebea <Computer::detectFeatures()+0x74>
c000ed2f:	e8 4c 7b 01 00       	call   c0026880 <avxDetect>
c000ed34:	83 e0 01             	and    eax,0x1
c000ed37:	c1 e0 05             	shl    eax,0x5
c000ed3a:	88 c2                	mov    dl,al
c000ed3c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ed42:	83 e0 df             	and    eax,0xffffffdf
c000ed45:	09 d0                	or     eax,edx
c000ed47:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ed4d:	83 c4 1c             	add    esp,0x1c
c000ed50:	5b                   	pop    ebx
c000ed51:	5e                   	pop    esi
c000ed52:	5f                   	pop    edi
c000ed53:	5d                   	pop    ebp
c000ed54:	c3                   	ret    
c000ed55:	83 ec 0c             	sub    esp,0xc
c000ed58:	68 00 02 00 00       	push   0x200
c000ed5d:	e8 ee 9d 00 00       	call   c0018b50 <CPU::cpuidCheckEDX(unsigned int)>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	83 e0 01             	and    eax,0x1
c000ed68:	88 c2                	mov    dl,al
c000ed6a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed70:	83 e0 fe             	and    eax,0xfffffffe
c000ed73:	09 d0                	or     eax,edx
c000ed75:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed7b:	e9 1c ff ff ff       	jmp    c000ec9c <Computer::detectFeatures()+0x126>

c000ed80 <Computer::displayFeatures()>:
c000ed80:	c3                   	ret    
c000ed81:	90                   	nop

c000ed82 <Computer::rdmsr(unsigned int)>:
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ed90:	74 0a                	je     c000ed9c <Computer::rdmsr(unsigned int)+0x1a>
c000ed92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ed96:	0f 32                	rdmsr  
c000ed98:	83 c4 0c             	add    esp,0xc
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 a7 a3 02 c0       	push   0xc002a3a7
c000eda4:	e8 46 b4 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	eb e4                	jmp    c000ed92 <Computer::rdmsr(unsigned int)+0x10>

c000edae <Computer::wrmsr(unsigned int, unsigned long long)>:
c000edae:	57                   	push   edi
c000edaf:	56                   	push   esi
c000edb0:	52                   	push   edx
c000edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000edb9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000edbd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edc4:	74 0e                	je     c000edd4 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000edc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edca:	89 f0                	mov    eax,esi
c000edcc:	89 fa                	mov    edx,edi
c000edce:	0f 30                	wrmsr  
c000edd0:	58                   	pop    eax
c000edd1:	5e                   	pop    esi
c000edd2:	5f                   	pop    edi
c000edd3:	c3                   	ret    
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	68 ad a3 02 c0       	push   0xc002a3ad
c000eddc:	e8 0e b4 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c000ede1:	83 c4 10             	add    esp,0x10
c000ede4:	eb e0                	jmp    c000edc6 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ede6 <Computer::nmiEnabled()>:
c000ede6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edea:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000edf0:	c3                   	ret    
c000edf1:	90                   	nop

c000edf2 <Computer::readCMOS(unsigned char)>:
c000edf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edf6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000edfd:	19 c0                	sbb    eax,eax
c000edff:	83 e0 80             	and    eax,0xffffff80
c000ee02:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee06:	e6 70                	out    0x70,al
c000ee08:	e4 71                	in     al,0x71
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <Computer::enableNMI(bool)>:
c000ee0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee14:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee1a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee22:	eb ce                	jmp    c000edf2 <Computer::readCMOS(unsigned char)>

c000ee24 <Computer::open(int, int, void*)>:
c000ee24:	56                   	push   esi
c000ee25:	53                   	push   ebx
c000ee26:	83 ec 10             	sub    esp,0x10
c000ee29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee2d:	68 8c a4 02 c0       	push   0xc002a48c
c000ee32:	e8 4c 0a 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000ee37:	f6 05 a0 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3a0,0x4
c000ee3e:	c7 04 24 b3 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3b3
c000ee45:	0f 94 05 c0 d2 02 c0 	sete   BYTE PTR ds:0xc002d2c0
c000ee4c:	e8 32 0a 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000ee51:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ee58:	e8 cc 09 00 00       	call   c000f829 <malloc>
c000ee5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee60:	89 c6                	mov    esi,eax
c000ee62:	e8 5d 8f 00 00       	call   c0017dc4 <ACPI::ACPI()>
c000ee67:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ee6d:	c7 04 24 cd a3 02 c0 	mov    DWORD PTR [esp],0xc002a3cd
c000ee74:	e8 0a 0a 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000ee79:	58                   	pop    eax
c000ee7a:	5a                   	pop    edx
c000ee7b:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ee81:	53                   	push   ebx
c000ee82:	e8 33 4e 00 00       	call   c0013cba <Device::addChild(Device*)>
c000ee87:	c7 04 24 b0 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4b0
c000ee8e:	e8 f0 09 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000ee93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee96:	e8 db fc ff ff       	call   c000eb76 <Computer::detectFeatures()>
c000ee9b:	c7 04 24 d0 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4d0
c000eea2:	e8 dc 09 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000eea7:	c7 04 24 e7 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3e7
c000eeae:	e8 d0 09 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000eeb3:	59                   	pop    ecx
c000eeb4:	5e                   	pop    esi
c000eeb5:	6a 01                	push   0x1
c000eeb7:	53                   	push   ebx
c000eeb8:	e8 4f ff ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000eebd:	c7 04 24 57 a3 02 c0 	mov    DWORD PTR [esp],0xc002a357
c000eec4:	e8 ba 09 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000eec9:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eed0:	e8 54 09 00 00       	call   c000f829 <malloc>
c000eed5:	89 c6                	mov    esi,eax
c000eed7:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeda:	e8 29 9d 00 00       	call   c0018c08 <CPU::CPU()>
c000eedf:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eee5:	58                   	pop    eax
c000eee6:	5a                   	pop    edx
c000eee7:	56                   	push   esi
c000eee8:	53                   	push   ebx
c000eee9:	e8 cc 4d 00 00       	call   c0013cba <Device::addChild(Device*)>
c000eeee:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eef4:	8b 10                	mov    edx,DWORD PTR [eax]
c000eef6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eefa:	6a 00                	push   0x0
c000eefc:	6a 00                	push   0x0
c000eefe:	50                   	push   eax
c000eeff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef02:	83 c4 14             	add    esp,0x14
c000ef05:	68 f0 a4 02 c0       	push   0xc002a4f0
c000ef0a:	e8 74 09 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000ef0f:	e8 3e 53 00 00       	call   c0014252 <setupFPU()>
c000ef14:	83 c4 10             	add    esp,0x10
c000ef17:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef1d:	85 c0                	test   eax,eax
c000ef1f:	74 1f                	je     c000ef40 <Computer::open(int, int, void*)+0x11c>
c000ef21:	83 ec 08             	sub    esp,0x8
c000ef24:	50                   	push   eax
c000ef25:	53                   	push   ebx
c000ef26:	e8 8f 4d 00 00       	call   c0013cba <Device::addChild(Device*)>
c000ef2b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef31:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef33:	6a 00                	push   0x0
c000ef35:	6a 00                	push   0x0
c000ef37:	6a 00                	push   0x0
c000ef39:	50                   	push   eax
c000ef3a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef3d:	83 c4 20             	add    esp,0x20
c000ef40:	83 ec 0c             	sub    esp,0xc
c000ef43:	68 f8 a3 02 c0       	push   0xc002a3f8
c000ef48:	e8 36 09 00 00       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000ef4d:	c7 04 24 ca e8 00 c0 	mov    DWORD PTR [esp],0xc000e8ca
c000ef54:	e8 25 ed 00 00       	call   c001dc7e <setupMultitasking(void (*)())>
c000ef59:	83 c4 14             	add    esp,0x14
c000ef5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef61:	5b                   	pop    ebx
c000ef62:	5e                   	pop    esi
c000ef63:	c3                   	ret    

c000ef64 <Computer::disableNMI()>:
c000ef64:	6a 00                	push   0x0
c000ef66:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef6a:	e8 9d fe ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000ef6f:	58                   	pop    eax
c000ef70:	5a                   	pop    edx
c000ef71:	c3                   	ret    

c000ef72 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef76:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef7d:	19 c0                	sbb    eax,eax
c000ef7f:	83 e0 80             	and    eax,0xffffff80
c000ef82:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef86:	e6 70                	out    0x70,al
c000ef88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef8c:	e6 71                	out    0x71,al
c000ef8e:	c3                   	ret    
c000ef8f:	90                   	nop

c000ef90 <Computer::handleNMI()>:
c000ef90:	56                   	push   esi
c000ef91:	53                   	push   ebx
c000ef92:	83 ec 10             	sub    esp,0x10
c000ef95:	e4 92                	in     al,0x92
c000ef97:	89 c6                	mov    esi,eax
c000ef99:	e4 61                	in     al,0x61
c000ef9b:	68 13 a4 02 c0       	push   0xc002a413
c000efa0:	88 c3                	mov    bl,al
c000efa2:	e8 da 38 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000efa7:	83 c4 10             	add    esp,0x10
c000efaa:	83 e6 10             	and    esi,0x10
c000efad:	75 0d                	jne    c000efbc <Computer::handleNMI()+0x2c>
c000efaf:	f6 c3 40             	test   bl,0x40
c000efb2:	75 1d                	jne    c000efd1 <Computer::handleNMI()+0x41>
c000efb4:	84 db                	test   bl,bl
c000efb6:	78 2d                	js     c000efe5 <Computer::handleNMI()+0x55>
c000efb8:	58                   	pop    eax
c000efb9:	5b                   	pop    ebx
c000efba:	5e                   	pop    esi
c000efbb:	c3                   	ret    
c000efbc:	83 ec 0c             	sub    esp,0xc
c000efbf:	68 24 a4 02 c0       	push   0xc002a424
c000efc4:	e8 26 b2 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c000efc9:	83 c4 10             	add    esp,0x10
c000efcc:	f6 c3 40             	test   bl,0x40
c000efcf:	74 e3                	je     c000efb4 <Computer::handleNMI()+0x24>
c000efd1:	83 ec 0c             	sub    esp,0xc
c000efd4:	68 31 a4 02 c0       	push   0xc002a431
c000efd9:	e8 11 b2 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c000efde:	83 c4 10             	add    esp,0x10
c000efe1:	84 db                	test   bl,bl
c000efe3:	79 d3                	jns    c000efb8 <Computer::handleNMI()+0x28>
c000efe5:	c7 44 24 10 3b a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a43b
c000efed:	5a                   	pop    edx
c000efee:	5b                   	pop    ebx
c000efef:	5e                   	pop    esi
c000eff0:	e9 fa b1 00 00       	jmp    c001a1ef <Krnl::panic(char const*)>
c000eff5:	90                   	nop

c000eff6 <Computer::setDiskActivityLight(int, bool)>:
c000eff6:	56                   	push   esi
c000eff7:	53                   	push   ebx
c000eff8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000effc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f001:	77 1b                	ja     c000f01e <Computer::setDiskActivityLight(int, bool)+0x28>
c000f003:	e4 92                	in     al,0x92
c000f005:	bb 40 00 00 00       	mov    ebx,0x40
c000f00a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00e:	89 da                	mov    edx,ebx
c000f010:	d3 e2                	shl    edx,cl
c000f012:	89 f1                	mov    ecx,esi
c000f014:	f7 d2                	not    edx
c000f016:	d3 e3                	shl    ebx,cl
c000f018:	21 d0                	and    eax,edx
c000f01a:	09 d8                	or     eax,ebx
c000f01c:	e6 92                	out    0x92,al
c000f01e:	5b                   	pop    ebx
c000f01f:	5e                   	pop    esi
c000f020:	c3                   	ret    
c000f021:	90                   	nop

c000f022 <GDTEntry::setBase(unsigned int)>:
c000f022:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f026:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02a:	89 c1                	mov    ecx,eax
c000f02c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f030:	c1 e9 10             	shr    ecx,0x10
c000f033:	c1 e8 18             	shr    eax,0x18
c000f036:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f039:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f03c:	c3                   	ret    
c000f03d:	90                   	nop

c000f03e <GDTEntry::setLimit(unsigned int)>:
c000f03e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f042:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f046:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f049:	66 89 01             	mov    WORD PTR [ecx],ax
c000f04c:	83 e2 f0             	and    edx,0xfffffff0
c000f04f:	c1 e8 10             	shr    eax,0x10
c000f052:	83 e0 0f             	and    eax,0xf
c000f055:	09 d0                	or     eax,edx
c000f057:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f05a:	c3                   	ret    
c000f05b:	90                   	nop

c000f05c <GDT::GDT()>:
c000f05c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f060:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f070:	90                   	nop
c000f071:	c3                   	ret    

c000f072 <GDT::addEntry(GDTEntry)>:
c000f072:	53                   	push   ebx
c000f073:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f077:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f07b:	8b 02                	mov    eax,DWORD PTR [edx]
c000f07d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f081:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f085:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f089:	8d 48 01             	lea    ecx,[eax+0x1]
c000f08c:	c1 e0 03             	shl    eax,0x3
c000f08f:	89 0a                	mov    DWORD PTR [edx],ecx
c000f091:	5b                   	pop    ebx
c000f092:	c3                   	ret    
c000f093:	90                   	nop

c000f094 <GDT::getNumberOfEntries()>:
c000f094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f098:	8b 00                	mov    eax,DWORD PTR [eax]
c000f09a:	c3                   	ret    
c000f09b:	90                   	nop

c000f09c <GDT::flush()>:
c000f09c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0a2:	83 c0 04             	add    eax,0x4
c000f0a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0ac:	a3 92 e3 02 c0       	mov    ds:0xc002e392,eax
c000f0b1:	66 89 15 90 e3 02 c0 	mov    WORD PTR ds:0xc002e390,dx
c000f0b8:	e9 93 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0bd:	90                   	nop

c000f0be <GDT::setup()>:
c000f0be:	55                   	push   ebp
c000f0bf:	57                   	push   edi
c000f0c0:	56                   	push   esi
c000f0c1:	53                   	push   ebx
c000f0c2:	83 ec 3c             	sub    esp,0x3c
c000f0c5:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0c9:	6a 00                	push   0x0
c000f0cb:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0cf:	53                   	push   ebx
c000f0d0:	e8 4d ff ff ff       	call   c000f022 <GDTEntry::setBase(unsigned int)>
c000f0d5:	6a 00                	push   0x0
c000f0d7:	53                   	push   ebx
c000f0d8:	e8 61 ff ff ff       	call   c000f03e <GDTEntry::setLimit(unsigned int)>
c000f0dd:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0e5:	6a 00                	push   0x0
c000f0e7:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f0eb:	53                   	push   ebx
c000f0ec:	e8 31 ff ff ff       	call   c000f022 <GDTEntry::setBase(unsigned int)>
c000f0f1:	68 ff ff ff 00       	push   0xffffff
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 42 ff ff ff       	call   c000f03e <GDTEntry::setLimit(unsigned int)>
c000f0fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f100:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f105:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f10a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f10e:	83 c4 20             	add    esp,0x20
c000f111:	6a 00                	push   0x0
c000f113:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f117:	53                   	push   ebx
c000f118:	e8 05 ff ff ff       	call   c000f022 <GDTEntry::setBase(unsigned int)>
c000f11d:	68 ff ff ff 00       	push   0xffffff
c000f122:	53                   	push   ebx
c000f123:	e8 16 ff ff ff       	call   c000f03e <GDTEntry::setLimit(unsigned int)>
c000f128:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f12c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f130:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f134:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f138:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f13c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f141:	0d 00 92 c0 00       	or     eax,0xc09200
c000f146:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f14a:	89 d8                	mov    eax,ebx
c000f14c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f150:	80 cc 60             	or     ah,0x60
c000f153:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f157:	83 c4 0c             	add    esp,0xc
c000f15a:	89 f8                	mov    eax,edi
c000f15c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f160:	80 cc 60             	or     ah,0x60
c000f163:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f167:	89 c7                	mov    edi,eax
c000f169:	55                   	push   ebp
c000f16a:	e8 03 ff ff ff       	call   c000f072 <GDT::addEntry(GDTEntry)>
c000f16f:	83 c4 0c             	add    esp,0xc
c000f172:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f176:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f17a:	55                   	push   ebp
c000f17b:	e8 f2 fe ff ff       	call   c000f072 <GDT::addEntry(GDTEntry)>
c000f180:	83 c4 0c             	add    esp,0xc
c000f183:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f187:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f18b:	55                   	push   ebp
c000f18c:	e8 e1 fe ff ff       	call   c000f072 <GDT::addEntry(GDTEntry)>
c000f191:	83 c4 0c             	add    esp,0xc
c000f194:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f198:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f19c:	53                   	push   ebx
c000f19d:	51                   	push   ecx
c000f19e:	55                   	push   ebp
c000f19f:	e8 ce fe ff ff       	call   c000f072 <GDT::addEntry(GDTEntry)>
c000f1a4:	83 c4 0c             	add    esp,0xc
c000f1a7:	57                   	push   edi
c000f1a8:	56                   	push   esi
c000f1a9:	55                   	push   ebp
c000f1aa:	e8 c3 fe ff ff       	call   c000f072 <GDT::addEntry(GDTEntry)>
c000f1af:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1b2:	e8 e5 fe ff ff       	call   c000f09c <GDT::flush()>
c000f1b7:	83 c4 4c             	add    esp,0x4c
c000f1ba:	5b                   	pop    ebx
c000f1bb:	5e                   	pop    esi
c000f1bc:	5f                   	pop    edi
c000f1bd:	5d                   	pop    ebp
c000f1be:	c3                   	ret    

c000f1bf <idleFunction(void*)>:
c000f1bf:	53                   	push   ebx
c000f1c0:	83 ec 08             	sub    esp,0x8
c000f1c3:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c000f1c8:	48                   	dec    eax
c000f1c9:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c000f1ce:	75 01                	jne    c000f1d1 <idleFunction(void*)+0x12>
c000f1d0:	fb                   	sti    
c000f1d1:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000f1d6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1dc:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1e3:	74 3c                	je     c000f221 <idleFunction(void*)+0x62>
c000f1e5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1ec:	74 33                	je     c000f221 <idleFunction(void*)+0x62>
c000f1ee:	31 db                	xor    ebx,ebx
c000f1f0:	52                   	push   edx
c000f1f1:	52                   	push   edx
c000f1f2:	68 e1 00 00 00       	push   0xe1
c000f1f7:	50                   	push   eax
c000f1f8:	e8 85 fb ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c000f1fd:	53                   	push   ebx
c000f1fe:	83 e0 02             	and    eax,0x2
c000f201:	50                   	push   eax
c000f202:	68 e1 00 00 00       	push   0xe1
c000f207:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c000f20d:	e8 9c fb ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c000f212:	83 c4 20             	add    esp,0x20
c000f215:	e8 65 10 ff ff       	call   c000027f <doTPAUSE>
c000f21a:	e8 11 97 01 00       	call   c0028930 <idleCommon()>
c000f21f:	eb f4                	jmp    c000f215 <idleFunction(void*)+0x56>
c000f221:	fb                   	sti    
c000f222:	f4                   	hlt    
c000f223:	e8 08 97 01 00       	call   c0028930 <idleCommon()>
c000f228:	eb f7                	jmp    c000f221 <idleFunction(void*)+0x62>

c000f22a <IDTEntry::IDTEntry(bool)>:
c000f22a:	83 ec 04             	sub    esp,0x4
c000f22d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f231:	88 04 24             	mov    BYTE PTR [esp],al
c000f234:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f238:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f23e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f242:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f246:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f24d:	83 e2 f0             	and    edx,0xfffffff0
c000f250:	83 ca 0e             	or     edx,0xe
c000f253:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f256:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f25a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25d:	83 e2 ef             	and    edx,0xffffffef
c000f260:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f263:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f267:	74 04                	je     c000f26d <IDTEntry::IDTEntry(bool)+0x43>
c000f269:	b2 03                	mov    dl,0x3
c000f26b:	eb 02                	jmp    c000f26f <IDTEntry::IDTEntry(bool)+0x45>
c000f26d:	b2 00                	mov    dl,0x0
c000f26f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f273:	83 e2 03             	and    edx,0x3
c000f276:	88 d1                	mov    cl,dl
c000f278:	c1 e1 05             	shl    ecx,0x5
c000f27b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f27e:	83 e2 9f             	and    edx,0xffffff9f
c000f281:	09 ca                	or     edx,ecx
c000f283:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f28a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28d:	83 ca 80             	or     edx,0xffffff80
c000f290:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f293:	90                   	nop
c000f294:	83 c4 04             	add    esp,0x4
c000f297:	c3                   	ret    

c000f298 <IDTEntry::setOffset(unsigned int)>:
c000f298:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f29c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a0:	66 89 02             	mov    WORD PTR [edx],ax
c000f2a3:	c1 e8 10             	shr    eax,0x10
c000f2a6:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2aa:	c3                   	ret    
c000f2ab:	90                   	nop

c000f2ac <IDT::IDT()>:
c000f2ac:	90                   	nop
c000f2ad:	c3                   	ret    

c000f2ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2b2:	83 c0 30             	add    eax,0x30
c000f2b5:	c3                   	ret    

c000f2b6 <IDT::addEntry(IDTEntry, int)>:
c000f2b6:	53                   	push   ebx
c000f2b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2ce:	5b                   	pop    ebx
c000f2cf:	c3                   	ret    

c000f2d0 <IDT::addEntry(int, void (*)(), bool)>:
c000f2d0:	53                   	push   ebx
c000f2d1:	83 ec 10             	sub    esp,0x10
c000f2d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2d9:	50                   	push   eax
c000f2da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2de:	53                   	push   ebx
c000f2df:	e8 46 ff ff ff       	call   c000f22a <IDTEntry::IDTEntry(bool)>
c000f2e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2e8:	53                   	push   ebx
c000f2e9:	e8 aa ff ff ff       	call   c000f298 <IDTEntry::setOffset(unsigned int)>
c000f2ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f2f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f2f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f2fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f2fe:	e8 b3 ff ff ff       	call   c000f2b6 <IDT::addEntry(IDTEntry, int)>
c000f303:	83 c4 30             	add    esp,0x30
c000f306:	5b                   	pop    ebx
c000f307:	c3                   	ret    

c000f308 <IDT::flush()>:
c000f308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f30c:	66 c7 05 98 e3 02 c0 ff 07 	mov    WORD PTR ds:0xc002e398,0x7ff
c000f315:	a3 9a e3 02 c0       	mov    ds:0xc002e39a,eax
c000f31a:	0f 01 1d 98 e3 02 c0 	lidtd  ds:0xc002e398
c000f321:	c3                   	ret    

c000f322 <IDT::setup()>:
c000f322:	57                   	push   edi
c000f323:	56                   	push   esi
c000f324:	53                   	push   ebx
c000f325:	83 ec 10             	sub    esp,0x10
c000f328:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f32c:	6a 00                	push   0x0
c000f32e:	68 70 04 00 c0       	push   0xc0000470
c000f333:	6a 00                	push   0x0
c000f335:	53                   	push   ebx
c000f336:	e8 95 ff ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f33b:	6a 00                	push   0x0
c000f33d:	68 80 04 00 c0       	push   0xc0000480
c000f342:	6a 01                	push   0x1
c000f344:	53                   	push   ebx
c000f345:	e8 86 ff ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f34a:	83 c4 20             	add    esp,0x20
c000f34d:	6a 00                	push   0x0
c000f34f:	68 8a 04 00 c0       	push   0xc000048a
c000f354:	6a 02                	push   0x2
c000f356:	53                   	push   ebx
c000f357:	e8 74 ff ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f35c:	6a 00                	push   0x0
c000f35e:	68 94 04 00 c0       	push   0xc0000494
c000f363:	6a 03                	push   0x3
c000f365:	53                   	push   ebx
c000f366:	e8 65 ff ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f36b:	83 c4 20             	add    esp,0x20
c000f36e:	6a 00                	push   0x0
c000f370:	68 9e 04 00 c0       	push   0xc000049e
c000f375:	6a 04                	push   0x4
c000f377:	53                   	push   ebx
c000f378:	e8 53 ff ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f37d:	6a 00                	push   0x0
c000f37f:	68 a8 04 00 c0       	push   0xc00004a8
c000f384:	6a 05                	push   0x5
c000f386:	53                   	push   ebx
c000f387:	e8 44 ff ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f38c:	83 c4 20             	add    esp,0x20
c000f38f:	6a 00                	push   0x0
c000f391:	68 b2 04 00 c0       	push   0xc00004b2
c000f396:	6a 06                	push   0x6
c000f398:	53                   	push   ebx
c000f399:	e8 32 ff ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f39e:	6a 00                	push   0x0
c000f3a0:	68 bc 04 00 c0       	push   0xc00004bc
c000f3a5:	6a 07                	push   0x7
c000f3a7:	53                   	push   ebx
c000f3a8:	e8 23 ff ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f3ad:	83 c4 20             	add    esp,0x20
c000f3b0:	6a 00                	push   0x0
c000f3b2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3b7:	6a 08                	push   0x8
c000f3b9:	53                   	push   ebx
c000f3ba:	e8 11 ff ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f3bf:	6a 00                	push   0x0
c000f3c1:	68 ce 04 00 c0       	push   0xc00004ce
c000f3c6:	6a 09                	push   0x9
c000f3c8:	53                   	push   ebx
c000f3c9:	e8 02 ff ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f3ce:	83 c4 20             	add    esp,0x20
c000f3d1:	6a 00                	push   0x0
c000f3d3:	68 d8 04 00 c0       	push   0xc00004d8
c000f3d8:	6a 0a                	push   0xa
c000f3da:	53                   	push   ebx
c000f3db:	e8 f0 fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f3e0:	6a 00                	push   0x0
c000f3e2:	68 e0 04 00 c0       	push   0xc00004e0
c000f3e7:	6a 0b                	push   0xb
c000f3e9:	53                   	push   ebx
c000f3ea:	e8 e1 fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f3ef:	83 c4 20             	add    esp,0x20
c000f3f2:	6a 00                	push   0x0
c000f3f4:	68 e8 04 00 c0       	push   0xc00004e8
c000f3f9:	6a 0c                	push   0xc
c000f3fb:	53                   	push   ebx
c000f3fc:	e8 cf fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f401:	6a 00                	push   0x0
c000f403:	68 f0 04 00 c0       	push   0xc00004f0
c000f408:	6a 0d                	push   0xd
c000f40a:	53                   	push   ebx
c000f40b:	e8 c0 fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f410:	83 c4 20             	add    esp,0x20
c000f413:	6a 00                	push   0x0
c000f415:	68 f8 04 00 c0       	push   0xc00004f8
c000f41a:	6a 0e                	push   0xe
c000f41c:	53                   	push   ebx
c000f41d:	e8 ae fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f422:	6a 00                	push   0x0
c000f424:	68 00 05 00 c0       	push   0xc0000500
c000f429:	6a 0f                	push   0xf
c000f42b:	53                   	push   ebx
c000f42c:	e8 9f fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f431:	83 c4 20             	add    esp,0x20
c000f434:	6a 00                	push   0x0
c000f436:	68 0a 05 00 c0       	push   0xc000050a
c000f43b:	6a 10                	push   0x10
c000f43d:	53                   	push   ebx
c000f43e:	e8 8d fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f443:	6a 00                	push   0x0
c000f445:	68 14 05 00 c0       	push   0xc0000514
c000f44a:	6a 11                	push   0x11
c000f44c:	53                   	push   ebx
c000f44d:	e8 7e fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f452:	83 c4 20             	add    esp,0x20
c000f455:	6a 00                	push   0x0
c000f457:	68 1e 05 00 c0       	push   0xc000051e
c000f45c:	6a 12                	push   0x12
c000f45e:	53                   	push   ebx
c000f45f:	e8 6c fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f464:	6a 01                	push   0x1
c000f466:	68 b8 05 00 c0       	push   0xc00005b8
c000f46b:	6a 60                	push   0x60
c000f46d:	53                   	push   ebx
c000f46e:	e8 5d fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f473:	83 c4 20             	add    esp,0x20
c000f476:	6a 00                	push   0x0
c000f478:	68 bf 05 00 c0       	push   0xc00005bf
c000f47d:	6a 20                	push   0x20
c000f47f:	53                   	push   ebx
c000f480:	e8 4b fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f485:	6a 00                	push   0x0
c000f487:	68 aa 05 00 c0       	push   0xc00005aa
c000f48c:	6a 21                	push   0x21
c000f48e:	53                   	push   ebx
c000f48f:	e8 3c fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f494:	83 c4 20             	add    esp,0x20
c000f497:	6a 00                	push   0x0
c000f499:	68 b1 05 00 c0       	push   0xc00005b1
c000f49e:	6a 22                	push   0x22
c000f4a0:	53                   	push   ebx
c000f4a1:	e8 2a fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f4a6:	6a 00                	push   0x0
c000f4a8:	68 28 05 00 c0       	push   0xc0000528
c000f4ad:	6a 23                	push   0x23
c000f4af:	53                   	push   ebx
c000f4b0:	e8 1b fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f4b5:	83 c4 20             	add    esp,0x20
c000f4b8:	6a 00                	push   0x0
c000f4ba:	68 32 05 00 c0       	push   0xc0000532
c000f4bf:	6a 24                	push   0x24
c000f4c1:	53                   	push   ebx
c000f4c2:	e8 09 fe ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f4c7:	6a 00                	push   0x0
c000f4c9:	68 3c 05 00 c0       	push   0xc000053c
c000f4ce:	6a 25                	push   0x25
c000f4d0:	53                   	push   ebx
c000f4d1:	e8 fa fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f4d6:	83 c4 20             	add    esp,0x20
c000f4d9:	6a 00                	push   0x0
c000f4db:	68 46 05 00 c0       	push   0xc0000546
c000f4e0:	6a 26                	push   0x26
c000f4e2:	53                   	push   ebx
c000f4e3:	e8 e8 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f4e8:	6a 00                	push   0x0
c000f4ea:	68 50 05 00 c0       	push   0xc0000550
c000f4ef:	6a 27                	push   0x27
c000f4f1:	53                   	push   ebx
c000f4f2:	e8 d9 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f4f7:	83 c4 20             	add    esp,0x20
c000f4fa:	6a 00                	push   0x0
c000f4fc:	68 5a 05 00 c0       	push   0xc000055a
c000f501:	6a 28                	push   0x28
c000f503:	53                   	push   ebx
c000f504:	e8 c7 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f509:	6a 00                	push   0x0
c000f50b:	68 64 05 00 c0       	push   0xc0000564
c000f510:	6a 29                	push   0x29
c000f512:	53                   	push   ebx
c000f513:	e8 b8 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f518:	83 c4 20             	add    esp,0x20
c000f51b:	6a 00                	push   0x0
c000f51d:	68 6e 05 00 c0       	push   0xc000056e
c000f522:	6a 2a                	push   0x2a
c000f524:	53                   	push   ebx
c000f525:	e8 a6 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f52a:	6a 00                	push   0x0
c000f52c:	68 78 05 00 c0       	push   0xc0000578
c000f531:	6a 2b                	push   0x2b
c000f533:	53                   	push   ebx
c000f534:	e8 97 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f539:	83 c4 20             	add    esp,0x20
c000f53c:	6a 00                	push   0x0
c000f53e:	68 82 05 00 c0       	push   0xc0000582
c000f543:	6a 2c                	push   0x2c
c000f545:	53                   	push   ebx
c000f546:	e8 85 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f54b:	6a 00                	push   0x0
c000f54d:	68 8c 05 00 c0       	push   0xc000058c
c000f552:	6a 2d                	push   0x2d
c000f554:	53                   	push   ebx
c000f555:	e8 76 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f55a:	83 c4 20             	add    esp,0x20
c000f55d:	6a 00                	push   0x0
c000f55f:	68 96 05 00 c0       	push   0xc0000596
c000f564:	6a 2e                	push   0x2e
c000f566:	53                   	push   ebx
c000f567:	e8 64 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f56c:	6a 00                	push   0x0
c000f56e:	68 a0 05 00 c0       	push   0xc00005a0
c000f573:	6a 2f                	push   0x2f
c000f575:	53                   	push   ebx
c000f576:	e8 55 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f57b:	83 c4 20             	add    esp,0x20
c000f57e:	6a 00                	push   0x0
c000f580:	68 f6 05 00 c0       	push   0xc00005f6
c000f585:	6a 30                	push   0x30
c000f587:	53                   	push   ebx
c000f588:	e8 43 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f58d:	6a 00                	push   0x0
c000f58f:	68 00 06 00 c0       	push   0xc0000600
c000f594:	6a 31                	push   0x31
c000f596:	53                   	push   ebx
c000f597:	e8 34 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f59c:	83 c4 20             	add    esp,0x20
c000f59f:	6a 00                	push   0x0
c000f5a1:	68 0a 06 00 c0       	push   0xc000060a
c000f5a6:	6a 32                	push   0x32
c000f5a8:	53                   	push   ebx
c000f5a9:	e8 22 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f5ae:	6a 00                	push   0x0
c000f5b0:	68 14 06 00 c0       	push   0xc0000614
c000f5b5:	6a 33                	push   0x33
c000f5b7:	53                   	push   ebx
c000f5b8:	e8 13 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f5bd:	83 c4 20             	add    esp,0x20
c000f5c0:	6a 00                	push   0x0
c000f5c2:	68 1e 06 00 c0       	push   0xc000061e
c000f5c7:	6a 34                	push   0x34
c000f5c9:	53                   	push   ebx
c000f5ca:	e8 01 fd ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f5cf:	6a 00                	push   0x0
c000f5d1:	68 28 06 00 c0       	push   0xc0000628
c000f5d6:	6a 35                	push   0x35
c000f5d8:	53                   	push   ebx
c000f5d9:	e8 f2 fc ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f5de:	83 c4 20             	add    esp,0x20
c000f5e1:	6a 00                	push   0x0
c000f5e3:	68 32 06 00 c0       	push   0xc0000632
c000f5e8:	6a 36                	push   0x36
c000f5ea:	53                   	push   ebx
c000f5eb:	e8 e0 fc ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f5f0:	6a 00                	push   0x0
c000f5f2:	68 3c 06 00 c0       	push   0xc000063c
c000f5f7:	6a 37                	push   0x37
c000f5f9:	53                   	push   ebx
c000f5fa:	e8 d1 fc ff ff       	call   c000f2d0 <IDT::addEntry(int, void (*)(), bool)>
c000f5ff:	83 c4 1c             	add    esp,0x1c
c000f602:	6a 03                	push   0x3
c000f604:	6a 02                	push   0x2
c000f606:	ff 35 f0 e4 02 c0    	push   DWORD PTR ds:0xc002e4f0
c000f60c:	e8 47 26 00 00       	call   c0011c58 <VAS::allocatePages(int, int)>
c000f611:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f618:	89 c6                	mov    esi,eax
c000f61a:	e8 0a 02 00 00       	call   c000f829 <malloc>
c000f61f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f625:	89 04 24             	mov    DWORD PTR [esp],eax
c000f628:	89 c7                	mov    edi,eax
c000f62a:	e8 c7 17 00 00       	call   c0010df6 <TSS::TSS()>
c000f62f:	83 c4 0c             	add    esp,0xc
c000f632:	68 c6 04 00 c0       	push   0xc00004c6
c000f637:	56                   	push   esi
c000f638:	57                   	push   edi
c000f639:	e8 f8 17 00 00       	call   c0010e36 <TSS::setup(unsigned long, unsigned long)>
c000f63e:	89 c6                	mov    esi,eax
c000f640:	58                   	pop    eax
c000f641:	5a                   	pop    edx
c000f642:	6a 00                	push   0x0
c000f644:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f648:	50                   	push   eax
c000f649:	e8 dc fb ff ff       	call   c000f22a <IDTEntry::IDTEntry(bool)>
c000f64e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f652:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f657:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f65e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f664:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f668:	80 ce 05             	or     dh,0x5
c000f66b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f66e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f672:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f676:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f679:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f67c:	e8 87 fc ff ff       	call   c000f308 <IDT::flush()>
c000f681:	83 c4 20             	add    esp,0x20
c000f684:	5b                   	pop    ebx
c000f685:	5e                   	pop    esi
c000f686:	5f                   	pop    edi
c000f687:	c3                   	ret    

c000f688 <sbrk>:
c000f688:	55                   	push   ebp
c000f689:	57                   	push   edi
c000f68a:	56                   	push   esi
c000f68b:	53                   	push   ebx
c000f68c:	83 ec 1c             	sub    esp,0x1c
c000f68f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f693:	85 c0                	test   eax,eax
c000f695:	74 3e                	je     c000f6d5 <sbrk+0x4d>
c000f697:	78 43                	js     c000f6dc <sbrk+0x54>
c000f699:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c000f69f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6a5:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ab:	83 e2 01             	and    edx,0x1
c000f6ae:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6b2:	8b 0d 5c d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d15c
c000f6b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6bc:	05 ff 0f 00 00       	add    eax,0xfff
c000f6c1:	89 c2                	mov    edx,eax
c000f6c3:	78 2f                	js     c000f6f4 <sbrk+0x6c>
c000f6c5:	c1 fa 0c             	sar    edx,0xc
c000f6c8:	89 d7                	mov    edi,edx
c000f6ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6ce:	be 00 00 00 00       	mov    esi,0x0
c000f6d3:	eb 36                	jmp    c000f70b <sbrk+0x83>
c000f6d5:	a1 5c d1 02 c0       	mov    eax,ds:0xc002d15c
c000f6da:	eb 73                	jmp    c000f74f <sbrk+0xc7>
c000f6dc:	83 ec 08             	sub    esp,0x8
c000f6df:	50                   	push   eax
c000f6e0:	68 40 a5 02 c0       	push   0xc002a540
c000f6e5:	e8 97 31 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000f6ea:	83 c4 10             	add    esp,0x10
c000f6ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f6f2:	eb 5b                	jmp    c000f74f <sbrk+0xc7>
c000f6f4:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f6fa:	eb c9                	jmp    c000f6c5 <sbrk+0x3d>
c000f6fc:	81 05 5c d1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d15c,0x1000
c000f706:	46                   	inc    esi
c000f707:	39 f7                	cmp    edi,esi
c000f709:	74 33                	je     c000f73e <sbrk+0xb6>
c000f70b:	8b 1d f0 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4f0
c000f711:	8b 2d 5c d1 02 c0    	mov    ebp,DWORD PTR ds:0xc002d15c
c000f717:	e8 09 05 00 00       	call   c000fc25 <Phys::allocatePage()>
c000f71c:	68 01 04 00 00       	push   0x401
c000f721:	55                   	push   ebp
c000f722:	50                   	push   eax
c000f723:	53                   	push   ebx
c000f724:	e8 2d 24 00 00       	call   c0011b56 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f729:	83 c4 10             	add    esp,0x10
c000f72c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f731:	74 c9                	je     c000f6fc <sbrk+0x74>
c000f733:	8b 1d 5c d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d15c
c000f739:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f73c:	eb be                	jmp    c000f6fc <sbrk+0x74>
c000f73e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f743:	75 12                	jne    c000f757 <sbrk+0xcf>
c000f745:	0f 20 d8             	mov    eax,cr3
c000f748:	0f 22 d8             	mov    cr3,eax
c000f74b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f74f:	83 c4 1c             	add    esp,0x1c
c000f752:	5b                   	pop    ebx
c000f753:	5e                   	pop    esi
c000f754:	5f                   	pop    edi
c000f755:	5d                   	pop    ebp
c000f756:	c3                   	ret    
c000f757:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f75b:	89 cb                	mov    ebx,ecx
c000f75d:	c1 eb 0a             	shr    ebx,0xa
c000f760:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f766:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f76c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f770:	c1 e0 0c             	shl    eax,0xc
c000f773:	01 c8                	add    eax,ecx
c000f775:	c1 e8 0a             	shr    eax,0xa
c000f778:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f77d:	2d 00 00 40 00       	sub    eax,0x400000
c000f782:	39 c3                	cmp    ebx,eax
c000f784:	77 c5                	ja     c000f74b <sbrk+0xc3>
c000f786:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f789:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f78f:	39 d8                	cmp    eax,ebx
c000f791:	73 f3                	jae    c000f786 <sbrk+0xfe>
c000f793:	eb b6                	jmp    c000f74b <sbrk+0xc3>

c000f795 <mmap>:
c000f795:	83 ec 18             	sub    esp,0x18
c000f798:	68 70 a5 02 c0       	push   0xc002a570
c000f79d:	e8 4d aa 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c000f7a2:	b8 00 00 00 00       	mov    eax,0x0
c000f7a7:	83 c4 1c             	add    esp,0x1c
c000f7aa:	c3                   	ret    

c000f7ab <munmap>:
c000f7ab:	83 ec 18             	sub    esp,0x18
c000f7ae:	68 75 a5 02 c0       	push   0xc002a575
c000f7b3:	e8 37 aa 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c000f7b8:	b8 00 00 00 00       	mov    eax,0x0
c000f7bd:	83 c4 1c             	add    esp,0x1c
c000f7c0:	c3                   	ret    

c000f7c1 <liballoc_lock()>:
c000f7c1:	fa                   	cli    
c000f7c2:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	c3                   	ret    

c000f7ce <liballoc_unlock()>:
c000f7ce:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c000f7d3:	48                   	dec    eax
c000f7d4:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c000f7d9:	75 01                	jne    c000f7dc <liballoc_unlock()+0xe>
c000f7db:	fb                   	sti    
c000f7dc:	b8 00 00 00 00       	mov    eax,0x0
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_alloc(int)>:
c000f7e2:	83 ec 10             	sub    esp,0x10
c000f7e5:	6a 01                	push   0x1
c000f7e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7eb:	ff 35 f0 e4 02 c0    	push   DWORD PTR ds:0xc002e4f0
c000f7f1:	e8 62 24 00 00       	call   c0011c58 <VAS::allocatePages(int, int)>
c000f7f6:	83 c4 1c             	add    esp,0x1c
c000f7f9:	c3                   	ret    

c000f7fa <liballoc_free(void*, int)>:
c000f7fa:	83 ec 14             	sub    esp,0x14
c000f7fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f801:	ff 35 f0 e4 02 c0    	push   DWORD PTR ds:0xc002e4f0
c000f807:	e8 f6 20 00 00       	call   c0011902 <VAS::freeAllocatedPages(unsigned long)>
c000f80c:	b8 00 00 00 00       	mov    eax,0x0
c000f811:	83 c4 1c             	add    esp,0x1c
c000f814:	c3                   	ret    

c000f815 <realloc>:
c000f815:	83 ec 14             	sub    esp,0x14
c000f818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f820:	e8 07 1e ff ff       	call   c000162c <dlrealloc>
c000f825:	83 c4 1c             	add    esp,0x1c
c000f828:	c3                   	ret    

c000f829 <malloc>:
c000f829:	83 ec 18             	sub    esp,0x18
c000f82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f830:	e8 ba 18 ff ff       	call   c00010ef <dlmalloc>
c000f835:	83 c4 1c             	add    esp,0x1c
c000f838:	c3                   	ret    

c000f839 <free>:
c000f839:	83 ec 18             	sub    esp,0x18
c000f83c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f840:	e8 4f 15 ff ff       	call   c0000d94 <dlfree>
c000f845:	83 c4 1c             	add    esp,0x1c
c000f848:	c3                   	ret    

c000f849 <rfree>:
c000f849:	83 ec 18             	sub    esp,0x18
c000f84c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f850:	e8 3f 15 ff ff       	call   c0000d94 <dlfree>
c000f855:	83 c4 1c             	add    esp,0x1c
c000f858:	c3                   	ret    

c000f859 <calloc>:
c000f859:	56                   	push   esi
c000f85a:	53                   	push   ebx
c000f85b:	83 ec 10             	sub    esp,0x10
c000f85e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f862:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f867:	53                   	push   ebx
c000f868:	e8 bc ff ff ff       	call   c000f829 <malloc>
c000f86d:	89 c6                	mov    esi,eax
c000f86f:	83 c4 0c             	add    esp,0xc
c000f872:	53                   	push   ebx
c000f873:	6a 00                	push   0x0
c000f875:	50                   	push   eax
c000f876:	e8 d5 0e ff ff       	call   c0000750 <memset>
c000f87b:	89 f0                	mov    eax,esi
c000f87d:	83 c4 14             	add    esp,0x14
c000f880:	5b                   	pop    ebx
c000f881:	5e                   	pop    esi
c000f882:	c3                   	ret    

c000f883 <Krnl::setBootMessage(char const*)>:
c000f883:	57                   	push   edi
c000f884:	56                   	push   esi
c000f885:	53                   	push   ebx
c000f886:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f88c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f893:	68 9e 00 00 00       	push   0x9e
c000f898:	6a 00                	push   0x0
c000f89a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f89e:	56                   	push   esi
c000f89f:	e8 ac 0e ff ff       	call   c0000750 <memset>
c000f8a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8a7:	e8 c0 0e ff ff       	call   c000076c <strlen>
c000f8ac:	ba 50 00 00 00       	mov    edx,0x50
c000f8b1:	83 c4 10             	add    esp,0x10
c000f8b4:	29 c2                	sub    edx,eax
c000f8b6:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f8ba:	d1 ea                	shr    edx,1
c000f8bc:	84 c0                	test   al,al
c000f8be:	74 19                	je     c000f8d9 <Krnl::setBootMessage(char const*)+0x56>
c000f8c0:	01 d2                	add    edx,edx
c000f8c2:	43                   	inc    ebx
c000f8c3:	01 f2                	add    edx,esi
c000f8c5:	80 cc 0f             	or     ah,0xf
c000f8c8:	83 c2 02             	add    edx,0x2
c000f8cb:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f8cf:	43                   	inc    ebx
c000f8d0:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f8d5:	84 c0                	test   al,al
c000f8d7:	75 ec                	jne    c000f8c5 <Krnl::setBootMessage(char const*)+0x42>
c000f8d9:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f8de:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f8e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8e5:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f8eb:	5b                   	pop    ebx
c000f8ec:	5e                   	pop    esi
c000f8ed:	5f                   	pop    edi
c000f8ee:	c3                   	ret    

c000f8ef <kernel_main>:
c000f8ef:	57                   	push   edi
c000f8f0:	bf f9 03 00 00       	mov    edi,0x3f9
c000f8f5:	56                   	push   esi
c000f8f6:	89 fa                	mov    edx,edi
c000f8f8:	53                   	push   ebx
c000f8f9:	31 f6                	xor    esi,esi
c000f8fb:	83 ec 2c             	sub    esp,0x2c
c000f8fe:	89 f0                	mov    eax,esi
c000f900:	ee                   	out    dx,al
c000f901:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f906:	b0 80                	mov    al,0x80
c000f908:	89 da                	mov    edx,ebx
c000f90a:	ee                   	out    dx,al
c000f90b:	b1 03                	mov    cl,0x3
c000f90d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f912:	88 c8                	mov    al,cl
c000f914:	ee                   	out    dx,al
c000f915:	89 f0                	mov    eax,esi
c000f917:	89 fa                	mov    edx,edi
c000f919:	ee                   	out    dx,al
c000f91a:	88 c8                	mov    al,cl
c000f91c:	89 da                	mov    edx,ebx
c000f91e:	ee                   	out    dx,al
c000f91f:	b0 c7                	mov    al,0xc7
c000f921:	ba fa 03 00 00       	mov    edx,0x3fa
c000f926:	ee                   	out    dx,al
c000f927:	b0 0b                	mov    al,0xb
c000f929:	ba fc 03 00 00       	mov    edx,0x3fc
c000f92e:	ee                   	out    dx,al
c000f92f:	68 7c a5 02 c0       	push   0xc002a57c
c000f934:	e8 48 2f 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000f939:	e8 b8 09 00 00       	call   c00102f6 <installVgaTextImplementation()>
c000f93e:	0f b6 05 60 d1 02 c0 	movzx  eax,BYTE PTR ds:0xc002d160
c000f945:	83 c4 10             	add    esp,0x10
c000f948:	84 c0                	test   al,al
c000f94a:	74 6c                	je     c000f9b8 <kernel_main+0xc9>
c000f94c:	31 db                	xor    ebx,ebx
c000f94e:	bf 0a 00 00 00       	mov    edi,0xa
c000f953:	be 05 00 00 00       	mov    esi,0x5
c000f958:	31 c9                	xor    ecx,ecx
c000f95a:	eb 2a                	jmp    c000f986 <kernel_main+0x97>
c000f95c:	3c 0d                	cmp    al,0xd
c000f95e:	74 1a                	je     c000f97a <kernel_main+0x8b>
c000f960:	3c 0a                	cmp    al,0xa
c000f962:	74 40                	je     c000f9a4 <kernel_main+0xb5>
c000f964:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f967:	80 cc 0e             	or     ah,0xe
c000f96a:	c1 e2 04             	shl    edx,0x4
c000f96d:	01 ca                	add    edx,ecx
c000f96f:	41                   	inc    ecx
c000f970:	01 fa                	add    edx,edi
c000f972:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f97a:	43                   	inc    ebx
c000f97b:	0f b6 83 60 d1 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2ea0]
c000f982:	84 c0                	test   al,al
c000f984:	74 32                	je     c000f9b8 <kernel_main+0xc9>
c000f986:	80 b9 96 d1 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd2e6a],0xdb
c000f98d:	75 cd                	jne    c000f95c <kernel_main+0x6d>
c000f98f:	0f b6 91 95 d1 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd2e6b]
c000f996:	83 e2 fe             	and    edx,0xfffffffe
c000f999:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f99f:	75 bb                	jne    c000f95c <kernel_main+0x6d>
c000f9a1:	47                   	inc    edi
c000f9a2:	eb b8                	jmp    c000f95c <kernel_main+0x6d>
c000f9a4:	43                   	inc    ebx
c000f9a5:	46                   	inc    esi
c000f9a6:	31 c9                	xor    ecx,ecx
c000f9a8:	0f b6 83 60 d1 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2ea0]
c000f9af:	bf 0a 00 00 00       	mov    edi,0xa
c000f9b4:	84 c0                	test   al,al
c000f9b6:	75 ce                	jne    c000f986 <kernel_main+0x97>
c000f9b8:	83 ec 0c             	sub    esp,0xc
c000f9bb:	68 94 a5 02 c0       	push   0xc002a594
c000f9c0:	e8 be fe ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c000f9c5:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f9ca:	a3 a0 e3 02 c0       	mov    ds:0xc002e3a0,eax
c000f9cf:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f9d4:	05 ff 0f 00 00       	add    eax,0xfff
c000f9d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f9de:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9e1:	e8 cb 03 00 00       	call   c000fdb1 <Phys::physicalMemorySetup(unsigned int)>
c000f9e6:	e8 83 1c 00 00       	call   c001166e <Virt::virtualMemorySetup()>
c000f9eb:	58                   	pop    eax
c000f9ec:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f9f0:	53                   	push   ebx
c000f9f1:	e8 34 1d 00 00       	call   c001172a <VAS::VAS()>
c000f9f6:	89 1d f0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4f0,ebx
c000f9fc:	e8 1f 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000fa01:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fa08:	e8 1c fe ff ff       	call   c000f829 <malloc>
c000fa0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa10:	89 c6                	mov    esi,eax
c000fa12:	e8 01 f0 ff ff       	call   c000ea18 <Computer::Computer()>
c000fa17:	6a 00                	push   0x0
c000fa19:	89 35 88 e3 02 c0    	mov    DWORD PTR ds:0xc002e388,esi
c000fa1f:	6a 00                	push   0x0
c000fa21:	6a 00                	push   0x0
c000fa23:	56                   	push   esi
c000fa24:	e8 fb f3 ff ff       	call   c000ee24 <Computer::open(int, int, void*)>
c000fa29:	83 c4 14             	add    esp,0x14
c000fa2c:	53                   	push   ebx
c000fa2d:	e8 a8 1f 00 00       	call   c00119da <VAS::~VAS()>
c000fa32:	83 c4 30             	add    esp,0x30
c000fa35:	5b                   	pop    ebx
c000fa36:	5e                   	pop    esi
c000fa37:	5f                   	pop    edi
c000fa38:	c3                   	ret    

c000fa39 <Phys::allocateDMA(unsigned long)>:
c000fa39:	55                   	push   ebp
c000fa3a:	31 ed                	xor    ebp,ebp
c000fa3c:	57                   	push   edi
c000fa3d:	56                   	push   esi
c000fa3e:	53                   	push   ebx
c000fa3f:	31 db                	xor    ebx,ebx
c000fa41:	83 ec 18             	sub    esp,0x18
c000fa44:	68 b3 a5 02 c0       	push   0xc002a5b3
c000fa49:	e8 33 2e 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000fa4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa52:	31 d2                	xor    edx,edx
c000fa54:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fa5a:	83 c4 10             	add    esp,0x10
c000fa5d:	c1 ee 0c             	shr    esi,0xc
c000fa60:	31 c9                	xor    ecx,ecx
c000fa62:	eb 17                	jmp    c000fa7b <Phys::allocateDMA(unsigned long)+0x42>
c000fa64:	85 c9                	test   ecx,ecx
c000fa66:	75 04                	jne    c000fa6c <Phys::allocateDMA(unsigned long)+0x33>
c000fa68:	89 d5                	mov    ebp,edx
c000fa6a:	89 d3                	mov    ebx,edx
c000fa6c:	8d 41 01             	lea    eax,[ecx+0x1]
c000fa6f:	39 c6                	cmp    esi,eax
c000fa71:	74 23                	je     c000fa96 <Phys::allocateDMA(unsigned long)+0x5d>
c000fa73:	42                   	inc    edx
c000fa74:	89 c1                	mov    ecx,eax
c000fa76:	83 fa 2f             	cmp    edx,0x2f
c000fa79:	7f 11                	jg     c000fa8c <Phys::allocateDMA(unsigned long)+0x53>
c000fa7b:	80 ba e0 e3 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1c20],0x0
c000fa82:	74 e0                	je     c000fa64 <Phys::allocateDMA(unsigned long)+0x2b>
c000fa84:	31 c9                	xor    ecx,ecx
c000fa86:	42                   	inc    edx
c000fa87:	83 fa 2f             	cmp    edx,0x2f
c000fa8a:	7e ef                	jle    c000fa7b <Phys::allocateDMA(unsigned long)+0x42>
c000fa8c:	83 c4 0c             	add    esp,0xc
c000fa8f:	31 c0                	xor    eax,eax
c000fa91:	5b                   	pop    ebx
c000fa92:	5e                   	pop    esi
c000fa93:	5f                   	pop    edi
c000fa94:	5d                   	pop    ebp
c000fa95:	c3                   	ret    
c000fa96:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fa99:	89 d7                	mov    edi,edx
c000fa9b:	4f                   	dec    edi
c000fa9c:	79 03                	jns    c000faa1 <Phys::allocateDMA(unsigned long)+0x68>
c000fa9e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000faa1:	c1 ff 04             	sar    edi,0x4
c000faa4:	89 da                	mov    edx,ebx
c000faa6:	c1 fa 04             	sar    edx,0x4
c000faa9:	39 fa                	cmp    edx,edi
c000faab:	75 43                	jne    c000faf0 <Phys::allocateDMA(unsigned long)+0xb7>
c000faad:	85 c0                	test   eax,eax
c000faaf:	74 1a                	je     c000facb <Phys::allocateDMA(unsigned long)+0x92>
c000fab1:	be e0 e3 02 c0       	mov    esi,0xc002e3e0
c000fab6:	8d 93 e0 e3 02 c0    	lea    edx,[ebx-0x3ffd1c20]
c000fabc:	f7 d6                	not    esi
c000fabe:	29 de                	sub    esi,ebx
c000fac0:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fac3:	42                   	inc    edx
c000fac4:	8d 04 16             	lea    eax,[esi+edx*1]
c000fac7:	39 c1                	cmp    ecx,eax
c000fac9:	7f f5                	jg     c000fac0 <Phys::allocateDMA(unsigned long)+0x87>
c000facb:	83 ec 0c             	sub    esp,0xc
c000face:	68 cc a5 02 c0       	push   0xc002a5cc
c000fad3:	e8 a9 2d 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000fad8:	83 c4 10             	add    esp,0x10
c000fadb:	85 ff                	test   edi,edi
c000fadd:	74 17                	je     c000faf6 <Phys::allocateDMA(unsigned long)+0xbd>
c000fadf:	83 c4 0c             	add    esp,0xc
c000fae2:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000fae8:	5b                   	pop    ebx
c000fae9:	c1 e0 0c             	shl    eax,0xc
c000faec:	5e                   	pop    esi
c000faed:	5f                   	pop    edi
c000faee:	5d                   	pop    ebp
c000faef:	c3                   	ret    
c000faf0:	89 ea                	mov    edx,ebp
c000faf2:	31 c9                	xor    ecx,ecx
c000faf4:	eb 90                	jmp    c000fa86 <Phys::allocateDMA(unsigned long)+0x4d>
c000faf6:	83 c4 0c             	add    esp,0xc
c000faf9:	c1 e3 0c             	shl    ebx,0xc
c000fafc:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000fb02:	5b                   	pop    ebx
c000fb03:	5e                   	pop    esi
c000fb04:	5f                   	pop    edi
c000fb05:	5d                   	pop    ebp
c000fb06:	c3                   	ret    

c000fb07 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fb07:	83 ec 18             	sub    esp,0x18
c000fb0a:	68 e3 a5 02 c0       	push   0xc002a5e3
c000fb0f:	e8 6d 2d 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000fb14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb18:	83 c4 10             	add    esp,0x10
c000fb1b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000fb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb25:	c1 e9 0c             	shr    ecx,0xc
c000fb28:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000fb30:	76 29                	jbe    c000fb5b <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000fb32:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000fb38:	c1 ea 0c             	shr    edx,0xc
c000fb3b:	83 c2 10             	add    edx,0x10
c000fb3e:	85 c9                	test   ecx,ecx
c000fb40:	74 15                	je     c000fb57 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000fb42:	8d 82 e0 e3 02 c0    	lea    eax,[edx-0x3ffd1c20]
c000fb48:	8d 94 11 e0 e3 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1c20]
c000fb4f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fb52:	40                   	inc    eax
c000fb53:	39 d0                	cmp    eax,edx
c000fb55:	75 f8                	jne    c000fb4f <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000fb57:	83 c4 0c             	add    esp,0xc
c000fb5a:	c3                   	ret    
c000fb5b:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fb61:	c1 ea 0c             	shr    edx,0xc
c000fb64:	eb d8                	jmp    c000fb3e <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000fb66 <Phys::setPageState(unsigned long, bool)>:
c000fb66:	56                   	push   esi
c000fb67:	ba 01 00 00 00       	mov    edx,0x1
c000fb6c:	53                   	push   ebx
c000fb6d:	8b 35 a4 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2a4
c000fb73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb77:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb7b:	89 c8                	mov    eax,ecx
c000fb7d:	83 e1 07             	and    ecx,0x7
c000fb80:	c1 e8 03             	shr    eax,0x3
c000fb83:	d3 e3                	shl    ebx,cl
c000fb85:	01 c6                	add    esi,eax
c000fb87:	d3 e2                	shl    edx,cl
c000fb89:	f7 d2                	not    edx
c000fb8b:	20 16                	and    BYTE PTR [esi],dl
c000fb8d:	03 05 a4 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d2a4
c000fb93:	08 18                	or     BYTE PTR [eax],bl
c000fb95:	5b                   	pop    ebx
c000fb96:	5e                   	pop    esi
c000fb97:	c3                   	ret    

c000fb98 <Phys::getPageState(unsigned long)>:
c000fb98:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fb9c:	8b 15 a4 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2a4
c000fba2:	89 c8                	mov    eax,ecx
c000fba4:	83 e1 07             	and    ecx,0x7
c000fba7:	c1 e8 03             	shr    eax,0x3
c000fbaa:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fbae:	d3 f8                	sar    eax,cl
c000fbb0:	83 e0 01             	and    eax,0x1
c000fbb3:	c3                   	ret    

c000fbb4 <Phys::freePage(unsigned long)>:
c000fbb4:	53                   	push   ebx
c000fbb5:	83 ec 10             	sub    esp,0x10
c000fbb8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fbbc:	53                   	push   ebx
c000fbbd:	68 f9 a5 02 c0       	push   0xc002a5f9
c000fbc2:	e8 ba 2c 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000fbc7:	83 c4 10             	add    esp,0x10
c000fbca:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fbd0:	76 3d                	jbe    c000fc0f <Phys::freePage(unsigned long)+0x5b>
c000fbd2:	83 ec 0c             	sub    esp,0xc
c000fbd5:	c1 eb 0c             	shr    ebx,0xc
c000fbd8:	53                   	push   ebx
c000fbd9:	e8 ba ff ff ff       	call   c000fb98 <Phys::getPageState(unsigned long)>
c000fbde:	83 c4 10             	add    esp,0x10
c000fbe1:	84 c0                	test   al,al
c000fbe3:	74 19                	je     c000fbfe <Phys::freePage(unsigned long)+0x4a>
c000fbe5:	83 ec 08             	sub    esp,0x8
c000fbe8:	ff 0d d0 e3 02 c0    	dec    DWORD PTR ds:0xc002e3d0
c000fbee:	6a 00                	push   0x0
c000fbf0:	53                   	push   ebx
c000fbf1:	e8 70 ff ff ff       	call   c000fb66 <Phys::setPageState(unsigned long, bool)>
c000fbf6:	83 c4 10             	add    esp,0x10
c000fbf9:	83 c4 08             	add    esp,0x8
c000fbfc:	5b                   	pop    ebx
c000fbfd:	c3                   	ret    
c000fbfe:	c7 44 24 10 0c a6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a60c
c000fc06:	83 c4 08             	add    esp,0x8
c000fc09:	5b                   	pop    ebx
c000fc0a:	e9 e0 a5 00 00       	jmp    c001a1ef <Krnl::panic(char const*)>
c000fc0f:	83 ec 08             	sub    esp,0x8
c000fc12:	68 00 10 00 00       	push   0x1000
c000fc17:	53                   	push   ebx
c000fc18:	e8 ea fe ff ff       	call   c000fb07 <Phys::freeDMA(unsigned long, unsigned long)>
c000fc1d:	83 c4 10             	add    esp,0x10
c000fc20:	83 c4 08             	add    esp,0x8
c000fc23:	5b                   	pop    ebx
c000fc24:	c3                   	ret    

c000fc25 <Phys::allocatePage()>:
c000fc25:	56                   	push   esi
c000fc26:	53                   	push   ebx
c000fc27:	83 ec 14             	sub    esp,0x14
c000fc2a:	8b 35 c4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3c4
c000fc30:	89 f3                	mov    ebx,esi
c000fc32:	eb 0a                	jmp    c000fc3e <Phys::allocatePage()+0x19>
c000fc34:	89 1d c4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c4,ebx
c000fc3a:	39 de                	cmp    esi,ebx
c000fc3c:	74 24                	je     c000fc62 <Phys::allocatePage()+0x3d>
c000fc3e:	53                   	push   ebx
c000fc3f:	e8 54 ff ff ff       	call   c000fb98 <Phys::getPageState(unsigned long)>
c000fc44:	5a                   	pop    edx
c000fc45:	84 c0                	test   al,al
c000fc47:	74 76                	je     c000fcbf <Phys::allocatePage()+0x9a>
c000fc49:	43                   	inc    ebx
c000fc4a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc50:	75 e2                	jne    c000fc34 <Phys::allocatePage()+0xf>
c000fc52:	31 db                	xor    ebx,ebx
c000fc54:	c7 05 c4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3c4,0x0
c000fc5e:	39 de                	cmp    esi,ebx
c000fc60:	75 dc                	jne    c000fc3e <Phys::allocatePage()+0x19>
c000fc62:	83 ec 0c             	sub    esp,0xc
c000fc65:	68 40 a6 02 c0       	push   0xc002a640
c000fc6a:	e8 12 2c 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000fc6f:	58                   	pop    eax
c000fc70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fc75:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fc78:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fc7e:	e8 8d 28 00 00       	call   c0012510 <VAS::scanForEviction()>
c000fc83:	83 c4 10             	add    esp,0x10
c000fc86:	85 c0                	test   eax,eax
c000fc88:	75 76                	jne    c000fd00 <Phys::allocatePage()+0xdb>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 00 10 00 00       	push   0x1000
c000fc92:	e8 a2 fd ff ff       	call   c000fa39 <Phys::allocateDMA(unsigned long)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	85 c0                	test   eax,eax
c000fc9c:	75 5c                	jne    c000fcfa <Phys::allocatePage()+0xd5>
c000fc9e:	83 ec 0c             	sub    esp,0xc
c000fca1:	68 58 a6 02 c0       	push   0xc002a658
c000fca6:	e8 44 a5 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c000fcab:	83 c4 10             	add    esp,0x10
c000fcae:	8b 1d c4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c4
c000fcb4:	53                   	push   ebx
c000fcb5:	e8 de fe ff ff       	call   c000fb98 <Phys::getPageState(unsigned long)>
c000fcba:	5a                   	pop    edx
c000fcbb:	84 c0                	test   al,al
c000fcbd:	75 8a                	jne    c000fc49 <Phys::allocatePage()+0x24>
c000fcbf:	6a 01                	push   0x1
c000fcc1:	53                   	push   ebx
c000fcc2:	e8 9f fe ff ff       	call   c000fb66 <Phys::setPageState(unsigned long, bool)>
c000fcc7:	5a                   	pop    edx
c000fcc8:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000fccd:	59                   	pop    ecx
c000fcce:	40                   	inc    eax
c000fccf:	8b 15 c4 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3c4
c000fcd5:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c000fcda:	c1 e2 0c             	shl    edx,0xc
c000fcdd:	52                   	push   edx
c000fcde:	ff 35 d4 e3 02 c0    	push   DWORD PTR ds:0xc002e3d4
c000fce4:	50                   	push   eax
c000fce5:	68 22 a6 02 c0       	push   0xc002a622
c000fcea:	e8 92 2b 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000fcef:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c000fcf4:	83 c4 10             	add    esp,0x10
c000fcf7:	c1 e0 0c             	shl    eax,0xc
c000fcfa:	83 c4 14             	add    esp,0x14
c000fcfd:	5b                   	pop    ebx
c000fcfe:	5e                   	pop    esi
c000fcff:	c3                   	ret    
c000fd00:	83 ec 08             	sub    esp,0x8
c000fd03:	89 c2                	mov    edx,eax
c000fd05:	6a 01                	push   0x1
c000fd07:	c1 ea 0c             	shr    edx,0xc
c000fd0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd0e:	52                   	push   edx
c000fd0f:	e8 52 fe ff ff       	call   c000fb66 <Phys::setPageState(unsigned long, bool)>
c000fd14:	83 c4 10             	add    esp,0x10
c000fd17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd1b:	eb dd                	jmp    c000fcfa <Phys::allocatePage()+0xd5>

c000fd1d <Phys::allocateContiguousPages(int)>:
c000fd1d:	57                   	push   edi
c000fd1e:	56                   	push   esi
c000fd1f:	53                   	push   ebx
c000fd20:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd24:	fa                   	cli    
c000fd25:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c000fd2b:	31 db                	xor    ebx,ebx
c000fd2d:	85 db                	test   ebx,ebx
c000fd2f:	75 11                	jne    c000fd42 <Phys::allocateContiguousPages(int)+0x25>
c000fd31:	e8 ef fe ff ff       	call   c000fc25 <Phys::allocatePage()>
c000fd36:	83 fe 01             	cmp    esi,0x1
c000fd39:	89 c7                	mov    edi,eax
c000fd3b:	74 21                	je     c000fd5e <Phys::allocateContiguousPages(int)+0x41>
c000fd3d:	bb 01 00 00 00       	mov    ebx,0x1
c000fd42:	e8 de fe ff ff       	call   c000fc25 <Phys::allocatePage()>
c000fd47:	89 da                	mov    edx,ebx
c000fd49:	c1 e2 0c             	shl    edx,0xc
c000fd4c:	01 fa                	add    edx,edi
c000fd4e:	39 c2                	cmp    edx,eax
c000fd50:	74 20                	je     c000fd72 <Phys::allocateContiguousPages(int)+0x55>
c000fd52:	bb 01 00 00 00       	mov    ebx,0x1
c000fd57:	89 c7                	mov    edi,eax
c000fd59:	83 fe 01             	cmp    esi,0x1
c000fd5c:	75 e4                	jne    c000fd42 <Phys::allocateContiguousPages(int)+0x25>
c000fd5e:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c000fd63:	48                   	dec    eax
c000fd64:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c000fd69:	75 01                	jne    c000fd6c <Phys::allocateContiguousPages(int)+0x4f>
c000fd6b:	fb                   	sti    
c000fd6c:	89 f8                	mov    eax,edi
c000fd6e:	5b                   	pop    ebx
c000fd6f:	5e                   	pop    esi
c000fd70:	5f                   	pop    edi
c000fd71:	c3                   	ret    
c000fd72:	43                   	inc    ebx
c000fd73:	39 f3                	cmp    ebx,esi
c000fd75:	75 b6                	jne    c000fd2d <Phys::allocateContiguousPages(int)+0x10>
c000fd77:	eb e5                	jmp    c000fd5e <Phys::allocateContiguousPages(int)+0x41>

c000fd79 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fd79:	56                   	push   esi
c000fd7a:	53                   	push   ebx
c000fd7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd7f:	39 1d c8 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3c8,ebx
c000fd85:	73 06                	jae    c000fd8d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fd87:	89 1d c8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c8,ebx
c000fd8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd91:	c1 eb 0c             	shr    ebx,0xc
c000fd94:	c1 e8 0c             	shr    eax,0xc
c000fd97:	39 d8                	cmp    eax,ebx
c000fd99:	73 13                	jae    c000fdae <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fd9b:	6a 00                	push   0x0
c000fd9d:	8d 70 01             	lea    esi,[eax+0x1]
c000fda0:	50                   	push   eax
c000fda1:	e8 c0 fd ff ff       	call   c000fb66 <Phys::setPageState(unsigned long, bool)>
c000fda6:	5a                   	pop    edx
c000fda7:	89 f0                	mov    eax,esi
c000fda9:	59                   	pop    ecx
c000fdaa:	39 f3                	cmp    ebx,esi
c000fdac:	75 ed                	jne    c000fd9b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fdae:	5b                   	pop    ebx
c000fdaf:	5e                   	pop    esi
c000fdb0:	c3                   	ret    

c000fdb1 <Phys::physicalMemorySetup(unsigned int)>:
c000fdb1:	55                   	push   ebp
c000fdb2:	57                   	push   edi
c000fdb3:	56                   	push   esi
c000fdb4:	53                   	push   ebx
c000fdb5:	83 ec 40             	sub    esp,0x40
c000fdb8:	6a 30                	push   0x30
c000fdba:	6a 00                	push   0x0
c000fdbc:	68 e0 e3 02 c0       	push   0xc002e3e0
c000fdc1:	e8 8a 09 ff ff       	call   c0000750 <memset>
c000fdc6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fdca:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fdcf:	05 00 10 00 00       	add    eax,0x1000
c000fdd4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fdd8:	5b                   	pop    ebx
c000fdd9:	31 db                	xor    ebx,ebx
c000fddb:	5e                   	pop    esi
c000fddc:	50                   	push   eax
c000fddd:	68 66 a6 02 c0       	push   0xc002a666
c000fde2:	e8 9a 2a 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000fde7:	83 c4 10             	add    esp,0x10
c000fdea:	83 ec 08             	sub    esp,0x8
c000fded:	6a 01                	push   0x1
c000fdef:	53                   	push   ebx
c000fdf0:	43                   	inc    ebx
c000fdf1:	e8 70 fd ff ff       	call   c000fb66 <Phys::setPageState(unsigned long, bool)>
c000fdf6:	83 c4 10             	add    esp,0x10
c000fdf9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fdff:	75 e9                	jne    c000fdea <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fe01:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe08:	66 85 c0             	test   ax,ax
c000fe0b:	0f 84 8e 01 00 00    	je     c000ff9f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fe11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe15:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe21:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe2a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe32:	eb 15                	jmp    c000fe49 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fe34:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe38:	83 c3 18             	add    ebx,0x18
c000fe3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe3f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe43:	0f 84 66 01 00 00    	je     c000ffaf <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fe49:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fe4c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe4f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fe52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe5a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fe5c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fe5f:	01 f0                	add    eax,esi
c000fe61:	55                   	push   ebp
c000fe62:	11 fa                	adc    edx,edi
c000fe64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe68:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fe6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fe70:	56                   	push   esi
c000fe71:	68 a8 a6 02 c0       	push   0xc002a6a8
c000fe76:	e8 06 2a 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000fe7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe7f:	83 c4 10             	add    esp,0x10
c000fe82:	09 f8                	or     eax,edi
c000fe84:	0f 85 25 01 00 00    	jne    c000ffaf <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fe8a:	4d                   	dec    ebp
c000fe8b:	75 a7                	jne    c000fe34 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fe8d:	ba 00 00 08 00       	mov    edx,0x80000
c000fe92:	89 c1                	mov    ecx,eax
c000fe94:	39 f2                	cmp    edx,esi
c000fe96:	19 f9                	sbb    ecx,edi
c000fe98:	0f 82 a7 00 00 00    	jb     c000ff45 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fe9e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fea2:	89 c1                	mov    ecx,eax
c000fea4:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fea8:	0f 83 97 00 00 00    	jae    c000ff45 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000feae:	ba 00 00 0a 00       	mov    edx,0xa0000
c000feb3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000feb7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000febb:	39 fa                	cmp    edx,edi
c000febd:	19 e8                	sbb    eax,ebp
c000febf:	0f 82 14 01 00 00    	jb     c000ffd9 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fec5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fec9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fecd:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fed3:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fed8:	83 d5 ff             	adc    ebp,0xffffffff
c000fedb:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fedf:	31 c0                	xor    eax,eax
c000fee1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fee5:	39 fa                	cmp    edx,edi
c000fee7:	89 c1                	mov    ecx,eax
c000fee9:	19 e9                	sbb    ecx,ebp
c000feeb:	0f 83 43 ff ff ff    	jae    c000fe34 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fef1:	be 00 00 08 00       	mov    esi,0x80000
c000fef6:	50                   	push   eax
c000fef7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fefb:	57                   	push   edi
c000fefc:	56                   	push   esi
c000fefd:	68 cc a6 02 c0       	push   0xc002a6cc
c000ff02:	e8 7a 29 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000ff07:	5a                   	pop    edx
c000ff08:	59                   	pop    ecx
c000ff09:	57                   	push   edi
c000ff0a:	56                   	push   esi
c000ff0b:	e8 69 fe ff ff       	call   c000fd79 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff10:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff18:	83 c4 0c             	add    esp,0xc
c000ff1b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff1f:	03 05 d4 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3d4
c000ff25:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff2c:	a3 d4 e3 02 c0       	mov    ds:0xc002e3d4,eax
c000ff31:	52                   	push   edx
c000ff32:	50                   	push   eax
c000ff33:	68 8c a6 02 c0       	push   0xc002a68c
c000ff38:	e8 44 29 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c000ff3d:	83 c4 10             	add    esp,0x10
c000ff40:	e9 ef fe ff ff       	jmp    c000fe34 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff45:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff49:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff51:	39 ea                	cmp    edx,ebp
c000ff53:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ff57:	0f 82 d7 fe ff ff    	jb     c000fe34 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff5d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff62:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ff66:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ff6a:	0f 83 c4 fe ff ff    	jae    c000fe34 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff70:	39 ee                	cmp    esi,ebp
c000ff72:	89 f8                	mov    eax,edi
c000ff74:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ff78:	0f 83 78 ff ff ff    	jae    c000fef6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000ff7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff86:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ff8a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ff8e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ff92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff9a:	e9 57 ff ff ff       	jmp    c000fef6 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000ff9f:	83 ec 0c             	sub    esp,0xc
c000ffa2:	68 7e a6 02 c0       	push   0xc002a67e
c000ffa7:	e8 43 a2 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c000ffac:	83 c4 10             	add    esp,0x10
c000ffaf:	bb 40 01 00 00       	mov    ebx,0x140
c000ffb4:	83 ec 08             	sub    esp,0x8
c000ffb7:	6a 00                	push   0x0
c000ffb9:	53                   	push   ebx
c000ffba:	43                   	inc    ebx
c000ffbb:	e8 a6 fb ff ff       	call   c000fb66 <Phys::setPageState(unsigned long, bool)>
c000ffc0:	ff 05 d4 e3 02 c0    	inc    DWORD PTR ds:0xc002e3d4
c000ffc6:	83 c4 10             	add    esp,0x10
c000ffc9:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000ffcf:	75 e3                	jne    c000ffb4 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000ffd1:	83 c4 3c             	add    esp,0x3c
c000ffd4:	5b                   	pop    ebx
c000ffd5:	5e                   	pop    esi
c000ffd6:	5f                   	pop    edi
c000ffd7:	5d                   	pop    ebp
c000ffd8:	c3                   	ret    
c000ffd9:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000ffe1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ffe9:	e9 d7 fe ff ff       	jmp    c000fec5 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000ffee <Pipe::isAtty()>:
c000ffee:	31 c0                	xor    eax,eax
c000fff0:	c3                   	ret    
c000fff1:	90                   	nop

c000fff2 <Pipe::~Pipe()>:
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	ba 38 a7 02 c0       	mov    edx,0xc002a738
c000fffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffe:	89 10                	mov    DWORD PTR [eax],edx
c0010000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010004:	83 ec 0c             	sub    esp,0xc
c0010007:	50                   	push   eax
c0010008:	e8 41 12 00 00       	call   c001124e <UnixFile::~UnixFile()>
c001000d:	83 c4 10             	add    esp,0x10
c0010010:	90                   	nop
c0010011:	83 c4 0c             	add    esp,0xc
c0010014:	c3                   	ret    
c0010015:	90                   	nop

c0010016 <Pipe::~Pipe()>:
c0010016:	83 ec 0c             	sub    esp,0xc
c0010019:	83 ec 0c             	sub    esp,0xc
c001001c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010020:	e8 cd ff ff ff       	call   c000fff2 <Pipe::~Pipe()>
c0010025:	83 c4 10             	add    esp,0x10
c0010028:	83 ec 08             	sub    esp,0x8
c001002b:	6a 20                	push   0x20
c001002d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010031:	e8 73 27 00 00       	call   c00127a9 <operator delete(void*, unsigned long)>
c0010036:	83 c4 10             	add    esp,0x10
c0010039:	83 c4 0c             	add    esp,0xc
c001003c:	c3                   	ret    
c001003d:	90                   	nop

c001003e <Pipe::read(unsigned long long, void*, int*)>:
c001003e:	55                   	push   ebp
c001003f:	57                   	push   edi
c0010040:	56                   	push   esi
c0010041:	53                   	push   ebx
c0010042:	83 ec 1c             	sub    esp,0x1c
c0010045:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010049:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001004d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010051:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010054:	89 c8                	mov    eax,ecx
c0010056:	99                   	cdq    
c0010057:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001005b:	74 24                	je     c0010081 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001005d:	39 f9                	cmp    ecx,edi
c001005f:	89 d1                	mov    ecx,edx
c0010061:	19 f1                	sbb    ecx,esi
c0010063:	73 1c                	jae    c0010081 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010065:	fa                   	cli    
c0010066:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001006c:	e8 10 dd 00 00       	call   c001dd81 <schedule()>
c0010071:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c0010076:	48                   	dec    eax
c0010077:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001007c:	75 d3                	jne    c0010051 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001007e:	fb                   	sti    
c001007f:	eb d0                	jmp    c0010051 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010081:	39 f8                	cmp    eax,edi
c0010083:	89 d1                	mov    ecx,edx
c0010085:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010088:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001008c:	19 f1                	sbb    ecx,esi
c001008e:	73 07                	jae    c0010097 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0010090:	89 04 24             	mov    DWORD PTR [esp],eax
c0010093:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010097:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c001009a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c001009d:	29 f7                	sub    edi,esi
c001009f:	89 f8                	mov    eax,edi
c00100a1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00100a5:	99                   	cdq    
c00100a6:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00100a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ad:	19 d0                	sbb    eax,edx
c00100af:	73 07                	jae    c00100b8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00100b1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00100b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100b8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00100bb:	89 ea                	mov    edx,ebp
c00100bd:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00100c1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00100c6:	74 0d                	je     c00100d5 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00100c8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00100cb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00100cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100d5:	85 d2                	test   edx,edx
c00100d7:	74 11                	je     c00100ea <Pipe::read(unsigned long long, void*, int*)+0xac>
c00100d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100dd:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00100e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00100e4:	89 d1                	mov    ecx,edx
c00100e6:	89 c7                	mov    edi,eax
c00100e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100ed:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00100f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100f3:	99                   	cdq    
c00100f4:	89 f7                	mov    edi,esi
c00100f6:	03 04 24             	add    eax,DWORD PTR [esp]
c00100f9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00100fd:	c1 ff 1f             	sar    edi,0x1f
c0010100:	57                   	push   edi
c0010101:	56                   	push   esi
c0010102:	52                   	push   edx
c0010103:	50                   	push   eax
c0010104:	e8 1b 6c 01 00       	call   c0026d24 <__umoddi3>
c0010109:	83 c4 10             	add    esp,0x10
c001010c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001010f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010114:	75 10                	jne    c0010126 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0010116:	83 ec 0c             	sub    esp,0xc
c0010119:	68 f5 a6 02 c0       	push   0xc002a6f5
c001011e:	e8 cc a0 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0010123:	83 c4 10             	add    esp,0x10
c0010126:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001012a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001012d:	89 10                	mov    DWORD PTR [eax],edx
c001012f:	83 c4 1c             	add    esp,0x1c
c0010132:	31 c0                	xor    eax,eax
c0010134:	5b                   	pop    ebx
c0010135:	5e                   	pop    esi
c0010136:	5f                   	pop    edi
c0010137:	5d                   	pop    ebp
c0010138:	c3                   	ret    
c0010139:	90                   	nop

c001013a <Pipe::write(unsigned long long, void*, int*)>:
c001013a:	55                   	push   ebp
c001013b:	57                   	push   edi
c001013c:	56                   	push   esi
c001013d:	53                   	push   ebx
c001013e:	83 ec 1c             	sub    esp,0x1c
c0010141:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010145:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010149:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001014c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010150:	89 04 24             	mov    DWORD PTR [esp],eax
c0010153:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010157:	89 d8                	mov    eax,ebx
c0010159:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001015c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010160:	89 d6                	mov    esi,edx
c0010162:	89 d7                	mov    edi,edx
c0010164:	c1 ff 1f             	sar    edi,0x1f
c0010167:	03 34 24             	add    esi,DWORD PTR [esp]
c001016a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c001016e:	c1 f8 1f             	sar    eax,0x1f
c0010171:	39 f3                	cmp    ebx,esi
c0010173:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010177:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001017b:	19 f8                	sbb    eax,edi
c001017d:	b8 01 00 00 00       	mov    eax,0x1
c0010182:	72 6e                	jb     c00101f2 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010184:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010187:	01 d0                	add    eax,edx
c0010189:	99                   	cdq    
c001018a:	f7 fb                	idiv   ebx
c001018c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010190:	29 d3                	sub    ebx,edx
c0010192:	89 d7                	mov    edi,edx
c0010194:	89 de                	mov    esi,ebx
c0010196:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010199:	c1 fb 1f             	sar    ebx,0x1f
c001019c:	39 f2                	cmp    edx,esi
c001019e:	19 d8                	sbb    eax,ebx
c00101a0:	b8 00 00 00 00       	mov    eax,0x0
c00101a5:	72 04                	jb     c00101ab <Pipe::write(unsigned long long, void*, int*)+0x71>
c00101a7:	89 d0                	mov    eax,edx
c00101a9:	29 f0                	sub    eax,esi
c00101ab:	89 d3                	mov    ebx,edx
c00101ad:	29 c3                	sub    ebx,eax
c00101af:	74 0b                	je     c00101bc <Pipe::write(unsigned long long, void*, int*)+0x82>
c00101b1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00101b4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00101b8:	89 d9                	mov    ecx,ebx
c00101ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101bc:	85 c0                	test   eax,eax
c00101be:	74 0d                	je     c00101cd <Pipe::write(unsigned long long, void*, int*)+0x93>
c00101c0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00101c4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00101c7:	89 de                	mov    esi,ebx
c00101c9:	89 c1                	mov    ecx,eax
c00101cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101cd:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00101d0:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00101d5:	75 10                	jne    c00101e7 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00101d7:	83 ec 0c             	sub    esp,0xc
c00101da:	68 11 a7 02 c0       	push   0xc002a711
c00101df:	e8 0b a0 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c00101e4:	83 c4 10             	add    esp,0x10
c00101e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00101eb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00101ee:	89 08                	mov    DWORD PTR [eax],ecx
c00101f0:	31 c0                	xor    eax,eax
c00101f2:	83 c4 1c             	add    esp,0x1c
c00101f5:	5b                   	pop    ebx
c00101f6:	5e                   	pop    esi
c00101f7:	5f                   	pop    edi
c00101f8:	5d                   	pop    ebp
c00101f9:	c3                   	ret    

c00101fa <Pipe::Pipe(int)>:
c00101fa:	83 ec 0c             	sub    esp,0xc
c00101fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010201:	83 ec 08             	sub    esp,0x8
c0010204:	6a 00                	push   0x0
c0010206:	50                   	push   eax
c0010207:	e8 60 0e 00 00       	call   c001106c <UnixFile::UnixFile(int)>
c001020c:	83 c4 10             	add    esp,0x10
c001020f:	ba 38 a7 02 c0       	mov    edx,0xc002a738
c0010214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010218:	89 10                	mov    DWORD PTR [eax],edx
c001021a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001021e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010222:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010229:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010234:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001023b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001023f:	83 ec 0c             	sub    esp,0xc
c0010242:	50                   	push   eax
c0010243:	e8 e1 f5 ff ff       	call   c000f829 <malloc>
c0010248:	83 c4 10             	add    esp,0x10
c001024b:	89 c2                	mov    edx,eax
c001024d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010251:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010258:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001025c:	90                   	nop
c001025d:	83 c4 0c             	add    esp,0xc
c0010260:	c3                   	ret    
c0010261:	90                   	nop

c0010262 <VgaText::isAtty()>:
c0010262:	b0 01                	mov    al,0x1
c0010264:	c3                   	ret    
c0010265:	90                   	nop

c0010266 <VgaText::~VgaText()>:
c0010266:	83 ec 0c             	sub    esp,0xc
c0010269:	ba c0 a7 02 c0       	mov    edx,0xc002a7c0
c001026e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010272:	89 10                	mov    DWORD PTR [eax],edx
c0010274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010278:	83 ec 0c             	sub    esp,0xc
c001027b:	50                   	push   eax
c001027c:	e8 cd 0f 00 00       	call   c001124e <UnixFile::~UnixFile()>
c0010281:	83 c4 10             	add    esp,0x10
c0010284:	90                   	nop
c0010285:	83 c4 0c             	add    esp,0xc
c0010288:	c3                   	ret    
c0010289:	90                   	nop

c001028a <VgaText::~VgaText()>:
c001028a:	83 ec 0c             	sub    esp,0xc
c001028d:	83 ec 0c             	sub    esp,0xc
c0010290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010294:	e8 cd ff ff ff       	call   c0010266 <VgaText::~VgaText()>
c0010299:	83 c4 10             	add    esp,0x10
c001029c:	83 ec 08             	sub    esp,0x8
c001029f:	68 c4 02 00 00       	push   0x2c4
c00102a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a8:	e8 fc 24 00 00       	call   c00127a9 <operator delete(void*, unsigned long)>
c00102ad:	83 c4 10             	add    esp,0x10
c00102b0:	83 c4 0c             	add    esp,0xc
c00102b3:	c3                   	ret    

c00102b4 <VgaText::read(unsigned long long, void*, int*)>:
c00102b4:	83 ec 10             	sub    esp,0x10
c00102b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00102bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c3:	e8 86 5a 00 00       	call   c0015d4e <readKeyboard(VgaText*, char*, unsigned long)>
c00102c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00102cc:	89 02                	mov    DWORD PTR [edx],eax
c00102ce:	31 c0                	xor    eax,eax
c00102d0:	83 c4 1c             	add    esp,0x1c
c00102d3:	c3                   	ret    

c00102d4 <setTerminalScrollLock(bool)>:
c00102d4:	c3                   	ret    

c00102d5 <addToTerminalCycle(VgaText*)>:
c00102d5:	8b 15 40 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e440
c00102db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102df:	85 d2                	test   edx,edx
c00102e1:	75 09                	jne    c00102ec <addToTerminalCycle(VgaText*)+0x17>
c00102e3:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00102e6:	a3 40 e4 02 c0       	mov    ds:0xc002e440,eax
c00102eb:	c3                   	ret    
c00102ec:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00102ef:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00102f2:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00102f5:	c3                   	ret    

c00102f6 <installVgaTextImplementation()>:
c00102f6:	83 ec 10             	sub    esp,0x10
c00102f9:	6a 20                	push   0x20
c00102fb:	6a 00                	push   0x0
c00102fd:	68 20 e4 02 c0       	push   0xc002e420
c0010302:	e8 49 04 ff ff       	call   c0000750 <memset>
c0010307:	83 c4 1c             	add    esp,0x1c
c001030a:	c3                   	ret    

c001030b <scrollTerminalScrollLock(int)>:
c001030b:	c3                   	ret    

c001030c <VgaText::updateTitle()>:
c001030c:	53                   	push   ebx
c001030d:	31 c0                	xor    eax,eax
c001030f:	83 ec 58             	sub    esp,0x58
c0010312:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010316:	89 e1                	mov    ecx,esp
c0010318:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001031c:	40                   	inc    eax
c001031d:	83 f8 50             	cmp    eax,0x50
c0010320:	75 f6                	jne    c0010318 <VgaText::updateTitle()+0xc>
c0010322:	31 c0                	xor    eax,eax
c0010324:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001032b:	84 db                	test   bl,bl
c001032d:	74 06                	je     c0010335 <VgaText::updateTitle()+0x29>
c001032f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010332:	40                   	inc    eax
c0010333:	eb ef                	jmp    c0010324 <VgaText::updateTitle()+0x18>
c0010335:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010338:	85 c0                	test   eax,eax
c001033a:	74 09                	je     c0010345 <VgaText::updateTitle()+0x39>
c001033c:	53                   	push   ebx
c001033d:	53                   	push   ebx
c001033e:	51                   	push   ecx
c001033f:	52                   	push   edx
c0010340:	ff d0                	call   eax
c0010342:	83 c4 10             	add    esp,0x10
c0010345:	83 c4 58             	add    esp,0x58
c0010348:	5b                   	pop    ebx
c0010349:	c3                   	ret    

c001034a <VgaText::load()>:
c001034a:	53                   	push   ebx
c001034b:	31 c0                	xor    eax,eax
c001034d:	83 ec 58             	sub    esp,0x58
c0010350:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010354:	89 e2                	mov    edx,esp
c0010356:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001035a:	40                   	inc    eax
c001035b:	83 f8 50             	cmp    eax,0x50
c001035e:	75 f6                	jne    c0010356 <VgaText::load()+0xc>
c0010360:	31 c0                	xor    eax,eax
c0010362:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010369:	84 c9                	test   cl,cl
c001036b:	74 06                	je     c0010373 <VgaText::load()+0x29>
c001036d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010370:	40                   	inc    eax
c0010371:	eb ef                	jmp    c0010362 <VgaText::load()+0x18>
c0010373:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010376:	85 c0                	test   eax,eax
c0010378:	74 09                	je     c0010383 <VgaText::load()+0x39>
c001037a:	51                   	push   ecx
c001037b:	51                   	push   ecx
c001037c:	52                   	push   edx
c001037d:	53                   	push   ebx
c001037e:	ff d0                	call   eax
c0010380:	83 c4 10             	add    esp,0x10
c0010383:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010386:	85 c0                	test   eax,eax
c0010388:	74 09                	je     c0010393 <VgaText::load()+0x49>
c001038a:	83 ec 0c             	sub    esp,0xc
c001038d:	53                   	push   ebx
c001038e:	ff d0                	call   eax
c0010390:	83 c4 10             	add    esp,0x10
c0010393:	83 c4 58             	add    esp,0x58
c0010396:	5b                   	pop    ebx
c0010397:	c3                   	ret    

c0010398 <VgaText::updateCursor()>:
c0010398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001039c:	39 05 44 e4 02 c0    	cmp    DWORD PTR ds:0xc002e444,eax
c00103a2:	75 09                	jne    c00103ad <VgaText::updateCursor()+0x15>
c00103a4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00103a7:	85 c0                	test   eax,eax
c00103a9:	74 02                	je     c00103ad <VgaText::updateCursor()+0x15>
c00103ab:	ff e0                	jmp    eax
c00103ad:	c3                   	ret    

c00103ae <VgaText::doANSI_SGR(int)>:
c00103ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103b6:	85 d2                	test   edx,edx
c00103b8:	75 0b                	jne    c00103c5 <VgaText::doANSI_SGR(int)+0x17>
c00103ba:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00103bd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103c0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00103c3:	eb 59                	jmp    c001041e <VgaText::doANSI_SGR(int)+0x70>
c00103c5:	83 fa 07             	cmp    edx,0x7
c00103c8:	75 0b                	jne    c00103d5 <VgaText::doANSI_SGR(int)+0x27>
c00103ca:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00103cd:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00103d0:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00103d3:	eb 49                	jmp    c001041e <VgaText::doANSI_SGR(int)+0x70>
c00103d5:	83 fa 1b             	cmp    edx,0x1b
c00103d8:	74 e0                	je     c00103ba <VgaText::doANSI_SGR(int)+0xc>
c00103da:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00103dd:	83 f9 07             	cmp    ecx,0x7
c00103e0:	77 09                	ja     c00103eb <VgaText::doANSI_SGR(int)+0x3d>
c00103e2:	8b 14 8d e0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d20]
c00103e9:	eb 20                	jmp    c001040b <VgaText::doANSI_SGR(int)+0x5d>
c00103eb:	8d 4a d8             	lea    ecx,[edx-0x28]
c00103ee:	83 f9 07             	cmp    ecx,0x7
c00103f1:	77 09                	ja     c00103fc <VgaText::doANSI_SGR(int)+0x4e>
c00103f3:	8b 14 8d e0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d20]
c00103fa:	eb 22                	jmp    c001041e <VgaText::doANSI_SGR(int)+0x70>
c00103fc:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00103ff:	83 f9 07             	cmp    ecx,0x7
c0010402:	77 0b                	ja     c001040f <VgaText::doANSI_SGR(int)+0x61>
c0010404:	8b 14 95 98 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e68]
c001040b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001040e:	c3                   	ret    
c001040f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010412:	83 f9 07             	cmp    ecx,0x7
c0010415:	77 0a                	ja     c0010421 <VgaText::doANSI_SGR(int)+0x73>
c0010417:	8b 14 95 70 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e90]
c001041e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010421:	c3                   	ret    

c0010422 <VgaText::setDefaultBgColour(VgaColour)>:
c0010422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010426:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001042a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001042d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010430:	c3                   	ret    
c0010431:	90                   	nop

c0010432 <VgaText::setDefaultFgColour(VgaColour)>:
c0010432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010436:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001043a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001043d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010440:	c3                   	ret    
c0010441:	90                   	nop

c0010442 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010442:	53                   	push   ebx
c0010443:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010447:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001044b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001044f:	51                   	push   ecx
c0010450:	e8 cd ff ff ff       	call   c0010422 <VgaText::setDefaultBgColour(VgaColour)>
c0010455:	58                   	pop    eax
c0010456:	5a                   	pop    edx
c0010457:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001045b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001045f:	5b                   	pop    ebx
c0010460:	eb d0                	jmp    c0010432 <VgaText::setDefaultFgColour(VgaColour)>

c0010462 <VgaText::setTitleTextColour(VgaColour)>:
c0010462:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001046a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001046d:	e9 9a fe ff ff       	jmp    c001030c <VgaText::updateTitle()>

c0010472 <VgaText::setTitleColour(VgaColour)>:
c0010472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010476:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001047a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001047d:	e9 8a fe ff ff       	jmp    c001030c <VgaText::updateTitle()>

c0010482 <VgaText::setTitle(char*)>:
c0010482:	53                   	push   ebx
c0010483:	83 ec 10             	sub    esp,0x10
c0010486:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001048a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001048e:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010494:	50                   	push   eax
c0010495:	e8 72 03 ff ff       	call   c000080c <strcpy>
c001049a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001049e:	83 c4 18             	add    esp,0x18
c00104a1:	5b                   	pop    ebx
c00104a2:	e9 65 fe ff ff       	jmp    c001030c <VgaText::updateTitle()>
c00104a7:	90                   	nop

c00104a8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00104a8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00104ac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00104b1:	83 e0 0f             	and    eax,0xf
c00104b4:	c1 e2 04             	shl    edx,0x4
c00104b7:	09 d0                	or     eax,edx
c00104b9:	c3                   	ret    

c00104ba <VgaText::scrollScreen()>:
c00104ba:	55                   	push   ebp
c00104bb:	b9 01 00 00 00       	mov    ecx,0x1
c00104c0:	57                   	push   edi
c00104c1:	56                   	push   esi
c00104c2:	53                   	push   ebx
c00104c3:	83 ec 0c             	sub    esp,0xc
c00104c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00104ca:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00104d0:	31 ff                	xor    edi,edi
c00104d2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00104d5:	83 f9 17             	cmp    ecx,0x17
c00104d8:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00104db:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00104e2:	75 27                	jne    c001050b <VgaText::scrollScreen()+0x51>
c00104e4:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00104e7:	01 f5                	add    ebp,esi
c00104e9:	f7 c7 01 00 00 00    	test   edi,0x1
c00104ef:	74 16                	je     c0010507 <VgaText::scrollScreen()+0x4d>
c00104f1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00104f5:	50                   	push   eax
c00104f6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00104fa:	50                   	push   eax
c00104fb:	e8 a8 ff ff ff       	call   c00104a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010500:	5a                   	pop    edx
c0010501:	5a                   	pop    edx
c0010502:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010505:	eb 04                	jmp    c001050b <VgaText::scrollScreen()+0x51>
c0010507:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001050b:	47                   	inc    edi
c001050c:	46                   	inc    esi
c001050d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010513:	75 bd                	jne    c00104d2 <VgaText::scrollScreen()+0x18>
c0010515:	41                   	inc    ecx
c0010516:	83 f9 18             	cmp    ecx,0x18
c0010519:	75 af                	jne    c00104ca <VgaText::scrollScreen()+0x10>
c001051b:	39 1d 44 e4 02 c0    	cmp    DWORD PTR ds:0xc002e444,ebx
c0010521:	75 1b                	jne    c001053e <VgaText::scrollScreen()+0x84>
c0010523:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010527:	74 05                	je     c001052e <VgaText::scrollScreen()+0x74>
c0010529:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001052c:	eb 10                	jmp    c001053e <VgaText::scrollScreen()+0x84>
c001052e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010531:	85 c0                	test   eax,eax
c0010533:	74 09                	je     c001053e <VgaText::scrollScreen()+0x84>
c0010535:	83 ec 0c             	sub    esp,0xc
c0010538:	53                   	push   ebx
c0010539:	ff d0                	call   eax
c001053b:	83 c4 10             	add    esp,0x10
c001053e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010542:	83 c4 0c             	add    esp,0xc
c0010545:	5b                   	pop    ebx
c0010546:	5e                   	pop    esi
c0010547:	5f                   	pop    edi
c0010548:	5d                   	pop    ebp
c0010549:	e9 4a fe ff ff       	jmp    c0010398 <VgaText::updateCursor()>

c001054e <VgaText::combineCharAndColour(char, unsigned char)>:
c001054e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010553:	c1 e0 08             	shl    eax,0x8
c0010556:	89 c2                	mov    edx,eax
c0010558:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001055d:	09 d0                	or     eax,edx
c001055f:	c3                   	ret    

c0010560 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	51                   	push   ecx
c0010563:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010567:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001056c:	50                   	push   eax
c001056d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010572:	50                   	push   eax
c0010573:	e8 30 ff ff ff       	call   c00104a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010578:	5b                   	pop    ebx
c0010579:	0f b6 c0             	movzx  eax,al
c001057c:	5e                   	pop    esi
c001057d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010582:	50                   	push   eax
c0010583:	53                   	push   ebx
c0010584:	e8 c5 ff ff ff       	call   c001054e <VgaText::combineCharAndColour(char, unsigned char)>
c0010589:	5a                   	pop    edx
c001058a:	5e                   	pop    esi
c001058b:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c001058e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010594:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010598:	0f b7 d2             	movzx  edx,dx
c001059b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001059f:	39 0d 44 e4 02 c0    	cmp    DWORD PTR ds:0xc002e444,ecx
c00105a5:	75 10                	jne    c00105b7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00105a7:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00105aa:	85 c0                	test   eax,eax
c00105ac:	74 09                	je     c00105b7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00105ae:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105b2:	5a                   	pop    edx
c00105b3:	5b                   	pop    ebx
c00105b4:	5e                   	pop    esi
c00105b5:	ff e0                	jmp    eax
c00105b7:	58                   	pop    eax
c00105b8:	5b                   	pop    ebx
c00105b9:	5e                   	pop    esi
c00105ba:	c3                   	ret    
c00105bb:	90                   	nop

c00105bc <VgaText::getCursorX()>:
c00105bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00105c3:	c3                   	ret    

c00105c4 <VgaText::getCursorY()>:
c00105c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00105cb:	c3                   	ret    

c00105cc <VgaText::setCursor(int, int)>:
c00105cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105d4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00105d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00105de:	e9 b5 fd ff ff       	jmp    c0010398 <VgaText::updateCursor()>

c00105e3 <setActiveTerminal(VgaText*)>:
c00105e3:	53                   	push   ebx
c00105e4:	83 ec 08             	sub    esp,0x8
c00105e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105eb:	85 db                	test   ebx,ebx
c00105ed:	75 11                	jne    c0010600 <setActiveTerminal(VgaText*)+0x1d>
c00105ef:	c7 44 24 10 4c a7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a74c
c00105f7:	83 c4 08             	add    esp,0x8
c00105fa:	5b                   	pop    ebx
c00105fb:	e9 ef 9b 00 00       	jmp    c001a1ef <Krnl::panic(char const*)>
c0010600:	a1 44 e4 02 c0       	mov    eax,ds:0xc002e444
c0010605:	85 c0                	test   eax,eax
c0010607:	74 0c                	je     c0010615 <setActiveTerminal(VgaText*)+0x32>
c0010609:	83 ec 0c             	sub    esp,0xc
c001060c:	50                   	push   eax
c001060d:	e8 86 fd ff ff       	call   c0010398 <VgaText::updateCursor()>
c0010612:	83 c4 10             	add    esp,0x10
c0010615:	89 1d 44 e4 02 c0    	mov    DWORD PTR ds:0xc002e444,ebx
c001061b:	51                   	push   ecx
c001061c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001061f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010622:	53                   	push   ebx
c0010623:	e8 a4 ff ff ff       	call   c00105cc <VgaText::setCursor(int, int)>
c0010628:	83 c4 10             	add    esp,0x10
c001062b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001062f:	75 07                	jne    c0010638 <setActiveTerminal(VgaText*)+0x55>
c0010631:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010638:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001063c:	83 c4 08             	add    esp,0x8
c001063f:	5b                   	pop    ebx
c0010640:	e9 05 fd ff ff       	jmp    c001034a <VgaText::load()>

c0010645 <doTerminalCycle()>:
c0010645:	83 ec 18             	sub    esp,0x18
c0010648:	a1 40 e4 02 c0       	mov    eax,ds:0xc002e440
c001064d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010650:	50                   	push   eax
c0010651:	a3 40 e4 02 c0       	mov    ds:0xc002e440,eax
c0010656:	e8 88 ff ff ff       	call   c00105e3 <setActiveTerminal(VgaText*)>
c001065b:	83 c4 1c             	add    esp,0x1c
c001065e:	c3                   	ret    
c001065f:	90                   	nop

c0010660 <VgaText::setCursorX(int)>:
c0010660:	83 ec 10             	sub    esp,0x10
c0010663:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010667:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001066a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001066e:	50                   	push   eax
c001066f:	e8 58 ff ff ff       	call   c00105cc <VgaText::setCursor(int, int)>
c0010674:	83 c4 1c             	add    esp,0x1c
c0010677:	c3                   	ret    

c0010678 <VgaText::setCursorY(int)>:
c0010678:	83 ec 10             	sub    esp,0x10
c001067b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001067f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010683:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010686:	50                   	push   eax
c0010687:	e8 40 ff ff ff       	call   c00105cc <VgaText::setCursor(int, int)>
c001068c:	83 c4 1c             	add    esp,0x1c
c001068f:	c3                   	ret    

c0010690 <VgaText::incrementCursor(bool)>:
c0010690:	56                   	push   esi
c0010691:	53                   	push   ebx
c0010692:	51                   	push   ecx
c0010693:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010697:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001069b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001069e:	40                   	inc    eax
c001069f:	83 f8 50             	cmp    eax,0x50
c00106a2:	74 05                	je     c00106a9 <VgaText::incrementCursor(bool)+0x19>
c00106a4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00106a7:	eb 24                	jmp    c00106cd <VgaText::incrementCursor(bool)+0x3d>
c00106a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00106ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00106b3:	8d 50 01             	lea    edx,[eax+0x1]
c00106b6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00106b9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00106bc:	75 0f                	jne    c00106cd <VgaText::incrementCursor(bool)+0x3d>
c00106be:	83 ec 0c             	sub    esp,0xc
c00106c1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00106c4:	53                   	push   ebx
c00106c5:	e8 f0 fd ff ff       	call   c00104ba <VgaText::scrollScreen()>
c00106ca:	83 c4 10             	add    esp,0x10
c00106cd:	89 f0                	mov    eax,esi
c00106cf:	84 c0                	test   al,al
c00106d1:	74 0c                	je     c00106df <VgaText::incrementCursor(bool)+0x4f>
c00106d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106d7:	5a                   	pop    edx
c00106d8:	5b                   	pop    ebx
c00106d9:	5e                   	pop    esi
c00106da:	e9 b9 fc ff ff       	jmp    c0010398 <VgaText::updateCursor()>
c00106df:	58                   	pop    eax
c00106e0:	5b                   	pop    ebx
c00106e1:	5e                   	pop    esi
c00106e2:	c3                   	ret    
c00106e3:	90                   	nop

c00106e4 <VgaText::decrementCursor(bool)>:
c00106e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106ec:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00106ef:	85 c0                	test   eax,eax
c00106f1:	74 04                	je     c00106f7 <VgaText::decrementCursor(bool)+0x13>
c00106f3:	48                   	dec    eax
c00106f4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00106f7:	84 c9                	test   cl,cl
c00106f9:	74 09                	je     c0010704 <VgaText::decrementCursor(bool)+0x20>
c00106fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106ff:	e9 94 fc ff ff       	jmp    c0010398 <VgaText::updateCursor()>
c0010704:	c3                   	ret    
c0010705:	90                   	nop

c0010706 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010706:	53                   	push   ebx
c0010707:	83 ec 08             	sub    esp,0x8
c001070a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001070e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010712:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010716:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001071a:	3c 07                	cmp    al,0x7
c001071c:	75 2a                	jne    c0010748 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001071e:	a1 f8 e4 02 c0       	mov    eax,ds:0xc002e4f8
c0010723:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001072b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010733:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001073b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001073f:	83 c4 08             	add    esp,0x8
c0010742:	5b                   	pop    ebx
c0010743:	e9 46 2f 00 00       	jmp    c001368e <Buzzer::beep(int, int, bool)>
c0010748:	3c 0d                	cmp    al,0xd
c001074a:	75 09                	jne    c0010755 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001074c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010753:	eb 2c                	jmp    c0010781 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010755:	3c 0a                	cmp    al,0xa
c0010757:	75 31                	jne    c001078a <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010759:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001075c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010763:	8d 50 01             	lea    edx,[eax+0x1]
c0010766:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010769:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001076c:	75 0f                	jne    c001077d <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c001076e:	83 ec 0c             	sub    esp,0xc
c0010771:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010774:	53                   	push   ebx
c0010775:	e8 40 fd ff ff       	call   c00104ba <VgaText::scrollScreen()>
c001077a:	83 c4 10             	add    esp,0x10
c001077d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010781:	83 c4 08             	add    esp,0x8
c0010784:	5b                   	pop    ebx
c0010785:	e9 0e fc ff ff       	jmp    c0010398 <VgaText::updateCursor()>
c001078a:	3c 08                	cmp    al,0x8
c001078c:	75 25                	jne    c00107b3 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c001078e:	50                   	push   eax
c001078f:	50                   	push   eax
c0010790:	6a 01                	push   0x1
c0010792:	53                   	push   ebx
c0010793:	e8 4c ff ff ff       	call   c00106e4 <VgaText::decrementCursor(bool)>
c0010798:	5a                   	pop    edx
c0010799:	59                   	pop    ecx
c001079a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001079d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107a0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00107a3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00107a6:	6a 20                	push   0x20
c00107a8:	53                   	push   ebx
c00107a9:	e8 b2 fd ff ff       	call   c0010560 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107ae:	83 c4 28             	add    esp,0x28
c00107b1:	5b                   	pop    ebx
c00107b2:	c3                   	ret    
c00107b3:	83 ec 08             	sub    esp,0x8
c00107b6:	0f be c0             	movsx  eax,al
c00107b9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00107bc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107bf:	51                   	push   ecx
c00107c0:	52                   	push   edx
c00107c1:	50                   	push   eax
c00107c2:	53                   	push   ebx
c00107c3:	e8 98 fd ff ff       	call   c0010560 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107c8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107cc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00107d4:	83 c4 28             	add    esp,0x28
c00107d7:	5b                   	pop    ebx
c00107d8:	e9 b3 fe ff ff       	jmp    c0010690 <VgaText::incrementCursor(bool)>
c00107dd:	90                   	nop

c00107de <VgaText::doUpdate()>:
c00107de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107e2:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00107e5:	85 c0                	test   eax,eax
c00107e7:	74 02                	je     c00107eb <VgaText::doUpdate()+0xd>
c00107e9:	ff e0                	jmp    eax
c00107eb:	c3                   	ret    

c00107ec <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00107ec:	55                   	push   ebp
c00107ed:	31 ed                	xor    ebp,ebp
c00107ef:	57                   	push   edi
c00107f0:	56                   	push   esi
c00107f1:	53                   	push   ebx
c00107f2:	83 ec 1c             	sub    esp,0x1c
c00107f5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00107f9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107fe:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010805:	50                   	push   eax
c0010806:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001080b:	50                   	push   eax
c001080c:	e8 97 fc ff ff       	call   c00104a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010811:	59                   	pop    ecx
c0010812:	0f b6 c0             	movzx  eax,al
c0010815:	5e                   	pop    esi
c0010816:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001081b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001081f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010822:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010826:	0f b7 f6             	movzx  esi,si
c0010829:	01 f6                	add    esi,esi
c001082b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001082e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010831:	84 c0                	test   al,al
c0010833:	0f 84 fd 00 00 00    	je     c0010936 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010839:	3c 0d                	cmp    al,0xd
c001083b:	75 0c                	jne    c0010849 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001083d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010844:	e9 e7 00 00 00       	jmp    c0010930 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010849:	3c 0a                	cmp    al,0xa
c001084b:	75 47                	jne    c0010894 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001084d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010850:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010857:	8d 48 01             	lea    ecx,[eax+0x1]
c001085a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001085d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010860:	75 0f                	jne    c0010871 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010862:	83 ec 0c             	sub    esp,0xc
c0010865:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010868:	53                   	push   ebx
c0010869:	e8 4c fc ff ff       	call   c00104ba <VgaText::scrollScreen()>
c001086e:	83 c4 10             	add    esp,0x10
c0010871:	83 ec 0c             	sub    esp,0xc
c0010874:	31 ed                	xor    ebp,ebp
c0010876:	53                   	push   ebx
c0010877:	e8 1c fb ff ff       	call   c0010398 <VgaText::updateCursor()>
c001087c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010881:	83 c4 10             	add    esp,0x10
c0010884:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010887:	0f b7 f6             	movzx  esi,si
c001088a:	01 f6                	add    esi,esi
c001088c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001088f:	e9 9c 00 00 00       	jmp    c0010930 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010894:	3c 08                	cmp    al,0x8
c0010896:	75 35                	jne    c00108cd <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010898:	56                   	push   esi
c0010899:	56                   	push   esi
c001089a:	6a 01                	push   0x1
c001089c:	53                   	push   ebx
c001089d:	e8 42 fe ff ff       	call   c00106e4 <VgaText::decrementCursor(bool)>
c00108a2:	58                   	pop    eax
c00108a3:	5a                   	pop    edx
c00108a4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108a7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108aa:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00108ad:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00108b0:	6a 20                	push   0x20
c00108b2:	53                   	push   ebx
c00108b3:	e8 a8 fc ff ff       	call   c0010560 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108b8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108bd:	83 c4 20             	add    esp,0x20
c00108c0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00108c3:	0f b7 f6             	movzx  esi,si
c00108c6:	01 f6                	add    esi,esi
c00108c8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108cb:	eb 63                	jmp    c0010930 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00108cd:	51                   	push   ecx
c00108ce:	51                   	push   ecx
c00108cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00108d3:	50                   	push   eax
c00108d4:	e8 75 fc ff ff       	call   c001054e <VgaText::combineCharAndColour(char, unsigned char)>
c00108d9:	83 c4 10             	add    esp,0x10
c00108dc:	66 89 06             	mov    WORD PTR [esi],ax
c00108df:	39 1d 44 e4 02 c0    	cmp    DWORD PTR ds:0xc002e444,ebx
c00108e5:	75 21                	jne    c0010908 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108e7:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00108ea:	85 c0                	test   eax,eax
c00108ec:	74 1a                	je     c0010908 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108ee:	52                   	push   edx
c00108ef:	52                   	push   edx
c00108f0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108f3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108f6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108fa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108fe:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010901:	51                   	push   ecx
c0010902:	53                   	push   ebx
c0010903:	ff d0                	call   eax
c0010905:	83 c4 20             	add    esp,0x20
c0010908:	83 c6 02             	add    esi,0x2
c001090b:	50                   	push   eax
c001090c:	50                   	push   eax
c001090d:	6a 00                	push   0x0
c001090f:	53                   	push   ebx
c0010910:	e8 7b fd ff ff       	call   c0010690 <VgaText::incrementCursor(bool)>
c0010915:	83 c4 10             	add    esp,0x10
c0010918:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001091c:	75 0d                	jne    c001092b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001091e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010923:	0f b7 f6             	movzx  esi,si
c0010926:	01 f6                	add    esi,esi
c0010928:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001092b:	bd 01 00 00 00       	mov    ebp,0x1
c0010930:	47                   	inc    edi
c0010931:	e9 f8 fe ff ff       	jmp    c001082e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	53                   	push   ebx
c001093a:	e8 59 fa ff ff       	call   c0010398 <VgaText::updateCursor()>
c001093f:	83 c4 10             	add    esp,0x10
c0010942:	89 e8                	mov    eax,ebp
c0010944:	84 c0                	test   al,al
c0010946:	74 0c                	je     c0010954 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010948:	83 ec 0c             	sub    esp,0xc
c001094b:	53                   	push   ebx
c001094c:	e8 8d fe ff ff       	call   c00107de <VgaText::doUpdate()>
c0010951:	83 c4 10             	add    esp,0x10
c0010954:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001095b:	83 c4 1c             	add    esp,0x1c
c001095e:	5b                   	pop    ebx
c001095f:	5e                   	pop    esi
c0010960:	5f                   	pop    edi
c0010961:	5d                   	pop    ebp
c0010962:	c3                   	ret    
c0010963:	90                   	nop

c0010964 <VgaText::clearScreen()>:
c0010964:	57                   	push   edi
c0010965:	56                   	push   esi
c0010966:	31 f6                	xor    esi,esi
c0010968:	53                   	push   ebx
c0010969:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001096d:	52                   	push   edx
c001096e:	6a 00                	push   0x0
c0010970:	6a 00                	push   0x0
c0010972:	53                   	push   ebx
c0010973:	e8 54 fc ff ff       	call   c00105cc <VgaText::setCursor(int, int)>
c0010978:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001097f:	83 c4 10             	add    esp,0x10
c0010982:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010985:	7e 20                	jle    c00109a7 <VgaText::clearScreen()+0x43>
c0010987:	31 ff                	xor    edi,edi
c0010989:	50                   	push   eax
c001098a:	50                   	push   eax
c001098b:	56                   	push   esi
c001098c:	57                   	push   edi
c001098d:	47                   	inc    edi
c001098e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010991:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010994:	6a 20                	push   0x20
c0010996:	53                   	push   ebx
c0010997:	e8 c4 fb ff ff       	call   c0010560 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001099c:	83 c4 20             	add    esp,0x20
c001099f:	83 ff 50             	cmp    edi,0x50
c00109a2:	75 e5                	jne    c0010989 <VgaText::clearScreen()+0x25>
c00109a4:	46                   	inc    esi
c00109a5:	eb db                	jmp    c0010982 <VgaText::clearScreen()+0x1e>
c00109a7:	83 ec 0c             	sub    esp,0xc
c00109aa:	53                   	push   ebx
c00109ab:	e8 2e fe ff ff       	call   c00107de <VgaText::doUpdate()>
c00109b0:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00109b7:	83 c4 10             	add    esp,0x10
c00109ba:	5b                   	pop    ebx
c00109bb:	5e                   	pop    esi
c00109bc:	5f                   	pop    edi
c00109bd:	c3                   	ret    

c00109be <VgaText::putchar(char)>:
c00109be:	56                   	push   esi
c00109bf:	53                   	push   ebx
c00109c0:	83 ec 14             	sub    esp,0x14
c00109c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00109cb:	3c 5b                	cmp    al,0x5b
c00109cd:	75 18                	jne    c00109e7 <VgaText::putchar(char)+0x29>
c00109cf:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00109d3:	74 1f                	je     c00109f4 <VgaText::putchar(char)+0x36>
c00109d5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00109db:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00109e2:	e9 bd 00 00 00       	jmp    c0010aa4 <VgaText::putchar(char)+0xe6>
c00109e7:	3c 1b                	cmp    al,0x1b
c00109e9:	75 09                	jne    c00109f4 <VgaText::putchar(char)+0x36>
c00109eb:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00109ef:	e9 b0 00 00 00       	jmp    c0010aa4 <VgaText::putchar(char)+0xe6>
c00109f4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00109f7:	84 c9                	test   cl,cl
c00109f9:	0f 84 92 00 00 00    	je     c0010a91 <VgaText::putchar(char)+0xd3>
c00109ff:	8d 50 c0             	lea    edx,[eax-0x40]
c0010a02:	80 fa 3e             	cmp    dl,0x3e
c0010a05:	77 76                	ja     c0010a7d <VgaText::putchar(char)+0xbf>
c0010a07:	3c 6d                	cmp    al,0x6d
c0010a09:	75 47                	jne    c0010a52 <VgaText::putchar(char)+0x94>
c0010a0b:	31 f6                	xor    esi,esi
c0010a0d:	31 d2                	xor    edx,edx
c0010a0f:	31 c0                	xor    eax,eax
c0010a11:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010a14:	7e 2d                	jle    c0010a43 <VgaText::putchar(char)+0x85>
c0010a16:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010a1b:	80 fa 3b             	cmp    dl,0x3b
c0010a1e:	75 17                	jne    c0010a37 <VgaText::putchar(char)+0x79>
c0010a20:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a24:	50                   	push   eax
c0010a25:	53                   	push   ebx
c0010a26:	e8 83 f9 ff ff       	call   c00103ae <VgaText::doANSI_SGR(int)>
c0010a2b:	59                   	pop    ecx
c0010a2c:	31 d2                	xor    edx,edx
c0010a2e:	58                   	pop    eax
c0010a2f:	31 c0                	xor    eax,eax
c0010a31:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a35:	eb 09                	jmp    c0010a40 <VgaText::putchar(char)+0x82>
c0010a37:	6b c0 0a             	imul   eax,eax,0xa
c0010a3a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010a3e:	88 ca                	mov    dl,cl
c0010a40:	46                   	inc    esi
c0010a41:	eb ce                	jmp    c0010a11 <VgaText::putchar(char)+0x53>
c0010a43:	84 d2                	test   dl,dl
c0010a45:	74 2e                	je     c0010a75 <VgaText::putchar(char)+0xb7>
c0010a47:	50                   	push   eax
c0010a48:	53                   	push   ebx
c0010a49:	e8 60 f9 ff ff       	call   c00103ae <VgaText::doANSI_SGR(int)>
c0010a4e:	58                   	pop    eax
c0010a4f:	5a                   	pop    edx
c0010a50:	eb 23                	jmp    c0010a75 <VgaText::putchar(char)+0xb7>
c0010a52:	3c 4a                	cmp    al,0x4a
c0010a54:	75 1f                	jne    c0010a75 <VgaText::putchar(char)+0xb7>
c0010a56:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010a5a:	75 19                	jne    c0010a75 <VgaText::putchar(char)+0xb7>
c0010a5c:	83 ec 0c             	sub    esp,0xc
c0010a5f:	53                   	push   ebx
c0010a60:	e8 ff fe ff ff       	call   c0010964 <VgaText::clearScreen()>
c0010a65:	83 c4 0c             	add    esp,0xc
c0010a68:	6a 00                	push   0x0
c0010a6a:	6a 00                	push   0x0
c0010a6c:	53                   	push   ebx
c0010a6d:	e8 5a fb ff ff       	call   c00105cc <VgaText::setCursor(int, int)>
c0010a72:	83 c4 10             	add    esp,0x10
c0010a75:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010a7b:	eb 27                	jmp    c0010aa4 <VgaText::putchar(char)+0xe6>
c0010a7d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010a80:	83 fa 0e             	cmp    edx,0xe
c0010a83:	7f 1f                	jg     c0010aa4 <VgaText::putchar(char)+0xe6>
c0010a85:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a88:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010a8b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010a8f:	eb 13                	jmp    c0010aa4 <VgaText::putchar(char)+0xe6>
c0010a91:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a94:	0f be c0             	movsx  eax,al
c0010a97:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a9a:	50                   	push   eax
c0010a9b:	53                   	push   ebx
c0010a9c:	e8 65 fc ff ff       	call   c0010706 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010aa1:	83 c4 10             	add    esp,0x10
c0010aa4:	83 c4 14             	add    esp,0x14
c0010aa7:	5b                   	pop    ebx
c0010aa8:	5e                   	pop    esi
c0010aa9:	c3                   	ret    

c0010aaa <VgaText::putx(unsigned int)>:
c0010aaa:	57                   	push   edi
c0010aab:	b9 11 00 00 00       	mov    ecx,0x11
c0010ab0:	56                   	push   esi
c0010ab1:	be 5a a7 02 c0       	mov    esi,0xc002a75a
c0010ab6:	53                   	push   ebx
c0010ab7:	83 ec 20             	sub    esp,0x20
c0010aba:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010abe:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010ac2:	fc                   	cld    
c0010ac3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ac5:	be 08 00 00 00       	mov    esi,0x8
c0010aca:	50                   	push   eax
c0010acb:	50                   	push   eax
c0010acc:	89 d8                	mov    eax,ebx
c0010ace:	c1 e3 04             	shl    ebx,0x4
c0010ad1:	c1 e8 1c             	shr    eax,0x1c
c0010ad4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ad9:	50                   	push   eax
c0010ada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ade:	e8 db fe ff ff       	call   c00109be <VgaText::putchar(char)>
c0010ae3:	83 c4 10             	add    esp,0x10
c0010ae6:	4e                   	dec    esi
c0010ae7:	75 e1                	jne    c0010aca <VgaText::putx(unsigned int)+0x20>
c0010ae9:	83 c4 20             	add    esp,0x20
c0010aec:	5b                   	pop    ebx
c0010aed:	5e                   	pop    esi
c0010aee:	5f                   	pop    edi
c0010aef:	c3                   	ret    

c0010af0 <VgaText::puts(char const*)>:
c0010af0:	53                   	push   ebx
c0010af1:	83 ec 08             	sub    esp,0x8
c0010af4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010af8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010afb:	84 c0                	test   al,al
c0010afd:	74 12                	je     c0010b11 <VgaText::puts(char const*)+0x21>
c0010aff:	43                   	inc    ebx
c0010b00:	51                   	push   ecx
c0010b01:	51                   	push   ecx
c0010b02:	50                   	push   eax
c0010b03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b07:	e8 b2 fe ff ff       	call   c00109be <VgaText::putchar(char)>
c0010b0c:	83 c4 10             	add    esp,0x10
c0010b0f:	eb e7                	jmp    c0010af8 <VgaText::puts(char const*)+0x8>
c0010b11:	83 c4 08             	add    esp,0x8
c0010b14:	5b                   	pop    ebx
c0010b15:	c3                   	ret    

c0010b16 <VgaText::VgaText(char const*)>:
c0010b16:	57                   	push   edi
c0010b17:	56                   	push   esi
c0010b18:	53                   	push   ebx
c0010b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b1d:	83 ec 08             	sub    esp,0x8
c0010b20:	6a 00                	push   0x0
c0010b22:	50                   	push   eax
c0010b23:	e8 44 05 00 00       	call   c001106c <UnixFile::UnixFile(int)>
c0010b28:	83 c4 10             	add    esp,0x10
c0010b2b:	ba c0 a7 02 c0       	mov    edx,0xc002a7c0
c0010b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b34:	89 10                	mov    DWORD PTR [eax],edx
c0010b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b3a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b45:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b50:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b58:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b60:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b76:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b81:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b8c:	8d 50 60             	lea    edx,[eax+0x60]
c0010b8f:	bb 20 e4 02 c0       	mov    ebx,0xc002e420
c0010b94:	b8 08 00 00 00       	mov    eax,0x8
c0010b99:	fc                   	cld    
c0010b9a:	89 d7                	mov    edi,edx
c0010b9c:	89 de                	mov    esi,ebx
c0010b9e:	89 c1                	mov    ecx,eax
c0010ba0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ba6:	05 82 00 00 00       	add    eax,0x82
c0010bab:	83 ec 08             	sub    esp,0x8
c0010bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb2:	50                   	push   eax
c0010bb3:	e8 54 fc fe ff       	call   c000080c <strcpy>
c0010bb8:	83 c4 10             	add    esp,0x10
c0010bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bbf:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010bc6:	83 ec 0c             	sub    esp,0xc
c0010bc9:	6a 01                	push   0x1
c0010bcb:	e8 df 08 00 00       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c0010bd0:	83 c4 10             	add    esp,0x10
c0010bd3:	89 c2                	mov    edx,eax
c0010bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010bdc:	8b 1d f0 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4f0
c0010be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010be9:	89 c6                	mov    esi,eax
c0010beb:	e8 35 f0 ff ff       	call   c000fc25 <Phys::allocatePage()>
c0010bf0:	68 05 0c 00 00       	push   0xc05
c0010bf5:	56                   	push   esi
c0010bf6:	50                   	push   eax
c0010bf7:	53                   	push   ebx
c0010bf8:	e8 59 0f 00 00       	call   c0011b56 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010bfd:	83 c4 10             	add    esp,0x10
c0010c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c07:	83 ec 04             	sub    esp,0x4
c0010c0a:	68 00 0f 00 00       	push   0xf00
c0010c0f:	6a 00                	push   0x0
c0010c11:	50                   	push   eax
c0010c12:	e8 39 fb fe ff       	call   c0000750 <memset>
c0010c17:	83 c4 10             	add    esp,0x10
c0010c1a:	83 ec 04             	sub    esp,0x4
c0010c1d:	6a 00                	push   0x0
c0010c1f:	6a 07                	push   0x7
c0010c21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c25:	e8 18 f8 ff ff       	call   c0010442 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010c2a:	83 c4 10             	add    esp,0x10
c0010c2d:	83 ec 04             	sub    esp,0x4
c0010c30:	6a 00                	push   0x0
c0010c32:	6a 00                	push   0x0
c0010c34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c38:	e8 8f f9 ff ff       	call   c00105cc <VgaText::setCursor(int, int)>
c0010c3d:	83 c4 10             	add    esp,0x10
c0010c40:	83 ec 0c             	sub    esp,0xc
c0010c43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c47:	e8 18 fd ff ff       	call   c0010964 <VgaText::clearScreen()>
c0010c4c:	83 c4 10             	add    esp,0x10
c0010c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c53:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c5b:	05 02 01 00 00       	add    eax,0x102
c0010c60:	83 ec 04             	sub    esp,0x4
c0010c63:	68 96 00 00 00       	push   0x96
c0010c68:	6a 00                	push   0x0
c0010c6a:	50                   	push   eax
c0010c6b:	e8 e0 fa fe ff       	call   c0000750 <memset>
c0010c70:	83 c4 10             	add    esp,0x10
c0010c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c77:	05 98 01 00 00       	add    eax,0x198
c0010c7c:	83 ec 04             	sub    esp,0x4
c0010c7f:	68 2c 01 00 00       	push   0x12c
c0010c84:	6a 00                	push   0x0
c0010c86:	50                   	push   eax
c0010c87:	e8 c4 fa fe ff       	call   c0000750 <memset>
c0010c8c:	83 c4 10             	add    esp,0x10
c0010c8f:	90                   	nop
c0010c90:	5b                   	pop    ebx
c0010c91:	5e                   	pop    esi
c0010c92:	5f                   	pop    edi
c0010c93:	c3                   	ret    

c0010c94 <VgaText::receiveKey(unsigned char)>:
c0010c94:	55                   	push   ebp
c0010c95:	57                   	push   edi
c0010c96:	56                   	push   esi
c0010c97:	53                   	push   ebx
c0010c98:	83 ec 1c             	sub    esp,0x1c
c0010c9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ca3:	84 db                	test   bl,bl
c0010ca5:	0f 84 c9 00 00 00    	je     c0010d74 <VgaText::receiveKey(unsigned char)+0xe0>
c0010cab:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010cb1:	80 fb 08             	cmp    bl,0x8
c0010cb4:	75 2c                	jne    c0010ce2 <VgaText::receiveKey(unsigned char)+0x4e>
c0010cb6:	83 ec 0c             	sub    esp,0xc
c0010cb9:	57                   	push   edi
c0010cba:	e8 ad fa fe ff       	call   c000076c <strlen>
c0010cbf:	83 c4 10             	add    esp,0x10
c0010cc2:	85 c0                	test   eax,eax
c0010cc4:	74 41                	je     c0010d07 <VgaText::receiveKey(unsigned char)+0x73>
c0010cc6:	50                   	push   eax
c0010cc7:	50                   	push   eax
c0010cc8:	6a 08                	push   0x8
c0010cca:	56                   	push   esi
c0010ccb:	e8 ee fc ff ff       	call   c00109be <VgaText::putchar(char)>
c0010cd0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cd3:	e8 94 fa fe ff       	call   c000076c <strlen>
c0010cd8:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010ce0:	eb 22                	jmp    c0010d04 <VgaText::receiveKey(unsigned char)+0x70>
c0010ce2:	0f be c3             	movsx  eax,bl
c0010ce5:	52                   	push   edx
c0010ce6:	52                   	push   edx
c0010ce7:	50                   	push   eax
c0010ce8:	56                   	push   esi
c0010ce9:	e8 d0 fc ff ff       	call   c00109be <VgaText::putchar(char)>
c0010cee:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010cf2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010cf7:	59                   	pop    ecx
c0010cf8:	5d                   	pop    ebp
c0010cf9:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010cfd:	50                   	push   eax
c0010cfe:	57                   	push   edi
c0010cff:	e8 48 fc fe ff       	call   c000094c <strcat>
c0010d04:	83 c4 10             	add    esp,0x10
c0010d07:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010d0e:	75 05                	jne    c0010d15 <VgaText::receiveKey(unsigned char)+0x81>
c0010d10:	80 fb 0a             	cmp    bl,0xa
c0010d13:	75 53                	jne    c0010d68 <VgaText::receiveKey(unsigned char)+0xd4>
c0010d15:	83 ec 0c             	sub    esp,0xc
c0010d18:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010d1e:	53                   	push   ebx
c0010d1f:	e8 48 fa fe ff       	call   c000076c <strlen>
c0010d24:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d27:	89 c5                	mov    ebp,eax
c0010d29:	e8 3e fa fe ff       	call   c000076c <strlen>
c0010d2e:	83 c4 10             	add    esp,0x10
c0010d31:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d35:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d3a:	76 10                	jbe    c0010d4c <VgaText::receiveKey(unsigned char)+0xb8>
c0010d3c:	83 ec 0c             	sub    esp,0xc
c0010d3f:	68 6b a7 02 c0       	push   0xc002a76b
c0010d44:	e8 a6 94 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0010d49:	83 c4 10             	add    esp,0x10
c0010d4c:	50                   	push   eax
c0010d4d:	50                   	push   eax
c0010d4e:	57                   	push   edi
c0010d4f:	53                   	push   ebx
c0010d50:	e8 f7 fb fe ff       	call   c000094c <strcat>
c0010d55:	83 c4 0c             	add    esp,0xc
c0010d58:	68 96 00 00 00       	push   0x96
c0010d5d:	6a 00                	push   0x0
c0010d5f:	57                   	push   edi
c0010d60:	e8 eb f9 fe ff       	call   c0000750 <memset>
c0010d65:	83 c4 10             	add    esp,0x10
c0010d68:	83 ec 0c             	sub    esp,0xc
c0010d6b:	56                   	push   esi
c0010d6c:	e8 6d fa ff ff       	call   c00107de <VgaText::doUpdate()>
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	83 c4 1c             	add    esp,0x1c
c0010d77:	5b                   	pop    ebx
c0010d78:	5e                   	pop    esi
c0010d79:	5f                   	pop    edi
c0010d7a:	5d                   	pop    ebp
c0010d7b:	c3                   	ret    

c0010d7c <VgaText::write(unsigned long long, void*, int*)>:
c0010d7c:	55                   	push   ebp
c0010d7d:	57                   	push   edi
c0010d7e:	56                   	push   esi
c0010d7f:	53                   	push   ebx
c0010d80:	83 ec 0c             	sub    esp,0xc
c0010d83:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d87:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d8b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d8f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010d96:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010d99:	39 eb                	cmp    ebx,ebp
c0010d9b:	74 13                	je     c0010db0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010d9d:	43                   	inc    ebx
c0010d9e:	50                   	push   eax
c0010d9f:	50                   	push   eax
c0010da0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010da4:	50                   	push   eax
c0010da5:	56                   	push   esi
c0010da6:	e8 13 fc ff ff       	call   c00109be <VgaText::putchar(char)>
c0010dab:	83 c4 10             	add    esp,0x10
c0010dae:	eb e9                	jmp    c0010d99 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010db0:	83 ec 0c             	sub    esp,0xc
c0010db3:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010dba:	56                   	push   esi
c0010dbb:	e8 1e fa ff ff       	call   c00107de <VgaText::doUpdate()>
c0010dc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010dc4:	89 38                	mov    DWORD PTR [eax],edi
c0010dc6:	83 c4 1c             	add    esp,0x1c
c0010dc9:	31 c0                	xor    eax,eax
c0010dcb:	5b                   	pop    ebx
c0010dcc:	5e                   	pop    esi
c0010dcd:	5f                   	pop    edi
c0010dce:	5d                   	pop    ebp
c0010dcf:	c3                   	ret    

c0010dd0 <newTerminal(char*)>:
c0010dd0:	83 ec 28             	sub    esp,0x28
c0010dd3:	68 c4 02 00 00       	push   0x2c4
c0010dd8:	e8 4c ea ff ff       	call   c000f829 <malloc>
c0010ddd:	5a                   	pop    edx
c0010dde:	59                   	pop    ecx
c0010ddf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010de3:	50                   	push   eax
c0010de4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010de8:	e8 29 fd ff ff       	call   c0010b16 <VgaText::VgaText(char const*)>
c0010ded:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010df1:	83 c4 2c             	add    esp,0x2c
c0010df4:	c3                   	ret    
c0010df5:	90                   	nop

c0010df6 <TSS::TSS()>:
c0010df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dfa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e01:	90                   	nop
c0010e02:	c3                   	ret    
c0010e03:	90                   	nop

c0010e04 <TSS::setESP(unsigned long)>:
c0010e04:	55                   	push   ebp
c0010e05:	89 e5                	mov    ebp,esp
c0010e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e0d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e10:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e13:	90                   	nop
c0010e14:	5d                   	pop    ebp
c0010e15:	c3                   	ret    

c0010e16 <TSS::flush()>:
c0010e16:	55                   	push   ebp
c0010e17:	89 e5                	mov    ebp,esp
c0010e19:	83 ec 10             	sub    esp,0x10
c0010e1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e21:	83 c8 03             	or     eax,0x3
c0010e24:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010e28:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010e2c:	66 89 d0             	mov    ax,dx
c0010e2f:	0f 00 d8             	ltr    ax
c0010e32:	90                   	nop
c0010e33:	c9                   	leave  
c0010e34:	c3                   	ret    
c0010e35:	90                   	nop

c0010e36 <TSS::setup(unsigned long, unsigned long)>:
c0010e36:	55                   	push   ebp
c0010e37:	89 e5                	mov    ebp,esp
c0010e39:	83 ec 18             	sub    esp,0x18
c0010e3c:	83 ec 0c             	sub    esp,0xc
c0010e3f:	6a 68                	push   0x68
c0010e41:	e8 e3 e9 ff ff       	call   c000f829 <malloc>
c0010e46:	83 c4 10             	add    esp,0x10
c0010e49:	89 c2                	mov    edx,eax
c0010e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e4e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e57:	83 ec 04             	sub    esp,0x4
c0010e5a:	6a 68                	push   0x68
c0010e5c:	6a 00                	push   0x0
c0010e5e:	50                   	push   eax
c0010e5f:	e8 ec f8 fe ff       	call   c0000750 <memset>
c0010e64:	83 c4 10             	add    esp,0x10
c0010e67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e6d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e79:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e85:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e91:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e9d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb5:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ebe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ecd:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ed6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010edc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ee2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ee8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010eeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ef1:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010ef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010efb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010efe:	0f 20 da             	mov    edx,cr3
c0010f01:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010f04:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010f07:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f10:	83 ec 08             	sub    esp,0x8
c0010f13:	50                   	push   eax
c0010f14:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f17:	50                   	push   eax
c0010f18:	e8 05 e1 ff ff       	call   c000f022 <GDTEntry::setBase(unsigned int)>
c0010f1d:	83 c4 10             	add    esp,0x10
c0010f20:	83 ec 08             	sub    esp,0x8
c0010f23:	6a 68                	push   0x68
c0010f25:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f28:	50                   	push   eax
c0010f29:	e8 10 e1 ff ff       	call   c000f03e <GDTEntry::setLimit(unsigned int)>
c0010f2e:	83 c4 10             	add    esp,0x10
c0010f31:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010f35:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f38:	83 e0 0f             	and    eax,0xf
c0010f3b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f3e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f41:	83 c8 40             	or     eax,0x40
c0010f44:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f47:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0010f4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f52:	05 78 01 00 00       	add    eax,0x178
c0010f57:	83 ec 04             	sub    esp,0x4
c0010f5a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f5d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010f60:	50                   	push   eax
c0010f61:	e8 0c e1 ff ff       	call   c000f072 <GDT::addEntry(GDTEntry)>
c0010f66:	83 c4 10             	add    esp,0x10
c0010f69:	89 c2                	mov    edx,eax
c0010f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f6e:	89 10                	mov    DWORD PTR [eax],edx
c0010f70:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0010f75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f7b:	05 78 01 00 00       	add    eax,0x178
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	50                   	push   eax
c0010f84:	e8 13 e1 ff ff       	call   c000f09c <GDT::flush()>
c0010f89:	83 c4 10             	add    esp,0x10
c0010f8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f91:	c9                   	leave  
c0010f92:	c3                   	ret    
c0010f93:	90                   	nop

c0010f94 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f9f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010fa4:	75 08                	jne    c0010fae <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010fa6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010fac:	eb 38                	jmp    c0010fe6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010fae:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010fb3:	75 17                	jne    c0010fcc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010fb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010fbd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010fc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fc5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fc9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010fcc:	89 c1                	mov    ecx,eax
c0010fce:	83 e1 fd             	and    ecx,0xfffffffd
c0010fd1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010fd7:	74 cd                	je     c0010fa6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010fd9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010fde:	83 e0 ef             	and    eax,0xffffffef
c0010fe1:	83 f8 08             	cmp    eax,0x8
c0010fe4:	76 c0                	jbe    c0010fa6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010fe6:	31 c0                	xor    eax,eax
c0010fe8:	c3                   	ret    
c0010fe9:	90                   	nop

c0010fea <ReservedFilename::isAtty()>:
c0010fea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010ff1:	31 c0                	xor    eax,eax
c0010ff3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010ff9:	74 09                	je     c0011004 <ReservedFilename::isAtty()+0x1a>
c0010ffb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011001:	0f 94 c0             	sete   al
c0011004:	c3                   	ret    
c0011005:	90                   	nop

c0011006 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001100a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001100e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011011:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011015:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001101a:	75 08                	jne    c0011024 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001101c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011022:	eb 3d                	jmp    c0011061 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011024:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011029:	75 17                	jne    c0011042 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001102b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011030:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011033:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011039:	8b 10                	mov    edx,DWORD PTR [eax]
c001103b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001103f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011042:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011047:	75 04                	jne    c001104d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011049:	89 0a                	mov    DWORD PTR [edx],ecx
c001104b:	eb 14                	jmp    c0011061 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001104d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011052:	74 c8                	je     c001101c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011054:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011059:	83 e0 ef             	and    eax,0xffffffef
c001105c:	83 f8 08             	cmp    eax,0x8
c001105f:	76 bb                	jbe    c001101c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011061:	31 c0                	xor    eax,eax
c0011063:	c3                   	ret    

c0011064 <UnixFile::getFileDescriptor()>:
c0011064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106b:	c3                   	ret    

c001106c <UnixFile::UnixFile(int)>:
c001106c:	53                   	push   ebx
c001106d:	83 ec 28             	sub    esp,0x28
c0011070:	ba 88 a8 02 c0       	mov    edx,0xc002a888
c0011075:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011079:	89 10                	mov    DWORD PTR [eax],edx
c001107b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011083:	0f 8f 8c 01 00 00    	jg     c0011215 <UnixFile::UnixFile(int)+0x1a9>
c0011089:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001108e:	8d 50 01             	lea    edx,[eax+0x1]
c0011091:	89 15 20 d3 02 c0    	mov    DWORD PTR ds:0xc002d320,edx
c0011097:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001109b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001109e:	83 ec 08             	sub    esp,0x8
c00110a1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00110a5:	68 d8 e4 02 c0       	push   0xc002e4d8
c00110aa:	e8 e7 78 01 00       	call   c0028996 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110af:	83 c4 10             	add    esp,0x10
c00110b2:	a0 d4 e4 02 c0       	mov    al,ds:0xc002e4d4
c00110b7:	83 f0 01             	xor    eax,0x1
c00110ba:	84 c0                	test   al,al
c00110bc:	0f 84 54 01 00 00    	je     c0011216 <UnixFile::UnixFile(int)+0x1aa>
c00110c2:	c6 05 d4 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4d4,0x1
c00110c9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00110d1:	83 ec 0c             	sub    esp,0xc
c00110d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110d8:	e8 4c e7 ff ff       	call   c000f829 <malloc>
c00110dd:	83 c4 10             	add    esp,0x10
c00110e0:	89 c3                	mov    ebx,eax
c00110e2:	83 ec 08             	sub    esp,0x8
c00110e5:	68 03 ff ff 0f       	push   0xfffff03
c00110ea:	53                   	push   ebx
c00110eb:	e8 2c 01 00 00       	call   c001121c <ReservedFilename::ReservedFilename(int)>
c00110f0:	83 c4 10             	add    esp,0x10
c00110f3:	89 1d cc e4 02 c0    	mov    DWORD PTR ds:0xc002e4cc,ebx
c00110f9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011101:	83 ec 0c             	sub    esp,0xc
c0011104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011108:	e8 1c e7 ff ff       	call   c000f829 <malloc>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	89 c3                	mov    ebx,eax
c0011112:	83 ec 08             	sub    esp,0x8
c0011115:	68 01 ff ff 0f       	push   0xfffff01
c001111a:	53                   	push   ebx
c001111b:	e8 fc 00 00 00       	call   c001121c <ReservedFilename::ReservedFilename(int)>
c0011120:	83 c4 10             	add    esp,0x10
c0011123:	89 1d d0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4d0,ebx
c0011129:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011131:	83 ec 0c             	sub    esp,0xc
c0011134:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011138:	e8 ec e6 ff ff       	call   c000f829 <malloc>
c001113d:	83 c4 10             	add    esp,0x10
c0011140:	89 c3                	mov    ebx,eax
c0011142:	83 ec 08             	sub    esp,0x8
c0011145:	68 00 ff ff 0f       	push   0xfffff00
c001114a:	53                   	push   ebx
c001114b:	e8 cc 00 00 00       	call   c001121c <ReservedFilename::ReservedFilename(int)>
c0011150:	83 c4 10             	add    esp,0x10
c0011153:	89 1d c4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c4,ebx
c0011159:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011161:	83 ec 0c             	sub    esp,0xc
c0011164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011168:	e8 bc e6 ff ff       	call   c000f829 <malloc>
c001116d:	83 c4 10             	add    esp,0x10
c0011170:	89 c3                	mov    ebx,eax
c0011172:	83 ec 08             	sub    esp,0x8
c0011175:	68 02 ff ff 0f       	push   0xfffff02
c001117a:	53                   	push   ebx
c001117b:	e8 9c 00 00 00       	call   c001121c <ReservedFilename::ReservedFilename(int)>
c0011180:	83 c4 10             	add    esp,0x10
c0011183:	89 1d c8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c8,ebx
c0011189:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011191:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011196:	7f 7e                	jg     c0011216 <UnixFile::UnixFile(int)+0x1aa>
c0011198:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00111a0:	83 ec 0c             	sub    esp,0xc
c00111a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00111a7:	e8 7d e6 ff ff       	call   c000f829 <malloc>
c00111ac:	83 c4 10             	add    esp,0x10
c00111af:	89 c3                	mov    ebx,eax
c00111b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111b5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00111ba:	83 ec 08             	sub    esp,0x8
c00111bd:	50                   	push   eax
c00111be:	53                   	push   ebx
c00111bf:	e8 58 00 00 00       	call   c001121c <ReservedFilename::ReservedFilename(int)>
c00111c4:	83 c4 10             	add    esp,0x10
c00111c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111cb:	89 1c 85 a0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b60],ebx
c00111d2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00111da:	83 ec 0c             	sub    esp,0xc
c00111dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00111e1:	e8 43 e6 ff ff       	call   c000f829 <malloc>
c00111e6:	83 c4 10             	add    esp,0x10
c00111e9:	89 c3                	mov    ebx,eax
c00111eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111ef:	05 20 ff ff 0f       	add    eax,0xfffff20
c00111f4:	83 ec 08             	sub    esp,0x8
c00111f7:	50                   	push   eax
c00111f8:	53                   	push   ebx
c00111f9:	e8 1e 00 00 00       	call   c001121c <ReservedFilename::ReservedFilename(int)>
c00111fe:	83 c4 10             	add    esp,0x10
c0011201:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011205:	89 1c 85 60 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ba0],ebx
c001120c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011210:	e9 7c ff ff ff       	jmp    c0011191 <UnixFile::UnixFile(int)+0x125>
c0011215:	90                   	nop
c0011216:	83 c4 28             	add    esp,0x28
c0011219:	5b                   	pop    ebx
c001121a:	c3                   	ret    
c001121b:	90                   	nop

c001121c <ReservedFilename::ReservedFilename(int)>:
c001121c:	83 ec 0c             	sub    esp,0xc
c001121f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011223:	83 ec 08             	sub    esp,0x8
c0011226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001122a:	50                   	push   eax
c001122b:	e8 3c fe ff ff       	call   c001106c <UnixFile::UnixFile(int)>
c0011230:	83 c4 10             	add    esp,0x10
c0011233:	ba a4 a8 02 c0       	mov    edx,0xc002a8a4
c0011238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123c:	89 10                	mov    DWORD PTR [eax],edx
c001123e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011242:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011246:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011249:	90                   	nop
c001124a:	83 c4 0c             	add    esp,0xc
c001124d:	c3                   	ret    

c001124e <UnixFile::~UnixFile()>:
c001124e:	83 ec 1c             	sub    esp,0x1c
c0011251:	ba 88 a8 02 c0       	mov    edx,0xc002a888
c0011256:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001125a:	89 10                	mov    DWORD PTR [eax],edx
c001125c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011260:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011263:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011268:	7f 73                	jg     c00112dd <UnixFile::~UnixFile()+0x8f>
c001126a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011272:	83 ec 0c             	sub    esp,0xc
c0011275:	68 d8 e4 02 c0       	push   0xc002e4d8
c001127a:	e8 eb 77 01 00       	call   c0028a6a <LinkedList<UnixFile>::getFirstElement()>
c001127f:	83 c4 10             	add    esp,0x10
c0011282:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011286:	83 ec 0c             	sub    esp,0xc
c0011289:	68 d8 e4 02 c0       	push   0xc002e4d8
c001128e:	e8 df 77 01 00       	call   c0028a72 <LinkedList<UnixFile>::removeFirst()>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001129a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001129e:	74 40                	je     c00112e0 <UnixFile::~UnixFile()+0x92>
c00112a0:	83 ec 08             	sub    esp,0x8
c00112a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00112a7:	68 d8 e4 02 c0       	push   0xc002e4d8
c00112ac:	e8 e5 76 01 00       	call   c0028996 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112b1:	83 c4 10             	add    esp,0x10
c00112b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112b8:	8d 50 01             	lea    edx,[eax+0x1]
c00112bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00112bf:	3d 88 13 00 00       	cmp    eax,0x1388
c00112c4:	0f 94 c0             	sete   al
c00112c7:	84 c0                	test   al,al
c00112c9:	74 a7                	je     c0011272 <UnixFile::~UnixFile()+0x24>
c00112cb:	83 ec 0c             	sub    esp,0xc
c00112ce:	68 60 a8 02 c0       	push   0xc002a860
c00112d3:	e8 17 8f 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c00112d8:	83 c4 10             	add    esp,0x10
c00112db:	eb 95                	jmp    c0011272 <UnixFile::~UnixFile()+0x24>
c00112dd:	90                   	nop
c00112de:	eb 01                	jmp    c00112e1 <UnixFile::~UnixFile()+0x93>
c00112e0:	90                   	nop
c00112e1:	90                   	nop
c00112e2:	83 c4 1c             	add    esp,0x1c
c00112e5:	c3                   	ret    

c00112e6 <UnixFile::~UnixFile()>:
c00112e6:	83 ec 0c             	sub    esp,0xc
c00112e9:	83 ec 0c             	sub    esp,0xc
c00112ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f0:	e8 59 ff ff ff       	call   c001124e <UnixFile::~UnixFile()>
c00112f5:	83 c4 10             	add    esp,0x10
c00112f8:	83 ec 08             	sub    esp,0x8
c00112fb:	6a 0c                	push   0xc
c00112fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011301:	e8 a3 14 00 00       	call   c00127a9 <operator delete(void*, unsigned long)>
c0011306:	83 c4 10             	add    esp,0x10
c0011309:	83 c4 0c             	add    esp,0xc
c001130c:	c3                   	ret    
c001130d:	90                   	nop

c001130e <ReservedFilename::~ReservedFilename()>:
c001130e:	83 ec 0c             	sub    esp,0xc
c0011311:	ba a4 a8 02 c0       	mov    edx,0xc002a8a4
c0011316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001131a:	89 10                	mov    DWORD PTR [eax],edx
c001131c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011320:	83 ec 0c             	sub    esp,0xc
c0011323:	50                   	push   eax
c0011324:	e8 25 ff ff ff       	call   c001124e <UnixFile::~UnixFile()>
c0011329:	83 c4 10             	add    esp,0x10
c001132c:	90                   	nop
c001132d:	83 c4 0c             	add    esp,0xc
c0011330:	c3                   	ret    
c0011331:	90                   	nop

c0011332 <ReservedFilename::~ReservedFilename()>:
c0011332:	83 ec 0c             	sub    esp,0xc
c0011335:	83 ec 0c             	sub    esp,0xc
c0011338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001133c:	e8 cd ff ff ff       	call   c001130e <ReservedFilename::~ReservedFilename()>
c0011341:	83 c4 10             	add    esp,0x10
c0011344:	83 ec 08             	sub    esp,0x8
c0011347:	6a 0c                	push   0xc
c0011349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001134d:	e8 57 14 00 00       	call   c00127a9 <operator delete(void*, unsigned long)>
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	83 c4 0c             	add    esp,0xc
c0011358:	c3                   	ret    

c0011359 <getFromFileDescriptor(int)>:
c0011359:	53                   	push   ebx
c001135a:	83 ec 08             	sub    esp,0x8
c001135d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011361:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011367:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001136d:	7f 2c                	jg     c001139b <getFromFileDescriptor(int)+0x42>
c001136f:	83 ec 0c             	sub    esp,0xc
c0011372:	68 d8 e4 02 c0       	push   0xc002e4d8
c0011377:	e8 ee 76 01 00       	call   c0028a6a <LinkedList<UnixFile>::getFirstElement()>
c001137c:	83 c4 10             	add    esp,0x10
c001137f:	85 c0                	test   eax,eax
c0011381:	75 04                	jne    c0011387 <getFromFileDescriptor(int)+0x2e>
c0011383:	31 c0                	xor    eax,eax
c0011385:	eb 6e                	jmp    c00113f5 <getFromFileDescriptor(int)+0x9c>
c0011387:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001138a:	74 69                	je     c00113f5 <getFromFileDescriptor(int)+0x9c>
c001138c:	52                   	push   edx
c001138d:	52                   	push   edx
c001138e:	50                   	push   eax
c001138f:	68 d8 e4 02 c0       	push   0xc002e4d8
c0011394:	e8 7b 77 01 00       	call   c0028b14 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011399:	eb e1                	jmp    c001137c <getFromFileDescriptor(int)+0x23>
c001139b:	a1 cc e4 02 c0       	mov    eax,ds:0xc002e4cc
c00113a0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00113a6:	74 4d                	je     c00113f5 <getFromFileDescriptor(int)+0x9c>
c00113a8:	a1 d0 e4 02 c0       	mov    eax,ds:0xc002e4d0
c00113ad:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00113b3:	74 40                	je     c00113f5 <getFromFileDescriptor(int)+0x9c>
c00113b5:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c00113ba:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00113c0:	74 33                	je     c00113f5 <getFromFileDescriptor(int)+0x9c>
c00113c2:	a1 c4 e4 02 c0       	mov    eax,ds:0xc002e4c4
c00113c7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00113cd:	74 26                	je     c00113f5 <getFromFileDescriptor(int)+0x9c>
c00113cf:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00113d5:	83 f8 08             	cmp    eax,0x8
c00113d8:	77 09                	ja     c00113e3 <getFromFileDescriptor(int)+0x8a>
c00113da:	8b 04 85 a0 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b60]
c00113e1:	eb 12                	jmp    c00113f5 <getFromFileDescriptor(int)+0x9c>
c00113e3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00113e9:	83 fb 08             	cmp    ebx,0x8
c00113ec:	77 95                	ja     c0011383 <getFromFileDescriptor(int)+0x2a>
c00113ee:	8b 04 9d 60 e4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1ba0]
c00113f5:	83 c4 08             	add    esp,0x8
c00113f8:	5b                   	pop    ebx
c00113f9:	c3                   	ret    

c00113fa <__static_initialization_and_destruction_0(int, int)>:
c00113fa:	83 ec 0c             	sub    esp,0xc
c00113fd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011402:	75 34                	jne    c0011438 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011404:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001140c:	75 2a                	jne    c0011438 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001140e:	83 ec 0c             	sub    esp,0xc
c0011411:	68 d8 e4 02 c0       	push   0xc002e4d8
c0011416:	e8 39 75 01 00       	call   c0028954 <LinkedList<UnixFile>::LinkedList()>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	83 ec 04             	sub    esp,0x4
c0011421:	68 58 d1 02 c0       	push   0xc002d158
c0011426:	68 d8 e4 02 c0       	push   0xc002e4d8
c001142b:	68 52 89 02 c0       	push   0xc0028952
c0011430:	e8 ee 12 00 00       	call   c0012723 <__cxa_atexit>
c0011435:	83 c4 10             	add    esp,0x10
c0011438:	90                   	nop
c0011439:	83 c4 0c             	add    esp,0xc
c001143c:	c3                   	ret    

c001143d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001143d:	83 ec 0c             	sub    esp,0xc
c0011440:	83 ec 08             	sub    esp,0x8
c0011443:	68 ff ff 00 00       	push   0xffff
c0011448:	6a 01                	push   0x1
c001144a:	e8 ab ff ff ff       	call   c00113fa <__static_initialization_and_destruction_0(int, int)>
c001144f:	83 c4 10             	add    esp,0x10
c0011452:	83 c4 0c             	add    esp,0xc
c0011455:	c3                   	ret    

c0011456 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011456:	53                   	push   ebx
c0011457:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001145b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001145f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011465:	89 c8                	mov    eax,ecx
c0011467:	d1 e8                	shr    eax,1
c0011469:	03 05 28 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d328
c001146f:	83 e1 01             	and    ecx,0x1
c0011472:	8a 10                	mov    dl,BYTE PTR [eax]
c0011474:	75 09                	jne    c001147f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011476:	83 e2 f0             	and    edx,0xfffffff0
c0011479:	09 da                	or     edx,ebx
c001147b:	88 10                	mov    BYTE PTR [eax],dl
c001147d:	5b                   	pop    ebx
c001147e:	c3                   	ret    
c001147f:	c1 e3 04             	shl    ebx,0x4
c0011482:	83 e2 0f             	and    edx,0xf
c0011485:	09 da                	or     edx,ebx
c0011487:	88 10                	mov    BYTE PTR [eax],dl
c0011489:	5b                   	pop    ebx
c001148a:	c3                   	ret    

c001148b <Virt::getPageState(unsigned long)>:
c001148b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001148f:	8b 0d 28 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d328
c0011495:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001149b:	89 d0                	mov    eax,edx
c001149d:	d1 e8                	shr    eax,1
c001149f:	83 e2 01             	and    edx,0x1
c00114a2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00114a5:	75 04                	jne    c00114ab <Virt::getPageState(unsigned long)+0x20>
c00114a7:	83 e0 0f             	and    eax,0xf
c00114aa:	c3                   	ret    
c00114ab:	c0 e8 04             	shr    al,0x4
c00114ae:	c3                   	ret    

c00114af <Virt::allocateKernelVirtualPages(int)>:
c00114af:	55                   	push   ebp
c00114b0:	31 ed                	xor    ebp,ebp
c00114b2:	57                   	push   edi
c00114b3:	56                   	push   esi
c00114b4:	53                   	push   ebx
c00114b5:	31 db                	xor    ebx,ebx
c00114b7:	83 ec 1c             	sub    esp,0x1c
c00114ba:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114be:	8b 3d 24 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d324
c00114c4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00114c9:	57                   	push   edi
c00114ca:	e8 bc ff ff ff       	call   c001148b <Virt::getPageState(unsigned long)>
c00114cf:	5a                   	pop    edx
c00114d0:	84 c0                	test   al,al
c00114d2:	75 3a                	jne    c001150e <Virt::allocateKernelVirtualPages(int)+0x5f>
c00114d4:	85 db                	test   ebx,ebx
c00114d6:	75 02                	jne    c00114da <Virt::allocateKernelVirtualPages(int)+0x2b>
c00114d8:	89 fd                	mov    ebp,edi
c00114da:	43                   	inc    ebx
c00114db:	39 f3                	cmp    ebx,esi
c00114dd:	74 5a                	je     c0011539 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00114df:	47                   	inc    edi
c00114e0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00114e6:	76 31                	jbe    c0011519 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00114e8:	c7 05 24 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d324,0xc8000
c00114f2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00114f7:	75 28                	jne    c0011521 <Virt::allocateKernelVirtualPages(int)+0x72>
c00114f9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00114fe:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011503:	57                   	push   edi
c0011504:	e8 82 ff ff ff       	call   c001148b <Virt::getPageState(unsigned long)>
c0011509:	5a                   	pop    edx
c001150a:	84 c0                	test   al,al
c001150c:	74 c6                	je     c00114d4 <Virt::allocateKernelVirtualPages(int)+0x25>
c001150e:	31 db                	xor    ebx,ebx
c0011510:	47                   	inc    edi
c0011511:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011517:	77 cf                	ja     c00114e8 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011519:	89 3d 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,edi
c001151f:	eb a8                	jmp    c00114c9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011521:	83 ec 0c             	sub    esp,0xc
c0011524:	68 b8 a8 02 c0       	push   0xc002a8b8
c0011529:	e8 c1 8c 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c001152e:	8b 3d 24 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d324
c0011534:	83 c4 10             	add    esp,0x10
c0011537:	eb 90                	jmp    c00114c9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011539:	89 2d 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,ebp
c001153f:	4b                   	dec    ebx
c0011540:	74 5f                	je     c00115a1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011542:	85 f6                	test   esi,esi
c0011544:	74 3d                	je     c0011583 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011546:	89 e8                	mov    eax,ebp
c0011548:	31 db                	xor    ebx,ebx
c001154a:	8d 7e ff             	lea    edi,[esi-0x1]
c001154d:	eb 14                	jmp    c0011563 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001154f:	6a 01                	push   0x1
c0011551:	43                   	inc    ebx
c0011552:	50                   	push   eax
c0011553:	e8 fe fe ff ff       	call   c0011456 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011558:	58                   	pop    eax
c0011559:	39 f3                	cmp    ebx,esi
c001155b:	5a                   	pop    edx
c001155c:	74 25                	je     c0011583 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001155e:	a1 24 d3 02 c0       	mov    eax,ds:0xc002d324
c0011563:	8d 50 01             	lea    edx,[eax+0x1]
c0011566:	85 db                	test   ebx,ebx
c0011568:	89 15 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,edx
c001156e:	74 20                	je     c0011590 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011570:	39 df                	cmp    edi,ebx
c0011572:	75 db                	jne    c001154f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011574:	6a 03                	push   0x3
c0011576:	43                   	inc    ebx
c0011577:	50                   	push   eax
c0011578:	e8 d9 fe ff ff       	call   c0011456 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001157d:	59                   	pop    ecx
c001157e:	39 f3                	cmp    ebx,esi
c0011580:	58                   	pop    eax
c0011581:	75 db                	jne    c001155e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011583:	83 c4 1c             	add    esp,0x1c
c0011586:	89 e8                	mov    eax,ebp
c0011588:	5b                   	pop    ebx
c0011589:	c1 e0 0c             	shl    eax,0xc
c001158c:	5e                   	pop    esi
c001158d:	5f                   	pop    edi
c001158e:	5d                   	pop    ebp
c001158f:	c3                   	ret    
c0011590:	6a 02                	push   0x2
c0011592:	bb 01 00 00 00       	mov    ebx,0x1
c0011597:	50                   	push   eax
c0011598:	e8 b9 fe ff ff       	call   c0011456 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001159d:	58                   	pop    eax
c001159e:	5a                   	pop    edx
c001159f:	eb bd                	jmp    c001155e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115a1:	6a 04                	push   0x4
c00115a3:	8d 45 01             	lea    eax,[ebp+0x1]
c00115a6:	55                   	push   ebp
c00115a7:	a3 24 d3 02 c0       	mov    ds:0xc002d324,eax
c00115ac:	e8 a5 fe ff ff       	call   c0011456 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115b1:	59                   	pop    ecx
c00115b2:	89 e8                	mov    eax,ebp
c00115b4:	5b                   	pop    ebx
c00115b5:	c1 e0 0c             	shl    eax,0xc
c00115b8:	83 c4 1c             	add    esp,0x1c
c00115bb:	5b                   	pop    ebx
c00115bc:	5e                   	pop    esi
c00115bd:	5f                   	pop    edi
c00115be:	5d                   	pop    ebp
c00115bf:	c3                   	ret    

c00115c0 <Virt::freeSwapfilePage(unsigned long)>:
c00115c0:	53                   	push   ebx
c00115c1:	8b 15 ec e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4ec
c00115c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115cb:	b8 01 00 00 00       	mov    eax,0x1
c00115d0:	89 cb                	mov    ebx,ecx
c00115d2:	d3 e0                	shl    eax,cl
c00115d4:	c1 eb 05             	shr    ebx,0x5
c00115d7:	f7 d0                	not    eax
c00115d9:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00115dc:	5b                   	pop    ebx
c00115dd:	c3                   	ret    

c00115de <Virt::swapIDToSector(unsigned long)>:
c00115de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115e2:	0f af 05 2c d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d32c
c00115e9:	03 05 34 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d334
c00115ef:	c3                   	ret    

c00115f0 <Virt::allocateSwapfilePage()>:
c00115f0:	55                   	push   ebp
c00115f1:	31 d2                	xor    edx,edx
c00115f3:	57                   	push   edi
c00115f4:	56                   	push   esi
c00115f5:	53                   	push   ebx
c00115f6:	83 ec 0c             	sub    esp,0xc
c00115f9:	8b 0d 2c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d32c
c00115ff:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011604:	f7 f1                	div    ecx
c0011606:	39 0d 30 d3 02 c0    	cmp    DWORD PTR ds:0xc002d330,ecx
c001160c:	72 2d                	jb     c001163b <Virt::allocateSwapfilePage()+0x4b>
c001160e:	8b 35 ec e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4ec
c0011614:	8b 16                	mov    edx,DWORD PTR [esi]
c0011616:	f6 c2 01             	test   dl,0x1
c0011619:	74 3c                	je     c0011657 <Virt::allocateSwapfilePage()+0x67>
c001161b:	31 c9                	xor    ecx,ecx
c001161d:	bf 01 00 00 00       	mov    edi,0x1
c0011622:	eb 12                	jmp    c0011636 <Virt::allocateSwapfilePage()+0x46>
c0011624:	89 fd                	mov    ebp,edi
c0011626:	89 ca                	mov    edx,ecx
c0011628:	d3 e5                	shl    ebp,cl
c001162a:	c1 ea 05             	shr    edx,0x5
c001162d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011630:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011632:	85 ea                	test   edx,ebp
c0011634:	74 2a                	je     c0011660 <Virt::allocateSwapfilePage()+0x70>
c0011636:	41                   	inc    ecx
c0011637:	39 c8                	cmp    eax,ecx
c0011639:	77 e9                	ja     c0011624 <Virt::allocateSwapfilePage()+0x34>
c001163b:	83 ec 0c             	sub    esp,0xc
c001163e:	68 98 aa 02 c0       	push   0xc002aa98
c0011643:	e8 a7 8b 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0011648:	83 c4 10             	add    esp,0x10
c001164b:	31 c9                	xor    ecx,ecx
c001164d:	83 c4 0c             	add    esp,0xc
c0011650:	89 c8                	mov    eax,ecx
c0011652:	5b                   	pop    ebx
c0011653:	5e                   	pop    esi
c0011654:	5f                   	pop    edi
c0011655:	5d                   	pop    ebp
c0011656:	c3                   	ret    
c0011657:	89 f3                	mov    ebx,esi
c0011659:	bd 01 00 00 00       	mov    ebp,0x1
c001165e:	31 c9                	xor    ecx,ecx
c0011660:	09 ea                	or     edx,ebp
c0011662:	89 c8                	mov    eax,ecx
c0011664:	89 13                	mov    DWORD PTR [ebx],edx
c0011666:	83 c4 0c             	add    esp,0xc
c0011669:	5b                   	pop    ebx
c001166a:	5e                   	pop    esi
c001166b:	5f                   	pop    edi
c001166c:	5d                   	pop    ebp
c001166d:	c3                   	ret    

c001166e <Virt::virtualMemorySetup()>:
c001166e:	53                   	push   ebx
c001166f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011674:	6a 0f                	push   0xf
c0011676:	53                   	push   ebx
c0011677:	43                   	inc    ebx
c0011678:	e8 d9 fd ff ff       	call   c0011456 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001167d:	58                   	pop    eax
c001167e:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011684:	5a                   	pop    edx
c0011685:	75 ed                	jne    c0011674 <Virt::virtualMemorySetup()+0x6>
c0011687:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001168c:	6a 00                	push   0x0
c001168e:	53                   	push   ebx
c001168f:	43                   	inc    ebx
c0011690:	e8 c1 fd ff ff       	call   c0011456 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011695:	59                   	pop    ecx
c0011696:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001169c:	58                   	pop    eax
c001169d:	75 ed                	jne    c001168c <Virt::virtualMemorySetup()+0x1e>
c001169f:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00116a4:	6a 0f                	push   0xf
c00116a6:	53                   	push   ebx
c00116a7:	43                   	inc    ebx
c00116a8:	e8 a9 fd ff ff       	call   c0011456 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116ad:	58                   	pop    eax
c00116ae:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00116b4:	5a                   	pop    edx
c00116b5:	75 ed                	jne    c00116a4 <Virt::virtualMemorySetup()+0x36>
c00116b7:	5b                   	pop    ebx
c00116b8:	c3                   	ret    

c00116b9 <Virt::setupPageSwapping(int)>:
c00116b9:	53                   	push   ebx
c00116ba:	83 ec 0c             	sub    esp,0xc
c00116bd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00116c1:	a1 88 e9 02 c0       	mov    eax,ds:0xc002e988
c00116c6:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00116cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00116ce:	53                   	push   ebx
c00116cf:	c1 e3 0b             	shl    ebx,0xb
c00116d2:	68 af aa 02 c0       	push   0xc002aaaf
c00116d7:	50                   	push   eax
c00116d8:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00116db:	89 1d 30 d3 02 c0    	mov    DWORD PTR ds:0xc002d330,ebx
c00116e1:	c6 05 38 d3 02 c0 43 	mov    BYTE PTR ds:0xc002d338,0x43
c00116e8:	c1 eb 08             	shr    ebx,0x8
c00116eb:	a3 34 d3 02 c0       	mov    ds:0xc002d334,eax
c00116f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116f3:	c7 05 2c d3 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d32c,0x8
c00116fd:	e8 27 e1 ff ff       	call   c000f829 <malloc>
c0011702:	83 c4 0c             	add    esp,0xc
c0011705:	89 c1                	mov    ecx,eax
c0011707:	a3 ec e4 02 c0       	mov    ds:0xc002e4ec,eax
c001170c:	31 d2                	xor    edx,edx
c001170e:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011713:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011719:	c1 e8 05             	shr    eax,0x5
c001171c:	50                   	push   eax
c001171d:	6a 00                	push   0x0
c001171f:	51                   	push   ecx
c0011720:	e8 2b f0 fe ff       	call   c0000750 <memset>
c0011725:	83 c4 18             	add    esp,0x18
c0011728:	5b                   	pop    ebx
c0011729:	c3                   	ret    

c001172a <VAS::VAS()>:
c001172a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001172e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011735:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011739:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011744:	a3 f0 e4 02 c0       	mov    ds:0xc002e4f0,eax
c0011749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001174d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011755:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001175c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011763:	90                   	nop
c0011764:	c3                   	ret    
c0011765:	90                   	nop

c0011766 <VAS::VAS(VAS*)>:
c0011766:	83 ec 0c             	sub    esp,0xc
c0011769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001176d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011778:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001177f:	83 ec 0c             	sub    esp,0xc
c0011782:	68 d8 a8 02 c0       	push   0xc002a8d8
c0011787:	e8 63 8a 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c001178c:	83 c4 10             	add    esp,0x10
c001178f:	90                   	nop
c0011790:	83 c4 0c             	add    esp,0xc
c0011793:	c3                   	ret    

c0011794 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011798:	89 c2                	mov    edx,eax
c001179a:	c1 e8 0a             	shr    eax,0xa
c001179d:	c1 ea 16             	shr    edx,0x16
c00117a0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00117a5:	19 c9                	sbb    ecx,ecx
c00117a7:	c1 e2 0c             	shl    edx,0xc
c00117aa:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00117b0:	25 fc 0f 00 00       	and    eax,0xffc
c00117b5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00117bc:	01 d0                	add    eax,edx
c00117be:	c3                   	ret    
c00117bf:	90                   	nop

c00117c0 <VAS::getPageTableEntry(unsigned long)>:
c00117c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00117c4:	89 ca                	mov    edx,ecx
c00117c6:	c1 e9 0a             	shr    ecx,0xa
c00117c9:	c1 ea 16             	shr    edx,0x16
c00117cc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00117d2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00117d8:	c1 e0 0c             	shl    eax,0xc
c00117db:	8d 04 08             	lea    eax,[eax+ecx*1]
c00117de:	c3                   	ret    

c00117df <Virt::freeKernelVirtualPages(unsigned long)>:
c00117df:	57                   	push   edi
c00117e0:	56                   	push   esi
c00117e1:	be 01 00 00 00       	mov    esi,0x1
c00117e6:	53                   	push   ebx
c00117e7:	83 ec 10             	sub    esp,0x10
c00117ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00117ee:	c1 eb 0c             	shr    ebx,0xc
c00117f1:	eb 3f                	jmp    c0011832 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00117f3:	83 ec 08             	sub    esp,0x8
c00117f6:	57                   	push   edi
c00117f7:	ff 35 f0 e4 02 c0    	push   DWORD PTR ds:0xc002e4f0
c00117fd:	e8 be ff ff ff       	call   c00117c0 <VAS::getPageTableEntry(unsigned long)>
c0011802:	83 c4 10             	add    esp,0x10
c0011805:	8b 00                	mov    eax,DWORD PTR [eax]
c0011807:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001180b:	f6 c4 04             	test   ah,0x4
c001180e:	75 5f                	jne    c001186f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011810:	80 fa 04             	cmp    dl,0x4
c0011813:	74 78                	je     c001188d <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011815:	80 fa 02             	cmp    dl,0x2
c0011818:	0f 84 88 00 00 00    	je     c00118a6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001181e:	80 fa 03             	cmp    dl,0x3
c0011821:	0f 84 ad 00 00 00    	je     c00118d4 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011827:	fe ca                	dec    dl
c0011829:	0f 84 92 00 00 00    	je     c00118c1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001182f:	43                   	inc    ebx
c0011830:	31 f6                	xor    esi,esi
c0011832:	53                   	push   ebx
c0011833:	89 df                	mov    edi,ebx
c0011835:	e8 51 fc ff ff       	call   c001148b <Virt::getPageState(unsigned long)>
c001183a:	c1 e7 0c             	shl    edi,0xc
c001183d:	59                   	pop    ecx
c001183e:	84 c0                	test   al,al
c0011840:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011844:	75 ad                	jne    c00117f3 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011846:	83 ec 0c             	sub    esp,0xc
c0011849:	68 c6 aa 02 c0       	push   0xc002aac6
c001184e:	e8 9c 89 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0011853:	58                   	pop    eax
c0011854:	5a                   	pop    edx
c0011855:	57                   	push   edi
c0011856:	ff 35 f0 e4 02 c0    	push   DWORD PTR ds:0xc002e4f0
c001185c:	e8 5f ff ff ff       	call   c00117c0 <VAS::getPageTableEntry(unsigned long)>
c0011861:	83 c4 10             	add    esp,0x10
c0011864:	8b 00                	mov    eax,DWORD PTR [eax]
c0011866:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001186a:	f6 c4 04             	test   ah,0x4
c001186d:	74 c0                	je     c001182f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001186f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011873:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011878:	83 ec 0c             	sub    esp,0xc
c001187b:	50                   	push   eax
c001187c:	e8 33 e3 ff ff       	call   c000fbb4 <Phys::freePage(unsigned long)>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011888:	80 fa 04             	cmp    dl,0x4
c001188b:	75 88                	jne    c0011815 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001188d:	89 f0                	mov    eax,esi
c001188f:	84 c0                	test   al,al
c0011891:	75 47                	jne    c00118da <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011893:	c7 44 24 20 fc a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a8fc
c001189b:	83 c4 10             	add    esp,0x10
c001189e:	5b                   	pop    ebx
c001189f:	5e                   	pop    esi
c00118a0:	5f                   	pop    edi
c00118a1:	e9 49 89 00 00       	jmp    c001a1ef <Krnl::panic(char const*)>
c00118a6:	89 f0                	mov    eax,esi
c00118a8:	84 c0                	test   al,al
c00118aa:	75 15                	jne    c00118c1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00118ac:	83 ec 0c             	sub    esp,0xc
c00118af:	68 e2 aa 02 c0       	push   0xc002aae2
c00118b4:	e8 36 89 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c00118b9:	83 c4 10             	add    esp,0x10
c00118bc:	e9 6e ff ff ff       	jmp    c001182f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00118c1:	83 ec 08             	sub    esp,0x8
c00118c4:	6a 00                	push   0x0
c00118c6:	53                   	push   ebx
c00118c7:	e8 8a fb ff ff       	call   c0011456 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118cc:	83 c4 10             	add    esp,0x10
c00118cf:	e9 5b ff ff ff       	jmp    c001182f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00118d4:	89 f0                	mov    eax,esi
c00118d6:	84 c0                	test   al,al
c00118d8:	75 15                	jne    c00118ef <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00118da:	83 ec 08             	sub    esp,0x8
c00118dd:	6a 00                	push   0x0
c00118df:	53                   	push   ebx
c00118e0:	e8 71 fb ff ff       	call   c0011456 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118e5:	83 c4 10             	add    esp,0x10
c00118e8:	83 c4 10             	add    esp,0x10
c00118eb:	5b                   	pop    ebx
c00118ec:	5e                   	pop    esi
c00118ed:	5f                   	pop    edi
c00118ee:	c3                   	ret    
c00118ef:	c7 44 24 20 fe aa 02 c0 	mov    DWORD PTR [esp+0x20],0xc002aafe
c00118f7:	83 c4 10             	add    esp,0x10
c00118fa:	5b                   	pop    ebx
c00118fb:	5e                   	pop    esi
c00118fc:	5f                   	pop    edi
c00118fd:	e9 ed 88 00 00       	jmp    c001a1ef <Krnl::panic(char const*)>

c0011902 <VAS::freeAllocatedPages(unsigned long)>:
c0011902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001190a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001190e:	74 09                	je     c0011919 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011910:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011914:	e9 c6 fe ff ff       	jmp    c00117df <Virt::freeKernelVirtualPages(unsigned long)>
c0011919:	c7 44 24 04 20 a9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a920
c0011921:	e9 5b 0f 00 00       	jmp    c0012881 <Dbg::kprintf(char const*, ...)>

c0011926 <VAS::virtualToPhysical(unsigned long)>:
c0011926:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001192a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001192e:	e8 8d fe ff ff       	call   c00117c0 <VAS::getPageTableEntry(unsigned long)>
c0011933:	5a                   	pop    edx
c0011934:	8b 00                	mov    eax,DWORD PTR [eax]
c0011936:	59                   	pop    ecx
c0011937:	25 00 f0 ff ff       	and    eax,0xfffff000
c001193c:	c3                   	ret    
c001193d:	90                   	nop

c001193e <VAS::reflagRange(unsigned long, int, int, int)>:
c001193e:	55                   	push   ebp
c001193f:	57                   	push   edi
c0011940:	56                   	push   esi
c0011941:	53                   	push   ebx
c0011942:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011946:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001194a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001194e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011952:	85 db                	test   ebx,ebx
c0011954:	7e 22                	jle    c0011978 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011956:	c1 e3 0c             	shl    ebx,0xc
c0011959:	01 f3                	add    ebx,esi
c001195b:	56                   	push   esi
c001195c:	81 c6 00 10 00 00    	add    esi,0x1000
c0011962:	55                   	push   ebp
c0011963:	e8 58 fe ff ff       	call   c00117c0 <VAS::getPageTableEntry(unsigned long)>
c0011968:	5a                   	pop    edx
c0011969:	59                   	pop    ecx
c001196a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001196c:	21 f9                	and    ecx,edi
c001196e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011972:	39 f3                	cmp    ebx,esi
c0011974:	89 08                	mov    DWORD PTR [eax],ecx
c0011976:	75 e3                	jne    c001195b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011978:	5b                   	pop    ebx
c0011979:	5e                   	pop    esi
c001197a:	5f                   	pop    edi
c001197b:	5d                   	pop    ebp
c001197c:	c3                   	ret    
c001197d:	90                   	nop

c001197e <VAS::setToWriteCombining(unsigned long, int)>:
c001197e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0011983:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011989:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011990:	75 01                	jne    c0011993 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011992:	c3                   	ret    
c0011993:	68 80 00 00 00       	push   0x80
c0011998:	6a ff                	push   0xffffffff
c001199a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001199e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00119a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00119a6:	e8 93 ff ff ff       	call   c001193e <VAS::reflagRange(unsigned long, int, int, int)>
c00119ab:	83 c4 14             	add    esp,0x14
c00119ae:	c3                   	ret    
c00119af:	90                   	nop

c00119b0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00119b0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00119b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119b9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00119bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119c0:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00119c3:	19 c0                	sbb    eax,eax
c00119c5:	83 ca 03             	or     edx,0x3
c00119c8:	83 e0 fc             	and    eax,0xfffffffc
c00119cb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00119d2:	0f 20 d8             	mov    eax,cr3
c00119d5:	0f 22 d8             	mov    cr3,eax
c00119d8:	c3                   	ret    
c00119d9:	90                   	nop

c00119da <VAS::~VAS()>:
c00119da:	83 ec 2c             	sub    esp,0x2c
c00119dd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00119e5:	fa                   	cli    
c00119e6:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c00119eb:	40                   	inc    eax
c00119ec:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c00119f1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00119f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00119f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119fb:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011a01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011a05:	6a 01                	push   0x1
c0011a07:	50                   	push   eax
c0011a08:	e8 a3 ff ff ff       	call   c00119b0 <VAS::mapOtherVASIn(bool, VAS*)>
c0011a0d:	83 c4 0c             	add    esp,0xc
c0011a10:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011a18:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011a20:	0f 8f d4 00 00 00    	jg     c0011afa <VAS::~VAS()+0x120>
c0011a26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011a31:	c1 e2 02             	shl    edx,0x2
c0011a34:	01 d0                	add    eax,edx
c0011a36:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a40:	83 e0 01             	and    eax,0x1
c0011a43:	0f 84 a8 00 00 00    	je     c0011af1 <VAS::~VAS()+0x117>
c0011a49:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011a51:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011a59:	7f 72                	jg     c0011acd <VAS::~VAS()+0xf3>
c0011a5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011a5f:	c1 e0 0a             	shl    eax,0xa
c0011a62:	89 c2                	mov    edx,eax
c0011a64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a68:	01 d0                	add    eax,edx
c0011a6a:	c1 e0 0c             	shl    eax,0xc
c0011a6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a71:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011a76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a78:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a7b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011a81:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011a85:	6a 01                	push   0x1
c0011a87:	50                   	push   eax
c0011a88:	e8 07 fd ff ff       	call   c0011794 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011a8d:	83 c4 0c             	add    esp,0xc
c0011a90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aa2:	25 01 04 00 00       	and    eax,0x401
c0011aa7:	3d 01 04 00 00       	cmp    eax,0x401
c0011aac:	75 19                	jne    c0011ac7 <VAS::~VAS()+0xed>
c0011aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ab2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ab7:	83 ec 0c             	sub    esp,0xc
c0011aba:	50                   	push   eax
c0011abb:	e8 f4 e0 ff ff       	call   c000fbb4 <Phys::freePage(unsigned long)>
c0011ac0:	83 c4 10             	add    esp,0x10
c0011ac3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ac7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011acb:	eb 84                	jmp    c0011a51 <VAS::~VAS()+0x77>
c0011acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ad1:	25 00 04 00 00       	and    eax,0x400
c0011ad6:	74 19                	je     c0011af1 <VAS::~VAS()+0x117>
c0011ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011adc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ae1:	83 ec 0c             	sub    esp,0xc
c0011ae4:	50                   	push   eax
c0011ae5:	e8 ca e0 ff ff       	call   c000fbb4 <Phys::freePage(unsigned long)>
c0011aea:	83 c4 10             	add    esp,0x10
c0011aed:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011af1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011af5:	e9 1e ff ff ff       	jmp    c0011a18 <VAS::~VAS()+0x3e>
c0011afa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011afe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011b01:	83 ec 0c             	sub    esp,0xc
c0011b04:	50                   	push   eax
c0011b05:	e8 d5 fc ff ff       	call   c00117df <Virt::freeKernelVirtualPages(unsigned long)>
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b11:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011b14:	83 ec 0c             	sub    esp,0xc
c0011b17:	50                   	push   eax
c0011b18:	e8 97 e0 ff ff       	call   c000fbb4 <Phys::freePage(unsigned long)>
c0011b1d:	83 c4 10             	add    esp,0x10
c0011b20:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011b24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b28:	c1 e0 02             	shl    eax,0x2
c0011b2b:	83 ec 08             	sub    esp,0x8
c0011b2e:	50                   	push   eax
c0011b2f:	68 44 a9 02 c0       	push   0xc002a944
c0011b34:	e8 48 0d 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0011b39:	83 c4 10             	add    esp,0x10
c0011b3c:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c0011b41:	48                   	dec    eax
c0011b42:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c0011b47:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c0011b4c:	85 c0                	test   eax,eax
c0011b4e:	75 01                	jne    c0011b51 <VAS::~VAS()+0x177>
c0011b50:	fb                   	sti    
c0011b51:	90                   	nop
c0011b52:	83 c4 2c             	add    esp,0x2c
c0011b55:	c3                   	ret    

c0011b56 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011b56:	55                   	push   ebp
c0011b57:	57                   	push   edi
c0011b58:	56                   	push   esi
c0011b59:	53                   	push   ebx
c0011b5a:	83 ec 1c             	sub    esp,0x1c
c0011b5d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011b61:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b65:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011b6b:	77 08                	ja     c0011b75 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011b6d:	0f 20 d8             	mov    eax,cr3
c0011b70:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011b73:	75 47                	jne    c0011bbc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011b75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b79:	09 d8                	or     eax,ebx
c0011b7b:	a9 ff 0f 00 00       	test   eax,0xfff
c0011b80:	75 57                	jne    c0011bd9 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011b82:	89 de                	mov    esi,ebx
c0011b84:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011b87:	c1 ee 16             	shr    esi,0x16
c0011b8a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011b91:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011b95:	74 54                	je     c0011beb <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011b97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b9b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011ba1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011ba5:	c1 e6 0c             	shl    esi,0xc
c0011ba8:	c1 eb 0a             	shr    ebx,0xa
c0011bab:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011bb1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011bb4:	83 c4 1c             	add    esp,0x1c
c0011bb7:	5b                   	pop    ebx
c0011bb8:	5e                   	pop    esi
c0011bb9:	5f                   	pop    edi
c0011bba:	5d                   	pop    ebp
c0011bbb:	c3                   	ret    
c0011bbc:	83 ec 0c             	sub    esp,0xc
c0011bbf:	68 64 a9 02 c0       	push   0xc002a964
c0011bc4:	e8 b8 0c 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0011bc9:	83 c4 10             	add    esp,0x10
c0011bcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bd0:	09 d8                	or     eax,ebx
c0011bd2:	a9 ff 0f 00 00       	test   eax,0xfff
c0011bd7:	74 a9                	je     c0011b82 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011bd9:	83 ec 0c             	sub    esp,0xc
c0011bdc:	68 cc a9 02 c0       	push   0xc002a9cc
c0011be1:	e8 09 86 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0011be6:	83 c4 10             	add    esp,0x10
c0011be9:	eb 97                	jmp    c0011b82 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011beb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011bef:	e8 31 e0 ff ff       	call   c000fc25 <Phys::allocatePage()>
c0011bf4:	83 ec 0c             	sub    esp,0xc
c0011bf7:	89 c5                	mov    ebp,eax
c0011bf9:	8b 0d f0 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e4f0
c0011bff:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011c03:	6a 01                	push   0x1
c0011c05:	e8 a5 f8 ff ff       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c0011c0a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011c11:	6a 01                	push   0x1
c0011c13:	50                   	push   eax
c0011c14:	55                   	push   ebp
c0011c15:	81 cd 07 04 00 00    	or     ebp,0x407
c0011c1b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011c1f:	51                   	push   ecx
c0011c20:	e8 27 02 00 00       	call   c0011e4c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c25:	83 c4 1c             	add    esp,0x1c
c0011c28:	68 00 10 00 00       	push   0x1000
c0011c2d:	6a 00                	push   0x0
c0011c2f:	50                   	push   eax
c0011c30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011c34:	e8 17 eb fe ff       	call   c0000750 <memset>
c0011c39:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011c3d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011c40:	e8 9a fb ff ff       	call   c00117df <Virt::freeKernelVirtualPages(unsigned long)>
c0011c45:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c49:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011c4c:	83 c4 10             	add    esp,0x10
c0011c4f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011c52:	e9 40 ff ff ff       	jmp    c0011b97 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011c57:	90                   	nop

c0011c58 <VAS::allocatePages(int, int)>:
c0011c58:	55                   	push   ebp
c0011c59:	57                   	push   edi
c0011c5a:	56                   	push   esi
c0011c5b:	53                   	push   ebx
c0011c5c:	83 ec 1c             	sub    esp,0x1c
c0011c5f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c63:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0011c68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c6e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c74:	83 e0 01             	and    eax,0x1
c0011c77:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011c7b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c7f:	0f 85 cc 00 00 00    	jne    c0011d51 <VAS::allocatePages(int, int)+0xf9>
c0011c85:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011c88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c8c:	85 c0                	test   eax,eax
c0011c8e:	0f 84 a1 00 00 00    	je     c0011d35 <VAS::allocatePages(int, int)+0xdd>
c0011c94:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011c98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c9c:	c1 e6 0c             	shl    esi,0xc
c0011c9f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011ca3:	85 c0                	test   eax,eax
c0011ca5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011ca8:	7e 33                	jle    c0011cdd <VAS::allocatePages(int, int)+0x85>
c0011caa:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011cae:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011cb2:	81 cd 00 04 00 00    	or     ebp,0x400
c0011cb8:	e8 68 df ff ff       	call   c000fc25 <Phys::allocatePage()>
c0011cbd:	55                   	push   ebp
c0011cbe:	53                   	push   ebx
c0011cbf:	50                   	push   eax
c0011cc0:	57                   	push   edi
c0011cc1:	e8 90 fe ff ff       	call   c0011b56 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cc6:	83 c4 10             	add    esp,0x10
c0011cc9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cce:	74 03                	je     c0011cd3 <VAS::allocatePages(int, int)+0x7b>
c0011cd0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cd3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cd9:	39 de                	cmp    esi,ebx
c0011cdb:	75 db                	jne    c0011cb8 <VAS::allocatePages(int, int)+0x60>
c0011cdd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ce2:	75 12                	jne    c0011cf6 <VAS::allocatePages(int, int)+0x9e>
c0011ce4:	0f 20 d8             	mov    eax,cr3
c0011ce7:	0f 22 d8             	mov    cr3,eax
c0011cea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cee:	83 c4 1c             	add    esp,0x1c
c0011cf1:	5b                   	pop    ebx
c0011cf2:	5e                   	pop    esi
c0011cf3:	5f                   	pop    edi
c0011cf4:	5d                   	pop    ebp
c0011cf5:	c3                   	ret    
c0011cf6:	c1 ee 0a             	shr    esi,0xa
c0011cf9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011cfd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011d03:	c1 eb 0a             	shr    ebx,0xa
c0011d06:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011d0c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d12:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d18:	39 c3                	cmp    ebx,eax
c0011d1a:	77 ce                	ja     c0011cea <VAS::allocatePages(int, int)+0x92>
c0011d1c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d1f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d25:	39 d8                	cmp    eax,ebx
c0011d27:	73 f3                	jae    c0011d1c <VAS::allocatePages(int, int)+0xc4>
c0011d29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d2d:	83 c4 1c             	add    esp,0x1c
c0011d30:	5b                   	pop    ebx
c0011d31:	5e                   	pop    esi
c0011d32:	5f                   	pop    edi
c0011d33:	5d                   	pop    ebp
c0011d34:	c3                   	ret    
c0011d35:	83 ec 0c             	sub    esp,0xc
c0011d38:	68 f0 a9 02 c0       	push   0xc002a9f0
c0011d3d:	e8 ad 84 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0011d42:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011d45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d49:	83 c4 10             	add    esp,0x10
c0011d4c:	e9 43 ff ff ff       	jmp    c0011c94 <VAS::allocatePages(int, int)+0x3c>
c0011d51:	83 ec 0c             	sub    esp,0xc
c0011d54:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011d58:	e8 52 f7 ff ff       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c0011d5d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d61:	83 c4 10             	add    esp,0x10
c0011d64:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011d69:	0f 87 9b 00 00 00    	ja     c0011e0a <VAS::allocatePages(int, int)+0x1b2>
c0011d6f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d73:	85 d2                	test   edx,edx
c0011d75:	7e 3c                	jle    c0011db3 <VAS::allocatePages(int, int)+0x15b>
c0011d77:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d7b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011d7f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011d83:	c1 e5 0c             	shl    ebp,0xc
c0011d86:	81 ce 00 04 00 00    	or     esi,0x400
c0011d8c:	01 dd                	add    ebp,ebx
c0011d8e:	e8 92 de ff ff       	call   c000fc25 <Phys::allocatePage()>
c0011d93:	56                   	push   esi
c0011d94:	53                   	push   ebx
c0011d95:	50                   	push   eax
c0011d96:	57                   	push   edi
c0011d97:	e8 ba fd ff ff       	call   c0011b56 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011da4:	74 03                	je     c0011da9 <VAS::allocatePages(int, int)+0x151>
c0011da6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011da9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011daf:	39 dd                	cmp    ebp,ebx
c0011db1:	75 db                	jne    c0011d8e <VAS::allocatePages(int, int)+0x136>
c0011db3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011db8:	0f 84 26 ff ff ff    	je     c0011ce4 <VAS::allocatePages(int, int)+0x8c>
c0011dbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011dc2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dc6:	89 d3                	mov    ebx,edx
c0011dc8:	c1 e0 0c             	shl    eax,0xc
c0011dcb:	c1 eb 0a             	shr    ebx,0xa
c0011dce:	01 d0                	add    eax,edx
c0011dd0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011dd6:	c1 e8 0a             	shr    eax,0xa
c0011dd9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ddf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011de4:	2d 00 00 40 00       	sub    eax,0x400000
c0011de9:	39 c3                	cmp    ebx,eax
c0011deb:	0f 87 f9 fe ff ff    	ja     c0011cea <VAS::allocatePages(int, int)+0x92>
c0011df1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011df4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011dfa:	39 d8                	cmp    eax,ebx
c0011dfc:	73 f3                	jae    c0011df1 <VAS::allocatePages(int, int)+0x199>
c0011dfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e02:	83 c4 1c             	add    esp,0x1c
c0011e05:	5b                   	pop    ebx
c0011e06:	5e                   	pop    esi
c0011e07:	5f                   	pop    edi
c0011e08:	5d                   	pop    ebp
c0011e09:	c3                   	ret    
c0011e0a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0011e0f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e15:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011e1c:	0f 84 4d ff ff ff    	je     c0011d6f <VAS::allocatePages(int, int)+0x117>
c0011e22:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011e2a:	e9 40 ff ff ff       	jmp    c0011d6f <VAS::allocatePages(int, int)+0x117>
c0011e2f:	90                   	nop

c0011e30 <VAS::setCPUSpecific(unsigned long)>:
c0011e30:	83 ec 0c             	sub    esp,0xc
c0011e33:	6a 05                	push   0x5
c0011e35:	68 00 00 40 c2       	push   0xc2400000
c0011e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e42:	e8 0f fd ff ff       	call   c0011b56 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e47:	83 c4 1c             	add    esp,0x1c
c0011e4a:	c3                   	ret    
c0011e4b:	90                   	nop

c0011e4c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011e4c:	55                   	push   ebp
c0011e4d:	57                   	push   edi
c0011e4e:	56                   	push   esi
c0011e4f:	53                   	push   ebx
c0011e50:	83 ec 1c             	sub    esp,0x1c
c0011e53:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0011e58:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e62:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011e66:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e6c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011e70:	83 e0 01             	and    eax,0x1
c0011e73:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e7b:	85 c0                	test   eax,eax
c0011e7d:	7e 39                	jle    c0011eb8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011e7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e83:	89 f3                	mov    ebx,esi
c0011e85:	c1 e0 0c             	shl    eax,0xc
c0011e88:	01 f0                	add    eax,esi
c0011e8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e8e:	55                   	push   ebp
c0011e8f:	53                   	push   ebx
c0011e90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e94:	29 f0                	sub    eax,esi
c0011e96:	01 d8                	add    eax,ebx
c0011e98:	50                   	push   eax
c0011e99:	57                   	push   edi
c0011e9a:	e8 b7 fc ff ff       	call   c0011b56 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e9f:	83 c4 10             	add    esp,0x10
c0011ea2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ea7:	74 03                	je     c0011eac <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011ea9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011eac:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011eb2:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011eb6:	75 d6                	jne    c0011e8e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011eb8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ebd:	75 10                	jne    c0011ecf <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011ebf:	0f 20 d8             	mov    eax,cr3
c0011ec2:	0f 22 d8             	mov    cr3,eax
c0011ec5:	83 c4 1c             	add    esp,0x1c
c0011ec8:	89 f0                	mov    eax,esi
c0011eca:	5b                   	pop    ebx
c0011ecb:	5e                   	pop    esi
c0011ecc:	5f                   	pop    edi
c0011ecd:	5d                   	pop    ebp
c0011ece:	c3                   	ret    
c0011ecf:	89 f3                	mov    ebx,esi
c0011ed1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ed5:	c1 eb 0a             	shr    ebx,0xa
c0011ed8:	c1 e0 0c             	shl    eax,0xc
c0011edb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ee1:	01 f0                	add    eax,esi
c0011ee3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ee9:	c1 e8 0a             	shr    eax,0xa
c0011eec:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ef1:	2d 00 00 40 00       	sub    eax,0x400000
c0011ef6:	39 c3                	cmp    ebx,eax
c0011ef8:	77 cb                	ja     c0011ec5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011efa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011efd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f03:	39 d8                	cmp    eax,ebx
c0011f05:	73 f3                	jae    c0011efa <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011f07:	83 c4 1c             	add    esp,0x1c
c0011f0a:	89 f0                	mov    eax,esi
c0011f0c:	5b                   	pop    ebx
c0011f0d:	5e                   	pop    esi
c0011f0e:	5f                   	pop    edi
c0011f0f:	5d                   	pop    ebp
c0011f10:	c3                   	ret    
c0011f11:	90                   	nop

c0011f12 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011f12:	55                   	push   ebp
c0011f13:	57                   	push   edi
c0011f14:	56                   	push   esi
c0011f15:	53                   	push   ebx
c0011f16:	83 ec 1c             	sub    esp,0x1c
c0011f19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f1d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f21:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011f25:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011f29:	a9 ff 0f 00 00       	test   eax,0xfff
c0011f2e:	75 4a                	jne    c0011f7a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011f30:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011f34:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f37:	c1 eb 16             	shr    ebx,0x16
c0011f3a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011f41:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011f45:	74 4d                	je     c0011f94 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011f47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f4b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011f4f:	c1 e8 0a             	shr    eax,0xa
c0011f52:	80 fa 01             	cmp    dl,0x1
c0011f55:	19 d2                	sbb    edx,edx
c0011f57:	c1 e3 0c             	shl    ebx,0xc
c0011f5a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011f5e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011f64:	25 fc 0f 00 00       	and    eax,0xffc
c0011f69:	01 d8                	add    eax,ebx
c0011f6b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011f72:	83 c4 1c             	add    esp,0x1c
c0011f75:	5b                   	pop    ebx
c0011f76:	5e                   	pop    esi
c0011f77:	5f                   	pop    edi
c0011f78:	5d                   	pop    ebp
c0011f79:	c3                   	ret    
c0011f7a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011f7e:	83 ec 0c             	sub    esp,0xc
c0011f81:	68 1c aa 02 c0       	push   0xc002aa1c
c0011f86:	e8 64 82 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0011f8b:	83 c4 10             	add    esp,0x10
c0011f8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f92:	eb 9c                	jmp    c0011f30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011f94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f98:	e8 88 dc ff ff       	call   c000fc25 <Phys::allocatePage()>
c0011f9d:	83 ec 0c             	sub    esp,0xc
c0011fa0:	89 c5                	mov    ebp,eax
c0011fa2:	8b 0d f0 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e4f0
c0011fa8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011fac:	6a 01                	push   0x1
c0011fae:	e8 fc f4 ff ff       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c0011fb3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011fba:	6a 01                	push   0x1
c0011fbc:	50                   	push   eax
c0011fbd:	55                   	push   ebp
c0011fbe:	81 cd 07 04 00 00    	or     ebp,0x407
c0011fc4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011fc8:	51                   	push   ecx
c0011fc9:	e8 7e fe ff ff       	call   c0011e4c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011fce:	83 c4 1c             	add    esp,0x1c
c0011fd1:	68 00 10 00 00       	push   0x1000
c0011fd6:	6a 00                	push   0x0
c0011fd8:	50                   	push   eax
c0011fd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fdd:	e8 6e e7 fe ff       	call   c0000750 <memset>
c0011fe2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011fe6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011fe9:	e8 f1 f7 ff ff       	call   c00117df <Virt::freeKernelVirtualPages(unsigned long)>
c0011fee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ff1:	83 c4 10             	add    esp,0x10
c0011ff4:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011ff7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ffb:	e9 47 ff ff ff       	jmp    c0011f47 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012000 <VAS::VAS(bool)>:
c0012000:	53                   	push   ebx
c0012001:	83 ec 28             	sub    esp,0x28
c0012004:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012008:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001200c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012010:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012017:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001201b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012026:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001202a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001202d:	e8 f3 db ff ff       	call   c000fc25 <Phys::allocatePage()>
c0012032:	89 c2                	mov    edx,eax
c0012034:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012038:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001203b:	8b 1d f0 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4f0
c0012041:	83 ec 0c             	sub    esp,0xc
c0012044:	6a 01                	push   0x1
c0012046:	e8 64 f4 ff ff       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c001204b:	83 c4 10             	add    esp,0x10
c001204e:	89 c2                	mov    edx,eax
c0012050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012054:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012057:	83 ec 0c             	sub    esp,0xc
c001205a:	6a 03                	push   0x3
c001205c:	6a 01                	push   0x1
c001205e:	52                   	push   edx
c001205f:	50                   	push   eax
c0012060:	53                   	push   ebx
c0012061:	e8 e6 fd ff ff       	call   c0011e4c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012066:	83 c4 20             	add    esp,0x20
c0012069:	89 c2                	mov    edx,eax
c001206b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001206f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012072:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001207a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012082:	7f 1c                	jg     c00120a0 <VAS::VAS(bool)+0xa0>
c0012084:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012088:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001208b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001208f:	c1 e2 02             	shl    edx,0x2
c0012092:	01 d0                	add    eax,edx
c0012094:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001209a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001209e:	eb da                	jmp    c001207a <VAS::VAS(bool)+0x7a>
c00120a0:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00120a8:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00120b0:	7f 7a                	jg     c001212c <VAS::VAS(bool)+0x12c>
c00120b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120b6:	2d 00 02 00 00       	sub    eax,0x200
c00120bb:	c1 e0 0c             	shl    eax,0xc
c00120be:	83 c8 03             	or     eax,0x3
c00120c1:	89 c2                	mov    edx,eax
c00120c3:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00120c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120ce:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00120d4:	83 e0 10             	and    eax,0x10
c00120d7:	84 c0                	test   al,al
c00120d9:	74 07                	je     c00120e2 <VAS::VAS(bool)+0xe2>
c00120db:	b8 00 01 00 00       	mov    eax,0x100
c00120e0:	eb 05                	jmp    c00120e7 <VAS::VAS(bool)+0xe7>
c00120e2:	b8 00 00 00 00       	mov    eax,0x0
c00120e7:	09 d0                	or     eax,edx
c00120e9:	89 c1                	mov    ecx,eax
c00120eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120f6:	c1 e2 02             	shl    edx,0x2
c00120f9:	01 d0                	add    eax,edx
c00120fb:	89 ca                	mov    edx,ecx
c00120fd:	89 10                	mov    DWORD PTR [eax],edx
c00120ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012103:	2d 40 03 00 00       	sub    eax,0x340
c0012108:	83 f8 7f             	cmp    eax,0x7f
c001210b:	77 16                	ja     c0012123 <VAS::VAS(bool)+0x123>
c001210d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012111:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012114:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012118:	c1 e2 02             	shl    edx,0x2
c001211b:	01 d0                	add    eax,edx
c001211d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012123:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012127:	e9 7c ff ff ff       	jmp    c00120a8 <VAS::VAS(bool)+0xa8>
c001212c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012137:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001213d:	83 e0 10             	and    eax,0x10
c0012140:	84 c0                	test   al,al
c0012142:	74 07                	je     c001214b <VAS::VAS(bool)+0x14b>
c0012144:	b8 03 41 00 00       	mov    eax,0x4103
c0012149:	eb 05                	jmp    c0012150 <VAS::VAS(bool)+0x150>
c001214b:	b8 03 40 00 00       	mov    eax,0x4003
c0012150:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012154:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012157:	81 c2 20 0c 00 00    	add    edx,0xc20
c001215d:	89 02                	mov    DWORD PTR [edx],eax
c001215f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012164:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001216a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012170:	83 ec 08             	sub    esp,0x8
c0012173:	50                   	push   eax
c0012174:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012178:	e8 b3 fc ff ff       	call   c0011e30 <VAS::setCPUSpecific(unsigned long)>
c001217d:	83 c4 10             	add    esp,0x10
c0012180:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012184:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012187:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001218c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012192:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012198:	83 e0 10             	and    eax,0x10
c001219b:	84 c0                	test   al,al
c001219d:	74 07                	je     c00121a6 <VAS::VAS(bool)+0x1a6>
c001219f:	b8 00 01 00 00       	mov    eax,0x100
c00121a4:	eb 05                	jmp    c00121ab <VAS::VAS(bool)+0x1ab>
c00121a6:	b8 00 00 00 00       	mov    eax,0x0
c00121ab:	09 c2                	or     edx,eax
c00121ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121b4:	05 fc 0f 00 00       	add    eax,0xffc
c00121b9:	83 ca 03             	or     edx,0x3
c00121bc:	89 10                	mov    DWORD PTR [eax],edx
c00121be:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00121c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121c9:	83 ec 0c             	sub    esp,0xc
c00121cc:	50                   	push   eax
c00121cd:	e8 e8 1d 00 00       	call   c0013fba <Device::getName()>
c00121d2:	83 c4 10             	add    esp,0x10
c00121d5:	83 ec 08             	sub    esp,0x8
c00121d8:	68 18 ab 02 c0       	push   0xc002ab18
c00121dd:	50                   	push   eax
c00121de:	e8 b5 e6 fe ff       	call   c0000898 <strcmp>
c00121e3:	83 c4 10             	add    esp,0x10
c00121e6:	85 c0                	test   eax,eax
c00121e8:	0f 94 c0             	sete   al
c00121eb:	84 c0                	test   al,al
c00121ed:	0f 84 87 00 00 00    	je     c001227a <VAS::VAS(bool)+0x27a>
c00121f3:	fa                   	cli    
c00121f4:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c00121f9:	40                   	inc    eax
c00121fa:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c00121ff:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012204:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001220a:	05 7c 09 00 00       	add    eax,0x97c
c001220f:	83 ec 0c             	sub    esp,0xc
c0012212:	50                   	push   eax
c0012213:	e8 96 d0 ff ff       	call   c000f2ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012218:	83 c4 10             	add    esp,0x10
c001221b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012220:	89 c3                	mov    ebx,eax
c0012222:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012227:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001222d:	05 7c 09 00 00       	add    eax,0x97c
c0012232:	83 ec 0c             	sub    esp,0xc
c0012235:	50                   	push   eax
c0012236:	e8 73 d0 ff ff       	call   c000f2ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001223b:	83 c4 10             	add    esp,0x10
c001223e:	83 ec 08             	sub    esp,0x8
c0012241:	50                   	push   eax
c0012242:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012246:	e8 75 f5 ff ff       	call   c00117c0 <VAS::getPageTableEntry(unsigned long)>
c001224b:	83 c4 10             	add    esp,0x10
c001224e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012250:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012255:	6a 11                	push   0x11
c0012257:	53                   	push   ebx
c0012258:	50                   	push   eax
c0012259:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001225d:	e8 f4 f8 ff ff       	call   c0011b56 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012262:	83 c4 10             	add    esp,0x10
c0012265:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001226a:	48                   	dec    eax
c001226b:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c0012270:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c0012275:	85 c0                	test   eax,eax
c0012277:	75 01                	jne    c001227a <VAS::VAS(bool)+0x27a>
c0012279:	fb                   	sti    
c001227a:	90                   	nop
c001227b:	83 c4 28             	add    esp,0x28
c001227e:	5b                   	pop    ebx
c001227f:	c3                   	ret    

c0012280 <VAS::evict(unsigned long)>:
c0012280:	55                   	push   ebp
c0012281:	57                   	push   edi
c0012282:	56                   	push   esi
c0012283:	53                   	push   ebx
c0012284:	83 ec 28             	sub    esp,0x28
c0012287:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001228b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001228f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012293:	68 26 ab 02 c0       	push   0xc002ab26
c0012298:	e8 e4 05 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001229d:	e8 4e f3 ff ff       	call   c00115f0 <Virt::allocateSwapfilePage()>
c00122a2:	5a                   	pop    edx
c00122a3:	89 c7                	mov    edi,eax
c00122a5:	59                   	pop    ecx
c00122a6:	50                   	push   eax
c00122a7:	68 43 ab 02 c0       	push   0xc002ab43
c00122ac:	e8 d0 05 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00122b1:	83 c4 10             	add    esp,0x10
c00122b4:	8b 1d 2c d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d32c
c00122ba:	85 db                	test   ebx,ebx
c00122bc:	7e 3d                	jle    c00122fb <VAS::evict(unsigned long)+0x7b>
c00122be:	89 ee                	mov    esi,ebp
c00122c0:	31 db                	xor    ebx,ebx
c00122c2:	83 ec 0c             	sub    esp,0xc
c00122c5:	57                   	push   edi
c00122c6:	e8 13 f3 ff ff       	call   c00115de <Virt::swapIDToSector(unsigned long)>
c00122cb:	89 34 24             	mov    DWORD PTR [esp],esi
c00122ce:	01 d8                	add    eax,ebx
c00122d0:	6a 01                	push   0x1
c00122d2:	31 d2                	xor    edx,edx
c00122d4:	43                   	inc    ebx
c00122d5:	52                   	push   edx
c00122d6:	81 c6 00 02 00 00    	add    esi,0x200
c00122dc:	50                   	push   eax
c00122dd:	0f be 05 38 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d338
c00122e4:	ff 34 85 7c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1784]
c00122eb:	e8 58 3f 00 00       	call   c0016248 <LogicalDisk::write(unsigned long long, int, void*)>
c00122f0:	83 c4 20             	add    esp,0x20
c00122f3:	39 1d 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,ebx
c00122f9:	7f c7                	jg     c00122c2 <VAS::evict(unsigned long)+0x42>
c00122fb:	83 ec 08             	sub    esp,0x8
c00122fe:	c1 e7 0b             	shl    edi,0xb
c0012301:	55                   	push   ebp
c0012302:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012306:	e8 b5 f4 ff ff       	call   c00117c0 <VAS::getPageTableEntry(unsigned long)>
c001230b:	5a                   	pop    edx
c001230c:	89 c6                	mov    esi,eax
c001230e:	59                   	pop    ecx
c001230f:	ff 30                	push   DWORD PTR [eax]
c0012311:	68 53 ab 02 c0       	push   0xc002ab53
c0012316:	e8 66 05 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001231b:	8b 16                	mov    edx,DWORD PTR [esi]
c001231d:	89 d3                	mov    ebx,edx
c001231f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012325:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001232b:	09 d7                	or     edi,edx
c001232d:	89 3e                	mov    DWORD PTR [esi],edi
c001232f:	5e                   	pop    esi
c0012330:	58                   	pop    eax
c0012331:	57                   	push   edi
c0012332:	68 6c ab 02 c0       	push   0xc002ab6c
c0012337:	e8 45 05 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001233c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001233f:	ff 05 e8 e4 02 c0    	inc    DWORD PTR ds:0xc002e4e8
c0012345:	e8 6a d8 ff ff       	call   c000fbb4 <Phys::freePage(unsigned long)>
c001234a:	0f 20 d8             	mov    eax,cr3
c001234d:	0f 22 d8             	mov    cr3,eax
c0012350:	ff 35 e8 e4 02 c0    	push   DWORD PTR ds:0xc002e4e8
c0012356:	55                   	push   ebp
c0012357:	53                   	push   ebx
c0012358:	68 40 aa 02 c0       	push   0xc002aa40
c001235d:	e8 1f 05 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0012362:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0012367:	c7 44 24 50 85 ab 02 c0 	mov    DWORD PTR [esp+0x50],0xc002ab85
c001236f:	8d 50 01             	lea    edx,[eax+0x1]
c0012372:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012376:	89 15 e4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e4,edx
c001237c:	83 c4 3c             	add    esp,0x3c
c001237f:	5b                   	pop    ebx
c0012380:	5e                   	pop    esi
c0012381:	5f                   	pop    edi
c0012382:	5d                   	pop    ebp
c0012383:	e9 f9 04 00 00       	jmp    c0012881 <Dbg::kprintf(char const*, ...)>

c0012388 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012388:	55                   	push   ebp
c0012389:	57                   	push   edi
c001238a:	56                   	push   esi
c001238b:	53                   	push   ebx
c001238c:	83 ec 24             	sub    esp,0x24
c001238f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012393:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012397:	68 96 ab 02 c0       	push   0xc002ab96
c001239c:	e8 e0 04 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00123a1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00123a5:	58                   	pop    eax
c00123a6:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c00123ac:	5a                   	pop    edx
c00123ad:	57                   	push   edi
c00123ae:	53                   	push   ebx
c00123af:	e8 0c f4 ff ff       	call   c00117c0 <VAS::getPageTableEntry(unsigned long)>
c00123b4:	59                   	pop    ecx
c00123b5:	5e                   	pop    esi
c00123b6:	89 c6                	mov    esi,eax
c00123b8:	ff 30                	push   DWORD PTR [eax]
c00123ba:	68 a9 ab 02 c0       	push   0xc002aba9
c00123bf:	e8 bd 04 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00123c4:	83 c4 10             	add    esp,0x10
c00123c7:	85 ff                	test   edi,edi
c00123c9:	74 0a                	je     c00123d5 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c00123cb:	8b 2e                	mov    ebp,DWORD PTR [esi]
c00123cd:	f7 c5 01 00 00 00    	test   ebp,0x1
c00123d3:	74 0a                	je     c00123df <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c00123d5:	83 c4 1c             	add    esp,0x1c
c00123d8:	31 c0                	xor    eax,eax
c00123da:	5b                   	pop    ebx
c00123db:	5e                   	pop    esi
c00123dc:	5f                   	pop    edi
c00123dd:	5d                   	pop    ebp
c00123de:	c3                   	ret    
c00123df:	83 ec 08             	sub    esp,0x8
c00123e2:	c1 ed 0b             	shr    ebp,0xb
c00123e5:	55                   	push   ebp
c00123e6:	68 b7 ab 02 c0       	push   0xc002abb7
c00123eb:	e8 91 04 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00123f0:	e8 30 d8 ff ff       	call   c000fc25 <Phys::allocatePage()>
c00123f5:	59                   	pop    ecx
c00123f6:	5a                   	pop    edx
c00123f7:	50                   	push   eax
c00123f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123fc:	68 c2 ab 02 c0       	push   0xc002abc2
c0012401:	e8 7b 04 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0012406:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001240a:	8b 16                	mov    edx,DWORD PTR [esi]
c001240c:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012412:	09 d0                	or     eax,edx
c0012414:	0d 01 08 00 00       	or     eax,0x801
c0012419:	89 06                	mov    DWORD PTR [esi],eax
c001241b:	59                   	pop    ecx
c001241c:	5e                   	pop    esi
c001241d:	50                   	push   eax
c001241e:	68 d7 ab 02 c0       	push   0xc002abd7
c0012423:	e8 59 04 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0012428:	0f 20 d8             	mov    eax,cr3
c001242b:	83 c4 0c             	add    esp,0xc
c001242e:	53                   	push   ebx
c001242f:	50                   	push   eax
c0012430:	68 ef ab 02 c0       	push   0xc002abef
c0012435:	e8 47 04 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001243a:	c7 04 24 07 ac 02 c0 	mov    DWORD PTR [esp],0xc002ac07
c0012441:	e8 3b 04 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0012446:	83 c4 10             	add    esp,0x10
c0012449:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c001244e:	85 c0                	test   eax,eax
c0012450:	7e 3d                	jle    c001248f <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c0012452:	89 fe                	mov    esi,edi
c0012454:	31 db                	xor    ebx,ebx
c0012456:	83 ec 0c             	sub    esp,0xc
c0012459:	55                   	push   ebp
c001245a:	e8 7f f1 ff ff       	call   c00115de <Virt::swapIDToSector(unsigned long)>
c001245f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012462:	01 d8                	add    eax,ebx
c0012464:	6a 01                	push   0x1
c0012466:	31 d2                	xor    edx,edx
c0012468:	43                   	inc    ebx
c0012469:	52                   	push   edx
c001246a:	81 c6 00 02 00 00    	add    esi,0x200
c0012470:	50                   	push   eax
c0012471:	0f be 05 38 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d338
c0012478:	ff 34 85 7c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1784]
c001247f:	e8 58 3d 00 00       	call   c00161dc <LogicalDisk::read(unsigned long long, int, void*)>
c0012484:	83 c4 20             	add    esp,0x20
c0012487:	39 1d 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,ebx
c001248d:	7f c7                	jg     c0012456 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c001248f:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0012494:	48                   	dec    eax
c0012495:	52                   	push   edx
c0012496:	a3 e8 e4 02 c0       	mov    ds:0xc002e4e8,eax
c001249b:	50                   	push   eax
c001249c:	57                   	push   edi
c001249d:	68 17 ac 02 c0       	push   0xc002ac17
c00124a2:	e8 da 03 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00124a7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00124aa:	e8 11 f1 ff ff       	call   c00115c0 <Virt::freeSwapfilePage(unsigned long)>
c00124af:	c7 04 24 2c ac 02 c0 	mov    DWORD PTR [esp],0xc002ac2c
c00124b6:	e8 c6 03 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00124bb:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c00124c0:	83 c4 10             	add    esp,0x10
c00124c3:	48                   	dec    eax
c00124c4:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c00124c9:	85 c0                	test   eax,eax
c00124cb:	75 01                	jne    c00124ce <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c00124cd:	fb                   	sti    
c00124ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124d2:	25 ff 0f 00 00       	and    eax,0xfff
c00124d7:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00124dc:	77 20                	ja     c00124fe <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c00124de:	0f 20 d8             	mov    eax,cr3
c00124e1:	0f 22 d8             	mov    cr3,eax
c00124e4:	83 ec 0c             	sub    esp,0xc
c00124e7:	68 52 ac 02 c0       	push   0xc002ac52
c00124ec:	e8 90 03 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00124f1:	83 c4 10             	add    esp,0x10
c00124f4:	b0 01                	mov    al,0x1
c00124f6:	83 c4 1c             	add    esp,0x1c
c00124f9:	5b                   	pop    ebx
c00124fa:	5e                   	pop    esi
c00124fb:	5f                   	pop    edi
c00124fc:	5d                   	pop    ebp
c00124fd:	c3                   	ret    
c00124fe:	83 ec 0c             	sub    esp,0xc
c0012501:	68 42 ac 02 c0       	push   0xc002ac42
c0012506:	e8 76 03 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001250b:	83 c4 10             	add    esp,0x10
c001250e:	eb ce                	jmp    c00124de <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c0012510 <VAS::scanForEviction()>:
c0012510:	55                   	push   ebp
c0012511:	31 ed                	xor    ebp,ebp
c0012513:	57                   	push   edi
c0012514:	56                   	push   esi
c0012515:	53                   	push   ebx
c0012516:	83 ec 0c             	sub    esp,0xc
c0012519:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001251d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012520:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012526:	75 0e                	jne    c0012536 <VAS::scanForEviction()+0x26>
c0012528:	89 da                	mov    edx,ebx
c001252a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001252d:	c1 ea 16             	shr    edx,0x16
c0012530:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012534:	74 4e                	je     c0012584 <VAS::scanForEviction()+0x74>
c0012536:	53                   	push   ebx
c0012537:	56                   	push   esi
c0012538:	e8 83 f2 ff ff       	call   c00117c0 <VAS::getPageTableEntry(unsigned long)>
c001253d:	5f                   	pop    edi
c001253e:	8b 38                	mov    edi,DWORD PTR [eax]
c0012540:	5a                   	pop    edx
c0012541:	89 fa                	mov    edx,edi
c0012543:	81 e2 01 08 00 00    	and    edx,0x801
c0012549:	81 fa 01 08 00 00    	cmp    edx,0x801
c001254f:	74 3e                	je     c001258f <VAS::scanForEviction()+0x7f>
c0012551:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012557:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001255d:	76 2b                	jbe    c001258a <VAS::scanForEviction()+0x7a>
c001255f:	45                   	inc    ebp
c0012560:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012567:	83 fd 04             	cmp    ebp,0x4
c001256a:	74 35                	je     c00125a1 <VAS::scanForEviction()+0x91>
c001256c:	31 db                	xor    ebx,ebx
c001256e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012574:	75 c0                	jne    c0012536 <VAS::scanForEviction()+0x26>
c0012576:	89 da                	mov    edx,ebx
c0012578:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001257b:	c1 ea 16             	shr    edx,0x16
c001257e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012582:	75 b2                	jne    c0012536 <VAS::scanForEviction()+0x26>
c0012584:	81 c3 00 00 40 00    	add    ebx,0x400000
c001258a:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001258d:	eb 91                	jmp    c0012520 <VAS::scanForEviction()+0x10>
c001258f:	f7 c7 20 00 00 00    	test   edi,0x20
c0012595:	74 22                	je     c00125b9 <VAS::scanForEviction()+0xa9>
c0012597:	83 e7 df             	and    edi,0xffffffdf
c001259a:	89 38                	mov    DWORD PTR [eax],edi
c001259c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001259f:	eb b0                	jmp    c0012551 <VAS::scanForEviction()+0x41>
c00125a1:	83 ec 0c             	sub    esp,0xc
c00125a4:	68 70 aa 02 c0       	push   0xc002aa70
c00125a9:	e8 41 7c 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c00125ae:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	e9 67 ff ff ff       	jmp    c0012520 <VAS::scanForEviction()+0x10>
c00125b9:	83 ec 08             	sub    esp,0x8
c00125bc:	53                   	push   ebx
c00125bd:	68 60 ac 02 c0       	push   0xc002ac60
c00125c2:	e8 ba 02 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00125c7:	58                   	pop    eax
c00125c8:	5a                   	pop    edx
c00125c9:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00125cc:	56                   	push   esi
c00125cd:	e8 ae fc ff ff       	call   c0012280 <VAS::evict(unsigned long)>
c00125d2:	59                   	pop    ecx
c00125d3:	5b                   	pop    ebx
c00125d4:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00125d7:	68 74 ac 02 c0       	push   0xc002ac74
c00125dc:	e8 a0 02 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00125e1:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00125e8:	89 f8                	mov    eax,edi
c00125ea:	83 c4 1c             	add    esp,0x1c
c00125ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125f2:	5b                   	pop    ebx
c00125f3:	5e                   	pop    esi
c00125f4:	5f                   	pop    edi
c00125f5:	5d                   	pop    ebp
c00125f6:	c3                   	ret    

c00125f7 <mapVASFirstTime>:
c00125f7:	55                   	push   ebp
c00125f8:	57                   	push   edi
c00125f9:	56                   	push   esi
c00125fa:	53                   	push   ebx
c00125fb:	83 ec 0c             	sub    esp,0xc
c00125fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012603:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012606:	4a                   	dec    edx
c0012607:	0f 84 fe 00 00 00    	je     c001270b <mapVASFirstTime+0x114>
c001260d:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012610:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012613:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012618:	c1 e5 15             	shl    ebp,0x15
c001261b:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012620:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012626:	29 eb                	sub    ebx,ebp
c0012628:	29 ef                	sub    edi,ebp
c001262a:	83 ec 08             	sub    esp,0x8
c001262d:	53                   	push   ebx
c001262e:	68 a0 ac 02 c0       	push   0xc002aca0
c0012633:	e8 49 02 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0012638:	e8 e8 d5 ff ff       	call   c000fc25 <Phys::allocatePage()>
c001263d:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012644:	6a 01                	push   0x1
c0012646:	53                   	push   ebx
c0012647:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001264d:	50                   	push   eax
c001264e:	56                   	push   esi
c001264f:	e8 f8 f7 ff ff       	call   c0011e4c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012654:	83 c4 20             	add    esp,0x20
c0012657:	39 fb                	cmp    ebx,edi
c0012659:	75 cf                	jne    c001262a <mapVASFirstTime+0x33>
c001265b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012660:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012665:	29 eb                	sub    ebx,ebp
c0012667:	29 ef                	sub    edi,ebp
c0012669:	83 ec 08             	sub    esp,0x8
c001266c:	53                   	push   ebx
c001266d:	68 bc ac 02 c0       	push   0xc002acbc
c0012672:	e8 0a 02 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0012677:	58                   	pop    eax
c0012678:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001267c:	5a                   	pop    edx
c001267d:	19 c0                	sbb    eax,eax
c001267f:	83 e0 04             	and    eax,0x4
c0012682:	05 03 04 00 00       	add    eax,0x403
c0012687:	50                   	push   eax
c0012688:	68 e1 ab 02 c0       	push   0xc002abe1
c001268d:	e8 ef 01 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0012692:	e8 8e d5 ff ff       	call   c000fc25 <Phys::allocatePage()>
c0012697:	59                   	pop    ecx
c0012698:	89 c5                	mov    ebp,eax
c001269a:	58                   	pop    eax
c001269b:	55                   	push   ebp
c001269c:	68 d0 ac 02 c0       	push   0xc002acd0
c00126a1:	e8 db 01 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00126a6:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00126aa:	19 d2                	sbb    edx,edx
c00126ac:	83 e2 04             	and    edx,0x4
c00126af:	81 c2 03 04 00 00    	add    edx,0x403
c00126b5:	89 14 24             	mov    DWORD PTR [esp],edx
c00126b8:	6a 01                	push   0x1
c00126ba:	53                   	push   ebx
c00126bb:	55                   	push   ebp
c00126bc:	56                   	push   esi
c00126bd:	e8 8a f7 ff ff       	call   c0011e4c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126c2:	83 c4 18             	add    esp,0x18
c00126c5:	53                   	push   ebx
c00126c6:	56                   	push   esi
c00126c7:	e8 f4 f0 ff ff       	call   c00117c0 <VAS::getPageTableEntry(unsigned long)>
c00126cc:	5a                   	pop    edx
c00126cd:	59                   	pop    ecx
c00126ce:	ff 30                	push   DWORD PTR [eax]
c00126d0:	68 ec ac 02 c0       	push   0xc002acec
c00126d5:	e8 a7 01 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00126da:	0f 20 d8             	mov    eax,cr3
c00126dd:	83 c4 0c             	add    esp,0xc
c00126e0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00126e6:	56                   	push   esi
c00126e7:	50                   	push   eax
c00126e8:	68 ef ab 02 c0       	push   0xc002abef
c00126ed:	e8 8f 01 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00126f2:	83 c4 10             	add    esp,0x10
c00126f5:	39 df                	cmp    edi,ebx
c00126f7:	0f 85 6c ff ff ff    	jne    c0012669 <mapVASFirstTime+0x72>
c00126fd:	0f 20 d8             	mov    eax,cr3
c0012700:	0f 22 d8             	mov    cr3,eax
c0012703:	83 c4 0c             	add    esp,0xc
c0012706:	5b                   	pop    ebx
c0012707:	5e                   	pop    esi
c0012708:	5f                   	pop    edi
c0012709:	5d                   	pop    ebp
c001270a:	c3                   	ret    
c001270b:	83 ec 0c             	sub    esp,0xc
c001270e:	68 87 ac 02 c0       	push   0xc002ac87
c0012713:	e8 69 01 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0012718:	83 c4 10             	add    esp,0x10
c001271b:	83 c4 0c             	add    esp,0xc
c001271e:	5b                   	pop    ebx
c001271f:	5e                   	pop    esi
c0012720:	5f                   	pop    edi
c0012721:	5d                   	pop    ebp
c0012722:	c3                   	ret    

c0012723 <__cxa_atexit>:
c0012723:	31 c0                	xor    eax,eax
c0012725:	c3                   	ret    

c0012726 <__cxa_finalize>:
c0012726:	c3                   	ret    

c0012727 <__stack_chk_fail>:
c0012727:	55                   	push   ebp
c0012728:	89 e5                	mov    ebp,esp
c001272a:	83 ec 14             	sub    esp,0x14
c001272d:	68 f7 ac 02 c0       	push   0xc002acf7
c0012732:	e8 4a 01 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0012737:	58                   	pop    eax
c0012738:	5a                   	pop    edx
c0012739:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001273c:	68 47 ad 02 c0       	push   0xc002ad47
c0012741:	e8 3b 01 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0012746:	59                   	pop    ecx
c0012747:	58                   	pop    eax
c0012748:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001274b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001274e:	68 47 ad 02 c0       	push   0xc002ad47
c0012753:	e8 29 01 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0012758:	5a                   	pop    edx
c0012759:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001275c:	59                   	pop    ecx
c001275d:	8b 00                	mov    eax,DWORD PTR [eax]
c001275f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012762:	68 47 ad 02 c0       	push   0xc002ad47
c0012767:	e8 15 01 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001276c:	5a                   	pop    edx
c001276d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012770:	59                   	pop    ecx
c0012771:	8b 00                	mov    eax,DWORD PTR [eax]
c0012773:	8b 00                	mov    eax,DWORD PTR [eax]
c0012775:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012778:	68 47 ad 02 c0       	push   0xc002ad47
c001277d:	e8 ff 00 00 00       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0012782:	c7 04 24 4f ad 02 c0 	mov    DWORD PTR [esp],0xc002ad4f
c0012789:	e8 61 7a 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c001278e:	83 c4 10             	add    esp,0x10
c0012791:	c9                   	leave  
c0012792:	c3                   	ret    

c0012793 <__cxa_pure_virtual>:
c0012793:	83 ec 18             	sub    esp,0x18
c0012796:	68 67 ad 02 c0       	push   0xc002ad67
c001279b:	e8 4f 7a 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c00127a0:	83 c4 1c             	add    esp,0x1c
c00127a3:	c3                   	ret    

c00127a4 <operator new[](unsigned long)>:
c00127a4:	e9 80 d0 ff ff       	jmp    c000f829 <malloc>

c00127a9 <operator delete(void*, unsigned long)>:
c00127a9:	e9 9b d0 ff ff       	jmp    c000f849 <rfree>

c00127ae <operator delete[](void*)>:
c00127ae:	e9 96 d0 ff ff       	jmp    c000f849 <rfree>

c00127b3 <operator delete[](void*, unsigned long)>:
c00127b3:	e9 91 d0 ff ff       	jmp    c000f849 <rfree>

c00127b8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00127b8:	55                   	push   ebp
c00127b9:	b9 11 00 00 00       	mov    ecx,0x11
c00127be:	57                   	push   edi
c00127bf:	56                   	push   esi
c00127c0:	be 5a a7 02 c0       	mov    esi,0xc002a75a
c00127c5:	53                   	push   ebx
c00127c6:	83 ec 20             	sub    esp,0x20
c00127c9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00127cd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00127d1:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00127d5:	fc                   	cld    
c00127d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127d8:	89 ee                	mov    esi,ebp
c00127da:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00127de:	eb 02                	jmp    c00127e2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c00127e0:	89 c6                	mov    esi,eax
c00127e2:	31 d2                	xor    edx,edx
c00127e4:	41                   	inc    ecx
c00127e5:	89 f0                	mov    eax,esi
c00127e7:	f7 f3                	div    ebx
c00127e9:	39 de                	cmp    esi,ebx
c00127eb:	73 f3                	jae    c00127e0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c00127ed:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00127f0:	eb 02                	jmp    c00127f4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c00127f2:	89 c5                	mov    ebp,eax
c00127f4:	31 d2                	xor    edx,edx
c00127f6:	49                   	dec    ecx
c00127f7:	89 e8                	mov    eax,ebp
c00127f9:	f7 f3                	div    ebx
c00127fb:	39 dd                	cmp    ebp,ebx
c00127fd:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012801:	88 11                	mov    BYTE PTR [ecx],dl
c0012803:	73 ed                	jae    c00127f2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012805:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012809:	83 c4 20             	add    esp,0x20
c001280c:	5b                   	pop    ebx
c001280d:	5e                   	pop    esi
c001280e:	5f                   	pop    edi
c001280f:	5d                   	pop    ebp
c0012810:	c3                   	ret    

c0012811 <Dbg::logc(char)>:
c0012811:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012815:	ba fd 03 00 00       	mov    edx,0x3fd
c001281a:	ec                   	in     al,dx
c001281b:	a8 20                	test   al,0x20
c001281d:	74 fb                	je     c001281a <Dbg::logc(char)+0x9>
c001281f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012824:	88 c8                	mov    al,cl
c0012826:	ee                   	out    dx,al
c0012827:	c3                   	ret    

c0012828 <Dbg::logs(char*)>:
c0012828:	53                   	push   ebx
c0012829:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001282d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012830:	84 c0                	test   al,al
c0012832:	74 0f                	je     c0012843 <Dbg::logs(char*)+0x1b>
c0012834:	50                   	push   eax
c0012835:	43                   	inc    ebx
c0012836:	e8 d6 ff ff ff       	call   c0012811 <Dbg::logc(char)>
c001283b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001283e:	5a                   	pop    edx
c001283f:	84 c0                	test   al,al
c0012841:	75 f1                	jne    c0012834 <Dbg::logs(char*)+0xc>
c0012843:	5b                   	pop    ebx
c0012844:	c3                   	ret    

c0012845 <Dbg::logWriteInt(unsigned int)>:
c0012845:	83 ec 10             	sub    esp,0x10
c0012848:	6a 0a                	push   0xa
c001284a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001284e:	50                   	push   eax
c001284f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012853:	e8 60 ff ff ff       	call   c00127b8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012858:	50                   	push   eax
c0012859:	e8 ca ff ff ff       	call   c0012828 <Dbg::logs(char*)>
c001285e:	83 c4 20             	add    esp,0x20
c0012861:	c3                   	ret    

c0012862 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012862:	83 ec 10             	sub    esp,0x10
c0012865:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012869:	8d 44 24 08          	lea    eax,[esp+0x8]
c001286d:	50                   	push   eax
c001286e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012872:	e8 41 ff ff ff       	call   c00127b8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012877:	50                   	push   eax
c0012878:	e8 ab ff ff ff       	call   c0012828 <Dbg::logs(char*)>
c001287d:	83 c4 20             	add    esp,0x20
c0012880:	c3                   	ret    

c0012881 <Dbg::kprintf(char const*, ...)>:
c0012881:	55                   	push   ebp
c0012882:	57                   	push   edi
c0012883:	56                   	push   esi
c0012884:	53                   	push   ebx
c0012885:	83 ec 0c             	sub    esp,0xc
c0012888:	8d 44 24 24          	lea    eax,[esp+0x24]
c001288c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012890:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012894:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012897:	84 c0                	test   al,al
c0012899:	74 4a                	je     c00128e5 <Dbg::kprintf(char const*, ...)+0x64>
c001289b:	31 db                	xor    ebx,ebx
c001289d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00128a0:	3c 25                	cmp    al,0x25
c00128a2:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00128a5:	0f 85 e4 00 00 00    	jne    c001298f <Dbg::kprintf(char const*, ...)+0x10e>
c00128ab:	83 c3 02             	add    ebx,0x2
c00128ae:	8a 07                	mov    al,BYTE PTR [edi]
c00128b0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00128b3:	83 e8 25             	sub    eax,0x25
c00128b6:	3c 53                	cmp    al,0x53
c00128b8:	0f 87 ba 00 00 00    	ja     c0012978 <Dbg::kprintf(char const*, ...)+0xf7>
c00128be:	0f b6 c0             	movzx  eax,al
c00128c1:	ff 24 85 7c ad 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5284]
c00128c8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128cc:	89 c8                	mov    eax,ecx
c00128ce:	83 c1 04             	add    ecx,0x4
c00128d1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128d5:	ff 30                	push   DWORD PTR [eax]
c00128d7:	e8 69 ff ff ff       	call   c0012845 <Dbg::logWriteInt(unsigned int)>
c00128dc:	5f                   	pop    edi
c00128dd:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00128e1:	84 c0                	test   al,al
c00128e3:	75 b8                	jne    c001289d <Dbg::kprintf(char const*, ...)+0x1c>
c00128e5:	83 c4 0c             	add    esp,0xc
c00128e8:	5b                   	pop    ebx
c00128e9:	5e                   	pop    esi
c00128ea:	5f                   	pop    edi
c00128eb:	5d                   	pop    ebp
c00128ec:	c3                   	ret    
c00128ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128f1:	89 c8                	mov    eax,ecx
c00128f3:	83 c1 04             	add    ecx,0x4
c00128f6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128fa:	ff 30                	push   DWORD PTR [eax]
c00128fc:	e8 27 ff ff ff       	call   c0012828 <Dbg::logs(char*)>
c0012901:	58                   	pop    eax
c0012902:	eb d9                	jmp    c00128dd <Dbg::kprintf(char const*, ...)+0x5c>
c0012904:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012908:	89 d0                	mov    eax,edx
c001290a:	83 c2 04             	add    edx,0x4
c001290d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012911:	ff 30                	push   DWORD PTR [eax]
c0012913:	e8 2d ff ff ff       	call   c0012845 <Dbg::logWriteInt(unsigned int)>
c0012918:	58                   	pop    eax
c0012919:	eb c2                	jmp    c00128dd <Dbg::kprintf(char const*, ...)+0x5c>
c001291b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001291f:	89 d0                	mov    eax,edx
c0012921:	83 c2 04             	add    edx,0x4
c0012924:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012927:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001292b:	50                   	push   eax
c001292c:	e8 e0 fe ff ff       	call   c0012811 <Dbg::logc(char)>
c0012931:	58                   	pop    eax
c0012932:	eb a9                	jmp    c00128dd <Dbg::kprintf(char const*, ...)+0x5c>
c0012934:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012938:	89 c8                	mov    eax,ecx
c001293a:	83 c1 04             	add    ecx,0x4
c001293d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012941:	6a 10                	push   0x10
c0012943:	ff 30                	push   DWORD PTR [eax]
c0012945:	e8 18 ff ff ff       	call   c0012862 <Dbg::logWriteIntBase(unsigned int, int)>
c001294a:	59                   	pop    ecx
c001294b:	5f                   	pop    edi
c001294c:	eb 8f                	jmp    c00128dd <Dbg::kprintf(char const*, ...)+0x5c>
c001294e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012952:	89 d0                	mov    eax,edx
c0012954:	83 c2 08             	add    edx,0x8
c0012957:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001295b:	6a 10                	push   0x10
c001295d:	ff 30                	push   DWORD PTR [eax]
c001295f:	e8 fe fe ff ff       	call   c0012862 <Dbg::logWriteIntBase(unsigned int, int)>
c0012964:	58                   	pop    eax
c0012965:	5a                   	pop    edx
c0012966:	e9 72 ff ff ff       	jmp    c00128dd <Dbg::kprintf(char const*, ...)+0x5c>
c001296b:	6a 25                	push   0x25
c001296d:	e8 9f fe ff ff       	call   c0012811 <Dbg::logc(char)>
c0012972:	58                   	pop    eax
c0012973:	e9 65 ff ff ff       	jmp    c00128dd <Dbg::kprintf(char const*, ...)+0x5c>
c0012978:	6a 25                	push   0x25
c001297a:	e8 92 fe ff ff       	call   c0012811 <Dbg::logc(char)>
c001297f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012982:	50                   	push   eax
c0012983:	e8 89 fe ff ff       	call   c0012811 <Dbg::logc(char)>
c0012988:	5a                   	pop    edx
c0012989:	59                   	pop    ecx
c001298a:	e9 4e ff ff ff       	jmp    c00128dd <Dbg::kprintf(char const*, ...)+0x5c>
c001298f:	50                   	push   eax
c0012990:	89 eb                	mov    ebx,ebp
c0012992:	e8 7a fe ff ff       	call   c0012811 <Dbg::logc(char)>
c0012997:	89 fd                	mov    ebp,edi
c0012999:	58                   	pop    eax
c001299a:	e9 3e ff ff ff       	jmp    c00128dd <Dbg::kprintf(char const*, ...)+0x5c>
c001299f:	90                   	nop

c00129a0 <File::read(unsigned long long, void*, int*)>:
c00129a0:	53                   	push   ebx
c00129a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129a9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129b0:	3c 19                	cmp    al,0x19
c00129b2:	77 35                	ja     c00129e9 <File::read(unsigned long long, void*, int*)+0x49>
c00129b4:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c00129bb:	85 c0                	test   eax,eax
c00129bd:	74 2a                	je     c00129e9 <File::read(unsigned long long, void*, int*)+0x49>
c00129bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129c5:	85 c0                	test   eax,eax
c00129c7:	74 20                	je     c00129e9 <File::read(unsigned long long, void*, int*)+0x49>
c00129c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129cd:	74 21                	je     c00129f0 <File::read(unsigned long long, void*, int*)+0x50>
c00129cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00129d1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00129d5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00129db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129e3:	5b                   	pop    ebx
c00129e4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00129e7:	ff e0                	jmp    eax
c00129e9:	b8 0b 00 00 00       	mov    eax,0xb
c00129ee:	eb 05                	jmp    c00129f5 <File::read(unsigned long long, void*, int*)+0x55>
c00129f0:	b8 05 00 00 00       	mov    eax,0x5
c00129f5:	5b                   	pop    ebx
c00129f6:	c3                   	ret    
c00129f7:	90                   	nop

c00129f8 <File::write(unsigned long long, void*, int*)>:
c00129f8:	53                   	push   ebx
c00129f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a01:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a08:	3c 19                	cmp    al,0x19
c0012a0a:	77 35                	ja     c0012a41 <File::write(unsigned long long, void*, int*)+0x49>
c0012a0c:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c0012a13:	85 c0                	test   eax,eax
c0012a15:	74 2a                	je     c0012a41 <File::write(unsigned long long, void*, int*)+0x49>
c0012a17:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a1d:	85 c0                	test   eax,eax
c0012a1f:	74 20                	je     c0012a41 <File::write(unsigned long long, void*, int*)+0x49>
c0012a21:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a25:	74 21                	je     c0012a48 <File::write(unsigned long long, void*, int*)+0x50>
c0012a27:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a29:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a2d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a3b:	5b                   	pop    ebx
c0012a3c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012a3f:	ff e0                	jmp    eax
c0012a41:	b8 0b 00 00 00       	mov    eax,0xb
c0012a46:	eb 05                	jmp    c0012a4d <File::write(unsigned long long, void*, int*)+0x55>
c0012a48:	b8 05 00 00 00       	mov    eax,0x5
c0012a4d:	5b                   	pop    ebx
c0012a4e:	c3                   	ret    
c0012a4f:	90                   	nop

c0012a50 <Directory::read(unsigned long long, void*, int*)>:
c0012a50:	53                   	push   ebx
c0012a51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a55:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a59:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a60:	3c 19                	cmp    al,0x19
c0012a62:	77 35                	ja     c0012a99 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a64:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c0012a6b:	85 c0                	test   eax,eax
c0012a6d:	74 2a                	je     c0012a99 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a6f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a75:	85 c0                	test   eax,eax
c0012a77:	74 20                	je     c0012a99 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a79:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a7d:	74 21                	je     c0012aa0 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012a7f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a81:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a85:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a93:	5b                   	pop    ebx
c0012a94:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012a97:	ff e0                	jmp    eax
c0012a99:	b8 0b 00 00 00       	mov    eax,0xb
c0012a9e:	eb 05                	jmp    c0012aa5 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012aa0:	b8 05 00 00 00       	mov    eax,0x5
c0012aa5:	5b                   	pop    ebx
c0012aa6:	c3                   	ret    
c0012aa7:	90                   	nop

c0012aa8 <Directory::write(unsigned long long, void*, int*)>:
c0012aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aac:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012ab3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ab8:	80 fa 19             	cmp    dl,0x19
c0012abb:	77 18                	ja     c0012ad5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012abd:	8b 14 95 80 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1680]
c0012ac4:	85 d2                	test   edx,edx
c0012ac6:	74 0d                	je     c0012ad5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012ac8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012acf:	19 c0                	sbb    eax,eax
c0012ad1:	83 e0 0a             	and    eax,0xa
c0012ad4:	40                   	inc    eax
c0012ad5:	c3                   	ret    

c0012ad6 <File::isAtty()>:
c0012ad6:	31 c0                	xor    eax,eax
c0012ad8:	c3                   	ret    
c0012ad9:	90                   	nop

c0012ada <Directory::isAtty()>:
c0012ada:	31 c0                	xor    eax,eax
c0012adc:	c3                   	ret    
c0012add:	90                   	nop

c0012ade <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012ade:	b8 0a 00 00 00       	mov    eax,0xa
c0012ae3:	c3                   	ret    

c0012ae4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012ae4:	b8 0a 00 00 00       	mov    eax,0xa
c0012ae9:	c3                   	ret    

c0012aea <Filesystem::allocateSwapfile(char const*, int)>:
c0012aea:	31 c0                	xor    eax,eax
c0012aec:	31 d2                	xor    edx,edx
c0012aee:	c3                   	ret    
c0012aef:	90                   	nop

c0012af0 <File::~File()>:
c0012af0:	83 ec 0c             	sub    esp,0xc
c0012af3:	ba 3c af 02 c0       	mov    edx,0xc002af3c
c0012af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012afc:	89 10                	mov    DWORD PTR [eax],edx
c0012afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b02:	83 ec 0c             	sub    esp,0xc
c0012b05:	50                   	push   eax
c0012b06:	e8 43 e7 ff ff       	call   c001124e <UnixFile::~UnixFile()>
c0012b0b:	83 c4 10             	add    esp,0x10
c0012b0e:	90                   	nop
c0012b0f:	83 c4 0c             	add    esp,0xc
c0012b12:	c3                   	ret    
c0012b13:	90                   	nop

c0012b14 <File::~File()>:
c0012b14:	83 ec 0c             	sub    esp,0xc
c0012b17:	83 ec 0c             	sub    esp,0xc
c0012b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b1e:	e8 cd ff ff ff       	call   c0012af0 <File::~File()>
c0012b23:	83 c4 10             	add    esp,0x10
c0012b26:	83 ec 08             	sub    esp,0x8
c0012b29:	68 14 01 00 00       	push   0x114
c0012b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b32:	e8 72 fc ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0012b37:	83 c4 10             	add    esp,0x10
c0012b3a:	83 c4 0c             	add    esp,0xc
c0012b3d:	c3                   	ret    

c0012b3e <Directory::~Directory()>:
c0012b3e:	83 ec 0c             	sub    esp,0xc
c0012b41:	ba 58 af 02 c0       	mov    edx,0xc002af58
c0012b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b4a:	89 10                	mov    DWORD PTR [eax],edx
c0012b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b50:	83 ec 0c             	sub    esp,0xc
c0012b53:	50                   	push   eax
c0012b54:	e8 f5 e6 ff ff       	call   c001124e <UnixFile::~UnixFile()>
c0012b59:	83 c4 10             	add    esp,0x10
c0012b5c:	90                   	nop
c0012b5d:	83 c4 0c             	add    esp,0xc
c0012b60:	c3                   	ret    
c0012b61:	90                   	nop

c0012b62 <Directory::~Directory()>:
c0012b62:	83 ec 0c             	sub    esp,0xc
c0012b65:	83 ec 0c             	sub    esp,0xc
c0012b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b6c:	e8 cd ff ff ff       	call   c0012b3e <Directory::~Directory()>
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	83 ec 08             	sub    esp,0x8
c0012b77:	68 14 01 00 00       	push   0x114
c0012b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b80:	e8 24 fc ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0012b85:	83 c4 10             	add    esp,0x10
c0012b88:	83 c4 0c             	add    esp,0xc
c0012b8b:	c3                   	ret    

c0012b8c <Filesystem::Filesystem()>:
c0012b8c:	ba d4 ae 02 c0       	mov    edx,0xc002aed4
c0012b91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b95:	89 10                	mov    DWORD PTR [eax],edx
c0012b97:	8b 15 f4 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4f4
c0012b9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba8:	a3 f4 e4 02 c0       	mov    ds:0xc002e4f4,eax
c0012bad:	90                   	nop
c0012bae:	c3                   	ret    
c0012baf:	90                   	nop

c0012bb0 <Filesystem::~Filesystem()>:
c0012bb0:	ba d4 ae 02 c0       	mov    edx,0xc002aed4
c0012bb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bb9:	89 10                	mov    DWORD PTR [eax],edx
c0012bbb:	90                   	nop
c0012bbc:	c3                   	ret    
c0012bbd:	90                   	nop

c0012bbe <Filesystem::~Filesystem()>:
c0012bbe:	83 ec 0c             	sub    esp,0xc
c0012bc1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012bc5:	e8 e6 ff ff ff       	call   c0012bb0 <Filesystem::~Filesystem()>
c0012bca:	83 c4 04             	add    esp,0x4
c0012bcd:	83 ec 08             	sub    esp,0x8
c0012bd0:	6a 08                	push   0x8
c0012bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd6:	e8 ce fb ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0012bdb:	83 c4 10             	add    esp,0x10
c0012bde:	83 c4 0c             	add    esp,0xc
c0012be1:	c3                   	ret    

c0012be2 <Fs::getcwd(Process*, char*, int)>:
c0012be2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012be6:	31 c0                	xor    eax,eax
c0012be8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012beb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012bef:	7d 15                	jge    c0012c06 <Fs::getcwd(Process*, char*, int)+0x24>
c0012bf1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bf5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012bfc:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012bff:	84 c9                	test   cl,cl
c0012c01:	74 06                	je     c0012c09 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c03:	40                   	inc    eax
c0012c04:	eb e2                	jmp    c0012be8 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c06:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c09:	31 c0                	xor    eax,eax
c0012c0b:	c3                   	ret    

c0012c0c <Fs::initVFS()>:
c0012c0c:	83 ec 18             	sub    esp,0x18
c0012c0f:	6a 08                	push   0x8
c0012c11:	e8 13 cc ff ff       	call   c000f829 <malloc>
c0012c16:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c19:	e8 ac e1 00 00       	call   c0020dca <FAT::FAT()>
c0012c1e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c25:	e8 ff cb ff ff       	call   c000f829 <malloc>
c0012c2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c2d:	e8 a4 f3 00 00       	call   c0021fd6 <ISO9660::ISO9660()>
c0012c32:	83 c4 1c             	add    esp,0x1c
c0012c35:	c3                   	ret    

c0012c36 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c36:	55                   	push   ebp
c0012c37:	57                   	push   edi
c0012c38:	56                   	push   esi
c0012c39:	53                   	push   ebx
c0012c3a:	81 ec 10 04 00 00    	sub    esp,0x410
c0012c40:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012c47:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012c4e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012c55:	68 00 04 00 00       	push   0x400
c0012c5a:	6a 00                	push   0x0
c0012c5c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012c60:	56                   	push   esi
c0012c61:	e8 ea da fe ff       	call   c0000750 <memset>
c0012c66:	83 c4 10             	add    esp,0x10
c0012c69:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012c6d:	75 0b                	jne    c0012c7a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012c6f:	50                   	push   eax
c0012c70:	50                   	push   eax
c0012c71:	57                   	push   edi
c0012c72:	56                   	push   esi
c0012c73:	e8 94 db fe ff       	call   c000080c <strcpy>
c0012c78:	eb 41                	jmp    c0012cbb <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012c7a:	8a 07                	mov    al,BYTE PTR [edi]
c0012c7c:	3c 5c                	cmp    al,0x5c
c0012c7e:	74 04                	je     c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012c80:	3c 2f                	cmp    al,0x2f
c0012c82:	75 18                	jne    c0012c9c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012c84:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012c87:	3c 60                	cmp    al,0x60
c0012c89:	7e 03                	jle    c0012c8e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012c8b:	83 e8 20             	sub    eax,0x20
c0012c8e:	88 04 24             	mov    BYTE PTR [esp],al
c0012c91:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012c98:	50                   	push   eax
c0012c99:	50                   	push   eax
c0012c9a:	eb 18                	jmp    c0012cb4 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012c9c:	50                   	push   eax
c0012c9d:	50                   	push   eax
c0012c9e:	55                   	push   ebp
c0012c9f:	56                   	push   esi
c0012ca0:	e8 67 db fe ff       	call   c000080c <strcpy>
c0012ca5:	5a                   	pop    edx
c0012ca6:	59                   	pop    ecx
c0012ca7:	68 3e c5 02 c0       	push   0xc002c53e
c0012cac:	56                   	push   esi
c0012cad:	e8 9a dc fe ff       	call   c000094c <strcat>
c0012cb2:	5d                   	pop    ebp
c0012cb3:	58                   	pop    eax
c0012cb4:	57                   	push   edi
c0012cb5:	56                   	push   esi
c0012cb6:	e8 91 dc fe ff       	call   c000094c <strcat>
c0012cbb:	83 c4 10             	add    esp,0x10
c0012cbe:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012cc1:	3c 60                	cmp    al,0x60
c0012cc3:	7e 03                	jle    c0012cc8 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012cc5:	83 e8 20             	sub    eax,0x20
c0012cc8:	88 04 24             	mov    BYTE PTR [esp],al
c0012ccb:	88 03                	mov    BYTE PTR [ebx],al
c0012ccd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012cd4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012cda:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012cde:	bf 03 00 00 00       	mov    edi,0x3
c0012ce3:	b8 03 00 00 00       	mov    eax,0x3
c0012ce8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012ceb:	84 d2                	test   dl,dl
c0012ced:	0f 84 91 00 00 00    	je     c0012d84 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012cf3:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012cf6:	80 fa 5c             	cmp    dl,0x5c
c0012cf9:	74 05                	je     c0012d00 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012cfb:	80 fa 2f             	cmp    dl,0x2f
c0012cfe:	75 12                	jne    c0012d12 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d00:	89 c5                	mov    ebp,eax
c0012d02:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d07:	74 09                	je     c0012d12 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d09:	40                   	inc    eax
c0012d0a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d0e:	89 cf                	mov    edi,ecx
c0012d10:	eb d6                	jmp    c0012ce8 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d12:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d17:	75 5b                	jne    c0012d74 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d19:	80 fa 2e             	cmp    dl,0x2e
c0012d1c:	75 56                	jne    c0012d74 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d1e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d22:	74 19                	je     c0012d3d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d24:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d29:	74 53                	je     c0012d7e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d2b:	89 f9                	mov    ecx,edi
c0012d2d:	41                   	inc    ecx
c0012d2e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d31:	80 fa 2f             	cmp    dl,0x2f
c0012d34:	74 f7                	je     c0012d2d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d36:	80 fa 5c             	cmp    dl,0x5c
c0012d39:	74 f2                	je     c0012d2d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d3b:	eb d1                	jmp    c0012d0e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d3d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d42:	74 3a                	je     c0012d7e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d44:	83 f8 03             	cmp    eax,0x3
c0012d47:	74 c5                	je     c0012d0e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d49:	41                   	inc    ecx
c0012d4a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d4d:	80 fa 2f             	cmp    dl,0x2f
c0012d50:	74 f7                	je     c0012d49 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d52:	80 fa 5c             	cmp    dl,0x5c
c0012d55:	74 f2                	je     c0012d49 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d57:	48                   	dec    eax
c0012d58:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d5c:	75 06                	jne    c0012d64 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d5e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d62:	eb f3                	jmp    c0012d57 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012d64:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d68:	74 07                	je     c0012d71 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012d6a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d6e:	48                   	dec    eax
c0012d6f:	eb f3                	jmp    c0012d64 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d71:	40                   	inc    eax
c0012d72:	eb 9a                	jmp    c0012d0e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d74:	80 fa 2f             	cmp    dl,0x2f
c0012d77:	74 95                	je     c0012d0e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d79:	80 fa 5c             	cmp    dl,0x5c
c0012d7c:	74 90                	je     c0012d0e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d7e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012d81:	40                   	inc    eax
c0012d82:	eb 8a                	jmp    c0012d0e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d84:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d88:	83 ec 0c             	sub    esp,0xc
c0012d8b:	53                   	push   ebx
c0012d8c:	e8 db d9 fe ff       	call   c000076c <strlen>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012d99:	75 26                	jne    c0012dc1 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012d9b:	83 ec 0c             	sub    esp,0xc
c0012d9e:	53                   	push   ebx
c0012d9f:	e8 c8 d9 fe ff       	call   c000076c <strlen>
c0012da4:	83 c4 10             	add    esp,0x10
c0012da7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012dac:	74 26                	je     c0012dd4 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012dae:	83 ec 0c             	sub    esp,0xc
c0012db1:	53                   	push   ebx
c0012db2:	e8 b5 d9 fe ff       	call   c000076c <strlen>
c0012db7:	83 c4 10             	add    esp,0x10
c0012dba:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012dbf:	eb c7                	jmp    c0012d88 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012dc1:	83 ec 0c             	sub    esp,0xc
c0012dc4:	53                   	push   ebx
c0012dc5:	e8 a2 d9 fe ff       	call   c000076c <strlen>
c0012dca:	83 c4 10             	add    esp,0x10
c0012dcd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012dd2:	74 c7                	je     c0012d9b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012dd4:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012dda:	5b                   	pop    ebx
c0012ddb:	5e                   	pop    esi
c0012ddc:	5f                   	pop    edi
c0012ddd:	5d                   	pop    ebp
c0012dde:	c3                   	ret    
c0012ddf:	90                   	nop

c0012de0 <File::File(char const*, Process*)>:
c0012de0:	83 ec 0c             	sub    esp,0xc
c0012de3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012de7:	83 ec 08             	sub    esp,0x8
c0012dea:	6a 00                	push   0x0
c0012dec:	50                   	push   eax
c0012ded:	e8 7a e2 ff ff       	call   c001106c <UnixFile::UnixFile(int)>
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	ba 3c af 02 c0       	mov    edx,0xc002af3c
c0012dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dfe:	89 10                	mov    DWORD PTR [eax],edx
c0012e00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e04:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e0e:	83 c0 0d             	add    eax,0xd
c0012e11:	83 ec 04             	sub    esp,0x4
c0012e14:	52                   	push   edx
c0012e15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e19:	50                   	push   eax
c0012e1a:	e8 17 fe ff ff       	call   c0012c36 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e1f:	83 c4 10             	add    esp,0x10
c0012e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e26:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e29:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e30:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e3a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e3e:	90                   	nop
c0012e3f:	83 c4 0c             	add    esp,0xc
c0012e42:	c3                   	ret    
c0012e43:	90                   	nop

c0012e44 <File::open(FileOpenMode)>:
c0012e44:	53                   	push   ebx
c0012e45:	b8 0b 00 00 00       	mov    eax,0xb
c0012e4a:	83 ec 08             	sub    esp,0x8
c0012e4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e51:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012e58:	80 fa 19             	cmp    dl,0x19
c0012e5b:	77 40                	ja     c0012e9d <File::open(FileOpenMode)+0x59>
c0012e5d:	8b 14 95 80 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1680]
c0012e64:	85 d2                	test   edx,edx
c0012e66:	74 35                	je     c0012e9d <File::open(FileOpenMode)+0x59>
c0012e68:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e6e:	85 d2                	test   edx,edx
c0012e70:	74 2b                	je     c0012e9d <File::open(FileOpenMode)+0x59>
c0012e72:	b8 06 00 00 00       	mov    eax,0x6
c0012e77:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012e7b:	75 20                	jne    c0012e9d <File::open(FileOpenMode)+0x59>
c0012e7d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e7f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012e85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e89:	51                   	push   ecx
c0012e8a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012e8d:	51                   	push   ecx
c0012e8e:	52                   	push   edx
c0012e8f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012e92:	83 c4 10             	add    esp,0x10
c0012e95:	85 c0                	test   eax,eax
c0012e97:	75 04                	jne    c0012e9d <File::open(FileOpenMode)+0x59>
c0012e99:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012e9d:	83 c4 08             	add    esp,0x8
c0012ea0:	5b                   	pop    ebx
c0012ea1:	c3                   	ret    

c0012ea2 <File::close()>:
c0012ea2:	53                   	push   ebx
c0012ea3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ea8:	83 ec 08             	sub    esp,0x8
c0012eab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012eaf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012eb6:	80 fa 19             	cmp    dl,0x19
c0012eb9:	77 41                	ja     c0012efc <File::close()+0x5a>
c0012ebb:	8b 1c 95 80 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1680]
c0012ec2:	85 db                	test   ebx,ebx
c0012ec4:	74 36                	je     c0012efc <File::close()+0x5a>
c0012ec6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ecd:	74 2d                	je     c0012efc <File::close()+0x5a>
c0012ecf:	b8 05 00 00 00       	mov    eax,0x5
c0012ed4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ed8:	74 22                	je     c0012efc <File::close()+0x5a>
c0012eda:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012ede:	8b 04 95 80 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1680]
c0012ee5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012eeb:	53                   	push   ebx
c0012eec:	53                   	push   ebx
c0012eed:	8b 10                	mov    edx,DWORD PTR [eax]
c0012eef:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ef5:	50                   	push   eax
c0012ef6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012ef9:	83 c4 10             	add    esp,0x10
c0012efc:	83 c4 08             	add    esp,0x8
c0012eff:	5b                   	pop    ebx
c0012f00:	c3                   	ret    
c0012f01:	90                   	nop

c0012f02 <File::seek(unsigned long long)>:
c0012f02:	56                   	push   esi
c0012f03:	53                   	push   ebx
c0012f04:	b8 0b 00 00 00       	mov    eax,0xb
c0012f09:	51                   	push   ecx
c0012f0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f12:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f1d:	80 fa 19             	cmp    dl,0x19
c0012f20:	77 31                	ja     c0012f53 <File::seek(unsigned long long)+0x51>
c0012f22:	8b 14 95 80 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1680]
c0012f29:	85 d2                	test   edx,edx
c0012f2b:	74 26                	je     c0012f53 <File::seek(unsigned long long)+0x51>
c0012f2d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f33:	85 d2                	test   edx,edx
c0012f35:	74 1c                	je     c0012f53 <File::seek(unsigned long long)+0x51>
c0012f37:	b8 05 00 00 00       	mov    eax,0x5
c0012f3c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012f40:	74 11                	je     c0012f53 <File::seek(unsigned long long)+0x51>
c0012f42:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f44:	53                   	push   ebx
c0012f45:	51                   	push   ecx
c0012f46:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012f4c:	52                   	push   edx
c0012f4d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012f50:	83 c4 10             	add    esp,0x10
c0012f53:	5a                   	pop    edx
c0012f54:	5b                   	pop    ebx
c0012f55:	5e                   	pop    esi
c0012f56:	c3                   	ret    
c0012f57:	90                   	nop

c0012f58 <File::tell(unsigned long long*)>:
c0012f58:	83 ec 0c             	sub    esp,0xc
c0012f5b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f64:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f6b:	80 fa 19             	cmp    dl,0x19
c0012f6e:	77 34                	ja     c0012fa4 <File::tell(unsigned long long*)+0x4c>
c0012f70:	8b 14 95 80 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1680]
c0012f77:	85 d2                	test   edx,edx
c0012f79:	74 29                	je     c0012fa4 <File::tell(unsigned long long*)+0x4c>
c0012f7b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f81:	85 d2                	test   edx,edx
c0012f83:	74 1f                	je     c0012fa4 <File::tell(unsigned long long*)+0x4c>
c0012f85:	b8 05 00 00 00       	mov    eax,0x5
c0012f8a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f8e:	74 14                	je     c0012fa4 <File::tell(unsigned long long*)+0x4c>
c0012f90:	50                   	push   eax
c0012f91:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f97:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f9d:	52                   	push   edx
c0012f9e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012fa1:	83 c4 10             	add    esp,0x10
c0012fa4:	83 c4 0c             	add    esp,0xc
c0012fa7:	c3                   	ret    

c0012fa8 <File::rewind()>:
c0012fa8:	83 ec 10             	sub    esp,0x10
c0012fab:	6a 00                	push   0x0
c0012fad:	6a 00                	push   0x0
c0012faf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb3:	e8 4a ff ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c0012fb8:	83 c4 1c             	add    esp,0x1c
c0012fbb:	c3                   	ret    

c0012fbc <File::unlink()>:
c0012fbc:	83 ec 0c             	sub    esp,0xc
c0012fbf:	b8 0b 00 00 00       	mov    eax,0xb
c0012fc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fc8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fcf:	80 f9 19             	cmp    cl,0x19
c0012fd2:	77 2f                	ja     c0013003 <File::unlink()+0x47>
c0012fd4:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c0012fdb:	85 c9                	test   ecx,ecx
c0012fdd:	74 24                	je     c0013003 <File::unlink()+0x47>
c0012fdf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fe5:	85 c9                	test   ecx,ecx
c0012fe7:	74 1a                	je     c0013003 <File::unlink()+0x47>
c0012fe9:	b8 06 00 00 00       	mov    eax,0x6
c0012fee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ff2:	75 0f                	jne    c0013003 <File::unlink()+0x47>
c0012ff4:	83 c2 0d             	add    edx,0xd
c0012ff7:	50                   	push   eax
c0012ff8:	50                   	push   eax
c0012ff9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ffb:	52                   	push   edx
c0012ffc:	51                   	push   ecx
c0012ffd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013000:	83 c4 10             	add    esp,0x10
c0013003:	83 c4 0c             	add    esp,0xc
c0013006:	c3                   	ret    
c0013007:	90                   	nop

c0013008 <File::rename(char const*)>:
c0013008:	83 ec 0c             	sub    esp,0xc
c001300b:	b8 0b 00 00 00       	mov    eax,0xb
c0013010:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013014:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001301b:	80 f9 19             	cmp    cl,0x19
c001301e:	77 32                	ja     c0013052 <File::rename(char const*)+0x4a>
c0013020:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c0013027:	85 c9                	test   ecx,ecx
c0013029:	74 27                	je     c0013052 <File::rename(char const*)+0x4a>
c001302b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013031:	85 c9                	test   ecx,ecx
c0013033:	74 1d                	je     c0013052 <File::rename(char const*)+0x4a>
c0013035:	b8 06 00 00 00       	mov    eax,0x6
c001303a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001303e:	75 12                	jne    c0013052 <File::rename(char const*)+0x4a>
c0013040:	83 c2 0d             	add    edx,0xd
c0013043:	50                   	push   eax
c0013044:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013046:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001304a:	52                   	push   edx
c001304b:	51                   	push   ecx
c001304c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001304f:	83 c4 10             	add    esp,0x10
c0013052:	83 c4 0c             	add    esp,0xc
c0013055:	c3                   	ret    

c0013056 <File::chfatattr(unsigned char, unsigned char)>:
c0013056:	57                   	push   edi
c0013057:	b8 0b 00 00 00       	mov    eax,0xb
c001305c:	56                   	push   esi
c001305d:	53                   	push   ebx
c001305e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013062:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013066:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001306d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013071:	80 f9 19             	cmp    cl,0x19
c0013074:	77 37                	ja     c00130ad <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013076:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c001307d:	85 c9                	test   ecx,ecx
c001307f:	74 2c                	je     c00130ad <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013081:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013087:	85 c9                	test   ecx,ecx
c0013089:	74 22                	je     c00130ad <File::chfatattr(unsigned char, unsigned char)+0x57>
c001308b:	b8 06 00 00 00       	mov    eax,0x6
c0013090:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013094:	75 17                	jne    c00130ad <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013096:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013098:	89 f0                	mov    eax,esi
c001309a:	83 c2 0d             	add    edx,0xd
c001309d:	0f b6 f0             	movzx  esi,al
c00130a0:	0f b6 db             	movzx  ebx,bl
c00130a3:	56                   	push   esi
c00130a4:	53                   	push   ebx
c00130a5:	52                   	push   edx
c00130a6:	51                   	push   ecx
c00130a7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00130aa:	83 c4 10             	add    esp,0x10
c00130ad:	5b                   	pop    ebx
c00130ae:	5e                   	pop    esi
c00130af:	5f                   	pop    edi
c00130b0:	c3                   	ret    
c00130b1:	90                   	nop

c00130b2 <File::exists()>:
c00130b2:	83 ec 0c             	sub    esp,0xc
c00130b5:	31 c0                	xor    eax,eax
c00130b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130c2:	80 f9 19             	cmp    cl,0x19
c00130c5:	77 24                	ja     c00130eb <File::exists()+0x39>
c00130c7:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c00130ce:	85 c9                	test   ecx,ecx
c00130d0:	74 19                	je     c00130eb <File::exists()+0x39>
c00130d2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130d8:	85 c9                	test   ecx,ecx
c00130da:	74 0f                	je     c00130eb <File::exists()+0x39>
c00130dc:	83 c2 0d             	add    edx,0xd
c00130df:	50                   	push   eax
c00130e0:	50                   	push   eax
c00130e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130e3:	52                   	push   edx
c00130e4:	51                   	push   ecx
c00130e5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00130e8:	83 c4 10             	add    esp,0x10
c00130eb:	83 c4 0c             	add    esp,0xc
c00130ee:	c3                   	ret    
c00130ef:	90                   	nop

c00130f0 <File::stat(unsigned long long*, bool*)>:
c00130f0:	56                   	push   esi
c00130f1:	53                   	push   ebx
c00130f2:	50                   	push   eax
c00130f3:	b8 0b 00 00 00       	mov    eax,0xb
c00130f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130fc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013100:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013107:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001310b:	80 f9 19             	cmp    cl,0x19
c001310e:	77 3d                	ja     c001314d <File::stat(unsigned long long*, bool*)+0x5d>
c0013110:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c0013117:	85 c9                	test   ecx,ecx
c0013119:	74 32                	je     c001314d <File::stat(unsigned long long*, bool*)+0x5d>
c001311b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013121:	85 c9                	test   ecx,ecx
c0013123:	74 28                	je     c001314d <File::stat(unsigned long long*, bool*)+0x5d>
c0013125:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013127:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001312b:	74 13                	je     c0013140 <File::stat(unsigned long long*, bool*)+0x50>
c001312d:	83 ec 04             	sub    esp,0x4
c0013130:	56                   	push   esi
c0013131:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013137:	51                   	push   ecx
c0013138:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001313b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001313e:	eb 0a                	jmp    c001314a <File::stat(unsigned long long*, bool*)+0x5a>
c0013140:	53                   	push   ebx
c0013141:	83 c2 0d             	add    edx,0xd
c0013144:	56                   	push   esi
c0013145:	52                   	push   edx
c0013146:	51                   	push   ecx
c0013147:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001314a:	83 c4 10             	add    esp,0x10
c001314d:	5a                   	pop    edx
c001314e:	5b                   	pop    ebx
c001314f:	5e                   	pop    esi
c0013150:	c3                   	ret    

c0013151 <Fs::setcwd(Process*, char*)>:
c0013151:	55                   	push   ebp
c0013152:	57                   	push   edi
c0013153:	56                   	push   esi
c0013154:	53                   	push   ebx
c0013155:	81 ec 20 02 00 00    	sub    esp,0x220
c001315b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013162:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013168:	57                   	push   edi
c0013169:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013170:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013174:	56                   	push   esi
c0013175:	e8 bc fa ff ff       	call   c0012c36 <Fs::standardiseFiles(char*, char const*, char const*)>
c001317a:	89 34 24             	mov    DWORD PTR [esp],esi
c001317d:	e8 ea d5 fe ff       	call   c000076c <strlen>
c0013182:	83 c4 10             	add    esp,0x10
c0013185:	83 f8 02             	cmp    eax,0x2
c0013188:	77 17                	ja     c00131a1 <Fs::setcwd(Process*, char*)+0x50>
c001318a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001318f:	83 e8 41             	sub    eax,0x41
c0013192:	83 f8 19             	cmp    eax,0x19
c0013195:	76 24                	jbe    c00131bb <Fs::setcwd(Process*, char*)+0x6a>
c0013197:	b8 03 00 00 00       	mov    eax,0x3
c001319c:	e9 e0 00 00 00       	jmp    c0013281 <Fs::setcwd(Process*, char*)+0x130>
c00131a1:	83 ec 0c             	sub    esp,0xc
c00131a4:	56                   	push   esi
c00131a5:	e8 c2 d5 fe ff       	call   c000076c <strlen>
c00131aa:	83 c4 10             	add    esp,0x10
c00131ad:	83 f8 03             	cmp    eax,0x3
c00131b0:	75 34                	jne    c00131e6 <Fs::setcwd(Process*, char*)+0x95>
c00131b2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00131b7:	75 2d                	jne    c00131e6 <Fs::setcwd(Process*, char*)+0x95>
c00131b9:	eb cf                	jmp    c001318a <Fs::setcwd(Process*, char*)+0x39>
c00131bb:	8b 14 85 80 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1680]
c00131c2:	b8 05 00 00 00       	mov    eax,0x5
c00131c7:	85 d2                	test   edx,edx
c00131c9:	0f 84 b2 00 00 00    	je     c0013281 <Fs::setcwd(Process*, char*)+0x130>
c00131cf:	b8 06 00 00 00       	mov    eax,0x6
c00131d4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00131db:	0f 85 92 00 00 00    	jne    c0013273 <Fs::setcwd(Process*, char*)+0x122>
c00131e1:	e9 9b 00 00 00       	jmp    c0013281 <Fs::setcwd(Process*, char*)+0x130>
c00131e6:	83 ec 0c             	sub    esp,0xc
c00131e9:	68 14 01 00 00       	push   0x114
c00131ee:	e8 36 c6 ff ff       	call   c000f829 <malloc>
c00131f3:	83 c4 0c             	add    esp,0xc
c00131f6:	89 c3                	mov    ebx,eax
c00131f8:	55                   	push   ebp
c00131f9:	56                   	push   esi
c00131fa:	50                   	push   eax
c00131fb:	e8 e0 fb ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c0013200:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013205:	83 c4 0c             	add    esp,0xc
c0013208:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001320c:	50                   	push   eax
c001320d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013211:	50                   	push   eax
c0013212:	53                   	push   ebx
c0013213:	e8 d8 fe ff ff       	call   c00130f0 <File::stat(unsigned long long*, bool*)>
c0013218:	83 c4 10             	add    esp,0x10
c001321b:	83 f8 02             	cmp    eax,0x2
c001321e:	74 04                	je     c0013224 <Fs::setcwd(Process*, char*)+0xd3>
c0013220:	85 c0                	test   eax,eax
c0013222:	74 1c                	je     c0013240 <Fs::setcwd(Process*, char*)+0xef>
c0013224:	b8 01 00 00 00       	mov    eax,0x1
c0013229:	85 db                	test   ebx,ebx
c001322b:	74 54                	je     c0013281 <Fs::setcwd(Process*, char*)+0x130>
c001322d:	83 ec 0c             	sub    esp,0xc
c0013230:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013232:	53                   	push   ebx
c0013233:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013236:	83 c4 10             	add    esp,0x10
c0013239:	b8 01 00 00 00       	mov    eax,0x1
c001323e:	eb 41                	jmp    c0013281 <Fs::setcwd(Process*, char*)+0x130>
c0013240:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013245:	75 1c                	jne    c0013263 <Fs::setcwd(Process*, char*)+0x112>
c0013247:	b8 02 00 00 00       	mov    eax,0x2
c001324c:	85 db                	test   ebx,ebx
c001324e:	74 31                	je     c0013281 <Fs::setcwd(Process*, char*)+0x130>
c0013250:	83 ec 0c             	sub    esp,0xc
c0013253:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013255:	53                   	push   ebx
c0013256:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013259:	83 c4 10             	add    esp,0x10
c001325c:	b8 02 00 00 00       	mov    eax,0x2
c0013261:	eb 1e                	jmp    c0013281 <Fs::setcwd(Process*, char*)+0x130>
c0013263:	85 db                	test   ebx,ebx
c0013265:	74 0c                	je     c0013273 <Fs::setcwd(Process*, char*)+0x122>
c0013267:	83 ec 0c             	sub    esp,0xc
c001326a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001326c:	53                   	push   ebx
c001326d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013270:	83 c4 10             	add    esp,0x10
c0013273:	50                   	push   eax
c0013274:	50                   	push   eax
c0013275:	56                   	push   esi
c0013276:	57                   	push   edi
c0013277:	e8 90 d5 fe ff       	call   c000080c <strcpy>
c001327c:	83 c4 10             	add    esp,0x10
c001327f:	31 c0                	xor    eax,eax
c0013281:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013287:	5b                   	pop    ebx
c0013288:	5e                   	pop    esi
c0013289:	5f                   	pop    edi
c001328a:	5d                   	pop    ebp
c001328b:	c3                   	ret    

c001328c <Directory::Directory(char const*, Process*)>:
c001328c:	83 ec 0c             	sub    esp,0xc
c001328f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013293:	83 ec 08             	sub    esp,0x8
c0013296:	6a 00                	push   0x0
c0013298:	50                   	push   eax
c0013299:	e8 ce dd ff ff       	call   c001106c <UnixFile::UnixFile(int)>
c001329e:	83 c4 10             	add    esp,0x10
c00132a1:	ba 58 af 02 c0       	mov    edx,0xc002af58
c00132a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132aa:	89 10                	mov    DWORD PTR [eax],edx
c00132ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132b0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ba:	83 c0 0d             	add    eax,0xd
c00132bd:	83 ec 04             	sub    esp,0x4
c00132c0:	52                   	push   edx
c00132c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132c5:	50                   	push   eax
c00132c6:	e8 6b f9 ff ff       	call   c0012c36 <Fs::standardiseFiles(char*, char const*, char const*)>
c00132cb:	83 c4 10             	add    esp,0x10
c00132ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132d2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00132d5:	8d 50 bf             	lea    edx,[eax-0x41]
c00132d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132dc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00132e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00132ea:	90                   	nop
c00132eb:	83 c4 0c             	add    esp,0xc
c00132ee:	c3                   	ret    
c00132ef:	90                   	nop

c00132f0 <Directory::open()>:
c00132f0:	53                   	push   ebx
c00132f1:	b8 0b 00 00 00       	mov    eax,0xb
c00132f6:	83 ec 08             	sub    esp,0x8
c00132f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132fd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013304:	80 fa 19             	cmp    dl,0x19
c0013307:	77 3d                	ja     c0013346 <Directory::open()+0x56>
c0013309:	8b 14 95 80 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1680]
c0013310:	85 d2                	test   edx,edx
c0013312:	74 32                	je     c0013346 <Directory::open()+0x56>
c0013314:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001331a:	85 d2                	test   edx,edx
c001331c:	74 28                	je     c0013346 <Directory::open()+0x56>
c001331e:	b8 06 00 00 00       	mov    eax,0x6
c0013323:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013327:	75 1d                	jne    c0013346 <Directory::open()+0x56>
c0013329:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001332f:	50                   	push   eax
c0013330:	8b 02                	mov    eax,DWORD PTR [edx]
c0013332:	51                   	push   ecx
c0013333:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013336:	51                   	push   ecx
c0013337:	52                   	push   edx
c0013338:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001333b:	83 c4 10             	add    esp,0x10
c001333e:	85 c0                	test   eax,eax
c0013340:	75 04                	jne    c0013346 <Directory::open()+0x56>
c0013342:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013346:	83 c4 08             	add    esp,0x8
c0013349:	5b                   	pop    ebx
c001334a:	c3                   	ret    
c001334b:	90                   	nop

c001334c <Directory::close()>:
c001334c:	53                   	push   ebx
c001334d:	b8 0b 00 00 00       	mov    eax,0xb
c0013352:	83 ec 08             	sub    esp,0x8
c0013355:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013359:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013360:	80 fa 19             	cmp    dl,0x19
c0013363:	77 41                	ja     c00133a6 <Directory::close()+0x5a>
c0013365:	8b 1c 95 80 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1680]
c001336c:	85 db                	test   ebx,ebx
c001336e:	74 36                	je     c00133a6 <Directory::close()+0x5a>
c0013370:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013377:	74 2d                	je     c00133a6 <Directory::close()+0x5a>
c0013379:	b8 05 00 00 00       	mov    eax,0x5
c001337e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013382:	74 22                	je     c00133a6 <Directory::close()+0x5a>
c0013384:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013388:	8b 04 95 80 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1680]
c001338f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013395:	53                   	push   ebx
c0013396:	53                   	push   ebx
c0013397:	8b 10                	mov    edx,DWORD PTR [eax]
c0013399:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001339f:	50                   	push   eax
c00133a0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00133a3:	83 c4 10             	add    esp,0x10
c00133a6:	83 c4 08             	add    esp,0x8
c00133a9:	5b                   	pop    ebx
c00133aa:	c3                   	ret    
c00133ab:	90                   	nop

c00133ac <Directory::unlink()>:
c00133ac:	83 ec 0c             	sub    esp,0xc
c00133af:	b8 0b 00 00 00       	mov    eax,0xb
c00133b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133bf:	80 f9 19             	cmp    cl,0x19
c00133c2:	77 2f                	ja     c00133f3 <Directory::unlink()+0x47>
c00133c4:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c00133cb:	85 c9                	test   ecx,ecx
c00133cd:	74 24                	je     c00133f3 <Directory::unlink()+0x47>
c00133cf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133d5:	85 c9                	test   ecx,ecx
c00133d7:	74 1a                	je     c00133f3 <Directory::unlink()+0x47>
c00133d9:	b8 06 00 00 00       	mov    eax,0x6
c00133de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133e2:	75 0f                	jne    c00133f3 <Directory::unlink()+0x47>
c00133e4:	83 c2 0d             	add    edx,0xd
c00133e7:	50                   	push   eax
c00133e8:	50                   	push   eax
c00133e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133eb:	52                   	push   edx
c00133ec:	51                   	push   ecx
c00133ed:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00133f0:	83 c4 10             	add    esp,0x10
c00133f3:	83 c4 0c             	add    esp,0xc
c00133f6:	c3                   	ret    
c00133f7:	90                   	nop

c00133f8 <Directory::rename(char const*)>:
c00133f8:	83 ec 0c             	sub    esp,0xc
c00133fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013400:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013404:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001340b:	80 f9 19             	cmp    cl,0x19
c001340e:	77 32                	ja     c0013442 <Directory::rename(char const*)+0x4a>
c0013410:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c0013417:	85 c9                	test   ecx,ecx
c0013419:	74 27                	je     c0013442 <Directory::rename(char const*)+0x4a>
c001341b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013421:	85 c9                	test   ecx,ecx
c0013423:	74 1d                	je     c0013442 <Directory::rename(char const*)+0x4a>
c0013425:	b8 06 00 00 00       	mov    eax,0x6
c001342a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001342e:	75 12                	jne    c0013442 <Directory::rename(char const*)+0x4a>
c0013430:	83 c2 0d             	add    edx,0xd
c0013433:	50                   	push   eax
c0013434:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013436:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001343a:	52                   	push   edx
c001343b:	51                   	push   ecx
c001343c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001343f:	83 c4 10             	add    esp,0x10
c0013442:	83 c4 0c             	add    esp,0xc
c0013445:	c3                   	ret    

c0013446 <Directory::exists()>:
c0013446:	83 ec 0c             	sub    esp,0xc
c0013449:	31 c0                	xor    eax,eax
c001344b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001344f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013456:	80 f9 19             	cmp    cl,0x19
c0013459:	77 24                	ja     c001347f <Directory::exists()+0x39>
c001345b:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c0013462:	85 c9                	test   ecx,ecx
c0013464:	74 19                	je     c001347f <Directory::exists()+0x39>
c0013466:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001346c:	85 c9                	test   ecx,ecx
c001346e:	74 0f                	je     c001347f <Directory::exists()+0x39>
c0013470:	83 c2 0d             	add    edx,0xd
c0013473:	50                   	push   eax
c0013474:	50                   	push   eax
c0013475:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013477:	52                   	push   edx
c0013478:	51                   	push   ecx
c0013479:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001347c:	83 c4 10             	add    esp,0x10
c001347f:	83 c4 0c             	add    esp,0xc
c0013482:	c3                   	ret    
c0013483:	90                   	nop

c0013484 <Directory::read(dirent*)>:
c0013484:	83 ec 1c             	sub    esp,0x1c
c0013487:	b8 0b 00 00 00       	mov    eax,0xb
c001348c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013490:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013497:	80 fa 19             	cmp    dl,0x19
c001349a:	77 30                	ja     c00134cc <Directory::read(dirent*)+0x48>
c001349c:	8b 14 95 80 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1680]
c00134a3:	85 d2                	test   edx,edx
c00134a5:	74 25                	je     c00134cc <Directory::read(dirent*)+0x48>
c00134a7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00134ae:	74 1c                	je     c00134cc <Directory::read(dirent*)+0x48>
c00134b0:	83 ec 0c             	sub    esp,0xc
c00134b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134b5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00134b9:	52                   	push   edx
c00134ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00134be:	6a 00                	push   0x0
c00134c0:	68 10 01 00 00       	push   0x110
c00134c5:	51                   	push   ecx
c00134c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00134c9:	83 c4 20             	add    esp,0x20
c00134cc:	83 c4 1c             	add    esp,0x1c
c00134cf:	c3                   	ret    

c00134d0 <Directory::create()>:
c00134d0:	83 ec 0c             	sub    esp,0xc
c00134d3:	b8 0b 00 00 00       	mov    eax,0xb
c00134d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134e3:	80 f9 19             	cmp    cl,0x19
c00134e6:	77 2f                	ja     c0013517 <Directory::create()+0x47>
c00134e8:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c00134ef:	85 c9                	test   ecx,ecx
c00134f1:	74 24                	je     c0013517 <Directory::create()+0x47>
c00134f3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134f9:	85 c9                	test   ecx,ecx
c00134fb:	74 1a                	je     c0013517 <Directory::create()+0x47>
c00134fd:	b8 06 00 00 00       	mov    eax,0x6
c0013502:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013506:	75 0f                	jne    c0013517 <Directory::create()+0x47>
c0013508:	83 c2 0d             	add    edx,0xd
c001350b:	50                   	push   eax
c001350c:	50                   	push   eax
c001350d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001350f:	52                   	push   edx
c0013510:	51                   	push   ecx
c0013511:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013514:	83 c4 10             	add    esp,0x10
c0013517:	83 c4 0c             	add    esp,0xc
c001351a:	c3                   	ret    
c001351b:	90                   	nop

c001351c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001351c:	b8 0a 00 00 00       	mov    eax,0xa
c0013521:	c3                   	ret    

c0013522 <Bus::Bus(char const*)>:
c0013522:	83 ec 0c             	sub    esp,0xc
c0013525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013529:	83 ec 08             	sub    esp,0x8
c001352c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013530:	50                   	push   eax
c0013531:	e8 88 09 00 00       	call   c0013ebe <Device::Device(char const*)>
c0013536:	83 c4 10             	add    esp,0x10
c0013539:	ba 74 af 02 c0       	mov    edx,0xc002af74
c001353e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013542:	89 10                	mov    DWORD PTR [eax],edx
c0013544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013548:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013552:	90                   	nop
c0013553:	83 c4 0c             	add    esp,0xc
c0013556:	c3                   	ret    
c0013557:	90                   	nop

c0013558 <Bus::~Bus()>:
c0013558:	83 ec 0c             	sub    esp,0xc
c001355b:	ba 74 af 02 c0       	mov    edx,0xc002af74
c0013560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013564:	89 10                	mov    DWORD PTR [eax],edx
c0013566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356a:	83 ec 0c             	sub    esp,0xc
c001356d:	50                   	push   eax
c001356e:	e8 15 06 00 00       	call   c0013b88 <Device::~Device()>
c0013573:	83 c4 10             	add    esp,0x10
c0013576:	90                   	nop
c0013577:	83 c4 0c             	add    esp,0xc
c001357a:	c3                   	ret    
c001357b:	90                   	nop

c001357c <Bus::~Bus()>:
c001357c:	83 ec 0c             	sub    esp,0xc
c001357f:	83 ec 0c             	sub    esp,0xc
c0013582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013586:	e8 cd ff ff ff       	call   c0013558 <Bus::~Bus()>
c001358b:	83 c4 10             	add    esp,0x10
c001358e:	83 ec 08             	sub    esp,0x8
c0013591:	68 58 01 00 00       	push   0x158
c0013596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001359a:	e8 0a f2 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c001359f:	83 c4 10             	add    esp,0x10
c00135a2:	83 c4 0c             	add    esp,0xc
c00135a5:	c3                   	ret    

c00135a6 <Buzzer::Buzzer(char const*)>:
c00135a6:	83 ec 0c             	sub    esp,0xc
c00135a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ad:	83 ec 08             	sub    esp,0x8
c00135b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135b4:	50                   	push   eax
c00135b5:	e8 04 09 00 00       	call   c0013ebe <Device::Device(char const*)>
c00135ba:	83 c4 10             	add    esp,0x10
c00135bd:	ba a0 af 02 c0       	mov    edx,0xc002afa0
c00135c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c6:	89 10                	mov    DWORD PTR [eax],edx
c00135c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135cc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00135d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135da:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00135e4:	90                   	nop
c00135e5:	83 c4 0c             	add    esp,0xc
c00135e8:	c3                   	ret    
c00135e9:	90                   	nop

c00135ea <Buzzer::~Buzzer()>:
c00135ea:	83 ec 0c             	sub    esp,0xc
c00135ed:	ba a0 af 02 c0       	mov    edx,0xc002afa0
c00135f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f6:	89 10                	mov    DWORD PTR [eax],edx
c00135f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135fc:	83 ec 0c             	sub    esp,0xc
c00135ff:	50                   	push   eax
c0013600:	e8 83 05 00 00       	call   c0013b88 <Device::~Device()>
c0013605:	83 c4 10             	add    esp,0x10
c0013608:	90                   	nop
c0013609:	83 c4 0c             	add    esp,0xc
c001360c:	c3                   	ret    
c001360d:	90                   	nop

c001360e <Buzzer::~Buzzer()>:
c001360e:	83 ec 0c             	sub    esp,0xc
c0013611:	83 ec 0c             	sub    esp,0xc
c0013614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013618:	e8 cd ff ff ff       	call   c00135ea <Buzzer::~Buzzer()>
c001361d:	83 c4 10             	add    esp,0x10
c0013620:	83 ec 08             	sub    esp,0x8
c0013623:	68 5c 01 00 00       	push   0x15c
c0013628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001362c:	e8 78 f1 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0013631:	83 c4 10             	add    esp,0x10
c0013634:	83 c4 0c             	add    esp,0xc
c0013637:	c3                   	ret    

c0013638 <Buzzer::stop()>:
c0013638:	83 ec 14             	sub    esp,0x14
c001363b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001363f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013641:	6a 00                	push   0x0
c0013643:	50                   	push   eax
c0013644:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013647:	83 c4 1c             	add    esp,0x1c
c001364a:	c3                   	ret    

c001364b <beepThread(void*)>:
c001364b:	53                   	push   ebx
c001364c:	83 ec 08             	sub    esp,0x8
c001364f:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c0013654:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013658:	48                   	dec    eax
c0013659:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001365e:	75 01                	jne    c0013661 <beepThread(void*)+0x16>
c0013660:	fb                   	sti    
c0013661:	50                   	push   eax
c0013662:	50                   	push   eax
c0013663:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013668:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001366e:	52                   	push   edx
c001366f:	50                   	push   eax
c0013670:	e8 e6 a9 00 00       	call   c001e05b <nanoSleep(unsigned long long)>
c0013675:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013678:	e8 bb ff ff ff       	call   c0013638 <Buzzer::stop()>
c001367d:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013685:	83 c4 18             	add    esp,0x18
c0013688:	5b                   	pop    ebx
c0013689:	e9 c9 a8 00 00       	jmp    c001df57 <blockTask(TaskState)>

c001368e <Buzzer::beep(int, int, bool)>:
c001368e:	57                   	push   edi
c001368f:	56                   	push   esi
c0013690:	53                   	push   ebx
c0013691:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013695:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013699:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001369d:	52                   	push   edx
c001369e:	52                   	push   edx
c001369f:	8b 06                	mov    eax,DWORD PTR [esi]
c00136a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136a5:	56                   	push   esi
c00136a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136a9:	83 c4 10             	add    esp,0x10
c00136ac:	89 f8                	mov    eax,edi
c00136ae:	84 c0                	test   al,al
c00136b0:	74 1f                	je     c00136d1 <Buzzer::beep(int, int, bool)+0x43>
c00136b2:	50                   	push   eax
c00136b3:	50                   	push   eax
c00136b4:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00136ba:	99                   	cdq    
c00136bb:	52                   	push   edx
c00136bc:	50                   	push   eax
c00136bd:	e8 99 a9 00 00       	call   c001e05b <nanoSleep(unsigned long long)>
c00136c2:	83 c4 10             	add    esp,0x10
c00136c5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00136c9:	5b                   	pop    ebx
c00136ca:	5e                   	pop    esi
c00136cb:	5f                   	pop    edi
c00136cc:	e9 67 ff ff ff       	jmp    c0013638 <Buzzer::stop()>
c00136d1:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00136d7:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00136dc:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00136e4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00136e8:	c7 44 24 14 4b 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc001364b
c00136f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136f4:	5b                   	pop    ebx
c00136f5:	5e                   	pop    esi
c00136f6:	5f                   	pop    edi
c00136f7:	e9 60 a4 00 00       	jmp    c001db5c <Process::createThread(void (*)(void*), void*, int)>

c00136fc <User::loadClockSettings(int)>:
c00136fc:	53                   	push   ebx
c00136fd:	83 ec 14             	sub    esp,0x14
c0013700:	68 14 01 00 00       	push   0x114
c0013705:	e8 1f c1 ff ff       	call   c000f829 <malloc>
c001370a:	83 c4 0c             	add    esp,0xc
c001370d:	89 c3                	mov    ebx,eax
c001370f:	ff 35 b0 f8 02 c0    	push   DWORD PTR ds:0xc002f8b0
c0013715:	68 c8 af 02 c0       	push   0xc002afc8
c001371a:	50                   	push   eax
c001371b:	e8 c0 f6 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c0013720:	58                   	pop    eax
c0013721:	5a                   	pop    edx
c0013722:	6a 01                	push   0x1
c0013724:	53                   	push   ebx
c0013725:	e8 1a f7 ff ff       	call   c0012e44 <File::open(FileOpenMode)>
c001372a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001372d:	e8 70 f7 ff ff       	call   c0012ea2 <File::close()>
c0013732:	83 c4 10             	add    esp,0x10
c0013735:	85 db                	test   ebx,ebx
c0013737:	74 0f                	je     c0013748 <User::loadClockSettings(int)+0x4c>
c0013739:	8b 03                	mov    eax,DWORD PTR [ebx]
c001373b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001373f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013742:	83 c4 08             	add    esp,0x8
c0013745:	5b                   	pop    ebx
c0013746:	ff e0                	jmp    eax
c0013748:	83 c4 08             	add    esp,0x8
c001374b:	5b                   	pop    ebx
c001374c:	c3                   	ret    
c001374d:	90                   	nop

c001374e <Clock::Clock(char const*)>:
c001374e:	83 ec 0c             	sub    esp,0xc
c0013751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013755:	83 ec 08             	sub    esp,0x8
c0013758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001375c:	50                   	push   eax
c001375d:	e8 5c 07 00 00       	call   c0013ebe <Device::Device(char const*)>
c0013762:	83 c4 10             	add    esp,0x10
c0013765:	ba f0 af 02 c0       	mov    edx,0xc002aff0
c001376a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001376e:	89 10                	mov    DWORD PTR [eax],edx
c0013770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013774:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001377e:	90                   	nop
c001377f:	83 c4 0c             	add    esp,0xc
c0013782:	c3                   	ret    
c0013783:	90                   	nop

c0013784 <Clock::~Clock()>:
c0013784:	83 ec 0c             	sub    esp,0xc
c0013787:	ba f0 af 02 c0       	mov    edx,0xc002aff0
c001378c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013790:	89 10                	mov    DWORD PTR [eax],edx
c0013792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013796:	83 ec 0c             	sub    esp,0xc
c0013799:	50                   	push   eax
c001379a:	e8 e9 03 00 00       	call   c0013b88 <Device::~Device()>
c001379f:	83 c4 10             	add    esp,0x10
c00137a2:	90                   	nop
c00137a3:	83 c4 0c             	add    esp,0xc
c00137a6:	c3                   	ret    
c00137a7:	90                   	nop

c00137a8 <Clock::~Clock()>:
c00137a8:	83 ec 0c             	sub    esp,0xc
c00137ab:	83 ec 0c             	sub    esp,0xc
c00137ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b2:	e8 cd ff ff ff       	call   c0013784 <Clock::~Clock()>
c00137b7:	83 c4 10             	add    esp,0x10
c00137ba:	83 ec 08             	sub    esp,0x8
c00137bd:	68 58 01 00 00       	push   0x158
c00137c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137c6:	e8 de ef ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c00137cb:	83 c4 10             	add    esp,0x10
c00137ce:	83 c4 0c             	add    esp,0xc
c00137d1:	c3                   	ret    

c00137d2 <Clock::timeInSecondsLocal()>:
c00137d2:	53                   	push   ebx
c00137d3:	83 ec 14             	sub    esp,0x14
c00137d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137da:	8b 10                	mov    edx,DWORD PTR [eax]
c00137dc:	50                   	push   eax
c00137dd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00137e0:	0f b6 0d fc e4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e4fc
c00137e7:	03 0d 00 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e500
c00137ed:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137f3:	89 cb                	mov    ebx,ecx
c00137f5:	c1 fb 1f             	sar    ebx,0x1f
c00137f8:	01 c8                	add    eax,ecx
c00137fa:	11 da                	adc    edx,ebx
c00137fc:	83 c4 10             	add    esp,0x10
c00137ff:	31 c9                	xor    ecx,ecx
c0013801:	80 3d fd e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4fd,0x0
c0013808:	74 05                	je     c001380f <Clock::timeInSecondsLocal()+0x3d>
c001380a:	b9 08 07 00 00       	mov    ecx,0x708
c001380f:	31 db                	xor    ebx,ebx
c0013811:	01 c8                	add    eax,ecx
c0013813:	11 da                	adc    edx,ebx
c0013815:	83 c4 08             	add    esp,0x8
c0013818:	5b                   	pop    ebx
c0013819:	c3                   	ret    

c001381a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001381a:	57                   	push   edi
c001381b:	56                   	push   esi
c001381c:	53                   	push   ebx
c001381d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013821:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013825:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013827:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001382b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001382e:	0f b6 05 fc e4 02 c0 	movzx  eax,BYTE PTR ds:0xc002e4fc
c0013835:	03 05 00 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e500
c001383b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013841:	99                   	cdq    
c0013842:	29 c6                	sub    esi,eax
c0013844:	19 d7                	sbb    edi,edx
c0013846:	89 f0                	mov    eax,esi
c0013848:	89 fa                	mov    edx,edi
c001384a:	31 f6                	xor    esi,esi
c001384c:	80 3d fd e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4fd,0x0
c0013853:	74 05                	je     c001385a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013855:	be 08 07 00 00       	mov    esi,0x708
c001385a:	31 ff                	xor    edi,edi
c001385c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013860:	29 f0                	sub    eax,esi
c0013862:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013866:	19 fa                	sbb    edx,edi
c0013868:	89 d8                	mov    eax,ebx
c001386a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001386e:	5b                   	pop    ebx
c001386f:	5e                   	pop    esi
c0013870:	5f                   	pop    edi
c0013871:	ff e0                	jmp    eax

c0013873 <datetimeToSeconds(datetime_t)>:
c0013873:	55                   	push   ebp
c0013874:	57                   	push   edi
c0013875:	56                   	push   esi
c0013876:	53                   	push   ebx
c0013877:	83 ec 14             	sub    esp,0x14
c001387a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001387e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013882:	89 d3                	mov    ebx,edx
c0013884:	0f b6 c6             	movzx  eax,dh
c0013887:	c1 eb 10             	shr    ebx,0x10
c001388a:	48                   	dec    eax
c001388b:	66 81 eb 6c 07       	sub    bx,0x76c
c0013890:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013894:	0f b6 f5             	movzx  esi,ch
c0013897:	89 cf                	mov    edi,ecx
c0013899:	6b f6 3c             	imul   esi,esi,0x3c
c001389c:	c1 ef 10             	shr    edi,0x10
c001389f:	0f b6 c9             	movzx  ecx,cl
c00138a2:	89 f8                	mov    eax,edi
c00138a4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138aa:	0f b6 f8             	movzx  edi,al
c00138ad:	0f b6 d2             	movzx  edx,dl
c00138b0:	01 fe                	add    esi,edi
c00138b2:	01 f1                	add    ecx,esi
c00138b4:	0f b7 f3             	movzx  esi,bx
c00138b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00138bb:	c1 f9 1f             	sar    ecx,0x1f
c00138be:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00138c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00138c7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00138cc:	8b 0c 8d 40 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4fc0]
c00138d3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00138d7:	76 29                	jbe    c0013902 <datetimeToSeconds(datetime_t)+0x8f>
c00138d9:	f6 c3 03             	test   bl,0x3
c00138dc:	75 24                	jne    c0013902 <datetimeToSeconds(datetime_t)+0x8f>
c00138de:	31 d2                	xor    edx,edx
c00138e0:	bf 64 00 00 00       	mov    edi,0x64
c00138e5:	89 d8                	mov    eax,ebx
c00138e7:	66 f7 f7             	div    di
c00138ea:	66 85 d2             	test   dx,dx
c00138ed:	75 12                	jne    c0013901 <datetimeToSeconds(datetime_t)+0x8e>
c00138ef:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00138f5:	bf 90 01 00 00       	mov    edi,0x190
c00138fa:	99                   	cdq    
c00138fb:	f7 ff                	idiv   edi
c00138fd:	85 d2                	test   edx,edx
c00138ff:	75 01                	jne    c0013902 <datetimeToSeconds(datetime_t)+0x8f>
c0013901:	41                   	inc    ecx
c0013902:	66 83 fb 46          	cmp    bx,0x46
c0013906:	76 45                	jbe    c001394d <datetimeToSeconds(datetime_t)+0xda>
c0013908:	bb 46 00 00 00       	mov    ebx,0x46
c001390d:	bf 64 00 00 00       	mov    edi,0x64
c0013912:	bd 90 01 00 00       	mov    ebp,0x190
c0013917:	b8 6d 01 00 00       	mov    eax,0x16d
c001391c:	f6 c3 03             	test   bl,0x3
c001391f:	75 23                	jne    c0013944 <datetimeToSeconds(datetime_t)+0xd1>
c0013921:	89 d8                	mov    eax,ebx
c0013923:	99                   	cdq    
c0013924:	f7 ff                	idiv   edi
c0013926:	b8 6e 01 00 00       	mov    eax,0x16e
c001392b:	85 d2                	test   edx,edx
c001392d:	75 15                	jne    c0013944 <datetimeToSeconds(datetime_t)+0xd1>
c001392f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013935:	99                   	cdq    
c0013936:	f7 fd                	idiv   ebp
c0013938:	83 fa 01             	cmp    edx,0x1
c001393b:	19 c0                	sbb    eax,eax
c001393d:	f7 d0                	not    eax
c001393f:	05 6e 01 00 00       	add    eax,0x16e
c0013944:	01 c1                	add    ecx,eax
c0013946:	43                   	inc    ebx
c0013947:	39 f3                	cmp    ebx,esi
c0013949:	7c cc                	jl     c0013917 <datetimeToSeconds(datetime_t)+0xa4>
c001394b:	eb 35                	jmp    c0013982 <datetimeToSeconds(datetime_t)+0x10f>
c001394d:	74 33                	je     c0013982 <datetimeToSeconds(datetime_t)+0x10f>
c001394f:	b8 45 00 00 00       	mov    eax,0x45
c0013954:	89 c2                	mov    edx,eax
c0013956:	83 e2 03             	and    edx,0x3
c0013959:	39 f0                	cmp    eax,esi
c001395b:	7e 0f                	jle    c001396c <datetimeToSeconds(datetime_t)+0xf9>
c001395d:	83 fa 01             	cmp    edx,0x1
c0013960:	19 d2                	sbb    edx,edx
c0013962:	48                   	dec    eax
c0013963:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001396a:	eb e8                	jmp    c0013954 <datetimeToSeconds(datetime_t)+0xe1>
c001396c:	b8 6d 01 00 00       	mov    eax,0x16d
c0013971:	85 d2                	test   edx,edx
c0013973:	75 0b                	jne    c0013980 <datetimeToSeconds(datetime_t)+0x10d>
c0013975:	66 83 fb 01          	cmp    bx,0x1
c0013979:	19 c0                	sbb    eax,eax
c001397b:	05 6e 01 00 00       	add    eax,0x16e
c0013980:	29 c1                	sub    ecx,eax
c0013982:	b8 80 51 01 00       	mov    eax,0x15180
c0013987:	f7 e9                	imul   ecx
c0013989:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001398d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013991:	83 c4 14             	add    esp,0x14
c0013994:	5b                   	pop    ebx
c0013995:	5e                   	pop    esi
c0013996:	5f                   	pop    edi
c0013997:	5d                   	pop    ebp
c0013998:	c3                   	ret    
c0013999:	90                   	nop

c001399a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001399a:	57                   	push   edi
c001399b:	56                   	push   esi
c001399c:	53                   	push   ebx
c001399d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00139a3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00139a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139ae:	e8 c0 fe ff ff       	call   c0013873 <datetimeToSeconds(datetime_t)>
c00139b3:	59                   	pop    ecx
c00139b4:	0f b6 0d fc e4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e4fc
c00139bb:	5b                   	pop    ebx
c00139bc:	03 0d 00 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e500
c00139c2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00139c8:	89 cb                	mov    ebx,ecx
c00139ca:	c1 fb 1f             	sar    ebx,0x1f
c00139cd:	29 c8                	sub    eax,ecx
c00139cf:	19 da                	sbb    edx,ebx
c00139d1:	31 c9                	xor    ecx,ecx
c00139d3:	80 3d fd e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4fd,0x0
c00139da:	74 05                	je     c00139e1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00139dc:	b9 08 07 00 00       	mov    ecx,0x708
c00139e1:	31 db                	xor    ebx,ebx
c00139e3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00139e7:	29 c8                	sub    eax,ecx
c00139e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139ed:	19 da                	sbb    edx,ebx
c00139ef:	89 f8                	mov    eax,edi
c00139f1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00139f5:	5b                   	pop    ebx
c00139f6:	5e                   	pop    esi
c00139f7:	5f                   	pop    edi
c00139f8:	ff e0                	jmp    eax

c00139fa <secondsToDatetime(unsigned long long)>:
c00139fa:	55                   	push   ebp
c00139fb:	57                   	push   edi
c00139fc:	56                   	push   esi
c00139fd:	53                   	push   ebx
c00139fe:	83 ec 1c             	sub    esp,0x1c
c0013a01:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a05:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a09:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a0d:	6a 00                	push   0x0
c0013a0f:	68 80 51 01 00       	push   0x15180
c0013a14:	55                   	push   ebp
c0013a15:	57                   	push   edi
c0013a16:	e8 09 32 01 00       	call   c0026c24 <__udivdi3>
c0013a1b:	83 c4 10             	add    esp,0x10
c0013a1e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a28:	6a 00                	push   0x0
c0013a2a:	68 80 51 01 00       	push   0x15180
c0013a2f:	55                   	push   ebp
c0013a30:	57                   	push   edi
c0013a31:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a36:	e8 e9 32 01 00       	call   c0026d24 <__umoddi3>
c0013a3b:	83 c4 10             	add    esp,0x10
c0013a3e:	99                   	cdq    
c0013a3f:	f7 ff                	idiv   edi
c0013a41:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a46:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a49:	89 d0                	mov    eax,edx
c0013a4b:	99                   	cdq    
c0013a4c:	f7 ff                	idiv   edi
c0013a4e:	85 db                	test   ebx,ebx
c0013a50:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013a53:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013a56:	79 11                	jns    c0013a69 <secondsToDatetime(unsigned long long)+0x6f>
c0013a58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013a5c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013a62:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a67:	eb 07                	jmp    c0013a70 <secondsToDatetime(unsigned long long)+0x76>
c0013a69:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a6e:	89 d8                	mov    eax,ebx
c0013a70:	bf b4 05 00 00       	mov    edi,0x5b4
c0013a75:	99                   	cdq    
c0013a76:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013a7b:	f7 f9                	idiv   ecx
c0013a7d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013a82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a86:	31 d2                	xor    edx,edx
c0013a88:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013a90:	01 c3                	add    ebx,eax
c0013a92:	89 d8                	mov    eax,ebx
c0013a94:	f7 f1                	div    ecx
c0013a96:	31 d2                	xor    edx,edx
c0013a98:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013a9b:	89 d8                	mov    eax,ebx
c0013a9d:	f7 f7                	div    edi
c0013a9f:	31 d2                	xor    edx,edx
c0013aa1:	29 c1                	sub    ecx,eax
c0013aa3:	89 d8                	mov    eax,ebx
c0013aa5:	f7 f5                	div    ebp
c0013aa7:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013aac:	29 c1                	sub    ecx,eax
c0013aae:	31 d2                	xor    edx,edx
c0013ab0:	89 c8                	mov    eax,ecx
c0013ab2:	f7 f5                	div    ebp
c0013ab4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013abd:	31 d2                	xor    edx,edx
c0013abf:	89 c8                	mov    eax,ecx
c0013ac1:	f7 f5                	div    ebp
c0013ac3:	31 d2                	xor    edx,edx
c0013ac5:	01 c3                	add    ebx,eax
c0013ac7:	89 c8                	mov    eax,ecx
c0013ac9:	f7 f7                	div    edi
c0013acb:	bf 99 00 00 00       	mov    edi,0x99
c0013ad0:	29 c3                	sub    ebx,eax
c0013ad2:	31 d2                	xor    edx,edx
c0013ad4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013adc:	29 c3                	sub    ebx,eax
c0013ade:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013ae1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013ae4:	bb 05 00 00 00       	mov    ebx,0x5
c0013ae9:	83 c1 02             	add    ecx,0x2
c0013aec:	89 c8                	mov    eax,ecx
c0013aee:	f7 f7                	div    edi
c0013af0:	31 d2                	xor    edx,edx
c0013af2:	89 c7                	mov    edi,eax
c0013af4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013afa:	83 c0 02             	add    eax,0x2
c0013afd:	f7 f3                	div    ebx
c0013aff:	89 eb                	mov    ebx,ebp
c0013b01:	29 c3                	sub    ebx,eax
c0013b03:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b09:	88 1e                	mov    BYTE PTR [esi],bl
c0013b0b:	19 c0                	sbb    eax,eax
c0013b0d:	31 d2                	xor    edx,edx
c0013b0f:	83 e0 0c             	and    eax,0xc
c0013b12:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b16:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b1e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b22:	83 f9 01             	cmp    ecx,0x1
c0013b25:	0f 96 c2             	setbe  dl
c0013b28:	41                   	inc    ecx
c0013b29:	01 d0                	add    eax,edx
c0013b2b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b2e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b32:	83 c4 1c             	add    esp,0x1c
c0013b35:	89 f0                	mov    eax,esi
c0013b37:	5b                   	pop    ebx
c0013b38:	5e                   	pop    esi
c0013b39:	5f                   	pop    edi
c0013b3a:	5d                   	pop    ebp
c0013b3b:	c2 04 00             	ret    0x4

c0013b3e <Clock::timeInDatetimeLocal()>:
c0013b3e:	53                   	push   ebx
c0013b3f:	83 ec 14             	sub    esp,0x14
c0013b42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b4a:	e8 83 fc ff ff       	call   c00137d2 <Clock::timeInSecondsLocal()>
c0013b4f:	83 c4 0c             	add    esp,0xc
c0013b52:	52                   	push   edx
c0013b53:	50                   	push   eax
c0013b54:	53                   	push   ebx
c0013b55:	e8 a0 fe ff ff       	call   c00139fa <secondsToDatetime(unsigned long long)>
c0013b5a:	89 d8                	mov    eax,ebx
c0013b5c:	83 c4 14             	add    esp,0x14
c0013b5f:	5b                   	pop    ebx
c0013b60:	c2 04 00             	ret    0x4
c0013b63:	90                   	nop

c0013b64 <Device::hibernate()>:
c0013b64:	c3                   	ret    
c0013b65:	90                   	nop

c0013b66 <Device::wake()>:
c0013b66:	c3                   	ret    
c0013b67:	90                   	nop

c0013b68 <Device::detect()>:
c0013b68:	c3                   	ret    
c0013b69:	90                   	nop

c0013b6a <Device::disableLegacy()>:
c0013b6a:	c3                   	ret    
c0013b6b:	90                   	nop

c0013b6c <Device::powerSaving(PowerSavingLevel)>:
c0013b6c:	c3                   	ret    
c0013b6d:	90                   	nop

c0013b6e <DriverlessDevice::close(int, int, void*)>:
c0013b6e:	31 c0                	xor    eax,eax
c0013b70:	c3                   	ret    
c0013b71:	90                   	nop

c0013b72 <DriverlessDevice::detect()>:
c0013b72:	c3                   	ret    
c0013b73:	90                   	nop

c0013b74 <DriverlessDevice::open(int, int, void*)>:
c0013b74:	83 ec 18             	sub    esp,0x18
c0013b77:	68 70 b0 02 c0       	push   0xc002b070
c0013b7c:	e8 6e 66 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0013b81:	83 c8 ff             	or     eax,0xffffffff
c0013b84:	83 c4 1c             	add    esp,0x1c
c0013b87:	c3                   	ret    

c0013b88 <Device::~Device()>:
c0013b88:	ba d0 b0 02 c0       	mov    edx,0xc002b0d0
c0013b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b91:	89 10                	mov    DWORD PTR [eax],edx
c0013b93:	90                   	nop
c0013b94:	c3                   	ret    
c0013b95:	90                   	nop

c0013b96 <Device::~Device()>:
c0013b96:	83 ec 0c             	sub    esp,0xc
c0013b99:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013b9d:	e8 e6 ff ff ff       	call   c0013b88 <Device::~Device()>
c0013ba2:	83 c4 04             	add    esp,0x4
c0013ba5:	83 ec 08             	sub    esp,0x8
c0013ba8:	68 58 01 00 00       	push   0x158
c0013bad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb1:	e8 f3 eb ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0013bb6:	83 c4 10             	add    esp,0x10
c0013bb9:	83 c4 0c             	add    esp,0xc
c0013bbc:	c3                   	ret    
c0013bbd:	90                   	nop

c0013bbe <Device::findAndLoadDriver()>:
c0013bbe:	c7 44 24 04 8e b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b08e
c0013bc6:	e9 b6 ec ff ff       	jmp    c0012881 <Dbg::kprintf(char const*, ...)>
c0013bcb:	90                   	nop

c0013bcc <Device::preOpenPCI(PCIDeviceInfo)>:
c0013bcc:	57                   	push   edi
c0013bcd:	b9 09 00 00 00       	mov    ecx,0x9
c0013bd2:	56                   	push   esi
c0013bd3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013bd7:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013bdb:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013be5:	81 c7 18 01 00 00    	add    edi,0x118
c0013beb:	fc                   	cld    
c0013bec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013bee:	5e                   	pop    esi
c0013bef:	5f                   	pop    edi
c0013bf0:	c3                   	ret    
c0013bf1:	90                   	nop

c0013bf2 <Device::preOpenACPI(void*, char*, char*)>:
c0013bf2:	57                   	push   edi
c0013bf3:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013bf8:	56                   	push   esi
c0013bf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c01:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013c0b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013c11:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013c17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c1d:	b9 0e 00 00 00       	mov    ecx,0xe
c0013c22:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013c28:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c2e:	5e                   	pop    esi
c0013c2f:	5f                   	pop    edi
c0013c30:	c3                   	ret    
c0013c31:	90                   	nop

c0013c32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c36:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c3b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c42:	75 0b                	jne    c0013c4f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c46:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c4a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013c4d:	eb 1e                	jmp    c0013c6d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013c4f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0013c54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c5a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013c60:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c62:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c6a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013c6d:	ff e0                	jmp    eax
c0013c6f:	90                   	nop

c0013c70 <Device::getParent()>:
c0013c70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c74:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013c7a:	c3                   	ret    
c0013c7b:	90                   	nop

c0013c7c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c80:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c85:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c8c:	75 0b                	jne    c0013c99 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013c8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c90:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c94:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013c97:	eb 1e                	jmp    c0013cb7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013c99:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0013c9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ca4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013caa:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cb4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013cb7:	ff e0                	jmp    eax
c0013cb9:	90                   	nop

c0013cba <Device::addChild(Device*)>:
c0013cba:	53                   	push   ebx
c0013cbb:	83 ec 08             	sub    esp,0x8
c0013cbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013cc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cc6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013ccc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013cd2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013cd4:	85 d2                	test   edx,edx
c0013cd6:	74 04                	je     c0013cdc <Device::addChild(Device*)+0x22>
c0013cd8:	89 d3                	mov    ebx,edx
c0013cda:	eb f6                	jmp    c0013cd2 <Device::addChild(Device*)+0x18>
c0013cdc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013cdf:	83 ec 0c             	sub    esp,0xc
c0013ce2:	6a 08                	push   0x8
c0013ce4:	e8 40 bb ff ff       	call   c000f829 <malloc>
c0013ce9:	89 03                	mov    DWORD PTR [ebx],eax
c0013ceb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cf1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cf8:	83 c4 18             	add    esp,0x18
c0013cfb:	5b                   	pop    ebx
c0013cfc:	c3                   	ret    
c0013cfd:	90                   	nop

c0013cfe <Device::removeAllChildren()>:
c0013cfe:	56                   	push   esi
c0013cff:	53                   	push   ebx
c0013d00:	52                   	push   edx
c0013d01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d05:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d0b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d0e:	74 17                	je     c0013d27 <Device::removeAllChildren()+0x29>
c0013d10:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d13:	85 c0                	test   eax,eax
c0013d15:	74 0c                	je     c0013d23 <Device::removeAllChildren()+0x25>
c0013d17:	83 ec 0c             	sub    esp,0xc
c0013d1a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d1c:	50                   	push   eax
c0013d1d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d20:	83 c4 10             	add    esp,0x10
c0013d23:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d25:	eb e4                	jmp    c0013d0b <Device::removeAllChildren()+0xd>
c0013d27:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d33:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d40:	58                   	pop    eax
c0013d41:	5b                   	pop    ebx
c0013d42:	5e                   	pop    esi
c0013d43:	c3                   	ret    

c0013d44 <Device::hibernateAll()>:
c0013d44:	53                   	push   ebx
c0013d45:	83 ec 14             	sub    esp,0x14
c0013d48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d4e:	53                   	push   ebx
c0013d4f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013d52:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d58:	83 c4 10             	add    esp,0x10
c0013d5b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d5e:	74 0f                	je     c0013d6f <Device::hibernateAll()+0x2b>
c0013d60:	83 ec 0c             	sub    esp,0xc
c0013d63:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d66:	e8 d9 ff ff ff       	call   c0013d44 <Device::hibernateAll()>
c0013d6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d6d:	eb e9                	jmp    c0013d58 <Device::hibernateAll()+0x14>
c0013d6f:	83 c4 08             	add    esp,0x8
c0013d72:	5b                   	pop    ebx
c0013d73:	c3                   	ret    

c0013d74 <Device::wakeAll()>:
c0013d74:	53                   	push   ebx
c0013d75:	83 ec 14             	sub    esp,0x14
c0013d78:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d7e:	53                   	push   ebx
c0013d7f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013d82:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d88:	83 c4 10             	add    esp,0x10
c0013d8b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d8e:	74 0f                	je     c0013d9f <Device::wakeAll()+0x2b>
c0013d90:	83 ec 0c             	sub    esp,0xc
c0013d93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d96:	e8 d9 ff ff ff       	call   c0013d74 <Device::wakeAll()>
c0013d9b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d9d:	eb e9                	jmp    c0013d88 <Device::wakeAll()+0x14>
c0013d9f:	83 c4 08             	add    esp,0x8
c0013da2:	5b                   	pop    ebx
c0013da3:	c3                   	ret    

c0013da4 <Device::detectAll()>:
c0013da4:	53                   	push   ebx
c0013da5:	83 ec 14             	sub    esp,0x14
c0013da8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dae:	53                   	push   ebx
c0013daf:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013db2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013db8:	83 c4 10             	add    esp,0x10
c0013dbb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dbe:	74 0f                	je     c0013dcf <Device::detectAll()+0x2b>
c0013dc0:	83 ec 0c             	sub    esp,0xc
c0013dc3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dc6:	e8 d9 ff ff ff       	call   c0013da4 <Device::detectAll()>
c0013dcb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dcd:	eb e9                	jmp    c0013db8 <Device::detectAll()+0x14>
c0013dcf:	83 c4 08             	add    esp,0x8
c0013dd2:	5b                   	pop    ebx
c0013dd3:	c3                   	ret    

c0013dd4 <Device::disableLegacyAll()>:
c0013dd4:	53                   	push   ebx
c0013dd5:	83 ec 14             	sub    esp,0x14
c0013dd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ddc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dde:	53                   	push   ebx
c0013ddf:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013de2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013de8:	83 c4 10             	add    esp,0x10
c0013deb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dee:	74 0f                	je     c0013dff <Device::disableLegacyAll()+0x2b>
c0013df0:	83 ec 0c             	sub    esp,0xc
c0013df3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013df6:	e8 d9 ff ff ff       	call   c0013dd4 <Device::disableLegacyAll()>
c0013dfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dfd:	eb e9                	jmp    c0013de8 <Device::disableLegacyAll()+0x14>
c0013dff:	83 c4 08             	add    esp,0x8
c0013e02:	5b                   	pop    ebx
c0013e03:	c3                   	ret    

c0013e04 <Device::loadDriversForAll()>:
c0013e04:	53                   	push   ebx
c0013e05:	83 ec 08             	sub    esp,0x8
c0013e08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e0c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013e13:	75 0c                	jne    c0013e21 <Device::loadDriversForAll()+0x1d>
c0013e15:	83 ec 0c             	sub    esp,0xc
c0013e18:	53                   	push   ebx
c0013e19:	e8 a0 fd ff ff       	call   c0013bbe <Device::findAndLoadDriver()>
c0013e1e:	83 c4 10             	add    esp,0x10
c0013e21:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e27:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e2a:	74 12                	je     c0013e3e <Device::loadDriversForAll()+0x3a>
c0013e2c:	83 ec 0c             	sub    esp,0xc
c0013e2f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e32:	e8 cd ff ff ff       	call   c0013e04 <Device::loadDriversForAll()>
c0013e37:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e39:	83 c4 10             	add    esp,0x10
c0013e3c:	eb e9                	jmp    c0013e27 <Device::loadDriversForAll()+0x23>
c0013e3e:	83 c4 08             	add    esp,0x8
c0013e41:	5b                   	pop    ebx
c0013e42:	c3                   	ret    
c0013e43:	90                   	nop

c0013e44 <Device::closeAll()>:
c0013e44:	53                   	push   ebx
c0013e45:	83 ec 08             	sub    esp,0x8
c0013e48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e4e:	6a 00                	push   0x0
c0013e50:	6a 00                	push   0x0
c0013e52:	6a 00                	push   0x0
c0013e54:	53                   	push   ebx
c0013e55:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e5e:	83 c4 10             	add    esp,0x10
c0013e61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e64:	74 0f                	je     c0013e75 <Device::closeAll()+0x31>
c0013e66:	83 ec 0c             	sub    esp,0xc
c0013e69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e6c:	e8 d3 ff ff ff       	call   c0013e44 <Device::closeAll()>
c0013e71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e73:	eb e9                	jmp    c0013e5e <Device::closeAll()+0x1a>
c0013e75:	83 c4 08             	add    esp,0x8
c0013e78:	5b                   	pop    ebx
c0013e79:	c3                   	ret    

c0013e7a <Device::powerSavingAll(PowerSavingLevel)>:
c0013e7a:	56                   	push   esi
c0013e7b:	53                   	push   ebx
c0013e7c:	83 ec 0c             	sub    esp,0xc
c0013e7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e83:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e89:	56                   	push   esi
c0013e8a:	53                   	push   ebx
c0013e8b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013e8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e94:	83 c4 10             	add    esp,0x10
c0013e97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e9a:	74 0f                	je     c0013eab <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013e9c:	52                   	push   edx
c0013e9d:	52                   	push   edx
c0013e9e:	56                   	push   esi
c0013e9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ea2:	e8 d3 ff ff ff       	call   c0013e7a <Device::powerSavingAll(PowerSavingLevel)>
c0013ea7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ea9:	eb e9                	jmp    c0013e94 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013eab:	58                   	pop    eax
c0013eac:	5b                   	pop    ebx
c0013ead:	5e                   	pop    esi
c0013eae:	c3                   	ret    
c0013eaf:	90                   	nop

c0013eb0 <Device::setName(char const*)>:
c0013eb0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013eb8:	e9 4f c9 fe ff       	jmp    c000080c <strcpy>
c0013ebd:	90                   	nop

c0013ebe <Device::Device(char const*)>:
c0013ebe:	83 ec 1c             	sub    esp,0x1c
c0013ec1:	ba d0 b0 02 c0       	mov    edx,0xc002b0d0
c0013ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eca:	89 10                	mov    DWORD PTR [eax],edx
c0013ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ed0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013eda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ede:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ee8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013efa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f04:	83 ec 08             	sub    esp,0x8
c0013f07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f0f:	e8 9c ff ff ff       	call   c0013eb0 <Device::setName(char const*)>
c0013f14:	83 c4 10             	add    esp,0x10
c0013f17:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f1f:	83 ec 0c             	sub    esp,0xc
c0013f22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f26:	e8 fe b8 ff ff       	call   c000f829 <malloc>
c0013f2b:	83 c4 10             	add    esp,0x10
c0013f2e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f34:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f3b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f3f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f49:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f59:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f6a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013f71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f75:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f80:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f8e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f9c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013fa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013faa:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013fb4:	90                   	nop
c0013fb5:	83 c4 1c             	add    esp,0x1c
c0013fb8:	c3                   	ret    
c0013fb9:	90                   	nop

c0013fba <Device::getName()>:
c0013fba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fbe:	05 d0 00 00 00       	add    eax,0xd0
c0013fc3:	c3                   	ret    

c0013fc4 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013fc4:	83 ec 0c             	sub    esp,0xc
c0013fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fcb:	83 ec 08             	sub    esp,0x8
c0013fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fd2:	50                   	push   eax
c0013fd3:	e8 e6 fe ff ff       	call   c0013ebe <Device::Device(char const*)>
c0013fd8:	83 c4 10             	add    esp,0x10
c0013fdb:	ba fc b0 02 c0       	mov    edx,0xc002b0fc
c0013fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fe4:	89 10                	mov    DWORD PTR [eax],edx
c0013fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fea:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013ff4:	90                   	nop
c0013ff5:	83 c4 0c             	add    esp,0xc
c0013ff8:	c3                   	ret    
c0013ff9:	90                   	nop

c0013ffa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013ffa:	57                   	push   edi
c0013ffb:	56                   	push   esi
c0013ffc:	53                   	push   ebx
c0013ffd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014001:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014005:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014009:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001400f:	75 0c                	jne    c001401d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014011:	52                   	push   edx
c0014012:	52                   	push   edx
c0014013:	53                   	push   ebx
c0014014:	56                   	push   esi
c0014015:	e8 46 4b 01 00       	call   c0028b60 <LinkedList<Device>::addElement(Device*)>
c001401a:	83 c4 10             	add    esp,0x10
c001401d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014023:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014026:	74 12                	je     c001403a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014028:	50                   	push   eax
c0014029:	57                   	push   edi
c001402a:	56                   	push   esi
c001402b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001402e:	e8 c7 ff ff ff       	call   c0013ffa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014033:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014035:	83 c4 10             	add    esp,0x10
c0014038:	eb e9                	jmp    c0014023 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001403a:	5b                   	pop    ebx
c001403b:	5e                   	pop    esi
c001403c:	5f                   	pop    edi
c001403d:	c3                   	ret    

c001403e <getDevicesOfType(DeviceType)>:
c001403e:	53                   	push   ebx
c001403f:	83 ec 14             	sub    esp,0x14
c0014042:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014046:	53                   	push   ebx
c0014047:	e8 f0 4b 01 00       	call   c0028c3c <LinkedList<Device>::LinkedList()>
c001404c:	83 c4 0c             	add    esp,0xc
c001404f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014053:	53                   	push   ebx
c0014054:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c001405a:	e8 9b ff ff ff       	call   c0013ffa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001405f:	89 d8                	mov    eax,ebx
c0014061:	83 c4 18             	add    esp,0x18
c0014064:	5b                   	pop    ebx
c0014065:	c2 04 00             	ret    0x4

c0014068 <HardDiskController::HardDiskController(char const*)>:
c0014068:	83 ec 0c             	sub    esp,0xc
c001406b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001406f:	83 ec 08             	sub    esp,0x8
c0014072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014076:	50                   	push   eax
c0014077:	e8 42 fe ff ff       	call   c0013ebe <Device::Device(char const*)>
c001407c:	83 c4 10             	add    esp,0x10
c001407f:	ba 28 b1 02 c0       	mov    edx,0xc002b128
c0014084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014088:	89 10                	mov    DWORD PTR [eax],edx
c001408a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001408e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014098:	90                   	nop
c0014099:	83 c4 0c             	add    esp,0xc
c001409c:	c3                   	ret    
c001409d:	90                   	nop

c001409e <HardDiskController::~HardDiskController()>:
c001409e:	83 ec 0c             	sub    esp,0xc
c00140a1:	ba 28 b1 02 c0       	mov    edx,0xc002b128
c00140a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140aa:	89 10                	mov    DWORD PTR [eax],edx
c00140ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b0:	83 ec 0c             	sub    esp,0xc
c00140b3:	50                   	push   eax
c00140b4:	e8 cf fa ff ff       	call   c0013b88 <Device::~Device()>
c00140b9:	83 c4 10             	add    esp,0x10
c00140bc:	90                   	nop
c00140bd:	83 c4 0c             	add    esp,0xc
c00140c0:	c3                   	ret    
c00140c1:	90                   	nop

c00140c2 <HardDiskController::~HardDiskController()>:
c00140c2:	83 ec 0c             	sub    esp,0xc
c00140c5:	83 ec 0c             	sub    esp,0xc
c00140c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140cc:	e8 cd ff ff ff       	call   c001409e <HardDiskController::~HardDiskController()>
c00140d1:	83 c4 10             	add    esp,0x10
c00140d4:	83 ec 08             	sub    esp,0x8
c00140d7:	68 58 01 00 00       	push   0x158
c00140dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140e0:	e8 c4 e6 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c00140e5:	83 c4 10             	add    esp,0x10
c00140e8:	83 c4 0c             	add    esp,0xc
c00140eb:	c3                   	ret    

c00140ec <PhysicalDisk::eject()>:
c00140ec:	83 c8 ff             	or     eax,0xffffffff
c00140ef:	c3                   	ret    

c00140f0 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00140f0:	83 ec 0c             	sub    esp,0xc
c00140f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f7:	83 ec 08             	sub    esp,0x8
c00140fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140fe:	50                   	push   eax
c00140ff:	e8 ba fd ff ff       	call   c0013ebe <Device::Device(char const*)>
c0014104:	83 c4 10             	add    esp,0x10
c0014107:	ba 54 b1 02 c0       	mov    edx,0xc002b154
c001410c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014110:	89 10                	mov    DWORD PTR [eax],edx
c0014112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014116:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001411d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014121:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001413a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001413e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014148:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014152:	90                   	nop
c0014153:	83 c4 0c             	add    esp,0xc
c0014156:	c3                   	ret    
c0014157:	90                   	nop

c0014158 <PhysicalDisk::startCache()>:
c0014158:	56                   	push   esi
c0014159:	53                   	push   ebx
c001415a:	83 ec 10             	sub    esp,0x10
c001415d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014161:	6a 44                	push   0x44
c0014163:	e8 c1 b6 ff ff       	call   c000f829 <malloc>
c0014168:	89 c6                	mov    esi,eax
c001416a:	58                   	pop    eax
c001416b:	5a                   	pop    edx
c001416c:	53                   	push   ebx
c001416d:	56                   	push   esi
c001416e:	e8 77 28 00 00       	call   c00169ea <VCache::VCache(PhysicalDisk*)>
c0014173:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014179:	83 c4 14             	add    esp,0x14
c001417c:	5b                   	pop    ebx
c001417d:	5e                   	pop    esi
c001417e:	c3                   	ret    
c001417f:	90                   	nop

c0014180 <PhysicalDisk::~PhysicalDisk()>:
c0014180:	83 ec 0c             	sub    esp,0xc
c0014183:	ba 54 b1 02 c0       	mov    edx,0xc002b154
c0014188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001418c:	89 10                	mov    DWORD PTR [eax],edx
c001418e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014192:	83 ec 0c             	sub    esp,0xc
c0014195:	50                   	push   eax
c0014196:	e8 ed f9 ff ff       	call   c0013b88 <Device::~Device()>
c001419b:	83 c4 10             	add    esp,0x10
c001419e:	90                   	nop
c001419f:	83 c4 0c             	add    esp,0xc
c00141a2:	c3                   	ret    
c00141a3:	90                   	nop

c00141a4 <PhysicalDisk::~PhysicalDisk()>:
c00141a4:	83 ec 0c             	sub    esp,0xc
c00141a7:	83 ec 0c             	sub    esp,0xc
c00141aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141ae:	e8 cd ff ff ff       	call   c0014180 <PhysicalDisk::~PhysicalDisk()>
c00141b3:	83 c4 10             	add    esp,0x10
c00141b6:	83 ec 08             	sub    esp,0x8
c00141b9:	68 6c 01 00 00       	push   0x16c
c00141be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141c2:	e8 e2 e5 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c00141c7:	83 c4 10             	add    esp,0x10
c00141ca:	83 c4 0c             	add    esp,0xc
c00141cd:	c3                   	ret    

c00141ce <FPU::FPU(char const*)>:
c00141ce:	83 ec 0c             	sub    esp,0xc
c00141d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141d5:	83 ec 08             	sub    esp,0x8
c00141d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141dc:	50                   	push   eax
c00141dd:	e8 dc fc ff ff       	call   c0013ebe <Device::Device(char const*)>
c00141e2:	83 c4 10             	add    esp,0x10
c00141e5:	ba 98 b1 02 c0       	mov    edx,0xc002b198
c00141ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ee:	89 10                	mov    DWORD PTR [eax],edx
c00141f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f4:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00141fe:	90                   	nop
c00141ff:	83 c4 0c             	add    esp,0xc
c0014202:	c3                   	ret    
c0014203:	90                   	nop

c0014204 <FPU::~FPU()>:
c0014204:	83 ec 0c             	sub    esp,0xc
c0014207:	ba 98 b1 02 c0       	mov    edx,0xc002b198
c001420c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014210:	89 10                	mov    DWORD PTR [eax],edx
c0014212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014216:	83 ec 0c             	sub    esp,0xc
c0014219:	50                   	push   eax
c001421a:	e8 69 f9 ff ff       	call   c0013b88 <Device::~Device()>
c001421f:	83 c4 10             	add    esp,0x10
c0014222:	90                   	nop
c0014223:	83 c4 0c             	add    esp,0xc
c0014226:	c3                   	ret    
c0014227:	90                   	nop

c0014228 <FPU::~FPU()>:
c0014228:	83 ec 0c             	sub    esp,0xc
c001422b:	83 ec 0c             	sub    esp,0xc
c001422e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014232:	e8 cd ff ff ff       	call   c0014204 <FPU::~FPU()>
c0014237:	83 c4 10             	add    esp,0x10
c001423a:	83 ec 08             	sub    esp,0x8
c001423d:	68 58 01 00 00       	push   0x158
c0014242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014246:	e8 5e e5 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c001424b:	83 c4 10             	add    esp,0x10
c001424e:	83 c4 0c             	add    esp,0xc
c0014251:	c3                   	ret    

c0014252 <setupFPU()>:
c0014252:	53                   	push   ebx
c0014253:	83 ec 08             	sub    esp,0x8
c0014256:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c001425c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014263:	74 19                	je     c001427e <setupFPU()+0x2c>
c0014265:	83 ec 0c             	sub    esp,0xc
c0014268:	68 58 01 00 00       	push   0x158
c001426d:	e8 b7 b5 ff ff       	call   c000f829 <malloc>
c0014272:	89 c3                	mov    ebx,eax
c0014274:	89 04 24             	mov    DWORD PTR [esp],eax
c0014277:	e8 2a 15 01 00       	call   c00257a6 <AVX::AVX()>
c001427c:	eb 5b                	jmp    c00142d9 <setupFPU()+0x87>
c001427e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014284:	84 c0                	test   al,al
c0014286:	79 19                	jns    c00142a1 <setupFPU()+0x4f>
c0014288:	83 ec 0c             	sub    esp,0xc
c001428b:	68 58 01 00 00       	push   0x158
c0014290:	e8 94 b5 ff ff       	call   c000f829 <malloc>
c0014295:	89 c3                	mov    ebx,eax
c0014297:	89 04 24             	mov    DWORD PTR [esp],eax
c001429a:	e8 2d 16 01 00       	call   c00258cc <SSE::SSE()>
c001429f:	eb 38                	jmp    c00142d9 <setupFPU()+0x87>
c00142a1:	a8 20                	test   al,0x20
c00142a3:	74 19                	je     c00142be <setupFPU()+0x6c>
c00142a5:	83 ec 0c             	sub    esp,0xc
c00142a8:	68 58 01 00 00       	push   0x158
c00142ad:	e8 77 b5 ff ff       	call   c000f829 <malloc>
c00142b2:	89 c3                	mov    ebx,eax
c00142b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00142b7:	e8 7a 15 01 00       	call   c0025836 <MMX::MMX()>
c00142bc:	eb 1b                	jmp    c00142d9 <setupFPU()+0x87>
c00142be:	a8 10                	test   al,0x10
c00142c0:	74 1c                	je     c00142de <setupFPU()+0x8c>
c00142c2:	83 ec 0c             	sub    esp,0xc
c00142c5:	68 58 01 00 00       	push   0x158
c00142ca:	e8 5a b5 ff ff       	call   c000f829 <malloc>
c00142cf:	89 c3                	mov    ebx,eax
c00142d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00142d4:	e8 81 16 01 00       	call   c002595a <x87::x87()>
c00142d9:	83 c4 10             	add    esp,0x10
c00142dc:	eb 24                	jmp    c0014302 <setupFPU()+0xb0>
c00142de:	83 e0 ef             	and    eax,0xffffffef
c00142e1:	83 ec 0c             	sub    esp,0xc
c00142e4:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00142ea:	68 84 b1 02 c0       	push   0xc002b184
c00142ef:	e8 8d e5 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00142f4:	0f 20 c0             	mov    eax,cr0
c00142f7:	83 c8 04             	or     eax,0x4
c00142fa:	0f 22 c0             	mov    cr0,eax
c00142fd:	31 db                	xor    ebx,ebx
c00142ff:	83 c4 10             	add    esp,0x10
c0014302:	89 d8                	mov    eax,ebx
c0014304:	83 c4 08             	add    esp,0x8
c0014307:	5b                   	pop    ebx
c0014308:	c3                   	ret    
c0014309:	90                   	nop

c001430a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001430a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001430e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014312:	c1 e0 04             	shl    eax,0x4
c0014315:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014319:	8d 50 10             	lea    edx,[eax+0x10]
c001431c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014322:	74 08                	je     c001432c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014324:	83 c0 04             	add    eax,0x4
c0014327:	39 d0                	cmp    eax,edx
c0014329:	75 f1                	jne    c001431c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001432b:	c3                   	ret    
c001432c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014336:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014340:	eb e2                	jmp    c0014324 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014342 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014342:	57                   	push   edi
c0014343:	31 c0                	xor    eax,eax
c0014345:	56                   	push   esi
c0014346:	53                   	push   ebx
c0014347:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001434b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001434f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014353:	89 da                	mov    edx,ebx
c0014355:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014359:	c1 e2 04             	shl    edx,0x4
c001435c:	01 ca                	add    edx,ecx
c001435e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014366:	74 16                	je     c001437e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014368:	40                   	inc    eax
c0014369:	83 f8 04             	cmp    eax,0x4
c001436c:	75 f0                	jne    c001435e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001436e:	c7 44 24 10 c8 b1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b1c8
c0014376:	5b                   	pop    ebx
c0014377:	5e                   	pop    esi
c0014378:	5f                   	pop    edi
c0014379:	e9 71 5e 00 00       	jmp    c001a1ef <Krnl::panic(char const*)>
c001437e:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014381:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014384:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001438a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014390:	5b                   	pop    ebx
c0014391:	5e                   	pop    esi
c0014392:	5f                   	pop    edi
c0014393:	c3                   	ret    

c0014394 <doubleFault(regs*, void*)>:
c0014394:	55                   	push   ebp
c0014395:	89 e5                	mov    ebp,esp
c0014397:	83 ec 08             	sub    esp,0x8
c001439a:	83 ec 0c             	sub    esp,0xc
c001439d:	68 d5 b1 02 c0       	push   0xc002b1d5
c00143a2:	e8 48 5e 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c00143a7:	83 c4 10             	add    esp,0x10
c00143aa:	90                   	nop
c00143ab:	c9                   	leave  
c00143ac:	c3                   	ret    
c00143ad:	90                   	nop

c00143ae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143ae:	56                   	push   esi
c00143af:	53                   	push   ebx
c00143b0:	50                   	push   eax
c00143b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143b9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143be:	75 35                	jne    c00143f5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00143c0:	8d 43 20             	lea    eax,[ebx+0x20]
c00143c3:	31 d2                	xor    edx,edx
c00143c5:	89 c1                	mov    ecx,eax
c00143c7:	c1 e1 04             	shl    ecx,0x4
c00143ca:	01 f1                	add    ecx,esi
c00143cc:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00143d4:	74 3e                	je     c0014414 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00143d6:	42                   	inc    edx
c00143d7:	83 fa 04             	cmp    edx,0x4
c00143da:	75 f0                	jne    c00143cc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00143dc:	83 ec 0c             	sub    esp,0xc
c00143df:	68 ef b1 02 c0       	push   0xc002b1ef
c00143e4:	e8 06 5e 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c00143e9:	83 c4 10             	add    esp,0x10
c00143ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00143f1:	5a                   	pop    edx
c00143f2:	5b                   	pop    ebx
c00143f3:	5e                   	pop    esi
c00143f4:	c3                   	ret    
c00143f5:	83 ec 0c             	sub    esp,0xc
c00143f8:	56                   	push   esi
c00143f9:	e8 bc fb ff ff       	call   c0013fba <Device::getName()>
c00143fe:	83 c4 10             	add    esp,0x10
c0014401:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014404:	75 ba                	jne    c00143c0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014406:	83 fb 0f             	cmp    ebx,0xf
c0014409:	7f 29                	jg     c0014434 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001440b:	0f b6 9b e0 d5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2a20]
c0014412:	eb ac                	jmp    c00143c0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014414:	8d 04 82             	lea    eax,[edx+eax*4]
c0014417:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001441b:	8d 04 86             	lea    eax,[esi+eax*4]
c001441e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014424:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014428:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001442e:	89 d8                	mov    eax,ebx
c0014430:	5a                   	pop    edx
c0014431:	5b                   	pop    ebx
c0014432:	5e                   	pop    esi
c0014433:	c3                   	ret    
c0014434:	83 ec 0c             	sub    esp,0xc
c0014437:	68 e2 b1 02 c0       	push   0xc002b1e2
c001443c:	e8 ae 5d 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0014441:	83 c4 10             	add    esp,0x10
c0014444:	e9 77 ff ff ff       	jmp    c00143c0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014449:	90                   	nop

c001444a <InterruptController::clearAllHandlers(int, bool)>:
c001444a:	56                   	push   esi
c001444b:	53                   	push   ebx
c001444c:	52                   	push   edx
c001444d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014451:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014455:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001445a:	75 61                	jne    c00144bd <InterruptController::clearAllHandlers(int, bool)+0x73>
c001445c:	8d 46 20             	lea    eax,[esi+0x20]
c001445f:	c1 e6 04             	shl    esi,0x4
c0014462:	c1 e0 04             	shl    eax,0x4
c0014465:	01 de                	add    esi,ebx
c0014467:	01 d8                	add    eax,ebx
c0014469:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014473:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001447d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014487:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014491:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001449b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144a5:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144af:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00144b9:	58                   	pop    eax
c00144ba:	5b                   	pop    ebx
c00144bb:	5e                   	pop    esi
c00144bc:	c3                   	ret    
c00144bd:	83 ec 0c             	sub    esp,0xc
c00144c0:	53                   	push   ebx
c00144c1:	e8 f4 fa ff ff       	call   c0013fba <Device::getName()>
c00144c6:	83 c4 10             	add    esp,0x10
c00144c9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00144cc:	75 8e                	jne    c001445c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144ce:	83 fe 0f             	cmp    esi,0xf
c00144d1:	7f 09                	jg     c00144dc <InterruptController::clearAllHandlers(int, bool)+0x92>
c00144d3:	0f b6 b6 e0 d5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2a20]
c00144da:	eb 80                	jmp    c001445c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144dc:	83 ec 0c             	sub    esp,0xc
c00144df:	68 fc b1 02 c0       	push   0xc002b1fc
c00144e4:	e8 06 5d 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c00144e9:	83 c4 10             	add    esp,0x10
c00144ec:	e9 6b ff ff ff       	jmp    c001445c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144f1:	90                   	nop

c00144f2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00144f2:	56                   	push   esi
c00144f3:	53                   	push   ebx
c00144f4:	52                   	push   edx
c00144f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00144f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144fd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014502:	75 3a                	jne    c001453e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014504:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014508:	8d 50 20             	lea    edx,[eax+0x20]
c001450b:	c1 e2 04             	shl    edx,0x4
c001450e:	8d 04 16             	lea    eax,[esi+edx*1]
c0014511:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014515:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001451b:	74 0b                	je     c0014528 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001451d:	83 c0 04             	add    eax,0x4
c0014520:	39 d0                	cmp    eax,edx
c0014522:	75 f1                	jne    c0014515 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014524:	58                   	pop    eax
c0014525:	5b                   	pop    ebx
c0014526:	5e                   	pop    esi
c0014527:	c3                   	ret    
c0014528:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014532:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001453c:	eb df                	jmp    c001451d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001453e:	83 ec 0c             	sub    esp,0xc
c0014541:	56                   	push   esi
c0014542:	e8 73 fa ff ff       	call   c0013fba <Device::getName()>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001454d:	75 b5                	jne    c0014504 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001454f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014554:	7f 11                	jg     c0014567 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014556:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001455a:	0f b6 80 e0 d5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2a20]
c0014561:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014565:	eb 9d                	jmp    c0014504 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014567:	83 ec 0c             	sub    esp,0xc
c001456a:	68 09 b2 02 c0       	push   0xc002b209
c001456f:	e8 7b 5c 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0014574:	83 c4 10             	add    esp,0x10
c0014577:	eb 8b                	jmp    c0014504 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014579 <nmiHandler(regs*, void*)>:
c0014579:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001457e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014582:	e9 09 aa ff ff       	jmp    c000ef90 <Computer::handleNMI()>

c0014587 <int_handler>:
c0014587:	55                   	push   ebp
c0014588:	57                   	push   edi
c0014589:	56                   	push   esi
c001458a:	53                   	push   ebx
c001458b:	83 ec 0c             	sub    esp,0xc
c001458e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014592:	80 3d a4 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eea4,0x0
c0014599:	74 0b                	je     c00145a6 <int_handler+0x1f>
c001459b:	fa                   	cli    
c001459c:	f4                   	hlt    
c001459d:	80 3d a4 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eea4,0x0
c00145a4:	75 f5                	jne    c001459b <int_handler+0x14>
c00145a6:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00145ab:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00145b4:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00145ba:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145bd:	83 f8 17             	cmp    eax,0x17
c00145c0:	77 13                	ja     c00145d5 <int_handler+0x4e>
c00145c2:	83 ec 08             	sub    esp,0x8
c00145c5:	8b 17                	mov    edx,DWORD PTR [edi]
c00145c7:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145ca:	0f b6 c0             	movzx  eax,al
c00145cd:	50                   	push   eax
c00145ce:	57                   	push   edi
c00145cf:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00145d2:	83 c4 10             	add    esp,0x10
c00145d5:	83 c3 15             	add    ebx,0x15
c00145d8:	c1 e3 04             	shl    ebx,0x4
c00145db:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00145df:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00145e6:	31 db                	xor    ebx,ebx
c00145e8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00145ec:	85 c0                	test   eax,eax
c00145ee:	74 13                	je     c0014603 <int_handler+0x7c>
c00145f0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00145f3:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00145f7:	74 1c                	je     c0014615 <int_handler+0x8e>
c00145f9:	83 ec 08             	sub    esp,0x8
c00145fc:	52                   	push   edx
c00145fd:	56                   	push   esi
c00145fe:	ff d0                	call   eax
c0014600:	83 c4 10             	add    esp,0x10
c0014603:	43                   	inc    ebx
c0014604:	83 fb 04             	cmp    ebx,0x4
c0014607:	75 df                	jne    c00145e8 <int_handler+0x61>
c0014609:	83 c4 0c             	add    esp,0xc
c001460c:	31 c0                	xor    eax,eax
c001460e:	5b                   	pop    ebx
c001460f:	31 d2                	xor    edx,edx
c0014611:	5e                   	pop    esi
c0014612:	5f                   	pop    edi
c0014613:	5d                   	pop    ebp
c0014614:	c3                   	ret    
c0014615:	83 ec 08             	sub    esp,0x8
c0014618:	52                   	push   edx
c0014619:	56                   	push   esi
c001461a:	ff d0                	call   eax
c001461c:	83 c4 10             	add    esp,0x10
c001461f:	83 c4 0c             	add    esp,0xc
c0014622:	5b                   	pop    ebx
c0014623:	5e                   	pop    esi
c0014624:	5f                   	pop    edi
c0014625:	5d                   	pop    ebp
c0014626:	c3                   	ret    
c0014627:	90                   	nop

c0014628 <InterruptController::InterruptController(char const*)>:
c0014628:	83 ec 1c             	sub    esp,0x1c
c001462b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001462f:	83 ec 08             	sub    esp,0x8
c0014632:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014636:	50                   	push   eax
c0014637:	e8 82 f8 ff ff       	call   c0013ebe <Device::Device(char const*)>
c001463c:	83 c4 10             	add    esp,0x10
c001463f:	ba d0 b4 02 c0       	mov    edx,0xc002b4d0
c0014644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014648:	89 10                	mov    DWORD PTR [eax],edx
c001464a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014658:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014660:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014668:	7f 5e                	jg     c00146c8 <InterruptController::InterruptController(char const*)+0xa0>
c001466a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014672:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014677:	7f 49                	jg     c00146c2 <InterruptController::InterruptController(char const*)+0x9a>
c0014679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001467d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014681:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014688:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001468c:	01 ca                	add    edx,ecx
c001468e:	83 c2 54             	add    edx,0x54
c0014691:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146a1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146ac:	01 ca                	add    edx,ecx
c00146ae:	81 c2 54 04 00 00    	add    edx,0x454
c00146b4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146bc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00146c0:	eb b0                	jmp    c0014672 <InterruptController::InterruptController(char const*)+0x4a>
c00146c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00146c6:	eb 98                	jmp    c0014660 <InterruptController::InterruptController(char const*)+0x38>
c00146c8:	90                   	nop
c00146c9:	83 c4 1c             	add    esp,0x1c
c00146cc:	c3                   	ret    
c00146cd:	90                   	nop

c00146ce <InterruptController::~InterruptController()>:
c00146ce:	83 ec 0c             	sub    esp,0xc
c00146d1:	ba d0 b4 02 c0       	mov    edx,0xc002b4d0
c00146d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146da:	89 10                	mov    DWORD PTR [eax],edx
c00146dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e0:	83 ec 0c             	sub    esp,0xc
c00146e3:	50                   	push   eax
c00146e4:	e8 9f f4 ff ff       	call   c0013b88 <Device::~Device()>
c00146e9:	83 c4 10             	add    esp,0x10
c00146ec:	90                   	nop
c00146ed:	83 c4 0c             	add    esp,0xc
c00146f0:	c3                   	ret    
c00146f1:	90                   	nop

c00146f2 <InterruptController::~InterruptController()>:
c00146f2:	83 ec 0c             	sub    esp,0xc
c00146f5:	83 ec 0c             	sub    esp,0xc
c00146f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146fc:	e8 cd ff ff ff       	call   c00146ce <InterruptController::~InterruptController()>
c0014701:	83 c4 10             	add    esp,0x10
c0014704:	83 ec 08             	sub    esp,0x8
c0014707:	68 58 21 00 00       	push   0x2158
c001470c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014710:	e8 94 e0 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0014715:	83 c4 10             	add    esp,0x10
c0014718:	83 c4 0c             	add    esp,0xc
c001471b:	c3                   	ret    

c001471c <displayDebugInfo(regs*)>:
c001471c:	55                   	push   ebp
c001471d:	57                   	push   edi
c001471e:	56                   	push   esi
c001471f:	53                   	push   ebx
c0014720:	83 ec 24             	sub    esp,0x24
c0014723:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014727:	0f 20 c2             	mov    edx,cr0
c001472a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001472e:	0f 20 d7             	mov    edi,cr2
c0014731:	0f 20 de             	mov    esi,cr3
c0014734:	0f 20 e5             	mov    ebp,cr4
c0014737:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001473a:	68 16 b2 02 c0       	push   0xc002b216
c001473f:	e8 3d e1 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014744:	59                   	pop    ecx
c0014745:	58                   	pop    eax
c0014746:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014749:	68 21 b2 02 c0       	push   0xc002b221
c001474e:	e8 2e e1 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014753:	58                   	pop    eax
c0014754:	5a                   	pop    edx
c0014755:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014758:	68 2c b2 02 c0       	push   0xc002b22c
c001475d:	e8 1f e1 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014762:	59                   	pop    ecx
c0014763:	58                   	pop    eax
c0014764:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014767:	68 37 b2 02 c0       	push   0xc002b237
c001476c:	e8 10 e1 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014771:	58                   	pop    eax
c0014772:	5a                   	pop    edx
c0014773:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014776:	68 42 b2 02 c0       	push   0xc002b242
c001477b:	e8 01 e1 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014780:	59                   	pop    ecx
c0014781:	58                   	pop    eax
c0014782:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014785:	68 4d b2 02 c0       	push   0xc002b24d
c001478a:	e8 f2 e0 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001478f:	58                   	pop    eax
c0014790:	5a                   	pop    edx
c0014791:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014794:	68 58 b2 02 c0       	push   0xc002b258
c0014799:	e8 e3 e0 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001479e:	59                   	pop    ecx
c001479f:	58                   	pop    eax
c00147a0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147a3:	68 63 b2 02 c0       	push   0xc002b263
c00147a8:	e8 d4 e0 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00147ad:	58                   	pop    eax
c00147ae:	5a                   	pop    edx
c00147af:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147b2:	68 6e b2 02 c0       	push   0xc002b26e
c00147b7:	e8 c5 e0 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00147bc:	59                   	pop    ecx
c00147bd:	58                   	pop    eax
c00147be:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147c1:	68 7d b2 02 c0       	push   0xc002b27d
c00147c6:	e8 b6 e0 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00147cb:	58                   	pop    eax
c00147cc:	5a                   	pop    edx
c00147cd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147d0:	68 88 b2 02 c0       	push   0xc002b288
c00147d5:	e8 a7 e0 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00147da:	59                   	pop    ecx
c00147db:	58                   	pop    eax
c00147dc:	57                   	push   edi
c00147dd:	68 93 b2 02 c0       	push   0xc002b293
c00147e2:	e8 9a e0 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00147e7:	58                   	pop    eax
c00147e8:	5a                   	pop    edx
c00147e9:	56                   	push   esi
c00147ea:	68 9e b2 02 c0       	push   0xc002b29e
c00147ef:	e8 8d e0 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00147f4:	59                   	pop    ecx
c00147f5:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00147fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014800:	e8 de bd ff ff       	call   c00105e3 <setActiveTerminal(VgaText*)>
c0014805:	58                   	pop    eax
c0014806:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014809:	5a                   	pop    edx
c001480a:	c1 e0 05             	shl    eax,0x5
c001480d:	05 40 d3 02 c0       	add    eax,0xc002d340
c0014812:	50                   	push   eax
c0014813:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014818:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001481e:	e8 cd c2 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c0014823:	59                   	pop    ecx
c0014824:	58                   	pop    eax
c0014825:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001482a:	68 a9 b2 02 c0       	push   0xc002b2a9
c001482f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014835:	e8 b6 c2 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001483a:	58                   	pop    eax
c001483b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014840:	5a                   	pop    edx
c0014841:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014844:	83 c0 0c             	add    eax,0xc
c0014847:	50                   	push   eax
c0014848:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001484d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014853:	e8 98 c2 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c0014858:	59                   	pop    ecx
c0014859:	58                   	pop    eax
c001485a:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001485f:	68 b2 b2 02 c0       	push   0xc002b2b2
c0014864:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486a:	e8 81 c2 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001486f:	58                   	pop    eax
c0014870:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014875:	5a                   	pop    edx
c0014876:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014879:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487f:	e8 26 c2 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c0014884:	59                   	pop    ecx
c0014885:	58                   	pop    eax
c0014886:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001488b:	68 ba b2 02 c0       	push   0xc002b2ba
c0014890:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014896:	e8 55 c2 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001489b:	58                   	pop    eax
c001489c:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00148a1:	5a                   	pop    edx
c00148a2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ab:	e8 fa c1 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c00148b0:	59                   	pop    ecx
c00148b1:	58                   	pop    eax
c00148b2:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00148b7:	68 c2 b2 02 c0       	push   0xc002b2c2
c00148bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c2:	e8 29 c2 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c00148c7:	58                   	pop    eax
c00148c8:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00148cd:	5a                   	pop    edx
c00148ce:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00148d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d7:	e8 ce c1 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c00148dc:	59                   	pop    ecx
c00148dd:	58                   	pop    eax
c00148de:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00148e3:	68 ca b2 02 c0       	push   0xc002b2ca
c00148e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ee:	e8 fd c1 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c00148f3:	58                   	pop    eax
c00148f4:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00148f9:	5a                   	pop    edx
c00148fa:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00148fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014903:	e8 a2 c1 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c0014908:	59                   	pop    ecx
c0014909:	58                   	pop    eax
c001490a:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001490f:	68 d2 b2 02 c0       	push   0xc002b2d2
c0014914:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491a:	e8 d1 c1 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001491f:	58                   	pop    eax
c0014920:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014925:	5a                   	pop    edx
c0014926:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014929:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001492f:	e8 76 c1 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c0014934:	59                   	pop    ecx
c0014935:	58                   	pop    eax
c0014936:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001493b:	68 da b2 02 c0       	push   0xc002b2da
c0014940:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014946:	e8 a5 c1 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001494b:	58                   	pop    eax
c001494c:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014951:	5a                   	pop    edx
c0014952:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014955:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495b:	e8 4a c1 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c0014960:	59                   	pop    ecx
c0014961:	58                   	pop    eax
c0014962:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014967:	68 e2 b2 02 c0       	push   0xc002b2e2
c001496c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014972:	e8 79 c1 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c0014977:	58                   	pop    eax
c0014978:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001497d:	5a                   	pop    edx
c001497e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014982:	52                   	push   edx
c0014983:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014989:	e8 1c c1 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c001498e:	59                   	pop    ecx
c001498f:	58                   	pop    eax
c0014990:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014995:	68 eb b2 02 c0       	push   0xc002b2eb
c001499a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a0:	e8 4b c1 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c00149a5:	58                   	pop    eax
c00149a6:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00149ab:	5a                   	pop    edx
c00149ac:	57                   	push   edi
c00149ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b3:	e8 f2 c0 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c00149b8:	59                   	pop    ecx
c00149b9:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00149be:	5f                   	pop    edi
c00149bf:	68 f3 b2 02 c0       	push   0xc002b2f3
c00149c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ca:	e8 21 c1 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c00149cf:	58                   	pop    eax
c00149d0:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00149d5:	5a                   	pop    edx
c00149d6:	56                   	push   esi
c00149d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149dd:	e8 c8 c0 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c00149e2:	59                   	pop    ecx
c00149e3:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00149e8:	5e                   	pop    esi
c00149e9:	68 fb b2 02 c0       	push   0xc002b2fb
c00149ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f4:	e8 f7 c0 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c00149f9:	5f                   	pop    edi
c00149fa:	58                   	pop    eax
c00149fb:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014a00:	55                   	push   ebp
c0014a01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a07:	e8 9e c0 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c0014a0c:	58                   	pop    eax
c0014a0d:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014a12:	5a                   	pop    edx
c0014a13:	68 03 b3 02 c0       	push   0xc002b303
c0014a18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a1e:	e8 cd c0 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c0014a23:	0f 21 c0             	mov    eax,db0
c0014a26:	59                   	pop    ecx
c0014a27:	5e                   	pop    esi
c0014a28:	50                   	push   eax
c0014a29:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014a2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a34:	e8 71 c0 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c0014a39:	5f                   	pop    edi
c0014a3a:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014a3f:	5d                   	pop    ebp
c0014a40:	68 0c b3 02 c0       	push   0xc002b30c
c0014a45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a4b:	e8 a0 c0 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c0014a50:	0f 21 c8             	mov    eax,db1
c0014a53:	5a                   	pop    edx
c0014a54:	59                   	pop    ecx
c0014a55:	50                   	push   eax
c0014a56:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014a5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a61:	e8 44 c0 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c0014a66:	5e                   	pop    esi
c0014a67:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014a6c:	5f                   	pop    edi
c0014a6d:	68 14 b3 02 c0       	push   0xc002b314
c0014a72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a78:	e8 73 c0 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c0014a7d:	0f 21 d0             	mov    eax,db2
c0014a80:	5d                   	pop    ebp
c0014a81:	5a                   	pop    edx
c0014a82:	50                   	push   eax
c0014a83:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014a88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8e:	e8 17 c0 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c0014a93:	59                   	pop    ecx
c0014a94:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014a99:	5e                   	pop    esi
c0014a9a:	68 1c b3 02 c0       	push   0xc002b31c
c0014a9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa5:	e8 46 c0 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c0014aaa:	0f 21 d8             	mov    eax,db3
c0014aad:	5f                   	pop    edi
c0014aae:	5d                   	pop    ebp
c0014aaf:	50                   	push   eax
c0014ab0:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014ab5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abb:	e8 ea bf ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c0014ac0:	58                   	pop    eax
c0014ac1:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014ac6:	5a                   	pop    edx
c0014ac7:	68 24 b3 02 c0       	push   0xc002b324
c0014acc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad2:	e8 19 c0 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c0014ad7:	0f 21 f0             	mov    eax,db6
c0014ada:	59                   	pop    ecx
c0014adb:	5e                   	pop    esi
c0014adc:	50                   	push   eax
c0014add:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014ae2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae8:	e8 bd bf ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c0014aed:	5f                   	pop    edi
c0014aee:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014af3:	5d                   	pop    ebp
c0014af4:	68 2c b3 02 c0       	push   0xc002b32c
c0014af9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aff:	e8 ec bf ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c0014b04:	0f 21 f8             	mov    eax,db7
c0014b07:	5a                   	pop    edx
c0014b08:	59                   	pop    ecx
c0014b09:	50                   	push   eax
c0014b0a:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014b0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b15:	e8 90 bf ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c0014b1a:	5e                   	pop    esi
c0014b1b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b1e:	e8 48 88 00 00       	call   c001d36b <Thr::getDriverNameFromAddress(unsigned long)>
c0014b23:	83 c4 10             	add    esp,0x10
c0014b26:	85 c0                	test   eax,eax
c0014b28:	74 7d                	je     c0014ba7 <displayDebugInfo(regs*)+0x48b>
c0014b2a:	89 c6                	mov    esi,eax
c0014b2c:	50                   	push   eax
c0014b2d:	50                   	push   eax
c0014b2e:	56                   	push   esi
c0014b2f:	68 34 b3 02 c0       	push   0xc002b334
c0014b34:	e8 48 dd ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014b39:	5a                   	pop    edx
c0014b3a:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014b3f:	59                   	pop    ecx
c0014b40:	68 42 b3 02 c0       	push   0xc002b342
c0014b45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b4b:	e8 a0 bf ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c0014b50:	5f                   	pop    edi
c0014b51:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014b56:	5d                   	pop    ebp
c0014b57:	56                   	push   esi
c0014b58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5e:	e8 8d bf ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c0014b63:	58                   	pop    eax
c0014b64:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014b69:	5a                   	pop    edx
c0014b6a:	68 4e b3 02 c0       	push   0xc002b34e
c0014b6f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b75:	e8 76 bf ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c0014b7a:	59                   	pop    ecx
c0014b7b:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0014b80:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014b86:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b89:	e8 14 88 00 00       	call   c001d3a2 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014b8e:	5b                   	pop    ebx
c0014b8f:	5d                   	pop    ebp
c0014b90:	50                   	push   eax
c0014b91:	57                   	push   edi
c0014b92:	e8 13 bf ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c0014b97:	58                   	pop    eax
c0014b98:	5a                   	pop    edx
c0014b99:	56                   	push   esi
c0014b9a:	68 5a b3 02 c0       	push   0xc002b35a
c0014b9f:	e8 dd dc ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014ba4:	83 c4 10             	add    esp,0x10
c0014ba7:	fa                   	cli    
c0014ba8:	f4                   	hlt    
c0014ba9:	eb fe                	jmp    c0014ba9 <displayDebugInfo(regs*)+0x48d>

c0014bab <x87EmulHandler(regs*, void*)>:
c0014bab:	83 ec 0c             	sub    esp,0xc
c0014bae:	0f 20 c2             	mov    edx,cr0
c0014bb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bb6:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014bba:	75 4b                	jne    c0014c07 <x87EmulHandler(regs*, void*)+0x5c>
c0014bbc:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014bc1:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014bc7:	85 c0                	test   eax,eax
c0014bc9:	74 05                	je     c0014bd0 <x87EmulHandler(regs*, void*)+0x25>
c0014bcb:	83 e2 08             	and    edx,0x8
c0014bce:	75 17                	jne    c0014be7 <x87EmulHandler(regs*, void*)+0x3c>
c0014bd0:	83 ec 0c             	sub    esp,0xc
c0014bd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bd7:	e8 75 ab 00 00       	call   c001f751 <Vm::x87Handler(regs*)>
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	84 c0                	test   al,al
c0014be1:	74 24                	je     c0014c07 <x87EmulHandler(regs*, void*)+0x5c>
c0014be3:	83 c4 0c             	add    esp,0xc
c0014be6:	c3                   	ret    
c0014be7:	83 ec 0c             	sub    esp,0xc
c0014bea:	68 80 b3 02 c0       	push   0xc002b380
c0014bef:	e8 8d dc ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014bf4:	0f 06                	clts   
c0014bf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bfb:	83 c4 10             	add    esp,0x10
c0014bfe:	a3 08 e5 02 c0       	mov    ds:0xc002e508,eax
c0014c03:	83 c4 0c             	add    esp,0xc
c0014c06:	c3                   	ret    
c0014c07:	83 ec 0c             	sub    esp,0xc
c0014c0a:	68 6a b3 02 c0       	push   0xc002b36a
c0014c0f:	e8 6d dc ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014c14:	5a                   	pop    edx
c0014c15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c19:	e8 fe fa ff ff       	call   c001471c <displayDebugInfo(regs*)>

c0014c1e <gpFault(regs*, void*)>:
c0014c1e:	53                   	push   ebx
c0014c1f:	83 ec 14             	sub    esp,0x14
c0014c22:	c7 05 04 e5 02 c0 2a ec 01 c0 	mov    DWORD PTR ds:0xc002e504,0xc001ec2a
c0014c2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c30:	53                   	push   ebx
c0014c31:	e8 f4 9f 00 00       	call   c001ec2a <Vm::faultHandler(regs*)>
c0014c36:	83 c4 10             	add    esp,0x10
c0014c39:	84 c0                	test   al,al
c0014c3b:	74 05                	je     c0014c42 <gpFault(regs*, void*)+0x24>
c0014c3d:	83 c4 08             	add    esp,0x8
c0014c40:	5b                   	pop    ebx
c0014c41:	c3                   	ret    
c0014c42:	83 ec 0c             	sub    esp,0xc
c0014c45:	68 8d b3 02 c0       	push   0xc002b38d
c0014c4a:	e8 32 dc ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014c4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c52:	e8 c5 fa ff ff       	call   c001471c <displayDebugInfo(regs*)>

c0014c57 <pgFault(regs*, void*)>:
c0014c57:	53                   	push   ebx
c0014c58:	83 ec 10             	sub    esp,0x10
c0014c5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c5f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c62:	68 a8 b3 02 c0       	push   0xc002b3a8
c0014c67:	e8 15 dc ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014c6c:	0f 20 d0             	mov    eax,cr2
c0014c6f:	5a                   	pop    edx
c0014c70:	59                   	pop    ecx
c0014c71:	50                   	push   eax
c0014c72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c7a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014c80:	e8 03 d7 ff ff       	call   c0012388 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014c85:	83 c4 10             	add    esp,0x10
c0014c88:	84 c0                	test   al,al
c0014c8a:	74 05                	je     c0014c91 <pgFault(regs*, void*)+0x3a>
c0014c8c:	83 c4 08             	add    esp,0x8
c0014c8f:	5b                   	pop    ebx
c0014c90:	c3                   	ret    
c0014c91:	83 ec 0c             	sub    esp,0xc
c0014c94:	68 bd b3 02 c0       	push   0xc002b3bd
c0014c99:	e8 e3 db ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014c9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ca1:	e8 76 fa ff ff       	call   c001471c <displayDebugInfo(regs*)>

c0014ca6 <otherISRHandler(regs*, void*)>:
c0014ca6:	53                   	push   ebx
c0014ca7:	83 ec 0c             	sub    esp,0xc
c0014caa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014cae:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014cb1:	50                   	push   eax
c0014cb2:	50                   	push   eax
c0014cb3:	68 ca b3 02 c0       	push   0xc002b3ca
c0014cb8:	e8 c4 db ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014cbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cc0:	e8 57 fa ff ff       	call   c001471c <displayDebugInfo(regs*)>

c0014cc5 <opcodeFault(regs*, void*)>:
c0014cc5:	55                   	push   ebp
c0014cc6:	89 e5                	mov    ebp,esp
c0014cc8:	56                   	push   esi
c0014cc9:	53                   	push   ebx
c0014cca:	83 ec 40             	sub    esp,0x40
c0014ccd:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014cd2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cd8:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014cde:	84 c0                	test   al,al
c0014ce0:	74 24                	je     c0014d06 <opcodeFault(regs*, void*)+0x41>
c0014ce2:	83 ec 0c             	sub    esp,0xc
c0014ce5:	68 e8 b3 02 c0       	push   0xc002b3e8
c0014cea:	e8 92 db ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014cef:	83 c4 10             	add    esp,0x10
c0014cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cf8:	8d 50 19             	lea    edx,[eax+0x19]
c0014cfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d01:	e9 d5 05 00 00       	jmp    c00152db <opcodeFault(regs*, void*)+0x616>
c0014d06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d09:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d0c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014d0f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014d13:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014d17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d1d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014d20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d23:	8a 00                	mov    al,BYTE PTR [eax]
c0014d25:	3c f0                	cmp    al,0xf0
c0014d27:	75 17                	jne    c0014d40 <opcodeFault(regs*, void*)+0x7b>
c0014d29:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d32:	8d 50 01             	lea    edx,[eax+0x1]
c0014d35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d38:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d3b:	e9 da 00 00 00       	jmp    c0014e1a <opcodeFault(regs*, void*)+0x155>
c0014d40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d43:	8a 00                	mov    al,BYTE PTR [eax]
c0014d45:	3c f2                	cmp    al,0xf2
c0014d47:	74 09                	je     c0014d52 <opcodeFault(regs*, void*)+0x8d>
c0014d49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d4c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d4e:	3c f3                	cmp    al,0xf3
c0014d50:	75 1b                	jne    c0014d6d <opcodeFault(regs*, void*)+0xa8>
c0014d52:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d56:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d5f:	8d 50 01             	lea    edx,[eax+0x1]
c0014d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d65:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d68:	e9 ad 00 00 00       	jmp    c0014e1a <opcodeFault(regs*, void*)+0x155>
c0014d6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d70:	8a 00                	mov    al,BYTE PTR [eax]
c0014d72:	3c 66                	cmp    al,0x66
c0014d74:	75 1f                	jne    c0014d95 <opcodeFault(regs*, void*)+0xd0>
c0014d76:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d7a:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014d7e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d84:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d87:	8d 50 01             	lea    edx,[eax+0x1]
c0014d8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d90:	e9 85 00 00 00       	jmp    c0014e1a <opcodeFault(regs*, void*)+0x155>
c0014d95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d98:	8a 00                	mov    al,BYTE PTR [eax]
c0014d9a:	3c 67                	cmp    al,0x67
c0014d9c:	75 18                	jne    c0014db6 <opcodeFault(regs*, void*)+0xf1>
c0014d9e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014da2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dab:	8d 50 01             	lea    edx,[eax+0x1]
c0014dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014db4:	eb 64                	jmp    c0014e1a <opcodeFault(regs*, void*)+0x155>
c0014db6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db9:	8a 00                	mov    al,BYTE PTR [eax]
c0014dbb:	3c 2e                	cmp    al,0x2e
c0014dbd:	74 09                	je     c0014dc8 <opcodeFault(regs*, void*)+0x103>
c0014dbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc2:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc4:	3c 3e                	cmp    al,0x3e
c0014dc6:	75 18                	jne    c0014de0 <opcodeFault(regs*, void*)+0x11b>
c0014dc8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dcc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dd5:	8d 50 01             	lea    edx,[eax+0x1]
c0014dd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ddb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dde:	eb 3a                	jmp    c0014e1a <opcodeFault(regs*, void*)+0x155>
c0014de0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de3:	8a 00                	mov    al,BYTE PTR [eax]
c0014de5:	3c 36                	cmp    al,0x36
c0014de7:	74 1b                	je     c0014e04 <opcodeFault(regs*, void*)+0x13f>
c0014de9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dec:	8a 00                	mov    al,BYTE PTR [eax]
c0014dee:	3c 26                	cmp    al,0x26
c0014df0:	74 12                	je     c0014e04 <opcodeFault(regs*, void*)+0x13f>
c0014df2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df5:	8a 00                	mov    al,BYTE PTR [eax]
c0014df7:	3c 64                	cmp    al,0x64
c0014df9:	74 09                	je     c0014e04 <opcodeFault(regs*, void*)+0x13f>
c0014dfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfe:	8a 00                	mov    al,BYTE PTR [eax]
c0014e00:	3c 65                	cmp    al,0x65
c0014e02:	75 16                	jne    c0014e1a <opcodeFault(regs*, void*)+0x155>
c0014e04:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e08:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e11:	8d 50 01             	lea    edx,[eax+0x1]
c0014e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e17:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e1f:	3c 0f                	cmp    al,0xf
c0014e21:	0f 85 ad 00 00 00    	jne    c0014ed4 <opcodeFault(regs*, void*)+0x20f>
c0014e27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e2a:	40                   	inc    eax
c0014e2b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e2d:	3c c2                	cmp    al,0xc2
c0014e2f:	74 0e                	je     c0014e3f <opcodeFault(regs*, void*)+0x17a>
c0014e31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e34:	40                   	inc    eax
c0014e35:	8a 00                	mov    al,BYTE PTR [eax]
c0014e37:	3c c3                	cmp    al,0xc3
c0014e39:	0f 85 95 00 00 00    	jne    c0014ed4 <opcodeFault(regs*, void*)+0x20f>
c0014e3f:	83 ec 0c             	sub    esp,0xc
c0014e42:	68 0b b4 02 c0       	push   0xc002b40b
c0014e47:	e8 35 da ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0014e4c:	83 c4 10             	add    esp,0x10
c0014e4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e52:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e55:	8d 50 01             	lea    edx,[eax+0x1]
c0014e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e5e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e64:	8a 00                	mov    al,BYTE PTR [eax]
c0014e66:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e6c:	88 10                	mov    BYTE PTR [eax],dl
c0014e6e:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e71:	50                   	push   eax
c0014e72:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e75:	50                   	push   eax
c0014e76:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e79:	50                   	push   eax
c0014e7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e7d:	e8 86 4a 00 00       	call   c0019908 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e82:	83 c4 10             	add    esp,0x10
c0014e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e88:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e8b:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e8e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014e91:	01 d0                	add    eax,edx
c0014e93:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e9c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e9f:	48                   	dec    eax
c0014ea0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014ea9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eaf:	83 ec 04             	sub    esp,0x4
c0014eb2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014eb5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014eb8:	50                   	push   eax
c0014eb9:	e8 f6 b2 fe ff       	call   c00001b4 <voodooXADD>
c0014ebe:	83 c4 10             	add    esp,0x10
c0014ec1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014ec4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014ec7:	01 c2                	add    edx,eax
c0014ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ecc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ecf:	e9 07 04 00 00       	jmp    c00152db <opcodeFault(regs*, void*)+0x616>
c0014ed4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed9:	3c 0f                	cmp    al,0xf
c0014edb:	0f 85 8b 01 00 00    	jne    c001506c <opcodeFault(regs*, void*)+0x3a7>
c0014ee1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ee4:	40                   	inc    eax
c0014ee5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ee7:	3c c7                	cmp    al,0xc7
c0014ee9:	0f 86 7d 01 00 00    	jbe    c001506c <opcodeFault(regs*, void*)+0x3a7>
c0014eef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ef2:	40                   	inc    eax
c0014ef3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ef5:	3c cf                	cmp    al,0xcf
c0014ef7:	0f 87 6f 01 00 00    	ja     c001506c <opcodeFault(regs*, void*)+0x3a7>
c0014efd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f00:	40                   	inc    eax
c0014f01:	8a 00                	mov    al,BYTE PTR [eax]
c0014f03:	83 c0 38             	add    eax,0x38
c0014f06:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014f09:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f0d:	75 0b                	jne    c0014f1a <opcodeFault(regs*, void*)+0x255>
c0014f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f12:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f15:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f18:	eb 75                	jmp    c0014f8f <opcodeFault(regs*, void*)+0x2ca>
c0014f1a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f1e:	75 0b                	jne    c0014f2b <opcodeFault(regs*, void*)+0x266>
c0014f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f23:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f26:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f29:	eb 64                	jmp    c0014f8f <opcodeFault(regs*, void*)+0x2ca>
c0014f2b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f2f:	75 0b                	jne    c0014f3c <opcodeFault(regs*, void*)+0x277>
c0014f31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f34:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f37:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f3a:	eb 53                	jmp    c0014f8f <opcodeFault(regs*, void*)+0x2ca>
c0014f3c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f40:	75 0b                	jne    c0014f4d <opcodeFault(regs*, void*)+0x288>
c0014f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f45:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f48:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f4b:	eb 42                	jmp    c0014f8f <opcodeFault(regs*, void*)+0x2ca>
c0014f4d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f51:	75 0b                	jne    c0014f5e <opcodeFault(regs*, void*)+0x299>
c0014f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f56:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f59:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f5c:	eb 31                	jmp    c0014f8f <opcodeFault(regs*, void*)+0x2ca>
c0014f5e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f62:	75 0b                	jne    c0014f6f <opcodeFault(regs*, void*)+0x2aa>
c0014f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f67:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f6a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f6d:	eb 20                	jmp    c0014f8f <opcodeFault(regs*, void*)+0x2ca>
c0014f6f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f73:	75 0b                	jne    c0014f80 <opcodeFault(regs*, void*)+0x2bb>
c0014f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f78:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f7b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f7e:	eb 0f                	jmp    c0014f8f <opcodeFault(regs*, void*)+0x2ca>
c0014f80:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f84:	75 09                	jne    c0014f8f <opcodeFault(regs*, void*)+0x2ca>
c0014f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f8c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f8f:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014f93:	74 10                	je     c0014fa5 <opcodeFault(regs*, void*)+0x2e0>
c0014f95:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014f9c:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014fa3:	eb 2d                	jmp    c0014fd2 <opcodeFault(regs*, void*)+0x30d>
c0014fa5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fa8:	c1 e0 18             	shl    eax,0x18
c0014fab:	89 c2                	mov    edx,eax
c0014fad:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fb0:	c1 e0 08             	shl    eax,0x8
c0014fb3:	25 00 00 ff 00       	and    eax,0xff0000
c0014fb8:	09 c2                	or     edx,eax
c0014fba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fbd:	c1 e8 08             	shr    eax,0x8
c0014fc0:	25 00 ff 00 00       	and    eax,0xff00
c0014fc5:	09 c2                	or     edx,eax
c0014fc7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fca:	c1 e8 18             	shr    eax,0x18
c0014fcd:	09 d0                	or     eax,edx
c0014fcf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fd2:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014fd6:	75 0b                	jne    c0014fe3 <opcodeFault(regs*, void*)+0x31e>
c0014fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fdb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fde:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fe1:	eb 75                	jmp    c0015058 <opcodeFault(regs*, void*)+0x393>
c0014fe3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014fe7:	75 0b                	jne    c0014ff4 <opcodeFault(regs*, void*)+0x32f>
c0014fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fec:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fef:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014ff2:	eb 64                	jmp    c0015058 <opcodeFault(regs*, void*)+0x393>
c0014ff4:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ff8:	75 0b                	jne    c0015005 <opcodeFault(regs*, void*)+0x340>
c0014ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015000:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015003:	eb 53                	jmp    c0015058 <opcodeFault(regs*, void*)+0x393>
c0015005:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015009:	75 0b                	jne    c0015016 <opcodeFault(regs*, void*)+0x351>
c001500b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015011:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015014:	eb 42                	jmp    c0015058 <opcodeFault(regs*, void*)+0x393>
c0015016:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001501a:	75 0b                	jne    c0015027 <opcodeFault(regs*, void*)+0x362>
c001501c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015022:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015025:	eb 31                	jmp    c0015058 <opcodeFault(regs*, void*)+0x393>
c0015027:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001502b:	75 0b                	jne    c0015038 <opcodeFault(regs*, void*)+0x373>
c001502d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015030:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015033:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015036:	eb 20                	jmp    c0015058 <opcodeFault(regs*, void*)+0x393>
c0015038:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001503c:	75 0b                	jne    c0015049 <opcodeFault(regs*, void*)+0x384>
c001503e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015041:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015044:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015047:	eb 0f                	jmp    c0015058 <opcodeFault(regs*, void*)+0x393>
c0015049:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001504d:	75 09                	jne    c0015058 <opcodeFault(regs*, void*)+0x393>
c001504f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015052:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015055:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001505e:	8d 50 02             	lea    edx,[eax+0x2]
c0015061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015064:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015067:	e9 6f 02 00 00       	jmp    c00152db <opcodeFault(regs*, void*)+0x616>
c001506c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001506f:	8a 00                	mov    al,BYTE PTR [eax]
c0015071:	3c 0f                	cmp    al,0xf
c0015073:	0f 85 8d 01 00 00    	jne    c0015206 <opcodeFault(regs*, void*)+0x541>
c0015079:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001507c:	40                   	inc    eax
c001507d:	8a 00                	mov    al,BYTE PTR [eax]
c001507f:	3c c7                	cmp    al,0xc7
c0015081:	0f 85 7f 01 00 00    	jne    c0015206 <opcodeFault(regs*, void*)+0x541>
c0015087:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001508a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015090:	8d 50 01             	lea    edx,[eax+0x1]
c0015093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015096:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015099:	8d 45 ba             	lea    eax,[ebp-0x46]
c001509c:	50                   	push   eax
c001509d:	8d 45 bb             	lea    eax,[ebp-0x45]
c00150a0:	50                   	push   eax
c00150a1:	8d 45 bc             	lea    eax,[ebp-0x44]
c00150a4:	50                   	push   eax
c00150a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150a8:	e8 5b 48 00 00       	call   c0019908 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00150ad:	83 c4 10             	add    esp,0x10
c00150b0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00150b3:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00150b6:	83 f0 01             	xor    eax,0x1
c00150b9:	84 c0                	test   al,al
c00150bb:	0f 84 45 01 00 00    	je     c0015206 <opcodeFault(regs*, void*)+0x541>
c00150c1:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00150c4:	3c 01                	cmp    al,0x1
c00150c6:	0f 85 3a 01 00 00    	jne    c0015206 <opcodeFault(regs*, void*)+0x541>
c00150cc:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00150cf:	83 f0 01             	xor    eax,0x1
c00150d2:	84 c0                	test   al,al
c00150d4:	0f 84 2c 01 00 00    	je     c0015206 <opcodeFault(regs*, void*)+0x541>
c00150da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150dd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00150e0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150e3:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00150ea:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150ed:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150f0:	89 c2                	mov    edx,eax
c00150f2:	b8 00 00 00 00       	mov    eax,0x0
c00150f7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150fa:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015100:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015103:	ba 00 00 00 00       	mov    edx,0x0
c0015108:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001510b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001510e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015111:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015114:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015117:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001511e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015121:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015124:	89 c2                	mov    edx,eax
c0015126:	b8 00 00 00 00       	mov    eax,0x0
c001512b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001512e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015134:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015137:	ba 00 00 00 00       	mov    edx,0x0
c001513c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001513f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015142:	fa                   	cli    
c0015143:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c0015148:	40                   	inc    eax
c0015149:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001514e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015151:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015154:	8b 00                	mov    eax,DWORD PTR [eax]
c0015156:	89 c1                	mov    ecx,eax
c0015158:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001515b:	89 cb                	mov    ebx,ecx
c001515d:	89 d0                	mov    eax,edx
c001515f:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015162:	89 c6                	mov    esi,eax
c0015164:	89 f0                	mov    eax,esi
c0015166:	09 d8                	or     eax,ebx
c0015168:	85 c0                	test   eax,eax
c001516a:	75 21                	jne    c001518d <opcodeFault(regs*, void*)+0x4c8>
c001516c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001516f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015172:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015175:	89 01                	mov    DWORD PTR [ecx],eax
c0015177:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001517a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015180:	83 c8 40             	or     eax,0x40
c0015183:	89 c2                	mov    edx,eax
c0015185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015188:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001518b:	eb 3e                	jmp    c00151cb <opcodeFault(regs*, void*)+0x506>
c001518d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015190:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015193:	8b 00                	mov    eax,DWORD PTR [eax]
c0015195:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015198:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001519b:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001519e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151a4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00151a7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00151aa:	89 d0                	mov    eax,edx
c00151ac:	31 d2                	xor    edx,edx
c00151ae:	89 c3                	mov    ebx,eax
c00151b0:	89 d6                	mov    esi,edx
c00151b2:	89 da                	mov    edx,ebx
c00151b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151c0:	83 e0 bf             	and    eax,0xffffffbf
c00151c3:	89 c2                	mov    edx,eax
c00151c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151cb:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c00151d0:	48                   	dec    eax
c00151d1:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c00151d6:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c00151db:	85 c0                	test   eax,eax
c00151dd:	75 01                	jne    c00151e0 <opcodeFault(regs*, void*)+0x51b>
c00151df:	fb                   	sti    
c00151e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151e6:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00151e9:	01 c2                	add    edx,eax
c00151eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151f1:	83 ec 0c             	sub    esp,0xc
c00151f4:	68 1a b4 02 c0       	push   0xc002b41a
c00151f9:	e8 83 d6 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00151fe:	83 c4 10             	add    esp,0x10
c0015201:	e9 d5 00 00 00       	jmp    c00152db <opcodeFault(regs*, void*)+0x616>
c0015206:	83 ec 0c             	sub    esp,0xc
c0015209:	68 2d b4 02 c0       	push   0xc002b42d
c001520e:	e8 6e d6 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0015213:	83 c4 10             	add    esp,0x10
c0015216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015219:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001521c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015222:	c1 e0 04             	shl    eax,0x4
c0015225:	01 d0                	add    eax,edx
c0015227:	83 c0 03             	add    eax,0x3
c001522a:	8a 00                	mov    al,BYTE PTR [eax]
c001522c:	0f b6 d8             	movzx  ebx,al
c001522f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015232:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015238:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001523b:	c1 e0 04             	shl    eax,0x4
c001523e:	01 d0                	add    eax,edx
c0015240:	83 c0 02             	add    eax,0x2
c0015243:	8a 00                	mov    al,BYTE PTR [eax]
c0015245:	0f b6 c8             	movzx  ecx,al
c0015248:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001524e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015251:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015254:	c1 e0 04             	shl    eax,0x4
c0015257:	01 d0                	add    eax,edx
c0015259:	40                   	inc    eax
c001525a:	8a 00                	mov    al,BYTE PTR [eax]
c001525c:	0f b6 d0             	movzx  edx,al
c001525f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015262:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015268:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001526b:	c1 e0 04             	shl    eax,0x4
c001526e:	01 f0                	add    eax,esi
c0015270:	8a 00                	mov    al,BYTE PTR [eax]
c0015272:	0f b6 c0             	movzx  eax,al
c0015275:	83 ec 0c             	sub    esp,0xc
c0015278:	53                   	push   ebx
c0015279:	51                   	push   ecx
c001527a:	52                   	push   edx
c001527b:	50                   	push   eax
c001527c:	68 40 b4 02 c0       	push   0xc002b440
c0015281:	e8 fb d5 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0015286:	83 c4 20             	add    esp,0x20
c0015289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001528f:	83 c0 03             	add    eax,0x3
c0015292:	8a 00                	mov    al,BYTE PTR [eax]
c0015294:	0f b6 d8             	movzx  ebx,al
c0015297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001529d:	83 c0 02             	add    eax,0x2
c00152a0:	8a 00                	mov    al,BYTE PTR [eax]
c00152a2:	0f b6 c8             	movzx  ecx,al
c00152a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152ab:	40                   	inc    eax
c00152ac:	8a 00                	mov    al,BYTE PTR [eax]
c00152ae:	0f b6 d0             	movzx  edx,al
c00152b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152b7:	8a 00                	mov    al,BYTE PTR [eax]
c00152b9:	0f b6 c0             	movzx  eax,al
c00152bc:	83 ec 0c             	sub    esp,0xc
c00152bf:	53                   	push   ebx
c00152c0:	51                   	push   ecx
c00152c1:	52                   	push   edx
c00152c2:	50                   	push   eax
c00152c3:	68 68 b4 02 c0       	push   0xc002b468
c00152c8:	e8 b4 d5 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00152cd:	83 c4 20             	add    esp,0x20
c00152d0:	83 ec 0c             	sub    esp,0xc
c00152d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00152d6:	e8 41 f4 ff ff       	call   c001471c <displayDebugInfo(regs*)>
c00152db:	8d 65 f8             	lea    esp,[ebp-0x8]
c00152de:	5b                   	pop    ebx
c00152df:	5e                   	pop    esi
c00152e0:	5d                   	pop    ebp
c00152e1:	c3                   	ret    

c00152e2 <displayProgramFault(char const*)>:
c00152e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152ea:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00152f0:	85 c0                	test   eax,eax
c00152f2:	74 15                	je     c0015309 <displayProgramFault(char const*)+0x27>
c00152f4:	83 ec 0c             	sub    esp,0xc
c00152f7:	6a 04                	push   0x4
c00152f9:	6a 0f                	push   0xf
c00152fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152ff:	50                   	push   eax
c0015300:	e8 e7 b4 ff ff       	call   c00107ec <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015305:	83 c4 1c             	add    esp,0x1c
c0015308:	c3                   	ret    
c0015309:	c3                   	ret    

c001530a <setupInterruptController()>:
c001530a:	55                   	push   ebp
c001530b:	89 e5                	mov    ebp,esp
c001530d:	53                   	push   ebx
c001530e:	83 ec 24             	sub    esp,0x24
c0015311:	b8 00 00 00 00       	mov    eax,0x0
c0015316:	85 c0                	test   eax,eax
c0015318:	0f 95 c0             	setne  al
c001531b:	84 c0                	test   al,al
c001531d:	74 5b                	je     c001537a <setupInterruptController()+0x70>
c001531f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015326:	83 ec 0c             	sub    esp,0xc
c0015329:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001532c:	e8 f8 a4 ff ff       	call   c000f829 <malloc>
c0015331:	83 c4 10             	add    esp,0x10
c0015334:	89 c3                	mov    ebx,eax
c0015336:	83 ec 0c             	sub    esp,0xc
c0015339:	53                   	push   ebx
c001533a:	e8 59 08 01 00       	call   c0025b98 <APIC::APIC()>
c001533f:	83 c4 10             	add    esp,0x10
c0015342:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015345:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015348:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001534b:	8b 00                	mov    eax,DWORD PTR [eax]
c001534d:	83 c0 08             	add    eax,0x8
c0015350:	8b 00                	mov    eax,DWORD PTR [eax]
c0015352:	6a 00                	push   0x0
c0015354:	6a 00                	push   0x0
c0015356:	6a 00                	push   0x0
c0015358:	52                   	push   edx
c0015359:	ff d0                	call   eax
c001535b:	83 c4 10             	add    esp,0x10
c001535e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015363:	83 ec 08             	sub    esp,0x8
c0015366:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015369:	50                   	push   eax
c001536a:	e8 4b e9 ff ff       	call   c0013cba <Device::addChild(Device*)>
c001536f:	83 c4 10             	add    esp,0x10
c0015372:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015375:	e9 79 03 00 00       	jmp    c00156f3 <setupInterruptController()+0x3e9>
c001537a:	a0 e0 ec 02 c0       	mov    al,ds:0xc002ece0
c001537f:	84 c0                	test   al,al
c0015381:	75 14                	jne    c0015397 <setupInterruptController()+0x8d>
c0015383:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015388:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001538e:	83 e2 fe             	and    edx,0xfffffffe
c0015391:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015397:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001539c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00153a2:	83 e0 01             	and    eax,0x1
c00153a5:	84 c0                	test   al,al
c00153a7:	0f 95 c0             	setne  al
c00153aa:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00153ad:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00153b4:	83 ec 0c             	sub    esp,0xc
c00153b7:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153ba:	e8 6a a4 ff ff       	call   c000f829 <malloc>
c00153bf:	83 c4 10             	add    esp,0x10
c00153c2:	89 c3                	mov    ebx,eax
c00153c4:	83 ec 0c             	sub    esp,0xc
c00153c7:	53                   	push   ebx
c00153c8:	e8 23 0d 01 00       	call   c00260f0 <PIC::PIC()>
c00153cd:	83 c4 10             	add    esp,0x10
c00153d0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00153d3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153db:	83 c0 08             	add    eax,0x8
c00153de:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e0:	6a 00                	push   0x0
c00153e2:	6a 00                	push   0x0
c00153e4:	6a 00                	push   0x0
c00153e6:	52                   	push   edx
c00153e7:	ff d0                	call   eax
c00153e9:	83 c4 10             	add    esp,0x10
c00153ec:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00153f0:	74 73                	je     c0015465 <setupInterruptController()+0x15b>
c00153f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fa:	83 c0 0c             	add    eax,0xc
c00153fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ff:	6a 00                	push   0x0
c0015401:	6a 00                	push   0x0
c0015403:	6a 00                	push   0x0
c0015405:	52                   	push   edx
c0015406:	ff d0                	call   eax
c0015408:	83 c4 10             	add    esp,0x10
c001540b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001540f:	74 15                	je     c0015426 <setupInterruptController()+0x11c>
c0015411:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015414:	8b 00                	mov    eax,DWORD PTR [eax]
c0015416:	83 c0 04             	add    eax,0x4
c0015419:	8b 00                	mov    eax,DWORD PTR [eax]
c001541b:	83 ec 0c             	sub    esp,0xc
c001541e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015421:	ff d0                	call   eax
c0015423:	83 c4 10             	add    esp,0x10
c0015426:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001542d:	83 ec 0c             	sub    esp,0xc
c0015430:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015433:	e8 f1 a3 ff ff       	call   c000f829 <malloc>
c0015438:	83 c4 10             	add    esp,0x10
c001543b:	89 c3                	mov    ebx,eax
c001543d:	83 ec 0c             	sub    esp,0xc
c0015440:	53                   	push   ebx
c0015441:	e8 52 07 01 00       	call   c0025b98 <APIC::APIC()>
c0015446:	83 c4 10             	add    esp,0x10
c0015449:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001544c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001544f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015452:	8b 00                	mov    eax,DWORD PTR [eax]
c0015454:	83 c0 08             	add    eax,0x8
c0015457:	8b 00                	mov    eax,DWORD PTR [eax]
c0015459:	6a 00                	push   0x0
c001545b:	6a 00                	push   0x0
c001545d:	6a 00                	push   0x0
c001545f:	52                   	push   edx
c0015460:	ff d0                	call   eax
c0015462:	83 c4 10             	add    esp,0x10
c0015465:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001546a:	83 ec 08             	sub    esp,0x8
c001546d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015470:	50                   	push   eax
c0015471:	e8 44 e8 ff ff       	call   c0013cba <Device::addChild(Device*)>
c0015476:	83 c4 10             	add    esp,0x10
c0015479:	c7 05 08 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e508,0x0
c0015483:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015486:	8b 00                	mov    eax,DWORD PTR [eax]
c0015488:	83 c0 24             	add    eax,0x24
c001548b:	8b 00                	mov    eax,DWORD PTR [eax]
c001548d:	6a 00                	push   0x0
c001548f:	68 a6 4c 01 c0       	push   0xc0014ca6
c0015494:	6a 00                	push   0x0
c0015496:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015499:	ff d0                	call   eax
c001549b:	83 c4 10             	add    esp,0x10
c001549e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a3:	83 c0 24             	add    eax,0x24
c00154a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a8:	6a 00                	push   0x0
c00154aa:	68 a6 4c 01 c0       	push   0xc0014ca6
c00154af:	6a 01                	push   0x1
c00154b1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154b4:	ff d0                	call   eax
c00154b6:	83 c4 10             	add    esp,0x10
c00154b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154be:	83 c0 24             	add    eax,0x24
c00154c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c3:	6a 00                	push   0x0
c00154c5:	68 79 45 01 c0       	push   0xc0014579
c00154ca:	6a 02                	push   0x2
c00154cc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154cf:	ff d0                	call   eax
c00154d1:	83 c4 10             	add    esp,0x10
c00154d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d9:	83 c0 24             	add    eax,0x24
c00154dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154de:	6a 00                	push   0x0
c00154e0:	68 a6 4c 01 c0       	push   0xc0014ca6
c00154e5:	6a 03                	push   0x3
c00154e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ea:	ff d0                	call   eax
c00154ec:	83 c4 10             	add    esp,0x10
c00154ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f4:	83 c0 24             	add    eax,0x24
c00154f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f9:	6a 00                	push   0x0
c00154fb:	68 a6 4c 01 c0       	push   0xc0014ca6
c0015500:	6a 04                	push   0x4
c0015502:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015505:	ff d0                	call   eax
c0015507:	83 c4 10             	add    esp,0x10
c001550a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550d:	8b 00                	mov    eax,DWORD PTR [eax]
c001550f:	83 c0 24             	add    eax,0x24
c0015512:	8b 00                	mov    eax,DWORD PTR [eax]
c0015514:	6a 00                	push   0x0
c0015516:	68 a6 4c 01 c0       	push   0xc0014ca6
c001551b:	6a 05                	push   0x5
c001551d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015520:	ff d0                	call   eax
c0015522:	83 c4 10             	add    esp,0x10
c0015525:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015528:	8b 00                	mov    eax,DWORD PTR [eax]
c001552a:	83 c0 24             	add    eax,0x24
c001552d:	8b 00                	mov    eax,DWORD PTR [eax]
c001552f:	6a 00                	push   0x0
c0015531:	68 c5 4c 01 c0       	push   0xc0014cc5
c0015536:	6a 06                	push   0x6
c0015538:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001553b:	ff d0                	call   eax
c001553d:	83 c4 10             	add    esp,0x10
c0015540:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015543:	8b 00                	mov    eax,DWORD PTR [eax]
c0015545:	83 c0 24             	add    eax,0x24
c0015548:	8b 00                	mov    eax,DWORD PTR [eax]
c001554a:	6a 00                	push   0x0
c001554c:	68 ab 4b 01 c0       	push   0xc0014bab
c0015551:	6a 07                	push   0x7
c0015553:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015556:	ff d0                	call   eax
c0015558:	83 c4 10             	add    esp,0x10
c001555b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015560:	83 c0 24             	add    eax,0x24
c0015563:	8b 00                	mov    eax,DWORD PTR [eax]
c0015565:	6a 00                	push   0x0
c0015567:	68 94 43 01 c0       	push   0xc0014394
c001556c:	6a 08                	push   0x8
c001556e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015571:	ff d0                	call   eax
c0015573:	83 c4 10             	add    esp,0x10
c0015576:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015579:	8b 00                	mov    eax,DWORD PTR [eax]
c001557b:	83 c0 24             	add    eax,0x24
c001557e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015580:	6a 00                	push   0x0
c0015582:	68 a6 4c 01 c0       	push   0xc0014ca6
c0015587:	6a 09                	push   0x9
c0015589:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001558c:	ff d0                	call   eax
c001558e:	83 c4 10             	add    esp,0x10
c0015591:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015594:	8b 00                	mov    eax,DWORD PTR [eax]
c0015596:	83 c0 24             	add    eax,0x24
c0015599:	8b 00                	mov    eax,DWORD PTR [eax]
c001559b:	6a 00                	push   0x0
c001559d:	68 a6 4c 01 c0       	push   0xc0014ca6
c00155a2:	6a 0a                	push   0xa
c00155a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a7:	ff d0                	call   eax
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155af:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b1:	83 c0 24             	add    eax,0x24
c00155b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b6:	6a 00                	push   0x0
c00155b8:	68 a6 4c 01 c0       	push   0xc0014ca6
c00155bd:	6a 0b                	push   0xb
c00155bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155c2:	ff d0                	call   eax
c00155c4:	83 c4 10             	add    esp,0x10
c00155c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cc:	83 c0 24             	add    eax,0x24
c00155cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d1:	6a 00                	push   0x0
c00155d3:	68 a6 4c 01 c0       	push   0xc0014ca6
c00155d8:	6a 0c                	push   0xc
c00155da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155dd:	ff d0                	call   eax
c00155df:	83 c4 10             	add    esp,0x10
c00155e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e7:	83 c0 24             	add    eax,0x24
c00155ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ec:	6a 00                	push   0x0
c00155ee:	68 1e 4c 01 c0       	push   0xc0014c1e
c00155f3:	6a 0d                	push   0xd
c00155f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f8:	ff d0                	call   eax
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015600:	8b 00                	mov    eax,DWORD PTR [eax]
c0015602:	83 c0 24             	add    eax,0x24
c0015605:	8b 00                	mov    eax,DWORD PTR [eax]
c0015607:	6a 00                	push   0x0
c0015609:	68 57 4c 01 c0       	push   0xc0014c57
c001560e:	6a 0e                	push   0xe
c0015610:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015613:	ff d0                	call   eax
c0015615:	83 c4 10             	add    esp,0x10
c0015618:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001561b:	8b 00                	mov    eax,DWORD PTR [eax]
c001561d:	83 c0 24             	add    eax,0x24
c0015620:	8b 00                	mov    eax,DWORD PTR [eax]
c0015622:	6a 00                	push   0x0
c0015624:	68 a6 4c 01 c0       	push   0xc0014ca6
c0015629:	6a 0f                	push   0xf
c001562b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001562e:	ff d0                	call   eax
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015636:	8b 00                	mov    eax,DWORD PTR [eax]
c0015638:	83 c0 24             	add    eax,0x24
c001563b:	8b 00                	mov    eax,DWORD PTR [eax]
c001563d:	6a 00                	push   0x0
c001563f:	68 a6 4c 01 c0       	push   0xc0014ca6
c0015644:	6a 10                	push   0x10
c0015646:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015649:	ff d0                	call   eax
c001564b:	83 c4 10             	add    esp,0x10
c001564e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015651:	8b 00                	mov    eax,DWORD PTR [eax]
c0015653:	83 c0 24             	add    eax,0x24
c0015656:	8b 00                	mov    eax,DWORD PTR [eax]
c0015658:	6a 00                	push   0x0
c001565a:	68 a6 4c 01 c0       	push   0xc0014ca6
c001565f:	6a 11                	push   0x11
c0015661:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015664:	ff d0                	call   eax
c0015666:	83 c4 10             	add    esp,0x10
c0015669:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001566c:	8b 00                	mov    eax,DWORD PTR [eax]
c001566e:	83 c0 24             	add    eax,0x24
c0015671:	8b 00                	mov    eax,DWORD PTR [eax]
c0015673:	6a 00                	push   0x0
c0015675:	68 a6 4c 01 c0       	push   0xc0014ca6
c001567a:	6a 12                	push   0x12
c001567c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001567f:	ff d0                	call   eax
c0015681:	83 c4 10             	add    esp,0x10
c0015684:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015687:	8b 00                	mov    eax,DWORD PTR [eax]
c0015689:	83 c0 24             	add    eax,0x24
c001568c:	8b 00                	mov    eax,DWORD PTR [eax]
c001568e:	6a 00                	push   0x0
c0015690:	68 a6 4c 01 c0       	push   0xc0014ca6
c0015695:	6a 13                	push   0x13
c0015697:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001569a:	ff d0                	call   eax
c001569c:	83 c4 10             	add    esp,0x10
c001569f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a4:	83 c0 24             	add    eax,0x24
c00156a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a9:	6a 00                	push   0x0
c00156ab:	68 a6 4c 01 c0       	push   0xc0014ca6
c00156b0:	6a 14                	push   0x14
c00156b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156b5:	ff d0                	call   eax
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156bf:	83 c0 24             	add    eax,0x24
c00156c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c4:	6a 00                	push   0x0
c00156c6:	68 a6 4c 01 c0       	push   0xc0014ca6
c00156cb:	6a 1e                	push   0x1e
c00156cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d0:	ff d0                	call   eax
c00156d2:	83 c4 10             	add    esp,0x10
c00156d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156da:	83 c0 24             	add    eax,0x24
c00156dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156df:	6a 00                	push   0x0
c00156e1:	68 e1 c3 01 c0       	push   0xc001c3e1
c00156e6:	6a 60                	push   0x60
c00156e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156eb:	ff d0                	call   eax
c00156ed:	83 c4 10             	add    esp,0x10
c00156f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156f6:	c9                   	leave  
c00156f7:	c3                   	ret    

c00156f8 <InterruptController::convertLegacyIRQNumber(int)>:
c00156f8:	55                   	push   ebp
c00156f9:	89 e5                	mov    ebp,esp
c00156fb:	83 ec 08             	sub    esp,0x8
c00156fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015701:	83 ec 0c             	sub    esp,0xc
c0015704:	50                   	push   eax
c0015705:	e8 b0 e8 ff ff       	call   c0013fba <Device::getName()>
c001570a:	83 c4 10             	add    esp,0x10
c001570d:	8a 00                	mov    al,BYTE PTR [eax]
c001570f:	3c 41                	cmp    al,0x41
c0015711:	0f 94 c0             	sete   al
c0015714:	84 c0                	test   al,al
c0015716:	74 28                	je     c0015740 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015718:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001571c:	7f 12                	jg     c0015730 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001571e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015721:	05 e0 d5 02 c0       	add    eax,0xc002d5e0
c0015726:	8a 00                	mov    al,BYTE PTR [eax]
c0015728:	0f b6 c0             	movzx  eax,al
c001572b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001572e:	eb 10                	jmp    c0015740 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015730:	83 ec 0c             	sub    esp,0xc
c0015733:	68 90 b4 02 c0       	push   0xc002b490
c0015738:	e8 b2 4a 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c001573d:	83 c4 10             	add    esp,0x10
c0015740:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015743:	c9                   	leave  
c0015744:	c3                   	ret    
c0015745:	90                   	nop

c0015746 <startGUI(void*)>:
c0015746:	55                   	push   ebp
c0015747:	89 e5                	mov    ebp,esp
c0015749:	53                   	push   ebx
c001574a:	83 ec 04             	sub    esp,0x4
c001574d:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c0015752:	48                   	dec    eax
c0015753:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c0015758:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001575d:	85 c0                	test   eax,eax
c001575f:	75 01                	jne    c0015762 <startGUI(void*)+0x1c>
c0015761:	fb                   	sti    
c0015762:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015768:	83 ec 08             	sub    esp,0x8
c001576b:	6a 01                	push   0x1
c001576d:	68 10 b5 02 c0       	push   0xc002b510
c0015772:	e8 45 7c 00 00       	call   c001d3bc <Thr::loadDLL(char const*, bool)>
c0015777:	83 c4 10             	add    esp,0x10
c001577a:	83 ec 08             	sub    esp,0x8
c001577d:	53                   	push   ebx
c001577e:	50                   	push   eax
c001577f:	e8 69 7e 00 00       	call   c001d5ed <Thr::executeDLL(unsigned long, void*)>
c0015784:	83 c4 10             	add    esp,0x10
c0015787:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c001578d:	83 ec 08             	sub    esp,0x8
c0015790:	6a 01                	push   0x1
c0015792:	68 2a b5 02 c0       	push   0xc002b52a
c0015797:	e8 20 7c 00 00       	call   c001d3bc <Thr::loadDLL(char const*, bool)>
c001579c:	83 c4 10             	add    esp,0x10
c001579f:	83 ec 08             	sub    esp,0x8
c00157a2:	53                   	push   ebx
c00157a3:	50                   	push   eax
c00157a4:	e8 44 7e 00 00       	call   c001d5ed <Thr::executeDLL(unsigned long, void*)>
c00157a9:	83 c4 10             	add    esp,0x10
c00157ac:	90                   	nop
c00157ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00157b0:	c9                   	leave  
c00157b1:	c3                   	ret    

c00157b2 <startGUIVESA(void*)>:
c00157b2:	55                   	push   ebp
c00157b3:	89 e5                	mov    ebp,esp
c00157b5:	53                   	push   ebx
c00157b6:	83 ec 04             	sub    esp,0x4
c00157b9:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c00157be:	48                   	dec    eax
c00157bf:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c00157c4:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c00157c9:	85 c0                	test   eax,eax
c00157cb:	75 01                	jne    c00157ce <startGUIVESA(void*)+0x1c>
c00157cd:	fb                   	sti    
c00157ce:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c00157d4:	83 ec 08             	sub    esp,0x8
c00157d7:	6a 01                	push   0x1
c00157d9:	68 44 b5 02 c0       	push   0xc002b544
c00157de:	e8 d9 7b 00 00       	call   c001d3bc <Thr::loadDLL(char const*, bool)>
c00157e3:	83 c4 10             	add    esp,0x10
c00157e6:	83 ec 08             	sub    esp,0x8
c00157e9:	53                   	push   ebx
c00157ea:	50                   	push   eax
c00157eb:	e8 fd 7d 00 00       	call   c001d5ed <Thr::executeDLL(unsigned long, void*)>
c00157f0:	83 c4 10             	add    esp,0x10
c00157f3:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c00157f9:	83 ec 08             	sub    esp,0x8
c00157fc:	6a 01                	push   0x1
c00157fe:	68 2a b5 02 c0       	push   0xc002b52a
c0015803:	e8 b4 7b 00 00       	call   c001d3bc <Thr::loadDLL(char const*, bool)>
c0015808:	83 c4 10             	add    esp,0x10
c001580b:	83 ec 08             	sub    esp,0x8
c001580e:	53                   	push   ebx
c001580f:	50                   	push   eax
c0015810:	e8 d8 7d 00 00       	call   c001d5ed <Thr::executeDLL(unsigned long, void*)>
c0015815:	83 c4 10             	add    esp,0x10
c0015818:	90                   	nop
c0015819:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001581c:	c9                   	leave  
c001581d:	c3                   	ret    

c001581e <sendKeyToTerminal(unsigned char)>:
c001581e:	55                   	push   ebp
c001581f:	89 e5                	mov    ebp,esp
c0015821:	83 ec 28             	sub    esp,0x28
c0015824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015827:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001582a:	a1 44 e4 02 c0       	mov    eax,ds:0xc002e444
c001582f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015833:	83 ec 08             	sub    esp,0x8
c0015836:	52                   	push   edx
c0015837:	50                   	push   eax
c0015838:	e8 57 b4 ff ff       	call   c0010c94 <VgaText::receiveKey(unsigned char)>
c001583d:	83 c4 10             	add    esp,0x10
c0015840:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015844:	0f 85 8f 00 00 00    	jne    c00158d9 <sendKeyToTerminal(unsigned char)+0xbb>
c001584a:	fa                   	cli    
c001584b:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c0015850:	40                   	inc    eax
c0015851:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c0015856:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001585b:	40                   	inc    eax
c001585c:	a3 84 f8 02 c0       	mov    ds:0xc002f884,eax
c0015861:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c0015866:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015869:	c7 05 20 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e520,0x0
c0015873:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015877:	74 1f                	je     c0015898 <sendKeyToTerminal(unsigned char)+0x7a>
c0015879:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001587c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001587f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015882:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015885:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015888:	83 ec 0c             	sub    esp,0xc
c001588b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001588e:	e8 80 89 00 00       	call   c001e213 <unblockTask(ThreadControlBlock*)>
c0015893:	83 c4 10             	add    esp,0x10
c0015896:	eb db                	jmp    c0015873 <sendKeyToTerminal(unsigned char)+0x55>
c0015898:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001589d:	48                   	dec    eax
c001589e:	a3 84 f8 02 c0       	mov    ds:0xc002f884,eax
c00158a3:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c00158a8:	85 c0                	test   eax,eax
c00158aa:	75 18                	jne    c00158c4 <sendKeyToTerminal(unsigned char)+0xa6>
c00158ac:	a1 80 f8 02 c0       	mov    eax,ds:0xc002f880
c00158b1:	85 c0                	test   eax,eax
c00158b3:	74 0f                	je     c00158c4 <sendKeyToTerminal(unsigned char)+0xa6>
c00158b5:	c7 05 80 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x0
c00158bf:	e8 bd 84 00 00       	call   c001dd81 <schedule()>
c00158c4:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c00158c9:	48                   	dec    eax
c00158ca:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c00158cf:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c00158d4:	85 c0                	test   eax,eax
c00158d6:	75 01                	jne    c00158d9 <sendKeyToTerminal(unsigned char)+0xbb>
c00158d8:	fb                   	sti    
c00158d9:	90                   	nop
c00158da:	c9                   	leave  
c00158db:	c3                   	ret    

c00158dc <sendKeyboardToken(KeyboardToken)>:
c00158dc:	55                   	push   ebp
c00158dd:	89 e5                	mov    ebp,esp
c00158df:	83 ec 18             	sub    esp,0x18
c00158e2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00158e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e8:	0f b7 c0             	movzx  eax,ax
c00158eb:	83 f2 01             	xor    edx,0x1
c00158ee:	88 90 40 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1ac0],dl
c00158f4:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00158f9:	85 c0                	test   eax,eax
c00158fb:	74 24                	je     c0015921 <sendKeyboardToken(KeyboardToken)+0x45>
c00158fd:	8b 0d 28 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e528
c0015903:	83 ec 04             	sub    esp,0x4
c0015906:	68 40 e5 02 c0       	push   0xc002e540
c001590b:	83 ec 08             	sub    esp,0x8
c001590e:	89 e2                	mov    edx,esp
c0015910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015913:	89 02                	mov    DWORD PTR [edx],eax
c0015915:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015918:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001591c:	ff d1                	call   ecx
c001591e:	83 c4 10             	add    esp,0x10
c0015921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015924:	66 3d 03 02          	cmp    ax,0x203
c0015928:	75 07                	jne    c0015931 <sendKeyboardToken(KeyboardToken)+0x55>
c001592a:	a0 40 e6 02 c0       	mov    al,ds:0xc002e640
c001592f:	84 c0                	test   al,al
c0015931:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015935:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015938:	a0 48 e9 02 c0       	mov    al,ds:0xc002e948
c001593d:	38 c2                	cmp    dl,al
c001593f:	74 1c                	je     c001595d <sendKeyboardToken(KeyboardToken)+0x81>
c0015941:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015944:	a2 48 e9 02 c0       	mov    ds:0xc002e948,al
c0015949:	a0 48 e9 02 c0       	mov    al,ds:0xc002e948
c001594e:	0f b6 c0             	movzx  eax,al
c0015951:	83 ec 0c             	sub    esp,0xc
c0015954:	50                   	push   eax
c0015955:	e8 7a a9 ff ff       	call   c00102d4 <setTerminalScrollLock(bool)>
c001595a:	83 c4 10             	add    esp,0x10
c001595d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015960:	84 c0                	test   al,al
c0015962:	0f 84 ae 00 00 00    	je     c0015a16 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596b:	66 3d 10 03          	cmp    ax,0x310
c001596f:	75 06                	jne    c0015977 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015971:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597a:	66 3d 11 03          	cmp    ax,0x311
c001597e:	75 06                	jne    c0015986 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015980:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015989:	66 3d 12 03          	cmp    ax,0x312
c001598d:	75 06                	jne    c0015995 <sendKeyboardToken(KeyboardToken)+0xb9>
c001598f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015998:	66 3d 13 03          	cmp    ax,0x313
c001599c:	75 06                	jne    c00159a4 <sendKeyboardToken(KeyboardToken)+0xc8>
c001599e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00159a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a7:	66 3d 14 03          	cmp    ax,0x314
c00159ab:	75 06                	jne    c00159b3 <sendKeyboardToken(KeyboardToken)+0xd7>
c00159ad:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00159b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b6:	66 3d 15 03          	cmp    ax,0x315
c00159ba:	75 06                	jne    c00159c2 <sendKeyboardToken(KeyboardToken)+0xe6>
c00159bc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00159c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c5:	66 3d 16 03          	cmp    ax,0x316
c00159c9:	75 06                	jne    c00159d1 <sendKeyboardToken(KeyboardToken)+0xf5>
c00159cb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00159d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d4:	66 3d 17 03          	cmp    ax,0x317
c00159d8:	75 06                	jne    c00159e0 <sendKeyboardToken(KeyboardToken)+0x104>
c00159da:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00159e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e3:	66 3d 18 03          	cmp    ax,0x318
c00159e7:	75 06                	jne    c00159ef <sendKeyboardToken(KeyboardToken)+0x113>
c00159e9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00159ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f2:	66 3d 19 03          	cmp    ax,0x319
c00159f6:	75 06                	jne    c00159fe <sendKeyboardToken(KeyboardToken)+0x122>
c00159f8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00159fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a01:	66 3d 1a 03          	cmp    ax,0x31a
c0015a05:	0f 85 c9 00 00 00    	jne    c0015ad4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a0b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015a11:	e9 be 00 00 00       	jmp    c0015ad4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a19:	66 3d 10 03          	cmp    ax,0x310
c0015a1d:	75 0a                	jne    c0015a29 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015a1f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015a25:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a2c:	66 3d 11 03          	cmp    ax,0x311
c0015a30:	75 0a                	jne    c0015a3c <sendKeyboardToken(KeyboardToken)+0x160>
c0015a32:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015a38:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3f:	66 3d 12 03          	cmp    ax,0x312
c0015a43:	75 0a                	jne    c0015a4f <sendKeyboardToken(KeyboardToken)+0x173>
c0015a45:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015a4b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a52:	66 3d 13 03          	cmp    ax,0x313
c0015a56:	75 0a                	jne    c0015a62 <sendKeyboardToken(KeyboardToken)+0x186>
c0015a58:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015a5e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a65:	66 3d 14 03          	cmp    ax,0x314
c0015a69:	75 0a                	jne    c0015a75 <sendKeyboardToken(KeyboardToken)+0x199>
c0015a6b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015a71:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a78:	66 3d 15 03          	cmp    ax,0x315
c0015a7c:	75 0a                	jne    c0015a88 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015a7e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015a84:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a8b:	66 3d 16 03          	cmp    ax,0x316
c0015a8f:	75 0a                	jne    c0015a9b <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015a91:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015a97:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a9e:	66 3d 17 03          	cmp    ax,0x317
c0015aa2:	75 0a                	jne    c0015aae <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015aa4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015aaa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015aae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab1:	66 3d 18 03          	cmp    ax,0x318
c0015ab5:	75 0a                	jne    c0015ac1 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015ab7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015abd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac4:	66 3d 19 03          	cmp    ax,0x319
c0015ac8:	75 0a                	jne    c0015ad4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015aca:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015ad0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad7:	66 3d 00 02          	cmp    ax,0x200
c0015adb:	75 2c                	jne    c0015b09 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015add:	a0 40 e9 02 c0       	mov    al,ds:0xc002e940
c0015ae2:	83 f0 01             	xor    eax,0x1
c0015ae5:	84 c0                	test   al,al
c0015ae7:	74 20                	je     c0015b09 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015ae9:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0015aee:	6a 01                	push   0x1
c0015af0:	6a 00                	push   0x0
c0015af2:	68 46 57 01 c0       	push   0xc0015746
c0015af7:	50                   	push   eax
c0015af8:	e8 5f 80 00 00       	call   c001db5c <Process::createThread(void (*)(void*), void*, int)>
c0015afd:	83 c4 10             	add    esp,0x10
c0015b00:	c6 05 40 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e940,0x1
c0015b07:	eb 33                	jmp    c0015b3c <sendKeyboardToken(KeyboardToken)+0x260>
c0015b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0c:	66 3d 01 02          	cmp    ax,0x201
c0015b10:	75 2a                	jne    c0015b3c <sendKeyboardToken(KeyboardToken)+0x260>
c0015b12:	a0 40 e9 02 c0       	mov    al,ds:0xc002e940
c0015b17:	83 f0 01             	xor    eax,0x1
c0015b1a:	84 c0                	test   al,al
c0015b1c:	74 1e                	je     c0015b3c <sendKeyboardToken(KeyboardToken)+0x260>
c0015b1e:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0015b23:	6a 01                	push   0x1
c0015b25:	6a 00                	push   0x0
c0015b27:	68 b2 57 01 c0       	push   0xc00157b2
c0015b2c:	50                   	push   eax
c0015b2d:	e8 2a 80 00 00       	call   c001db5c <Process::createThread(void (*)(void*), void*, int)>
c0015b32:	83 c4 10             	add    esp,0x10
c0015b35:	c6 05 40 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e940,0x1
c0015b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3f:	66 3d 1d 03          	cmp    ax,0x31d
c0015b43:	75 06                	jne    c0015b4b <sendKeyboardToken(KeyboardToken)+0x26f>
c0015b45:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015b4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4e:	66 3d 1c 03          	cmp    ax,0x31c
c0015b52:	75 06                	jne    c0015b5a <sendKeyboardToken(KeyboardToken)+0x27e>
c0015b54:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5d:	66 3d 1b 03          	cmp    ax,0x31b
c0015b61:	75 06                	jne    c0015b69 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015b63:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6c:	66 3d 1e 03          	cmp    ax,0x31e
c0015b70:	75 06                	jne    c0015b78 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015b72:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015b78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7b:	66 3d 1f 03          	cmp    ax,0x31f
c0015b7f:	75 06                	jne    c0015b87 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015b81:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8a:	66 3d 1a 03          	cmp    ax,0x31a
c0015b8e:	75 06                	jne    c0015b96 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015b90:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015b96:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015b9a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b9d:	83 f0 01             	xor    eax,0x1
c0015ba0:	84 c0                	test   al,al
c0015ba2:	74 77                	je     c0015c1b <sendKeyboardToken(KeyboardToken)+0x33f>
c0015ba4:	a0 41 e6 02 c0       	mov    al,ds:0xc002e641
c0015ba9:	84 c0                	test   al,al
c0015bab:	74 41                	je     c0015bee <sendKeyboardToken(KeyboardToken)+0x312>
c0015bad:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015bb1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015bb5:	74 2b                	je     c0015be2 <sendKeyboardToken(KeyboardToken)+0x306>
c0015bb7:	8b 15 44 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e944
c0015bbd:	89 d0                	mov    eax,edx
c0015bbf:	c1 e0 02             	shl    eax,0x2
c0015bc2:	01 d0                	add    eax,edx
c0015bc4:	01 c0                	add    eax,eax
c0015bc6:	a3 44 e9 02 c0       	mov    ds:0xc002e944,eax
c0015bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bce:	0f b7 c0             	movzx  eax,ax
c0015bd1:	8d 50 d0             	lea    edx,[eax-0x30]
c0015bd4:	a1 44 e9 02 c0       	mov    eax,ds:0xc002e944
c0015bd9:	01 d0                	add    eax,edx
c0015bdb:	a3 44 e9 02 c0       	mov    ds:0xc002e944,eax
c0015be0:	eb 6d                	jmp    c0015c4f <sendKeyboardToken(KeyboardToken)+0x373>
c0015be2:	c7 05 44 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e944,0x0
c0015bec:	eb 61                	jmp    c0015c4f <sendKeyboardToken(KeyboardToken)+0x373>
c0015bee:	a1 44 e9 02 c0       	mov    eax,ds:0xc002e944
c0015bf3:	85 c0                	test   eax,eax
c0015bf5:	74 18                	je     c0015c0f <sendKeyboardToken(KeyboardToken)+0x333>
c0015bf7:	a1 44 e9 02 c0       	mov    eax,ds:0xc002e944
c0015bfc:	0f b6 c0             	movzx  eax,al
c0015bff:	83 ec 0c             	sub    esp,0xc
c0015c02:	50                   	push   eax
c0015c03:	e8 16 fc ff ff       	call   c001581e <sendKeyToTerminal(unsigned char)>
c0015c08:	83 c4 10             	add    esp,0x10
c0015c0b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c0f:	c7 05 44 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e944,0x0
c0015c19:	eb 34                	jmp    c0015c4f <sendKeyboardToken(KeyboardToken)+0x373>
c0015c1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c1e:	66 3d 01 01          	cmp    ax,0x101
c0015c22:	75 2b                	jne    c0015c4f <sendKeyboardToken(KeyboardToken)+0x373>
c0015c24:	a1 44 e9 02 c0       	mov    eax,ds:0xc002e944
c0015c29:	85 c0                	test   eax,eax
c0015c2b:	74 18                	je     c0015c45 <sendKeyboardToken(KeyboardToken)+0x369>
c0015c2d:	a1 44 e9 02 c0       	mov    eax,ds:0xc002e944
c0015c32:	0f b6 c0             	movzx  eax,al
c0015c35:	83 ec 0c             	sub    esp,0xc
c0015c38:	50                   	push   eax
c0015c39:	e8 e0 fb ff ff       	call   c001581e <sendKeyToTerminal(unsigned char)>
c0015c3e:	83 c4 10             	add    esp,0x10
c0015c41:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c45:	c7 05 44 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e944,0x0
c0015c4f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c52:	83 f0 01             	xor    eax,0x1
c0015c55:	84 c0                	test   al,al
c0015c57:	74 4c                	je     c0015ca5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c59:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c5c:	83 f0 01             	xor    eax,0x1
c0015c5f:	84 c0                	test   al,al
c0015c61:	74 42                	je     c0015ca5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c63:	a0 40 e6 02 c0       	mov    al,ds:0xc002e640
c0015c68:	83 f0 01             	xor    eax,0x1
c0015c6b:	84 c0                	test   al,al
c0015c6d:	74 36                	je     c0015ca5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c72:	66 83 f8 1f          	cmp    ax,0x1f
c0015c76:	76 09                	jbe    c0015c81 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c7b:	66 83 f8 7e          	cmp    ax,0x7e
c0015c7f:	76 12                	jbe    c0015c93 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015c81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c84:	66 83 f8 0a          	cmp    ax,0xa
c0015c88:	74 09                	je     c0015c93 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015c8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8d:	66 83 f8 08          	cmp    ax,0x8
c0015c91:	75 12                	jne    c0015ca5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c96:	0f b6 c0             	movzx  eax,al
c0015c99:	83 ec 0c             	sub    esp,0xc
c0015c9c:	50                   	push   eax
c0015c9d:	e8 7c fb ff ff       	call   c001581e <sendKeyToTerminal(unsigned char)>
c0015ca2:	83 c4 10             	add    esp,0x10
c0015ca5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015ca8:	83 f0 01             	xor    eax,0x1
c0015cab:	84 c0                	test   al,al
c0015cad:	74 4f                	je     c0015cfe <sendKeyboardToken(KeyboardToken)+0x422>
c0015caf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cb2:	83 f0 01             	xor    eax,0x1
c0015cb5:	84 c0                	test   al,al
c0015cb7:	74 45                	je     c0015cfe <sendKeyboardToken(KeyboardToken)+0x422>
c0015cb9:	a0 40 e6 02 c0       	mov    al,ds:0xc002e640
c0015cbe:	84 c0                	test   al,al
c0015cc0:	74 3c                	je     c0015cfe <sendKeyboardToken(KeyboardToken)+0x422>
c0015cc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc5:	66 83 f8 3f          	cmp    ax,0x3f
c0015cc9:	76 33                	jbe    c0015cfe <sendKeyboardToken(KeyboardToken)+0x422>
c0015ccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cce:	66 83 f8 7f          	cmp    ax,0x7f
c0015cd2:	77 2a                	ja     c0015cfe <sendKeyboardToken(KeyboardToken)+0x422>
c0015cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd7:	88 c2                	mov    dl,al
c0015cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cdc:	66 83 f8 5f          	cmp    ax,0x5f
c0015ce0:	76 04                	jbe    c0015ce6 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015ce2:	b0 20                	mov    al,0x20
c0015ce4:	eb 02                	jmp    c0015ce8 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015ce6:	b0 00                	mov    al,0x0
c0015ce8:	29 c2                	sub    edx,eax
c0015cea:	88 d0                	mov    al,dl
c0015cec:	83 e8 40             	sub    eax,0x40
c0015cef:	0f b6 c0             	movzx  eax,al
c0015cf2:	83 ec 0c             	sub    esp,0xc
c0015cf5:	50                   	push   eax
c0015cf6:	e8 23 fb ff ff       	call   c001581e <sendKeyToTerminal(unsigned char)>
c0015cfb:	83 c4 10             	add    esp,0x10
c0015cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d01:	66 3d 00 03          	cmp    ax,0x300
c0015d05:	75 0f                	jne    c0015d16 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d07:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d0a:	83 f0 01             	xor    eax,0x1
c0015d0d:	84 c0                	test   al,al
c0015d0f:	74 05                	je     c0015d16 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d11:	e8 2f a9 ff ff       	call   c0010645 <doTerminalCycle()>
c0015d16:	90                   	nop
c0015d17:	c9                   	leave  
c0015d18:	c3                   	ret    

c0015d19 <clearInternalKeybuffer(VgaText*)>:
c0015d19:	55                   	push   ebp
c0015d1a:	89 e5                	mov    ebp,esp
c0015d1c:	83 ec 08             	sub    esp,0x8
c0015d1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d22:	05 98 01 00 00       	add    eax,0x198
c0015d27:	83 ec 0c             	sub    esp,0xc
c0015d2a:	50                   	push   eax
c0015d2b:	e8 3c aa fe ff       	call   c000076c <strlen>
c0015d30:	83 c4 10             	add    esp,0x10
c0015d33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d36:	81 c2 98 01 00 00    	add    edx,0x198
c0015d3c:	83 ec 04             	sub    esp,0x4
c0015d3f:	50                   	push   eax
c0015d40:	6a 00                	push   0x0
c0015d42:	52                   	push   edx
c0015d43:	e8 08 aa fe ff       	call   c0000750 <memset>
c0015d48:	83 c4 10             	add    esp,0x10
c0015d4b:	90                   	nop
c0015d4c:	c9                   	leave  
c0015d4d:	c3                   	ret    

c0015d4e <readKeyboard(VgaText*, char*, unsigned long)>:
c0015d4e:	55                   	push   ebp
c0015d4f:	89 e5                	mov    ebp,esp
c0015d51:	83 ec 18             	sub    esp,0x18
c0015d54:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0015d59:	85 c0                	test   eax,eax
c0015d5b:	74 2a                	je     c0015d87 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015d5d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015d63:	8b 0d 28 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e528
c0015d69:	83 ec 04             	sub    esp,0x4
c0015d6c:	68 40 e5 02 c0       	push   0xc002e540
c0015d71:	83 ec 08             	sub    esp,0x8
c0015d74:	89 e2                	mov    edx,esp
c0015d76:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015d79:	89 02                	mov    DWORD PTR [edx],eax
c0015d7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d7e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d82:	ff d1                	call   ecx
c0015d84:	83 c4 10             	add    esp,0x10
c0015d87:	fb                   	sti    
c0015d88:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015d8f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015d93:	0f 84 a1 00 00 00    	je     c0015e3a <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d9c:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015da2:	84 c0                	test   al,al
c0015da4:	75 28                	jne    c0015dce <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015da6:	fa                   	cli    
c0015da7:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c0015dac:	40                   	inc    eax
c0015dad:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c0015db2:	e8 ca 7f 00 00       	call   c001dd81 <schedule()>
c0015db7:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c0015dbc:	48                   	dec    eax
c0015dbd:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c0015dc2:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c0015dc7:	85 c0                	test   eax,eax
c0015dc9:	75 ce                	jne    c0015d99 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015dcb:	fb                   	sti    
c0015dcc:	eb cb                	jmp    c0015d99 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015dce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015dd1:	8d 50 01             	lea    edx,[eax+0x1]
c0015dd4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015dd7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015dda:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015de0:	88 10                	mov    BYTE PTR [eax],dl
c0015de2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de5:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015deb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015dee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df1:	05 98 01 00 00       	add    eax,0x198
c0015df6:	83 ec 0c             	sub    esp,0xc
c0015df9:	50                   	push   eax
c0015dfa:	e8 6d a9 fe ff       	call   c000076c <strlen>
c0015dff:	83 c4 10             	add    esp,0x10
c0015e02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e05:	81 c2 98 01 00 00    	add    edx,0x198
c0015e0b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015e0e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e11:	81 c2 98 01 00 00    	add    edx,0x198
c0015e17:	83 ec 04             	sub    esp,0x4
c0015e1a:	50                   	push   eax
c0015e1b:	51                   	push   ecx
c0015e1c:	52                   	push   edx
c0015e1d:	e8 66 a8 fe ff       	call   c0000688 <memmove>
c0015e22:	83 c4 10             	add    esp,0x10
c0015e25:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015e28:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015e2b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015e2f:	0f 85 5a ff ff ff    	jne    c0015d8f <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015e35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e38:	eb 03                	jmp    c0015e3d <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015e3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e3d:	c9                   	leave  
c0015e3e:	c3                   	ret    
c0015e3f:	90                   	nop

c0015e40 <Keyboard::Keyboard(char const*)>:
c0015e40:	83 ec 0c             	sub    esp,0xc
c0015e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e47:	83 ec 08             	sub    esp,0x8
c0015e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e4e:	50                   	push   eax
c0015e4f:	e8 6a e0 ff ff       	call   c0013ebe <Device::Device(char const*)>
c0015e54:	83 c4 10             	add    esp,0x10
c0015e57:	ba 68 b5 02 c0       	mov    edx,0xc002b568
c0015e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e60:	89 10                	mov    DWORD PTR [eax],edx
c0015e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e66:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015e70:	c6 05 24 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e524,0x1
c0015e77:	90                   	nop
c0015e78:	83 c4 0c             	add    esp,0xc
c0015e7b:	c3                   	ret    

c0015e7c <Keyboard::~Keyboard()>:
c0015e7c:	83 ec 0c             	sub    esp,0xc
c0015e7f:	ba 68 b5 02 c0       	mov    edx,0xc002b568
c0015e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e88:	89 10                	mov    DWORD PTR [eax],edx
c0015e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e8e:	83 ec 0c             	sub    esp,0xc
c0015e91:	50                   	push   eax
c0015e92:	e8 f1 dc ff ff       	call   c0013b88 <Device::~Device()>
c0015e97:	83 c4 10             	add    esp,0x10
c0015e9a:	90                   	nop
c0015e9b:	83 c4 0c             	add    esp,0xc
c0015e9e:	c3                   	ret    
c0015e9f:	90                   	nop

c0015ea0 <Keyboard::~Keyboard()>:
c0015ea0:	83 ec 0c             	sub    esp,0xc
c0015ea3:	83 ec 0c             	sub    esp,0xc
c0015ea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eaa:	e8 cd ff ff ff       	call   c0015e7c <Keyboard::~Keyboard()>
c0015eaf:	83 c4 10             	add    esp,0x10
c0015eb2:	83 ec 08             	sub    esp,0x8
c0015eb5:	68 5c 01 00 00       	push   0x15c
c0015eba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ebe:	e8 e6 c8 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0015ec3:	83 c4 10             	add    esp,0x10
c0015ec6:	83 c4 0c             	add    esp,0xc
c0015ec9:	c3                   	ret    

c0015eca <LogicalDisk::close(int, int, void*)>:
c0015eca:	83 c8 ff             	or     eax,0xffffffff
c0015ecd:	c3                   	ret    

c0015ece <LogicalDisk::~LogicalDisk()>:
c0015ece:	83 ec 0c             	sub    esp,0xc
c0015ed1:	ba e0 b5 02 c0       	mov    edx,0xc002b5e0
c0015ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eda:	89 10                	mov    DWORD PTR [eax],edx
c0015edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ee0:	83 ec 0c             	sub    esp,0xc
c0015ee3:	50                   	push   eax
c0015ee4:	e8 9f dc ff ff       	call   c0013b88 <Device::~Device()>
c0015ee9:	83 c4 10             	add    esp,0x10
c0015eec:	90                   	nop
c0015eed:	83 c4 0c             	add    esp,0xc
c0015ef0:	c3                   	ret    
c0015ef1:	90                   	nop

c0015ef2 <LogicalDisk::~LogicalDisk()>:
c0015ef2:	83 ec 0c             	sub    esp,0xc
c0015ef5:	83 ec 0c             	sub    esp,0xc
c0015ef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015efc:	e8 cd ff ff ff       	call   c0015ece <LogicalDisk::~LogicalDisk()>
c0015f01:	83 c4 10             	add    esp,0x10
c0015f04:	83 ec 08             	sub    esp,0x8
c0015f07:	68 74 01 00 00       	push   0x174
c0015f0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f10:	e8 94 c8 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0015f15:	83 c4 10             	add    esp,0x10
c0015f18:	83 c4 0c             	add    esp,0xc
c0015f1b:	c3                   	ret    

c0015f1c <LogicalDisk::open(int, int, void*)>:
c0015f1c:	83 ec 18             	sub    esp,0x18
c0015f1f:	68 94 b5 02 c0       	push   0xc002b594
c0015f24:	e8 c6 42 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0015f29:	83 c8 ff             	or     eax,0xffffffff
c0015f2c:	83 c4 1c             	add    esp,0x1c
c0015f2f:	c3                   	ret    

c0015f30 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015f30:	53                   	push   ebx
c0015f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015f35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f3d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015f43:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015f49:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015f4f:	77 10                	ja     c0015f61 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015f51:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015f57:	89 d3                	mov    ebx,edx
c0015f59:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015f5f:	72 05                	jb     c0015f66 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015f61:	83 c8 ff             	or     eax,0xffffffff
c0015f64:	89 c2                	mov    edx,eax
c0015f66:	5b                   	pop    ebx
c0015f67:	c3                   	ret    

c0015f68 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015f68:	56                   	push   esi
c0015f69:	83 c8 ff             	or     eax,0xffffffff
c0015f6c:	53                   	push   ebx
c0015f6d:	89 c2                	mov    edx,eax
c0015f6f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015f73:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015f77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f7b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f81:	77 27                	ja     c0015faa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015f83:	89 d8                	mov    eax,ebx
c0015f85:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015f8b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015f91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f96:	89 c2                	mov    edx,eax
c0015f98:	73 10                	jae    c0015faa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015f9a:	89 c8                	mov    eax,ecx
c0015f9c:	89 da                	mov    edx,ebx
c0015f9e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015fa4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015faa:	5b                   	pop    ebx
c0015fab:	5e                   	pop    esi
c0015fac:	c3                   	ret    
c0015fad:	90                   	nop

c0015fae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015fae:	83 ec 1c             	sub    esp,0x1c
c0015fb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015fb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015fb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015fbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015fc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015fc5:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015fcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fd4:	83 ec 08             	sub    esp,0x8
c0015fd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015fdb:	50                   	push   eax
c0015fdc:	e8 dd de ff ff       	call   c0013ebe <Device::Device(char const*)>
c0015fe1:	83 c4 10             	add    esp,0x10
c0015fe4:	ba e0 b5 02 c0       	mov    edx,0xc002b5e0
c0015fe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fed:	89 10                	mov    DWORD PTR [eax],edx
c0015fef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ff3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ffe:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016009:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016013:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016017:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001601b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001601f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016025:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001602b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001602f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016032:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016036:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001603c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016046:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001604a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016054:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001605e:	90                   	nop
c001605f:	83 c4 1c             	add    esp,0x1c
c0016062:	c3                   	ret    
c0016063:	90                   	nop

c0016064 <LogicalDisk::assignDriveLetter()>:
c0016064:	55                   	push   ebp
c0016065:	57                   	push   edi
c0016066:	56                   	push   esi
c0016067:	53                   	push   ebx
c0016068:	83 ec 14             	sub    esp,0x14
c001606b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001606f:	8b 3d 60 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e960
c0016075:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001607b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001607f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016085:	8b 3d 64 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e964
c001608b:	3c 01                	cmp    al,0x1
c001608d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016091:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016095:	19 c0                	sbb    eax,eax
c0016097:	83 e0 02             	and    eax,0x2
c001609a:	83 c0 41             	add    eax,0x41
c001609d:	0f be e8             	movsx  ebp,al
c00160a0:	3c 43                	cmp    al,0x43
c00160a2:	75 10                	jne    c00160b4 <LogicalDisk::assignDriveLetter()+0x50>
c00160a4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00160ab:	75 5d                	jne    c001610a <LogicalDisk::assignDriveLetter()+0xa6>
c00160ad:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00160b2:	75 56                	jne    c001610a <LogicalDisk::assignDriveLetter()+0xa6>
c00160b4:	8d 75 bf             	lea    esi,[ebp-0x41]
c00160b7:	ba 01 00 00 00       	mov    edx,0x1
c00160bc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00160c0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00160c4:	d3 e2                	shl    edx,cl
c00160c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160ca:	89 d7                	mov    edi,edx
c00160cc:	89 d6                	mov    esi,edx
c00160ce:	c1 ff 1f             	sar    edi,0x1f
c00160d1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00160d5:	21 f9                	and    ecx,edi
c00160d7:	09 d1                	or     ecx,edx
c00160d9:	75 2f                	jne    c001610a <LogicalDisk::assignDriveLetter()+0xa6>
c00160db:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00160df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00160e3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00160e9:	09 f2                	or     edx,esi
c00160eb:	89 15 60 e9 02 c0    	mov    DWORD PTR ds:0xc002e960,edx
c00160f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160f5:	09 fa                	or     edx,edi
c00160f7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00160fb:	89 15 64 e9 02 c0    	mov    DWORD PTR ds:0xc002e964,edx
c0016101:	89 1c bd 80 e9 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1680],ebx
c0016108:	eb 08                	jmp    c0016112 <LogicalDisk::assignDriveLetter()+0xae>
c001610a:	45                   	inc    ebp
c001610b:	40                   	inc    eax
c001610c:	3c 5b                	cmp    al,0x5b
c001610e:	75 90                	jne    c00160a0 <LogicalDisk::assignDriveLetter()+0x3c>
c0016110:	31 c0                	xor    eax,eax
c0016112:	83 c4 14             	add    esp,0x14
c0016115:	5b                   	pop    ebx
c0016116:	5e                   	pop    esi
c0016117:	5f                   	pop    edi
c0016118:	5d                   	pop    ebp
c0016119:	c3                   	ret    

c001611a <LogicalDisk::mount()>:
c001611a:	56                   	push   esi
c001611b:	53                   	push   ebx
c001611c:	53                   	push   ebx
c001611d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016121:	8b 1d f4 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4f4
c0016127:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016131:	85 db                	test   ebx,ebx
c0016133:	74 27                	je     c001615c <LogicalDisk::mount()+0x42>
c0016135:	51                   	push   ecx
c0016136:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001613d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001613f:	83 e8 41             	sub    eax,0x41
c0016142:	50                   	push   eax
c0016143:	56                   	push   esi
c0016144:	53                   	push   ebx
c0016145:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016148:	83 c4 10             	add    esp,0x10
c001614b:	84 c0                	test   al,al
c001614d:	74 08                	je     c0016157 <LogicalDisk::mount()+0x3d>
c001614f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016155:	eb 07                	jmp    c001615e <LogicalDisk::mount()+0x44>
c0016157:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001615a:	eb d5                	jmp    c0016131 <LogicalDisk::mount()+0x17>
c001615c:	31 c0                	xor    eax,eax
c001615e:	5a                   	pop    edx
c001615f:	5b                   	pop    ebx
c0016160:	5e                   	pop    esi
c0016161:	c3                   	ret    

c0016162 <LogicalDisk::unmount()>:
c0016162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016166:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016170:	c3                   	ret    
c0016171:	90                   	nop

c0016172 <LogicalDisk::eject()>:
c0016172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016176:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001617c:	8b 10                	mov    edx,DWORD PTR [eax]
c001617e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016182:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016185:	90                   	nop

c0016186 <LogicalDisk::unassignDriveLetter()>:
c0016186:	57                   	push   edi
c0016187:	56                   	push   esi
c0016188:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001618c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016193:	84 c9                	test   cl,cl
c0016195:	75 0f                	jne    c00161a6 <LogicalDisk::unassignDriveLetter()+0x20>
c0016197:	c7 44 24 0c b8 b5 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b5b8
c001619f:	5e                   	pop    esi
c00161a0:	5f                   	pop    edi
c00161a1:	e9 49 40 00 00       	jmp    c001a1ef <Krnl::panic(char const*)>
c00161a6:	83 e9 41             	sub    ecx,0x41
c00161a9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00161b0:	b8 01 00 00 00       	mov    eax,0x1
c00161b5:	c7 04 8d 80 e9 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1680],0x0
c00161c0:	d3 e0                	shl    eax,cl
c00161c2:	89 c7                	mov    edi,eax
c00161c4:	f7 d0                	not    eax
c00161c6:	c1 ff 1f             	sar    edi,0x1f
c00161c9:	21 05 60 e9 02 c0    	and    DWORD PTR ds:0xc002e960,eax
c00161cf:	89 fe                	mov    esi,edi
c00161d1:	f7 d6                	not    esi
c00161d3:	21 35 64 e9 02 c0    	and    DWORD PTR ds:0xc002e964,esi
c00161d9:	5e                   	pop    esi
c00161da:	5f                   	pop    edi
c00161db:	c3                   	ret    

c00161dc <LogicalDisk::read(unsigned long long, int, void*)>:
c00161dc:	57                   	push   edi
c00161dd:	56                   	push   esi
c00161de:	53                   	push   ebx
c00161df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00161e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00161eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161ef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00161f5:	77 41                	ja     c0016238 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00161f7:	99                   	cdq    
c00161f8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00161fe:	01 c8                	add    eax,ecx
c0016200:	11 da                	adc    edx,ebx
c0016202:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016208:	19 d7                	sbb    edi,edx
c001620a:	72 33                	jb     c001623f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001620c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016212:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016218:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001621c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016220:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016226:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001622c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016230:	5b                   	pop    ebx
c0016231:	5e                   	pop    esi
c0016232:	5f                   	pop    edi
c0016233:	e9 1c 0b 00 00       	jmp    c0016d54 <VCache::read(unsigned long long, int, void*)>
c0016238:	b8 05 00 00 00       	mov    eax,0x5
c001623d:	eb 05                	jmp    c0016244 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001623f:	b8 07 00 00 00       	mov    eax,0x7
c0016244:	5b                   	pop    ebx
c0016245:	5e                   	pop    esi
c0016246:	5f                   	pop    edi
c0016247:	c3                   	ret    

c0016248 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016248:	57                   	push   edi
c0016249:	56                   	push   esi
c001624a:	53                   	push   ebx
c001624b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001624f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016253:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016257:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001625b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016261:	77 41                	ja     c00162a4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016263:	99                   	cdq    
c0016264:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001626a:	01 c8                	add    eax,ecx
c001626c:	11 da                	adc    edx,ebx
c001626e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016274:	19 d7                	sbb    edi,edx
c0016276:	72 33                	jb     c00162ab <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016278:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001627e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016284:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016288:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001628c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016292:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016298:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001629c:	5b                   	pop    ebx
c001629d:	5e                   	pop    esi
c001629e:	5f                   	pop    edi
c001629f:	e9 86 09 00 00       	jmp    c0016c2a <VCache::write(unsigned long long, int, void*)>
c00162a4:	b8 05 00 00 00       	mov    eax,0x5
c00162a9:	eb 05                	jmp    c00162b0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00162ab:	b8 07 00 00 00       	mov    eax,0x7
c00162b0:	5b                   	pop    ebx
c00162b1:	5e                   	pop    esi
c00162b2:	5f                   	pop    edi
c00162b3:	c3                   	ret    

c00162b4 <Mouse::Mouse(char const*)>:
c00162b4:	83 ec 0c             	sub    esp,0xc
c00162b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162bb:	83 ec 08             	sub    esp,0x8
c00162be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162c2:	50                   	push   eax
c00162c3:	e8 f6 db ff ff       	call   c0013ebe <Device::Device(char const*)>
c00162c8:	83 c4 10             	add    esp,0x10
c00162cb:	ba 0c b6 02 c0       	mov    edx,0xc002b60c
c00162d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162d4:	89 10                	mov    DWORD PTR [eax],edx
c00162d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162da:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00162e4:	90                   	nop
c00162e5:	83 c4 0c             	add    esp,0xc
c00162e8:	c3                   	ret    
c00162e9:	90                   	nop

c00162ea <Mouse::~Mouse()>:
c00162ea:	83 ec 0c             	sub    esp,0xc
c00162ed:	ba 0c b6 02 c0       	mov    edx,0xc002b60c
c00162f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162f6:	89 10                	mov    DWORD PTR [eax],edx
c00162f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162fc:	83 ec 0c             	sub    esp,0xc
c00162ff:	50                   	push   eax
c0016300:	e8 83 d8 ff ff       	call   c0013b88 <Device::~Device()>
c0016305:	83 c4 10             	add    esp,0x10
c0016308:	90                   	nop
c0016309:	83 c4 0c             	add    esp,0xc
c001630c:	c3                   	ret    
c001630d:	90                   	nop

c001630e <Mouse::~Mouse()>:
c001630e:	83 ec 0c             	sub    esp,0xc
c0016311:	83 ec 0c             	sub    esp,0xc
c0016314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016318:	e8 cd ff ff ff       	call   c00162ea <Mouse::~Mouse()>
c001631d:	83 c4 10             	add    esp,0x10
c0016320:	83 ec 08             	sub    esp,0x8
c0016323:	68 58 01 00 00       	push   0x158
c0016328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001632c:	e8 78 c4 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0016331:	83 c4 10             	add    esp,0x10
c0016334:	83 c4 0c             	add    esp,0xc
c0016337:	c3                   	ret    

c0016338 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016338:	55                   	push   ebp
c0016339:	57                   	push   edi
c001633a:	56                   	push   esi
c001633b:	53                   	push   ebx
c001633c:	81 ec 28 01 00 00    	sub    esp,0x128
c0016342:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016349:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016350:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016357:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001635e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016362:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016366:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001636d:	e8 48 dc ff ff       	call   c0013fba <Device::getName()>
c0016372:	5a                   	pop    edx
c0016373:	59                   	pop    ecx
c0016374:	50                   	push   eax
c0016375:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016379:	55                   	push   ebp
c001637a:	e8 8d a4 fe ff       	call   c000080c <strcpy>
c001637f:	5b                   	pop    ebx
c0016380:	58                   	pop    eax
c0016381:	68 30 b6 02 c0       	push   0xc002b630
c0016386:	55                   	push   ebp
c0016387:	e8 c0 a5 fe ff       	call   c000094c <strcat>
c001638c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016393:	e8 91 94 ff ff       	call   c000f829 <malloc>
c0016398:	83 c4 0c             	add    esp,0xc
c001639b:	89 c3                	mov    ebx,eax
c001639d:	57                   	push   edi
c001639e:	56                   	push   esi
c001639f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163a7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00163ae:	55                   	push   ebp
c00163af:	50                   	push   eax
c00163b0:	e8 f9 fb ff ff       	call   c0015fae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00163b5:	83 c4 14             	add    esp,0x14
c00163b8:	53                   	push   ebx
c00163b9:	e8 a6 fc ff ff       	call   c0016064 <LogicalDisk::assignDriveLetter()>
c00163be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163c1:	e8 54 fd ff ff       	call   c001611a <LogicalDisk::mount()>
c00163c6:	58                   	pop    eax
c00163c7:	5a                   	pop    edx
c00163c8:	53                   	push   ebx
c00163c9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00163d0:	e8 e5 d8 ff ff       	call   c0013cba <Device::addChild(Device*)>
c00163d5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00163db:	5b                   	pop    ebx
c00163dc:	5e                   	pop    esi
c00163dd:	5f                   	pop    edi
c00163de:	5d                   	pop    ebp
c00163df:	c3                   	ret    

c00163e0 <createPartitionsForDisk(PhysicalDisk*)>:
c00163e0:	55                   	push   ebp
c00163e1:	57                   	push   edi
c00163e2:	56                   	push   esi
c00163e3:	53                   	push   ebx
c00163e4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00163ea:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00163f1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00163f7:	3d 00 02 00 00       	cmp    eax,0x200
c00163fc:	74 27                	je     c0016425 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00163fe:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016404:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001640a:	83 ec 10             	sub    esp,0x10
c001640d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016411:	99                   	cdq    
c0016412:	c1 e6 0a             	shl    esi,0xa
c0016415:	52                   	push   edx
c0016416:	89 fd                	mov    ebp,edi
c0016418:	50                   	push   eax
c0016419:	55                   	push   ebp
c001641a:	56                   	push   esi
c001641b:	e8 04 08 01 00       	call   c0026c24 <__udivdi3>
c0016420:	e9 b1 00 00 00       	jmp    c00164d6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016425:	83 ec 0c             	sub    esp,0xc
c0016428:	8b 03                	mov    eax,DWORD PTR [ebx]
c001642a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001642e:	56                   	push   esi
c001642f:	6a 01                	push   0x1
c0016431:	6a 00                	push   0x0
c0016433:	6a 00                	push   0x0
c0016435:	53                   	push   ebx
c0016436:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016439:	83 c4 20             	add    esp,0x20
c001643c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016444:	75 0a                	jne    c0016450 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016446:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001644e:	74 2c                	je     c001647c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016450:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016456:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001645c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016462:	83 ec 10             	sub    esp,0x10
c0016465:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016469:	89 f7                	mov    edi,esi
c001646b:	c1 e0 0a             	shl    eax,0xa
c001646e:	c1 ff 1f             	sar    edi,0x1f
c0016471:	57                   	push   edi
c0016472:	56                   	push   esi
c0016473:	52                   	push   edx
c0016474:	50                   	push   eax
c0016475:	e8 aa 07 01 00       	call   c0026c24 <__udivdi3>
c001647a:	eb 5a                	jmp    c00164d6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001647c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016483:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001648a:	83 e1 7f             	and    ecx,0x7f
c001648d:	83 e0 7f             	and    eax,0x7f
c0016490:	01 c1                	add    ecx,eax
c0016492:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016499:	83 e0 7f             	and    eax,0x7f
c001649c:	01 c1                	add    ecx,eax
c001649e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00164a5:	83 e0 7f             	and    eax,0x7f
c00164a8:	00 c1                	add    cl,al
c00164aa:	74 41                	je     c00164ed <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00164ac:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00164b2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00164b8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00164be:	83 ec 10             	sub    esp,0x10
c00164c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164c5:	89 f7                	mov    edi,esi
c00164c7:	c1 e0 0a             	shl    eax,0xa
c00164ca:	c1 ff 1f             	sar    edi,0x1f
c00164cd:	57                   	push   edi
c00164ce:	56                   	push   esi
c00164cf:	52                   	push   edx
c00164d0:	50                   	push   eax
c00164d1:	e8 4e 07 01 00       	call   c0026c24 <__udivdi3>
c00164d6:	83 c4 14             	add    esp,0x14
c00164d9:	52                   	push   edx
c00164da:	50                   	push   eax
c00164db:	6a 00                	push   0x0
c00164dd:	6a 00                	push   0x0
c00164df:	53                   	push   ebx
c00164e0:	e8 53 fe ff ff       	call   c0016338 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00164e5:	83 c4 20             	add    esp,0x20
c00164e8:	e9 79 01 00 00       	jmp    c0016666 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00164ed:	89 f0                	mov    eax,esi
c00164ef:	31 f6                	xor    esi,esi
c00164f1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00164f8:	75 02                	jne    c00164fc <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00164fa:	89 f1                	mov    ecx,esi
c00164fc:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016503:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001650a:	c1 e2 08             	shl    edx,0x8
c001650d:	c1 e7 10             	shl    edi,0x10
c0016510:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016518:	09 fa                	or     edx,edi
c001651a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016522:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016529:	83 c0 10             	add    eax,0x10
c001652c:	09 fa                	or     edx,edi
c001652e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016535:	c1 e7 18             	shl    edi,0x18
c0016538:	09 fa                	or     edx,edi
c001653a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016541:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016545:	c1 e7 10             	shl    edi,0x10
c0016548:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001654f:	c1 e2 08             	shl    edx,0x8
c0016552:	09 fa                	or     edx,edi
c0016554:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001655b:	09 fa                	or     edx,edi
c001655d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016564:	c1 e7 18             	shl    edi,0x18
c0016567:	09 fa                	or     edx,edi
c0016569:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001656d:	46                   	inc    esi
c001656e:	83 fe 04             	cmp    esi,0x4
c0016571:	0f 85 7a ff ff ff    	jne    c00164f1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001657b:	83 f0 01             	xor    eax,0x1
c001657e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016582:	75 57                	jne    c00165db <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016584:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016588:	83 f0 01             	xor    eax,0x1
c001658b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001658f:	75 4a                	jne    c00165db <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016591:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016595:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001659d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00165a5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165ab:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165b1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165bb:	89 f7                	mov    edi,esi
c00165bd:	c1 e0 0a             	shl    eax,0xa
c00165c0:	c1 ff 1f             	sar    edi,0x1f
c00165c3:	57                   	push   edi
c00165c4:	56                   	push   esi
c00165c5:	52                   	push   edx
c00165c6:	50                   	push   eax
c00165c7:	e8 58 06 01 00       	call   c0026c24 <__udivdi3>
c00165cc:	83 c4 10             	add    esp,0x10
c00165cf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00165d3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00165d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00165db:	84 c9                	test   cl,cl
c00165dd:	74 53                	je     c0016632 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00165df:	0f b6 c9             	movzx  ecx,cl
c00165e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00165ea:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00165ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00165f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00165fa:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00165fe:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016606:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001660a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001660e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016612:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016616:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001661a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001661e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016622:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016626:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001662a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001662e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016632:	31 ed                	xor    ebp,ebp
c0016634:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016638:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001663c:	89 f8                	mov    eax,edi
c001663e:	09 f0                	or     eax,esi
c0016640:	74 1e                	je     c0016660 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016642:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016646:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001664a:	89 d1                	mov    ecx,edx
c001664c:	09 c1                	or     ecx,eax
c001664e:	74 10                	je     c0016660 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016650:	83 ec 0c             	sub    esp,0xc
c0016653:	57                   	push   edi
c0016654:	56                   	push   esi
c0016655:	52                   	push   edx
c0016656:	50                   	push   eax
c0016657:	53                   	push   ebx
c0016658:	e8 db fc ff ff       	call   c0016338 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001665d:	83 c4 20             	add    esp,0x20
c0016660:	45                   	inc    ebp
c0016661:	83 fd 04             	cmp    ebp,0x4
c0016664:	75 ce                	jne    c0016634 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016666:	81 c4 5c 02 00 00    	add    esp,0x25c
c001666c:	5b                   	pop    ebx
c001666d:	5e                   	pop    esi
c001666e:	5f                   	pop    edi
c001666f:	5d                   	pop    ebp
c0016670:	c3                   	ret    
c0016671:	90                   	nop

c0016672 <Serial::Serial(char const*)>:
c0016672:	83 ec 0c             	sub    esp,0xc
c0016675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016679:	83 ec 08             	sub    esp,0x8
c001667c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016680:	50                   	push   eax
c0016681:	e8 38 d8 ff ff       	call   c0013ebe <Device::Device(char const*)>
c0016686:	83 c4 10             	add    esp,0x10
c0016689:	ba 44 b6 02 c0       	mov    edx,0xc002b644
c001668e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016692:	89 10                	mov    DWORD PTR [eax],edx
c0016694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016698:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00166a2:	90                   	nop
c00166a3:	83 c4 0c             	add    esp,0xc
c00166a6:	c3                   	ret    
c00166a7:	90                   	nop

c00166a8 <Serial::~Serial()>:
c00166a8:	83 ec 0c             	sub    esp,0xc
c00166ab:	ba 44 b6 02 c0       	mov    edx,0xc002b644
c00166b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166b4:	89 10                	mov    DWORD PTR [eax],edx
c00166b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ba:	83 ec 0c             	sub    esp,0xc
c00166bd:	50                   	push   eax
c00166be:	e8 c5 d4 ff ff       	call   c0013b88 <Device::~Device()>
c00166c3:	83 c4 10             	add    esp,0x10
c00166c6:	90                   	nop
c00166c7:	83 c4 0c             	add    esp,0xc
c00166ca:	c3                   	ret    
c00166cb:	90                   	nop

c00166cc <Serial::~Serial()>:
c00166cc:	83 ec 0c             	sub    esp,0xc
c00166cf:	83 ec 0c             	sub    esp,0xc
c00166d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166d6:	e8 cd ff ff ff       	call   c00166a8 <Serial::~Serial()>
c00166db:	83 c4 10             	add    esp,0x10
c00166de:	83 ec 08             	sub    esp,0x8
c00166e1:	68 58 01 00 00       	push   0x158
c00166e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166ea:	e8 ba c0 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c00166ef:	83 c4 10             	add    esp,0x10
c00166f2:	83 c4 0c             	add    esp,0xc
c00166f5:	c3                   	ret    

c00166f6 <Timer::Timer(char const*)>:
c00166f6:	83 ec 0c             	sub    esp,0xc
c00166f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166fd:	83 ec 08             	sub    esp,0x8
c0016700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016704:	50                   	push   eax
c0016705:	e8 b4 d7 ff ff       	call   c0013ebe <Device::Device(char const*)>
c001670a:	83 c4 10             	add    esp,0x10
c001670d:	ba 88 b6 02 c0       	mov    edx,0xc002b688
c0016712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016716:	89 10                	mov    DWORD PTR [eax],edx
c0016718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001671c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016726:	90                   	nop
c0016727:	83 c4 0c             	add    esp,0xc
c001672a:	c3                   	ret    
c001672b:	90                   	nop

c001672c <Timer::~Timer()>:
c001672c:	83 ec 0c             	sub    esp,0xc
c001672f:	ba 88 b6 02 c0       	mov    edx,0xc002b688
c0016734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016738:	89 10                	mov    DWORD PTR [eax],edx
c001673a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001673e:	83 ec 0c             	sub    esp,0xc
c0016741:	50                   	push   eax
c0016742:	e8 41 d4 ff ff       	call   c0013b88 <Device::~Device()>
c0016747:	83 c4 10             	add    esp,0x10
c001674a:	90                   	nop
c001674b:	83 c4 0c             	add    esp,0xc
c001674e:	c3                   	ret    
c001674f:	90                   	nop

c0016750 <Timer::~Timer()>:
c0016750:	83 ec 0c             	sub    esp,0xc
c0016753:	83 ec 0c             	sub    esp,0xc
c0016756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001675a:	e8 cd ff ff ff       	call   c001672c <Timer::~Timer()>
c001675f:	83 c4 10             	add    esp,0x10
c0016762:	83 ec 08             	sub    esp,0x8
c0016765:	68 5c 01 00 00       	push   0x15c
c001676a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001676e:	e8 36 c0 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0016773:	83 c4 10             	add    esp,0x10
c0016776:	83 c4 0c             	add    esp,0xc
c0016779:	c3                   	ret    

c001677a <Timer::read()>:
c001677a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001677e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016784:	c3                   	ret    

c0016785 <timerHandler(unsigned long long)>:
c0016785:	55                   	push   ebp
c0016786:	57                   	push   edi
c0016787:	56                   	push   esi
c0016788:	53                   	push   ebx
c0016789:	83 ec 0c             	sub    esp,0xc
c001678c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016790:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016794:	01 35 f0 e9 02 c0    	add    DWORD PTR ds:0xc002e9f0,esi
c001679a:	11 3d f4 e9 02 c0    	adc    DWORD PTR ds:0xc002e9f4,edi
c00167a0:	80 3d 8d e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e38d,0x0
c00167a7:	0f 84 42 01 00 00    	je     c00168ef <timerHandler(unsigned long long)+0x16a>
c00167ad:	fa                   	cli    
c00167ae:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c00167b4:	83 ec 0c             	sub    esp,0xc
c00167b7:	ff 05 84 f8 02 c0    	inc    DWORD PTR ds:0xc002f884
c00167bd:	68 98 f8 02 c0       	push   0xc002f898
c00167c2:	e8 b7 24 01 00       	call   c0028c7e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00167c7:	83 c4 10             	add    esp,0x10
c00167ca:	84 c0                	test   al,al
c00167cc:	0f 85 a2 00 00 00    	jne    c0016874 <timerHandler(unsigned long long)+0xef>
c00167d2:	83 ec 0c             	sub    esp,0xc
c00167d5:	68 98 f8 02 c0       	push   0xc002f898
c00167da:	e8 bb 24 01 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167df:	83 c4 10             	add    esp,0x10
c00167e2:	89 c3                	mov    ebx,eax
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	68 98 f8 02 c0       	push   0xc002f898
c00167ec:	e8 a9 24 01 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167f1:	c7 04 24 98 f8 02 c0 	mov    DWORD PTR [esp],0xc002f898
c00167f8:	89 c5                	mov    ebp,eax
c00167fa:	e8 a3 24 01 00       	call   c0028ca2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00167ff:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016802:	83 c4 10             	add    esp,0x10
c0016805:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016808:	39 15 f0 e9 02 c0    	cmp    DWORD PTR ds:0xc002e9f0,edx
c001680e:	a1 f4 e9 02 c0       	mov    eax,ds:0xc002e9f4
c0016813:	19 c8                	sbb    eax,ecx
c0016815:	72 21                	jb     c0016838 <timerHandler(unsigned long long)+0xb3>
c0016817:	83 ec 0c             	sub    esp,0xc
c001681a:	55                   	push   ebp
c001681b:	e8 f3 79 00 00       	call   c001e213 <unblockTask(ThreadControlBlock*)>
c0016820:	83 c4 10             	add    esp,0x10
c0016823:	39 eb                	cmp    ebx,ebp
c0016825:	75 21                	jne    c0016848 <timerHandler(unsigned long long)+0xc3>
c0016827:	83 ec 0c             	sub    esp,0xc
c001682a:	68 98 f8 02 c0       	push   0xc002f898
c001682f:	e8 66 24 01 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016834:	89 c3                	mov    ebx,eax
c0016836:	eb 0d                	jmp    c0016845 <timerHandler(unsigned long long)+0xc0>
c0016838:	50                   	push   eax
c0016839:	50                   	push   eax
c001683a:	55                   	push   ebp
c001683b:	68 98 f8 02 c0       	push   0xc002f898
c0016840:	e8 0b 25 01 00       	call   c0028d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016845:	83 c4 10             	add    esp,0x10
c0016848:	83 ec 0c             	sub    esp,0xc
c001684b:	68 98 f8 02 c0       	push   0xc002f898
c0016850:	e8 29 24 01 00       	call   c0028c7e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016855:	83 c4 10             	add    esp,0x10
c0016858:	84 c0                	test   al,al
c001685a:	75 18                	jne    c0016874 <timerHandler(unsigned long long)+0xef>
c001685c:	83 ec 0c             	sub    esp,0xc
c001685f:	68 98 f8 02 c0       	push   0xc002f898
c0016864:	e8 31 24 01 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016869:	83 c4 10             	add    esp,0x10
c001686c:	39 d8                	cmp    eax,ebx
c001686e:	0f 85 70 ff ff ff    	jne    c00167e4 <timerHandler(unsigned long long)+0x5f>
c0016874:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016879:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c001687d:	74 3d                	je     c00168bc <timerHandler(unsigned long long)+0x137>
c001687f:	80 3d 8c e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e38c,0x0
c0016886:	74 34                	je     c00168bc <timerHandler(unsigned long long)+0x137>
c0016888:	fa                   	cli    
c0016889:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001688f:	31 d2                	xor    edx,edx
c0016891:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016896:	89 f9                	mov    ecx,edi
c0016898:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001689b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168a0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00168a3:	39 c6                	cmp    esi,eax
c00168a5:	19 d1                	sbb    ecx,edx
c00168a7:	72 05                	jb     c00168ae <timerHandler(unsigned long long)+0x129>
c00168a9:	e8 d3 74 00 00       	call   c001dd81 <schedule()>
c00168ae:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c00168b3:	48                   	dec    eax
c00168b4:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c00168b9:	75 01                	jne    c00168bc <timerHandler(unsigned long long)+0x137>
c00168bb:	fb                   	sti    
c00168bc:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c00168c1:	48                   	dec    eax
c00168c2:	a3 84 f8 02 c0       	mov    ds:0xc002f884,eax
c00168c7:	75 18                	jne    c00168e1 <timerHandler(unsigned long long)+0x15c>
c00168c9:	83 3d 80 f8 02 c0 00 	cmp    DWORD PTR ds:0xc002f880,0x0
c00168d0:	74 0f                	je     c00168e1 <timerHandler(unsigned long long)+0x15c>
c00168d2:	c7 05 80 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x0
c00168dc:	e8 a0 74 00 00       	call   c001dd81 <schedule()>
c00168e1:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c00168e6:	48                   	dec    eax
c00168e7:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c00168ec:	75 01                	jne    c00168ef <timerHandler(unsigned long long)+0x16a>
c00168ee:	fb                   	sti    
c00168ef:	83 c4 0c             	add    esp,0xc
c00168f2:	5b                   	pop    ebx
c00168f3:	5e                   	pop    esi
c00168f4:	5f                   	pop    edi
c00168f5:	5d                   	pop    ebp
c00168f6:	c3                   	ret    

c00168f7 <setupTimer(int)>:
c00168f7:	57                   	push   edi
c00168f8:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00168fd:	56                   	push   esi
c00168fe:	53                   	push   ebx
c00168ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016903:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016909:	83 ec 0c             	sub    esp,0xc
c001690c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016912:	e8 a3 d6 ff ff       	call   c0013fba <Device::getName()>
c0016917:	83 c4 10             	add    esp,0x10
c001691a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001691d:	0f 85 8d 00 00 00    	jne    c00169b0 <setupTimer(int)+0xb9>
c0016923:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016928:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001692f:	74 7f                	je     c00169b0 <setupTimer(int)+0xb9>
c0016931:	83 ec 0c             	sub    esp,0xc
c0016934:	68 5c 01 00 00       	push   0x15c
c0016939:	e8 eb 8e ff ff       	call   c000f829 <malloc>
c001693e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016941:	89 c3                	mov    ebx,eax
c0016943:	e8 b2 fe 00 00       	call   c00267fa <PIT::PIT()>
c0016948:	59                   	pop    ecx
c0016949:	5f                   	pop    edi
c001694a:	53                   	push   ebx
c001694b:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0016951:	e8 64 d3 ff ff       	call   c0013cba <Device::addChild(Device*)>
c0016956:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016958:	6a 00                	push   0x0
c001695a:	6a 00                	push   0x0
c001695c:	56                   	push   esi
c001695d:	53                   	push   ebx
c001695e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016961:	83 c4 14             	add    esp,0x14
c0016964:	68 60 01 00 00       	push   0x160
c0016969:	e8 bb 8e ff ff       	call   c000f829 <malloc>
c001696e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016971:	89 c7                	mov    edi,eax
c0016973:	e8 32 fd 00 00       	call   c00266aa <APICTimer::APICTimer()>
c0016978:	6a 00                	push   0x0
c001697a:	6a 00                	push   0x0
c001697c:	56                   	push   esi
c001697d:	57                   	push   edi
c001697e:	e8 29 fc 00 00       	call   c00265ac <APICTimer::open(int, int, void*)>
c0016983:	83 c4 20             	add    esp,0x20
c0016986:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016988:	6a 00                	push   0x0
c001698a:	6a 00                	push   0x0
c001698c:	6a 00                	push   0x0
c001698e:	53                   	push   ebx
c001698f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016992:	58                   	pop    eax
c0016993:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016998:	5a                   	pop    edx
c0016999:	57                   	push   edi
c001699a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169a0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169a6:	e8 0f d3 ff ff       	call   c0013cba <Device::addChild(Device*)>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	eb 33                	jmp    c00169e3 <setupTimer(int)+0xec>
c00169b0:	83 ec 0c             	sub    esp,0xc
c00169b3:	68 5c 01 00 00       	push   0x15c
c00169b8:	e8 6c 8e ff ff       	call   c000f829 <malloc>
c00169bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00169c0:	89 c3                	mov    ebx,eax
c00169c2:	e8 33 fe 00 00       	call   c00267fa <PIT::PIT()>
c00169c7:	58                   	pop    eax
c00169c8:	5a                   	pop    edx
c00169c9:	53                   	push   ebx
c00169ca:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c00169d0:	e8 e5 d2 ff ff       	call   c0013cba <Device::addChild(Device*)>
c00169d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169d7:	6a 00                	push   0x0
c00169d9:	6a 00                	push   0x0
c00169db:	56                   	push   esi
c00169dc:	53                   	push   ebx
c00169dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169e0:	83 c4 20             	add    esp,0x20
c00169e3:	89 d8                	mov    eax,ebx
c00169e5:	5b                   	pop    ebx
c00169e6:	5e                   	pop    esi
c00169e7:	5f                   	pop    edi
c00169e8:	c3                   	ret    
c00169e9:	90                   	nop

c00169ea <VCache::VCache(PhysicalDisk*)>:
c00169ea:	53                   	push   ebx
c00169eb:	83 ec 18             	sub    esp,0x18
c00169ee:	ba d8 b7 02 c0       	mov    edx,0xc002b7d8
c00169f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169f7:	89 10                	mov    DWORD PTR [eax],edx
c00169f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169fd:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016a04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a08:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016a0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a13:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016a1a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016a21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a25:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016a2c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a37:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016a3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a42:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016a46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a4a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016a51:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a5c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a64:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a6c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016a70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a74:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016a7b:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016a83:	83 ec 0c             	sub    esp,0xc
c0016a86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a8a:	e8 9a 8d ff ff       	call   c000f829 <malloc>
c0016a8f:	83 c4 10             	add    esp,0x10
c0016a92:	89 c3                	mov    ebx,eax
c0016a94:	83 ec 0c             	sub    esp,0xc
c0016a97:	53                   	push   ebx
c0016a98:	e8 ad 70 00 00       	call   c001db4a <Mutex::Mutex()>
c0016a9d:	83 c4 10             	add    esp,0x10
c0016aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016aa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016aaf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016ab2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab6:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016abd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ac1:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016ac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016acb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016ace:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ad2:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016ad8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ade:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016ae2:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016ae5:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aec:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016af0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016af4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016afa:	05 00 01 00 00       	add    eax,0x100
c0016aff:	c1 e0 04             	shl    eax,0x4
c0016b02:	83 ec 0c             	sub    esp,0xc
c0016b05:	50                   	push   eax
c0016b06:	e8 1e 8d ff ff       	call   c000f829 <malloc>
c0016b0b:	83 c4 10             	add    esp,0x10
c0016b0e:	89 c2                	mov    edx,eax
c0016b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b14:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016b17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b1b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b26:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b2e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b34:	c1 e0 07             	shl    eax,0x7
c0016b37:	83 ec 0c             	sub    esp,0xc
c0016b3a:	50                   	push   eax
c0016b3b:	e8 e9 8c ff ff       	call   c000f829 <malloc>
c0016b40:	83 c4 10             	add    esp,0x10
c0016b43:	89 c2                	mov    edx,eax
c0016b45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b49:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016b4c:	90                   	nop
c0016b4d:	83 c4 18             	add    esp,0x18
c0016b50:	5b                   	pop    ebx
c0016b51:	c3                   	ret    

c0016b52 <VCache::invalidateReadBuffer()>:
c0016b52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b56:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016b5c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b60:	c3                   	ret    
c0016b61:	90                   	nop

c0016b62 <VCache::writeWriteBuffer()>:
c0016b62:	53                   	push   ebx
c0016b63:	83 ec 0c             	sub    esp,0xc
c0016b66:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016b6a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b70:	68 b0 b6 02 c0       	push   0xc002b6b0
c0016b75:	e8 07 bd ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0016b7a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b7d:	5a                   	pop    edx
c0016b7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b80:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b83:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b86:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016b89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016b8c:	50                   	push   eax
c0016b8d:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b90:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016b97:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016b9e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016ba2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016ba9:	83 c4 28             	add    esp,0x28
c0016bac:	5b                   	pop    ebx
c0016bad:	c3                   	ret    

c0016bae <VCache::~VCache()>:
c0016bae:	83 ec 0c             	sub    esp,0xc
c0016bb1:	ba d8 b7 02 c0       	mov    edx,0xc002b7d8
c0016bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bba:	89 10                	mov    DWORD PTR [eax],edx
c0016bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc0:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016bc3:	84 c0                	test   al,al
c0016bc5:	74 0f                	je     c0016bd6 <VCache::~VCache()+0x28>
c0016bc7:	83 ec 0c             	sub    esp,0xc
c0016bca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bce:	e8 8f ff ff ff       	call   c0016b62 <VCache::writeWriteBuffer()>
c0016bd3:	83 c4 10             	add    esp,0x10
c0016bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bda:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016bdd:	83 ec 0c             	sub    esp,0xc
c0016be0:	50                   	push   eax
c0016be1:	e8 53 8c ff ff       	call   c000f839 <free>
c0016be6:	83 c4 10             	add    esp,0x10
c0016be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016bf0:	83 ec 0c             	sub    esp,0xc
c0016bf3:	50                   	push   eax
c0016bf4:	e8 40 8c ff ff       	call   c000f839 <free>
c0016bf9:	83 c4 10             	add    esp,0x10
c0016bfc:	90                   	nop
c0016bfd:	83 c4 0c             	add    esp,0xc
c0016c00:	c3                   	ret    
c0016c01:	90                   	nop

c0016c02 <VCache::~VCache()>:
c0016c02:	83 ec 0c             	sub    esp,0xc
c0016c05:	83 ec 0c             	sub    esp,0xc
c0016c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c0c:	e8 9d ff ff ff       	call   c0016bae <VCache::~VCache()>
c0016c11:	83 c4 10             	add    esp,0x10
c0016c14:	83 ec 08             	sub    esp,0x8
c0016c17:	6a 44                	push   0x44
c0016c19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c1d:	e8 87 bb ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0016c22:	83 c4 10             	add    esp,0x10
c0016c25:	83 c4 0c             	add    esp,0xc
c0016c28:	c3                   	ret    
c0016c29:	90                   	nop

c0016c2a <VCache::write(unsigned long long, int, void*)>:
c0016c2a:	55                   	push   ebp
c0016c2b:	57                   	push   edi
c0016c2c:	56                   	push   esi
c0016c2d:	53                   	push   ebx
c0016c2e:	83 ec 18             	sub    esp,0x18
c0016c31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016c35:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c39:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c3d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016c41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c44:	e8 47 74 00 00       	call   c001e090 <Semaphore::acquire()>
c0016c49:	c7 04 24 d4 b6 02 c0 	mov    DWORD PTR [esp],0xc002b6d4
c0016c50:	e8 2c bc ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0016c55:	83 c4 10             	add    esp,0x10
c0016c58:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c5c:	74 0c                	je     c0016c6a <VCache::write(unsigned long long, int, void*)+0x40>
c0016c5e:	83 ec 0c             	sub    esp,0xc
c0016c61:	53                   	push   ebx
c0016c62:	e8 eb fe ff ff       	call   c0016b52 <VCache::invalidateReadBuffer()>
c0016c67:	83 c4 10             	add    esp,0x10
c0016c6a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016c6e:	74 66                	je     c0016cd6 <VCache::write(unsigned long long, int, void*)+0xac>
c0016c70:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016c73:	99                   	cdq    
c0016c74:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016c77:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016c7a:	31 f0                	xor    eax,esi
c0016c7c:	89 d1                	mov    ecx,edx
c0016c7e:	89 ca                	mov    edx,ecx
c0016c80:	31 fa                	xor    edx,edi
c0016c82:	09 d0                	or     eax,edx
c0016c84:	75 44                	jne    c0016cca <VCache::write(unsigned long long, int, void*)+0xa0>
c0016c86:	83 fd 01             	cmp    ebp,0x1
c0016c89:	75 3f                	jne    c0016cca <VCache::write(unsigned long long, int, void*)+0xa0>
c0016c8b:	83 ec 0c             	sub    esp,0xc
c0016c8e:	68 fb b6 02 c0       	push   0xc002b6fb
c0016c93:	e8 e9 bb ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0016c98:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c9b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016c9e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016ca4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016ca8:	0f af f9             	imul   edi,ecx
c0016cab:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016cae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cb0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016cb3:	83 c4 10             	add    esp,0x10
c0016cb6:	40                   	inc    eax
c0016cb7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016cba:	83 c0 80             	add    eax,0xffffff80
c0016cbd:	75 75                	jne    c0016d34 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016cbf:	83 ec 0c             	sub    esp,0xc
c0016cc2:	53                   	push   ebx
c0016cc3:	e8 9a fe ff ff       	call   c0016b62 <VCache::writeWriteBuffer()>
c0016cc8:	eb 41                	jmp    c0016d0b <VCache::write(unsigned long long, int, void*)+0xe1>
c0016cca:	83 ec 0c             	sub    esp,0xc
c0016ccd:	53                   	push   ebx
c0016cce:	e8 8f fe ff ff       	call   c0016b62 <VCache::writeWriteBuffer()>
c0016cd3:	83 c4 10             	add    esp,0x10
c0016cd6:	83 fd 7f             	cmp    ebp,0x7f
c0016cd9:	7f 35                	jg     c0016d10 <VCache::write(unsigned long long, int, void*)+0xe6>
c0016cdb:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016cde:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016ce1:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016ce4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016ce8:	56                   	push   esi
c0016ce9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ced:	6a 01                	push   0x1
c0016cef:	68 11 b7 02 c0       	push   0xc002b711
c0016cf4:	e8 88 bb ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0016cf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cfc:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016cff:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d05:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d0b:	83 c4 10             	add    esp,0x10
c0016d0e:	eb 24                	jmp    c0016d34 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016d10:	52                   	push   edx
c0016d11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d15:	55                   	push   ebp
c0016d16:	68 32 b7 02 c0       	push   0xc002b732
c0016d1b:	e8 61 bb ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0016d20:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d23:	59                   	pop    ecx
c0016d24:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d2a:	55                   	push   ebp
c0016d2b:	57                   	push   edi
c0016d2c:	56                   	push   esi
c0016d2d:	50                   	push   eax
c0016d2e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d31:	83 c4 20             	add    esp,0x20
c0016d34:	83 ec 0c             	sub    esp,0xc
c0016d37:	68 4f b7 02 c0       	push   0xc002b74f
c0016d3c:	e8 40 bb ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0016d41:	58                   	pop    eax
c0016d42:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d45:	e8 b2 79 00 00       	call   c001e6fc <Semaphore::release()>
c0016d4a:	83 c4 1c             	add    esp,0x1c
c0016d4d:	31 c0                	xor    eax,eax
c0016d4f:	5b                   	pop    ebx
c0016d50:	5e                   	pop    esi
c0016d51:	5f                   	pop    edi
c0016d52:	5d                   	pop    ebp
c0016d53:	c3                   	ret    

c0016d54 <VCache::read(unsigned long long, int, void*)>:
c0016d54:	55                   	push   ebp
c0016d55:	57                   	push   edi
c0016d56:	56                   	push   esi
c0016d57:	53                   	push   ebx
c0016d58:	83 ec 28             	sub    esp,0x28
c0016d5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d5f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016d63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d6b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016d6f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016d73:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016d77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d7a:	e8 11 73 00 00       	call   c001e090 <Semaphore::acquire()>
c0016d7f:	c7 04 24 6f b7 02 c0 	mov    DWORD PTR [esp],0xc002b76f
c0016d86:	e8 f6 ba ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0016d8b:	83 c4 10             	add    esp,0x10
c0016d8e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d92:	74 0c                	je     c0016da0 <VCache::read(unsigned long long, int, void*)+0x4c>
c0016d94:	83 ec 0c             	sub    esp,0xc
c0016d97:	53                   	push   ebx
c0016d98:	e8 c5 fd ff ff       	call   c0016b62 <VCache::writeWriteBuffer()>
c0016d9d:	83 c4 10             	add    esp,0x10
c0016da0:	83 fe 01             	cmp    esi,0x1
c0016da3:	75 79                	jne    c0016e1e <VCache::read(unsigned long long, int, void*)+0xca>
c0016da5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016da8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016daf:	75 6d                	jne    c0016e1e <VCache::read(unsigned long long, int, void*)+0xca>
c0016db1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016db4:	89 d1                	mov    ecx,edx
c0016db6:	f7 d9                	neg    ecx
c0016db8:	89 cf                	mov    edi,ecx
c0016dba:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016dbe:	c1 ff 1f             	sar    edi,0x1f
c0016dc1:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016dc4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016dc8:	89 ce                	mov    esi,ecx
c0016dca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016dce:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016dd2:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016dd6:	89 cf                	mov    edi,ecx
c0016dd8:	74 0a                	je     c0016de4 <VCache::read(unsigned long long, int, void*)+0x90>
c0016dda:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016ddd:	75 05                	jne    c0016de4 <VCache::read(unsigned long long, int, void*)+0x90>
c0016ddf:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016de2:	74 1c                	je     c0016e00 <VCache::read(unsigned long long, int, void*)+0xac>
c0016de4:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016de8:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016deb:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016dee:	83 ec 0c             	sub    esp,0xc
c0016df1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016df3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016df6:	52                   	push   edx
c0016df7:	57                   	push   edi
c0016df8:	56                   	push   esi
c0016df9:	50                   	push   eax
c0016dfa:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016dfd:	83 c4 20             	add    esp,0x20
c0016e00:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e03:	89 ef                	mov    edi,ebp
c0016e05:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e0b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e0e:	8d 70 ff             	lea    esi,[eax-0x1]
c0016e11:	23 34 24             	and    esi,DWORD PTR [esp]
c0016e14:	0f af f1             	imul   esi,ecx
c0016e17:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016e1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e1c:	eb 30                	jmp    c0016e4e <VCache::read(unsigned long long, int, void*)+0xfa>
c0016e1e:	83 ec 0c             	sub    esp,0xc
c0016e21:	53                   	push   ebx
c0016e22:	e8 2b fd ff ff       	call   c0016b52 <VCache::invalidateReadBuffer()>
c0016e27:	83 c4 0c             	add    esp,0xc
c0016e2a:	55                   	push   ebp
c0016e2b:	56                   	push   esi
c0016e2c:	68 95 b7 02 c0       	push   0xc002b795
c0016e31:	e8 4b ba ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0016e36:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e39:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e3b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e3e:	56                   	push   esi
c0016e3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e47:	50                   	push   eax
c0016e48:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016e4b:	83 c4 20             	add    esp,0x20
c0016e4e:	83 ec 0c             	sub    esp,0xc
c0016e51:	68 b1 b7 02 c0       	push   0xc002b7b1
c0016e56:	e8 26 ba ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0016e5b:	58                   	pop    eax
c0016e5c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e5f:	e8 98 78 00 00       	call   c001e6fc <Semaphore::release()>
c0016e64:	83 c4 2c             	add    esp,0x2c
c0016e67:	31 c0                	xor    eax,eax
c0016e69:	5b                   	pop    ebx
c0016e6a:	5e                   	pop    esi
c0016e6b:	5f                   	pop    edi
c0016e6c:	5d                   	pop    ebp
c0016e6d:	c3                   	ret    

c0016e6e <Video::putrect(int, int, int, int, unsigned int)>:
c0016e6e:	55                   	push   ebp
c0016e6f:	57                   	push   edi
c0016e70:	56                   	push   esi
c0016e71:	53                   	push   ebx
c0016e72:	83 ec 1c             	sub    esp,0x1c
c0016e75:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016e79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e7d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e81:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016e85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e8d:	01 df                	add    edi,ebx
c0016e8f:	39 fb                	cmp    ebx,edi
c0016e91:	7d 1f                	jge    c0016eb2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016e93:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e97:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016e9b:	7d 12                	jge    c0016eaf <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016e9d:	8b 16                	mov    edx,DWORD PTR [esi]
c0016e9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016ea3:	53                   	push   ebx
c0016ea4:	55                   	push   ebp
c0016ea5:	45                   	inc    ebp
c0016ea6:	56                   	push   esi
c0016ea7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016eaa:	83 c4 10             	add    esp,0x10
c0016ead:	eb e8                	jmp    c0016e97 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016eaf:	43                   	inc    ebx
c0016eb0:	eb dd                	jmp    c0016e8f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016eb2:	83 c4 1c             	add    esp,0x1c
c0016eb5:	5b                   	pop    ebx
c0016eb6:	5e                   	pop    esi
c0016eb7:	5f                   	pop    edi
c0016eb8:	5d                   	pop    ebp
c0016eb9:	c3                   	ret    

c0016eba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016eba:	55                   	push   ebp
c0016ebb:	57                   	push   edi
c0016ebc:	31 ff                	xor    edi,edi
c0016ebe:	56                   	push   esi
c0016ebf:	53                   	push   ebx
c0016ec0:	83 ec 1c             	sub    esp,0x1c
c0016ec3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ec7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ecb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016ed2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016ed7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016edb:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016edf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ee3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016ee6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016eea:	01 f9                	add    ecx,edi
c0016eec:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016ef0:	7d 2f                	jge    c0016f21 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016ef2:	31 f6                	xor    esi,esi
c0016ef4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ef8:	01 f2                	add    edx,esi
c0016efa:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016efe:	7d 1a                	jge    c0016f1a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f00:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f03:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f06:	46                   	inc    esi
c0016f07:	51                   	push   ecx
c0016f08:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f0c:	52                   	push   edx
c0016f0d:	55                   	push   ebp
c0016f0e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f11:	83 c4 10             	add    esp,0x10
c0016f14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f18:	eb da                	jmp    c0016ef4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f1a:	47                   	inc    edi
c0016f1b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f1f:	eb c5                	jmp    c0016ee6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f21:	83 c4 1c             	add    esp,0x1c
c0016f24:	5b                   	pop    ebx
c0016f25:	5e                   	pop    esi
c0016f26:	5f                   	pop    edi
c0016f27:	5d                   	pop    ebp
c0016f28:	c3                   	ret    
c0016f29:	90                   	nop

c0016f2a <Video::blit(unsigned int*, int, int, int, int)>:
c0016f2a:	55                   	push   ebp
c0016f2b:	57                   	push   edi
c0016f2c:	56                   	push   esi
c0016f2d:	53                   	push   ebx
c0016f2e:	83 ec 1c             	sub    esp,0x1c
c0016f31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f35:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f39:	85 c0                	test   eax,eax
c0016f3b:	79 02                	jns    c0016f3f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016f3d:	31 c0                	xor    eax,eax
c0016f3f:	c1 e0 02             	shl    eax,0x2
c0016f42:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f4e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016f52:	39 d8                	cmp    eax,ebx
c0016f54:	7e 49                	jle    c0016f9f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f56:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f5c:	7c 41                	jl     c0016f9f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f5e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016f62:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f66:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f6a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016f6e:	39 f9                	cmp    ecx,edi
c0016f70:	7e 22                	jle    c0016f94 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016f72:	83 c5 04             	add    ebp,0x4
c0016f75:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016f7b:	7c 14                	jl     c0016f91 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016f7d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016f7f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016f82:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f86:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f8a:	56                   	push   esi
c0016f8b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016f8e:	83 c4 10             	add    esp,0x10
c0016f91:	47                   	inc    edi
c0016f92:	eb d2                	jmp    c0016f66 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016f94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f98:	43                   	inc    ebx
c0016f99:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016f9d:	eb ab                	jmp    c0016f4a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016f9f:	83 c4 1c             	add    esp,0x1c
c0016fa2:	5b                   	pop    ebx
c0016fa3:	5e                   	pop    esi
c0016fa4:	5f                   	pop    edi
c0016fa5:	5d                   	pop    ebp
c0016fa6:	c3                   	ret    
c0016fa7:	90                   	nop

c0016fa8 <Video::clearScreen(unsigned int)>:
c0016fa8:	57                   	push   edi
c0016fa9:	56                   	push   esi
c0016faa:	53                   	push   ebx
c0016fab:	31 db                	xor    ebx,ebx
c0016fad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fb1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016fb7:	7e 1f                	jle    c0016fd8 <Video::clearScreen(unsigned int)+0x30>
c0016fb9:	31 ff                	xor    edi,edi
c0016fbb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fc1:	7e 12                	jle    c0016fd5 <Video::clearScreen(unsigned int)+0x2d>
c0016fc3:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016fc9:	53                   	push   ebx
c0016fca:	57                   	push   edi
c0016fcb:	47                   	inc    edi
c0016fcc:	56                   	push   esi
c0016fcd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fd0:	83 c4 10             	add    esp,0x10
c0016fd3:	eb e6                	jmp    c0016fbb <Video::clearScreen(unsigned int)+0x13>
c0016fd5:	43                   	inc    ebx
c0016fd6:	eb d9                	jmp    c0016fb1 <Video::clearScreen(unsigned int)+0x9>
c0016fd8:	5b                   	pop    ebx
c0016fd9:	5e                   	pop    esi
c0016fda:	5f                   	pop    edi
c0016fdb:	c3                   	ret    

c0016fdc <Video::putpixel(int, int, unsigned int)>:
c0016fdc:	c7 44 24 04 e0 b7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b7e0
c0016fe4:	e9 06 32 00 00       	jmp    c001a1ef <Krnl::panic(char const*)>
c0016fe9:	90                   	nop

c0016fea <Video::Video(char const*)>:
c0016fea:	83 ec 0c             	sub    esp,0xc
c0016fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff1:	83 ec 08             	sub    esp,0x8
c0016ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ff8:	50                   	push   eax
c0016ff9:	e8 c0 ce ff ff       	call   c0013ebe <Device::Device(char const*)>
c0016ffe:	83 c4 10             	add    esp,0x10
c0017001:	ba 50 b8 02 c0       	mov    edx,0xc002b850
c0017006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001700a:	89 10                	mov    DWORD PTR [eax],edx
c001700c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017010:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001701a:	90                   	nop
c001701b:	83 c4 0c             	add    esp,0xc
c001701e:	c3                   	ret    
c001701f:	90                   	nop

c0017020 <Video::~Video()>:
c0017020:	83 ec 0c             	sub    esp,0xc
c0017023:	ba 50 b8 02 c0       	mov    edx,0xc002b850
c0017028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001702c:	89 10                	mov    DWORD PTR [eax],edx
c001702e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017032:	83 ec 0c             	sub    esp,0xc
c0017035:	50                   	push   eax
c0017036:	e8 4d cb ff ff       	call   c0013b88 <Device::~Device()>
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	90                   	nop
c001703f:	83 c4 0c             	add    esp,0xc
c0017042:	c3                   	ret    
c0017043:	90                   	nop

c0017044 <Video::~Video()>:
c0017044:	83 ec 0c             	sub    esp,0xc
c0017047:	83 ec 0c             	sub    esp,0xc
c001704a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001704e:	e8 cd ff ff ff       	call   c0017020 <Video::~Video()>
c0017053:	83 c4 10             	add    esp,0x10
c0017056:	83 ec 08             	sub    esp,0x8
c0017059:	68 64 01 00 00       	push   0x164
c001705e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017062:	e8 42 b7 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0017067:	83 c4 10             	add    esp,0x10
c001706a:	83 c4 0c             	add    esp,0xc
c001706d:	c3                   	ret    

c001706e <Video::isMonochrome()>:
c001706e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017072:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017078:	c3                   	ret    
c0017079:	90                   	nop

c001707a <Video::getWidth()>:
c001707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001707e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017084:	c3                   	ret    
c0017085:	90                   	nop

c0017086 <Video::getHeight()>:
c0017086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001708a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017090:	c3                   	ret    
c0017091:	90                   	nop

c0017092 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017092:	55                   	push   ebp
c0017093:	57                   	push   edi
c0017094:	56                   	push   esi
c0017095:	53                   	push   ebx
c0017096:	83 ec 2c             	sub    esp,0x2c
c0017099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001709d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170a1:	83 f8 01             	cmp    eax,0x1
c00170a4:	19 c9                	sbb    ecx,ecx
c00170a6:	31 db                	xor    ebx,ebx
c00170a8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00170ac:	89 cd                	mov    ebp,ecx
c00170ae:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00170b6:	f7 d5                	not    ebp
c00170b8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00170be:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00170c2:	01 d8                	add    eax,ebx
c00170c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170c8:	56                   	push   esi
c00170c9:	e8 b8 ff ff ff       	call   c0017086 <Video::getHeight()>
c00170ce:	59                   	pop    ecx
c00170cf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00170d3:	7e 70                	jle    c0017145 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00170d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00170d9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00170dd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00170e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00170e8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00170ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170f3:	89 f8                	mov    eax,edi
c00170f5:	83 c0 20             	add    eax,0x20
c00170f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170fc:	56                   	push   esi
c00170fd:	e8 78 ff ff ff       	call   c001707a <Video::getWidth()>
c0017102:	5a                   	pop    edx
c0017103:	39 c7                	cmp    edi,eax
c0017105:	7d 34                	jge    c001713b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017107:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001710c:	74 05                	je     c0017113 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001710e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017110:	55                   	push   ebp
c0017111:	eb 0d                	jmp    c0017120 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017113:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017118:	74 12                	je     c001712c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001711a:	8b 06                	mov    eax,DWORD PTR [esi]
c001711c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017120:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017124:	57                   	push   edi
c0017125:	56                   	push   esi
c0017126:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017130:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017134:	47                   	inc    edi
c0017135:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017139:	75 c1                	jne    c00170fc <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001713b:	43                   	inc    ebx
c001713c:	83 fb 20             	cmp    ebx,0x20
c001713f:	0f 85 79 ff ff ff    	jne    c00170be <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017145:	83 c4 2c             	add    esp,0x2c
c0017148:	5b                   	pop    ebx
c0017149:	5e                   	pop    esi
c001714a:	5f                   	pop    edi
c001714b:	5d                   	pop    ebp
c001714c:	c3                   	ret    
c001714d:	90                   	nop

c001714e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001714e:	55                   	push   ebp
c001714f:	57                   	push   edi
c0017150:	56                   	push   esi
c0017151:	53                   	push   ebx
c0017152:	83 ec 28             	sub    esp,0x28
c0017155:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017159:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001715d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0017161:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017165:	c1 e6 08             	shl    esi,0x8
c0017168:	01 c6                	add    esi,eax
c001716a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001716e:	c1 e0 08             	shl    eax,0x8
c0017171:	01 d0                	add    eax,edx
c0017173:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017177:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001717b:	0f af c6             	imul   eax,esi
c001717e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017185:	50                   	push   eax
c0017186:	e8 9e 86 ff ff       	call   c000f829 <malloc>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	89 c7                	mov    edi,eax
c0017190:	85 c0                	test   eax,eax
c0017192:	75 10                	jne    c00171a4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0017194:	83 ec 0c             	sub    esp,0xc
c0017197:	68 01 b8 02 c0       	push   0xc002b801
c001719c:	e8 4e 30 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c00171a1:	83 c4 10             	add    esp,0x10
c00171a4:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00171a7:	ba 12 00 00 00       	mov    edx,0x12
c00171ac:	84 c0                	test   al,al
c00171ae:	74 11                	je     c00171c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00171b0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00171b4:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00171b8:	c1 fa 03             	sar    edx,0x3
c00171bb:	0f af d1             	imul   edx,ecx
c00171be:	83 c2 12             	add    edx,0x12
c00171c1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00171c5:	74 04                	je     c00171cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00171c7:	85 f6                	test   esi,esi
c00171c9:	75 12                	jne    c00171dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00171cb:	83 ec 0c             	sub    esp,0xc
c00171ce:	68 11 b8 02 c0       	push   0xc002b811
c00171d3:	e8 a9 b6 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00171d8:	e9 b8 00 00 00       	jmp    c0017295 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00171dd:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00171e1:	80 f9 02             	cmp    cl,0x2
c00171e4:	0f 85 96 00 00 00    	jne    c0017280 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00171ea:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00171ef:	75 0e                	jne    c00171ff <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00171f1:	84 c0                	test   al,al
c00171f3:	75 0a                	jne    c00171ff <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00171f5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00171f8:	83 e8 18             	sub    eax,0x18
c00171fb:	a8 f7                	test   al,0xf7
c00171fd:	74 0a                	je     c0017209 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00171ff:	83 ec 0c             	sub    esp,0xc
c0017202:	68 26 b8 02 c0       	push   0xc002b826
c0017207:	eb 7f                	jmp    c0017288 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0017209:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017211:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017219:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001721d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017225:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017229:	75 0c                	jne    c0017237 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001722b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0017230:	c1 e0 18             	shl    eax,0x18
c0017233:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017237:	45                   	inc    ebp
c0017238:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001723d:	c1 e1 10             	shl    ecx,0x10
c0017240:	89 c8                	mov    eax,ecx
c0017242:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0017247:	c1 e1 08             	shl    ecx,0x8
c001724a:	09 c1                	or     ecx,eax
c001724c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017250:	09 c1                	or     ecx,eax
c0017252:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017256:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001725a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001725e:	c1 f8 03             	sar    eax,0x3
c0017261:	01 c2                	add    edx,eax
c0017263:	89 e8                	mov    eax,ebp
c0017265:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017269:	39 c6                	cmp    esi,eax
c001726b:	7f b0                	jg     c001721d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001726d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017271:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017275:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0017278:	7e 22                	jle    c001729c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001727a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c001727e:	eb 99                	jmp    c0017219 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017280:	50                   	push   eax
c0017281:	50                   	push   eax
c0017282:	51                   	push   ecx
c0017283:	68 34 b8 02 c0       	push   0xc002b834
c0017288:	e8 f4 b5 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001728d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017290:	e8 a4 85 ff ff       	call   c000f839 <free>
c0017295:	83 c4 10             	add    esp,0x10
c0017298:	31 ff                	xor    edi,edi
c001729a:	eb 0f                	jmp    c00172ab <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001729c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172a0:	89 30                	mov    DWORD PTR [eax],esi
c00172a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172a6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00172a9:	89 30                	mov    DWORD PTR [eax],esi
c00172ab:	83 c4 1c             	add    esp,0x1c
c00172ae:	89 f8                	mov    eax,edi
c00172b0:	5b                   	pop    ebx
c00172b1:	5e                   	pop    esi
c00172b2:	5f                   	pop    edi
c00172b3:	5d                   	pop    ebp
c00172b4:	c3                   	ret    
c00172b5:	90                   	nop

c00172b6 <Video::putTGA(int, int, unsigned char*, int)>:
c00172b6:	55                   	push   ebp
c00172b7:	57                   	push   edi
c00172b8:	56                   	push   esi
c00172b9:	53                   	push   ebx
c00172ba:	83 ec 28             	sub    esp,0x28
c00172bd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00172c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172c5:	50                   	push   eax
c00172c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172ca:	50                   	push   eax
c00172cb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00172cf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00172d3:	56                   	push   esi
c00172d4:	e8 75 fe ff ff       	call   c001714e <Video::tgaParse(unsigned char*, int, int*, int*)>
c00172d9:	83 c4 20             	add    esp,0x20
c00172dc:	85 c0                	test   eax,eax
c00172de:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00172e2:	74 35                	je     c0017319 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00172e4:	89 c7                	mov    edi,eax
c00172e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172ea:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00172ee:	39 d8                	cmp    eax,ebx
c00172f0:	7e 27                	jle    c0017319 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00172f2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00172f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172fa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00172fe:	39 e8                	cmp    eax,ebp
c0017300:	7e 14                	jle    c0017316 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017302:	8b 06                	mov    eax,DWORD PTR [esi]
c0017304:	83 c7 04             	add    edi,0x4
c0017307:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001730a:	53                   	push   ebx
c001730b:	55                   	push   ebp
c001730c:	45                   	inc    ebp
c001730d:	56                   	push   esi
c001730e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017311:	83 c4 10             	add    esp,0x10
c0017314:	eb e0                	jmp    c00172f6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017316:	43                   	inc    ebx
c0017317:	eb cd                	jmp    c00172e6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017319:	83 c4 1c             	add    esp,0x1c
c001731c:	5b                   	pop    ebx
c001731d:	5e                   	pop    esi
c001731e:	5f                   	pop    edi
c001731f:	5d                   	pop    ebp
c0017320:	c3                   	ret    
c0017321:	90                   	nop

c0017322 <ACPI::close(int, int, void*)>:
c0017322:	83 ec 1c             	sub    esp,0x1c
c0017325:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001732d:	74 0a                	je     c0017339 <ACPI::close(int, int, void*)+0x17>
c001732f:	b8 00 00 00 00       	mov    eax,0x0
c0017334:	e9 8a 00 00 00       	jmp    c00173c3 <ACPI::close(int, int, void*)+0xa1>
c0017339:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001733e:	75 27                	jne    c0017367 <ACPI::close(int, int, void*)+0x45>
c0017340:	a1 08 ea 02 c0       	mov    eax,ds:0xc002ea08
c0017345:	85 c0                	test   eax,eax
c0017347:	74 07                	je     c0017350 <ACPI::close(int, int, void*)+0x2e>
c0017349:	a1 08 ea 02 c0       	mov    eax,ds:0xc002ea08
c001734e:	ff d0                	call   eax
c0017350:	83 ec 0c             	sub    esp,0xc
c0017353:	68 90 b8 02 c0       	push   0xc002b890
c0017358:	e8 92 2e 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c001735d:	83 c4 10             	add    esp,0x10
c0017360:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017365:	eb 5c                	jmp    c00173c3 <ACPI::close(int, int, void*)+0xa1>
c0017367:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001736c:	75 50                	jne    c00173be <ACPI::close(int, int, void*)+0x9c>
c001736e:	a1 04 ea 02 c0       	mov    eax,ds:0xc002ea04
c0017373:	85 c0                	test   eax,eax
c0017375:	74 07                	je     c001737e <ACPI::close(int, int, void*)+0x5c>
c0017377:	a1 04 ea 02 c0       	mov    eax,ds:0xc002ea04
c001737c:	ff d0                	call   eax
c001737e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017383:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017388:	83 e0 02             	and    eax,0x2
c001738b:	74 1c                	je     c00173a9 <ACPI::close(int, int, void*)+0x87>
c001738d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017394:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017398:	89 c2                	mov    edx,eax
c001739a:	ec                   	in     al,dx
c001739b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001739f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00173a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00173a7:	eb da                	jmp    c0017383 <ACPI::close(int, int, void*)+0x61>
c00173a9:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00173b0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00173b5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00173b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173bd:	ee                   	out    dx,al
c00173be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173c3:	83 c4 1c             	add    esp,0x1c
c00173c6:	c3                   	ret    

c00173c7 <findRSDP()>:
c00173c7:	83 ec 1c             	sub    esp,0x1c
c00173ca:	83 ec 0c             	sub    esp,0xc
c00173cd:	68 6b b9 02 c0       	push   0xc002b96b
c00173d2:	e8 ac 84 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c00173d7:	83 c4 10             	add    esp,0x10
c00173da:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00173df:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173e5:	83 e0 04             	and    eax,0x4
c00173e8:	84 c0                	test   al,al
c00173ea:	75 0a                	jne    c00173f6 <findRSDP()+0x2f>
c00173ec:	b8 00 00 00 00       	mov    eax,0x0
c00173f1:	e9 9a 00 00 00       	jmp    c0017490 <findRSDP()+0xc9>
c00173f6:	a1 d4 e3 02 c0       	mov    eax,ds:0xc002e3d4
c00173fb:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017400:	7f 1b                	jg     c001741d <findRSDP()+0x56>
c0017402:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017407:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001740d:	83 e2 fb             	and    edx,0xfffffffb
c0017410:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017416:	b8 00 00 00 00       	mov    eax,0x0
c001741b:	eb 73                	jmp    c0017490 <findRSDP()+0xc9>
c001741d:	83 ec 0c             	sub    esp,0xc
c0017420:	68 7b b9 02 c0       	push   0xc002b97b
c0017425:	e8 59 84 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c001742a:	83 c4 10             	add    esp,0x10
c001742d:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017435:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001743d:	77 3c                	ja     c001747b <findRSDP()+0xb4>
c001743f:	83 ec 04             	sub    esp,0x4
c0017442:	6a 08                	push   0x8
c0017444:	68 94 b9 02 c0       	push   0xc002b994
c0017449:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001744d:	e8 fa 91 fe ff       	call   c000064c <memcmp>
c0017452:	83 c4 10             	add    esp,0x10
c0017455:	85 c0                	test   eax,eax
c0017457:	0f 94 c0             	sete   al
c001745a:	84 c0                	test   al,al
c001745c:	74 16                	je     c0017474 <findRSDP()+0xad>
c001745e:	83 ec 0c             	sub    esp,0xc
c0017461:	68 9d b9 02 c0       	push   0xc002b99d
c0017466:	e8 18 84 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c001746b:	83 c4 10             	add    esp,0x10
c001746e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017472:	eb 1c                	jmp    c0017490 <findRSDP()+0xc9>
c0017474:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017479:	eb ba                	jmp    c0017435 <findRSDP()+0x6e>
c001747b:	83 ec 0c             	sub    esp,0xc
c001747e:	68 ab b9 02 c0       	push   0xc002b9ab
c0017483:	e8 fb 83 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c0017488:	83 c4 10             	add    esp,0x10
c001748b:	b8 00 00 00 00       	mov    eax,0x0
c0017490:	83 c4 1c             	add    esp,0x1c
c0017493:	c3                   	ret    

c0017494 <loadACPITables(unsigned char*)>:
c0017494:	57                   	push   edi
c0017495:	56                   	push   esi
c0017496:	53                   	push   ebx
c0017497:	83 ec 60             	sub    esp,0x60
c001749a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001749f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174a5:	83 e0 04             	and    eax,0x4
c00174a8:	84 c0                	test   al,al
c00174aa:	0f 84 33 02 00 00    	je     c00176e3 <loadACPITables(unsigned char*)+0x24f>
c00174b0:	a0 20 ec 02 c0       	mov    al,ds:0xc002ec20
c00174b5:	84 c0                	test   al,al
c00174b7:	74 75                	je     c001752e <loadACPITables(unsigned char*)+0x9a>
c00174b9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174bd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00174c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174c8:	83 e8 24             	sub    eax,0x24
c00174cb:	c1 e8 03             	shr    eax,0x3
c00174ce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174d2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00174da:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00174de:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00174e2:	0f 8d b2 00 00 00    	jge    c001759a <loadACPITables(unsigned char*)+0x106>
c00174e8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174ec:	83 c0 24             	add    eax,0x24
c00174ef:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00174f3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00174f7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00174fb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00174ff:	c1 e0 03             	shl    eax,0x3
c0017502:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001750a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001750d:	8b 00                	mov    eax,DWORD PTR [eax]
c001750f:	89 c1                	mov    ecx,eax
c0017511:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0017516:	8d 50 01             	lea    edx,[eax+0x1]
c0017519:	89 15 0c ea 02 c0    	mov    DWORD PTR ds:0xc002ea0c,edx
c001751f:	89 ca                	mov    edx,ecx
c0017521:	89 14 c5 24 ea 02 c0 	mov    DWORD PTR [eax*8-0x3ffd15dc],edx
c0017528:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001752c:	eb ac                	jmp    c00174da <loadACPITables(unsigned char*)+0x46>
c001752e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017532:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017536:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001753a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001753d:	83 e8 24             	sub    eax,0x24
c0017540:	c1 e8 02             	shr    eax,0x2
c0017543:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017547:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001754f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017553:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017557:	7d 41                	jge    c001759a <loadACPITables(unsigned char*)+0x106>
c0017559:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001755d:	83 c0 24             	add    eax,0x24
c0017560:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017568:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001756c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017570:	c1 e0 02             	shl    eax,0x2
c0017573:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017577:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001757b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001757d:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0017582:	8d 50 01             	lea    edx,[eax+0x1]
c0017585:	89 15 0c ea 02 c0    	mov    DWORD PTR ds:0xc002ea0c,edx
c001758b:	89 ca                	mov    edx,ecx
c001758d:	89 14 c5 24 ea 02 c0 	mov    DWORD PTR [eax*8-0x3ffd15dc],edx
c0017594:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017598:	eb b5                	jmp    c001754f <loadACPITables(unsigned char*)+0xbb>
c001759a:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00175a2:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00175a7:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00175ab:	0f 8d 33 01 00 00    	jge    c00176e4 <loadACPITables(unsigned char*)+0x250>
c00175b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00175b5:	8b 04 c5 24 ea 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd15dc]
c00175bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175cc:	25 ff 0f 00 00       	and    eax,0xfff
c00175d1:	89 c6                	mov    esi,eax
c00175d3:	8b 1d f0 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4f0
c00175d9:	83 ec 0c             	sub    esp,0xc
c00175dc:	6a 01                	push   0x1
c00175de:	e8 cc 9e ff ff       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c00175e3:	83 c4 10             	add    esp,0x10
c00175e6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00175ea:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175f0:	83 ec 0c             	sub    esp,0xc
c00175f3:	6a 01                	push   0x1
c00175f5:	6a 01                	push   0x1
c00175f7:	50                   	push   eax
c00175f8:	52                   	push   edx
c00175f9:	53                   	push   ebx
c00175fa:	e8 4d a8 ff ff       	call   c0011e4c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00175ff:	83 c4 20             	add    esp,0x20
c0017602:	09 f0                	or     eax,esi
c0017604:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017608:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001760c:	c1 e0 03             	shl    eax,0x3
c001760f:	05 20 ea 02 c0       	add    eax,0xc002ea20
c0017614:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017618:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001761c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017620:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017628:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001762c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017630:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017634:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017638:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001763c:	89 c6                	mov    esi,eax
c001763e:	89 d7                	mov    edi,edx
c0017640:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017642:	89 c8                	mov    eax,ecx
c0017644:	89 fa                	mov    edx,edi
c0017646:	89 f3                	mov    ebx,esi
c0017648:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001764c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017650:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017654:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017658:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001765b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001765f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017663:	05 00 10 00 00       	add    eax,0x1000
c0017668:	c1 e8 0c             	shr    eax,0xc
c001766b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001766f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017673:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017677:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001767b:	25 ff 0f 00 00       	and    eax,0xfff
c0017680:	89 c6                	mov    esi,eax
c0017682:	8b 1d f0 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4f0
c0017688:	83 ec 0c             	sub    esp,0xc
c001768b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001768f:	e8 1b 9e ff ff       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c0017694:	83 c4 10             	add    esp,0x10
c0017697:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001769b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176a1:	83 ec 0c             	sub    esp,0xc
c00176a4:	6a 01                	push   0x1
c00176a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00176aa:	50                   	push   eax
c00176ab:	52                   	push   edx
c00176ac:	53                   	push   ebx
c00176ad:	e8 9a a7 ff ff       	call   c0011e4c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176b2:	83 c4 20             	add    esp,0x20
c00176b5:	09 f0                	or     eax,esi
c00176b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176bf:	83 ec 0c             	sub    esp,0xc
c00176c2:	50                   	push   eax
c00176c3:	e8 17 a1 ff ff       	call   c00117df <Virt::freeKernelVirtualPages(unsigned long)>
c00176c8:	83 c4 10             	add    esp,0x10
c00176cb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00176cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00176d3:	89 14 c5 24 ea 02 c0 	mov    DWORD PTR [eax*8-0x3ffd15dc],edx
c00176da:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00176de:	e9 bf fe ff ff       	jmp    c00175a2 <loadACPITables(unsigned char*)+0x10e>
c00176e3:	90                   	nop
c00176e4:	83 c4 60             	add    esp,0x60
c00176e7:	5b                   	pop    ebx
c00176e8:	5e                   	pop    esi
c00176e9:	5f                   	pop    edi
c00176ea:	c3                   	ret    

c00176eb <findRSDT(unsigned char*)>:
c00176eb:	57                   	push   edi
c00176ec:	56                   	push   esi
c00176ed:	53                   	push   ebx
c00176ee:	83 ec 50             	sub    esp,0x50
c00176f1:	83 ec 0c             	sub    esp,0xc
c00176f4:	68 bf b9 02 c0       	push   0xc002b9bf
c00176f9:	e8 85 81 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c00176fe:	83 c4 10             	add    esp,0x10
c0017701:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017706:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001770c:	83 e0 04             	and    eax,0x4
c001770f:	84 c0                	test   al,al
c0017711:	75 0a                	jne    c001771d <findRSDT(unsigned char*)+0x32>
c0017713:	b8 00 00 00 00       	mov    eax,0x0
c0017718:	e9 81 01 00 00       	jmp    c001789e <findRSDT(unsigned char*)+0x1b3>
c001771d:	83 ec 0c             	sub    esp,0xc
c0017720:	68 d1 b9 02 c0       	push   0xc002b9d1
c0017725:	e8 59 81 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c001772a:	83 c4 10             	add    esp,0x10
c001772d:	89 e0                	mov    eax,esp
c001772f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017733:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017737:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001773b:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017743:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017747:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001774b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001774f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017753:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017757:	89 c6                	mov    esi,eax
c0017759:	89 d7                	mov    edi,edx
c001775b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001775d:	89 c8                	mov    eax,ecx
c001775f:	89 fa                	mov    edx,edi
c0017761:	89 f3                	mov    ebx,esi
c0017763:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017767:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001776b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001776f:	83 ec 0c             	sub    esp,0xc
c0017772:	68 e3 b9 02 c0       	push   0xc002b9e3
c0017777:	e8 07 81 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c001777c:	83 c4 10             	add    esp,0x10
c001777f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017783:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017787:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001778f:	83 ec 0c             	sub    esp,0xc
c0017792:	68 f5 b9 02 c0       	push   0xc002b9f5
c0017797:	e8 e7 80 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c001779c:	83 c4 10             	add    esp,0x10
c001779f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00177a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177a7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00177ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177af:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00177b3:	83 ec 04             	sub    esp,0x4
c00177b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00177ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00177be:	68 b4 b8 02 c0       	push   0xc002b8b4
c00177c3:	e8 b9 b0 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00177c8:	83 c4 10             	add    esp,0x10
c00177cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00177cf:	25 ff 0f 00 00       	and    eax,0xfff
c00177d4:	89 c6                	mov    esi,eax
c00177d6:	8b 1d f0 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4f0
c00177dc:	83 ec 0c             	sub    esp,0xc
c00177df:	6a 02                	push   0x2
c00177e1:	e8 c9 9c ff ff       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c00177e6:	83 c4 10             	add    esp,0x10
c00177e9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00177ed:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177f3:	83 ec 0c             	sub    esp,0xc
c00177f6:	6a 01                	push   0x1
c00177f8:	6a 02                	push   0x2
c00177fa:	50                   	push   eax
c00177fb:	52                   	push   edx
c00177fc:	53                   	push   ebx
c00177fd:	e8 4a a6 ff ff       	call   c0011e4c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017802:	83 c4 20             	add    esp,0x20
c0017805:	09 f0                	or     eax,esi
c0017807:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001780b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001780f:	25 ff 0f 00 00       	and    eax,0xfff
c0017814:	89 c6                	mov    esi,eax
c0017816:	8b 1d f0 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4f0
c001781c:	83 ec 0c             	sub    esp,0xc
c001781f:	6a 02                	push   0x2
c0017821:	e8 89 9c ff ff       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c0017826:	83 c4 10             	add    esp,0x10
c0017829:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001782d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017833:	83 ec 0c             	sub    esp,0xc
c0017836:	6a 01                	push   0x1
c0017838:	6a 02                	push   0x2
c001783a:	50                   	push   eax
c001783b:	52                   	push   edx
c001783c:	53                   	push   ebx
c001783d:	e8 0a a6 ff ff       	call   c0011e4c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017842:	83 c4 20             	add    esp,0x20
c0017845:	09 f0                	or     eax,esi
c0017847:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001784b:	83 ec 04             	sub    esp,0x4
c001784e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017852:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017856:	68 d4 b8 02 c0       	push   0xc002b8d4
c001785b:	e8 21 b0 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0017860:	83 c4 10             	add    esp,0x10
c0017863:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017868:	75 11                	jne    c001787b <findRSDT(unsigned char*)+0x190>
c001786a:	c6 05 20 ec 02 c0 00 	mov    BYTE PTR ds:0xc002ec20,0x0
c0017871:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017875:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017879:	eb 1f                	jmp    c001789a <findRSDT(unsigned char*)+0x1af>
c001787b:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017880:	75 11                	jne    c0017893 <findRSDT(unsigned char*)+0x1a8>
c0017882:	c6 05 20 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec20,0x1
c0017889:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001788d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017891:	eb 07                	jmp    c001789a <findRSDT(unsigned char*)+0x1af>
c0017893:	b8 00 00 00 00       	mov    eax,0x0
c0017898:	eb 04                	jmp    c001789e <findRSDT(unsigned char*)+0x1b3>
c001789a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001789e:	83 c4 50             	add    esp,0x50
c00178a1:	5b                   	pop    ebx
c00178a2:	5e                   	pop    esi
c00178a3:	5f                   	pop    edi
c00178a4:	c3                   	ret    

c00178a5 <findDataTable(unsigned char*, char*)>:
c00178a5:	83 ec 1c             	sub    esp,0x1c
c00178a8:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00178ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178b3:	83 e0 04             	and    eax,0x4
c00178b6:	84 c0                	test   al,al
c00178b8:	75 07                	jne    c00178c1 <findDataTable(unsigned char*, char*)+0x1c>
c00178ba:	b8 00 00 00 00       	mov    eax,0x0
c00178bf:	eb 52                	jmp    c0017913 <findDataTable(unsigned char*, char*)+0x6e>
c00178c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00178c9:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00178ce:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00178d2:	7d 3a                	jge    c001790e <findDataTable(unsigned char*, char*)+0x69>
c00178d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178d8:	c1 e0 03             	shl    eax,0x3
c00178db:	05 20 ea 02 c0       	add    eax,0xc002ea20
c00178e0:	83 ec 04             	sub    esp,0x4
c00178e3:	6a 04                	push   0x4
c00178e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178e9:	50                   	push   eax
c00178ea:	e8 5d 8d fe ff       	call   c000064c <memcmp>
c00178ef:	83 c4 10             	add    esp,0x10
c00178f2:	85 c0                	test   eax,eax
c00178f4:	0f 94 c0             	sete   al
c00178f7:	84 c0                	test   al,al
c00178f9:	74 0d                	je     c0017908 <findDataTable(unsigned char*, char*)+0x63>
c00178fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ff:	8b 04 c5 24 ea 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd15dc]
c0017906:	eb 0b                	jmp    c0017913 <findDataTable(unsigned char*, char*)+0x6e>
c0017908:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001790c:	eb bb                	jmp    c00178c9 <findDataTable(unsigned char*, char*)+0x24>
c001790e:	b8 00 00 00 00       	mov    eax,0x0
c0017913:	83 c4 1c             	add    esp,0x1c
c0017916:	c3                   	ret    

c0017917 <scanMADT()>:
c0017917:	53                   	push   ebx
c0017918:	83 ec 38             	sub    esp,0x38
c001791b:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c0017920:	25 00 04 00 00       	and    eax,0x400
c0017925:	74 14                	je     c001793b <scanMADT()+0x24>
c0017927:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001792c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017932:	83 e2 fb             	and    edx,0xfffffffb
c0017935:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001793b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017940:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017946:	83 e0 04             	and    eax,0x4
c0017949:	84 c0                	test   al,al
c001794b:	0f 84 6a 04 00 00    	je     c0017dbb <scanMADT()+0x4a4>
c0017951:	e8 71 fa ff ff       	call   c00173c7 <findRSDP()>
c0017956:	a3 2c ec 02 c0       	mov    ds:0xc002ec2c,eax
c001795b:	a1 2c ec 02 c0       	mov    eax,ds:0xc002ec2c
c0017960:	85 c0                	test   eax,eax
c0017962:	75 19                	jne    c001797d <scanMADT()+0x66>
c0017964:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017969:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001796f:	83 e2 fb             	and    edx,0xfffffffb
c0017972:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017978:	e9 42 04 00 00       	jmp    c0017dbf <scanMADT()+0x4a8>
c001797d:	83 ec 0c             	sub    esp,0xc
c0017980:	68 07 ba 02 c0       	push   0xc002ba07
c0017985:	e8 f9 7e ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c001798a:	83 c4 10             	add    esp,0x10
c001798d:	a1 2c ec 02 c0       	mov    eax,ds:0xc002ec2c
c0017992:	83 ec 0c             	sub    esp,0xc
c0017995:	50                   	push   eax
c0017996:	e8 50 fd ff ff       	call   c00176eb <findRSDT(unsigned char*)>
c001799b:	83 c4 10             	add    esp,0x10
c001799e:	a3 28 ec 02 c0       	mov    ds:0xc002ec28,eax
c00179a3:	a1 28 ec 02 c0       	mov    eax,ds:0xc002ec28
c00179a8:	85 c0                	test   eax,eax
c00179aa:	75 19                	jne    c00179c5 <scanMADT()+0xae>
c00179ac:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00179b1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179b7:	83 e2 fb             	and    edx,0xfffffffb
c00179ba:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179c0:	e9 fa 03 00 00       	jmp    c0017dbf <scanMADT()+0x4a8>
c00179c5:	83 ec 0c             	sub    esp,0xc
c00179c8:	68 17 ba 02 c0       	push   0xc002ba17
c00179cd:	e8 b1 7e ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c00179d2:	83 c4 10             	add    esp,0x10
c00179d5:	a1 28 ec 02 c0       	mov    eax,ds:0xc002ec28
c00179da:	83 ec 0c             	sub    esp,0xc
c00179dd:	50                   	push   eax
c00179de:	e8 b1 fa ff ff       	call   c0017494 <loadACPITables(unsigned char*)>
c00179e3:	83 c4 10             	add    esp,0x10
c00179e6:	a1 28 ec 02 c0       	mov    eax,ds:0xc002ec28
c00179eb:	83 ec 08             	sub    esp,0x8
c00179ee:	68 2f ba 02 c0       	push   0xc002ba2f
c00179f3:	50                   	push   eax
c00179f4:	e8 ac fe ff ff       	call   c00178a5 <findDataTable(unsigned char*, char*)>
c00179f9:	83 c4 10             	add    esp,0x10
c00179fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a00:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017a05:	75 19                	jne    c0017a20 <scanMADT()+0x109>
c0017a07:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017a0c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a12:	83 e2 fe             	and    edx,0xfffffffe
c0017a15:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a1b:	e9 9f 03 00 00       	jmp    c0017dbf <scanMADT()+0x4a8>
c0017a20:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017a28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a2f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017a33:	0f 87 86 03 00 00    	ja     c0017dbf <scanMADT()+0x4a8>
c0017a39:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017a41:	0f 87 78 03 00 00    	ja     c0017dbf <scanMADT()+0x4a8>
c0017a47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a4b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a53:	8d 50 01             	lea    edx,[eax+0x1]
c0017a56:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a5a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a5e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a62:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017a66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a6a:	8d 50 01             	lea    edx,[eax+0x1]
c0017a6d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a75:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a79:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017a7d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017a82:	0f 86 36 03 00 00    	jbe    c0017dbe <scanMADT()+0x4a7>
c0017a88:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017a8d:	75 57                	jne    c0017ae6 <scanMADT()+0x1cf>
c0017a8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a93:	8d 50 01             	lea    edx,[eax+0x1]
c0017a96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a9a:	8a 15 20 ee 02 c0    	mov    dl,BYTE PTR ds:0xc002ee20
c0017aa0:	0f b6 d2             	movzx  edx,dl
c0017aa3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017aa7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017aab:	88 82 60 ee 02 c0    	mov    BYTE PTR [edx-0x3ffd11a0],al
c0017ab1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ab5:	8d 50 01             	lea    edx,[eax+0x1]
c0017ab8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017abc:	8a 15 20 ee 02 c0    	mov    dl,BYTE PTR ds:0xc002ee20
c0017ac2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ac5:	88 0d 20 ee 02 c0    	mov    BYTE PTR ds:0xc002ee20,cl
c0017acb:	0f b6 d2             	movzx  edx,dl
c0017ace:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ad2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ad6:	88 82 40 ee 02 c0    	mov    BYTE PTR [edx-0x3ffd11c0],al
c0017adc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ae1:	e9 c1 02 00 00       	jmp    c0017da7 <scanMADT()+0x490>
c0017ae6:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017aeb:	0f 85 14 01 00 00    	jne    c0017c05 <scanMADT()+0x2ee>
c0017af1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017af5:	8d 50 01             	lea    edx,[eax+0x1]
c0017af8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017afc:	8a 15 e0 ec 02 c0    	mov    dl,BYTE PTR ds:0xc002ece0
c0017b02:	0f b6 d2             	movzx  edx,dl
c0017b05:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b09:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017b0d:	88 82 00 ed 02 c0    	mov    BYTE PTR [edx-0x3ffd1300],al
c0017b13:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017b17:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b1f:	01 d0                	add    eax,edx
c0017b21:	83 c0 2c             	add    eax,0x2c
c0017b24:	8a 00                	mov    al,BYTE PTR [eax]
c0017b26:	0f b6 d0             	movzx  edx,al
c0017b29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b2d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b34:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b38:	0f b6 c0             	movzx  eax,al
c0017b3b:	c1 e0 08             	shl    eax,0x8
c0017b3e:	89 d1                	mov    ecx,edx
c0017b40:	09 c1                	or     ecx,eax
c0017b42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b46:	8d 50 02             	lea    edx,[eax+0x2]
c0017b49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b4d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b51:	0f b6 c0             	movzx  eax,al
c0017b54:	c1 e0 10             	shl    eax,0x10
c0017b57:	09 c1                	or     ecx,eax
c0017b59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b5d:	8d 50 03             	lea    edx,[eax+0x3]
c0017b60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b64:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b68:	0f b6 c0             	movzx  eax,al
c0017b6b:	c1 e0 18             	shl    eax,0x18
c0017b6e:	09 c1                	or     ecx,eax
c0017b70:	89 ca                	mov    edx,ecx
c0017b72:	a0 e0 ec 02 c0       	mov    al,ds:0xc002ece0
c0017b77:	0f b6 c0             	movzx  eax,al
c0017b7a:	89 14 85 20 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd12e0],edx
c0017b81:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b8e:	01 d0                	add    eax,edx
c0017b90:	83 c0 2c             	add    eax,0x2c
c0017b93:	8a 00                	mov    al,BYTE PTR [eax]
c0017b95:	0f b6 d0             	movzx  edx,al
c0017b98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b9c:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ba3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ba7:	0f b6 c0             	movzx  eax,al
c0017baa:	c1 e0 08             	shl    eax,0x8
c0017bad:	89 d1                	mov    ecx,edx
c0017baf:	09 c1                	or     ecx,eax
c0017bb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bb5:	8d 50 02             	lea    edx,[eax+0x2]
c0017bb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bbc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bc0:	0f b6 c0             	movzx  eax,al
c0017bc3:	c1 e0 10             	shl    eax,0x10
c0017bc6:	09 c1                	or     ecx,eax
c0017bc8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bcc:	8d 50 03             	lea    edx,[eax+0x3]
c0017bcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bd7:	0f b6 c0             	movzx  eax,al
c0017bda:	c1 e0 18             	shl    eax,0x18
c0017bdd:	09 c1                	or     ecx,eax
c0017bdf:	89 ca                	mov    edx,ecx
c0017be1:	a0 e0 ec 02 c0       	mov    al,ds:0xc002ece0
c0017be6:	0f b6 c0             	movzx  eax,al
c0017be9:	89 14 85 a0 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1260],edx
c0017bf0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017bf5:	a0 e0 ec 02 c0       	mov    al,ds:0xc002ece0
c0017bfa:	40                   	inc    eax
c0017bfb:	a2 e0 ec 02 c0       	mov    ds:0xc002ece0,al
c0017c00:	e9 a2 01 00 00       	jmp    c0017da7 <scanMADT()+0x490>
c0017c05:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017c0a:	0f 85 e9 00 00 00    	jne    c0017cf9 <scanMADT()+0x3e2>
c0017c10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c14:	8d 50 01             	lea    edx,[eax+0x1]
c0017c17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c1f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c23:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017c27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c2b:	8d 50 01             	lea    edx,[eax+0x1]
c0017c2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c36:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c3a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017c3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c46:	01 d0                	add    eax,edx
c0017c48:	83 c0 2c             	add    eax,0x2c
c0017c4b:	8a 00                	mov    al,BYTE PTR [eax]
c0017c4d:	0f b6 d0             	movzx  edx,al
c0017c50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c54:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c5b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c5f:	0f b6 c0             	movzx  eax,al
c0017c62:	c1 e0 08             	shl    eax,0x8
c0017c65:	89 d1                	mov    ecx,edx
c0017c67:	09 c1                	or     ecx,eax
c0017c69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c6d:	8d 50 02             	lea    edx,[eax+0x2]
c0017c70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c74:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c78:	0f b6 c0             	movzx  eax,al
c0017c7b:	c1 e0 10             	shl    eax,0x10
c0017c7e:	09 c1                	or     ecx,eax
c0017c80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c84:	8d 50 03             	lea    edx,[eax+0x3]
c0017c87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c8b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c8f:	0f b6 c0             	movzx  eax,al
c0017c92:	c1 e0 18             	shl    eax,0x18
c0017c95:	09 c8                	or     eax,ecx
c0017c97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c9b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ca0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ca4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ca8:	01 d0                	add    eax,edx
c0017caa:	83 c0 2c             	add    eax,0x2c
c0017cad:	8a 00                	mov    al,BYTE PTR [eax]
c0017caf:	0f b6 c0             	movzx  eax,al
c0017cb2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017cb6:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017cb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cbd:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017cc1:	0f b6 d2             	movzx  edx,dl
c0017cc4:	c1 e2 08             	shl    edx,0x8
c0017cc7:	09 d0                	or     eax,edx
c0017cc9:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017cce:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cd3:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017cd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cdc:	88 90 e0 d5 02 c0    	mov    BYTE PTR [eax-0x3ffd2a20],dl
c0017ce2:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017ce7:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017cec:	66 89 84 12 c0 ec 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd1340],ax
c0017cf4:	e9 ae 00 00 00       	jmp    c0017da7 <scanMADT()+0x490>
c0017cf9:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017cfe:	0f 85 97 00 00 00    	jne    c0017d9b <scanMADT()+0x484>
c0017d04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d08:	8d 50 01             	lea    edx,[eax+0x1]
c0017d0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d0f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d13:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d17:	0f b6 c0             	movzx  eax,al
c0017d1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d26:	01 d0                	add    eax,edx
c0017d28:	83 c0 2c             	add    eax,0x2c
c0017d2b:	8a 00                	mov    al,BYTE PTR [eax]
c0017d2d:	0f b6 d0             	movzx  edx,al
c0017d30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d34:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d3b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d3f:	0f b6 c0             	movzx  eax,al
c0017d42:	c1 e0 08             	shl    eax,0x8
c0017d45:	09 d0                	or     eax,edx
c0017d47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d4b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017d50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d54:	8d 50 01             	lea    edx,[eax+0x1]
c0017d57:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d5b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d5f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d63:	0f b6 c0             	movzx  eax,al
c0017d66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d6e:	c1 e0 08             	shl    eax,0x8
c0017d71:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017d75:	89 c1                	mov    ecx,eax
c0017d77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d7b:	c1 e0 18             	shl    eax,0x18
c0017d7e:	89 c3                	mov    ebx,eax
c0017d80:	a1 30 ec 02 c0       	mov    eax,ds:0xc002ec30
c0017d85:	8d 50 01             	lea    edx,[eax+0x1]
c0017d88:	89 15 30 ec 02 c0    	mov    DWORD PTR ds:0xc002ec30,edx
c0017d8e:	09 d9                	or     ecx,ebx
c0017d90:	89 ca                	mov    edx,ecx
c0017d92:	89 14 85 40 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13c0],edx
c0017d99:	eb 0c                	jmp    c0017da7 <scanMADT()+0x490>
c0017d9b:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017da0:	75 05                	jne    c0017da7 <scanMADT()+0x490>
c0017da2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017da7:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017dac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017db0:	01 d0                	add    eax,edx
c0017db2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017db6:	e9 6d fc ff ff       	jmp    c0017a28 <scanMADT()+0x111>
c0017dbb:	90                   	nop
c0017dbc:	eb 01                	jmp    c0017dbf <scanMADT()+0x4a8>
c0017dbe:	90                   	nop
c0017dbf:	83 c4 38             	add    esp,0x38
c0017dc2:	5b                   	pop    ebx
c0017dc3:	c3                   	ret    

c0017dc4 <ACPI::ACPI()>:
c0017dc4:	83 ec 0c             	sub    esp,0xc
c0017dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dcb:	83 ec 08             	sub    esp,0x8
c0017dce:	68 34 ba 02 c0       	push   0xc002ba34
c0017dd3:	50                   	push   eax
c0017dd4:	e8 e5 c0 ff ff       	call   c0013ebe <Device::Device(char const*)>
c0017dd9:	83 c4 10             	add    esp,0x10
c0017ddc:	ba 90 bb 02 c0       	mov    edx,0xc002bb90
c0017de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017de5:	89 10                	mov    DWORD PTR [eax],edx
c0017de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017deb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017df6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e04:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017e0e:	e8 04 fb ff ff       	call   c0017917 <scanMADT()>
c0017e13:	90                   	nop
c0017e14:	83 c4 0c             	add    esp,0xc
c0017e17:	c3                   	ret    

c0017e18 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017e18:	83 ec 2c             	sub    esp,0x2c
c0017e1b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017e1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017e23:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017e27:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017e2b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017e30:	88 d0                	mov    al,dl
c0017e32:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017e36:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017e3b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e47:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e4d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017e51:	0f 8d 97 00 00 00    	jge    c0017eee <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017e57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e5f:	83 c2 2a             	add    edx,0x2a
c0017e62:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e66:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e6b:	75 78                	jne    c0017ee5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e75:	83 c2 2a             	add    edx,0x2a
c0017e78:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017e7c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017e80:	75 63                	jne    c0017ee5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e87:	74 3a                	je     c0017ec3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017e89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e8d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e91:	83 c2 2a             	add    edx,0x2a
c0017e94:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017e98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e9f:	39 c2                	cmp    edx,eax
c0017ea1:	74 10                	je     c0017eb3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017ea3:	83 ec 0c             	sub    esp,0xc
c0017ea6:	68 f4 b8 02 c0       	push   0xc002b8f4
c0017eab:	e8 3f 23 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0017eb0:	83 c4 10             	add    esp,0x10
c0017eb3:	83 ec 0c             	sub    esp,0xc
c0017eb6:	68 39 ba 02 c0       	push   0xc002ba39
c0017ebb:	e8 2f 23 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0017ec0:	83 c4 10             	add    esp,0x10
c0017ec3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017ec7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ecb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ecf:	83 c2 2a             	add    edx,0x2a
c0017ed2:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017ed6:	8b 02                	mov    eax,DWORD PTR [edx]
c0017ed8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017edb:	89 01                	mov    DWORD PTR [ecx],eax
c0017edd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ee0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ee5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017ee9:	e9 55 ff ff ff       	jmp    c0017e43 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017eee:	90                   	nop
c0017eef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ef3:	83 c4 2c             	add    esp,0x2c
c0017ef6:	c2 04 00             	ret    0x4
c0017ef9:	90                   	nop

c0017efa <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017efa:	83 ec 1c             	sub    esp,0x1c
c0017efd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f01:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017f05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f09:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017f0e:	88 c8                	mov    al,cl
c0017f10:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017f14:	88 d0                	mov    al,dl
c0017f16:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f1e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f28:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f2b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017f2f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f37:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f41:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017f44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f48:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017f4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f51:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f57:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017f5b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f62:	83 c2 2a             	add    edx,0x2a
c0017f65:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f6d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f77:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f7a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f7e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017f82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f86:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f8c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f93:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f9d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fa3:	3d 00 02 00 00       	cmp    eax,0x200
c0017fa8:	75 10                	jne    c0017fba <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017faa:	83 ec 0c             	sub    esp,0xc
c0017fad:	68 48 ba 02 c0       	push   0xc002ba48
c0017fb2:	e8 38 22 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0017fb7:	83 c4 10             	add    esp,0x10
c0017fba:	90                   	nop
c0017fbb:	83 c4 1c             	add    esp,0x1c
c0017fbe:	c3                   	ret    
c0017fbf:	90                   	nop

c0017fc0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017fc0:	b8 00 00 00 00       	mov    eax,0x0
c0017fc5:	c3                   	ret    

c0017fc6 <ACPI::detectPCI()>:
c0017fc6:	53                   	push   ebx
c0017fc7:	83 ec 28             	sub    esp,0x28
c0017fca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017fcf:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017fd4:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017fd9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017fdf:	83 e0 04             	and    eax,0x4
c0017fe2:	84 c0                	test   al,al
c0017fe4:	74 2b                	je     c0018011 <ACPI::detectPCI()+0x4b>
c0017fe6:	a1 28 ec 02 c0       	mov    eax,ds:0xc002ec28
c0017feb:	83 ec 08             	sub    esp,0x8
c0017fee:	68 65 ba 02 c0       	push   0xc002ba65
c0017ff3:	50                   	push   eax
c0017ff4:	e8 ac f8 ff ff       	call   c00178a5 <findDataTable(unsigned char*, char*)>
c0017ff9:	83 c4 10             	add    esp,0x10
c0017ffc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018000:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0018005:	74 0a                	je     c0018011 <ACPI::detectPCI()+0x4b>
c0018007:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001800c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018011:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0018019:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001801d:	8a 00                	mov    al,BYTE PTR [eax]
c001801f:	3c 01                	cmp    al,0x1
c0018021:	75 0c                	jne    c001802f <ACPI::detectPCI()+0x69>
c0018023:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018028:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001802d:	eb 26                	jmp    c0018055 <ACPI::detectPCI()+0x8f>
c001802f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018033:	8a 00                	mov    al,BYTE PTR [eax]
c0018035:	3c 02                	cmp    al,0x2
c0018037:	75 1c                	jne    c0018055 <ACPI::detectPCI()+0x8f>
c0018039:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001803e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018043:	74 10                	je     c0018055 <ACPI::detectPCI()+0x8f>
c0018045:	83 ec 0c             	sub    esp,0xc
c0018048:	68 24 b9 02 c0       	push   0xc002b924
c001804d:	e8 9d 21 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c0018052:	83 c4 10             	add    esp,0x10
c0018055:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018059:	83 f0 01             	xor    eax,0x1
c001805c:	84 c0                	test   al,al
c001805e:	74 3f                	je     c001809f <ACPI::detectPCI()+0xd9>
c0018060:	e8 eb 80 fe ff       	call   c0000150 <manualPCIProbe>
c0018065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018069:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001806e:	75 0c                	jne    c001807c <ACPI::detectPCI()+0xb6>
c0018070:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018075:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001807a:	eb 23                	jmp    c001809f <ACPI::detectPCI()+0xd9>
c001807c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0018081:	75 1c                	jne    c001809f <ACPI::detectPCI()+0xd9>
c0018083:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018088:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001808d:	74 10                	je     c001809f <ACPI::detectPCI()+0xd9>
c001808f:	83 ec 0c             	sub    esp,0xc
c0018092:	68 24 b9 02 c0       	push   0xc002b924
c0018097:	e8 53 21 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c001809c:	83 c4 10             	add    esp,0x10
c001809f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00180a4:	74 7e                	je     c0018124 <ACPI::detectPCI()+0x15e>
c00180a6:	83 ec 0c             	sub    esp,0xc
c00180a9:	68 6a ba 02 c0       	push   0xc002ba6a
c00180ae:	e8 d0 77 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c00180b3:	83 c4 10             	add    esp,0x10
c00180b6:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c00180be:	83 ec 0c             	sub    esp,0xc
c00180c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00180c5:	e8 5f 77 ff ff       	call   c000f829 <malloc>
c00180ca:	83 c4 10             	add    esp,0x10
c00180cd:	89 c3                	mov    ebx,eax
c00180cf:	83 ec 0c             	sub    esp,0xc
c00180d2:	53                   	push   ebx
c00180d3:	e8 18 a7 00 00       	call   c00227f0 <PCI::PCI()>
c00180d8:	83 c4 10             	add    esp,0x10
c00180db:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00180df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180e3:	83 ec 08             	sub    esp,0x8
c00180e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00180ea:	50                   	push   eax
c00180eb:	e8 ca bb ff ff       	call   c0013cba <Device::addChild(Device*)>
c00180f0:	83 c4 10             	add    esp,0x10
c00180f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00180f9:	83 c0 08             	add    eax,0x8
c00180fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00180fe:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018103:	74 07                	je     c001810c <ACPI::detectPCI()+0x146>
c0018105:	ba 01 00 00 00       	mov    edx,0x1
c001810a:	eb 05                	jmp    c0018111 <ACPI::detectPCI()+0x14b>
c001810c:	ba 02 00 00 00       	mov    edx,0x2
c0018111:	6a 00                	push   0x0
c0018113:	6a 00                	push   0x0
c0018115:	52                   	push   edx
c0018116:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001811a:	ff d0                	call   eax
c001811c:	83 c4 10             	add    esp,0x10
c001811f:	e9 9e 00 00 00       	jmp    c00181c2 <ACPI::detectPCI()+0x1fc>
c0018124:	83 ec 0c             	sub    esp,0xc
c0018127:	68 82 ba 02 c0       	push   0xc002ba82
c001812c:	e8 50 a7 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0018131:	83 c4 10             	add    esp,0x10
c0018134:	83 ec 0c             	sub    esp,0xc
c0018137:	68 8d ba 02 c0       	push   0xc002ba8d
c001813c:	e8 42 77 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c0018141:	83 c4 10             	add    esp,0x10
c0018144:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001814b:	83 ec 0c             	sub    esp,0xc
c001814e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018152:	e8 d2 76 ff ff       	call   c000f829 <malloc>
c0018157:	83 c4 10             	add    esp,0x10
c001815a:	89 c3                	mov    ebx,eax
c001815c:	83 ec 0c             	sub    esp,0xc
c001815f:	53                   	push   ebx
c0018160:	e8 f5 b1 00 00       	call   c002335a <IDE::IDE()>
c0018165:	83 c4 10             	add    esp,0x10
c0018168:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001816c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018170:	83 ec 08             	sub    esp,0x8
c0018173:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018177:	50                   	push   eax
c0018178:	e8 3d bb ff ff       	call   c0013cba <Device::addChild(Device*)>
c001817d:	83 c4 10             	add    esp,0x10
c0018180:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018184:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001818e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018192:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001819b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001819f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00181a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00181ae:	83 c0 08             	add    eax,0x8
c00181b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00181b3:	6a 00                	push   0x0
c00181b5:	6a 00                	push   0x0
c00181b7:	6a 00                	push   0x0
c00181b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181bd:	ff d0                	call   eax
c00181bf:	83 c4 10             	add    esp,0x10
c00181c2:	90                   	nop
c00181c3:	83 c4 28             	add    esp,0x28
c00181c6:	5b                   	pop    ebx
c00181c7:	c3                   	ret    

c00181c8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00181c8:	83 ec 1c             	sub    esp,0x1c
c00181cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181cf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00181d2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00181d6:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00181db:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00181e0:	83 ec 08             	sub    esp,0x8
c00181e3:	52                   	push   edx
c00181e4:	50                   	push   eax
c00181e5:	e8 08 6c ff ff       	call   c000edf2 <Computer::readCMOS(unsigned char)>
c00181ea:	83 c4 10             	add    esp,0x10
c00181ed:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00181f1:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00181f6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00181fb:	83 ec 04             	sub    esp,0x4
c00181fe:	6a 01                	push   0x1
c0018200:	52                   	push   edx
c0018201:	50                   	push   eax
c0018202:	e8 6b 6d ff ff       	call   c000ef72 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018207:	83 c4 10             	add    esp,0x10
c001820a:	90                   	nop
c001820b:	83 c4 1c             	add    esp,0x1c
c001820e:	c3                   	ret    
c001820f:	90                   	nop

c0018210 <ACPI::sleep()>:
c0018210:	83 ec 0c             	sub    esp,0xc
c0018213:	a1 00 ea 02 c0       	mov    eax,ds:0xc002ea00
c0018218:	85 c0                	test   eax,eax
c001821a:	74 07                	je     c0018223 <ACPI::sleep()+0x13>
c001821c:	a1 00 ea 02 c0       	mov    eax,ds:0xc002ea00
c0018221:	ff d0                	call   eax
c0018223:	90                   	nop
c0018224:	83 c4 0c             	add    esp,0xc
c0018227:	c3                   	ret    

c0018228 <ACPI::open(int, int, void*)>:
c0018228:	57                   	push   edi
c0018229:	56                   	push   esi
c001822a:	53                   	push   ebx
c001822b:	81 ec 60 01 00 00    	sub    esp,0x160
c0018231:	83 ec 0c             	sub    esp,0xc
c0018234:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001823b:	e8 86 fd ff ff       	call   c0017fc6 <ACPI::detectPCI()>
c0018240:	83 c4 10             	add    esp,0x10
c0018243:	83 ec 0c             	sub    esp,0xc
c0018246:	68 4c b9 02 c0       	push   0xc002b94c
c001824b:	e8 33 76 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c0018250:	83 c4 10             	add    esp,0x10
c0018253:	83 ec 0c             	sub    esp,0xc
c0018256:	68 a2 ba 02 c0       	push   0xc002baa2
c001825b:	e8 e5 46 00 00       	call   c001c945 <Thr::loadKernelSymbolTable(char const*)>
c0018260:	83 c4 10             	add    esp,0x10
c0018263:	83 ec 0c             	sub    esp,0xc
c0018266:	68 c0 ba 02 c0       	push   0xc002bac0
c001826b:	e8 13 76 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c0018270:	83 c4 10             	add    esp,0x10
c0018273:	83 ec 04             	sub    esp,0x4
c0018276:	6a 0c                	push   0xc
c0018278:	68 db ba 02 c0       	push   0xc002badb
c001827d:	68 ec ba 02 c0       	push   0xc002baec
c0018282:	e8 24 2d 00 00       	call   c001afab <Reg::readIntWithDefault(char*, char*, int)>
c0018287:	83 c4 10             	add    esp,0x10
c001828a:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018291:	83 ec 0c             	sub    esp,0xc
c0018294:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c001829b:	e8 19 94 ff ff       	call   c00116b9 <Virt::setupPageSwapping(int)>
c00182a0:	83 c4 10             	add    esp,0x10
c00182a3:	83 ec 0c             	sub    esp,0xc
c00182a6:	68 2c a3 02 c0       	push   0xc002a32c
c00182ab:	e8 d3 75 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c00182b0:	83 c4 10             	add    esp,0x10
c00182b3:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c00182b9:	83 ec 08             	sub    esp,0x8
c00182bc:	6a 01                	push   0x1
c00182be:	68 f3 ba 02 c0       	push   0xc002baf3
c00182c3:	e8 f4 50 00 00       	call   c001d3bc <Thr::loadDLL(char const*, bool)>
c00182c8:	83 c4 10             	add    esp,0x10
c00182cb:	83 ec 08             	sub    esp,0x8
c00182ce:	53                   	push   ebx
c00182cf:	50                   	push   eax
c00182d0:	e8 18 53 00 00       	call   c001d5ed <Thr::executeDLL(unsigned long, void*)>
c00182d5:	83 c4 10             	add    esp,0x10
c00182d8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00182df:	83 ec 08             	sub    esp,0x8
c00182e2:	6a 12                	push   0x12
c00182e4:	50                   	push   eax
c00182e5:	e8 54 bd ff ff       	call   c001403e <getDevicesOfType(DeviceType)>
c00182ea:	83 c4 0c             	add    esp,0xc
c00182ed:	83 ec 0c             	sub    esp,0xc
c00182f0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00182f7:	50                   	push   eax
c00182f8:	e8 77 0b 01 00       	call   c0028e74 <LinkedList<Device>::isEmpty()>
c00182fd:	83 c4 10             	add    esp,0x10
c0018300:	83 f0 01             	xor    eax,0x1
c0018303:	84 c0                	test   al,al
c0018305:	0f 84 43 01 00 00    	je     c001844e <ACPI::open(int, int, void*)+0x226>
c001830b:	83 ec 0c             	sub    esp,0xc
c001830e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018315:	50                   	push   eax
c0018316:	e8 75 0b 01 00       	call   c0028e90 <LinkedList<Device>::getFirstElement()>
c001831b:	83 c4 10             	add    esp,0x10
c001831e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018325:	83 ec 0c             	sub    esp,0xc
c0018328:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001832f:	50                   	push   eax
c0018330:	e8 63 0b 01 00       	call   c0028e98 <LinkedList<Device>::removeFirst()>
c0018335:	83 c4 10             	add    esp,0x10
c0018338:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c001833f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018346:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c001834d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018351:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018357:	ba 09 00 00 00       	mov    edx,0x9
c001835c:	fc                   	cld    
c001835d:	89 c7                	mov    edi,eax
c001835f:	89 de                	mov    esi,ebx
c0018361:	89 d1                	mov    ecx,edx
c0018363:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018365:	83 ec 08             	sub    esp,0x8
c0018368:	8d 44 24 38          	lea    eax,[esp+0x38]
c001836c:	50                   	push   eax
c001836d:	83 ec 24             	sub    esp,0x24
c0018370:	89 e0                	mov    eax,esp
c0018372:	89 c3                	mov    ebx,eax
c0018374:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018378:	ba 09 00 00 00       	mov    edx,0x9
c001837d:	89 df                	mov    edi,ebx
c001837f:	89 c6                	mov    esi,eax
c0018381:	89 d1                	mov    ecx,edx
c0018383:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018385:	e8 44 a9 00 00       	call   c0022cce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001838a:	83 c4 30             	add    esp,0x30
c001838d:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018394:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001839c:	0f 84 4b ff ff ff    	je     c00182ed <ACPI::open(int, int, void*)+0xc5>
c00183a2:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00183ad:	83 ec 0c             	sub    esp,0xc
c00183b0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00183b7:	e8 6d 74 ff ff       	call   c000f829 <malloc>
c00183bc:	83 c4 10             	add    esp,0x10
c00183bf:	89 c3                	mov    ebx,eax
c00183c1:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00183c6:	83 ec 04             	sub    esp,0x4
c00183c9:	50                   	push   eax
c00183ca:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00183d1:	53                   	push   ebx
c00183d2:	e8 09 aa ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c00183d7:	83 c4 10             	add    esp,0x10
c00183da:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00183e1:	83 ec 0c             	sub    esp,0xc
c00183e4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00183eb:	e8 c2 ac ff ff       	call   c00130b2 <File::exists()>
c00183f0:	83 c4 10             	add    esp,0x10
c00183f3:	84 c0                	test   al,al
c00183f5:	74 27                	je     c001841e <ACPI::open(int, int, void*)+0x1f6>
c00183f7:	83 ec 08             	sub    esp,0x8
c00183fa:	6a 01                	push   0x1
c00183fc:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018403:	e8 b4 4f 00 00       	call   c001d3bc <Thr::loadDLL(char const*, bool)>
c0018408:	83 c4 10             	add    esp,0x10
c001840b:	83 ec 08             	sub    esp,0x8
c001840e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018415:	50                   	push   eax
c0018416:	e8 d2 51 00 00       	call   c001d5ed <Thr::executeDLL(unsigned long, void*)>
c001841b:	83 c4 10             	add    esp,0x10
c001841e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018426:	0f 84 c1 fe ff ff    	je     c00182ed <ACPI::open(int, int, void*)+0xc5>
c001842c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018433:	8b 00                	mov    eax,DWORD PTR [eax]
c0018435:	83 c0 08             	add    eax,0x8
c0018438:	8b 00                	mov    eax,DWORD PTR [eax]
c001843a:	83 ec 0c             	sub    esp,0xc
c001843d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018444:	ff d0                	call   eax
c0018446:	83 c4 10             	add    esp,0x10
c0018449:	e9 9f fe ff ff       	jmp    c00182ed <ACPI::open(int, int, void*)+0xc5>
c001844e:	83 ec 0c             	sub    esp,0xc
c0018451:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018458:	50                   	push   eax
c0018459:	e8 14 0a 01 00       	call   c0028e72 <LinkedList<Device>::~LinkedList()>
c001845e:	83 c4 10             	add    esp,0x10
c0018461:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0018467:	83 ec 08             	sub    esp,0x8
c001846a:	6a 01                	push   0x1
c001846c:	68 0e bb 02 c0       	push   0xc002bb0e
c0018471:	e8 46 4f 00 00       	call   c001d3bc <Thr::loadDLL(char const*, bool)>
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	83 ec 08             	sub    esp,0x8
c001847c:	53                   	push   ebx
c001847d:	50                   	push   eax
c001847e:	e8 6a 51 00 00       	call   c001d5ed <Thr::executeDLL(unsigned long, void*)>
c0018483:	83 c4 10             	add    esp,0x10
c0018486:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c001848c:	83 ec 08             	sub    esp,0x8
c001848f:	6a 01                	push   0x1
c0018491:	68 2b bb 02 c0       	push   0xc002bb2b
c0018496:	e8 21 4f 00 00       	call   c001d3bc <Thr::loadDLL(char const*, bool)>
c001849b:	83 c4 10             	add    esp,0x10
c001849e:	83 ec 08             	sub    esp,0x8
c00184a1:	53                   	push   ebx
c00184a2:	50                   	push   eax
c00184a3:	e8 45 51 00 00       	call   c001d5ed <Thr::executeDLL(unsigned long, void*)>
c00184a8:	83 c4 10             	add    esp,0x10
c00184ab:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00184b0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184b6:	83 e0 04             	and    eax,0x4
c00184b9:	84 c0                	test   al,al
c00184bb:	0f 84 0d 01 00 00    	je     c00185ce <ACPI::open(int, int, void*)+0x3a6>
c00184c1:	83 ec 0c             	sub    esp,0xc
c00184c4:	68 48 bb 02 c0       	push   0xc002bb48
c00184c9:	e8 b5 73 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c00184ce:	83 c4 10             	add    esp,0x10
c00184d1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00184dc:	83 ec 0c             	sub    esp,0xc
c00184df:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00184e6:	e8 3e 73 ff ff       	call   c000f829 <malloc>
c00184eb:	83 c4 10             	add    esp,0x10
c00184ee:	89 c3                	mov    ebx,eax
c00184f0:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00184f5:	83 ec 04             	sub    esp,0x4
c00184f8:	50                   	push   eax
c00184f9:	68 65 bb 02 c0       	push   0xc002bb65
c00184fe:	53                   	push   ebx
c00184ff:	e8 dc a8 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c0018504:	83 c4 10             	add    esp,0x10
c0018507:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c001850e:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018516:	74 1a                	je     c0018532 <ACPI::open(int, int, void*)+0x30a>
c0018518:	83 ec 0c             	sub    esp,0xc
c001851b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018522:	e8 8b ab ff ff       	call   c00130b2 <File::exists()>
c0018527:	83 c4 10             	add    esp,0x10
c001852a:	84 c0                	test   al,al
c001852c:	74 04                	je     c0018532 <ACPI::open(int, int, void*)+0x30a>
c001852e:	b0 01                	mov    al,0x1
c0018530:	eb 02                	jmp    c0018534 <ACPI::open(int, int, void*)+0x30c>
c0018532:	b0 00                	mov    al,0x0
c0018534:	84 c0                	test   al,al
c0018536:	74 25                	je     c001855d <ACPI::open(int, int, void*)+0x335>
c0018538:	83 ec 08             	sub    esp,0x8
c001853b:	6a 01                	push   0x1
c001853d:	68 65 bb 02 c0       	push   0xc002bb65
c0018542:	e8 75 4e 00 00       	call   c001d3bc <Thr::loadDLL(char const*, bool)>
c0018547:	83 c4 10             	add    esp,0x10
c001854a:	83 ec 08             	sub    esp,0x8
c001854d:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018554:	50                   	push   eax
c0018555:	e8 93 50 00 00       	call   c001d5ed <Thr::executeDLL(unsigned long, void*)>
c001855a:	83 c4 10             	add    esp,0x10
c001855d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018565:	74 27                	je     c001858e <ACPI::open(int, int, void*)+0x366>
c0018567:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001856f:	74 1d                	je     c001858e <ACPI::open(int, int, void*)+0x366>
c0018571:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018578:	8b 00                	mov    eax,DWORD PTR [eax]
c001857a:	83 c0 08             	add    eax,0x8
c001857d:	8b 00                	mov    eax,DWORD PTR [eax]
c001857f:	83 ec 0c             	sub    esp,0xc
c0018582:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018589:	ff d0                	call   eax
c001858b:	83 c4 10             	add    esp,0x10
c001858e:	a1 28 ec 02 c0       	mov    eax,ds:0xc002ec28
c0018593:	83 ec 08             	sub    esp,0x8
c0018596:	68 82 bb 02 c0       	push   0xc002bb82
c001859b:	50                   	push   eax
c001859c:	e8 04 f3 ff ff       	call   c00178a5 <findDataTable(unsigned char*, char*)>
c00185a1:	83 c4 10             	add    esp,0x10
c00185a4:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00185ab:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00185b3:	74 19                	je     c00185ce <ACPI::open(int, int, void*)+0x3a6>
c00185b5:	83 ec 08             	sub    esp,0x8
c00185b8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00185bf:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00185c6:	e8 fd fb ff ff       	call   c00181c8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00185cb:	83 c4 10             	add    esp,0x10
c00185ce:	b8 00 00 00 00       	mov    eax,0x0
c00185d3:	81 c4 60 01 00 00    	add    esp,0x160
c00185d9:	5b                   	pop    ebx
c00185da:	5e                   	pop    esi
c00185db:	5f                   	pop    edi
c00185dc:	c3                   	ret    
c00185dd:	90                   	nop

c00185de <CPU::close(int, int, void*)>:
c00185de:	31 c0                	xor    eax,eax
c00185e0:	c3                   	ret    
c00185e1:	90                   	nop

c00185e2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00185e2:	55                   	push   ebp
c00185e3:	57                   	push   edi
c00185e4:	56                   	push   esi
c00185e5:	53                   	push   ebx
c00185e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00185ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00185ee:	89 ce                	mov    esi,ecx
c00185f0:	89 d5                	mov    ebp,edx
c00185f2:	80 f9 04             	cmp    cl,0x4
c00185f5:	75 28                	jne    c001861f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00185f7:	8d 42 f9             	lea    eax,[edx-0x7]
c00185fa:	3c 03                	cmp    al,0x3
c00185fc:	0f 86 63 01 00 00    	jbe    c0018765 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018602:	80 fa 03             	cmp    dl,0x3
c0018605:	0f 84 5a 01 00 00    	je     c0018765 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001860b:	8d 7a f2             	lea    edi,[edx-0xe]
c001860e:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018613:	89 fb                	mov    ebx,edi
c0018615:	80 fb 01             	cmp    bl,0x1
c0018618:	77 4e                	ja     c0018668 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001861a:	e9 52 01 00 00       	jmp    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001861f:	80 f9 05             	cmp    cl,0x5
c0018622:	75 4d                	jne    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018624:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018629:	80 fa 03             	cmp    dl,0x3
c001862c:	0f 86 3f 01 00 00    	jbe    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018632:	8d 7a fa             	lea    edi,[edx-0x6]
c0018635:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c001863a:	89 fb                	mov    ebx,edi
c001863c:	80 fb 01             	cmp    bl,0x1
c001863f:	0f 86 2c 01 00 00    	jbe    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018645:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c001864a:	80 fa 08             	cmp    dl,0x8
c001864d:	0f 84 1e 01 00 00    	je     c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018653:	89 d7                	mov    edi,edx
c0018655:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c001865a:	83 e7 fb             	and    edi,0xfffffffb
c001865d:	89 fb                	mov    ebx,edi
c001865f:	80 fb 09             	cmp    bl,0x9
c0018662:	0f 84 09 01 00 00    	je     c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018668:	31 c0                	xor    eax,eax
c001866a:	89 eb                	mov    ebx,ebp
c001866c:	0f b6 fb             	movzx  edi,bl
c001866f:	eb 30                	jmp    c00186a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018671:	31 c0                	xor    eax,eax
c0018673:	80 f9 06             	cmp    cl,0x6
c0018676:	75 f2                	jne    c001866a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018678:	80 fa 0a             	cmp    dl,0xa
c001867b:	77 ed                	ja     c001866a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001867d:	bf de 05 00 00       	mov    edi,0x5de
c0018682:	0f a3 d7             	bt     edi,edx
c0018685:	73 e3                	jae    c001866a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018687:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c001868c:	e9 e0 00 00 00       	jmp    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018691:	39 c7                	cmp    edi,eax
c0018693:	0f 84 d3 00 00 00    	je     c001876c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018699:	40                   	inc    eax
c001869a:	3d d0 00 00 00       	cmp    eax,0xd0
c001869f:	74 09                	je     c00186aa <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00186a1:	89 f3                	mov    ebx,esi
c00186a3:	80 fb 0f             	cmp    bl,0xf
c00186a6:	75 f1                	jne    c0018699 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00186a8:	eb e7                	jmp    c0018691 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00186aa:	80 f9 10             	cmp    cl,0x10
c00186ad:	75 14                	jne    c00186c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00186af:	8d 42 fc             	lea    eax,[edx-0x4]
c00186b2:	83 e0 fb             	and    eax,0xfffffffb
c00186b5:	3c 02                	cmp    al,0x2
c00186b7:	76 34                	jbe    c00186ed <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00186b9:	b8 09 bd 02 c0       	mov    eax,0xc002bd09
c00186be:	80 fa 02             	cmp    dl,0x2
c00186c1:	eb 24                	jmp    c00186e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00186c3:	80 f9 11             	cmp    cl,0x11
c00186c6:	75 13                	jne    c00186db <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00186c8:	b8 09 bd 02 c0       	mov    eax,0xc002bd09
c00186cd:	80 fa 03             	cmp    dl,0x3
c00186d0:	0f 85 9b 00 00 00    	jne    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186d6:	e9 91 00 00 00       	jmp    c001876c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00186db:	80 f9 12             	cmp    cl,0x12
c00186de:	75 14                	jne    c00186f4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00186e0:	b8 09 bd 02 c0       	mov    eax,0xc002bd09
c00186e5:	fe ca                	dec    dl
c00186e7:	0f 85 84 00 00 00    	jne    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186ed:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c00186f2:	eb 7d                	jmp    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186f4:	80 f9 14             	cmp    cl,0x14
c00186f7:	75 12                	jne    c001870b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00186f9:	4a                   	dec    edx
c00186fa:	b8 09 bd 02 c0       	mov    eax,0xc002bd09
c00186ff:	80 fa 01             	cmp    dl,0x1
c0018702:	77 6d                	ja     c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018704:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018709:	eb 66                	jmp    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001870b:	80 f9 15             	cmp    cl,0x15
c001870e:	75 31                	jne    c0018741 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018710:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018715:	80 fa 01             	cmp    dl,0x1
c0018718:	74 57                	je     c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001871a:	b8 09 bd 02 c0       	mov    eax,0xc002bd09
c001871f:	80 fa 13             	cmp    dl,0x13
c0018722:	76 0c                	jbe    c0018730 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018724:	80 fa 30             	cmp    dl,0x30
c0018727:	75 48                	jne    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018729:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c001872e:	eb 41                	jmp    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018730:	b9 04 00 09 00       	mov    ecx,0x90004
c0018735:	0f a3 d1             	bt     ecx,edx
c0018738:	73 37                	jae    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001873a:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c001873f:	eb 30                	jmp    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018741:	b8 09 bd 02 c0       	mov    eax,0xc002bd09
c0018746:	80 f9 16             	cmp    cl,0x16
c0018749:	75 26                	jne    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001874b:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018750:	84 d2                	test   dl,dl
c0018752:	74 1d                	je     c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018754:	b8 09 bd 02 c0       	mov    eax,0xc002bd09
c0018759:	80 fa 30             	cmp    dl,0x30
c001875c:	75 13                	jne    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001875e:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018763:	eb 0c                	jmp    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018765:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c001876a:	eb 05                	jmp    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001876c:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018771:	5b                   	pop    ebx
c0018772:	5e                   	pop    esi
c0018773:	5f                   	pop    edi
c0018774:	5d                   	pop    ebp
c0018775:	c3                   	ret    

c0018776 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018776:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001877a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001877e:	80 f9 04             	cmp    cl,0x4
c0018781:	75 6b                	jne    c00187ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018783:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0018788:	80 fa 01             	cmp    dl,0x1
c001878b:	0f 86 92 02 00 00    	jbe    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018791:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c0018796:	80 fa 02             	cmp    dl,0x2
c0018799:	0f 84 84 02 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001879f:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c00187a4:	80 fa 03             	cmp    dl,0x3
c00187a7:	0f 84 76 02 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ad:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c00187b2:	80 fa 04             	cmp    dl,0x4
c00187b5:	0f 84 68 02 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187bb:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c00187c0:	80 fa 05             	cmp    dl,0x5
c00187c3:	0f 84 5a 02 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c9:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c00187ce:	80 fa 07             	cmp    dl,0x7
c00187d1:	0f 84 4c 02 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d7:	83 ea 08             	sub    edx,0x8
c00187da:	b8 09 bd 02 c0       	mov    eax,0xc002bd09
c00187df:	80 fa 01             	cmp    dl,0x1
c00187e2:	0f 87 3b 02 00 00    	ja     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e8:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c00187ed:	c3                   	ret    
c00187ee:	80 f9 05             	cmp    cl,0x5
c00187f1:	75 45                	jne    c0018838 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00187f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00187f6:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c00187fb:	80 f9 02             	cmp    cl,0x2
c00187fe:	0f 86 1f 02 00 00    	jbe    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018804:	80 fa 04             	cmp    dl,0x4
c0018807:	0f 84 f3 01 00 00    	je     c0018a00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001880d:	80 fa 07             	cmp    dl,0x7
c0018810:	0f 84 0d 02 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018816:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c001881b:	80 fa 08             	cmp    dl,0x8
c001881e:	0f 84 ff 01 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018824:	b8 09 bd 02 c0       	mov    eax,0xc002bd09
c0018829:	80 fa 09             	cmp    dl,0x9
c001882c:	0f 85 f1 01 00 00    	jne    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018832:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018837:	c3                   	ret    
c0018838:	80 f9 06             	cmp    cl,0x6
c001883b:	0f 85 85 01 00 00    	jne    c00189c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018841:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018846:	80 fa 01             	cmp    dl,0x1
c0018849:	0f 84 d4 01 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001884f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018852:	3c 01                	cmp    al,0x1
c0018854:	0f 86 ac 01 00 00    	jbe    c0018a06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001885a:	80 fa 03             	cmp    dl,0x3
c001885d:	0f 84 a3 01 00 00    	je     c0018a06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018863:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018866:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c001886b:	80 f9 01             	cmp    cl,0x1
c001886e:	0f 86 af 01 00 00    	jbe    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018874:	80 fa 09             	cmp    dl,0x9
c0018877:	0f 84 8f 01 00 00    	je     c0018a0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001887d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018880:	80 f9 01             	cmp    cl,0x1
c0018883:	0f 86 9a 01 00 00    	jbe    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018889:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c001888e:	80 fa 0d             	cmp    dl,0xd
c0018891:	0f 84 8c 01 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018897:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c001889c:	80 fa 0e             	cmp    dl,0xe
c001889f:	0f 84 7e 01 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188a5:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c00188aa:	80 fa 0f             	cmp    dl,0xf
c00188ad:	0f 84 70 01 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b3:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00188b8:	80 fa 15             	cmp    dl,0x15
c00188bb:	0f 84 62 01 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c1:	8d 4a ea             	lea    ecx,[edx-0x16]
c00188c4:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c00188c9:	80 f9 01             	cmp    cl,0x1
c00188cc:	0f 86 51 01 00 00    	jbe    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d2:	80 fa 1a             	cmp    dl,0x1a
c00188d5:	0f 84 37 01 00 00    	je     c0018a12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00188db:	80 fa 1c             	cmp    dl,0x1c
c00188de:	0f 84 34 01 00 00    	je     c0018a18 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00188e4:	80 fa 1d             	cmp    dl,0x1d
c00188e7:	0f 84 36 01 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188ed:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c00188f2:	80 fa 25             	cmp    dl,0x25
c00188f5:	0f 84 28 01 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188fb:	8d 4a da             	lea    ecx,[edx-0x26]
c00188fe:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018903:	80 f9 01             	cmp    cl,0x1
c0018906:	0f 86 17 01 00 00    	jbe    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001890c:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018911:	80 fa 2a             	cmp    dl,0x2a
c0018914:	0f 84 09 01 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891a:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c001891f:	80 fa 2c             	cmp    dl,0x2c
c0018922:	0f 84 fb 00 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018928:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c001892d:	80 fa 2d             	cmp    dl,0x2d
c0018930:	0f 84 ed 00 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018936:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c001893b:	80 fa 2e             	cmp    dl,0x2e
c001893e:	0f 84 df 00 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018944:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018949:	80 fa 2f             	cmp    dl,0x2f
c001894c:	0f 84 d1 00 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018952:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018955:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c001895a:	80 f9 01             	cmp    cl,0x1
c001895d:	0f 86 c0 00 00 00    	jbe    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018963:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018968:	80 fa 37             	cmp    dl,0x37
c001896b:	0f 84 b2 00 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018971:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018976:	80 fa 3a             	cmp    dl,0x3a
c0018979:	0f 84 a4 00 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897f:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018984:	80 fa 3c             	cmp    dl,0x3c
c0018987:	0f 84 96 00 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001898d:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018992:	80 fa 3d             	cmp    dl,0x3d
c0018995:	0f 84 88 00 00 00    	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899b:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00189a0:	80 fa 3e             	cmp    dl,0x3e
c00189a3:	74 7e                	je     c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a5:	8d 42 bb             	lea    eax,[edx-0x45]
c00189a8:	3c 01                	cmp    al,0x1
c00189aa:	76 72                	jbe    c0018a1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189ac:	80 fa 3f             	cmp    dl,0x3f
c00189af:	74 6d                	je     c0018a1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189b1:	80 fa 4a             	cmp    dl,0x4a
c00189b4:	74 0a                	je     c00189c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00189b6:	b8 09 bd 02 c0       	mov    eax,0xc002bd09
c00189bb:	80 fa 4d             	cmp    dl,0x4d
c00189be:	75 63                	jne    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c0:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c00189c5:	c3                   	ret    
c00189c6:	b8 09 bd 02 c0       	mov    eax,0xc002bd09
c00189cb:	80 f9 0b             	cmp    cl,0xb
c00189ce:	75 0a                	jne    c00189da <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00189d0:	fe ca                	dec    dl
c00189d2:	75 4f                	jne    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d4:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c00189d9:	c3                   	ret    
c00189da:	80 f9 0f             	cmp    cl,0xf
c00189dd:	75 44                	jne    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189df:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c00189e4:	80 fa 02             	cmp    dl,0x2
c00189e7:	76 3a                	jbe    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e9:	8d 42 fd             	lea    eax,[edx-0x3]
c00189ec:	3c 01                	cmp    al,0x1
c00189ee:	76 0a                	jbe    c00189fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00189f0:	b8 09 bd 02 c0       	mov    eax,0xc002bd09
c00189f5:	80 fa 06             	cmp    dl,0x6
c00189f8:	75 29                	jne    c0018a23 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fa:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c00189ff:	c3                   	ret    
c0018a00:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018a05:	c3                   	ret    
c0018a06:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018a0b:	c3                   	ret    
c0018a0c:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018a11:	c3                   	ret    
c0018a12:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018a17:	c3                   	ret    
c0018a18:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a1d:	c3                   	ret    
c0018a1e:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018a23:	c3                   	ret    

c0018a24 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018a24:	60                   	pusha  
c0018a25:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a31:	9c                   	pushf  
c0018a32:	fa                   	cli    
c0018a33:	0f 09                	wbinvd 
c0018a35:	0f 30                	wrmsr  
c0018a37:	9d                   	popf   
c0018a38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a3c:	89 02                	mov    DWORD PTR [edx],eax
c0018a3e:	61                   	popa   
c0018a3f:	c3                   	ret    

c0018a40 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018a40:	60                   	pusha  
c0018a41:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a45:	9c                   	pushf  
c0018a46:	fa                   	cli    
c0018a47:	0f 09                	wbinvd 
c0018a49:	31 c0                	xor    eax,eax
c0018a4b:	31 d2                	xor    edx,edx
c0018a4d:	0f 32                	rdmsr  
c0018a4f:	9d                   	popf   
c0018a50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a54:	89 02                	mov    DWORD PTR [edx],eax
c0018a56:	61                   	popa   
c0018a57:	c3                   	ret    

c0018a58 <CPU::AMD_K6_writeback(int, int, int)>:
c0018a58:	56                   	push   esi
c0018a59:	53                   	push   ebx
c0018a5a:	83 ec 10             	sub    esp,0x10
c0018a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a61:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018a66:	75 5d                	jne    c0018ac5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a68:	83 f8 08             	cmp    eax,0x8
c0018a6b:	75 09                	jne    c0018a76 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018a6d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018a72:	7e 13                	jle    c0018a87 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018a74:	eb 30                	jmp    c0018aa6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018a76:	83 f8 06             	cmp    eax,0x6
c0018a79:	7c 4a                	jl     c0018ac5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a7b:	83 f8 07             	cmp    eax,0x7
c0018a7e:	7e 07                	jle    c0018a87 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018a80:	83 f8 09             	cmp    eax,0x9
c0018a83:	74 21                	je     c0018aa6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018a85:	eb 3e                	jmp    c0018ac5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a87:	89 e6                	mov    esi,esp
c0018a89:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c0018a8f:	56                   	push   esi
c0018a90:	c1 eb 15             	shr    ebx,0x15
c0018a93:	68 82 00 00 c0       	push   0xc0000082
c0018a98:	83 e3 7e             	and    ebx,0x7e
c0018a9b:	e8 a0 ff ff ff       	call   c0018a40 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018aa0:	56                   	push   esi
c0018aa1:	6a 00                	push   0x0
c0018aa3:	53                   	push   ebx
c0018aa4:	eb 12                	jmp    c0018ab8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018aa6:	89 e3                	mov    ebx,esp
c0018aa8:	53                   	push   ebx
c0018aa9:	68 82 00 00 c0       	push   0xc0000082
c0018aae:	e8 8d ff ff ff       	call   c0018a40 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ab3:	53                   	push   ebx
c0018ab4:	6a 00                	push   0x0
c0018ab6:	6a 00                	push   0x0
c0018ab8:	68 82 00 00 c0       	push   0xc0000082
c0018abd:	e8 62 ff ff ff       	call   c0018a24 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018ac2:	83 c4 18             	add    esp,0x18
c0018ac5:	83 c4 10             	add    esp,0x10
c0018ac8:	5b                   	pop    ebx
c0018ac9:	5e                   	pop    esi
c0018aca:	c3                   	ret    
c0018acb:	90                   	nop

c0018acc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018acc:	55                   	push   ebp
c0018acd:	57                   	push   edi
c0018ace:	56                   	push   esi
c0018acf:	53                   	push   ebx
c0018ad0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ad4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018ad8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018adc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ae0:	39 05 a0 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8a0,eax
c0018ae6:	75 23                	jne    c0018b0b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018ae8:	a1 8c ee 02 c0       	mov    eax,ds:0xc002ee8c
c0018aed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018af1:	89 06                	mov    DWORD PTR [esi],eax
c0018af3:	a1 88 ee 02 c0       	mov    eax,ds:0xc002ee88
c0018af8:	89 07                	mov    DWORD PTR [edi],eax
c0018afa:	a1 84 ee 02 c0       	mov    eax,ds:0xc002ee84
c0018aff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018b02:	a1 80 ee 02 c0       	mov    eax,ds:0xc002ee80
c0018b07:	89 02                	mov    DWORD PTR [edx],eax
c0018b09:	eb 3f                	jmp    c0018b4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018b0b:	31 c9                	xor    ecx,ecx
c0018b0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b11:	0f a2                	cpuid  
c0018b13:	89 06                	mov    DWORD PTR [esi],eax
c0018b15:	89 1f                	mov    DWORD PTR [edi],ebx
c0018b17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b1b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018b1e:	89 10                	mov    DWORD PTR [eax],edx
c0018b20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b24:	a3 a0 d8 02 c0       	mov    ds:0xc002d8a0,eax
c0018b29:	8b 06                	mov    eax,DWORD PTR [esi]
c0018b2b:	a3 8c ee 02 c0       	mov    ds:0xc002ee8c,eax
c0018b30:	8b 07                	mov    eax,DWORD PTR [edi]
c0018b32:	a3 88 ee 02 c0       	mov    ds:0xc002ee88,eax
c0018b37:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b3a:	a3 84 ee 02 c0       	mov    ds:0xc002ee84,eax
c0018b3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b43:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b45:	a3 80 ee 02 c0       	mov    ds:0xc002ee80,eax
c0018b4a:	5b                   	pop    ebx
c0018b4b:	5e                   	pop    esi
c0018b4c:	5f                   	pop    edi
c0018b4d:	5d                   	pop    ebp
c0018b4e:	c3                   	ret    
c0018b4f:	90                   	nop

c0018b50 <CPU::cpuidCheckEDX(unsigned int)>:
c0018b50:	83 ec 10             	sub    esp,0x10
c0018b53:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b57:	50                   	push   eax
c0018b58:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b5c:	50                   	push   eax
c0018b5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b61:	50                   	push   eax
c0018b62:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b66:	50                   	push   eax
c0018b67:	6a 01                	push   0x1
c0018b69:	e8 5e ff ff ff       	call   c0018acc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b72:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018b76:	0f 95 c0             	setne  al
c0018b79:	83 c4 24             	add    esp,0x24
c0018b7c:	c3                   	ret    
c0018b7d:	90                   	nop

c0018b7e <CPU::cpuidCheckECX(unsigned int)>:
c0018b7e:	83 ec 10             	sub    esp,0x10
c0018b81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b85:	50                   	push   eax
c0018b86:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b8a:	50                   	push   eax
c0018b8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b8f:	50                   	push   eax
c0018b90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b94:	50                   	push   eax
c0018b95:	6a 01                	push   0x1
c0018b97:	e8 30 ff ff ff       	call   c0018acc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ba0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018ba4:	0f 95 c0             	setne  al
c0018ba7:	83 c4 24             	add    esp,0x24
c0018baa:	c3                   	ret    
c0018bab:	90                   	nop

c0018bac <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018bac:	83 ec 10             	sub    esp,0x10
c0018baf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bb3:	50                   	push   eax
c0018bb4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bb8:	50                   	push   eax
c0018bb9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bbd:	50                   	push   eax
c0018bbe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bc2:	50                   	push   eax
c0018bc3:	6a 07                	push   0x7
c0018bc5:	e8 02 ff ff ff       	call   c0018acc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bce:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018bd2:	0f 95 c0             	setne  al
c0018bd5:	83 c4 24             	add    esp,0x24
c0018bd8:	c3                   	ret    
c0018bd9:	90                   	nop

c0018bda <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018bda:	83 ec 10             	sub    esp,0x10
c0018bdd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018be1:	50                   	push   eax
c0018be2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018be6:	50                   	push   eax
c0018be7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018beb:	50                   	push   eax
c0018bec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bf0:	50                   	push   eax
c0018bf1:	6a 07                	push   0x7
c0018bf3:	e8 d4 fe ff ff       	call   c0018acc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bf8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bfc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c00:	0f 95 c0             	setne  al
c0018c03:	83 c4 24             	add    esp,0x24
c0018c06:	c3                   	ret    
c0018c07:	90                   	nop

c0018c08 <CPU::CPU()>:
c0018c08:	83 ec 0c             	sub    esp,0xc
c0018c0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c0f:	83 ec 08             	sub    esp,0x8
c0018c12:	68 09 bd 02 c0       	push   0xc002bd09
c0018c17:	50                   	push   eax
c0018c18:	e8 a1 b2 ff ff       	call   c0013ebe <Device::Device(char const*)>
c0018c1d:	83 c4 10             	add    esp,0x10
c0018c20:	ba 2c bf 02 c0       	mov    edx,0xc002bf2c
c0018c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c29:	89 10                	mov    DWORD PTR [eax],edx
c0018c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c2f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018c39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c3d:	05 78 01 00 00       	add    eax,0x178
c0018c42:	83 ec 0c             	sub    esp,0xc
c0018c45:	50                   	push   eax
c0018c46:	e8 11 64 ff ff       	call   c000f05c <GDT::GDT()>
c0018c4b:	83 c4 10             	add    esp,0x10
c0018c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c52:	05 7c 09 00 00       	add    eax,0x97c
c0018c57:	83 ec 0c             	sub    esp,0xc
c0018c5a:	50                   	push   eax
c0018c5b:	e8 4c 66 ff ff       	call   c000f2ac <IDT::IDT()>
c0018c60:	83 c4 10             	add    esp,0x10
c0018c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c67:	05 7c 11 00 00       	add    eax,0x117c
c0018c6c:	83 ec 0c             	sub    esp,0xc
c0018c6f:	50                   	push   eax
c0018c70:	e8 81 81 ff ff       	call   c0010df6 <TSS::TSS()>
c0018c75:	83 c4 10             	add    esp,0x10
c0018c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c7c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c87:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018c91:	90                   	nop
c0018c92:	83 c4 0c             	add    esp,0xc
c0018c95:	c3                   	ret    

c0018c96 <CPU::displayFeatures()>:
c0018c96:	c3                   	ret    
c0018c97:	90                   	nop

c0018c98 <CPU::detectFeatures()>:
c0018c98:	55                   	push   ebp
c0018c99:	57                   	push   edi
c0018c9a:	56                   	push   esi
c0018c9b:	53                   	push   ebx
c0018c9c:	83 ec 50             	sub    esp,0x50
c0018c9f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018ca3:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018cad:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018cb4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018cba:	6a 0d                	push   0xd
c0018cbc:	6a 00                	push   0x0
c0018cbe:	55                   	push   ebp
c0018cbf:	e8 8c 7a fe ff       	call   c0000750 <memset>
c0018cc4:	83 c4 10             	add    esp,0x10
c0018cc7:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0018ccc:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018cd3:	0f 84 22 09 00 00    	je     c00195fb <CPU::detectFeatures()+0x963>
c0018cd9:	83 ec 0c             	sub    esp,0xc
c0018cdc:	89 ef                	mov    edi,ebp
c0018cde:	6a 10                	push   0x10
c0018ce0:	e8 6b fe ff ff       	call   c0018b50 <CPU::cpuidCheckEDX(unsigned int)>
c0018ce5:	83 e0 01             	and    eax,0x1
c0018ce8:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ceb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cf1:	83 e0 fd             	and    eax,0xfffffffd
c0018cf4:	09 d0                	or     eax,edx
c0018cf6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cfc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018d03:	e8 48 fe ff ff       	call   c0018b50 <CPU::cpuidCheckEDX(unsigned int)>
c0018d08:	83 e0 01             	and    eax,0x1
c0018d0b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018d12:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d18:	83 e0 fb             	and    eax,0xfffffffb
c0018d1b:	09 d0                	or     eax,edx
c0018d1d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d23:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018d2a:	e8 21 fe ff ff       	call   c0018b50 <CPU::cpuidCheckEDX(unsigned int)>
c0018d2f:	83 e0 01             	and    eax,0x1
c0018d32:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018d39:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d3f:	83 e0 f7             	and    eax,0xfffffff7
c0018d42:	09 d0                	or     eax,edx
c0018d44:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d4a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018d51:	e8 fa fd ff ff       	call   c0018b50 <CPU::cpuidCheckEDX(unsigned int)>
c0018d56:	83 e0 01             	and    eax,0x1
c0018d59:	c1 e0 04             	shl    eax,0x4
c0018d5c:	88 c2                	mov    dl,al
c0018d5e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d64:	83 e0 ef             	and    eax,0xffffffef
c0018d67:	09 d0                	or     eax,edx
c0018d69:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d6f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018d76:	e8 d5 fd ff ff       	call   c0018b50 <CPU::cpuidCheckEDX(unsigned int)>
c0018d7b:	83 e0 01             	and    eax,0x1
c0018d7e:	c1 e0 05             	shl    eax,0x5
c0018d81:	88 c2                	mov    dl,al
c0018d83:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d89:	83 e0 df             	and    eax,0xffffffdf
c0018d8c:	09 d0                	or     eax,edx
c0018d8e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d94:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018d9b:	e8 b0 fd ff ff       	call   c0018b50 <CPU::cpuidCheckEDX(unsigned int)>
c0018da0:	83 e0 01             	and    eax,0x1
c0018da3:	8d 14 00             	lea    edx,[eax+eax*1]
c0018da6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018dac:	83 e0 fd             	and    eax,0xfffffffd
c0018daf:	09 d0                	or     eax,edx
c0018db1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018db7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018dbe:	e8 8d fd ff ff       	call   c0018b50 <CPU::cpuidCheckEDX(unsigned int)>
c0018dc3:	83 e0 01             	and    eax,0x1
c0018dc6:	c1 e0 06             	shl    eax,0x6
c0018dc9:	88 c2                	mov    dl,al
c0018dcb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018dd1:	83 e0 bf             	and    eax,0xffffffbf
c0018dd4:	09 d0                	or     eax,edx
c0018dd6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ddc:	58                   	pop    eax
c0018ddd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018de1:	50                   	push   eax
c0018de2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018de6:	50                   	push   eax
c0018de7:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018deb:	56                   	push   esi
c0018dec:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018df0:	50                   	push   eax
c0018df1:	6a 00                	push   0x0
c0018df3:	e8 d4 fc ff ff       	call   c0018acc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018df8:	b8 04 00 00 00       	mov    eax,0x4
c0018dfd:	89 c1                	mov    ecx,eax
c0018dff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e01:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018e07:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018e0b:	89 c1                	mov    ecx,eax
c0018e0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e0f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018e15:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018e19:	89 c1                	mov    ecx,eax
c0018e1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e1d:	83 c4 18             	add    esp,0x18
c0018e20:	68 b4 bb 02 c0       	push   0xc002bbb4
c0018e25:	55                   	push   ebp
c0018e26:	e8 6d 7a fe ff       	call   c0000898 <strcmp>
c0018e2b:	83 c4 10             	add    esp,0x10
c0018e2e:	85 c0                	test   eax,eax
c0018e30:	75 0f                	jne    c0018e41 <CPU::detectFeatures()+0x1a9>
c0018e32:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018e3c:	e9 22 02 00 00       	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c0018e41:	50                   	push   eax
c0018e42:	50                   	push   eax
c0018e43:	68 c1 bb 02 c0       	push   0xc002bbc1
c0018e48:	55                   	push   ebp
c0018e49:	e8 4a 7a fe ff       	call   c0000898 <strcmp>
c0018e4e:	83 c4 10             	add    esp,0x10
c0018e51:	85 c0                	test   eax,eax
c0018e53:	74 dd                	je     c0018e32 <CPU::detectFeatures()+0x19a>
c0018e55:	50                   	push   eax
c0018e56:	50                   	push   eax
c0018e57:	68 ce bb 02 c0       	push   0xc002bbce
c0018e5c:	55                   	push   ebp
c0018e5d:	e8 36 7a fe ff       	call   c0000898 <strcmp>
c0018e62:	83 c4 10             	add    esp,0x10
c0018e65:	85 c0                	test   eax,eax
c0018e67:	74 2a                	je     c0018e93 <CPU::detectFeatures()+0x1fb>
c0018e69:	50                   	push   eax
c0018e6a:	50                   	push   eax
c0018e6b:	68 db bb 02 c0       	push   0xc002bbdb
c0018e70:	55                   	push   ebp
c0018e71:	e8 22 7a fe ff       	call   c0000898 <strcmp>
c0018e76:	83 c4 10             	add    esp,0x10
c0018e79:	85 c0                	test   eax,eax
c0018e7b:	74 16                	je     c0018e93 <CPU::detectFeatures()+0x1fb>
c0018e7d:	50                   	push   eax
c0018e7e:	50                   	push   eax
c0018e7f:	68 e8 bb 02 c0       	push   0xc002bbe8
c0018e84:	55                   	push   ebp
c0018e85:	e8 0e 7a fe ff       	call   c0000898 <strcmp>
c0018e8a:	83 c4 10             	add    esp,0x10
c0018e8d:	85 c0                	test   eax,eax
c0018e8f:	74 48                	je     c0018ed9 <CPU::detectFeatures()+0x241>
c0018e91:	eb 0f                	jmp    c0018ea2 <CPU::detectFeatures()+0x20a>
c0018e93:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018e9d:	e9 c1 01 00 00       	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c0018ea2:	50                   	push   eax
c0018ea3:	50                   	push   eax
c0018ea4:	68 f5 bb 02 c0       	push   0xc002bbf5
c0018ea9:	55                   	push   ebp
c0018eaa:	e8 e9 79 fe ff       	call   c0000898 <strcmp>
c0018eaf:	83 c4 10             	add    esp,0x10
c0018eb2:	85 c0                	test   eax,eax
c0018eb4:	74 23                	je     c0018ed9 <CPU::detectFeatures()+0x241>
c0018eb6:	57                   	push   edi
c0018eb7:	57                   	push   edi
c0018eb8:	68 02 bc 02 c0       	push   0xc002bc02
c0018ebd:	55                   	push   ebp
c0018ebe:	e8 d5 79 fe ff       	call   c0000898 <strcmp>
c0018ec3:	83 c4 10             	add    esp,0x10
c0018ec6:	85 c0                	test   eax,eax
c0018ec8:	75 1e                	jne    c0018ee8 <CPU::detectFeatures()+0x250>
c0018eca:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018ed4:	e9 8a 01 00 00       	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c0018ed9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018ee3:	e9 7b 01 00 00       	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c0018ee8:	56                   	push   esi
c0018ee9:	56                   	push   esi
c0018eea:	68 0f bc 02 c0       	push   0xc002bc0f
c0018eef:	55                   	push   ebp
c0018ef0:	e8 a3 79 fe ff       	call   c0000898 <strcmp>
c0018ef5:	83 c4 10             	add    esp,0x10
c0018ef8:	85 c0                	test   eax,eax
c0018efa:	75 0f                	jne    c0018f0b <CPU::detectFeatures()+0x273>
c0018efc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018f06:	e9 58 01 00 00       	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c0018f0b:	51                   	push   ecx
c0018f0c:	51                   	push   ecx
c0018f0d:	68 ce bb 02 c0       	push   0xc002bbce
c0018f12:	55                   	push   ebp
c0018f13:	e8 80 79 fe ff       	call   c0000898 <strcmp>
c0018f18:	83 c4 10             	add    esp,0x10
c0018f1b:	85 c0                	test   eax,eax
c0018f1d:	75 0f                	jne    c0018f2e <CPU::detectFeatures()+0x296>
c0018f1f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018f29:	e9 35 01 00 00       	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c0018f2e:	52                   	push   edx
c0018f2f:	52                   	push   edx
c0018f30:	68 1c bc 02 c0       	push   0xc002bc1c
c0018f35:	55                   	push   ebp
c0018f36:	e8 5d 79 fe ff       	call   c0000898 <strcmp>
c0018f3b:	83 c4 10             	add    esp,0x10
c0018f3e:	85 c0                	test   eax,eax
c0018f40:	75 0f                	jne    c0018f51 <CPU::detectFeatures()+0x2b9>
c0018f42:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018f4c:	e9 12 01 00 00       	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c0018f51:	50                   	push   eax
c0018f52:	50                   	push   eax
c0018f53:	68 29 bc 02 c0       	push   0xc002bc29
c0018f58:	55                   	push   ebp
c0018f59:	e8 3a 79 fe ff       	call   c0000898 <strcmp>
c0018f5e:	83 c4 10             	add    esp,0x10
c0018f61:	85 c0                	test   eax,eax
c0018f63:	75 0f                	jne    c0018f74 <CPU::detectFeatures()+0x2dc>
c0018f65:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018f6f:	e9 ef 00 00 00       	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c0018f74:	50                   	push   eax
c0018f75:	50                   	push   eax
c0018f76:	68 36 bc 02 c0       	push   0xc002bc36
c0018f7b:	55                   	push   ebp
c0018f7c:	e8 17 79 fe ff       	call   c0000898 <strcmp>
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	85 c0                	test   eax,eax
c0018f86:	75 0f                	jne    c0018f97 <CPU::detectFeatures()+0x2ff>
c0018f88:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018f92:	e9 cc 00 00 00       	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c0018f97:	50                   	push   eax
c0018f98:	50                   	push   eax
c0018f99:	68 43 bc 02 c0       	push   0xc002bc43
c0018f9e:	55                   	push   ebp
c0018f9f:	e8 f4 78 fe ff       	call   c0000898 <strcmp>
c0018fa4:	83 c4 10             	add    esp,0x10
c0018fa7:	85 c0                	test   eax,eax
c0018fa9:	75 0f                	jne    c0018fba <CPU::detectFeatures()+0x322>
c0018fab:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018fb5:	e9 a9 00 00 00       	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c0018fba:	50                   	push   eax
c0018fbb:	50                   	push   eax
c0018fbc:	68 50 bc 02 c0       	push   0xc002bc50
c0018fc1:	55                   	push   ebp
c0018fc2:	e8 d1 78 fe ff       	call   c0000898 <strcmp>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	85 c0                	test   eax,eax
c0018fcc:	75 0f                	jne    c0018fdd <CPU::detectFeatures()+0x345>
c0018fce:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018fd8:	e9 86 00 00 00       	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c0018fdd:	50                   	push   eax
c0018fde:	50                   	push   eax
c0018fdf:	68 5d bc 02 c0       	push   0xc002bc5d
c0018fe4:	55                   	push   ebp
c0018fe5:	e8 ae 78 fe ff       	call   c0000898 <strcmp>
c0018fea:	83 c4 10             	add    esp,0x10
c0018fed:	85 c0                	test   eax,eax
c0018fef:	75 0c                	jne    c0018ffd <CPU::detectFeatures()+0x365>
c0018ff1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018ffb:	eb 66                	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c0018ffd:	50                   	push   eax
c0018ffe:	50                   	push   eax
c0018fff:	68 6a bc 02 c0       	push   0xc002bc6a
c0019004:	55                   	push   ebp
c0019005:	e8 8e 78 fe ff       	call   c0000898 <strcmp>
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	85 c0                	test   eax,eax
c001900f:	75 0c                	jne    c001901d <CPU::detectFeatures()+0x385>
c0019011:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001901b:	eb 46                	jmp    c0019063 <CPU::detectFeatures()+0x3cb>
c001901d:	57                   	push   edi
c001901e:	57                   	push   edi
c001901f:	68 77 bc 02 c0       	push   0xc002bc77
c0019024:	55                   	push   ebp
c0019025:	e8 6e 78 fe ff       	call   c0000898 <strcmp>
c001902a:	83 c4 10             	add    esp,0x10
c001902d:	85 c0                	test   eax,eax
c001902f:	74 e0                	je     c0019011 <CPU::detectFeatures()+0x379>
c0019031:	56                   	push   esi
c0019032:	56                   	push   esi
c0019033:	68 84 bc 02 c0       	push   0xc002bc84
c0019038:	55                   	push   ebp
c0019039:	e8 5a 78 fe ff       	call   c0000898 <strcmp>
c001903e:	83 c4 10             	add    esp,0x10
c0019041:	85 c0                	test   eax,eax
c0019043:	74 cc                	je     c0019011 <CPU::detectFeatures()+0x379>
c0019045:	51                   	push   ecx
c0019046:	51                   	push   ecx
c0019047:	68 91 bc 02 c0       	push   0xc002bc91
c001904c:	55                   	push   ebp
c001904d:	e8 46 78 fe ff       	call   c0000898 <strcmp>
c0019052:	83 c4 10             	add    esp,0x10
c0019055:	85 c0                	test   eax,eax
c0019057:	74 b8                	je     c0019011 <CPU::detectFeatures()+0x379>
c0019059:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019063:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019068:	0f 86 be 00 00 00    	jbe    c001912c <CPU::detectFeatures()+0x494>
c001906e:	83 ec 0c             	sub    esp,0xc
c0019071:	68 80 00 00 00       	push   0x80
c0019076:	e8 31 fb ff ff       	call   c0018bac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001907b:	83 e0 01             	and    eax,0x1
c001907e:	c1 e0 06             	shl    eax,0x6
c0019081:	88 c2                	mov    dl,al
c0019083:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019089:	83 e0 bf             	and    eax,0xffffffbf
c001908c:	09 d0                	or     eax,edx
c001908e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019094:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001909b:	e8 0c fb ff ff       	call   c0018bac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00190a0:	83 e0 01             	and    eax,0x1
c00190a3:	c1 e0 04             	shl    eax,0x4
c00190a6:	88 c2                	mov    dl,al
c00190a8:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190ae:	83 e0 ef             	and    eax,0xffffffef
c00190b1:	09 d0                	or     eax,edx
c00190b3:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190b9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00190c0:	e8 e7 fa ff ff       	call   c0018bac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00190c5:	c1 e0 07             	shl    eax,0x7
c00190c8:	88 c2                	mov    dl,al
c00190ca:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190d0:	83 e0 7f             	and    eax,0x7f
c00190d3:	09 d0                	or     eax,edx
c00190d5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190db:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00190e2:	e8 f3 fa ff ff       	call   c0018bda <CPU::cpuidCheckExtendedECX(unsigned int)>
c00190e7:	83 e0 01             	and    eax,0x1
c00190ea:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00190f1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190f7:	83 e0 f7             	and    eax,0xfffffff7
c00190fa:	09 d0                	or     eax,edx
c00190fc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019102:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019109:	e8 cc fa ff ff       	call   c0018bda <CPU::cpuidCheckExtendedECX(unsigned int)>
c001910e:	83 c4 10             	add    esp,0x10
c0019111:	83 e0 01             	and    eax,0x1
c0019114:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001911b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019121:	83 e0 fb             	and    eax,0xfffffffb
c0019124:	09 d0                	or     eax,edx
c0019126:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001912c:	83 ec 0c             	sub    esp,0xc
c001912f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019133:	50                   	push   eax
c0019134:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019138:	50                   	push   eax
c0019139:	8d 74 24 28          	lea    esi,[esp+0x28]
c001913d:	56                   	push   esi
c001913e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019142:	50                   	push   eax
c0019143:	6a 01                	push   0x1
c0019145:	e8 82 f9 ff ff       	call   c0018acc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001914a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001914e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019154:	88 ca                	mov    dl,cl
c0019156:	83 e0 f0             	and    eax,0xfffffff0
c0019159:	83 e2 0f             	and    edx,0xf
c001915c:	09 d0                	or     eax,edx
c001915e:	88 ca                	mov    dl,cl
c0019160:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019166:	c0 ea 04             	shr    dl,0x4
c0019169:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001916d:	0f b6 c2             	movzx  eax,dl
c0019170:	83 c4 20             	add    esp,0x20
c0019173:	c1 e0 06             	shl    eax,0x6
c0019176:	89 c7                	mov    edi,eax
c0019178:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001917e:	66 25 3f c0          	and    ax,0xc03f
c0019182:	09 f8                	or     eax,edi
c0019184:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001918b:	89 c8                	mov    eax,ecx
c001918d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019194:	c1 e8 08             	shr    eax,0x8
c0019197:	83 e5 3f             	and    ebp,0x3f
c001919a:	83 e0 0f             	and    eax,0xf
c001919d:	89 c7                	mov    edi,eax
c001919f:	c1 e7 06             	shl    edi,0x6
c00191a2:	09 ef                	or     edi,ebp
c00191a4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00191ab:	89 fa                	mov    edx,edi
c00191ad:	83 e5 c0             	and    ebp,0xffffffc0
c00191b0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00191b6:	88 c2                	mov    dl,al
c00191b8:	c0 ea 02             	shr    dl,0x2
c00191bb:	89 d7                	mov    edi,edx
c00191bd:	09 ef                	or     edi,ebp
c00191bf:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00191c5:	89 fa                	mov    edx,edi
c00191c7:	83 e5 cf             	and    ebp,0xffffffcf
c00191ca:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00191d0:	89 cf                	mov    edi,ecx
c00191d2:	c1 ef 0c             	shr    edi,0xc
c00191d5:	83 e7 03             	and    edi,0x3
c00191d8:	c1 e7 04             	shl    edi,0x4
c00191db:	09 ef                	or     edi,ebp
c00191dd:	3c 06                	cmp    al,0x6
c00191df:	89 fa                	mov    edx,edi
c00191e1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00191e7:	74 04                	je     c00191ed <CPU::detectFeatures()+0x555>
c00191e9:	3c 0f                	cmp    al,0xf
c00191eb:	75 5c                	jne    c0019249 <CPU::detectFeatures()+0x5b1>
c00191ed:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00191f1:	89 cf                	mov    edi,ecx
c00191f3:	c1 ef 10             	shr    edi,0x10
c00191f6:	c1 e7 04             	shl    edi,0x4
c00191f9:	09 fa                	or     edx,edi
c00191fb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0019201:	0f b6 d2             	movzx  edx,dl
c0019204:	66 81 e7 3f c0       	and    di,0xc03f
c0019209:	c1 e2 06             	shl    edx,0x6
c001920c:	09 fa                	or     edx,edi
c001920e:	3c 0f                	cmp    al,0xf
c0019210:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019217:	75 30                	jne    c0019249 <CPU::detectFeatures()+0x5b1>
c0019219:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001921f:	c1 e9 14             	shr    ecx,0x14
c0019222:	83 e0 3f             	and    eax,0x3f
c0019225:	83 c1 0f             	add    ecx,0xf
c0019228:	88 ca                	mov    dl,cl
c001922a:	c0 e9 02             	shr    cl,0x2
c001922d:	c1 e2 06             	shl    edx,0x6
c0019230:	09 d0                	or     eax,edx
c0019232:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019238:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001923e:	83 e0 c0             	and    eax,0xffffffc0
c0019241:	09 c1                	or     ecx,eax
c0019243:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019249:	83 ec 0c             	sub    esp,0xc
c001924c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019253:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019257:	50                   	push   eax
c0019258:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001925c:	55                   	push   ebp
c001925d:	56                   	push   esi
c001925e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019262:	57                   	push   edi
c0019263:	68 00 00 00 80       	push   0x80000000
c0019268:	e8 5f f8 ff ff       	call   c0018acc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001926d:	83 c4 20             	add    esp,0x20
c0019270:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019278:	76 22                	jbe    c001929c <CPU::detectFeatures()+0x604>
c001927a:	83 ec 0c             	sub    esp,0xc
c001927d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019281:	50                   	push   eax
c0019282:	55                   	push   ebp
c0019283:	56                   	push   esi
c0019284:	57                   	push   edi
c0019285:	68 01 00 00 80       	push   0x80000001
c001928a:	e8 3d f8 ff ff       	call   c0018acc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001928f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019299:	83 c4 20             	add    esp,0x20
c001929c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00192a2:	83 f8 01             	cmp    eax,0x1
c00192a5:	75 6f                	jne    c0019316 <CPU::detectFeatures()+0x67e>
c00192a7:	51                   	push   ecx
c00192a8:	51                   	push   ecx
c00192a9:	68 9d bc 02 c0       	push   0xc002bc9d
c00192ae:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00192b2:	56                   	push   esi
c00192b3:	e8 54 75 fe ff       	call   c000080c <strcpy>
c00192b8:	5f                   	pop    edi
c00192b9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192bf:	5d                   	pop    ebp
c00192c0:	66 c1 e8 06          	shr    ax,0x6
c00192c4:	0f b6 c0             	movzx  eax,al
c00192c7:	50                   	push   eax
c00192c8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192ce:	c1 e8 0e             	shr    eax,0xe
c00192d1:	0f b6 c0             	movzx  eax,al
c00192d4:	50                   	push   eax
c00192d5:	e8 9c f4 ff ff       	call   c0018776 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00192da:	5a                   	pop    edx
c00192db:	59                   	pop    ecx
c00192dc:	50                   	push   eax
c00192dd:	56                   	push   esi
c00192de:	e8 69 76 fe ff       	call   c000094c <strcat>
c00192e3:	5f                   	pop    edi
c00192e4:	5d                   	pop    ebp
c00192e5:	56                   	push   esi
c00192e6:	53                   	push   ebx
c00192e7:	e8 c4 ab ff ff       	call   c0013eb0 <Device::setName(char const*)>
c00192ec:	58                   	pop    eax
c00192ed:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00192f3:	5a                   	pop    edx
c00192f4:	68 a4 bc 02 c0       	push   0xc002bca4
c00192f9:	50                   	push   eax
c00192fa:	e8 99 75 fe ff       	call   c0000898 <strcmp>
c00192ff:	83 c4 10             	add    esp,0x10
c0019302:	85 c0                	test   eax,eax
c0019304:	0f 85 71 03 00 00    	jne    c001967b <CPU::detectFeatures()+0x9e3>
c001930a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019311:	e9 65 03 00 00       	jmp    c001967b <CPU::detectFeatures()+0x9e3>
c0019316:	83 f8 02             	cmp    eax,0x2
c0019319:	0f 85 b5 00 00 00    	jne    c00193d4 <CPU::detectFeatures()+0x73c>
c001931f:	57                   	push   edi
c0019320:	57                   	push   edi
c0019321:	68 b6 bc 02 c0       	push   0xc002bcb6
c0019326:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001932a:	56                   	push   esi
c001932b:	e8 dc 74 fe ff       	call   c000080c <strcpy>
c0019330:	5d                   	pop    ebp
c0019331:	58                   	pop    eax
c0019332:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019338:	66 c1 e8 06          	shr    ax,0x6
c001933c:	0f b6 c0             	movzx  eax,al
c001933f:	50                   	push   eax
c0019340:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019346:	c1 e8 0e             	shr    eax,0xe
c0019349:	0f b6 c0             	movzx  eax,al
c001934c:	50                   	push   eax
c001934d:	e8 90 f2 ff ff       	call   c00185e2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019352:	5a                   	pop    edx
c0019353:	59                   	pop    ecx
c0019354:	50                   	push   eax
c0019355:	56                   	push   esi
c0019356:	e8 f1 75 fe ff       	call   c000094c <strcat>
c001935b:	5f                   	pop    edi
c001935c:	5d                   	pop    ebp
c001935d:	56                   	push   esi
c001935e:	53                   	push   ebx
c001935f:	e8 4c ab ff ff       	call   c0013eb0 <Device::setName(char const*)>
c0019364:	58                   	pop    eax
c0019365:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001936b:	5a                   	pop    edx
c001936c:	68 bb bc 02 c0       	push   0xc002bcbb
c0019371:	50                   	push   eax
c0019372:	e8 21 75 fe ff       	call   c0000898 <strcmp>
c0019377:	83 c4 10             	add    esp,0x10
c001937a:	85 c0                	test   eax,eax
c001937c:	75 20                	jne    c001939e <CPU::detectFeatures()+0x706>
c001937e:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0019384:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001938a:	a8 01                	test   al,0x1
c001938c:	74 10                	je     c001939e <CPU::detectFeatures()+0x706>
c001938e:	83 e0 fe             	and    eax,0xfffffffe
c0019391:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019397:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001939e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193a4:	c1 e8 0e             	shr    eax,0xe
c00193a7:	3c 05                	cmp    al,0x5
c00193a9:	0f 85 cc 02 00 00    	jne    c001967b <CPU::detectFeatures()+0x9e3>
c00193af:	56                   	push   esi
c00193b0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00193b6:	83 e0 0f             	and    eax,0xf
c00193b9:	50                   	push   eax
c00193ba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193c0:	66 c1 e8 06          	shr    ax,0x6
c00193c4:	0f b6 c0             	movzx  eax,al
c00193c7:	50                   	push   eax
c00193c8:	6a 05                	push   0x5
c00193ca:	e8 89 f6 ff ff       	call   c0018a58 <CPU::AMD_K6_writeback(int, int, int)>
c00193cf:	e9 1f 02 00 00       	jmp    c00195f3 <CPU::detectFeatures()+0x95b>
c00193d4:	8d 50 fd             	lea    edx,[eax-0x3]
c00193d7:	83 fa 01             	cmp    edx,0x1
c00193da:	76 09                	jbe    c00193e5 <CPU::detectFeatures()+0x74d>
c00193dc:	83 f8 06             	cmp    eax,0x6
c00193df:	0f 85 91 01 00 00    	jne    c0019576 <CPU::detectFeatures()+0x8de>
c00193e5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00193eb:	c1 ea 0e             	shr    edx,0xe
c00193ee:	80 fa 05             	cmp    dl,0x5
c00193f1:	75 7b                	jne    c001946e <CPU::detectFeatures()+0x7d6>
c00193f3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00193f9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00193fe:	66 81 fa 00 01       	cmp    dx,0x100
c0019403:	75 0c                	jne    c0019411 <CPU::detectFeatures()+0x779>
c0019405:	51                   	push   ecx
c0019406:	51                   	push   ecx
c0019407:	68 c2 bc 02 c0       	push   0xc002bcc2
c001940c:	e9 dc 01 00 00       	jmp    c00195ed <CPU::detectFeatures()+0x955>
c0019411:	66 81 fa 00 02       	cmp    dx,0x200
c0019416:	75 0c                	jne    c0019424 <CPU::detectFeatures()+0x78c>
c0019418:	52                   	push   edx
c0019419:	52                   	push   edx
c001941a:	68 d5 bc 02 c0       	push   0xc002bcd5
c001941f:	e9 c9 01 00 00       	jmp    c00195ed <CPU::detectFeatures()+0x955>
c0019424:	66 81 fa 40 02       	cmp    dx,0x240
c0019429:	75 0c                	jne    c0019437 <CPU::detectFeatures()+0x79f>
c001942b:	50                   	push   eax
c001942c:	50                   	push   eax
c001942d:	68 e7 bc 02 c0       	push   0xc002bce7
c0019432:	e9 b6 01 00 00       	jmp    c00195ed <CPU::detectFeatures()+0x955>
c0019437:	83 f8 06             	cmp    eax,0x6
c001943a:	75 0c                	jne    c0019448 <CPU::detectFeatures()+0x7b0>
c001943c:	50                   	push   eax
c001943d:	50                   	push   eax
c001943e:	68 f9 bc 02 c0       	push   0xc002bcf9
c0019443:	e9 a5 01 00 00       	jmp    c00195ed <CPU::detectFeatures()+0x955>
c0019448:	83 f8 04             	cmp    eax,0x4
c001944b:	75 0c                	jne    c0019459 <CPU::detectFeatures()+0x7c1>
c001944d:	50                   	push   eax
c001944e:	50                   	push   eax
c001944f:	68 05 bd 02 c0       	push   0xc002bd05
c0019454:	e9 94 01 00 00       	jmp    c00195ed <CPU::detectFeatures()+0x955>
c0019459:	83 f8 03             	cmp    eax,0x3
c001945c:	0f 85 19 02 00 00    	jne    c001967b <CPU::detectFeatures()+0x9e3>
c0019462:	50                   	push   eax
c0019463:	50                   	push   eax
c0019464:	68 0d bd 02 c0       	push   0xc002bd0d
c0019469:	e9 7f 01 00 00       	jmp    c00195ed <CPU::detectFeatures()+0x955>
c001946e:	80 fa 06             	cmp    dl,0x6
c0019471:	0f 85 db 00 00 00    	jne    c0019552 <CPU::detectFeatures()+0x8ba>
c0019477:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001947d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019482:	66 81 fa 80 01       	cmp    dx,0x180
c0019487:	75 0c                	jne    c0019495 <CPU::detectFeatures()+0x7fd>
c0019489:	50                   	push   eax
c001948a:	50                   	push   eax
c001948b:	68 18 bd 02 c0       	push   0xc002bd18
c0019490:	e9 58 01 00 00       	jmp    c00195ed <CPU::detectFeatures()+0x955>
c0019495:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001949b:	66 f7 c1 80 ff       	test   cx,0xff80
c00194a0:	75 0c                	jne    c00194ae <CPU::detectFeatures()+0x816>
c00194a2:	50                   	push   eax
c00194a3:	50                   	push   eax
c00194a4:	68 28 bd 02 c0       	push   0xc002bd28
c00194a9:	e9 3f 01 00 00       	jmp    c00195ed <CPU::detectFeatures()+0x955>
c00194ae:	66 81 fa 40 02       	cmp    dx,0x240
c00194b3:	75 0c                	jne    c00194c1 <CPU::detectFeatures()+0x829>
c00194b5:	55                   	push   ebp
c00194b6:	55                   	push   ebp
c00194b7:	68 2f bd 02 c0       	push   0xc002bd2f
c00194bc:	e9 2c 01 00 00       	jmp    c00195ed <CPU::detectFeatures()+0x955>
c00194c1:	66 81 fa 80 02       	cmp    dx,0x280
c00194c6:	75 0c                	jne    c00194d4 <CPU::detectFeatures()+0x83c>
c00194c8:	57                   	push   edi
c00194c9:	57                   	push   edi
c00194ca:	68 38 bd 02 c0       	push   0xc002bd38
c00194cf:	e9 19 01 00 00       	jmp    c00195ed <CPU::detectFeatures()+0x955>
c00194d4:	66 81 fa 40 03       	cmp    dx,0x340
c00194d9:	74 ed                	je     c00194c8 <CPU::detectFeatures()+0x830>
c00194db:	66 81 fa c0 03       	cmp    dx,0x3c0
c00194e0:	75 0c                	jne    c00194ee <CPU::detectFeatures()+0x856>
c00194e2:	56                   	push   esi
c00194e3:	56                   	push   esi
c00194e4:	68 3f bd 02 c0       	push   0xc002bd3f
c00194e9:	e9 ff 00 00 00       	jmp    c00195ed <CPU::detectFeatures()+0x955>
c00194ee:	83 f8 06             	cmp    eax,0x6
c00194f1:	0f 84 45 ff ff ff    	je     c001943c <CPU::detectFeatures()+0x7a4>
c00194f7:	83 f8 04             	cmp    eax,0x4
c00194fa:	0f 84 4d ff ff ff    	je     c001944d <CPU::detectFeatures()+0x7b5>
c0019500:	83 f8 03             	cmp    eax,0x3
c0019503:	0f 85 72 01 00 00    	jne    c001967b <CPU::detectFeatures()+0x9e3>
c0019509:	51                   	push   ecx
c001950a:	51                   	push   ecx
c001950b:	68 48 bd 02 c0       	push   0xc002bd48
c0019510:	53                   	push   ebx
c0019511:	e8 9a a9 ff ff       	call   c0013eb0 <Device::setName(char const*)>
c0019516:	b1 c1                	mov    cl,0xc1
c0019518:	88 c8                	mov    al,cl
c001951a:	e6 22                	out    0x22,al
c001951c:	e4 23                	in     al,0x23
c001951e:	88 c2                	mov    dl,al
c0019520:	88 c8                	mov    al,cl
c0019522:	e6 22                	out    0x22,al
c0019524:	88 d0                	mov    al,dl
c0019526:	83 c8 10             	or     eax,0x10
c0019529:	e6 23                	out    0x23,al
c001952b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019532:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019535:	89 d0                	mov    eax,edx
c0019537:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001953d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019541:	40                   	inc    eax
c0019542:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019548:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001954d:	e9 a1 00 00 00       	jmp    c00195f3 <CPU::detectFeatures()+0x95b>
c0019552:	83 f8 06             	cmp    eax,0x6
c0019555:	0f 84 e1 fe ff ff    	je     c001943c <CPU::detectFeatures()+0x7a4>
c001955b:	83 f8 04             	cmp    eax,0x4
c001955e:	0f 84 e9 fe ff ff    	je     c001944d <CPU::detectFeatures()+0x7b5>
c0019564:	83 f8 03             	cmp    eax,0x3
c0019567:	0f 85 0e 01 00 00    	jne    c001967b <CPU::detectFeatures()+0x9e3>
c001956d:	52                   	push   edx
c001956e:	52                   	push   edx
c001956f:	68 53 bd 02 c0       	push   0xc002bd53
c0019574:	eb 77                	jmp    c00195ed <CPU::detectFeatures()+0x955>
c0019576:	83 f8 07             	cmp    eax,0x7
c0019579:	75 09                	jne    c0019584 <CPU::detectFeatures()+0x8ec>
c001957b:	50                   	push   eax
c001957c:	50                   	push   eax
c001957d:	68 5d bd 02 c0       	push   0xc002bd5d
c0019582:	eb 69                	jmp    c00195ed <CPU::detectFeatures()+0x955>
c0019584:	83 f8 0a             	cmp    eax,0xa
c0019587:	75 09                	jne    c0019592 <CPU::detectFeatures()+0x8fa>
c0019589:	50                   	push   eax
c001958a:	50                   	push   eax
c001958b:	68 68 bd 02 c0       	push   0xc002bd68
c0019590:	eb 5b                	jmp    c00195ed <CPU::detectFeatures()+0x955>
c0019592:	83 f8 0b             	cmp    eax,0xb
c0019595:	75 09                	jne    c00195a0 <CPU::detectFeatures()+0x908>
c0019597:	50                   	push   eax
c0019598:	50                   	push   eax
c0019599:	68 70 bd 02 c0       	push   0xc002bd70
c001959e:	eb 4d                	jmp    c00195ed <CPU::detectFeatures()+0x955>
c00195a0:	83 f8 08             	cmp    eax,0x8
c00195a3:	75 09                	jne    c00195ae <CPU::detectFeatures()+0x916>
c00195a5:	50                   	push   eax
c00195a6:	50                   	push   eax
c00195a7:	68 79 bd 02 c0       	push   0xc002bd79
c00195ac:	eb 3f                	jmp    c00195ed <CPU::detectFeatures()+0x955>
c00195ae:	83 f8 09             	cmp    eax,0x9
c00195b1:	75 09                	jne    c00195bc <CPU::detectFeatures()+0x924>
c00195b3:	50                   	push   eax
c00195b4:	50                   	push   eax
c00195b5:	68 81 bd 02 c0       	push   0xc002bd81
c00195ba:	eb 31                	jmp    c00195ed <CPU::detectFeatures()+0x955>
c00195bc:	83 f8 05             	cmp    eax,0x5
c00195bf:	75 09                	jne    c00195ca <CPU::detectFeatures()+0x932>
c00195c1:	50                   	push   eax
c00195c2:	50                   	push   eax
c00195c3:	68 89 bd 02 c0       	push   0xc002bd89
c00195c8:	eb 23                	jmp    c00195ed <CPU::detectFeatures()+0x955>
c00195ca:	83 f8 0c             	cmp    eax,0xc
c00195cd:	75 09                	jne    c00195d8 <CPU::detectFeatures()+0x940>
c00195cf:	55                   	push   ebp
c00195d0:	55                   	push   ebp
c00195d1:	68 97 bd 02 c0       	push   0xc002bd97
c00195d6:	eb 15                	jmp    c00195ed <CPU::detectFeatures()+0x955>
c00195d8:	83 f8 0d             	cmp    eax,0xd
c00195db:	75 09                	jne    c00195e6 <CPU::detectFeatures()+0x94e>
c00195dd:	57                   	push   edi
c00195de:	57                   	push   edi
c00195df:	68 a2 bd 02 c0       	push   0xc002bda2
c00195e4:	eb 07                	jmp    c00195ed <CPU::detectFeatures()+0x955>
c00195e6:	56                   	push   esi
c00195e7:	56                   	push   esi
c00195e8:	68 b6 bd 02 c0       	push   0xc002bdb6
c00195ed:	53                   	push   ebx
c00195ee:	e8 bd a8 ff ff       	call   c0013eb0 <Device::setName(char const*)>
c00195f3:	83 c4 10             	add    esp,0x10
c00195f6:	e9 80 00 00 00       	jmp    c001967b <CPU::detectFeatures()+0x9e3>
c00195fb:	51                   	push   ecx
c00195fc:	51                   	push   ecx
c00195fd:	68 02 bc 02 c0       	push   0xc002bc02
c0019602:	55                   	push   ebp
c0019603:	e8 04 72 fe ff       	call   c000080c <strcpy>
c0019608:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019612:	e8 97 6c fe ff       	call   c00002ae <is486>
c0019617:	83 c4 10             	add    esp,0x10
c001961a:	85 c0                	test   eax,eax
c001961c:	74 2b                	je     c0019649 <CPU::detectFeatures()+0x9b1>
c001961e:	52                   	push   edx
c001961f:	52                   	push   edx
c0019620:	68 c2 bd 02 c0       	push   0xc002bdc2
c0019625:	53                   	push   ebx
c0019626:	e8 85 a8 ff ff       	call   c0013eb0 <Device::setName(char const*)>
c001962b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019632:	0f 20 c0             	mov    eax,cr0
c0019635:	83 e0 14             	and    eax,0x14
c0019638:	83 c4 10             	add    esp,0x10
c001963b:	83 f8 04             	cmp    eax,0x4
c001963e:	75 1f                	jne    c001965f <CPU::detectFeatures()+0x9c7>
c0019640:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019647:	eb 32                	jmp    c001967b <CPU::detectFeatures()+0x9e3>
c0019649:	50                   	push   eax
c001964a:	50                   	push   eax
c001964b:	68 cd bd 02 c0       	push   0xc002bdcd
c0019650:	53                   	push   ebx
c0019651:	e8 5a a8 ff ff       	call   c0013eb0 <Device::setName(char const*)>
c0019656:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001965d:	eb d3                	jmp    c0019632 <CPU::detectFeatures()+0x99a>
c001965f:	e8 25 6c fe ff       	call   c0000289 <hasLegacyFPU>
c0019664:	83 e0 01             	and    eax,0x1
c0019667:	8d 14 00             	lea    edx,[eax+eax*1]
c001966a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019670:	83 e0 fd             	and    eax,0xfffffffd
c0019673:	09 d0                	or     eax,edx
c0019675:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001967b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019682:	83 c4 4c             	add    esp,0x4c
c0019685:	5b                   	pop    ebx
c0019686:	5e                   	pop    esi
c0019687:	5f                   	pop    edi
c0019688:	5d                   	pop    ebp
c0019689:	c3                   	ret    

c001968a <CPU::setupSMEP()>:
c001968a:	0f 20 e0             	mov    eax,cr4
c001968d:	0d 00 00 10 00       	or     eax,0x100000
c0019692:	0f 22 e0             	mov    cr4,eax
c0019695:	c3                   	ret    

c0019696 <CPU::setupUMIP()>:
c0019696:	0f 20 e0             	mov    eax,cr4
c0019699:	80 cc 08             	or     ah,0x8
c001969c:	0f 22 e0             	mov    cr4,eax
c001969f:	c3                   	ret    

c00196a0 <CPU::setupTSC()>:
c00196a0:	0f 20 e0             	mov    eax,cr4
c00196a3:	83 c8 04             	or     eax,0x4
c00196a6:	0f 22 e0             	mov    cr4,eax
c00196a9:	c3                   	ret    

c00196aa <CPU::setupLargePages()>:
c00196aa:	0f 20 e0             	mov    eax,cr4
c00196ad:	83 c8 10             	or     eax,0x10
c00196b0:	0f 22 e0             	mov    cr4,eax
c00196b3:	c3                   	ret    

c00196b4 <CPU::setupPAT()>:
c00196b4:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00196b9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00196c0:	74 2c                	je     c00196ee <CPU::setupPAT()+0x3a>
c00196c2:	53                   	push   ebx
c00196c3:	83 ec 10             	sub    esp,0x10
c00196c6:	68 77 02 00 00       	push   0x277
c00196cb:	50                   	push   eax
c00196cc:	e8 b1 56 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c00196d1:	83 e2 f8             	and    edx,0xfffffff8
c00196d4:	83 ca 01             	or     edx,0x1
c00196d7:	52                   	push   edx
c00196d8:	50                   	push   eax
c00196d9:	68 77 02 00 00       	push   0x277
c00196de:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c00196e4:	e8 c5 56 ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c00196e9:	83 c4 28             	add    esp,0x28
c00196ec:	5b                   	pop    ebx
c00196ed:	c3                   	ret    
c00196ee:	c3                   	ret    
c00196ef:	90                   	nop

c00196f0 <CPU::setupMTRR()>:
c00196f0:	c3                   	ret    
c00196f1:	90                   	nop

c00196f2 <CPU::setupGlobalPages()>:
c00196f2:	0f 20 e0             	mov    eax,cr4
c00196f5:	0c 80                	or     al,0x80
c00196f7:	0f 22 e0             	mov    cr4,eax
c00196fa:	c3                   	ret    
c00196fb:	90                   	nop

c00196fc <CPU::allowUsermodeDataAccess()>:
c00196fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019700:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019707:	74 03                	je     c001970c <CPU::allowUsermodeDataAccess()+0x10>
c0019709:	0f 01 cb             	stac   
c001970c:	c3                   	ret    
c001970d:	90                   	nop

c001970e <CPU::prohibitUsermodeDataAccess()>:
c001970e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019712:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019719:	74 03                	je     c001971e <CPU::prohibitUsermodeDataAccess()+0x10>
c001971b:	0f 01 ca             	clac   
c001971e:	c3                   	ret    
c001971f:	90                   	nop

c0019720 <CPU::setupSMAP()>:
c0019720:	0f 20 e0             	mov    eax,cr4
c0019723:	0d 00 00 20 00       	or     eax,0x200000
c0019728:	0f 22 e0             	mov    cr4,eax
c001972b:	eb e1                	jmp    c001970e <CPU::prohibitUsermodeDataAccess()>
c001972d:	90                   	nop

c001972e <CPU::setupFeatures()>:
c001972e:	83 ec 0c             	sub    esp,0xc
c0019731:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019735:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001973c:	74 07                	je     c0019745 <CPU::setupFeatures()+0x17>
c001973e:	52                   	push   edx
c001973f:	e8 46 ff ff ff       	call   c001968a <CPU::setupSMEP()>
c0019744:	58                   	pop    eax
c0019745:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001974c:	74 07                	je     c0019755 <CPU::setupFeatures()+0x27>
c001974e:	52                   	push   edx
c001974f:	e8 cc ff ff ff       	call   c0019720 <CPU::setupSMAP()>
c0019754:	58                   	pop    eax
c0019755:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001975c:	74 07                	je     c0019765 <CPU::setupFeatures()+0x37>
c001975e:	52                   	push   edx
c001975f:	e8 32 ff ff ff       	call   c0019696 <CPU::setupUMIP()>
c0019764:	58                   	pop    eax
c0019765:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001976c:	74 07                	je     c0019775 <CPU::setupFeatures()+0x47>
c001976e:	52                   	push   edx
c001976f:	e8 2c ff ff ff       	call   c00196a0 <CPU::setupTSC()>
c0019774:	58                   	pop    eax
c0019775:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001977c:	74 07                	je     c0019785 <CPU::setupFeatures()+0x57>
c001977e:	52                   	push   edx
c001977f:	e8 26 ff ff ff       	call   c00196aa <CPU::setupLargePages()>
c0019784:	59                   	pop    ecx
c0019785:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001978c:	74 07                	je     c0019795 <CPU::setupFeatures()+0x67>
c001978e:	52                   	push   edx
c001978f:	e8 5e ff ff ff       	call   c00196f2 <CPU::setupGlobalPages()>
c0019794:	58                   	pop    eax
c0019795:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001979c:	74 0c                	je     c00197aa <CPU::setupFeatures()+0x7c>
c001979e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00197a2:	83 c4 0c             	add    esp,0xc
c00197a5:	e9 0a ff ff ff       	jmp    c00196b4 <CPU::setupPAT()>
c00197aa:	83 c4 0c             	add    esp,0xc
c00197ad:	c3                   	ret    

c00197ae <CPU::open(int, int, void*)>:
c00197ae:	57                   	push   edi
c00197af:	56                   	push   esi
c00197b0:	53                   	push   ebx
c00197b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00197b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00197b9:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00197bf:	83 ec 0c             	sub    esp,0xc
c00197c2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00197c8:	68 d8 bd 02 c0       	push   0xc002bdd8
c00197cd:	e8 b1 60 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c00197d2:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00197d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00197db:	e8 de 58 ff ff       	call   c000f0be <GDT::setup()>
c00197e0:	c7 04 24 ea bd 02 c0 	mov    DWORD PTR [esp],0xc002bdea
c00197e7:	e8 97 60 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c00197ec:	83 c4 0c             	add    esp,0xc
c00197ef:	6a 00                	push   0x0
c00197f1:	68 ef be ad de       	push   0xdeadbeef
c00197f6:	57                   	push   edi
c00197f7:	e8 3a 76 ff ff       	call   c0010e36 <TSS::setup(unsigned long, unsigned long)>
c00197fc:	c7 04 24 fc bd 02 c0 	mov    DWORD PTR [esp],0xc002bdfc
c0019803:	e8 7b 60 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c0019808:	89 3c 24             	mov    DWORD PTR [esp],edi
c001980b:	e8 06 76 ff ff       	call   c0010e16 <TSS::flush()>
c0019810:	c7 04 24 10 be 02 c0 	mov    DWORD PTR [esp],0xc002be10
c0019817:	e8 67 60 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c001981c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019822:	89 04 24             	mov    DWORD PTR [esp],eax
c0019825:	e8 f8 5a ff ff       	call   c000f322 <IDT::setup()>
c001982a:	c7 04 24 22 be 02 c0 	mov    DWORD PTR [esp],0xc002be22
c0019831:	e8 4d 60 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c0019836:	b8 00 04 00 00       	mov    eax,0x400
c001983b:	0f 23 f8             	mov    db7,eax
c001983e:	c7 04 24 40 be 02 c0 	mov    DWORD PTR [esp],0xc002be40
c0019845:	e8 39 60 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c001984a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019854:	e8 cc 63 ff ff       	call   c000fc25 <Phys::allocatePage()>
c0019859:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001985f:	89 30                	mov    DWORD PTR [eax],esi
c0019861:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019867:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001986a:	c7 04 24 62 be 02 c0 	mov    DWORD PTR [esp],0xc002be62
c0019871:	e8 0d 60 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c0019876:	58                   	pop    eax
c0019877:	5a                   	pop    edx
c0019878:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001987e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019882:	e8 a9 85 ff ff       	call   c0011e30 <VAS::setCPUSpecific(unsigned long)>
c0019887:	c7 04 24 8a be 02 c0 	mov    DWORD PTR [esp],0xc002be8a
c001988e:	e8 f0 5f ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c0019893:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019896:	e8 fd f3 ff ff       	call   c0018c98 <CPU::detectFeatures()>
c001989b:	c7 04 24 ad be 02 c0 	mov    DWORD PTR [esp],0xc002bead
c00198a2:	e8 dc 5f ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c00198a7:	e8 5e ba ff ff       	call   c001530a <setupInterruptController()>
c00198ac:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00198b2:	c7 04 24 d1 be 02 c0 	mov    DWORD PTR [esp],0xc002bed1
c00198b9:	e8 c5 5f ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c00198be:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c00198c3:	83 e0 10             	and    eax,0x10
c00198c6:	83 f8 01             	cmp    eax,0x1
c00198c9:	19 c0                	sbb    eax,eax
c00198cb:	83 e0 46             	and    eax,0x46
c00198ce:	83 c0 1e             	add    eax,0x1e
c00198d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00198d4:	e8 1e d0 ff ff       	call   c00168f7 <setupTimer(int)>
c00198d9:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00198df:	c7 04 24 ec be 02 c0 	mov    DWORD PTR [esp],0xc002beec
c00198e6:	e8 98 5f ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c00198eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198ee:	e8 3b fe ff ff       	call   c001972e <CPU::setupFeatures()>
c00198f3:	c7 04 24 07 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf07
c00198fa:	e8 84 5f ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c00198ff:	83 c4 10             	add    esp,0x10
c0019902:	31 c0                	xor    eax,eax
c0019904:	5b                   	pop    ebx
c0019905:	5e                   	pop    esi
c0019906:	5f                   	pop    edi
c0019907:	c3                   	ret    

c0019908 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019908:	57                   	push   edi
c0019909:	56                   	push   esi
c001990a:	53                   	push   ebx
c001990b:	51                   	push   ecx
c001990c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019910:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019913:	0f 02 c0             	lar    eax,ax
c0019916:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019919:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001991d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019920:	88 ca                	mov    dl,cl
c0019922:	c0 ea 06             	shr    dl,0x6
c0019925:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019929:	89 ca                	mov    edx,ecx
c001992b:	66 c1 ea 03          	shr    dx,0x3
c001992f:	83 e2 07             	and    edx,0x7
c0019932:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019937:	88 17                	mov    BYTE PTR [edi],dl
c0019939:	0f 84 a6 01 00 00    	je     c0019ae5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001993f:	83 e1 07             	and    ecx,0x7
c0019942:	80 f9 04             	cmp    cl,0x4
c0019945:	0f 84 98 00 00 00    	je     c00199e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001994b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019950:	0f 95 c0             	setne  al
c0019953:	80 f9 05             	cmp    cl,0x5
c0019956:	0f 95 c2             	setne  dl
c0019959:	08 c2                	or     dl,al
c001995b:	74 79                	je     c00199d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001995d:	84 c9                	test   cl,cl
c001995f:	75 05                	jne    c0019966 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019961:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019964:	eb 3c                	jmp    c00199a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019966:	80 f9 01             	cmp    cl,0x1
c0019969:	75 05                	jne    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001996b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001996e:	eb 32                	jmp    c00199a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019970:	80 f9 02             	cmp    cl,0x2
c0019973:	75 05                	jne    c001997a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019975:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019978:	eb 28                	jmp    c00199a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001997a:	31 c0                	xor    eax,eax
c001997c:	80 f9 03             	cmp    cl,0x3
c001997f:	75 05                	jne    c0019986 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019981:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019984:	eb 1c                	jmp    c00199a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019986:	80 f9 05             	cmp    cl,0x5
c0019989:	75 05                	jne    c0019990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001998b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001998e:	eb 12                	jmp    c00199a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019990:	80 f9 06             	cmp    cl,0x6
c0019993:	75 05                	jne    c001999a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019995:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019998:	eb 08                	jmp    c00199a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001999a:	80 f9 07             	cmp    cl,0x7
c001999d:	75 03                	jne    c00199a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001999f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00199a2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00199a7:	75 10                	jne    c00199b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00199a9:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00199ad:	b9 03 00 00 00       	mov    ecx,0x3
c00199b2:	01 d0                	add    eax,edx
c00199b4:	e9 37 01 00 00       	jmp    c0019af0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199b9:	b9 02 00 00 00       	mov    ecx,0x2
c00199be:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00199c3:	0f 85 27 01 00 00    	jne    c0019af0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199c9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00199cc:	b9 06 00 00 00       	mov    ecx,0x6
c00199d1:	e9 1a 01 00 00       	jmp    c0019af0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199d6:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00199d9:	b9 06 00 00 00       	mov    ecx,0x6
c00199de:	e9 0f 01 00 00       	jmp    c0019af2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00199e3:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00199e6:	88 ca                	mov    dl,cl
c00199e8:	c0 ea 06             	shr    dl,0x6
c00199eb:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00199ef:	89 ca                	mov    edx,ecx
c00199f1:	66 c1 ea 03          	shr    dx,0x3
c00199f5:	83 e2 07             	and    edx,0x7
c00199f8:	80 e1 07             	and    cl,0x7
c00199fb:	75 05                	jne    c0019a02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00199fd:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019a00:	eb 4c                	jmp    c0019a4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a02:	80 f9 01             	cmp    cl,0x1
c0019a05:	75 05                	jne    c0019a0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019a07:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019a0a:	eb 42                	jmp    c0019a4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a0c:	80 f9 02             	cmp    cl,0x2
c0019a0f:	75 05                	jne    c0019a16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019a11:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019a14:	eb 38                	jmp    c0019a4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a16:	80 f9 03             	cmp    cl,0x3
c0019a19:	75 05                	jne    c0019a20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019a1b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019a1e:	eb 2e                	jmp    c0019a4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a20:	80 f9 04             	cmp    cl,0x4
c0019a23:	75 12                	jne    c0019a37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019a25:	f6 c4 60             	test   ah,0x60
c0019a28:	75 08                	jne    c0019a32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019a2a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019a2d:	8d 78 14             	lea    edi,[eax+0x14]
c0019a30:	eb 1c                	jmp    c0019a4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a32:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019a35:	eb 17                	jmp    c0019a4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a37:	80 f9 05             	cmp    cl,0x5
c0019a3a:	75 05                	jne    c0019a41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019a3c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019a3f:	eb 0d                	jmp    c0019a4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a41:	80 f9 06             	cmp    cl,0x6
c0019a44:	75 05                	jne    c0019a4b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019a46:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019a49:	eb 03                	jmp    c0019a4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a4b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019a4e:	84 d2                	test   dl,dl
c0019a50:	75 05                	jne    c0019a57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019a52:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019a55:	eb 3c                	jmp    c0019a93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a57:	80 fa 01             	cmp    dl,0x1
c0019a5a:	75 05                	jne    c0019a61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019a5c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019a5f:	eb 32                	jmp    c0019a93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a61:	80 fa 02             	cmp    dl,0x2
c0019a64:	75 05                	jne    c0019a6b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019a66:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019a69:	eb 28                	jmp    c0019a93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a6b:	80 fa 03             	cmp    dl,0x3
c0019a6e:	75 05                	jne    c0019a75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019a70:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019a73:	eb 1e                	jmp    c0019a93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a75:	31 c0                	xor    eax,eax
c0019a77:	80 fa 04             	cmp    dl,0x4
c0019a7a:	74 17                	je     c0019a93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a7c:	80 fa 05             	cmp    dl,0x5
c0019a7f:	75 05                	jne    c0019a86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019a81:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019a84:	eb 0d                	jmp    c0019a93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a86:	80 fa 06             	cmp    dl,0x6
c0019a89:	75 05                	jne    c0019a90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019a8b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019a8e:	eb 03                	jmp    c0019a93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a90:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019a93:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019a98:	0f 94 c2             	sete   dl
c0019a9b:	80 f9 05             	cmp    cl,0x5
c0019a9e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019aa2:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019aa7:	d3 e0                	shl    eax,cl
c0019aa9:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019aad:	74 0a                	je     c0019ab9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019aaf:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ab2:	b9 07 00 00 00       	mov    ecx,0x7
c0019ab7:	eb 37                	jmp    c0019af0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ab9:	01 f8                	add    eax,edi
c0019abb:	b9 03 00 00 00       	mov    ecx,0x3
c0019ac0:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ac5:	74 2b                	je     c0019af2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ac7:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019acc:	75 0d                	jne    c0019adb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019ace:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019ad2:	01 c8                	add    eax,ecx
c0019ad4:	b9 04 00 00 00       	mov    ecx,0x4
c0019ad9:	eb 17                	jmp    c0019af2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019adb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ade:	b9 07 00 00 00       	mov    ecx,0x7
c0019ae3:	eb 0d                	jmp    c0019af2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ae5:	b9 02 00 00 00       	mov    ecx,0x2
c0019aea:	b2 01                	mov    dl,0x1
c0019aec:	31 c0                	xor    eax,eax
c0019aee:	eb 02                	jmp    c0019af2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019af0:	31 d2                	xor    edx,edx
c0019af2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019af6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019af8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019afc:	88 11                	mov    BYTE PTR [ecx],dl
c0019afe:	5a                   	pop    edx
c0019aff:	5b                   	pop    ebx
c0019b00:	5e                   	pop    esi
c0019b01:	5f                   	pop    edi
c0019b02:	c3                   	ret    

c0019b03 <Krnl::smpEntry()>:
c0019b03:	eb fe                	jmp    c0019b03 <Krnl::smpEntry()>

c0019b05 <Krnl::startCPU(int)>:
c0019b05:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019b0a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b11:	0f 84 36 01 00 00    	je     c0019c4d <Krnl::startCPU(int)+0x148>
c0019b17:	53                   	push   ebx
c0019b18:	83 ec 10             	sub    esp,0x10
c0019b1b:	fa                   	cli    
c0019b1c:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c0019b22:	6a 1b                	push   0x1b
c0019b24:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0019b2a:	e8 53 52 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019b2f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019b34:	89 c3                	mov    ebx,eax
c0019b36:	58                   	pop    eax
c0019b37:	5a                   	pop    edx
c0019b38:	53                   	push   ebx
c0019b39:	68 50 bf 02 c0       	push   0xc002bf50
c0019b3e:	e8 3e 8d ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0019b43:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b51:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b5b:	c1 e0 18             	shl    eax,0x18
c0019b5e:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019b64:	83 c4 10             	add    esp,0x10
c0019b67:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019b6d:	09 c2                	or     edx,eax
c0019b6f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019b75:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019b7b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019b81:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019b87:	80 cd c5             	or     ch,0xc5
c0019b8a:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019b90:	f3 90                	pause  
c0019b92:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019b94:	0f ba e1 0c          	bt     ecx,0xc
c0019b98:	72 f6                	jb     c0019b90 <Krnl::startCPU(int)+0x8b>
c0019b9a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ba0:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ba6:	09 c1                	or     ecx,eax
c0019ba8:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019bae:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019bb4:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019bba:	80 cd 85             	or     ch,0x85
c0019bbd:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019bc3:	f3 90                	pause  
c0019bc5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019bc7:	0f ba e1 0c          	bt     ecx,0xc
c0019bcb:	72 f6                	jb     c0019bc3 <Krnl::startCPU(int)+0xbe>
c0019bcd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019bd7:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019bdd:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019be3:	09 c1                	or     ecx,eax
c0019be5:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019beb:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019bf1:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019bf7:	81 c9 02 06 00 00    	or     ecx,0x602
c0019bfd:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c03:	f3 90                	pause  
c0019c05:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c07:	0f ba e1 0c          	bt     ecx,0xc
c0019c0b:	72 f6                	jb     c0019c03 <Krnl::startCPU(int)+0xfe>
c0019c0d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c17:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c1d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c23:	09 c8                	or     eax,ecx
c0019c25:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019c2b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019c31:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019c36:	0d 02 06 00 00       	or     eax,0x602
c0019c3b:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019c41:	f3 90                	pause  
c0019c43:	8b 02                	mov    eax,DWORD PTR [edx]
c0019c45:	0f ba e0 0c          	bt     eax,0xc
c0019c49:	72 f6                	jb     c0019c41 <Krnl::startCPU(int)+0x13c>
c0019c4b:	eb fe                	jmp    c0019c4b <Krnl::startCPU(int)+0x146>
c0019c4d:	c3                   	ret    

c0019c4e <Krnl::startCPUs()>:
c0019c4e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019c53:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019c59:	88 c2                	mov    dl,al
c0019c5b:	83 e2 0a             	and    edx,0xa
c0019c5e:	80 fa 0a             	cmp    dl,0xa
c0019c61:	75 09                	jne    c0019c6c <Krnl::startCPUs()+0x1e>
c0019c63:	a8 01                	test   al,0x1
c0019c65:	74 05                	je     c0019c6c <Krnl::startCPUs()+0x1e>
c0019c67:	e9 2f 65 fe ff       	jmp    c000019b <prepareTramp>
c0019c6c:	c3                   	ret    
c0019c6d:	90                   	nop

c0019c6e <EnvVarContainer::getEnv(char const*)>:
c0019c6e:	57                   	push   edi
c0019c6f:	56                   	push   esi
c0019c70:	53                   	push   ebx
c0019c71:	31 db                	xor    ebx,ebx
c0019c73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019c77:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019c79:	7e 2b                	jle    c0019ca6 <EnvVarContainer::getEnv(char const*)+0x38>
c0019c7b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019c82:	50                   	push   eax
c0019c83:	50                   	push   eax
c0019c84:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c87:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019c8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019c8e:	e8 05 6c fe ff       	call   c0000898 <strcmp>
c0019c93:	83 c4 10             	add    esp,0x10
c0019c96:	85 c0                	test   eax,eax
c0019c98:	75 09                	jne    c0019ca3 <EnvVarContainer::getEnv(char const*)+0x35>
c0019c9a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c9d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019ca1:	eb 05                	jmp    c0019ca8 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019ca3:	43                   	inc    ebx
c0019ca4:	eb d1                	jmp    c0019c77 <EnvVarContainer::getEnv(char const*)+0x9>
c0019ca6:	31 c0                	xor    eax,eax
c0019ca8:	5b                   	pop    ebx
c0019ca9:	5e                   	pop    esi
c0019caa:	5f                   	pop    edi
c0019cab:	c3                   	ret    

c0019cac <EnvVarContainer::setEnv(char const*, char const*)>:
c0019cac:	55                   	push   ebp
c0019cad:	57                   	push   edi
c0019cae:	56                   	push   esi
c0019caf:	53                   	push   ebx
c0019cb0:	83 ec 28             	sub    esp,0x28
c0019cb3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019cb7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019cbb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019cbf:	56                   	push   esi
c0019cc0:	e8 a7 6a fe ff       	call   c000076c <strlen>
c0019cc5:	40                   	inc    eax
c0019cc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cc9:	e8 5b 5b ff ff       	call   c000f829 <malloc>
c0019cce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019cd5:	e8 92 6a fe ff       	call   c000076c <strlen>
c0019cda:	40                   	inc    eax
c0019cdb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cde:	e8 46 5b ff ff       	call   c000f829 <malloc>
c0019ce3:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ce6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cea:	e8 7d 6a fe ff       	call   c000076c <strlen>
c0019cef:	83 c4 0c             	add    esp,0xc
c0019cf2:	40                   	inc    eax
c0019cf3:	50                   	push   eax
c0019cf4:	6a 00                	push   0x0
c0019cf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019cfa:	e8 51 6a fe ff       	call   c0000750 <memset>
c0019cff:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d02:	e8 65 6a fe ff       	call   c000076c <strlen>
c0019d07:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019d0b:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d13:	89 de                	mov    esi,ebx
c0019d15:	e8 52 6a fe ff       	call   c000076c <strlen>
c0019d1a:	83 c4 0c             	add    esp,0xc
c0019d1d:	40                   	inc    eax
c0019d1e:	50                   	push   eax
c0019d1f:	6a 00                	push   0x0
c0019d21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d25:	e8 26 6a fe ff       	call   c0000750 <memset>
c0019d2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d2d:	e8 3a 6a fe ff       	call   c000076c <strlen>
c0019d32:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019d36:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d3b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019d3e:	40                   	inc    eax
c0019d3f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019d42:	c1 e0 03             	shl    eax,0x3
c0019d45:	5a                   	pop    edx
c0019d46:	59                   	pop    ecx
c0019d47:	50                   	push   eax
c0019d48:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019d4b:	e8 c5 5a ff ff       	call   c000f815 <realloc>
c0019d50:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019d54:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019d57:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019d5a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019d5e:	b9 08 00 00 00       	mov    ecx,0x8
c0019d63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d65:	83 c4 2c             	add    esp,0x2c
c0019d68:	5b                   	pop    ebx
c0019d69:	5e                   	pop    esi
c0019d6a:	5f                   	pop    edi
c0019d6b:	5d                   	pop    ebp
c0019d6c:	c3                   	ret    
c0019d6d:	90                   	nop

c0019d6e <EnvVarContainer::deleteEnv(char const*)>:
c0019d6e:	c3                   	ret    
c0019d6f:	90                   	nop

c0019d70 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019d70:	55                   	push   ebp
c0019d71:	57                   	push   edi
c0019d72:	56                   	push   esi
c0019d73:	53                   	push   ebx
c0019d74:	81 ec 38 01 00 00    	sub    esp,0x138
c0019d7a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019d81:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019d88:	68 14 01 00 00       	push   0x114
c0019d8d:	e8 97 5a ff ff       	call   c000f829 <malloc>
c0019d92:	83 c4 0c             	add    esp,0xc
c0019d95:	89 c3                	mov    ebx,eax
c0019d97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019d9a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019da1:	50                   	push   eax
c0019da2:	e8 39 90 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c0019da7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019daa:	e8 03 93 ff ff       	call   c00130b2 <File::exists()>
c0019daf:	83 c4 10             	add    esp,0x10
c0019db2:	84 c0                	test   al,al
c0019db4:	75 31                	jne    c0019de7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019db6:	50                   	push   eax
c0019db7:	50                   	push   eax
c0019db8:	6a 12                	push   0x12
c0019dba:	53                   	push   ebx
c0019dbb:	e8 84 90 ff ff       	call   c0012e44 <File::open(FileOpenMode)>
c0019dc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dc2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019dc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0019dc8:	e8 9f 69 fe ff       	call   c000076c <strlen>
c0019dcd:	5a                   	pop    edx
c0019dce:	31 d2                	xor    edx,edx
c0019dd0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019dd4:	51                   	push   ecx
c0019dd5:	56                   	push   esi
c0019dd6:	52                   	push   edx
c0019dd7:	50                   	push   eax
c0019dd8:	53                   	push   ebx
c0019dd9:	ff d7                	call   edi
c0019ddb:	83 c4 14             	add    esp,0x14
c0019dde:	53                   	push   ebx
c0019ddf:	e8 be 90 ff ff       	call   c0012ea2 <File::close()>
c0019de4:	83 c4 10             	add    esp,0x10
c0019de7:	56                   	push   esi
c0019de8:	31 f6                	xor    esi,esi
c0019dea:	68 00 01 00 00       	push   0x100
c0019def:	6a 00                	push   0x0
c0019df1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019df5:	50                   	push   eax
c0019df6:	e8 55 69 fe ff       	call   c0000750 <memset>
c0019dfb:	5f                   	pop    edi
c0019dfc:	58                   	pop    eax
c0019dfd:	6a 01                	push   0x1
c0019dff:	53                   	push   ebx
c0019e00:	e8 3f 90 ff ff       	call   c0012e44 <File::open(FileOpenMode)>
c0019e05:	83 c4 10             	add    esp,0x10
c0019e08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019e10:	83 ec 0c             	sub    esp,0xc
c0019e13:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e15:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e19:	51                   	push   ecx
c0019e1a:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019e1e:	52                   	push   edx
c0019e1f:	6a 00                	push   0x0
c0019e21:	6a 01                	push   0x1
c0019e23:	53                   	push   ebx
c0019e24:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e27:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019e2b:	83 c4 20             	add    esp,0x20
c0019e2e:	3c 0d                	cmp    al,0xd
c0019e30:	0f 84 09 01 00 00    	je     c0019f3f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019e36:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019e3b:	0f 84 ef 00 00 00    	je     c0019f30 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019e41:	3c 0a                	cmp    al,0xa
c0019e43:	74 13                	je     c0019e58 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019e45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019e4a:	74 0c                	je     c0019e58 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019e4c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019e52:	0f 8e d8 00 00 00    	jle    c0019f30 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019e58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e5c:	83 ec 0c             	sub    esp,0xc
c0019e5f:	8d 78 01             	lea    edi,[eax+0x1]
c0019e62:	57                   	push   edi
c0019e63:	e8 c1 59 ff ff       	call   c000f829 <malloc>
c0019e68:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019e6c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019e70:	8d 56 04             	lea    edx,[esi+0x4]
c0019e73:	89 14 24             	mov    DWORD PTR [esp],edx
c0019e76:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019e7a:	e8 aa 59 ff ff       	call   c000f829 <malloc>
c0019e7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019e83:	83 c4 0c             	add    esp,0xc
c0019e86:	57                   	push   edi
c0019e87:	6a 00                	push   0x0
c0019e89:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019e8d:	e8 be 68 fe ff       	call   c0000750 <memset>
c0019e92:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019e96:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019e9a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019e9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ea0:	83 c4 0c             	add    esp,0xc
c0019ea3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ea7:	52                   	push   edx
c0019ea8:	6a 00                	push   0x0
c0019eaa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019eae:	e8 9d 68 fe ff       	call   c0000750 <memset>
c0019eb3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019eb7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019ebb:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ebe:	e8 a9 68 fe ff       	call   c000076c <strlen>
c0019ec3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019ec7:	89 c1                	mov    ecx,eax
c0019ec9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ecb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ece:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019ed1:	40                   	inc    eax
c0019ed2:	83 c4 10             	add    esp,0x10
c0019ed5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019ed8:	85 d2                	test   edx,edx
c0019eda:	75 0c                	jne    c0019ee8 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019edc:	83 ec 0c             	sub    esp,0xc
c0019edf:	6a 08                	push   0x8
c0019ee1:	e8 43 59 ff ff       	call   c000f829 <malloc>
c0019ee6:	eb 0c                	jmp    c0019ef4 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019ee8:	c1 e0 03             	shl    eax,0x3
c0019eeb:	51                   	push   ecx
c0019eec:	51                   	push   ecx
c0019eed:	50                   	push   eax
c0019eee:	52                   	push   edx
c0019eef:	e8 21 59 ff ff       	call   c000f815 <realloc>
c0019ef4:	83 c4 10             	add    esp,0x10
c0019ef7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019efa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019efd:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019f00:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019f04:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019f08:	b9 08 00 00 00       	mov    ecx,0x8
c0019f0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f0f:	31 f6                	xor    esi,esi
c0019f11:	50                   	push   eax
c0019f12:	68 00 01 00 00       	push   0x100
c0019f17:	6a 00                	push   0x0
c0019f19:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019f1d:	50                   	push   eax
c0019f1e:	e8 2d 68 fe ff       	call   c0000750 <memset>
c0019f23:	83 c4 10             	add    esp,0x10
c0019f26:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019f2e:	eb 0f                	jmp    c0019f3f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f30:	3c 3d                	cmp    al,0x3d
c0019f32:	74 07                	je     c0019f3b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019f34:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019f38:	46                   	inc    esi
c0019f39:	eb 04                	jmp    c0019f3f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f3b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019f3f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019f44:	0f 85 c6 fe ff ff    	jne    c0019e10 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019f4a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019f50:	5b                   	pop    ebx
c0019f51:	5e                   	pop    esi
c0019f52:	5f                   	pop    edi
c0019f53:	5d                   	pop    ebp
c0019f54:	c3                   	ret    
c0019f55:	90                   	nop

c0019f56 <EnvVarContainer::__loadSystem()>:
c0019f56:	83 ec 10             	sub    esp,0x10
c0019f59:	68 c0 d8 02 c0       	push   0xc002d8c0
c0019f5e:	68 61 bf 02 c0       	push   0xc002bf61
c0019f63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f67:	e8 04 fe ff ff       	call   c0019d70 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019f6c:	83 c4 1c             	add    esp,0x1c
c0019f6f:	c3                   	ret    

c0019f70 <EnvVarContainer::__loadUser()>:
c0019f70:	c3                   	ret    
c0019f71:	90                   	nop

c0019f72 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019f7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f84:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019f92:	90                   	nop
c0019f93:	c3                   	ret    

c0019f94 <EnvVarContainer::~EnvVarContainer()>:
c0019f94:	83 ec 0c             	sub    esp,0xc
c0019f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019f9e:	85 c0                	test   eax,eax
c0019fa0:	74 1d                	je     c0019fbf <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fa8:	85 c0                	test   eax,eax
c0019faa:	74 13                	je     c0019fbf <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019fb3:	83 ec 0c             	sub    esp,0xc
c0019fb6:	50                   	push   eax
c0019fb7:	e8 7d 58 ff ff       	call   c000f839 <free>
c0019fbc:	83 c4 10             	add    esp,0x10
c0019fbf:	90                   	nop
c0019fc0:	83 c4 0c             	add    esp,0xc
c0019fc3:	c3                   	ret    

c0019fc4 <Krnl::getEnv(Process*, char const*)>:
c0019fc4:	53                   	push   ebx
c0019fc5:	83 ec 08             	sub    esp,0x8
c0019fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fcc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019fd0:	39 05 b0 f8 02 c0    	cmp    DWORD PTR ds:0xc002f8b0,eax
c0019fd6:	74 04                	je     c0019fdc <Krnl::getEnv(Process*, char const*)+0x18>
c0019fd8:	85 c0                	test   eax,eax
c0019fda:	75 0b                	jne    c0019fe7 <Krnl::getEnv(Process*, char const*)+0x23>
c0019fdc:	a1 94 ee 02 c0       	mov    eax,ds:0xc002ee94
c0019fe1:	85 c0                	test   eax,eax
c0019fe3:	75 19                	jne    c0019ffe <Krnl::getEnv(Process*, char const*)+0x3a>
c0019fe5:	eb 27                	jmp    c001a00e <Krnl::getEnv(Process*, char const*)+0x4a>
c0019fe7:	52                   	push   edx
c0019fe8:	52                   	push   edx
c0019fe9:	53                   	push   ebx
c0019fea:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019ff0:	e8 79 fc ff ff       	call   c0019c6e <EnvVarContainer::getEnv(char const*)>
c0019ff5:	83 c4 10             	add    esp,0x10
c0019ff8:	85 c0                	test   eax,eax
c0019ffa:	75 28                	jne    c001a024 <Krnl::getEnv(Process*, char const*)+0x60>
c0019ffc:	eb de                	jmp    c0019fdc <Krnl::getEnv(Process*, char const*)+0x18>
c0019ffe:	52                   	push   edx
c0019fff:	52                   	push   edx
c001a000:	53                   	push   ebx
c001a001:	50                   	push   eax
c001a002:	e8 67 fc ff ff       	call   c0019c6e <EnvVarContainer::getEnv(char const*)>
c001a007:	83 c4 10             	add    esp,0x10
c001a00a:	85 c0                	test   eax,eax
c001a00c:	75 16                	jne    c001a024 <Krnl::getEnv(Process*, char const*)+0x60>
c001a00e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a012:	a1 98 ee 02 c0       	mov    eax,ds:0xc002ee98
c001a017:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a01b:	83 c4 08             	add    esp,0x8
c001a01e:	5b                   	pop    ebx
c001a01f:	e9 4a fc ff ff       	jmp    c0019c6e <EnvVarContainer::getEnv(char const*)>
c001a024:	83 c4 08             	add    esp,0x8
c001a027:	5b                   	pop    ebx
c001a028:	c3                   	ret    

c001a029 <Krnl::setEnvSystem(char const*, char const*)>:
c001a029:	83 ec 10             	sub    esp,0x10
c001a02c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a030:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a034:	ff 35 98 ee 02 c0    	push   DWORD PTR ds:0xc002ee98
c001a03a:	e8 6d fc ff ff       	call   c0019cac <EnvVarContainer::setEnv(char const*, char const*)>
c001a03f:	83 c4 1c             	add    esp,0x1c
c001a042:	c3                   	ret    

c001a043 <Krnl::setEnvUser(char const*, char const*)>:
c001a043:	a1 94 ee 02 c0       	mov    eax,ds:0xc002ee94
c001a048:	85 c0                	test   eax,eax
c001a04a:	74 15                	je     c001a061 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a04c:	83 ec 10             	sub    esp,0x10
c001a04f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a053:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a057:	50                   	push   eax
c001a058:	e8 4f fc ff ff       	call   c0019cac <EnvVarContainer::setEnv(char const*, char const*)>
c001a05d:	83 c4 1c             	add    esp,0x1c
c001a060:	c3                   	ret    
c001a061:	c3                   	ret    

c001a062 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a066:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a06c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a070:	e9 37 fc ff ff       	jmp    c0019cac <EnvVarContainer::setEnv(char const*, char const*)>

c001a075 <Krnl::deleteEnvSystem(char const*)>:
c001a075:	c3                   	ret    

c001a076 <Krnl::deleteEnvUser(char const*)>:
c001a076:	c3                   	ret    

c001a077 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a077:	c3                   	ret    

c001a078 <Krnl::newProcessEnv(Process*)>:
c001a078:	83 ec 28             	sub    esp,0x28
c001a07b:	6a 0c                	push   0xc
c001a07d:	e8 a7 57 ff ff       	call   c000f829 <malloc>
c001a082:	5a                   	pop    edx
c001a083:	59                   	pop    ecx
c001a084:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a088:	50                   	push   eax
c001a089:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a08d:	e8 e0 fe ff ff       	call   c0019f72 <EnvVarContainer::EnvVarContainer(Process*)>
c001a092:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a096:	83 c4 2c             	add    esp,0x2c
c001a099:	c3                   	ret    

c001a09a <Krnl::copyProcessEnv(Process*, Process*)>:
c001a09a:	57                   	push   edi
c001a09b:	56                   	push   esi
c001a09c:	53                   	push   ebx
c001a09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a1:	83 ec 0c             	sub    esp,0xc
c001a0a4:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a0aa:	6a 0c                	push   0xc
c001a0ac:	e8 78 57 ff ff       	call   c000f829 <malloc>
c001a0b1:	89 c3                	mov    ebx,eax
c001a0b3:	58                   	pop    eax
c001a0b4:	5a                   	pop    edx
c001a0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0b9:	53                   	push   ebx
c001a0ba:	e8 b3 fe ff ff       	call   c0019f72 <EnvVarContainer::EnvVarContainer(Process*)>
c001a0bf:	8b 07                	mov    eax,DWORD PTR [edi]
c001a0c1:	89 03                	mov    DWORD PTR [ebx],eax
c001a0c3:	c1 e0 03             	shl    eax,0x3
c001a0c6:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0c9:	e8 5b 57 ff ff       	call   c000f829 <malloc>
c001a0ce:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a0d1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a0d3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a0d6:	c1 e1 03             	shl    ecx,0x3
c001a0d9:	89 c7                	mov    edi,eax
c001a0db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a0dd:	83 c4 10             	add    esp,0x10
c001a0e0:	89 d8                	mov    eax,ebx
c001a0e2:	5b                   	pop    ebx
c001a0e3:	5e                   	pop    esi
c001a0e4:	5f                   	pop    edi
c001a0e5:	c3                   	ret    

c001a0e6 <Krnl::loadSystemEnv()>:
c001a0e6:	53                   	push   ebx
c001a0e7:	83 ec 14             	sub    esp,0x14
c001a0ea:	6a 0c                	push   0xc
c001a0ec:	e8 38 57 ff ff       	call   c000f829 <malloc>
c001a0f1:	89 c3                	mov    ebx,eax
c001a0f3:	58                   	pop    eax
c001a0f4:	5a                   	pop    edx
c001a0f5:	ff 35 b0 f8 02 c0    	push   DWORD PTR ds:0xc002f8b0
c001a0fb:	53                   	push   ebx
c001a0fc:	e8 71 fe ff ff       	call   c0019f72 <EnvVarContainer::EnvVarContainer(Process*)>
c001a101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a104:	89 1d 98 ee 02 c0    	mov    DWORD PTR ds:0xc002ee98,ebx
c001a10a:	e8 47 fe ff ff       	call   c0019f56 <EnvVarContainer::__loadSystem()>
c001a10f:	83 c4 18             	add    esp,0x18
c001a112:	5b                   	pop    ebx
c001a113:	c3                   	ret    

c001a114 <Krnl::loadUserEnv()>:
c001a114:	53                   	push   ebx
c001a115:	83 ec 14             	sub    esp,0x14
c001a118:	6a 0c                	push   0xc
c001a11a:	e8 0a 57 ff ff       	call   c000f829 <malloc>
c001a11f:	89 c3                	mov    ebx,eax
c001a121:	58                   	pop    eax
c001a122:	5a                   	pop    edx
c001a123:	ff 35 b0 f8 02 c0    	push   DWORD PTR ds:0xc002f8b0
c001a129:	53                   	push   ebx
c001a12a:	e8 43 fe ff ff       	call   c0019f72 <EnvVarContainer::EnvVarContainer(Process*)>
c001a12f:	89 1d 94 ee 02 c0    	mov    DWORD PTR ds:0xc002ee94,ebx
c001a135:	83 c4 18             	add    esp,0x18
c001a138:	5b                   	pop    ebx
c001a139:	c3                   	ret    

c001a13a <Krnl::flushEnv()>:
c001a13a:	c3                   	ret    

c001a13b <Krnl::getProcessTotalEnvCount(Process*)>:
c001a13b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a13f:	8b 15 94 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee94
c001a145:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a14b:	a1 98 ee 02 c0       	mov    eax,ds:0xc002ee98
c001a150:	8b 00                	mov    eax,DWORD PTR [eax]
c001a152:	03 01                	add    eax,DWORD PTR [ecx]
c001a154:	85 d2                	test   edx,edx
c001a156:	74 02                	je     c001a15a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a158:	03 02                	add    eax,DWORD PTR [edx]
c001a15a:	c3                   	ret    

c001a15b <Krnl::getProcessEnvPair(Process*, int)>:
c001a15b:	57                   	push   edi
c001a15c:	56                   	push   esi
c001a15d:	8b 35 94 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee94
c001a163:	53                   	push   ebx
c001a164:	85 f6                	test   esi,esi
c001a166:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a16a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a16e:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a174:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a178:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a17a:	75 16                	jne    c001a192 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001a17c:	39 c2                	cmp    edx,eax
c001a17e:	7c 16                	jl     c001a196 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a180:	8b 0d 98 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee98
c001a186:	8b 31                	mov    esi,DWORD PTR [ecx]
c001a188:	01 c6                	add    esi,eax
c001a18a:	39 d6                	cmp    esi,edx
c001a18c:	7e 3c                	jle    c001a1ca <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a18e:	29 c2                	sub    edx,eax
c001a190:	eb 04                	jmp    c001a196 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a192:	39 c2                	cmp    edx,eax
c001a194:	7d 05                	jge    c001a19b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001a196:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a199:	eb 20                	jmp    c001a1bb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001a19b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a19d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001a1a0:	39 d1                	cmp    ecx,edx
c001a1a2:	7e 04                	jle    c001a1a8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001a1a4:	29 c2                	sub    edx,eax
c001a1a6:	eb 10                	jmp    c001a1b8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001a1a8:	8b 35 98 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee98
c001a1ae:	03 0e                	add    ecx,DWORD PTR [esi]
c001a1b0:	39 d1                	cmp    ecx,edx
c001a1b2:	7e 16                	jle    c001a1ca <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a1b4:	29 c2                	sub    edx,eax
c001a1b6:	29 fa                	sub    edx,edi
c001a1b8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a1bb:	8d 14 d0             	lea    edx,[eax+edx*8]
c001a1be:	8b 02                	mov    eax,DWORD PTR [edx]
c001a1c0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001a1c3:	89 03                	mov    DWORD PTR [ebx],eax
c001a1c5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a1c8:	eb 1d                	jmp    c001a1e7 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001a1ca:	83 ec 0c             	sub    esp,0xc
c001a1cd:	68 83 bf 02 c0       	push   0xc002bf83
c001a1d2:	e8 18 00 00 00       	call   c001a1ef <Krnl::panic(char const*)>
c001a1d7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a1dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a1e4:	83 c4 10             	add    esp,0x10
c001a1e7:	89 d8                	mov    eax,ebx
c001a1e9:	5b                   	pop    ebx
c001a1ea:	5e                   	pop    esi
c001a1eb:	5f                   	pop    edi
c001a1ec:	c2 04 00             	ret    0x4

c001a1ef <Krnl::panic(char const*)>:
c001a1ef:	55                   	push   ebp
c001a1f0:	89 e5                	mov    ebp,esp
c001a1f2:	53                   	push   ebx
c001a1f3:	83 ec 10             	sub    esp,0x10
c001a1f6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a1f9:	fa                   	cli    
c001a1fa:	c6 05 a4 ee 02 c0 01 	mov    BYTE PTR ds:0xc002eea4,0x1
c001a201:	53                   	push   ebx
c001a202:	e8 7c 56 ff ff       	call   c000f883 <Krnl::setBootMessage(char const*)>
c001a207:	58                   	pop    eax
c001a208:	c6 05 c0 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d2c0,0x0
c001a20f:	5a                   	pop    edx
c001a210:	53                   	push   ebx
c001a211:	68 9d bf 02 c0       	push   0xc002bf9d
c001a216:	e8 66 86 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001a21b:	59                   	pop    ecx
c001a21c:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a221:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a227:	e8 b7 63 ff ff       	call   c00105e3 <setActiveTerminal(VgaText*)>
c001a22c:	83 c4 0c             	add    esp,0xc
c001a22f:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a234:	6a 01                	push   0x1
c001a236:	6a 0f                	push   0xf
c001a238:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a23e:	e8 ff 61 ff ff       	call   c0010442 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a243:	58                   	pop    eax
c001a244:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a249:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a24f:	e8 10 67 ff ff       	call   c0010964 <VgaText::clearScreen()>
c001a254:	58                   	pop    eax
c001a255:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a25a:	5a                   	pop    edx
c001a25b:	68 b6 bf 02 c0       	push   0xc002bfb6
c001a260:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a266:	e8 85 68 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a26b:	59                   	pop    ecx
c001a26c:	58                   	pop    eax
c001a26d:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a272:	68 5c c0 02 c0       	push   0xc002c05c
c001a277:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a27d:	e8 6e 68 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a282:	58                   	pop    eax
c001a283:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a288:	5a                   	pop    edx
c001a289:	68 d2 bf 02 c0       	push   0xc002bfd2
c001a28e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a294:	e8 57 68 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a299:	59                   	pop    ecx
c001a29a:	58                   	pop    eax
c001a29b:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a2a0:	53                   	push   ebx
c001a2a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2a7:	e8 44 68 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a2ac:	58                   	pop    eax
c001a2ad:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a2b2:	5a                   	pop    edx
c001a2b3:	68 f2 bf 02 c0       	push   0xc002bff2
c001a2b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2be:	e8 2d 68 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a2c3:	a1 a0 ee 02 c0       	mov    eax,ds:0xc002eea0
c001a2c8:	83 c4 10             	add    esp,0x10
c001a2cb:	85 c0                	test   eax,eax
c001a2cd:	74 02                	je     c001a2d1 <Krnl::panic(char const*)+0xe2>
c001a2cf:	ff d0                	call   eax
c001a2d1:	83 ec 0c             	sub    esp,0xc
c001a2d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a2d7:	e8 8f 30 00 00       	call   c001d36b <Thr::getDriverNameFromAddress(unsigned long)>
c001a2dc:	83 c4 10             	add    esp,0x10
c001a2df:	89 c3                	mov    ebx,eax
c001a2e1:	85 c0                	test   eax,eax
c001a2e3:	0f 84 4e 02 00 00    	je     c001a537 <Krnl::panic(char const*)+0x348>
c001a2e9:	83 ec 08             	sub    esp,0x8
c001a2ec:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a2f1:	68 98 c0 02 c0       	push   0xc002c098
c001a2f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2fc:	e8 ef 67 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a301:	58                   	pop    eax
c001a302:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a307:	5a                   	pop    edx
c001a308:	68 d2 bf 02 c0       	push   0xc002bfd2
c001a30d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a313:	e8 d8 67 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a318:	59                   	pop    ecx
c001a319:	58                   	pop    eax
c001a31a:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a31f:	53                   	push   ebx
c001a320:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a326:	e8 c5 67 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a32b:	83 c4 10             	add    esp,0x10
c001a32e:	83 ec 08             	sub    esp,0x8
c001a331:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a336:	68 f1 bf 02 c0       	push   0xc002bff1
c001a33b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a341:	e8 aa 67 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a346:	58                   	pop    eax
c001a347:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a34c:	5a                   	pop    edx
c001a34d:	68 f0 c0 02 c0       	push   0xc002c0f0
c001a352:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a358:	e8 93 67 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a35d:	59                   	pop    ecx
c001a35e:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a363:	5b                   	pop    ebx
c001a364:	68 30 c1 02 c0       	push   0xc002c130
c001a369:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a36f:	e8 7c 67 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a374:	58                   	pop    eax
c001a375:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a37a:	5a                   	pop    edx
c001a37b:	68 dd bf 02 c0       	push   0xc002bfdd
c001a380:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a386:	e8 65 67 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a38b:	59                   	pop    ecx
c001a38c:	5b                   	pop    ebx
c001a38d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a390:	68 f5 bf 02 c0       	push   0xc002bff5
c001a395:	e8 e7 84 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001a39a:	58                   	pop    eax
c001a39b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a39e:	5a                   	pop    edx
c001a39f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a3a2:	68 fe bf 02 c0       	push   0xc002bffe
c001a3a7:	e8 d5 84 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001a3ac:	59                   	pop    ecx
c001a3ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3b0:	5b                   	pop    ebx
c001a3b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3b3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a3b6:	68 07 c0 02 c0       	push   0xc002c007
c001a3bb:	e8 c1 84 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001a3c0:	58                   	pop    eax
c001a3c1:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a3c6:	5a                   	pop    edx
c001a3c7:	68 74 c1 02 c0       	push   0xc002c174
c001a3cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3d2:	e8 19 67 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a3d7:	59                   	pop    ecx
c001a3d8:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a3dd:	5b                   	pop    ebx
c001a3de:	68 10 c0 02 c0       	push   0xc002c010
c001a3e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3e9:	e8 02 67 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a3ee:	0f 20 c0             	mov    eax,cr0
c001a3f1:	5a                   	pop    edx
c001a3f2:	59                   	pop    ecx
c001a3f3:	50                   	push   eax
c001a3f4:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a3f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3ff:	e8 a6 66 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c001a404:	5b                   	pop    ebx
c001a405:	58                   	pop    eax
c001a406:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a40b:	68 1a c0 02 c0       	push   0xc002c01a
c001a410:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a416:	e8 d5 66 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a41b:	0f 20 d0             	mov    eax,cr2
c001a41e:	5a                   	pop    edx
c001a41f:	59                   	pop    ecx
c001a420:	50                   	push   eax
c001a421:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a426:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a42c:	e8 79 66 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c001a431:	5b                   	pop    ebx
c001a432:	58                   	pop    eax
c001a433:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a438:	68 24 c0 02 c0       	push   0xc002c024
c001a43d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a443:	e8 a8 66 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a448:	0f 20 d8             	mov    eax,cr3
c001a44b:	5a                   	pop    edx
c001a44c:	59                   	pop    ecx
c001a44d:	50                   	push   eax
c001a44e:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a453:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a459:	e8 4c 66 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c001a45e:	5b                   	pop    ebx
c001a45f:	58                   	pop    eax
c001a460:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a465:	68 37 c0 02 c0       	push   0xc002c037
c001a46a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a470:	e8 7b 66 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a475:	0f 20 e0             	mov    eax,cr4
c001a478:	5a                   	pop    edx
c001a479:	59                   	pop    ecx
c001a47a:	50                   	push   eax
c001a47b:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a480:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a486:	e8 1f 66 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c001a48b:	5b                   	pop    ebx
c001a48c:	58                   	pop    eax
c001a48d:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a492:	68 41 c0 02 c0       	push   0xc002c041
c001a497:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a49d:	e8 4e 66 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a4a2:	5a                   	pop    edx
c001a4a3:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a4a8:	59                   	pop    ecx
c001a4a9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a4af:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4b2:	50                   	push   eax
c001a4b3:	e8 f2 65 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c001a4b8:	5b                   	pop    ebx
c001a4b9:	58                   	pop    eax
c001a4ba:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a4bf:	68 58 c0 02 c0       	push   0xc002c058
c001a4c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4ca:	e8 21 66 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a4cf:	5a                   	pop    edx
c001a4d0:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a4d5:	59                   	pop    ecx
c001a4d6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a4dc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a4df:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a4e2:	50                   	push   eax
c001a4e3:	e8 c2 65 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c001a4e8:	5b                   	pop    ebx
c001a4e9:	58                   	pop    eax
c001a4ea:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a4ef:	68 58 c0 02 c0       	push   0xc002c058
c001a4f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4fa:	e8 f1 65 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a4ff:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a504:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a507:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a50d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a50f:	59                   	pop    ecx
c001a510:	5b                   	pop    ebx
c001a511:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a514:	50                   	push   eax
c001a515:	e8 90 65 ff ff       	call   c0010aaa <VgaText::putx(unsigned int)>
c001a51a:	83 c4 10             	add    esp,0x10
c001a51d:	b2 fe                	mov    dl,0xfe
c001a51f:	e4 60                	in     al,0x60
c001a521:	3c 1c                	cmp    al,0x1c
c001a523:	74 04                	je     c001a529 <Krnl::panic(char const*)+0x33a>
c001a525:	3c 5a                	cmp    al,0x5a
c001a527:	75 f6                	jne    c001a51f <Krnl::panic(char const*)+0x330>
c001a529:	e4 64                	in     al,0x64
c001a52b:	a8 02                	test   al,0x2
c001a52d:	75 fa                	jne    c001a529 <Krnl::panic(char const*)+0x33a>
c001a52f:	88 d0                	mov    al,dl
c001a531:	e6 64                	out    0x64,al
c001a533:	fa                   	cli    
c001a534:	f4                   	hlt    
c001a535:	eb e8                	jmp    c001a51f <Krnl::panic(char const*)+0x330>
c001a537:	50                   	push   eax
c001a538:	50                   	push   eax
c001a539:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a53e:	68 c4 c0 02 c0       	push   0xc002c0c4
c001a543:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a549:	e8 a2 65 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a54e:	58                   	pop    eax
c001a54f:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a554:	5a                   	pop    edx
c001a555:	68 d2 bf 02 c0       	push   0xc002bfd2
c001a55a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a560:	e8 8b 65 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a565:	59                   	pop    ecx
c001a566:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a56b:	5b                   	pop    ebx
c001a56c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a56f:	83 c0 0c             	add    eax,0xc
c001a572:	50                   	push   eax
c001a573:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001a578:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a57e:	e8 6d 65 ff ff       	call   c0010af0 <VgaText::puts(char const*)>
c001a583:	83 c4 10             	add    esp,0x10
c001a586:	e9 a3 fd ff ff       	jmp    c001a32e <Krnl::panic(char const*)+0x13f>

c001a58b <Net::switchEndian16(unsigned short)>:
c001a58b:	83 ec 04             	sub    esp,0x4
c001a58e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a592:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a596:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a59a:	c1 f8 08             	sar    eax,0x8
c001a59d:	89 c2                	mov    edx,eax
c001a59f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a5a3:	c1 e0 08             	shl    eax,0x8
c001a5a6:	09 d0                	or     eax,edx
c001a5a8:	83 c4 04             	add    esp,0x4
c001a5ab:	c3                   	ret    

c001a5ac <Net::switchEndian32(unsigned int)>:
c001a5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5b0:	c1 e8 18             	shr    eax,0x18
c001a5b3:	89 c2                	mov    edx,eax
c001a5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5b9:	c1 e0 08             	shl    eax,0x8
c001a5bc:	25 00 00 ff 00       	and    eax,0xff0000
c001a5c1:	09 c2                	or     edx,eax
c001a5c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5c7:	c1 e8 08             	shr    eax,0x8
c001a5ca:	25 00 ff 00 00       	and    eax,0xff00
c001a5cf:	09 c2                	or     edx,eax
c001a5d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5d5:	c1 e0 18             	shl    eax,0x18
c001a5d8:	09 d0                	or     eax,edx
c001a5da:	c3                   	ret    

c001a5db <Net::crc32Calc(unsigned char*, int)>:
c001a5db:	83 ec 10             	sub    esp,0x10
c001a5de:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a5e3:	75 07                	jne    c001a5ec <Net::crc32Calc(unsigned char*, int)+0x11>
c001a5e5:	b8 00 00 00 00       	mov    eax,0x0
c001a5ea:	eb 7c                	jmp    c001a668 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a5ec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a5f1:	7f 07                	jg     c001a5fa <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a5f3:	b8 00 00 00 00       	mov    eax,0x0
c001a5f8:	eb 6e                	jmp    c001a668 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a5fa:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a602:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a60a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a60e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a612:	7d 4e                	jge    c001a662 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a618:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a61c:	01 d0                	add    eax,edx
c001a61e:	8a 00                	mov    al,BYTE PTR [eax]
c001a620:	0f b6 c0             	movzx  eax,al
c001a623:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a627:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a62f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a634:	7f 26                	jg     c001a65c <Net::crc32Calc(unsigned char*, int)+0x81>
c001a636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a63a:	83 e0 01             	and    eax,0x1
c001a63d:	74 0d                	je     c001a64c <Net::crc32Calc(unsigned char*, int)+0x71>
c001a63f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a643:	d1 e8                	shr    eax,1
c001a645:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a64a:	eb 06                	jmp    c001a652 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a650:	d1 e8                	shr    eax,1
c001a652:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a656:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a65a:	eb d3                	jmp    c001a62f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a65c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a660:	eb a8                	jmp    c001a60a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a666:	f7 d0                	not    eax
c001a668:	83 c4 10             	add    esp,0x10
c001a66b:	c3                   	ret    

c001a66c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a66c:	57                   	push   edi
c001a66d:	56                   	push   esi
c001a66e:	53                   	push   ebx
c001a66f:	83 ec 60             	sub    esp,0x60
c001a672:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a679:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a67d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a685:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a68a:	7f 1a                	jg     c001a6a6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a68c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a693:	8d 50 01             	lea    edx,[eax+0x1]
c001a696:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a69d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a6a0:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a6a4:	eb df                	jmp    c001a685 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a6a6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6ad:	8d 50 01             	lea    edx,[eax+0x1]
c001a6b0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a6b7:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a6ba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a6c5:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a6c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6cd:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a6d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a6d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a6e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6e9:	89 c6                	mov    esi,eax
c001a6eb:	89 d7                	mov    edi,edx
c001a6ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6ef:	89 c8                	mov    eax,ecx
c001a6f1:	89 fa                	mov    edx,edi
c001a6f3:	89 f3                	mov    ebx,esi
c001a6f5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a6f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a6fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a700:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a708:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a70f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a713:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a717:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a71b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a723:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a727:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a72b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a72f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a733:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a737:	89 c6                	mov    esi,eax
c001a739:	89 d7                	mov    edi,edx
c001a73b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a73d:	89 c8                	mov    eax,ecx
c001a73f:	89 fa                	mov    edx,edi
c001a741:	89 f3                	mov    ebx,esi
c001a743:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a747:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a74b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a74f:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a757:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a75e:	0f b7 c0             	movzx  eax,ax
c001a761:	c1 f8 08             	sar    eax,0x8
c001a764:	89 c1                	mov    ecx,eax
c001a766:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a76d:	8d 50 01             	lea    edx,[eax+0x1]
c001a770:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a777:	88 ca                	mov    dl,cl
c001a779:	88 10                	mov    BYTE PTR [eax],dl
c001a77b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a782:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a789:	8d 48 01             	lea    ecx,[eax+0x1]
c001a78c:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a793:	88 10                	mov    BYTE PTR [eax],dl
c001a795:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a799:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a79d:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a7a4:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a7a8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a7ac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a7b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a7b4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a7b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a7bc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a7c0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a7c4:	89 c6                	mov    esi,eax
c001a7c6:	89 d7                	mov    edi,edx
c001a7c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7ca:	89 c8                	mov    eax,ecx
c001a7cc:	89 fa                	mov    edx,edi
c001a7ce:	89 f3                	mov    ebx,esi
c001a7d0:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a7d4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a7d8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a7dc:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a7e0:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a7e7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7ee:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a7f2:	50                   	push   eax
c001a7f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a7f7:	e8 df fd ff ff       	call   c001a5db <Net::crc32Calc(unsigned char*, int)>
c001a7fc:	83 c4 08             	add    esp,0x8
c001a7ff:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a803:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a807:	c1 e8 18             	shr    eax,0x18
c001a80a:	89 c1                	mov    ecx,eax
c001a80c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a813:	8d 50 01             	lea    edx,[eax+0x1]
c001a816:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a81d:	88 ca                	mov    dl,cl
c001a81f:	88 10                	mov    BYTE PTR [eax],dl
c001a821:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a825:	c1 e8 10             	shr    eax,0x10
c001a828:	89 c1                	mov    ecx,eax
c001a82a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a831:	8d 50 01             	lea    edx,[eax+0x1]
c001a834:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a83b:	88 ca                	mov    dl,cl
c001a83d:	88 10                	mov    BYTE PTR [eax],dl
c001a83f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a843:	c1 e8 08             	shr    eax,0x8
c001a846:	89 c1                	mov    ecx,eax
c001a848:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a84f:	8d 50 01             	lea    edx,[eax+0x1]
c001a852:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a859:	88 ca                	mov    dl,cl
c001a85b:	88 10                	mov    BYTE PTR [eax],dl
c001a85d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a864:	8d 50 01             	lea    edx,[eax+0x1]
c001a867:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a86e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a872:	88 10                	mov    BYTE PTR [eax],dl
c001a874:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a878:	83 c4 60             	add    esp,0x60
c001a87b:	5b                   	pop    ebx
c001a87c:	5e                   	pop    esi
c001a87d:	5f                   	pop    edi
c001a87e:	c3                   	ret    

c001a87f <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a87f:	57                   	push   edi
c001a880:	56                   	push   esi
c001a881:	53                   	push   ebx
c001a882:	83 ec 70             	sub    esp,0x70
c001a885:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a88c:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a890:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a898:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a89f:	83 c0 0e             	add    eax,0xe
c001a8a2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a8a6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a8b1:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a8b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8bd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a8c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a8c9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a8cd:	89 c6                	mov    esi,eax
c001a8cf:	89 d7                	mov    edi,edx
c001a8d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8d3:	89 c8                	mov    eax,ecx
c001a8d5:	89 fa                	mov    edx,edi
c001a8d7:	89 f3                	mov    ebx,esi
c001a8d9:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a8dd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a8e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a8e5:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a8ed:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a8f4:	83 c0 08             	add    eax,0x8
c001a8f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a8fb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a902:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a906:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a90e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a912:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a916:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a91a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a91e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a922:	89 c6                	mov    esi,eax
c001a924:	89 d7                	mov    edi,edx
c001a926:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a928:	89 c8                	mov    eax,ecx
c001a92a:	89 fa                	mov    edx,edi
c001a92c:	89 f3                	mov    ebx,esi
c001a92e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a932:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a93a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a942:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a949:	8d 50 01             	lea    edx,[eax+0x1]
c001a94c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a953:	8a 00                	mov    al,BYTE PTR [eax]
c001a955:	0f b6 c0             	movzx  eax,al
c001a958:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a95d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a964:	8d 50 01             	lea    edx,[eax+0x1]
c001a967:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a96e:	8a 00                	mov    al,BYTE PTR [eax]
c001a970:	0f b6 c0             	movzx  eax,al
c001a973:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a978:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a97d:	c1 e0 08             	shl    eax,0x8
c001a980:	89 c2                	mov    edx,eax
c001a982:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a986:	09 d0                	or     eax,edx
c001a988:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a98f:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a993:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a99b:	75 46                	jne    c001a9e3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a99d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9a7:	66 3d dc 05          	cmp    ax,0x5dc
c001a9ab:	77 16                	ja     c001a9c3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a9ad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9b7:	0f b7 c0             	movzx  eax,ax
c001a9ba:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a9c1:	eb 20                	jmp    c001a9e3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a9c3:	83 ec 0c             	sub    esp,0xc
c001a9c6:	68 9c c1 02 c0       	push   0xc002c19c
c001a9cb:	e8 b1 7e ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001a9d0:	83 c4 10             	add    esp,0x10
c001a9d3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9da:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a9de:	e9 17 01 00 00       	jmp    c001aafa <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a9e3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9ea:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a9f1:	8b 12                	mov    edx,DWORD PTR [edx]
c001a9f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a9f7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a9fe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001aa02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aa06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa12:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aa1a:	89 c6                	mov    esi,eax
c001aa1c:	89 d7                	mov    edi,edx
c001aa1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa20:	89 c8                	mov    eax,ecx
c001aa22:	89 fa                	mov    edx,edi
c001aa24:	89 f3                	mov    ebx,esi
c001aa26:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001aa2a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aa2e:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa31:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa38:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001aa3f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa46:	8d 50 01             	lea    edx,[eax+0x1]
c001aa49:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa50:	8a 00                	mov    al,BYTE PTR [eax]
c001aa52:	0f b6 c0             	movzx  eax,al
c001aa55:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001aa59:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa60:	8d 50 01             	lea    edx,[eax+0x1]
c001aa63:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa6a:	8a 00                	mov    al,BYTE PTR [eax]
c001aa6c:	0f b6 c0             	movzx  eax,al
c001aa6f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001aa73:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa7a:	8d 50 01             	lea    edx,[eax+0x1]
c001aa7d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa84:	8a 00                	mov    al,BYTE PTR [eax]
c001aa86:	0f b6 c0             	movzx  eax,al
c001aa89:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001aa8d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa94:	8d 50 01             	lea    edx,[eax+0x1]
c001aa97:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa9e:	8a 00                	mov    al,BYTE PTR [eax]
c001aaa0:	0f b6 c0             	movzx  eax,al
c001aaa3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001aaa7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001aaab:	c1 e0 18             	shl    eax,0x18
c001aaae:	89 c2                	mov    edx,eax
c001aab0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001aab4:	c1 e0 10             	shl    eax,0x10
c001aab7:	09 c2                	or     edx,eax
c001aab9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aabd:	c1 e0 08             	shl    eax,0x8
c001aac0:	09 d0                	or     eax,edx
c001aac2:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001aac6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001aaca:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aad1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001aad5:	83 e8 04             	sub    eax,0x4
c001aad8:	83 ec 08             	sub    esp,0x8
c001aadb:	50                   	push   eax
c001aadc:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001aae0:	e8 f6 fa ff ff       	call   c001a5db <Net::crc32Calc(unsigned char*, int)>
c001aae5:	83 c4 10             	add    esp,0x10
c001aae8:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001aaec:	0f 94 c2             	sete   dl
c001aaef:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aaf6:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001aaf9:	90                   	nop
c001aafa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab01:	83 c4 70             	add    esp,0x70
c001ab04:	5b                   	pop    ebx
c001ab05:	5e                   	pop    esi
c001ab06:	5f                   	pop    edi
c001ab07:	c2 04 00             	ret    0x4

c001ab0a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ab0a:	55                   	push   ebp
c001ab0b:	57                   	push   edi
c001ab0c:	56                   	push   esi
c001ab0d:	53                   	push   ebx
c001ab0e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ab14:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ab1b:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ab1d:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ab20:	80 fb 40             	cmp    bl,0x40
c001ab23:	75 1b                	jne    c001ab40 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ab25:	8a 16                	mov    dl,BYTE PTR [esi]
c001ab27:	84 d2                	test   dl,dl
c001ab29:	0f 84 f1 00 00 00    	je     c001ac20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ab2f:	8d 46 01             	lea    eax,[esi+0x1]
c001ab32:	80 fa 3a             	cmp    dl,0x3a
c001ab35:	74 04                	je     c001ab3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ab37:	89 c6                	mov    esi,eax
c001ab39:	eb ea                	jmp    c001ab25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ab3b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ab3e:	89 c6                	mov    esi,eax
c001ab40:	50                   	push   eax
c001ab41:	6a 40                	push   0x40
c001ab43:	6a 00                	push   0x0
c001ab45:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ab49:	50                   	push   eax
c001ab4a:	e8 01 5c fe ff       	call   c0000750 <memset>
c001ab4f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ab56:	31 c0                	xor    eax,eax
c001ab58:	83 c4 10             	add    esp,0x10
c001ab5b:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ab5d:	84 c9                	test   cl,cl
c001ab5f:	0f 84 bb 00 00 00    	je     c001ac20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ab65:	3d c7 00 00 00       	cmp    eax,0xc7
c001ab6a:	0f 8f b0 00 00 00    	jg     c001ac20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ab70:	80 f9 0a             	cmp    cl,0xa
c001ab73:	0f 85 98 00 00 00    	jne    c001ac11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ab79:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ab7e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ab82:	a8 df                	test   al,0xdf
c001ab84:	0f 94 c1             	sete   cl
c001ab87:	3c 23                	cmp    al,0x23
c001ab89:	0f 94 c2             	sete   dl
c001ab8c:	08 d1                	or     cl,dl
c001ab8e:	75 4a                	jne    c001abda <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ab90:	8d 50 f7             	lea    edx,[eax-0x9]
c001ab93:	80 fa 01             	cmp    dl,0x1
c001ab96:	76 42                	jbe    c001abda <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ab98:	3c 5b                	cmp    al,0x5b
c001ab9a:	75 42                	jne    c001abde <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ab9c:	80 fb 40             	cmp    bl,0x40
c001ab9f:	75 39                	jne    c001abda <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aba1:	83 ec 0c             	sub    esp,0xc
c001aba4:	8d 54 24 65          	lea    edx,[esp+0x65]
c001aba8:	52                   	push   edx
c001aba9:	e8 be 5b fe ff       	call   c000076c <strlen>
c001abae:	83 c4 10             	add    esp,0x10
c001abb1:	83 f8 3f             	cmp    eax,0x3f
c001abb4:	77 6a                	ja     c001ac20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001abb6:	50                   	push   eax
c001abb7:	50                   	push   eax
c001abb8:	8d 54 24 61          	lea    edx,[esp+0x61]
c001abbc:	52                   	push   edx
c001abbd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001abc1:	52                   	push   edx
c001abc2:	e8 45 5c fe ff       	call   c000080c <strcpy>
c001abc7:	58                   	pop    eax
c001abc8:	8d 54 24 24          	lea    edx,[esp+0x24]
c001abcc:	52                   	push   edx
c001abcd:	e8 9a 5b fe ff       	call   c000076c <strlen>
c001abd2:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	31 d2                	xor    edx,edx
c001abdc:	eb 3a                	jmp    c001ac18 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001abde:	80 fb 40             	cmp    bl,0x40
c001abe1:	74 06                	je     c001abe9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001abe3:	8d 44 24 58          	lea    eax,[esp+0x58]
c001abe7:	eb 20                	jmp    c001ac09 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001abe9:	50                   	push   eax
c001abea:	50                   	push   eax
c001abeb:	55                   	push   ebp
c001abec:	8d 44 24 24          	lea    eax,[esp+0x24]
c001abf0:	50                   	push   eax
c001abf1:	e8 a2 5c fe ff       	call   c0000898 <strcmp>
c001abf6:	83 c4 10             	add    esp,0x10
c001abf9:	85 c0                	test   eax,eax
c001abfb:	75 dd                	jne    c001abda <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001abfd:	eb e4                	jmp    c001abe3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001abff:	8d 50 01             	lea    edx,[eax+0x1]
c001ac02:	80 f9 3d             	cmp    cl,0x3d
c001ac05:	74 1d                	je     c001ac24 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ac07:	89 d0                	mov    eax,edx
c001ac09:	8a 08                	mov    cl,BYTE PTR [eax]
c001ac0b:	84 c9                	test   cl,cl
c001ac0d:	75 f0                	jne    c001abff <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ac0f:	eb 0f                	jmp    c001ac20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac11:	8d 50 01             	lea    edx,[eax+0x1]
c001ac14:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ac18:	47                   	inc    edi
c001ac19:	89 d0                	mov    eax,edx
c001ac1b:	e9 3b ff ff ff       	jmp    c001ab5b <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ac20:	31 c0                	xor    eax,eax
c001ac22:	eb 33                	jmp    c001ac57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ac24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ac28:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ac2b:	50                   	push   eax
c001ac2c:	50                   	push   eax
c001ac2d:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ac31:	50                   	push   eax
c001ac32:	56                   	push   esi
c001ac33:	e8 60 5c fe ff       	call   c0000898 <strcmp>
c001ac38:	83 c4 10             	add    esp,0x10
c001ac3b:	85 c0                	test   eax,eax
c001ac3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac41:	75 97                	jne    c001abda <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac43:	51                   	push   ecx
c001ac44:	51                   	push   ecx
c001ac45:	52                   	push   edx
c001ac46:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ac4d:	e8 ba 5b fe ff       	call   c000080c <strcpy>
c001ac52:	83 c4 10             	add    esp,0x10
c001ac55:	b0 01                	mov    al,0x1
c001ac57:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ac5d:	5b                   	pop    ebx
c001ac5e:	5e                   	pop    esi
c001ac5f:	5f                   	pop    edi
c001ac60:	5d                   	pop    ebp
c001ac61:	c3                   	ret    

c001ac62 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ac62:	57                   	push   edi
c001ac63:	56                   	push   esi
c001ac64:	53                   	push   ebx
c001ac65:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac6b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ac72:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ac79:	53                   	push   ebx
c001ac7a:	e8 ed 5a fe ff       	call   c000076c <strlen>
c001ac7f:	89 34 24             	mov    DWORD PTR [esp],esi
c001ac82:	89 c7                	mov    edi,eax
c001ac84:	e8 e3 5a fe ff       	call   c000076c <strlen>
c001ac89:	83 c4 10             	add    esp,0x10
c001ac8c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ac90:	3d ff 00 00 00       	cmp    eax,0xff
c001ac95:	0f 87 d3 00 00 00    	ja     c001ad6e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ac9b:	57                   	push   edi
c001ac9c:	57                   	push   edi
c001ac9d:	56                   	push   esi
c001ac9e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aca2:	56                   	push   esi
c001aca3:	e8 64 5b fe ff       	call   c000080c <strcpy>
c001aca8:	58                   	pop    eax
c001aca9:	5a                   	pop    edx
c001acaa:	68 3e c5 02 c0       	push   0xc002c53e
c001acaf:	56                   	push   esi
c001acb0:	e8 97 5c fe ff       	call   c000094c <strcat>
c001acb5:	59                   	pop    ecx
c001acb6:	5f                   	pop    edi
c001acb7:	53                   	push   ebx
c001acb8:	56                   	push   esi
c001acb9:	e8 8e 5c fe ff       	call   c000094c <strcat>
c001acbe:	58                   	pop    eax
c001acbf:	5a                   	pop    edx
c001acc0:	68 e8 c1 02 c0       	push   0xc002c1e8
c001acc5:	56                   	push   esi
c001acc6:	e8 81 5c fe ff       	call   c000094c <strcat>
c001accb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001acd2:	e8 52 4b ff ff       	call   c000f829 <malloc>
c001acd7:	83 c4 0c             	add    esp,0xc
c001acda:	89 c3                	mov    ebx,eax
c001acdc:	ff 35 b0 f8 02 c0    	push   DWORD PTR ds:0xc002f8b0
c001ace2:	56                   	push   esi
c001ace3:	50                   	push   eax
c001ace4:	e8 f7 80 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c001ace9:	83 c4 10             	add    esp,0x10
c001acec:	85 db                	test   ebx,ebx
c001acee:	74 7e                	je     c001ad6e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001acf0:	51                   	push   ecx
c001acf1:	51                   	push   ecx
c001acf2:	6a 01                	push   0x1
c001acf4:	53                   	push   ebx
c001acf5:	e8 4a 81 ff ff       	call   c0012e44 <File::open(FileOpenMode)>
c001acfa:	83 c4 10             	add    esp,0x10
c001acfd:	85 c0                	test   eax,eax
c001acff:	74 08                	je     c001ad09 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ad01:	83 ec 0c             	sub    esp,0xc
c001ad04:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad06:	53                   	push   ebx
c001ad07:	eb 5f                	jmp    c001ad68 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ad09:	52                   	push   edx
c001ad0a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ad0e:	50                   	push   eax
c001ad0f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad13:	50                   	push   eax
c001ad14:	53                   	push   ebx
c001ad15:	e8 d6 83 ff ff       	call   c00130f0 <File::stat(unsigned long long*, bool*)>
c001ad1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad1e:	83 c4 10             	add    esp,0x10
c001ad21:	89 c1                	mov    ecx,eax
c001ad23:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ad27:	74 31                	je     c001ad5a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ad29:	83 ec 0c             	sub    esp,0xc
c001ad2c:	50                   	push   eax
c001ad2d:	e8 f7 4a ff ff       	call   c000f829 <malloc>
c001ad32:	89 c6                	mov    esi,eax
c001ad34:	58                   	pop    eax
c001ad35:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad37:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ad3b:	52                   	push   edx
c001ad3c:	56                   	push   esi
c001ad3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad45:	53                   	push   ebx
c001ad46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ad49:	83 c4 20             	add    esp,0x20
c001ad4c:	85 c0                	test   eax,eax
c001ad4e:	75 0a                	jne    c001ad5a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ad50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad54:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ad58:	74 18                	je     c001ad72 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ad5a:	83 ec 0c             	sub    esp,0xc
c001ad5d:	53                   	push   ebx
c001ad5e:	e8 3f 81 ff ff       	call   c0012ea2 <File::close()>
c001ad63:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad6b:	83 c4 10             	add    esp,0x10
c001ad6e:	31 c0                	xor    eax,eax
c001ad70:	eb 3b                	jmp    c001adad <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ad72:	83 ec 0c             	sub    esp,0xc
c001ad75:	53                   	push   ebx
c001ad76:	e8 27 81 ff ff       	call   c0012ea2 <File::close()>
c001ad7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad80:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad83:	83 c4 0c             	add    esp,0xc
c001ad86:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ad8d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ad94:	56                   	push   esi
c001ad95:	e8 70 fd ff ff       	call   c001ab0a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ad9a:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad9d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ada1:	e8 93 4a ff ff       	call   c000f839 <free>
c001ada6:	83 c4 10             	add    esp,0x10
c001ada9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001adad:	81 c4 20 01 00 00    	add    esp,0x120
c001adb3:	5b                   	pop    ebx
c001adb4:	5e                   	pop    esi
c001adb5:	5f                   	pop    edi
c001adb6:	c3                   	ret    

c001adb7 <Reg::getLine(char*, char*, char*)>:
c001adb7:	57                   	push   edi
c001adb8:	56                   	push   esi
c001adb9:	53                   	push   ebx
c001adba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adbe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001adc2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001adc6:	57                   	push   edi
c001adc7:	56                   	push   esi
c001adc8:	53                   	push   ebx
c001adc9:	68 ed c1 02 c0       	push   0xc002c1ed
c001adce:	e8 8f fe ff ff       	call   c001ac62 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001add3:	83 c4 10             	add    esp,0x10
c001add6:	84 c0                	test   al,al
c001add8:	75 10                	jne    c001adea <Reg::getLine(char*, char*, char*)+0x33>
c001adda:	57                   	push   edi
c001addb:	56                   	push   esi
c001addc:	53                   	push   ebx
c001addd:	68 12 c2 02 c0       	push   0xc002c212
c001ade2:	e8 7b fe ff ff       	call   c001ac62 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ade7:	83 c4 10             	add    esp,0x10
c001adea:	5b                   	pop    ebx
c001adeb:	5e                   	pop    esi
c001adec:	5f                   	pop    edi
c001aded:	c3                   	ret    

c001adee <Reg::readInt(char*, char*, int*)>:
c001adee:	55                   	push   ebp
c001adef:	57                   	push   edi
c001adf0:	56                   	push   esi
c001adf1:	53                   	push   ebx
c001adf2:	81 ec f0 00 00 00    	sub    esp,0xf0
c001adf8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001adfc:	57                   	push   edi
c001adfd:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ae04:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ae0b:	e8 a7 ff ff ff       	call   c001adb7 <Reg::getLine(char*, char*, char*)>
c001ae10:	83 c4 10             	add    esp,0x10
c001ae13:	84 c0                	test   al,al
c001ae15:	0f 84 b3 00 00 00    	je     c001aece <Reg::readInt(char*, char*, int*)+0xe0>
c001ae1b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ae1f:	80 fa 2b             	cmp    dl,0x2b
c001ae22:	74 0c                	je     c001ae30 <Reg::readInt(char*, char*, int*)+0x42>
c001ae24:	80 fa 2d             	cmp    dl,0x2d
c001ae27:	75 0e                	jne    c001ae37 <Reg::readInt(char*, char*, int*)+0x49>
c001ae29:	ba 01 00 00 00       	mov    edx,0x1
c001ae2e:	eb 0b                	jmp    c001ae3b <Reg::readInt(char*, char*, int*)+0x4d>
c001ae30:	ba 01 00 00 00       	mov    edx,0x1
c001ae35:	eb 02                	jmp    c001ae39 <Reg::readInt(char*, char*, int*)+0x4b>
c001ae37:	31 d2                	xor    edx,edx
c001ae39:	31 c0                	xor    eax,eax
c001ae3b:	be 0a 00 00 00       	mov    esi,0xa
c001ae40:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001ae45:	75 20                	jne    c001ae67 <Reg::readInt(char*, char*, int*)+0x79>
c001ae47:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001ae4b:	80 f9 78             	cmp    cl,0x78
c001ae4e:	75 0a                	jne    c001ae5a <Reg::readInt(char*, char*, int*)+0x6c>
c001ae50:	83 c2 02             	add    edx,0x2
c001ae53:	be 10 00 00 00       	mov    esi,0x10
c001ae58:	eb 0d                	jmp    c001ae67 <Reg::readInt(char*, char*, int*)+0x79>
c001ae5a:	80 f9 62             	cmp    cl,0x62
c001ae5d:	75 08                	jne    c001ae67 <Reg::readInt(char*, char*, int*)+0x79>
c001ae5f:	83 c2 02             	add    edx,0x2
c001ae62:	be 02 00 00 00       	mov    esi,0x2
c001ae67:	01 d7                	add    edi,edx
c001ae69:	31 d2                	xor    edx,edx
c001ae6b:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ae6d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001ae71:	80 fb 0d             	cmp    bl,0xd
c001ae74:	0f 94 c3             	sete   bl
c001ae77:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ae7c:	0f 94 c1             	sete   cl
c001ae7f:	08 cb                	or     bl,cl
c001ae81:	75 3a                	jne    c001aebd <Reg::readInt(char*, char*, int*)+0xcf>
c001ae83:	0f af d6             	imul   edx,esi
c001ae86:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ae8b:	83 fe 10             	cmp    esi,0x10
c001ae8e:	75 26                	jne    c001aeb6 <Reg::readInt(char*, char*, int*)+0xc8>
c001ae90:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ae94:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ae97:	89 e9                	mov    ecx,ebp
c001ae99:	80 f9 05             	cmp    cl,0x5
c001ae9c:	77 06                	ja     c001aea4 <Reg::readInt(char*, char*, int*)+0xb6>
c001ae9e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aea2:	eb 16                	jmp    c001aeba <Reg::readInt(char*, char*, int*)+0xcc>
c001aea4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aea8:	83 e9 61             	sub    ecx,0x61
c001aeab:	80 f9 05             	cmp    cl,0x5
c001aeae:	77 06                	ja     c001aeb6 <Reg::readInt(char*, char*, int*)+0xc8>
c001aeb0:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aeb4:	eb 04                	jmp    c001aeba <Reg::readInt(char*, char*, int*)+0xcc>
c001aeb6:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aeba:	47                   	inc    edi
c001aebb:	eb ae                	jmp    c001ae6b <Reg::readInt(char*, char*, int*)+0x7d>
c001aebd:	84 c0                	test   al,al
c001aebf:	74 02                	je     c001aec3 <Reg::readInt(char*, char*, int*)+0xd5>
c001aec1:	f7 da                	neg    edx
c001aec3:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aeca:	89 10                	mov    DWORD PTR [eax],edx
c001aecc:	88 d8                	mov    al,bl
c001aece:	81 c4 ec 00 00 00    	add    esp,0xec
c001aed4:	5b                   	pop    ebx
c001aed5:	5e                   	pop    esi
c001aed6:	5f                   	pop    edi
c001aed7:	5d                   	pop    ebp
c001aed8:	c3                   	ret    

c001aed9 <Reg::readString(char*, char*, char*, int)>:
c001aed9:	57                   	push   edi
c001aeda:	56                   	push   esi
c001aedb:	53                   	push   ebx
c001aedc:	81 ec d4 00 00 00    	sub    esp,0xd4
c001aee2:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001aee9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001aeed:	57                   	push   edi
c001aeee:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001aef5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001aefc:	e8 b6 fe ff ff       	call   c001adb7 <Reg::getLine(char*, char*, char*)>
c001af01:	83 c4 10             	add    esp,0x10
c001af04:	89 c6                	mov    esi,eax
c001af06:	84 c0                	test   al,al
c001af08:	74 44                	je     c001af4e <Reg::readString(char*, char*, char*, int)+0x75>
c001af0a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001af11:	31 c0                	xor    eax,eax
c001af13:	4a                   	dec    edx
c001af14:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001af17:	84 c9                	test   cl,cl
c001af19:	74 0f                	je     c001af2a <Reg::readString(char*, char*, char*, int)+0x51>
c001af1b:	39 c2                	cmp    edx,eax
c001af1d:	7e 0b                	jle    c001af2a <Reg::readString(char*, char*, char*, int)+0x51>
c001af1f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001af22:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001af27:	40                   	inc    eax
c001af28:	eb ea                	jmp    c001af14 <Reg::readString(char*, char*, char*, int)+0x3b>
c001af2a:	83 ec 0c             	sub    esp,0xc
c001af2d:	53                   	push   ebx
c001af2e:	e8 39 58 fe ff       	call   c000076c <strlen>
c001af33:	83 c4 10             	add    esp,0x10
c001af36:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001af3b:	75 11                	jne    c001af4e <Reg::readString(char*, char*, char*, int)+0x75>
c001af3d:	83 ec 0c             	sub    esp,0xc
c001af40:	53                   	push   ebx
c001af41:	e8 26 58 fe ff       	call   c000076c <strlen>
c001af46:	83 c4 10             	add    esp,0x10
c001af49:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001af4e:	81 c4 d0 00 00 00    	add    esp,0xd0
c001af54:	89 f0                	mov    eax,esi
c001af56:	5b                   	pop    ebx
c001af57:	5e                   	pop    esi
c001af58:	5f                   	pop    edi
c001af59:	c3                   	ret    

c001af5a <Reg::readBool(char*, char*, bool*)>:
c001af5a:	83 ec 20             	sub    esp,0x20
c001af5d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001af61:	50                   	push   eax
c001af62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af6a:	e8 7f fe ff ff       	call   c001adee <Reg::readInt(char*, char*, int*)>
c001af6f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001af74:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001af78:	0f 95 02             	setne  BYTE PTR [edx]
c001af7b:	83 c4 2c             	add    esp,0x2c
c001af7e:	c3                   	ret    

c001af7f <Reg::readBoolWithDefault(char*, char*, bool)>:
c001af7f:	53                   	push   ebx
c001af80:	83 ec 1c             	sub    esp,0x1c
c001af83:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001af87:	8d 44 24 13          	lea    eax,[esp+0x13]
c001af8b:	50                   	push   eax
c001af8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af94:	e8 c1 ff ff ff       	call   c001af5a <Reg::readBool(char*, char*, bool*)>
c001af99:	83 c4 10             	add    esp,0x10
c001af9c:	84 c0                	test   al,al
c001af9e:	74 04                	je     c001afa4 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001afa0:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001afa4:	88 d8                	mov    al,bl
c001afa6:	83 c4 18             	add    esp,0x18
c001afa9:	5b                   	pop    ebx
c001afaa:	c3                   	ret    

c001afab <Reg::readIntWithDefault(char*, char*, int)>:
c001afab:	53                   	push   ebx
c001afac:	83 ec 1c             	sub    esp,0x1c
c001afaf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001afb3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001afb7:	50                   	push   eax
c001afb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afc0:	e8 29 fe ff ff       	call   c001adee <Reg::readInt(char*, char*, int*)>
c001afc5:	83 c4 10             	add    esp,0x10
c001afc8:	84 c0                	test   al,al
c001afca:	74 04                	je     c001afd0 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001afcc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001afd0:	89 d8                	mov    eax,ebx
c001afd2:	83 c4 18             	add    esp,0x18
c001afd5:	5b                   	pop    ebx
c001afd6:	c3                   	ret    

c001afd7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001afd7:	57                   	push   edi
c001afd8:	56                   	push   esi
c001afd9:	56                   	push   esi
c001afda:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001afde:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001afe2:	56                   	push   esi
c001afe3:	57                   	push   edi
c001afe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afec:	e8 e8 fe ff ff       	call   c001aed9 <Reg::readString(char*, char*, char*, int)>
c001aff1:	83 c4 10             	add    esp,0x10
c001aff4:	84 c0                	test   al,al
c001aff6:	75 1a                	jne    c001b012 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001aff8:	51                   	push   ecx
c001aff9:	56                   	push   esi
c001affa:	6a 00                	push   0x0
c001affc:	57                   	push   edi
c001affd:	e8 4e 57 fe ff       	call   c0000750 <memset>
c001b002:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b005:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b009:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b00b:	83 c4 10             	add    esp,0x10
c001b00e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b012:	89 f8                	mov    eax,edi
c001b014:	5a                   	pop    edx
c001b015:	5e                   	pop    esi
c001b016:	5f                   	pop    edi
c001b017:	c3                   	ret    

c001b018 <Sys::eject(regs*)>:
c001b018:	83 ec 0c             	sub    esp,0xc
c001b01b:	83 ca ff             	or     edx,0xffffffff
c001b01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b022:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b025:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b02a:	83 e9 41             	sub    ecx,0x41
c001b02d:	83 f9 19             	cmp    ecx,0x19
c001b030:	77 18                	ja     c001b04a <Sys::eject(regs*)+0x32>
c001b032:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c001b039:	85 c9                	test   ecx,ecx
c001b03b:	74 0d                	je     c001b04a <Sys::eject(regs*)+0x32>
c001b03d:	83 ec 0c             	sub    esp,0xc
c001b040:	51                   	push   ecx
c001b041:	e8 2c b1 ff ff       	call   c0016172 <LogicalDisk::eject()>
c001b046:	83 c4 10             	add    esp,0x10
c001b049:	99                   	cdq    
c001b04a:	83 c4 0c             	add    esp,0xc
c001b04d:	c3                   	ret    

c001b04e <Sys::exit(regs*)>:
c001b04e:	83 ec 18             	sub    esp,0x18
c001b051:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b055:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b058:	e8 d3 35 00 00       	call   c001e630 <terminateTask(int)>
c001b05d:	83 c8 ff             	or     eax,0xffffffff
c001b060:	83 c4 1c             	add    esp,0x1c
c001b063:	89 c2                	mov    edx,eax
c001b065:	c3                   	ret    

c001b066 <Sys::getCwd(regs*)>:
c001b066:	83 ec 10             	sub    esp,0x10
c001b069:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b06d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b070:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b073:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b078:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b07b:	e8 62 7b ff ff       	call   c0012be2 <Fs::getcwd(Process*, char*, int)>
c001b080:	83 c4 1c             	add    esp,0x1c
c001b083:	99                   	cdq    
c001b084:	c3                   	ret    

c001b085 <Sys::getPID(regs*)>:
c001b085:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b08a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b08d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b08f:	99                   	cdq    
c001b090:	c3                   	ret    

c001b091 <Sys::getRAMData(regs*)>:
c001b091:	8b 0d d4 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3d4
c001b097:	69 05 d0 e3 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002e3d0,0xc8
c001b0a1:	99                   	cdq    
c001b0a2:	f7 f9                	idiv   ecx
c001b0a4:	c1 e0 18             	shl    eax,0x18
c001b0a7:	09 c8                	or     eax,ecx
c001b0a9:	99                   	cdq    
c001b0aa:	c3                   	ret    

c001b0ab <Sys::getVGAPtr(regs*)>:
c001b0ab:	55                   	push   ebp
c001b0ac:	57                   	push   edi
c001b0ad:	56                   	push   esi
c001b0ae:	53                   	push   ebx
c001b0af:	83 ec 18             	sub    esp,0x18
c001b0b2:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b0b6:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b0b9:	e8 be 30 00 00       	call   c001e17c <Thr::processFromPID(int)>
c001b0be:	83 c4 10             	add    esp,0x10
c001b0c1:	89 c1                	mov    ecx,eax
c001b0c3:	b8 01 00 00 00       	mov    eax,0x1
c001b0c8:	85 c9                	test   ecx,ecx
c001b0ca:	74 59                	je     c001b125 <Sys::getVGAPtr(regs*)+0x7a>
c001b0cc:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b0d2:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b0d6:	74 0c                	je     c001b0e4 <Sys::getVGAPtr(regs*)+0x39>
c001b0d8:	83 ec 0c             	sub    esp,0xc
c001b0db:	53                   	push   ebx
c001b0dc:	e8 02 55 ff ff       	call   c00105e3 <setActiveTerminal(VgaText*)>
c001b0e1:	83 c4 10             	add    esp,0x10
c001b0e4:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b0e7:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b0ea:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b0ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b0f4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b0f7:	81 c3 82 00 00 00    	add    ebx,0x82
c001b0fd:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b103:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b106:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b109:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b10f:	50                   	push   eax
c001b110:	50                   	push   eax
c001b111:	53                   	push   ebx
c001b112:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b115:	05 a8 0f 00 00       	add    eax,0xfa8
c001b11a:	50                   	push   eax
c001b11b:	e8 ec 56 fe ff       	call   c000080c <strcpy>
c001b120:	83 c4 10             	add    esp,0x10
c001b123:	31 c0                	xor    eax,eax
c001b125:	83 c4 0c             	add    esp,0xc
c001b128:	31 d2                	xor    edx,edx
c001b12a:	5b                   	pop    ebx
c001b12b:	5e                   	pop    esi
c001b12c:	5f                   	pop    edi
c001b12d:	5d                   	pop    ebp
c001b12e:	c3                   	ret    

c001b12f <Sys::loadDLL(regs*)>:
c001b12f:	56                   	push   esi
c001b130:	53                   	push   ebx
c001b131:	31 d2                	xor    edx,edx
c001b133:	51                   	push   ecx
c001b134:	b8 01 00 00 00       	mov    eax,0x1
c001b139:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b13d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b141:	0f 84 8c 00 00 00    	je     c001b1d3 <Sys::loadDLL(regs*)+0xa4>
c001b147:	83 ec 0c             	sub    esp,0xc
c001b14a:	68 14 01 00 00       	push   0x114
c001b14f:	e8 d5 46 ff ff       	call   c000f829 <malloc>
c001b154:	83 c4 0c             	add    esp,0xc
c001b157:	89 c3                	mov    ebx,eax
c001b159:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b15e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b161:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b164:	53                   	push   ebx
c001b165:	e8 76 7c ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c001b16a:	83 c4 10             	add    esp,0x10
c001b16d:	31 d2                	xor    edx,edx
c001b16f:	b8 02 00 00 00       	mov    eax,0x2
c001b174:	85 db                	test   ebx,ebx
c001b176:	74 5b                	je     c001b1d3 <Sys::loadDLL(regs*)+0xa4>
c001b178:	83 ec 0c             	sub    esp,0xc
c001b17b:	53                   	push   ebx
c001b17c:	e8 31 7f ff ff       	call   c00130b2 <File::exists()>
c001b181:	83 c4 10             	add    esp,0x10
c001b184:	84 c0                	test   al,al
c001b186:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b188:	75 11                	jne    c001b19b <Sys::loadDLL(regs*)+0x6c>
c001b18a:	83 ec 0c             	sub    esp,0xc
c001b18d:	53                   	push   ebx
c001b18e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b191:	83 c4 10             	add    esp,0x10
c001b194:	b8 03 00 00 00       	mov    eax,0x3
c001b199:	eb 36                	jmp    c001b1d1 <Sys::loadDLL(regs*)+0xa2>
c001b19b:	83 ec 0c             	sub    esp,0xc
c001b19e:	53                   	push   ebx
c001b19f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1a2:	58                   	pop    eax
c001b1a3:	5a                   	pop    edx
c001b1a4:	6a 00                	push   0x0
c001b1a6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b1a9:	e8 0e 22 00 00       	call   c001d3bc <Thr::loadDLL(char const*, bool)>
c001b1ae:	83 c4 10             	add    esp,0x10
c001b1b1:	89 c1                	mov    ecx,eax
c001b1b3:	31 d2                	xor    edx,edx
c001b1b5:	b8 04 00 00 00       	mov    eax,0x4
c001b1ba:	85 c9                	test   ecx,ecx
c001b1bc:	74 15                	je     c001b1d3 <Sys::loadDLL(regs*)+0xa4>
c001b1be:	53                   	push   ebx
c001b1bf:	53                   	push   ebx
c001b1c0:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c001b1c6:	51                   	push   ecx
c001b1c7:	e8 21 24 00 00       	call   c001d5ed <Thr::executeDLL(unsigned long, void*)>
c001b1cc:	83 c4 10             	add    esp,0x10
c001b1cf:	31 c0                	xor    eax,eax
c001b1d1:	31 d2                	xor    edx,edx
c001b1d3:	59                   	pop    ecx
c001b1d4:	5b                   	pop    ebx
c001b1d5:	5e                   	pop    esi
c001b1d6:	c3                   	ret    

c001b1d7 <Sys::read(regs*)>:
c001b1d7:	57                   	push   edi
c001b1d8:	56                   	push   esi
c001b1d9:	53                   	push   ebx
c001b1da:	83 ec 10             	sub    esp,0x10
c001b1dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b1e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b1e4:	83 f8 02             	cmp    eax,0x2
c001b1e7:	77 10                	ja     c001b1f9 <Sys::read(regs*)+0x22>
c001b1e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1f1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b1f7:	eb 0e                	jmp    c001b207 <Sys::read(regs*)+0x30>
c001b1f9:	83 ec 0c             	sub    esp,0xc
c001b1fc:	50                   	push   eax
c001b1fd:	e8 57 61 ff ff       	call   c0011359 <getFromFileDescriptor(int)>
c001b202:	83 c4 10             	add    esp,0x10
c001b205:	89 c1                	mov    ecx,eax
c001b207:	83 c8 ff             	or     eax,0xffffffff
c001b20a:	85 c9                	test   ecx,ecx
c001b20c:	89 c2                	mov    edx,eax
c001b20e:	74 28                	je     c001b238 <Sys::read(regs*)+0x61>
c001b210:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b218:	31 ff                	xor    edi,edi
c001b21a:	83 ec 0c             	sub    esp,0xc
c001b21d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b21f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b223:	52                   	push   edx
c001b224:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b227:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b22a:	57                   	push   edi
c001b22b:	56                   	push   esi
c001b22c:	51                   	push   ecx
c001b22d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b230:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b234:	83 c4 20             	add    esp,0x20
c001b237:	99                   	cdq    
c001b238:	83 c4 10             	add    esp,0x10
c001b23b:	5b                   	pop    ebx
c001b23c:	5e                   	pop    esi
c001b23d:	5f                   	pop    edi
c001b23e:	c3                   	ret    

c001b23f <Sys::sbrk(regs*)>:
c001b23f:	56                   	push   esi
c001b240:	53                   	push   ebx
c001b241:	50                   	push   eax
c001b242:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b247:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b24b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b24e:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b251:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b257:	85 db                	test   ebx,ebx
c001b259:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b25c:	74 02                	je     c001b260 <Sys::sbrk(regs*)+0x21>
c001b25e:	79 06                	jns    c001b266 <Sys::sbrk(regs*)+0x27>
c001b260:	89 f0                	mov    eax,esi
c001b262:	31 d2                	xor    edx,edx
c001b264:	eb 2a                	jmp    c001b290 <Sys::sbrk(regs*)+0x51>
c001b266:	83 c8 ff             	or     eax,0xffffffff
c001b269:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b26f:	89 c2                	mov    edx,eax
c001b271:	77 1d                	ja     c001b290 <Sys::sbrk(regs*)+0x51>
c001b273:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b279:	50                   	push   eax
c001b27a:	c1 ea 0c             	shr    edx,0xc
c001b27d:	68 07 0c 00 00       	push   0xc07
c001b282:	52                   	push   edx
c001b283:	51                   	push   ecx
c001b284:	e8 cf 69 ff ff       	call   c0011c58 <VAS::allocatePages(int, int)>
c001b289:	89 f0                	mov    eax,esi
c001b28b:	31 d2                	xor    edx,edx
c001b28d:	83 c4 10             	add    esp,0x10
c001b290:	59                   	pop    ecx
c001b291:	5b                   	pop    ebx
c001b292:	5e                   	pop    esi
c001b293:	c3                   	ret    

c001b294 <Sys::setCwd(regs*)>:
c001b294:	83 ec 14             	sub    esp,0x14
c001b297:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b29b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b29e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2a3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2a6:	e8 a6 7e ff ff       	call   c0013151 <Fs::setcwd(Process*, char*)>
c001b2ab:	83 c4 1c             	add    esp,0x1c
c001b2ae:	99                   	cdq    
c001b2af:	c3                   	ret    

c001b2b0 <Sys::setTime(regs*)>:
c001b2b0:	55                   	push   ebp
c001b2b1:	31 c9                	xor    ecx,ecx
c001b2b3:	57                   	push   edi
c001b2b4:	bd 0c 00 00 00       	mov    ebp,0xc
c001b2b9:	56                   	push   esi
c001b2ba:	53                   	push   ebx
c001b2bb:	31 db                	xor    ebx,ebx
c001b2bd:	83 ec 10             	sub    esp,0x10
c001b2c0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b2c4:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b2c7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b2ca:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b2cd:	89 c2                	mov    edx,eax
c001b2cf:	66 81 ef 6c 07       	sub    di,0x76c
c001b2d4:	83 e2 1f             	and    edx,0x1f
c001b2d7:	c1 e7 10             	shl    edi,0x10
c001b2da:	42                   	inc    edx
c001b2db:	c1 e8 05             	shr    eax,0x5
c001b2de:	88 d1                	mov    cl,dl
c001b2e0:	31 d2                	xor    edx,edx
c001b2e2:	f7 f5                	div    ebp
c001b2e4:	89 dd                	mov    ebp,ebx
c001b2e6:	88 d5                	mov    ch,dl
c001b2e8:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b2ee:	0f b7 c1             	movzx  eax,cx
c001b2f1:	31 d2                	xor    edx,edx
c001b2f3:	09 f8                	or     eax,edi
c001b2f5:	bf 3c 00 00 00       	mov    edi,0x3c
c001b2fa:	89 c1                	mov    ecx,eax
c001b2fc:	89 f0                	mov    eax,esi
c001b2fe:	f7 f7                	div    edi
c001b300:	c1 e2 10             	shl    edx,0x10
c001b303:	09 d5                	or     ebp,edx
c001b305:	31 d2                	xor    edx,edx
c001b307:	89 eb                	mov    ebx,ebp
c001b309:	f7 f7                	div    edi
c001b30b:	bf 10 0e 00 00       	mov    edi,0xe10
c001b310:	88 d7                	mov    bh,dl
c001b312:	89 f0                	mov    eax,esi
c001b314:	31 d2                	xor    edx,edx
c001b316:	f7 f7                	div    edi
c001b318:	bf 18 00 00 00       	mov    edi,0x18
c001b31d:	31 d2                	xor    edx,edx
c001b31f:	f7 f7                	div    edi
c001b321:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b326:	88 d3                	mov    bl,dl
c001b328:	53                   	push   ebx
c001b329:	51                   	push   ecx
c001b32a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b330:	e8 65 86 ff ff       	call   c001399a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b335:	83 c4 1c             	add    esp,0x1c
c001b338:	83 f0 01             	xor    eax,0x1
c001b33b:	5b                   	pop    ebx
c001b33c:	0f b6 c0             	movzx  eax,al
c001b33f:	5e                   	pop    esi
c001b340:	31 d2                	xor    edx,edx
c001b342:	5f                   	pop    edi
c001b343:	5d                   	pop    ebp
c001b344:	c3                   	ret    

c001b345 <Sys::timezone(regs*)>:
c001b345:	53                   	push   ebx
c001b346:	83 ec 08             	sub    esp,0x8
c001b349:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b34d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b351:	75 17                	jne    c001b36a <Sys::timezone(regs*)+0x25>
c001b353:	83 ec 0c             	sub    esp,0xc
c001b356:	68 2d c2 02 c0       	push   0xc002c22d
c001b35b:	e8 21 75 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001b360:	83 c8 ff             	or     eax,0xffffffff
c001b363:	83 c4 10             	add    esp,0x10
c001b366:	89 c2                	mov    edx,eax
c001b368:	eb 20                	jmp    c001b38a <Sys::timezone(regs*)+0x45>
c001b36a:	83 ec 0c             	sub    esp,0xc
c001b36d:	68 42 c2 02 c0       	push   0xc002c242
c001b372:	e8 0a 75 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001b377:	58                   	pop    eax
c001b378:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b37b:	e8 7c 83 ff ff       	call   c00136fc <User::loadClockSettings(int)>
c001b380:	83 c4 10             	add    esp,0x10
c001b383:	b8 01 00 00 00       	mov    eax,0x1
c001b388:	31 d2                	xor    edx,edx
c001b38a:	83 c4 08             	add    esp,0x8
c001b38d:	5b                   	pop    ebx
c001b38e:	c3                   	ret    

c001b38f <Sys::write(regs*)>:
c001b38f:	57                   	push   edi
c001b390:	56                   	push   esi
c001b391:	53                   	push   ebx
c001b392:	83 ec 10             	sub    esp,0x10
c001b395:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b399:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b39c:	83 f8 02             	cmp    eax,0x2
c001b39f:	77 10                	ja     c001b3b1 <Sys::write(regs*)+0x22>
c001b3a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3a9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3af:	eb 0e                	jmp    c001b3bf <Sys::write(regs*)+0x30>
c001b3b1:	83 ec 0c             	sub    esp,0xc
c001b3b4:	50                   	push   eax
c001b3b5:	e8 9f 5f ff ff       	call   c0011359 <getFromFileDescriptor(int)>
c001b3ba:	83 c4 10             	add    esp,0x10
c001b3bd:	89 c1                	mov    ecx,eax
c001b3bf:	83 c8 ff             	or     eax,0xffffffff
c001b3c2:	85 c9                	test   ecx,ecx
c001b3c4:	89 c2                	mov    edx,eax
c001b3c6:	74 28                	je     c001b3f0 <Sys::write(regs*)+0x61>
c001b3c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3d0:	31 ff                	xor    edi,edi
c001b3d2:	83 ec 0c             	sub    esp,0xc
c001b3d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3d7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3db:	52                   	push   edx
c001b3dc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3df:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3e2:	57                   	push   edi
c001b3e3:	56                   	push   esi
c001b3e4:	51                   	push   ecx
c001b3e5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b3e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3ec:	83 c4 20             	add    esp,0x20
c001b3ef:	99                   	cdq    
c001b3f0:	83 c4 10             	add    esp,0x10
c001b3f3:	5b                   	pop    ebx
c001b3f4:	5e                   	pop    esi
c001b3f5:	5f                   	pop    edi
c001b3f6:	c3                   	ret    

c001b3f7 <Sys::wsbe(regs*)>:
c001b3f7:	57                   	push   edi
c001b3f8:	b9 0b 00 00 00       	mov    ecx,0xb
c001b3fd:	56                   	push   esi
c001b3fe:	be 81 c2 02 c0       	mov    esi,0xc002c281
c001b403:	53                   	push   ebx
c001b404:	83 ec 30             	sub    esp,0x30
c001b407:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b40b:	fc                   	cld    
c001b40c:	83 ec 0c             	sub    esp,0xc
c001b40f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b411:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b415:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b41a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b41d:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b423:	8b 06                	mov    eax,DWORD PTR [esi]
c001b425:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b428:	57                   	push   edi
c001b429:	e8 3e 53 fe ff       	call   c000076c <strlen>
c001b42e:	5a                   	pop    edx
c001b42f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b433:	52                   	push   edx
c001b434:	31 d2                	xor    edx,edx
c001b436:	57                   	push   edi
c001b437:	52                   	push   edx
c001b438:	50                   	push   eax
c001b439:	56                   	push   esi
c001b43a:	ff d3                	call   ebx
c001b43c:	83 c4 14             	add    esp,0x14
c001b43f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b443:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b446:	e8 e5 31 00 00       	call   c001e630 <terminateTask(int)>
c001b44b:	83 c4 40             	add    esp,0x40
c001b44e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b453:	5b                   	pop    ebx
c001b454:	31 d2                	xor    edx,edx
c001b456:	5e                   	pop    esi
c001b457:	5f                   	pop    edi
c001b458:	c3                   	ret    

c001b459 <Sys::yield(regs*)>:
c001b459:	57                   	push   edi
c001b45a:	56                   	push   esi
c001b45b:	53                   	push   ebx
c001b45c:	fa                   	cli    
c001b45d:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001b463:	e8 19 29 00 00       	call   c001dd81 <schedule()>
c001b468:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001b46d:	48                   	dec    eax
c001b46e:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001b473:	75 01                	jne    c001b476 <Sys::yield(regs*)+0x1d>
c001b475:	fb                   	sti    
c001b476:	8b 35 f0 e9 02 c0    	mov    esi,DWORD PTR ds:0xc002e9f0
c001b47c:	8b 3d f4 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9f4
c001b482:	89 f0                	mov    eax,esi
c001b484:	89 fb                	mov    ebx,edi
c001b486:	89 f1                	mov    ecx,esi
c001b488:	c1 e0 07             	shl    eax,0x7
c001b48b:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b48f:	25 80 30 0f 00       	and    eax,0xf3080
c001b494:	c1 eb 17             	shr    ebx,0x17
c001b497:	31 c8                	xor    eax,ecx
c001b499:	89 da                	mov    edx,ebx
c001b49b:	5b                   	pop    ebx
c001b49c:	5e                   	pop    esi
c001b49d:	5f                   	pop    edi
c001b49e:	c3                   	ret    

c001b49f <sysCallSeekDir(regs*)>:
c001b49f:	31 c0                	xor    eax,eax
c001b4a1:	31 d2                	xor    edx,edx
c001b4a3:	c3                   	ret    

c001b4a4 <sysCallTellDir(regs*)>:
c001b4a4:	31 c0                	xor    eax,eax
c001b4a6:	31 d2                	xor    edx,edx
c001b4a8:	c3                   	ret    

c001b4a9 <sysCallVerify(regs*)>:
c001b4a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4ad:	31 d2                	xor    edx,edx
c001b4af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4b2:	c3                   	ret    

c001b4b3 <sysCallGetArgc(regs*)>:
c001b4b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4bb:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b4c1:	99                   	cdq    
c001b4c2:	c3                   	ret    

c001b4c3 <sysFormatDisk(regs*)>:
c001b4c3:	56                   	push   esi
c001b4c4:	53                   	push   ebx
c001b4c5:	53                   	push   ebx
c001b4c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b4ca:	8b 1d f4 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4f4
c001b4d0:	eb 25                	jmp    c001b4f7 <sysFormatDisk(regs*)+0x34>
c001b4d2:	83 ec 0c             	sub    esp,0xc
c001b4d5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b4d8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b4da:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b4dd:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b4e0:	50                   	push   eax
c001b4e1:	ff 34 85 80 e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1680]
c001b4e8:	53                   	push   ebx
c001b4e9:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b4ec:	83 c4 20             	add    esp,0x20
c001b4ef:	83 f8 08             	cmp    eax,0x8
c001b4f2:	75 12                	jne    c001b506 <sysFormatDisk(regs*)+0x43>
c001b4f4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b4f7:	85 db                	test   ebx,ebx
c001b4f9:	75 d7                	jne    c001b4d2 <sysFormatDisk(regs*)+0xf>
c001b4fb:	59                   	pop    ecx
c001b4fc:	b8 03 00 00 00       	mov    eax,0x3
c001b501:	31 d2                	xor    edx,edx
c001b503:	5b                   	pop    ebx
c001b504:	5e                   	pop    esi
c001b505:	c3                   	ret    
c001b506:	85 c0                	test   eax,eax
c001b508:	74 1b                	je     c001b525 <sysFormatDisk(regs*)+0x62>
c001b50a:	83 f8 09             	cmp    eax,0x9
c001b50d:	74 0b                	je     c001b51a <sysFormatDisk(regs*)+0x57>
c001b50f:	59                   	pop    ecx
c001b510:	b8 02 00 00 00       	mov    eax,0x2
c001b515:	31 d2                	xor    edx,edx
c001b517:	5b                   	pop    ebx
c001b518:	5e                   	pop    esi
c001b519:	c3                   	ret    
c001b51a:	59                   	pop    ecx
c001b51b:	b8 01 00 00 00       	mov    eax,0x1
c001b520:	31 d2                	xor    edx,edx
c001b522:	5b                   	pop    ebx
c001b523:	5e                   	pop    esi
c001b524:	c3                   	ret    
c001b525:	59                   	pop    ecx
c001b526:	31 c0                	xor    eax,eax
c001b528:	31 d2                	xor    edx,edx
c001b52a:	5b                   	pop    ebx
c001b52b:	5e                   	pop    esi
c001b52c:	c3                   	ret    

c001b52d <sysSetDiskVolumeLabel(regs*)>:
c001b52d:	56                   	push   esi
c001b52e:	53                   	push   ebx
c001b52f:	53                   	push   ebx
c001b530:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b534:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b537:	83 f8 19             	cmp    eax,0x19
c001b53a:	77 29                	ja     c001b565 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b53c:	8b 0c 85 80 e9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1680]
c001b543:	85 c9                	test   ecx,ecx
c001b545:	74 1e                	je     c001b565 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b547:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b54a:	85 d2                	test   edx,edx
c001b54c:	74 17                	je     c001b565 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b54e:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b554:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b556:	52                   	push   edx
c001b557:	50                   	push   eax
c001b558:	51                   	push   ecx
c001b559:	53                   	push   ebx
c001b55a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b55d:	83 c4 10             	add    esp,0x10
c001b560:	99                   	cdq    
c001b561:	59                   	pop    ecx
c001b562:	5b                   	pop    ebx
c001b563:	5e                   	pop    esi
c001b564:	c3                   	ret    
c001b565:	59                   	pop    ecx
c001b566:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b56b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b570:	5b                   	pop    ebx
c001b571:	5e                   	pop    esi
c001b572:	c3                   	ret    

c001b573 <sysGetDiskVolumeLabel(regs*)>:
c001b573:	57                   	push   edi
c001b574:	56                   	push   esi
c001b575:	53                   	push   ebx
c001b576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b57d:	83 fa 19             	cmp    edx,0x19
c001b580:	77 34                	ja     c001b5b6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b582:	8b 0c 95 80 e9 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1680]
c001b589:	85 c9                	test   ecx,ecx
c001b58b:	74 29                	je     c001b5b6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b58d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b590:	85 db                	test   ebx,ebx
c001b592:	74 22                	je     c001b5b6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b594:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b597:	85 c0                	test   eax,eax
c001b599:	74 1b                	je     c001b5b6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b59b:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b5a1:	83 ec 0c             	sub    esp,0xc
c001b5a4:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b5a6:	50                   	push   eax
c001b5a7:	53                   	push   ebx
c001b5a8:	52                   	push   edx
c001b5a9:	51                   	push   ecx
c001b5aa:	56                   	push   esi
c001b5ab:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b5ae:	83 c4 20             	add    esp,0x20
c001b5b1:	99                   	cdq    
c001b5b2:	5b                   	pop    ebx
c001b5b3:	5e                   	pop    esi
c001b5b4:	5f                   	pop    edi
c001b5b5:	c3                   	ret    
c001b5b6:	5b                   	pop    ebx
c001b5b7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b5bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5c1:	5e                   	pop    esi
c001b5c2:	5f                   	pop    edi
c001b5c3:	c3                   	ret    

c001b5c4 <sysShutdown(regs*)>:
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b5ce:	85 c0                	test   eax,eax
c001b5d0:	74 18                	je     c001b5ea <sysShutdown(regs*)+0x26>
c001b5d2:	83 f8 01             	cmp    eax,0x1
c001b5d5:	74 38                	je     c001b60f <sysShutdown(regs*)+0x4b>
c001b5d7:	83 f8 02             	cmp    eax,0x2
c001b5da:	74 24                	je     c001b600 <sysShutdown(regs*)+0x3c>
c001b5dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5e6:	83 c4 0c             	add    esp,0xc
c001b5e9:	c3                   	ret    
c001b5ea:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b5ef:	8b 10                	mov    edx,DWORD PTR [eax]
c001b5f1:	6a 00                	push   0x0
c001b5f3:	6a 00                	push   0x0
c001b5f5:	6a 00                	push   0x0
c001b5f7:	50                   	push   eax
c001b5f8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b5fb:	83 c4 10             	add    esp,0x10
c001b5fe:	eb dc                	jmp    c001b5dc <sysShutdown(regs*)+0x18>
c001b600:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b605:	8b 10                	mov    edx,DWORD PTR [eax]
c001b607:	6a 00                	push   0x0
c001b609:	6a 00                	push   0x0
c001b60b:	6a 01                	push   0x1
c001b60d:	eb e8                	jmp    c001b5f7 <sysShutdown(regs*)+0x33>
c001b60f:	a1 00 ea 02 c0       	mov    eax,ds:0xc002ea00
c001b614:	85 c0                	test   eax,eax
c001b616:	74 02                	je     c001b61a <sysShutdown(regs*)+0x56>
c001b618:	ff d0                	call   eax
c001b61a:	31 c0                	xor    eax,eax
c001b61c:	31 d2                	xor    edx,edx
c001b61e:	83 c4 0c             	add    esp,0xc
c001b621:	c3                   	ret    

c001b622 <sysCallRealpath(regs*)>:
c001b622:	83 ec 0c             	sub    esp,0xc
c001b625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b629:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b62c:	85 d2                	test   edx,edx
c001b62e:	74 07                	je     c001b637 <sysCallRealpath(regs*)+0x15>
c001b630:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b633:	85 c0                	test   eax,eax
c001b635:	75 0b                	jne    c001b642 <sysCallRealpath(regs*)+0x20>
c001b637:	b8 01 00 00 00       	mov    eax,0x1
c001b63c:	31 d2                	xor    edx,edx
c001b63e:	83 c4 0c             	add    esp,0xc
c001b641:	c3                   	ret    
c001b642:	51                   	push   ecx
c001b643:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b649:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b64c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b652:	51                   	push   ecx
c001b653:	52                   	push   edx
c001b654:	50                   	push   eax
c001b655:	e8 dc 75 ff ff       	call   c0012c36 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b65a:	83 c4 10             	add    esp,0x10
c001b65d:	31 c0                	xor    eax,eax
c001b65f:	31 d2                	xor    edx,edx
c001b661:	83 c4 0c             	add    esp,0xc
c001b664:	c3                   	ret    

c001b665 <sysCallReadDir(regs*)>:
c001b665:	53                   	push   ebx
c001b666:	83 ec 18             	sub    esp,0x18
c001b669:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b66d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b670:	83 f8 02             	cmp    eax,0x2
c001b673:	76 60                	jbe    c001b6d5 <sysCallReadDir(regs*)+0x70>
c001b675:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b67c:	77 48                	ja     c001b6c6 <sysCallReadDir(regs*)+0x61>
c001b67e:	83 ec 0c             	sub    esp,0xc
c001b681:	50                   	push   eax
c001b682:	e8 d2 5c ff ff       	call   c0011359 <getFromFileDescriptor(int)>
c001b687:	83 c4 10             	add    esp,0x10
c001b68a:	85 c0                	test   eax,eax
c001b68c:	74 38                	je     c001b6c6 <sysCallReadDir(regs*)+0x61>
c001b68e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b696:	83 ec 0c             	sub    esp,0xc
c001b699:	8b 10                	mov    edx,DWORD PTR [eax]
c001b69b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b69f:	51                   	push   ecx
c001b6a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6a3:	6a 00                	push   0x0
c001b6a5:	68 10 01 00 00       	push   0x110
c001b6aa:	50                   	push   eax
c001b6ab:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6ae:	83 c4 20             	add    esp,0x20
c001b6b1:	85 c0                	test   eax,eax
c001b6b3:	74 29                	je     c001b6de <sysCallReadDir(regs*)+0x79>
c001b6b5:	83 f8 07             	cmp    eax,0x7
c001b6b8:	74 1b                	je     c001b6d5 <sysCallReadDir(regs*)+0x70>
c001b6ba:	b8 02 00 00 00       	mov    eax,0x2
c001b6bf:	31 d2                	xor    edx,edx
c001b6c1:	83 c4 18             	add    esp,0x18
c001b6c4:	5b                   	pop    ebx
c001b6c5:	c3                   	ret    
c001b6c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6d0:	83 c4 18             	add    esp,0x18
c001b6d3:	5b                   	pop    ebx
c001b6d4:	c3                   	ret    
c001b6d5:	b8 01 00 00 00       	mov    eax,0x1
c001b6da:	31 d2                	xor    edx,edx
c001b6dc:	eb e3                	jmp    c001b6c1 <sysCallReadDir(regs*)+0x5c>
c001b6de:	31 c0                	xor    eax,eax
c001b6e0:	31 d2                	xor    edx,edx
c001b6e2:	eb dd                	jmp    c001b6c1 <sysCallReadDir(regs*)+0x5c>

c001b6e4 <sysCallIsATTY(regs*)>:
c001b6e4:	83 ec 0c             	sub    esp,0xc
c001b6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6ee:	83 f8 02             	cmp    eax,0x2
c001b6f1:	76 07                	jbe    c001b6fa <sysCallIsATTY(regs*)+0x16>
c001b6f3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b6f8:	75 26                	jne    c001b720 <sysCallIsATTY(regs*)+0x3c>
c001b6fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b702:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b708:	85 c0                	test   eax,eax
c001b70a:	74 24                	je     c001b730 <sysCallIsATTY(regs*)+0x4c>
c001b70c:	83 ec 0c             	sub    esp,0xc
c001b70f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b711:	50                   	push   eax
c001b712:	ff 12                	call   DWORD PTR [edx]
c001b714:	31 d2                	xor    edx,edx
c001b716:	0f b6 c0             	movzx  eax,al
c001b719:	83 c4 10             	add    esp,0x10
c001b71c:	83 c4 0c             	add    esp,0xc
c001b71f:	c3                   	ret    
c001b720:	83 ec 0c             	sub    esp,0xc
c001b723:	50                   	push   eax
c001b724:	e8 30 5c ff ff       	call   c0011359 <getFromFileDescriptor(int)>
c001b729:	83 c4 10             	add    esp,0x10
c001b72c:	85 c0                	test   eax,eax
c001b72e:	75 dc                	jne    c001b70c <sysCallIsATTY(regs*)+0x28>
c001b730:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b735:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b73a:	83 c4 0c             	add    esp,0xc
c001b73d:	c3                   	ret    

c001b73e <sysCallSeek(regs*)>:
c001b73e:	53                   	push   ebx
c001b73f:	83 ec 08             	sub    esp,0x8
c001b742:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b746:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b749:	8d 50 fd             	lea    edx,[eax-0x3]
c001b74c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b752:	77 32                	ja     c001b786 <sysCallSeek(regs*)+0x48>
c001b754:	83 ec 0c             	sub    esp,0xc
c001b757:	50                   	push   eax
c001b758:	e8 fc 5b ff ff       	call   c0011359 <getFromFileDescriptor(int)>
c001b75d:	83 c4 0c             	add    esp,0xc
c001b760:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b763:	31 db                	xor    ebx,ebx
c001b765:	53                   	push   ebx
c001b766:	51                   	push   ecx
c001b767:	50                   	push   eax
c001b768:	e8 95 77 ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001b76d:	83 c4 10             	add    esp,0x10
c001b770:	85 c0                	test   eax,eax
c001b772:	0f 95 c0             	setne  al
c001b775:	31 d2                	xor    edx,edx
c001b777:	0f b6 c0             	movzx  eax,al
c001b77a:	f7 d8                	neg    eax
c001b77c:	83 d2 00             	adc    edx,0x0
c001b77f:	83 c4 08             	add    esp,0x8
c001b782:	f7 da                	neg    edx
c001b784:	5b                   	pop    ebx
c001b785:	c3                   	ret    
c001b786:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b78b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b790:	83 c4 08             	add    esp,0x8
c001b793:	5b                   	pop    ebx
c001b794:	c3                   	ret    

c001b795 <sysCallTell(regs*)>:
c001b795:	53                   	push   ebx
c001b796:	83 ec 08             	sub    esp,0x8
c001b799:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b79d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b7a0:	83 f8 02             	cmp    eax,0x2
c001b7a3:	76 4d                	jbe    c001b7f2 <sysCallTell(regs*)+0x5d>
c001b7a5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b7aa:	76 19                	jbe    c001b7c5 <sysCallTell(regs*)+0x30>
c001b7ac:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b7af:	31 d2                	xor    edx,edx
c001b7b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7be:	31 c0                	xor    eax,eax
c001b7c0:	83 c4 08             	add    esp,0x8
c001b7c3:	5b                   	pop    ebx
c001b7c4:	c3                   	ret    
c001b7c5:	83 ec 0c             	sub    esp,0xc
c001b7c8:	50                   	push   eax
c001b7c9:	e8 8b 5b ff ff       	call   c0011359 <getFromFileDescriptor(int)>
c001b7ce:	5a                   	pop    edx
c001b7cf:	59                   	pop    ecx
c001b7d0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b7d3:	50                   	push   eax
c001b7d4:	e8 7f 77 ff ff       	call   c0012f58 <File::tell(unsigned long long*)>
c001b7d9:	83 c4 10             	add    esp,0x10
c001b7dc:	85 c0                	test   eax,eax
c001b7de:	0f 95 c0             	setne  al
c001b7e1:	31 d2                	xor    edx,edx
c001b7e3:	0f b6 c0             	movzx  eax,al
c001b7e6:	f7 d8                	neg    eax
c001b7e8:	83 d2 00             	adc    edx,0x0
c001b7eb:	83 c4 08             	add    esp,0x8
c001b7ee:	f7 da                	neg    edx
c001b7f0:	5b                   	pop    ebx
c001b7f1:	c3                   	ret    
c001b7f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7fc:	83 c4 08             	add    esp,0x8
c001b7ff:	5b                   	pop    ebx
c001b800:	c3                   	ret    

c001b801 <sysCallSize(regs*)>:
c001b801:	53                   	push   ebx
c001b802:	83 ec 18             	sub    esp,0x18
c001b805:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b809:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b80c:	83 f8 02             	cmp    eax,0x2
c001b80f:	76 53                	jbe    c001b864 <sysCallSize(regs*)+0x63>
c001b811:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b816:	76 19                	jbe    c001b831 <sysCallSize(regs*)+0x30>
c001b818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b81b:	31 d2                	xor    edx,edx
c001b81d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b823:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b82a:	31 c0                	xor    eax,eax
c001b82c:	83 c4 18             	add    esp,0x18
c001b82f:	5b                   	pop    ebx
c001b830:	c3                   	ret    
c001b831:	83 ec 0c             	sub    esp,0xc
c001b834:	50                   	push   eax
c001b835:	e8 1f 5b ff ff       	call   c0011359 <getFromFileDescriptor(int)>
c001b83a:	83 c4 0c             	add    esp,0xc
c001b83d:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b841:	52                   	push   edx
c001b842:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b845:	50                   	push   eax
c001b846:	e8 a5 78 ff ff       	call   c00130f0 <File::stat(unsigned long long*, bool*)>
c001b84b:	83 c4 10             	add    esp,0x10
c001b84e:	85 c0                	test   eax,eax
c001b850:	0f 95 c0             	setne  al
c001b853:	31 d2                	xor    edx,edx
c001b855:	0f b6 c0             	movzx  eax,al
c001b858:	f7 d8                	neg    eax
c001b85a:	83 d2 00             	adc    edx,0x0
c001b85d:	83 c4 18             	add    esp,0x18
c001b860:	f7 da                	neg    edx
c001b862:	5b                   	pop    ebx
c001b863:	c3                   	ret    
c001b864:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b869:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b86e:	83 c4 18             	add    esp,0x18
c001b871:	5b                   	pop    ebx
c001b872:	c3                   	ret    

c001b873 <sysCallSizeFromFilename(regs*)>:
c001b873:	57                   	push   edi
c001b874:	56                   	push   esi
c001b875:	53                   	push   ebx
c001b876:	83 ec 20             	sub    esp,0x20
c001b879:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b87d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b880:	83 fb 02             	cmp    ebx,0x2
c001b883:	0f 86 88 00 00 00    	jbe    c001b911 <sysCallSizeFromFilename(regs*)+0x9e>
c001b889:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b88f:	76 1b                	jbe    c001b8ac <sysCallSizeFromFilename(regs*)+0x39>
c001b891:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b894:	31 d2                	xor    edx,edx
c001b896:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b89c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b8a3:	83 c4 20             	add    esp,0x20
c001b8a6:	31 c0                	xor    eax,eax
c001b8a8:	5b                   	pop    ebx
c001b8a9:	5e                   	pop    esi
c001b8aa:	5f                   	pop    edi
c001b8ab:	c3                   	ret    
c001b8ac:	83 ec 0c             	sub    esp,0xc
c001b8af:	68 14 01 00 00       	push   0x114
c001b8b4:	e8 70 3f ff ff       	call   c000f829 <malloc>
c001b8b9:	83 c4 0c             	add    esp,0xc
c001b8bc:	89 c7                	mov    edi,eax
c001b8be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b8c6:	53                   	push   ebx
c001b8c7:	57                   	push   edi
c001b8c8:	e8 13 75 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c001b8cd:	83 c4 0c             	add    esp,0xc
c001b8d0:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b8d4:	50                   	push   eax
c001b8d5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b8d8:	57                   	push   edi
c001b8d9:	e8 12 78 ff ff       	call   c00130f0 <File::stat(unsigned long long*, bool*)>
c001b8de:	83 c4 10             	add    esp,0x10
c001b8e1:	85 ff                	test   edi,edi
c001b8e3:	74 14                	je     c001b8f9 <sysCallSizeFromFilename(regs*)+0x86>
c001b8e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8e9:	8b 17                	mov    edx,DWORD PTR [edi]
c001b8eb:	83 ec 0c             	sub    esp,0xc
c001b8ee:	57                   	push   edi
c001b8ef:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b8f2:	83 c4 10             	add    esp,0x10
c001b8f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8f9:	85 c0                	test   eax,eax
c001b8fb:	0f 95 c0             	setne  al
c001b8fe:	31 d2                	xor    edx,edx
c001b900:	0f b6 c0             	movzx  eax,al
c001b903:	f7 d8                	neg    eax
c001b905:	83 d2 00             	adc    edx,0x0
c001b908:	83 c4 20             	add    esp,0x20
c001b90b:	f7 da                	neg    edx
c001b90d:	5b                   	pop    ebx
c001b90e:	5e                   	pop    esi
c001b90f:	5f                   	pop    edi
c001b910:	c3                   	ret    
c001b911:	83 c4 20             	add    esp,0x20
c001b914:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b919:	5b                   	pop    ebx
c001b91a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b91f:	5e                   	pop    esi
c001b920:	5f                   	pop    edi
c001b921:	c3                   	ret    

c001b922 <sysCallClose(regs*)>:
c001b922:	53                   	push   ebx
c001b923:	83 ec 08             	sub    esp,0x8
c001b926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b92a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b92d:	83 f8 02             	cmp    eax,0x2
c001b930:	76 41                	jbe    c001b973 <sysCallClose(regs*)+0x51>
c001b932:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b938:	83 fa 01             	cmp    edx,0x1
c001b93b:	76 2d                	jbe    c001b96a <sysCallClose(regs*)+0x48>
c001b93d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b942:	77 2f                	ja     c001b973 <sysCallClose(regs*)+0x51>
c001b944:	83 ec 0c             	sub    esp,0xc
c001b947:	50                   	push   eax
c001b948:	e8 0c 5a ff ff       	call   c0011359 <getFromFileDescriptor(int)>
c001b94d:	89 c3                	mov    ebx,eax
c001b94f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b952:	e8 4b 75 ff ff       	call   c0012ea2 <File::close()>
c001b957:	83 c4 10             	add    esp,0x10
c001b95a:	85 db                	test   ebx,ebx
c001b95c:	74 0c                	je     c001b96a <sysCallClose(regs*)+0x48>
c001b95e:	83 ec 0c             	sub    esp,0xc
c001b961:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b963:	53                   	push   ebx
c001b964:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b967:	83 c4 10             	add    esp,0x10
c001b96a:	31 c0                	xor    eax,eax
c001b96c:	31 d2                	xor    edx,edx
c001b96e:	83 c4 08             	add    esp,0x8
c001b971:	5b                   	pop    ebx
c001b972:	c3                   	ret    
c001b973:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b978:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b97d:	83 c4 08             	add    esp,0x8
c001b980:	5b                   	pop    ebx
c001b981:	c3                   	ret    

c001b982 <sysCallOpenDir(regs*)>:
c001b982:	56                   	push   esi
c001b983:	53                   	push   ebx
c001b984:	53                   	push   ebx
c001b985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b989:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b98c:	85 f6                	test   esi,esi
c001b98e:	74 59                	je     c001b9e9 <sysCallOpenDir(regs*)+0x67>
c001b990:	83 ec 0c             	sub    esp,0xc
c001b993:	68 14 01 00 00       	push   0x114
c001b998:	e8 8c 3e ff ff       	call   c000f829 <malloc>
c001b99d:	83 c4 0c             	add    esp,0xc
c001b9a0:	89 c6                	mov    esi,eax
c001b9a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9a7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9ad:	56                   	push   esi
c001b9ae:	e8 d9 78 ff ff       	call   c001328c <Directory::Directory(char const*, Process*)>
c001b9b3:	83 c4 10             	add    esp,0x10
c001b9b6:	85 f6                	test   esi,esi
c001b9b8:	74 2f                	je     c001b9e9 <sysCallOpenDir(regs*)+0x67>
c001b9ba:	83 ec 0c             	sub    esp,0xc
c001b9bd:	56                   	push   esi
c001b9be:	e8 2d 79 ff ff       	call   c00132f0 <Directory::open()>
c001b9c3:	83 c4 10             	add    esp,0x10
c001b9c6:	85 c0                	test   eax,eax
c001b9c8:	75 1f                	jne    c001b9e9 <sysCallOpenDir(regs*)+0x67>
c001b9ca:	83 ec 0c             	sub    esp,0xc
c001b9cd:	56                   	push   esi
c001b9ce:	e8 91 56 ff ff       	call   c0011064 <UnixFile::getFileDescriptor()>
c001b9d3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b9d6:	83 c4 10             	add    esp,0x10
c001b9d9:	89 02                	mov    DWORD PTR [edx],eax
c001b9db:	c1 f8 1f             	sar    eax,0x1f
c001b9de:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b9e1:	31 c0                	xor    eax,eax
c001b9e3:	59                   	pop    ecx
c001b9e4:	31 d2                	xor    edx,edx
c001b9e6:	5b                   	pop    ebx
c001b9e7:	5e                   	pop    esi
c001b9e8:	c3                   	ret    
c001b9e9:	59                   	pop    ecx
c001b9ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9f4:	5b                   	pop    ebx
c001b9f5:	5e                   	pop    esi
c001b9f6:	c3                   	ret    

c001b9f7 <sysCallCloseDir(regs*)>:
c001b9f7:	53                   	push   ebx
c001b9f8:	83 ec 08             	sub    esp,0x8
c001b9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba02:	8d 50 fd             	lea    edx,[eax-0x3]
c001ba05:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001ba0b:	77 2f                	ja     c001ba3c <sysCallCloseDir(regs*)+0x45>
c001ba0d:	83 ec 0c             	sub    esp,0xc
c001ba10:	50                   	push   eax
c001ba11:	e8 43 59 ff ff       	call   c0011359 <getFromFileDescriptor(int)>
c001ba16:	89 c3                	mov    ebx,eax
c001ba18:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba1b:	e8 2c 79 ff ff       	call   c001334c <Directory::close()>
c001ba20:	83 c4 10             	add    esp,0x10
c001ba23:	85 db                	test   ebx,ebx
c001ba25:	74 0c                	je     c001ba33 <sysCallCloseDir(regs*)+0x3c>
c001ba27:	83 ec 0c             	sub    esp,0xc
c001ba2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba2c:	53                   	push   ebx
c001ba2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba30:	83 c4 10             	add    esp,0x10
c001ba33:	31 c0                	xor    eax,eax
c001ba35:	31 d2                	xor    edx,edx
c001ba37:	83 c4 08             	add    esp,0x8
c001ba3a:	5b                   	pop    ebx
c001ba3b:	c3                   	ret    
c001ba3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba41:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba46:	83 c4 08             	add    esp,0x8
c001ba49:	5b                   	pop    ebx
c001ba4a:	c3                   	ret    

c001ba4b <sysCallMakeDir(regs*)>:
c001ba4b:	56                   	push   esi
c001ba4c:	53                   	push   ebx
c001ba4d:	83 ec 10             	sub    esp,0x10
c001ba50:	68 14 01 00 00       	push   0x114
c001ba55:	e8 cf 3d ff ff       	call   c000f829 <malloc>
c001ba5a:	83 c4 0c             	add    esp,0xc
c001ba5d:	89 c3                	mov    ebx,eax
c001ba5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba64:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba6b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba6e:	53                   	push   ebx
c001ba6f:	e8 18 78 ff ff       	call   c001328c <Directory::Directory(char const*, Process*)>
c001ba74:	83 c4 10             	add    esp,0x10
c001ba77:	85 db                	test   ebx,ebx
c001ba79:	74 32                	je     c001baad <sysCallMakeDir(regs*)+0x62>
c001ba7b:	83 ec 0c             	sub    esp,0xc
c001ba7e:	53                   	push   ebx
c001ba7f:	e8 4c 7a ff ff       	call   c00134d0 <Directory::create()>
c001ba84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba87:	89 c6                	mov    esi,eax
c001ba89:	e8 be 78 ff ff       	call   c001334c <Directory::close()>
c001ba8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba96:	83 c4 10             	add    esp,0x10
c001ba99:	31 c0                	xor    eax,eax
c001ba9b:	59                   	pop    ecx
c001ba9c:	85 f6                	test   esi,esi
c001ba9e:	5b                   	pop    ebx
c001ba9f:	0f 95 c0             	setne  al
c001baa2:	5e                   	pop    esi
c001baa3:	31 d2                	xor    edx,edx
c001baa5:	f7 d8                	neg    eax
c001baa7:	83 d2 00             	adc    edx,0x0
c001baaa:	f7 da                	neg    edx
c001baac:	c3                   	ret    
c001baad:	59                   	pop    ecx
c001baae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bab3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bab8:	5b                   	pop    ebx
c001bab9:	5e                   	pop    esi
c001baba:	c3                   	ret    

c001babb <sysCallWait(regs*)>:
c001babb:	83 ec 10             	sub    esp,0x10
c001babe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bac2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bac5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bac8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bacb:	e8 b4 24 00 00       	call   c001df84 <waitTask(int, int*, int)>
c001bad0:	83 c4 1c             	add    esp,0x1c
c001bad3:	99                   	cdq    
c001bad4:	c3                   	ret    

c001bad5 <sysCallNotImpl(regs*)>:
c001bad5:	83 ec 18             	sub    esp,0x18
c001bad8:	68 ad c2 02 c0       	push   0xc002c2ad
c001badd:	e8 0d e7 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001bae2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bae7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baec:	83 c4 1c             	add    esp,0x1c
c001baef:	c3                   	ret    

c001baf0 <sysPanic(regs*)>:
c001baf0:	83 ec 18             	sub    esp,0x18
c001baf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001baf7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bafa:	e8 f0 e6 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001baff:	b8 01 00 00 00       	mov    eax,0x1
c001bb04:	31 d2                	xor    edx,edx
c001bb06:	83 c4 1c             	add    esp,0x1c
c001bb09:	c3                   	ret    

c001bb0a <sysCallRmdir(regs*)>:
c001bb0a:	56                   	push   esi
c001bb0b:	53                   	push   ebx
c001bb0c:	83 ec 20             	sub    esp,0x20
c001bb0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bb13:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bb16:	68 14 01 00 00       	push   0x114
c001bb1b:	e8 09 3d ff ff       	call   c000f829 <malloc>
c001bb20:	83 c4 0c             	add    esp,0xc
c001bb23:	89 c3                	mov    ebx,eax
c001bb25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb2a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb2d:	56                   	push   esi
c001bb2e:	53                   	push   ebx
c001bb2f:	e8 ac 72 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c001bb34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb37:	e8 80 74 ff ff       	call   c0012fbc <File::unlink()>
c001bb3c:	83 c4 10             	add    esp,0x10
c001bb3f:	85 db                	test   ebx,ebx
c001bb41:	74 14                	je     c001bb57 <sysCallRmdir(regs*)+0x4d>
c001bb43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb47:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb49:	83 ec 0c             	sub    esp,0xc
c001bb4c:	53                   	push   ebx
c001bb4d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb50:	83 c4 10             	add    esp,0x10
c001bb53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb57:	85 c0                	test   eax,eax
c001bb59:	0f 95 c0             	setne  al
c001bb5c:	31 d2                	xor    edx,edx
c001bb5e:	0f b6 c0             	movzx  eax,al
c001bb61:	f7 d8                	neg    eax
c001bb63:	83 d2 00             	adc    edx,0x0
c001bb66:	83 c4 14             	add    esp,0x14
c001bb69:	f7 da                	neg    edx
c001bb6b:	5b                   	pop    ebx
c001bb6c:	5e                   	pop    esi
c001bb6d:	c3                   	ret    

c001bb6e <sysCallUnlink(regs*)>:
c001bb6e:	56                   	push   esi
c001bb6f:	53                   	push   ebx
c001bb70:	83 ec 20             	sub    esp,0x20
c001bb73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bb77:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bb7a:	68 14 01 00 00       	push   0x114
c001bb7f:	e8 a5 3c ff ff       	call   c000f829 <malloc>
c001bb84:	83 c4 0c             	add    esp,0xc
c001bb87:	89 c3                	mov    ebx,eax
c001bb89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb8e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb91:	56                   	push   esi
c001bb92:	53                   	push   ebx
c001bb93:	e8 48 72 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c001bb98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb9b:	e8 1c 74 ff ff       	call   c0012fbc <File::unlink()>
c001bba0:	83 c4 10             	add    esp,0x10
c001bba3:	85 db                	test   ebx,ebx
c001bba5:	74 14                	je     c001bbbb <sysCallUnlink(regs*)+0x4d>
c001bba7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbab:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bbad:	83 ec 0c             	sub    esp,0xc
c001bbb0:	53                   	push   ebx
c001bbb1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbb4:	83 c4 10             	add    esp,0x10
c001bbb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbbb:	85 c0                	test   eax,eax
c001bbbd:	0f 95 c0             	setne  al
c001bbc0:	31 d2                	xor    edx,edx
c001bbc2:	0f b6 c0             	movzx  eax,al
c001bbc5:	f7 d8                	neg    eax
c001bbc7:	83 d2 00             	adc    edx,0x0
c001bbca:	83 c4 14             	add    esp,0x14
c001bbcd:	f7 da                	neg    edx
c001bbcf:	5b                   	pop    ebx
c001bbd0:	5e                   	pop    esi
c001bbd1:	c3                   	ret    

c001bbd2 <sysCallGetArgv(regs*)>:
c001bbd2:	83 ec 0c             	sub    esp,0xc
c001bbd5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bbd9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bbdc:	85 c0                	test   eax,eax
c001bbde:	78 2b                	js     c001bc0b <sysCallGetArgv(regs*)+0x39>
c001bbe0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bbe6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bbe9:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bbef:	7d 1a                	jge    c001bc0b <sysCallGetArgv(regs*)+0x39>
c001bbf1:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bbf8:	85 c0                	test   eax,eax
c001bbfa:	74 17                	je     c001bc13 <sysCallGetArgv(regs*)+0x41>
c001bbfc:	83 ec 08             	sub    esp,0x8
c001bbff:	50                   	push   eax
c001bc00:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bc03:	e8 04 4c fe ff       	call   c000080c <strcpy>
c001bc08:	83 c4 10             	add    esp,0x10
c001bc0b:	31 c0                	xor    eax,eax
c001bc0d:	31 d2                	xor    edx,edx
c001bc0f:	83 c4 0c             	add    esp,0xc
c001bc12:	c3                   	ret    
c001bc13:	b8 01 00 00 00       	mov    eax,0x1
c001bc18:	31 d2                	xor    edx,edx
c001bc1a:	83 c4 0c             	add    esp,0xc
c001bc1d:	c3                   	ret    

c001bc1e <sysCallTTYName(regs*)>:
c001bc1e:	56                   	push   esi
c001bc1f:	53                   	push   ebx
c001bc20:	53                   	push   ebx
c001bc21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc25:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bc28:	85 c0                	test   eax,eax
c001bc2a:	74 5f                	je     c001bc8b <sysCallTTYName(regs*)+0x6d>
c001bc2c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bc2f:	83 f8 02             	cmp    eax,0x2
c001bc32:	77 3e                	ja     c001bc72 <sysCallTTYName(regs*)+0x54>
c001bc34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc39:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc3c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bc42:	85 db                	test   ebx,ebx
c001bc44:	74 45                	je     c001bc8b <sysCallTTYName(regs*)+0x6d>
c001bc46:	83 ec 0c             	sub    esp,0xc
c001bc49:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc4b:	53                   	push   ebx
c001bc4c:	ff 10                	call   DWORD PTR [eax]
c001bc4e:	83 c4 10             	add    esp,0x10
c001bc51:	84 c0                	test   al,al
c001bc53:	74 41                	je     c001bc96 <sysCallTTYName(regs*)+0x78>
c001bc55:	83 ec 08             	sub    esp,0x8
c001bc58:	81 c3 82 00 00 00    	add    ebx,0x82
c001bc5e:	53                   	push   ebx
c001bc5f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bc62:	e8 a5 4b fe ff       	call   c000080c <strcpy>
c001bc67:	83 c4 10             	add    esp,0x10
c001bc6a:	31 c0                	xor    eax,eax
c001bc6c:	59                   	pop    ecx
c001bc6d:	31 d2                	xor    edx,edx
c001bc6f:	5b                   	pop    ebx
c001bc70:	5e                   	pop    esi
c001bc71:	c3                   	ret    
c001bc72:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc77:	74 bb                	je     c001bc34 <sysCallTTYName(regs*)+0x16>
c001bc79:	83 ec 0c             	sub    esp,0xc
c001bc7c:	50                   	push   eax
c001bc7d:	e8 d7 56 ff ff       	call   c0011359 <getFromFileDescriptor(int)>
c001bc82:	83 c4 10             	add    esp,0x10
c001bc85:	89 c3                	mov    ebx,eax
c001bc87:	85 db                	test   ebx,ebx
c001bc89:	75 bb                	jne    c001bc46 <sysCallTTYName(regs*)+0x28>
c001bc8b:	59                   	pop    ecx
c001bc8c:	b8 01 00 00 00       	mov    eax,0x1
c001bc91:	31 d2                	xor    edx,edx
c001bc93:	5b                   	pop    ebx
c001bc94:	5e                   	pop    esi
c001bc95:	c3                   	ret    
c001bc96:	59                   	pop    ecx
c001bc97:	b8 02 00 00 00       	mov    eax,0x2
c001bc9c:	31 d2                	xor    edx,edx
c001bc9e:	5b                   	pop    ebx
c001bc9f:	5e                   	pop    esi
c001bca0:	c3                   	ret    

c001bca1 <sysCallUSleep(regs*)>:
c001bca1:	83 ec 14             	sub    esp,0x14
c001bca4:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bca9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bcad:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bcb4:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bcb7:	01 ca                	add    edx,ecx
c001bcb9:	52                   	push   edx
c001bcba:	50                   	push   eax
c001bcbb:	e8 9b 23 00 00       	call   c001e05b <nanoSleep(unsigned long long)>
c001bcc0:	31 c0                	xor    eax,eax
c001bcc2:	31 d2                	xor    edx,edx
c001bcc4:	83 c4 1c             	add    esp,0x1c
c001bcc7:	c3                   	ret    

c001bcc8 <sysCallSpawn(regs*)>:
c001bcc8:	56                   	push   esi
c001bcc9:	53                   	push   ebx
c001bcca:	50                   	push   eax
c001bccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bccf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bcd2:	85 c0                	test   eax,eax
c001bcd4:	75 08                	jne    c001bcde <sysCallSpawn(regs*)+0x16>
c001bcd6:	59                   	pop    ecx
c001bcd7:	31 c0                	xor    eax,eax
c001bcd9:	31 d2                	xor    edx,edx
c001bcdb:	5b                   	pop    ebx
c001bcdc:	5e                   	pop    esi
c001bcdd:	c3                   	ret    
c001bcde:	83 ec 0c             	sub    esp,0xc
c001bce1:	68 3f 07 00 00       	push   0x73f
c001bce6:	e8 3e 3b ff ff       	call   c000f829 <malloc>
c001bceb:	83 c4 10             	add    esp,0x10
c001bcee:	89 c6                	mov    esi,eax
c001bcf0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bcf3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcf6:	85 c0                	test   eax,eax
c001bcf8:	75 32                	jne    c001bd2c <sysCallSpawn(regs*)+0x64>
c001bcfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd02:	52                   	push   edx
c001bd03:	50                   	push   eax
c001bd04:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd07:	56                   	push   esi
c001bd08:	e8 73 1a 00 00       	call   c001d780 <Process::Process(char const*, Process*, char**)>
c001bd0d:	83 c4 10             	add    esp,0x10
c001bd10:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bd17:	75 bd                	jne    c001bcd6 <sysCallSpawn(regs*)+0xe>
c001bd19:	83 ec 0c             	sub    esp,0xc
c001bd1c:	56                   	push   esi
c001bd1d:	e8 40 1f 00 00       	call   c001dc62 <Process::createUserThread()>
c001bd22:	8b 06                	mov    eax,DWORD PTR [esi]
c001bd24:	83 c4 10             	add    esp,0x10
c001bd27:	99                   	cdq    
c001bd28:	59                   	pop    ecx
c001bd29:	5b                   	pop    ebx
c001bd2a:	5e                   	pop    esi
c001bd2b:	c3                   	ret    
c001bd2c:	31 c0                	xor    eax,eax
c001bd2e:	eb d2                	jmp    c001bd02 <sysCallSpawn(regs*)+0x3a>

c001bd30 <sysCallGetEnv(regs*)>:
c001bd30:	57                   	push   edi
c001bd31:	56                   	push   esi
c001bd32:	53                   	push   ebx
c001bd33:	83 ec 1c             	sub    esp,0x1c
c001bd36:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bd3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd3f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001bd42:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bd45:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd48:	e8 ee e3 ff ff       	call   c001a13b <Krnl::getProcessTotalEnvCount(Process*)>
c001bd4d:	83 c4 10             	add    esp,0x10
c001bd50:	39 c7                	cmp    edi,eax
c001bd52:	7c 14                	jl     c001bd68 <sysCallGetEnv(regs*)+0x38>
c001bd54:	85 f6                	test   esi,esi
c001bd56:	75 0b                	jne    c001bd63 <sysCallGetEnv(regs*)+0x33>
c001bd58:	83 c4 10             	add    esp,0x10
c001bd5b:	31 c0                	xor    eax,eax
c001bd5d:	5b                   	pop    ebx
c001bd5e:	31 d2                	xor    edx,edx
c001bd60:	5e                   	pop    esi
c001bd61:	5f                   	pop    edi
c001bd62:	c3                   	ret    
c001bd63:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bd66:	eb f0                	jmp    c001bd58 <sysCallGetEnv(regs*)+0x28>
c001bd68:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd6c:	52                   	push   edx
c001bd6d:	57                   	push   edi
c001bd6e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bd74:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bd77:	50                   	push   eax
c001bd78:	e8 de e3 ff ff       	call   c001a15b <Krnl::getProcessEnvPair(Process*, int)>
c001bd7d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bd80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd84:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bd88:	83 c4 0c             	add    esp,0xc
c001bd8b:	85 c9                	test   ecx,ecx
c001bd8d:	75 23                	jne    c001bdb2 <sysCallGetEnv(regs*)+0x82>
c001bd8f:	83 ec 0c             	sub    esp,0xc
c001bd92:	50                   	push   eax
c001bd93:	e8 d4 49 fe ff       	call   c000076c <strlen>
c001bd98:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd9b:	89 c3                	mov    ebx,eax
c001bd9d:	e8 ca 49 fe ff       	call   c000076c <strlen>
c001bda2:	83 c4 10             	add    esp,0x10
c001bda5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bda9:	83 c4 10             	add    esp,0x10
c001bdac:	31 d2                	xor    edx,edx
c001bdae:	5b                   	pop    ebx
c001bdaf:	5e                   	pop    esi
c001bdb0:	5f                   	pop    edi
c001bdb1:	c3                   	ret    
c001bdb2:	83 ec 08             	sub    esp,0x8
c001bdb5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bdb8:	50                   	push   eax
c001bdb9:	56                   	push   esi
c001bdba:	e8 4d 4a fe ff       	call   c000080c <strcpy>
c001bdbf:	58                   	pop    eax
c001bdc0:	5a                   	pop    edx
c001bdc1:	68 c7 c2 02 c0       	push   0xc002c2c7
c001bdc6:	56                   	push   esi
c001bdc7:	e8 80 4b fe ff       	call   c000094c <strcat>
c001bdcc:	59                   	pop    ecx
c001bdcd:	5b                   	pop    ebx
c001bdce:	57                   	push   edi
c001bdcf:	56                   	push   esi
c001bdd0:	e8 77 4b fe ff       	call   c000094c <strcat>
c001bdd5:	83 c4 10             	add    esp,0x10
c001bdd8:	e9 7b ff ff ff       	jmp    c001bd58 <sysCallGetEnv(regs*)+0x28>

c001bddd <sysAppSettings(regs*)>:
c001bddd:	57                   	push   edi
c001bdde:	56                   	push   esi
c001bddf:	56                   	push   esi
c001bde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bde7:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bded:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bdf2:	66 3d c0 09          	cmp    ax,0x9c0
c001bdf6:	75 2e                	jne    c001be26 <sysAppSettings(regs*)+0x49>
c001bdf8:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bdfe:	83 e0 1f             	and    eax,0x1f
c001be01:	3c 01                	cmp    al,0x1
c001be03:	74 2c                	je     c001be31 <sysAppSettings(regs*)+0x54>
c001be05:	3c 07                	cmp    al,0x7
c001be07:	0f 84 b3 00 00 00    	je     c001bec0 <sysAppSettings(regs*)+0xe3>
c001be0d:	84 c0                	test   al,al
c001be0f:	0f 84 d2 00 00 00    	je     c001bee7 <sysAppSettings(regs*)+0x10a>
c001be15:	3c 08                	cmp    al,0x8
c001be17:	74 63                	je     c001be7c <sysAppSettings(regs*)+0x9f>
c001be19:	59                   	pop    ecx
c001be1a:	0f b6 c0             	movzx  eax,al
c001be1d:	5e                   	pop    esi
c001be1e:	05 e8 03 00 00       	add    eax,0x3e8
c001be23:	5f                   	pop    edi
c001be24:	99                   	cdq    
c001be25:	c3                   	ret    
c001be26:	b8 01 00 00 00       	mov    eax,0x1
c001be2b:	59                   	pop    ecx
c001be2c:	31 d2                	xor    edx,edx
c001be2e:	5e                   	pop    esi
c001be2f:	5f                   	pop    edi
c001be30:	c3                   	ret    
c001be31:	50                   	push   eax
c001be32:	68 00 01 00 00       	push   0x100
c001be37:	6a 00                	push   0x0
c001be39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be41:	83 c0 0c             	add    eax,0xc
c001be44:	50                   	push   eax
c001be45:	e8 06 49 fe ff       	call   c0000750 <memset>
c001be4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be4f:	b9 ff 00 00 00       	mov    ecx,0xff
c001be54:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001be57:	83 c7 0c             	add    edi,0xc
c001be5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001be5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be61:	5a                   	pop    edx
c001be62:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be65:	59                   	pop    ecx
c001be66:	8d 50 0c             	lea    edx,[eax+0xc]
c001be69:	52                   	push   edx
c001be6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001be70:	e8 0d 46 ff ff       	call   c0010482 <VgaText::setTitle(char*)>
c001be75:	83 c4 10             	add    esp,0x10
c001be78:	31 c0                	xor    eax,eax
c001be7a:	eb af                	jmp    c001be2b <sysAppSettings(regs*)+0x4e>
c001be7c:	83 ec 08             	sub    esp,0x8
c001be7f:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001be85:	83 e0 0f             	and    eax,0xf
c001be88:	50                   	push   eax
c001be89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be8e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001be97:	e8 d6 45 ff ff       	call   c0010472 <VgaText::setTitleColour(VgaColour)>
c001be9c:	5f                   	pop    edi
c001be9d:	58                   	pop    eax
c001be9e:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bea4:	c1 e8 04             	shr    eax,0x4
c001bea7:	83 e0 0f             	and    eax,0xf
c001beaa:	50                   	push   eax
c001beab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beb0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beb3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001beb9:	e8 a4 45 ff ff       	call   c0010462 <VgaText::setTitleTextColour(VgaColour)>
c001bebe:	eb b5                	jmp    c001be75 <sysAppSettings(regs*)+0x98>
c001bec0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bec5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bec8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bece:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bed4:	c0 e8 06             	shr    al,0x6
c001bed7:	83 e0 01             	and    eax,0x1
c001beda:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bee0:	31 c0                	xor    eax,eax
c001bee2:	e9 44 ff ff ff       	jmp    c001be2b <sysAppSettings(regs*)+0x4e>
c001bee7:	b8 02 00 00 00       	mov    eax,0x2
c001beec:	e9 3a ff ff ff       	jmp    c001be2b <sysAppSettings(regs*)+0x4e>

c001bef1 <sysSetFatAttrib(regs*)>:
c001bef1:	57                   	push   edi
c001bef2:	56                   	push   esi
c001bef3:	53                   	push   ebx
c001bef4:	83 ec 1c             	sub    esp,0x1c
c001bef7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001befb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001befe:	68 14 01 00 00       	push   0x114
c001bf03:	e8 21 39 ff ff       	call   c000f829 <malloc>
c001bf08:	83 c4 0c             	add    esp,0xc
c001bf0b:	89 c3                	mov    ebx,eax
c001bf0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf12:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf15:	57                   	push   edi
c001bf16:	53                   	push   ebx
c001bf17:	e8 c4 6e ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c001bf1c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bf1f:	83 c4 0c             	add    esp,0xc
c001bf22:	0f b6 d4             	movzx  edx,ah
c001bf25:	0f b6 c0             	movzx  eax,al
c001bf28:	52                   	push   edx
c001bf29:	50                   	push   eax
c001bf2a:	53                   	push   ebx
c001bf2b:	e8 26 71 ff ff       	call   c0013056 <File::chfatattr(unsigned char, unsigned char)>
c001bf30:	83 c4 10             	add    esp,0x10
c001bf33:	85 db                	test   ebx,ebx
c001bf35:	74 14                	je     c001bf4b <sysSetFatAttrib(regs*)+0x5a>
c001bf37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf3b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf3d:	83 ec 0c             	sub    esp,0xc
c001bf40:	53                   	push   ebx
c001bf41:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf44:	83 c4 10             	add    esp,0x10
c001bf47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf4b:	85 c0                	test   eax,eax
c001bf4d:	0f 95 c0             	setne  al
c001bf50:	31 d2                	xor    edx,edx
c001bf52:	0f b6 c0             	movzx  eax,al
c001bf55:	f7 d8                	neg    eax
c001bf57:	83 d2 00             	adc    edx,0x0
c001bf5a:	83 c4 10             	add    esp,0x10
c001bf5d:	f7 da                	neg    edx
c001bf5f:	5b                   	pop    ebx
c001bf60:	5e                   	pop    esi
c001bf61:	5f                   	pop    edi
c001bf62:	c3                   	ret    

c001bf63 <sysPipe(regs*)>:
c001bf63:	57                   	push   edi
c001bf64:	56                   	push   esi
c001bf65:	53                   	push   ebx
c001bf66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf6a:	83 ec 0c             	sub    esp,0xc
c001bf6d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bf70:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bf73:	6a 20                	push   0x20
c001bf75:	e8 af 38 ff ff       	call   c000f829 <malloc>
c001bf7a:	89 c3                	mov    ebx,eax
c001bf7c:	58                   	pop    eax
c001bf7d:	5a                   	pop    edx
c001bf7e:	68 00 50 00 00       	push   0x5000
c001bf83:	53                   	push   ebx
c001bf84:	e8 71 42 ff ff       	call   c00101fa <Pipe::Pipe(int)>
c001bf89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf8c:	e8 d3 50 ff ff       	call   c0011064 <UnixFile::getFileDescriptor()>
c001bf91:	89 07                	mov    DWORD PTR [edi],eax
c001bf93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf96:	e8 c9 50 ff ff       	call   c0011064 <UnixFile::getFileDescriptor()>
c001bf9b:	83 c4 10             	add    esp,0x10
c001bf9e:	89 06                	mov    DWORD PTR [esi],eax
c001bfa0:	31 d2                	xor    edx,edx
c001bfa2:	5b                   	pop    ebx
c001bfa3:	31 c0                	xor    eax,eax
c001bfa5:	5e                   	pop    esi
c001bfa6:	5f                   	pop    edi
c001bfa7:	c3                   	ret    

c001bfa8 <sysGetUnixTime(regs*)>:
c001bfa8:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001bfad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bfb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bfb7:	e9 16 78 ff ff       	jmp    c00137d2 <Clock::timeInSecondsLocal()>

c001bfbc <string_ends_with(char const*, char const*)>:
c001bfbc:	57                   	push   edi
c001bfbd:	56                   	push   esi
c001bfbe:	53                   	push   ebx
c001bfbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfc3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bfc7:	83 ec 0c             	sub    esp,0xc
c001bfca:	53                   	push   ebx
c001bfcb:	e8 9c 47 fe ff       	call   c000076c <strlen>
c001bfd0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfd3:	89 c6                	mov    esi,eax
c001bfd5:	e8 92 47 fe ff       	call   c000076c <strlen>
c001bfda:	83 c4 10             	add    esp,0x10
c001bfdd:	39 c6                	cmp    esi,eax
c001bfdf:	7d 06                	jge    c001bfe7 <string_ends_with(char const*, char const*)+0x2b>
c001bfe1:	5b                   	pop    ebx
c001bfe2:	31 c0                	xor    eax,eax
c001bfe4:	5e                   	pop    esi
c001bfe5:	5f                   	pop    edi
c001bfe6:	c3                   	ret    
c001bfe7:	83 ec 08             	sub    esp,0x8
c001bfea:	29 c6                	sub    esi,eax
c001bfec:	57                   	push   edi
c001bfed:	01 f3                	add    ebx,esi
c001bfef:	53                   	push   ebx
c001bff0:	e8 a3 48 fe ff       	call   c0000898 <strcmp>
c001bff5:	83 c4 10             	add    esp,0x10
c001bff8:	85 c0                	test   eax,eax
c001bffa:	5b                   	pop    ebx
c001bffb:	0f 94 c0             	sete   al
c001bffe:	5e                   	pop    esi
c001bfff:	0f b6 c0             	movzx  eax,al
c001c002:	5f                   	pop    edi
c001c003:	c3                   	ret    

c001c004 <sysCallOpen(regs*)>:
c001c004:	56                   	push   esi
c001c005:	53                   	push   ebx
c001c006:	81 ec 04 01 00 00    	sub    esp,0x104
c001c00c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c013:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c016:	85 c9                	test   ecx,ecx
c001c018:	0f 84 ad 01 00 00    	je     c001c1cb <sysCallOpen(regs*)+0x1c7>
c001c01e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c021:	85 c0                	test   eax,eax
c001c023:	0f 84 a2 01 00 00    	je     c001c1cb <sysCallOpen(regs*)+0x1c7>
c001c029:	52                   	push   edx
c001c02a:	68 c9 c2 02 c0       	push   0xc002c2c9
c001c02f:	50                   	push   eax
c001c030:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c034:	56                   	push   esi
c001c035:	e8 fc 6b ff ff       	call   c0012c36 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c03a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c03d:	e8 2a 47 fe ff       	call   c000076c <strlen>
c001c042:	83 c4 10             	add    esp,0x10
c001c045:	48                   	dec    eax
c001c046:	74 1d                	je     c001c065 <sysCallOpen(regs*)+0x61>
c001c048:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c04b:	eb 0f                	jmp    c001c05c <sysCallOpen(regs*)+0x58>
c001c04d:	80 fa 3a             	cmp    dl,0x3a
c001c050:	74 0f                	je     c001c061 <sysCallOpen(regs*)+0x5d>
c001c052:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c056:	48                   	dec    eax
c001c057:	74 0c                	je     c001c065 <sysCallOpen(regs*)+0x61>
c001c059:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c05c:	80 fa 2e             	cmp    dl,0x2e
c001c05f:	75 ec                	jne    c001c04d <sysCallOpen(regs*)+0x49>
c001c061:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c065:	83 ec 08             	sub    esp,0x8
c001c068:	68 cd c2 02 c0       	push   0xc002c2cd
c001c06d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c070:	e8 47 ff ff ff       	call   c001bfbc <string_ends_with(char const*, char const*)>
c001c075:	83 c4 10             	add    esp,0x10
c001c078:	85 c0                	test   eax,eax
c001c07a:	74 1d                	je     c001c099 <sysCallOpen(regs*)+0x95>
c001c07c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c07f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c085:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c08c:	81 c4 04 01 00 00    	add    esp,0x104
c001c092:	31 c0                	xor    eax,eax
c001c094:	31 d2                	xor    edx,edx
c001c096:	5b                   	pop    ebx
c001c097:	5e                   	pop    esi
c001c098:	c3                   	ret    
c001c099:	83 ec 08             	sub    esp,0x8
c001c09c:	68 d2 c2 02 c0       	push   0xc002c2d2
c001c0a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0a4:	e8 13 ff ff ff       	call   c001bfbc <string_ends_with(char const*, char const*)>
c001c0a9:	83 c4 10             	add    esp,0x10
c001c0ac:	85 c0                	test   eax,eax
c001c0ae:	75 cc                	jne    c001c07c <sysCallOpen(regs*)+0x78>
c001c0b0:	83 ec 08             	sub    esp,0x8
c001c0b3:	68 ce c2 02 c0       	push   0xc002c2ce
c001c0b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0bb:	e8 d8 47 fe ff       	call   c0000898 <strcmp>
c001c0c0:	83 c4 10             	add    esp,0x10
c001c0c3:	85 c0                	test   eax,eax
c001c0c5:	74 b5                	je     c001c07c <sysCallOpen(regs*)+0x78>
c001c0c7:	83 ec 08             	sub    esp,0x8
c001c0ca:	68 cd c2 02 c0       	push   0xc002c2cd
c001c0cf:	56                   	push   esi
c001c0d0:	e8 e7 fe ff ff       	call   c001bfbc <string_ends_with(char const*, char const*)>
c001c0d5:	83 c4 10             	add    esp,0x10
c001c0d8:	85 c0                	test   eax,eax
c001c0da:	75 a0                	jne    c001c07c <sysCallOpen(regs*)+0x78>
c001c0dc:	83 ec 08             	sub    esp,0x8
c001c0df:	68 d7 c2 02 c0       	push   0xc002c2d7
c001c0e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0e7:	e8 d0 fe ff ff       	call   c001bfbc <string_ends_with(char const*, char const*)>
c001c0ec:	83 c4 10             	add    esp,0x10
c001c0ef:	85 c0                	test   eax,eax
c001c0f1:	0f 85 e7 00 00 00    	jne    c001c1de <sysCallOpen(regs*)+0x1da>
c001c0f7:	83 ec 08             	sub    esp,0x8
c001c0fa:	68 dc c2 02 c0       	push   0xc002c2dc
c001c0ff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c102:	e8 b5 fe ff ff       	call   c001bfbc <string_ends_with(char const*, char const*)>
c001c107:	83 c4 10             	add    esp,0x10
c001c10a:	85 c0                	test   eax,eax
c001c10c:	0f 85 cc 00 00 00    	jne    c001c1de <sysCallOpen(regs*)+0x1da>
c001c112:	83 ec 08             	sub    esp,0x8
c001c115:	68 d8 c2 02 c0       	push   0xc002c2d8
c001c11a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c11d:	e8 76 47 fe ff       	call   c0000898 <strcmp>
c001c122:	83 c4 10             	add    esp,0x10
c001c125:	85 c0                	test   eax,eax
c001c127:	0f 84 b1 00 00 00    	je     c001c1de <sysCallOpen(regs*)+0x1da>
c001c12d:	83 ec 08             	sub    esp,0x8
c001c130:	68 d7 c2 02 c0       	push   0xc002c2d7
c001c135:	56                   	push   esi
c001c136:	e8 81 fe ff ff       	call   c001bfbc <string_ends_with(char const*, char const*)>
c001c13b:	83 c4 10             	add    esp,0x10
c001c13e:	85 c0                	test   eax,eax
c001c140:	0f 85 98 00 00 00    	jne    c001c1de <sysCallOpen(regs*)+0x1da>
c001c146:	83 ec 0c             	sub    esp,0xc
c001c149:	68 14 01 00 00       	push   0x114
c001c14e:	e8 d6 36 ff ff       	call   c000f829 <malloc>
c001c153:	83 c4 0c             	add    esp,0xc
c001c156:	89 c6                	mov    esi,eax
c001c158:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c15d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c160:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c163:	56                   	push   esi
c001c164:	e8 77 6c ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c001c169:	83 c4 10             	add    esp,0x10
c001c16c:	85 f6                	test   esi,esi
c001c16e:	74 5b                	je     c001c1cb <sysCallOpen(regs*)+0x1c7>
c001c170:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c173:	0f b6 c2             	movzx  eax,dl
c001c176:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c179:	89 d0                	mov    eax,edx
c001c17b:	83 e0 01             	and    eax,0x1
c001c17e:	f6 c2 02             	test   dl,0x2
c001c181:	74 03                	je     c001c186 <sysCallOpen(regs*)+0x182>
c001c183:	83 c8 02             	or     eax,0x2
c001c186:	f6 c2 04             	test   dl,0x4
c001c189:	74 03                	je     c001c18e <sysCallOpen(regs*)+0x18a>
c001c18b:	83 c8 04             	or     eax,0x4
c001c18e:	f6 c2 08             	test   dl,0x8
c001c191:	74 03                	je     c001c196 <sysCallOpen(regs*)+0x192>
c001c193:	83 c8 0a             	or     eax,0xa
c001c196:	83 e2 10             	and    edx,0x10
c001c199:	74 03                	je     c001c19e <sysCallOpen(regs*)+0x19a>
c001c19b:	83 c8 12             	or     eax,0x12
c001c19e:	83 ec 08             	sub    esp,0x8
c001c1a1:	50                   	push   eax
c001c1a2:	56                   	push   esi
c001c1a3:	e8 9c 6c ff ff       	call   c0012e44 <File::open(FileOpenMode)>
c001c1a8:	83 c4 10             	add    esp,0x10
c001c1ab:	85 c0                	test   eax,eax
c001c1ad:	75 1c                	jne    c001c1cb <sysCallOpen(regs*)+0x1c7>
c001c1af:	83 ec 0c             	sub    esp,0xc
c001c1b2:	56                   	push   esi
c001c1b3:	e8 ac 4e ff ff       	call   c0011064 <UnixFile::getFileDescriptor()>
c001c1b8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c1bb:	83 c4 10             	add    esp,0x10
c001c1be:	89 02                	mov    DWORD PTR [edx],eax
c001c1c0:	c1 f8 1f             	sar    eax,0x1f
c001c1c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c1c6:	e9 c1 fe ff ff       	jmp    c001c08c <sysCallOpen(regs*)+0x88>
c001c1cb:	81 c4 04 01 00 00    	add    esp,0x104
c001c1d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c1d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c1db:	5b                   	pop    ebx
c001c1dc:	5e                   	pop    esi
c001c1dd:	c3                   	ret    
c001c1de:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c1e1:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c1e7:	e9 99 fe ff ff       	jmp    c001c085 <sysCallOpen(regs*)+0x81>

c001c1ec <Sys::loadSyscalls()>:
c001c1ec:	c7 05 c0 ee 02 c0 59 b4 01 c0 	mov    DWORD PTR ds:0xc002eec0,0xc001b459
c001c1f6:	c7 05 c4 ee 02 c0 4e b0 01 c0 	mov    DWORD PTR ds:0xc002eec4,0xc001b04e
c001c200:	c7 05 c8 ee 02 c0 3f b2 01 c0 	mov    DWORD PTR ds:0xc002eec8,0xc001b23f
c001c20a:	c7 05 cc ee 02 c0 8f b3 01 c0 	mov    DWORD PTR ds:0xc002eecc,0xc001b38f
c001c214:	c7 05 d0 ee 02 c0 d7 b1 01 c0 	mov    DWORD PTR ds:0xc002eed0,0xc001b1d7
c001c21e:	c7 05 d4 ee 02 c0 85 b0 01 c0 	mov    DWORD PTR ds:0xc002eed4,0xc001b085
c001c228:	c7 05 d8 ee 02 c0 66 b0 01 c0 	mov    DWORD PTR ds:0xc002eed8,0xc001b066
c001c232:	c7 05 dc ee 02 c0 94 b2 01 c0 	mov    DWORD PTR ds:0xc002eedc,0xc001b294
c001c23c:	c7 05 e4 ee 02 c0 22 b9 01 c0 	mov    DWORD PTR ds:0xc002eee4,0xc001b922
c001c246:	c7 05 e0 ee 02 c0 04 c0 01 c0 	mov    DWORD PTR ds:0xc002eee0,0xc001c004
c001c250:	c7 05 e8 ee 02 c0 82 b9 01 c0 	mov    DWORD PTR ds:0xc002eee8,0xc001b982
c001c25a:	c7 05 ec ee 02 c0 65 b6 01 c0 	mov    DWORD PTR ds:0xc002eeec,0xc001b665
c001c264:	c7 05 f0 ee 02 c0 9f b4 01 c0 	mov    DWORD PTR ds:0xc002eef0,0xc001b49f
c001c26e:	c7 05 f4 ee 02 c0 a4 b4 01 c0 	mov    DWORD PTR ds:0xc002eef4,0xc001b4a4
c001c278:	c7 05 f8 ee 02 c0 4b ba 01 c0 	mov    DWORD PTR ds:0xc002eef8,0xc001ba4b
c001c282:	c7 05 fc ee 02 c0 f7 b9 01 c0 	mov    DWORD PTR ds:0xc002eefc,0xc001b9f7
c001c28c:	c7 05 00 ef 02 c0 3e b7 01 c0 	mov    DWORD PTR ds:0xc002ef00,0xc001b73e
c001c296:	c7 05 04 ef 02 c0 95 b7 01 c0 	mov    DWORD PTR ds:0xc002ef04,0xc001b795
c001c2a0:	c7 05 08 ef 02 c0 01 b8 01 c0 	mov    DWORD PTR ds:0xc002ef08,0xc001b801
c001c2aa:	c7 05 0c ef 02 c0 a9 b4 01 c0 	mov    DWORD PTR ds:0xc002ef0c,0xc001b4a9
c001c2b4:	c7 05 10 ef 02 c0 bb ba 01 c0 	mov    DWORD PTR ds:0xc002ef10,0xc001babb
c001c2be:	c7 05 14 ef 02 c0 d5 ba 01 c0 	mov    DWORD PTR ds:0xc002ef14,0xc001bad5
c001c2c8:	c7 05 18 ef 02 c0 d5 ba 01 c0 	mov    DWORD PTR ds:0xc002ef18,0xc001bad5
c001c2d2:	c7 05 1c ef 02 c0 0a bb 01 c0 	mov    DWORD PTR ds:0xc002ef1c,0xc001bb0a
c001c2dc:	c7 05 20 ef 02 c0 6e bb 01 c0 	mov    DWORD PTR ds:0xc002ef20,0xc001bb6e
c001c2e6:	c7 05 24 ef 02 c0 b3 b4 01 c0 	mov    DWORD PTR ds:0xc002ef24,0xc001b4b3
c001c2f0:	c7 05 28 ef 02 c0 d2 bb 01 c0 	mov    DWORD PTR ds:0xc002ef28,0xc001bbd2
c001c2fa:	c7 05 2c ef 02 c0 22 b6 01 c0 	mov    DWORD PTR ds:0xc002ef2c,0xc001b622
c001c304:	c7 05 30 ef 02 c0 1e bc 01 c0 	mov    DWORD PTR ds:0xc002ef30,0xc001bc1e
c001c30e:	c7 05 34 ef 02 c0 e4 b6 01 c0 	mov    DWORD PTR ds:0xc002ef34,0xc001b6e4
c001c318:	c7 05 38 ef 02 c0 a1 bc 01 c0 	mov    DWORD PTR ds:0xc002ef38,0xc001bca1
c001c322:	c7 05 3c ef 02 c0 73 b8 01 c0 	mov    DWORD PTR ds:0xc002ef3c,0xc001b873
c001c32c:	c7 05 40 ef 02 c0 c8 bc 01 c0 	mov    DWORD PTR ds:0xc002ef40,0xc001bcc8
c001c336:	c7 05 44 ef 02 c0 30 bd 01 c0 	mov    DWORD PTR ds:0xc002ef44,0xc001bd30
c001c340:	c7 05 48 ef 02 c0 dd bd 01 c0 	mov    DWORD PTR ds:0xc002ef48,0xc001bddd
c001c34a:	c7 05 4c ef 02 c0 c3 b4 01 c0 	mov    DWORD PTR ds:0xc002ef4c,0xc001b4c3
c001c354:	c7 05 50 ef 02 c0 2d b5 01 c0 	mov    DWORD PTR ds:0xc002ef50,0xc001b52d
c001c35e:	c7 05 54 ef 02 c0 73 b5 01 c0 	mov    DWORD PTR ds:0xc002ef54,0xc001b573
c001c368:	c7 05 58 ef 02 c0 f1 be 01 c0 	mov    DWORD PTR ds:0xc002ef58,0xc001bef1
c001c372:	c7 05 5c ef 02 c0 f0 ba 01 c0 	mov    DWORD PTR ds:0xc002ef5c,0xc001baf0
c001c37c:	c7 05 60 ef 02 c0 c4 b5 01 c0 	mov    DWORD PTR ds:0xc002ef60,0xc001b5c4
c001c386:	c7 05 64 ef 02 c0 63 bf 01 c0 	mov    DWORD PTR ds:0xc002ef64,0xc001bf63
c001c390:	c7 05 68 ef 02 c0 a8 bf 01 c0 	mov    DWORD PTR ds:0xc002ef68,0xc001bfa8
c001c39a:	c7 05 6c ef 02 c0 2f b1 01 c0 	mov    DWORD PTR ds:0xc002ef6c,0xc001b12f
c001c3a4:	c7 05 70 ef 02 c0 b0 b2 01 c0 	mov    DWORD PTR ds:0xc002ef70,0xc001b2b0
c001c3ae:	c7 05 74 ef 02 c0 45 b3 01 c0 	mov    DWORD PTR ds:0xc002ef74,0xc001b345
c001c3b8:	c7 05 78 ef 02 c0 18 b0 01 c0 	mov    DWORD PTR ds:0xc002ef78,0xc001b018
c001c3c2:	c7 05 7c ef 02 c0 f7 b3 01 c0 	mov    DWORD PTR ds:0xc002ef7c,0xc001b3f7
c001c3cc:	c7 05 80 ef 02 c0 91 b0 01 c0 	mov    DWORD PTR ds:0xc002ef80,0xc001b091
c001c3d6:	c7 05 84 ef 02 c0 ab b0 01 c0 	mov    DWORD PTR ds:0xc002ef84,0xc001b0ab
c001c3e0:	c3                   	ret    

c001c3e1 <Sys::systemCall(regs*, void*)>:
c001c3e1:	53                   	push   ebx
c001c3e2:	83 ec 08             	sub    esp,0x8
c001c3e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3e9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c3ec:	83 f8 7f             	cmp    eax,0x7f
c001c3ef:	77 16                	ja     c001c407 <Sys::systemCall(regs*, void*)+0x26>
c001c3f1:	8b 14 85 c0 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1140]
c001c3f8:	85 d2                	test   edx,edx
c001c3fa:	74 0b                	je     c001c407 <Sys::systemCall(regs*, void*)+0x26>
c001c3fc:	83 ec 0c             	sub    esp,0xc
c001c3ff:	53                   	push   ebx
c001c400:	ff d2                	call   edx
c001c402:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c405:	eb 0d                	jmp    c001c414 <Sys::systemCall(regs*, void*)+0x33>
c001c407:	52                   	push   edx
c001c408:	52                   	push   edx
c001c409:	50                   	push   eax
c001c40a:	68 e1 c2 02 c0       	push   0xc002c2e1
c001c40f:	e8 6d 64 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001c414:	83 c4 10             	add    esp,0x10
c001c417:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c41c:	31 d2                	xor    edx,edx
c001c41e:	83 c4 08             	add    esp,0x8
c001c421:	5b                   	pop    ebx
c001c422:	c3                   	ret    

c001c423 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c423:	55                   	push   ebp
c001c424:	57                   	push   edi
c001c425:	56                   	push   esi
c001c426:	53                   	push   ebx
c001c427:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c42d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c434:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c43b:	85 c0                	test   eax,eax
c001c43d:	0f 95 c1             	setne  cl
c001c440:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c448:	0f 94 c2             	sete   dl
c001c44b:	84 d1                	test   cl,dl
c001c44d:	74 23                	je     c001c472 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c44f:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c455:	74 1b                	je     c001c472 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c457:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c45d:	89 da                	mov    edx,ebx
c001c45f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c465:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c46b:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c472:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c479:	05 ff 0f 00 00       	add    eax,0xfff
c001c47e:	83 ec 0c             	sub    esp,0xc
c001c481:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c485:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c48b:	c1 e8 0c             	shr    eax,0xc
c001c48e:	89 fe                	mov    esi,edi
c001c490:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c494:	c1 ee 0c             	shr    esi,0xc
c001c497:	6a 01                	push   0x1
c001c499:	e8 11 50 ff ff       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c001c49e:	89 c5                	mov    ebp,eax
c001c4a0:	58                   	pop    eax
c001c4a1:	5a                   	pop    edx
c001c4a2:	56                   	push   esi
c001c4a3:	68 f5 c2 02 c0       	push   0xc002c2f5
c001c4a8:	e8 d4 63 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001c4ad:	59                   	pop    ecx
c001c4ae:	58                   	pop    eax
c001c4af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c4b3:	68 07 c3 02 c0       	push   0xc002c307
c001c4b8:	e8 c4 63 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001c4bd:	83 c4 10             	add    esp,0x10
c001c4c0:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c4c6:	0f 86 31 01 00 00    	jbe    c001c5fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c4cc:	c1 e6 0c             	shl    esi,0xc
c001c4cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c4d2:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c4d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4d9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c4e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c4e3:	01 df                	add    edi,ebx
c001c4e5:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c4e8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c4ec:	0f 84 08 01 00 00    	je     c001c5fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c4f2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c4f8:	76 05                	jbe    c001c4ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c4fa:	bf 00 10 00 00       	mov    edi,0x1000
c001c4ff:	83 ec 0c             	sub    esp,0xc
c001c502:	31 d2                	xor    edx,edx
c001c504:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c50b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c50d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c511:	50                   	push   eax
c001c512:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c516:	56                   	push   esi
c001c517:	52                   	push   edx
c001c518:	57                   	push   edi
c001c519:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c520:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c523:	83 c4 20             	add    esp,0x20
c001c526:	85 c0                	test   eax,eax
c001c528:	74 0a                	je     c001c534 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c52a:	53                   	push   ebx
c001c52b:	53                   	push   ebx
c001c52c:	50                   	push   eax
c001c52d:	68 19 c3 02 c0       	push   0xc002c319
c001c532:	eb 0f                	jmp    c001c543 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c534:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c538:	74 20                	je     c001c55a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c53a:	51                   	push   ecx
c001c53b:	51                   	push   ecx
c001c53c:	6a 00                	push   0x0
c001c53e:	68 44 c3 02 c0       	push   0xc002c344
c001c543:	e8 39 63 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001c548:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c54b:	e8 8f 52 ff ff       	call   c00117df <Virt::freeKernelVirtualPages(unsigned long)>
c001c550:	83 c4 10             	add    esp,0x10
c001c553:	31 c0                	xor    eax,eax
c001c555:	e9 68 01 00 00       	jmp    c001c6c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c55a:	fa                   	cli    
c001c55b:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001c561:	e8 bf 36 ff ff       	call   c000fc25 <Phys::allocatePage()>
c001c566:	6a 07                	push   0x7
c001c568:	89 c7                	mov    edi,eax
c001c56a:	55                   	push   ebp
c001c56b:	50                   	push   eax
c001c56c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c571:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c574:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c57a:	e8 d7 55 ff ff       	call   c0011b56 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c57f:	83 c4 0c             	add    esp,0xc
c001c582:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c589:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c58f:	6a 00                	push   0x0
c001c591:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c596:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c599:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c59f:	e8 0c 54 ff ff       	call   c00119b0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c5a4:	58                   	pop    eax
c001c5a5:	5a                   	pop    edx
c001c5a6:	68 07 0c 00 00       	push   0xc07
c001c5ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c5af:	57                   	push   edi
c001c5b0:	89 ef                	mov    edi,ebp
c001c5b2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c5b9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5bf:	6a 00                	push   0x0
c001c5c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5c9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5cf:	e8 3e 59 ff ff       	call   c0011f12 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c5d4:	b9 00 10 00 00       	mov    ecx,0x1000
c001c5d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c5db:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001c5e0:	83 c4 20             	add    esp,0x20
c001c5e3:	48                   	dec    eax
c001c5e4:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001c5e9:	85 c0                	test   eax,eax
c001c5eb:	75 01                	jne    c001c5ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c5ed:	fb                   	sti    
c001c5ee:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c5f5:	e9 df fe ff ff       	jmp    c001c4d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c5fa:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c5fd:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c605:	0f 86 a9 00 00 00    	jbe    c001c6b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c60b:	fa                   	cli    
c001c60c:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001c612:	51                   	push   ecx
c001c613:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c61a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c620:	6a 00                	push   0x0
c001c622:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c627:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c62a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c630:	e8 7b 53 ff ff       	call   c00119b0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c635:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c639:	c1 e6 0c             	shl    esi,0xc
c001c63c:	01 de                	add    esi,ebx
c001c63e:	83 c4 10             	add    esp,0x10
c001c641:	39 de                	cmp    esi,ebx
c001c643:	74 61                	je     c001c6a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c645:	e8 db 35 ff ff       	call   c000fc25 <Phys::allocatePage()>
c001c64a:	6a 07                	push   0x7
c001c64c:	89 c7                	mov    edi,eax
c001c64e:	55                   	push   ebp
c001c64f:	50                   	push   eax
c001c650:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c655:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c658:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c65e:	e8 f3 54 ff ff       	call   c0011b56 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c663:	58                   	pop    eax
c001c664:	5a                   	pop    edx
c001c665:	68 07 0c 00 00       	push   0xc07
c001c66a:	53                   	push   ebx
c001c66b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c671:	57                   	push   edi
c001c672:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c679:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c67f:	6a 00                	push   0x0
c001c681:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c686:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c689:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c68f:	e8 7e 58 ff ff       	call   c0011f12 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c694:	83 c4 1c             	add    esp,0x1c
c001c697:	68 00 10 00 00       	push   0x1000
c001c69c:	6a 00                	push   0x0
c001c69e:	55                   	push   ebp
c001c69f:	e8 ac 40 fe ff       	call   c0000750 <memset>
c001c6a4:	eb 98                	jmp    c001c63e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c6a6:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001c6ab:	48                   	dec    eax
c001c6ac:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001c6b1:	75 01                	jne    c001c6b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c6b3:	fb                   	sti    
c001c6b4:	83 ec 0c             	sub    esp,0xc
c001c6b7:	55                   	push   ebp
c001c6b8:	e8 22 51 ff ff       	call   c00117df <Virt::freeKernelVirtualPages(unsigned long)>
c001c6bd:	83 c4 10             	add    esp,0x10
c001c6c0:	b0 01                	mov    al,0x1
c001c6c2:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c6c8:	5b                   	pop    ebx
c001c6c9:	5e                   	pop    esi
c001c6ca:	5f                   	pop    edi
c001c6cb:	5d                   	pop    ebp
c001c6cc:	c3                   	ret    

c001c6cd <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c6cd:	55                   	push   ebp
c001c6ce:	57                   	push   edi
c001c6cf:	56                   	push   esi
c001c6d0:	53                   	push   ebx
c001c6d1:	83 ec 48             	sub    esp,0x48
c001c6d4:	68 14 01 00 00       	push   0x114
c001c6d9:	e8 4b 31 ff ff       	call   c000f829 <malloc>
c001c6de:	83 c4 0c             	add    esp,0xc
c001c6e1:	89 c6                	mov    esi,eax
c001c6e3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c6e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c6eb:	50                   	push   eax
c001c6ec:	e8 ef 66 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c001c6f1:	58                   	pop    eax
c001c6f2:	5a                   	pop    edx
c001c6f3:	6a 01                	push   0x1
c001c6f5:	56                   	push   esi
c001c6f6:	e8 49 67 ff ff       	call   c0012e44 <File::open(FileOpenMode)>
c001c6fb:	83 c4 10             	add    esp,0x10
c001c6fe:	85 c0                	test   eax,eax
c001c700:	0f 85 47 01 00 00    	jne    c001c84d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c706:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c70e:	83 ec 0c             	sub    esp,0xc
c001c711:	6a 34                	push   0x34
c001c713:	e8 11 31 ff ff       	call   c000f829 <malloc>
c001c718:	89 c3                	mov    ebx,eax
c001c71a:	58                   	pop    eax
c001c71b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c71d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c721:	57                   	push   edi
c001c722:	53                   	push   ebx
c001c723:	6a 00                	push   0x0
c001c725:	6a 34                	push   0x34
c001c727:	56                   	push   esi
c001c728:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c72b:	83 c4 20             	add    esp,0x20
c001c72e:	85 c0                	test   eax,eax
c001c730:	0f 85 17 01 00 00    	jne    c001c84d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c736:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c73c:	0f 85 0b 01 00 00    	jne    c001c84d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c742:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c745:	85 c0                	test   eax,eax
c001c747:	0f 84 00 01 00 00    	je     c001c84d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c74d:	31 d2                	xor    edx,edx
c001c74f:	55                   	push   ebp
c001c750:	52                   	push   edx
c001c751:	50                   	push   eax
c001c752:	56                   	push   esi
c001c753:	e8 aa 67 ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001c758:	83 c4 10             	add    esp,0x10
c001c75b:	85 c0                	test   eax,eax
c001c75d:	0f 85 ea 00 00 00    	jne    c001c84d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c763:	83 ec 0c             	sub    esp,0xc
c001c766:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c769:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c76d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c771:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c775:	0f af c2             	imul   eax,edx
c001c778:	50                   	push   eax
c001c779:	e8 ab 30 ff ff       	call   c000f829 <malloc>
c001c77e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c780:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c784:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c787:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c78b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c78f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c793:	0f af c2             	imul   eax,edx
c001c796:	99                   	cdq    
c001c797:	52                   	push   edx
c001c798:	50                   	push   eax
c001c799:	56                   	push   esi
c001c79a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c79d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c7a0:	83 c4 20             	add    esp,0x20
c001c7a3:	85 c0                	test   eax,eax
c001c7a5:	0f 84 a2 00 00 00    	je     c001c84d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7ab:	31 d2                	xor    edx,edx
c001c7ad:	51                   	push   ecx
c001c7ae:	52                   	push   edx
c001c7af:	50                   	push   eax
c001c7b0:	56                   	push   esi
c001c7b1:	e8 4c 67 ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001c7b6:	83 c4 10             	add    esp,0x10
c001c7b9:	85 c0                	test   eax,eax
c001c7bb:	0f 85 8c 00 00 00    	jne    c001c84d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7c1:	83 ec 0c             	sub    esp,0xc
c001c7c4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c7c8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c7cc:	31 ed                	xor    ebp,ebp
c001c7ce:	0f af c2             	imul   eax,edx
c001c7d1:	50                   	push   eax
c001c7d2:	e8 52 30 ff ff       	call   c000f829 <malloc>
c001c7d7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c7d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7e4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c7e8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c7ec:	0f af c2             	imul   eax,edx
c001c7ef:	99                   	cdq    
c001c7f0:	52                   	push   edx
c001c7f1:	50                   	push   eax
c001c7f2:	56                   	push   esi
c001c7f3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7f6:	83 c4 20             	add    esp,0x20
c001c7f9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c801:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c805:	0f 86 80 00 00 00    	jbe    c001c88b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c80b:	0f b7 fd             	movzx  edi,bp
c001c80e:	c1 e7 05             	shl    edi,0x5
c001c811:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c815:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c818:	75 6b                	jne    c001c885 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c81a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c81d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c821:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c824:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c828:	52                   	push   edx
c001c829:	31 d2                	xor    edx,edx
c001c82b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c82e:	52                   	push   edx
c001c82f:	50                   	push   eax
c001c830:	56                   	push   esi
c001c831:	e8 cc 66 ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001c836:	83 c4 10             	add    esp,0x10
c001c839:	85 c0                	test   eax,eax
c001c83b:	74 17                	je     c001c854 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c83d:	83 ec 0c             	sub    esp,0xc
c001c840:	68 70 c3 02 c0       	push   0xc002c370
c001c845:	e8 37 60 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001c84a:	83 c4 10             	add    esp,0x10
c001c84d:	31 c0                	xor    eax,eax
c001c84f:	e9 87 00 00 00       	jmp    c001c8db <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c854:	83 ec 0c             	sub    esp,0xc
c001c857:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c85a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c85d:	50                   	push   eax
c001c85e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c862:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c866:	56                   	push   esi
c001c867:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c86b:	e8 b3 fb ff ff       	call   c001c423 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c870:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c874:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c878:	83 c4 20             	add    esp,0x20
c001c87b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c87f:	73 04                	jae    c001c885 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c885:	45                   	inc    ebp
c001c886:	e9 76 ff ff ff       	jmp    c001c801 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c88b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c88f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c893:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c897:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c89d:	83 ec 0c             	sub    esp,0xc
c001c8a0:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c8a6:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c8ab:	05 00 10 00 00       	add    eax,0x1000
c001c8b0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c8b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8b7:	e8 7d 2f ff ff       	call   c000f839 <free>
c001c8bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8bf:	e8 75 2f ff ff       	call   c000f839 <free>
c001c8c4:	58                   	pop    eax
c001c8c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c8c9:	e8 6b 2f ff ff       	call   c000f839 <free>
c001c8ce:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8d1:	e8 cc 65 ff ff       	call   c0012ea2 <File::close()>
c001c8d6:	83 c4 10             	add    esp,0x10
c001c8d9:	b0 01                	mov    al,0x1
c001c8db:	83 c4 3c             	add    esp,0x3c
c001c8de:	5b                   	pop    ebx
c001c8df:	5e                   	pop    esi
c001c8e0:	5f                   	pop    edi
c001c8e1:	5d                   	pop    ebp
c001c8e2:	c3                   	ret    

c001c8e3 <Thr::runtimeReferenceHelper()>:
c001c8e3:	83 ec 18             	sub    esp,0x18
c001c8e6:	68 78 c3 02 c0       	push   0xc002c378
c001c8eb:	e8 91 5f ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001c8f0:	fa                   	cli    
c001c8f1:	83 c4 10             	add    esp,0x10
c001c8f4:	eb fe                	jmp    c001c8f4 <Thr::runtimeReferenceHelper()+0x11>

c001c8f6 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c8f6:	57                   	push   edi
c001c8f7:	56                   	push   esi
c001c8f8:	53                   	push   ebx
c001c8f9:	31 db                	xor    ebx,ebx
c001c8fb:	39 1d 60 f8 02 c0    	cmp    DWORD PTR ds:0xc002f860,ebx
c001c901:	7e 3c                	jle    c001c93f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c903:	8b 34 9d e0 f7 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0820]
c001c90a:	31 ff                	xor    edi,edi
c001c90c:	39 3c 9d e0 f6 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0920],edi
c001c913:	7e 27                	jle    c001c93c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c915:	50                   	push   eax
c001c916:	50                   	push   eax
c001c917:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c91b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c91d:	03 04 9d 60 f7 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd08a0]
c001c924:	50                   	push   eax
c001c925:	e8 6e 3f fe ff       	call   c0000898 <strcmp>
c001c92a:	83 c4 10             	add    esp,0x10
c001c92d:	85 c0                	test   eax,eax
c001c92f:	75 05                	jne    c001c936 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c931:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c934:	eb 0b                	jmp    c001c941 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c936:	83 c6 10             	add    esi,0x10
c001c939:	47                   	inc    edi
c001c93a:	eb d0                	jmp    c001c90c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c93c:	43                   	inc    ebx
c001c93d:	eb bc                	jmp    c001c8fb <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c93f:	31 c0                	xor    eax,eax
c001c941:	5b                   	pop    ebx
c001c942:	5e                   	pop    esi
c001c943:	5f                   	pop    edi
c001c944:	c3                   	ret    

c001c945 <Thr::loadKernelSymbolTable(char const*)>:
c001c945:	55                   	push   ebp
c001c946:	57                   	push   edi
c001c947:	56                   	push   esi
c001c948:	53                   	push   ebx
c001c949:	83 ec 68             	sub    esp,0x68
c001c94c:	8b 35 b0 f8 02 c0    	mov    esi,DWORD PTR ds:0xc002f8b0
c001c952:	68 14 01 00 00       	push   0x114
c001c957:	e8 cd 2e ff ff       	call   c000f829 <malloc>
c001c95c:	83 c4 0c             	add    esp,0xc
c001c95f:	89 c3                	mov    ebx,eax
c001c961:	56                   	push   esi
c001c962:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c966:	50                   	push   eax
c001c967:	e8 74 64 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c001c96c:	5e                   	pop    esi
c001c96d:	5f                   	pop    edi
c001c96e:	6a 01                	push   0x1
c001c970:	53                   	push   ebx
c001c971:	e8 ce 64 ff ff       	call   c0012e44 <File::open(FileOpenMode)>
c001c976:	83 c4 10             	add    esp,0x10
c001c979:	85 c0                	test   eax,eax
c001c97b:	74 0a                	je     c001c987 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c97d:	83 ec 0c             	sub    esp,0xc
c001c980:	68 9a c3 02 c0       	push   0xc002c39a
c001c985:	eb 34                	jmp    c001c9bb <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c987:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c98f:	83 ec 0c             	sub    esp,0xc
c001c992:	6a 34                	push   0x34
c001c994:	e8 90 2e ff ff       	call   c000f829 <malloc>
c001c999:	59                   	pop    ecx
c001c99a:	89 c7                	mov    edi,eax
c001c99c:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c9a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9a2:	56                   	push   esi
c001c9a3:	57                   	push   edi
c001c9a4:	6a 00                	push   0x0
c001c9a6:	6a 34                	push   0x34
c001c9a8:	53                   	push   ebx
c001c9a9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9ac:	83 c4 20             	add    esp,0x20
c001c9af:	85 c0                	test   eax,eax
c001c9b1:	74 17                	je     c001c9ca <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c9b3:	83 ec 0c             	sub    esp,0xc
c001c9b6:	68 b1 c3 02 c0       	push   0xc002c3b1
c001c9bb:	e8 2f d8 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001c9c0:	83 c4 10             	add    esp,0x10
c001c9c3:	31 c0                	xor    eax,eax
c001c9c5:	e9 31 02 00 00       	jmp    c001cbfb <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c9ca:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c9d0:	75 e1                	jne    c001c9b3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c9d2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c9d5:	85 c0                	test   eax,eax
c001c9d7:	74 da                	je     c001c9b3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c9d9:	52                   	push   edx
c001c9da:	31 d2                	xor    edx,edx
c001c9dc:	52                   	push   edx
c001c9dd:	50                   	push   eax
c001c9de:	53                   	push   ebx
c001c9df:	e8 1e 65 ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001c9e4:	83 c4 10             	add    esp,0x10
c001c9e7:	85 c0                	test   eax,eax
c001c9e9:	75 c8                	jne    c001c9b3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c9eb:	83 ec 0c             	sub    esp,0xc
c001c9ee:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c9f2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9f6:	31 ed                	xor    ebp,ebp
c001c9f8:	0f af c2             	imul   eax,edx
c001c9fb:	50                   	push   eax
c001c9fc:	e8 28 2e ff ff       	call   c000f829 <malloc>
c001ca01:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ca03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca07:	89 34 24             	mov    DWORD PTR [esp],esi
c001ca0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca0e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca12:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca16:	0f af c2             	imul   eax,edx
c001ca19:	99                   	cdq    
c001ca1a:	52                   	push   edx
c001ca1b:	50                   	push   eax
c001ca1c:	53                   	push   ebx
c001ca1d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca20:	83 c4 20             	add    esp,0x20
c001ca23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca2b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ca33:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca3b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ca43:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ca47:	0f 86 aa 00 00 00    	jbe    c001caf7 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ca4d:	0f b7 f5             	movzx  esi,bp
c001ca50:	6b f6 28             	imul   esi,esi,0x28
c001ca53:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca57:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca5e:	50                   	push   eax
c001ca5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca63:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ca67:	8b 16                	mov    edx,DWORD PTR [esi]
c001ca69:	6b c0 28             	imul   eax,eax,0x28
c001ca6c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ca70:	89 d0                	mov    eax,edx
c001ca72:	31 d2                	xor    edx,edx
c001ca74:	52                   	push   edx
c001ca75:	50                   	push   eax
c001ca76:	53                   	push   ebx
c001ca77:	e8 86 64 ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001ca7c:	83 c4 0c             	add    esp,0xc
c001ca7f:	6a 20                	push   0x20
c001ca81:	6a 00                	push   0x0
c001ca83:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ca87:	52                   	push   edx
c001ca88:	e8 c3 3c fe ff       	call   c0000750 <memset>
c001ca8d:	58                   	pop    eax
c001ca8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca90:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ca94:	51                   	push   ecx
c001ca95:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ca99:	52                   	push   edx
c001ca9a:	6a 00                	push   0x0
c001ca9c:	6a 1f                	push   0x1f
c001ca9e:	53                   	push   ebx
c001ca9f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001caa2:	83 c4 18             	add    esp,0x18
c001caa5:	68 c8 c3 02 c0       	push   0xc002c3c8
c001caaa:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001caae:	52                   	push   edx
c001caaf:	e8 e4 3d fe ff       	call   c0000898 <strcmp>
c001cab4:	83 c4 10             	add    esp,0x10
c001cab7:	85 c0                	test   eax,eax
c001cab9:	75 0f                	jne    c001caca <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cabb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cabe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cac2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cac6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001caca:	50                   	push   eax
c001cacb:	50                   	push   eax
c001cacc:	68 d0 c3 02 c0       	push   0xc002c3d0
c001cad1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cad5:	50                   	push   eax
c001cad6:	e8 bd 3d fe ff       	call   c0000898 <strcmp>
c001cadb:	83 c4 10             	add    esp,0x10
c001cade:	85 c0                	test   eax,eax
c001cae0:	75 0f                	jne    c001caf1 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cae2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cae5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cae9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001caf1:	45                   	inc    ebp
c001caf2:	e9 4c ff ff ff       	jmp    c001ca43 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001caf7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cafc:	75 10                	jne    c001cb0e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cafe:	83 ec 0c             	sub    esp,0xc
c001cb01:	68 d8 c3 02 c0       	push   0xc002c3d8
c001cb06:	e8 e4 d6 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001cb0b:	83 c4 10             	add    esp,0x10
c001cb0e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cb13:	75 10                	jne    c001cb25 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cb15:	83 ec 0c             	sub    esp,0xc
c001cb18:	68 d8 c3 02 c0       	push   0xc002c3d8
c001cb1d:	e8 cd d6 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001cb22:	83 c4 10             	add    esp,0x10
c001cb25:	31 d2                	xor    edx,edx
c001cb27:	50                   	push   eax
c001cb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb2c:	52                   	push   edx
c001cb2d:	50                   	push   eax
c001cb2e:	53                   	push   ebx
c001cb2f:	e8 ce 63 ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001cb34:	5a                   	pop    edx
c001cb35:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb39:	e8 eb 2c ff ff       	call   c000f829 <malloc>
c001cb3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb46:	31 c9                	xor    ecx,ecx
c001cb48:	5e                   	pop    esi
c001cb49:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb4b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cb4f:	55                   	push   ebp
c001cb50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb54:	51                   	push   ecx
c001cb55:	52                   	push   edx
c001cb56:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cb5a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cb5e:	53                   	push   ebx
c001cb5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb62:	83 c4 14             	add    esp,0x14
c001cb65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb69:	e8 bb 2c ff ff       	call   c000f829 <malloc>
c001cb6e:	89 c6                	mov    esi,eax
c001cb70:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb72:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cb75:	56                   	push   esi
c001cb76:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cb7a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cb7e:	51                   	push   ecx
c001cb7f:	52                   	push   edx
c001cb80:	53                   	push   ebx
c001cb81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb88:	8b 15 60 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f860
c001cb8e:	83 c4 1c             	add    esp,0x1c
c001cb91:	c1 e8 04             	shr    eax,0x4
c001cb94:	89 04 95 e0 f6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0920],eax
c001cb9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cb9f:	31 d2                	xor    edx,edx
c001cba1:	52                   	push   edx
c001cba2:	50                   	push   eax
c001cba3:	53                   	push   ebx
c001cba4:	e8 59 63 ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001cba9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cbab:	31 d2                	xor    edx,edx
c001cbad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cbb0:	56                   	push   esi
c001cbb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbb5:	52                   	push   edx
c001cbb6:	50                   	push   eax
c001cbb7:	53                   	push   ebx
c001cbb8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbbb:	83 c4 14             	add    esp,0x14
c001cbbe:	53                   	push   ebx
c001cbbf:	e8 de 62 ff ff       	call   c0012ea2 <File::close()>
c001cbc4:	5d                   	pop    ebp
c001cbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cbc9:	e8 6b 2c ff ff       	call   c000f839 <free>
c001cbce:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbd1:	e8 63 2c ff ff       	call   c000f839 <free>
c001cbd6:	a1 60 f8 02 c0       	mov    eax,ds:0xc002f860
c001cbdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cbdf:	8d 50 01             	lea    edx,[eax+0x1]
c001cbe2:	89 0c 85 e0 f7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0820],ecx
c001cbe9:	89 34 85 60 f7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd08a0],esi
c001cbf0:	89 15 60 f8 02 c0    	mov    DWORD PTR ds:0xc002f860,edx
c001cbf6:	83 c4 10             	add    esp,0x10
c001cbf9:	b0 01                	mov    al,0x1
c001cbfb:	83 c4 5c             	add    esp,0x5c
c001cbfe:	5b                   	pop    ebx
c001cbff:	5e                   	pop    esi
c001cc00:	5f                   	pop    edi
c001cc01:	5d                   	pop    ebp
c001cc02:	c3                   	ret    

c001cc03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cc03:	55                   	push   ebp
c001cc04:	57                   	push   edi
c001cc05:	56                   	push   esi
c001cc06:	53                   	push   ebx
c001cc07:	81 ec 68 03 00 00    	sub    esp,0x368
c001cc0d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cc14:	8b 1d b0 f8 02 c0    	mov    ebx,DWORD PTR ds:0xc002f8b0
c001cc1a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cc1e:	68 14 01 00 00       	push   0x114
c001cc23:	e8 01 2c ff ff       	call   c000f829 <malloc>
c001cc28:	83 c4 0c             	add    esp,0xc
c001cc2b:	89 c5                	mov    ebp,eax
c001cc2d:	53                   	push   ebx
c001cc2e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cc35:	50                   	push   eax
c001cc36:	e8 a5 61 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c001cc3b:	5e                   	pop    esi
c001cc3c:	5f                   	pop    edi
c001cc3d:	6a 01                	push   0x1
c001cc3f:	55                   	push   ebp
c001cc40:	e8 ff 61 ff ff       	call   c0012e44 <File::open(FileOpenMode)>
c001cc45:	83 c4 10             	add    esp,0x10
c001cc48:	85 c0                	test   eax,eax
c001cc4a:	0f 85 a7 06 00 00    	jne    c001d2f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cc50:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cc58:	83 ec 0c             	sub    esp,0xc
c001cc5b:	6a 34                	push   0x34
c001cc5d:	e8 c7 2b ff ff       	call   c000f829 <malloc>
c001cc62:	5b                   	pop    ebx
c001cc63:	89 c7                	mov    edi,eax
c001cc65:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc69:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc6c:	53                   	push   ebx
c001cc6d:	57                   	push   edi
c001cc6e:	6a 00                	push   0x0
c001cc70:	6a 34                	push   0x34
c001cc72:	55                   	push   ebp
c001cc73:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc76:	83 c4 20             	add    esp,0x20
c001cc79:	85 c0                	test   eax,eax
c001cc7b:	0f 85 76 06 00 00    	jne    c001d2f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cc81:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cc87:	0f 85 6a 06 00 00    	jne    c001d2f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cc8d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cc90:	85 c0                	test   eax,eax
c001cc92:	0f 84 5f 06 00 00    	je     c001d2f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cc98:	31 d2                	xor    edx,edx
c001cc9a:	51                   	push   ecx
c001cc9b:	52                   	push   edx
c001cc9c:	50                   	push   eax
c001cc9d:	55                   	push   ebp
c001cc9e:	e8 5f 62 ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001cca3:	83 c4 10             	add    esp,0x10
c001cca6:	85 c0                	test   eax,eax
c001cca8:	0f 85 49 06 00 00    	jne    c001d2f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ccae:	83 ec 0c             	sub    esp,0xc
c001ccb1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ccb4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ccb8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ccbc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccc0:	0f af c2             	imul   eax,edx
c001ccc3:	50                   	push   eax
c001ccc4:	e8 60 2b ff ff       	call   c000f829 <malloc>
c001ccc9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cccc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ccd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccd7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ccdb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccdf:	0f af c2             	imul   eax,edx
c001cce2:	99                   	cdq    
c001cce3:	52                   	push   edx
c001cce4:	50                   	push   eax
c001cce5:	55                   	push   ebp
c001cce6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cce9:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001ccec:	83 c4 20             	add    esp,0x20
c001ccef:	85 c0                	test   eax,eax
c001ccf1:	0f 84 00 06 00 00    	je     c001d2f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ccf7:	52                   	push   edx
c001ccf8:	31 d2                	xor    edx,edx
c001ccfa:	52                   	push   edx
c001ccfb:	50                   	push   eax
c001ccfc:	55                   	push   ebp
c001ccfd:	e8 00 62 ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001cd02:	83 c4 10             	add    esp,0x10
c001cd05:	85 c0                	test   eax,eax
c001cd07:	0f 85 ea 05 00 00    	jne    c001d2f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd0d:	83 ec 0c             	sub    esp,0xc
c001cd10:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cd14:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cd18:	31 f6                	xor    esi,esi
c001cd1a:	0f af c2             	imul   eax,edx
c001cd1d:	50                   	push   eax
c001cd1e:	e8 06 2b ff ff       	call   c000f829 <malloc>
c001cd23:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cd2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd31:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cd35:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cd39:	0f af c2             	imul   eax,edx
c001cd3c:	99                   	cdq    
c001cd3d:	52                   	push   edx
c001cd3e:	50                   	push   eax
c001cd3f:	55                   	push   ebp
c001cd40:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd43:	83 c4 20             	add    esp,0x20
c001cd46:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cd4a:	0f 86 8a 00 00 00    	jbe    c001cdda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cd50:	0f b7 de             	movzx  ebx,si
c001cd53:	c1 e3 05             	shl    ebx,0x5
c001cd56:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cd5a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cd5d:	75 75                	jne    c001cdd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cd5f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cd62:	31 d2                	xor    edx,edx
c001cd64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd68:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cd6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd6f:	50                   	push   eax
c001cd70:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cd73:	52                   	push   edx
c001cd74:	50                   	push   eax
c001cd75:	55                   	push   ebp
c001cd76:	e8 87 61 ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001cd7b:	83 c4 10             	add    esp,0x10
c001cd7e:	85 c0                	test   eax,eax
c001cd80:	0f 85 71 05 00 00    	jne    c001d2f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd86:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cd8d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd90:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cd94:	31 d2                	xor    edx,edx
c001cd96:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cd9a:	83 ec 0c             	sub    esp,0xc
c001cd9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cda1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cda8:	50                   	push   eax
c001cda9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdb1:	52                   	push   edx
c001cdb2:	50                   	push   eax
c001cdb3:	55                   	push   ebp
c001cdb4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdb7:	83 c4 1c             	add    esp,0x1c
c001cdba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cdbd:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cdc0:	50                   	push   eax
c001cdc1:	6a 00                	push   0x0
c001cdc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cdcb:	50                   	push   eax
c001cdcc:	e8 7f 39 fe ff       	call   c0000750 <memset>
c001cdd1:	83 c4 10             	add    esp,0x10
c001cdd4:	46                   	inc    esi
c001cdd5:	e9 6c ff ff ff       	jmp    c001cd46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cdda:	53                   	push   ebx
c001cddb:	31 db                	xor    ebx,ebx
c001cddd:	68 00 01 00 00       	push   0x100
c001cde2:	6a 00                	push   0x0
c001cde4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cde8:	50                   	push   eax
c001cde9:	e8 62 39 fe ff       	call   c0000750 <memset>
c001cdee:	83 c4 0c             	add    esp,0xc
c001cdf1:	68 00 01 00 00       	push   0x100
c001cdf6:	6a 00                	push   0x0
c001cdf8:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cdff:	50                   	push   eax
c001ce00:	e8 4b 39 fe ff       	call   c0000750 <memset>
c001ce05:	83 c4 10             	add    esp,0x10
c001ce08:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce10:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ce18:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ce20:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce28:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ce30:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ce34:	0f 86 30 01 00 00    	jbe    c001cf6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ce3a:	0f b7 f3             	movzx  esi,bx
c001ce3d:	6b f6 28             	imul   esi,esi,0x28
c001ce40:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce44:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce4b:	52                   	push   edx
c001ce4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce50:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ce54:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce56:	6b d2 28             	imul   edx,edx,0x28
c001ce59:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ce5d:	31 d2                	xor    edx,edx
c001ce5f:	52                   	push   edx
c001ce60:	50                   	push   eax
c001ce61:	55                   	push   ebp
c001ce62:	e8 9b 60 ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001ce67:	83 c4 0c             	add    esp,0xc
c001ce6a:	6a 20                	push   0x20
c001ce6c:	6a 00                	push   0x0
c001ce6e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ce75:	51                   	push   ecx
c001ce76:	e8 d5 38 fe ff       	call   c0000750 <memset>
c001ce7b:	59                   	pop    ecx
c001ce7c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce7f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ce83:	52                   	push   edx
c001ce84:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001ce8b:	51                   	push   ecx
c001ce8c:	6a 00                	push   0x0
c001ce8e:	6a 1f                	push   0x1f
c001ce90:	55                   	push   ebp
c001ce91:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce94:	83 c4 1c             	add    esp,0x1c
c001ce97:	6a 09                	push   0x9
c001ce99:	68 f2 c3 02 c0       	push   0xc002c3f2
c001ce9e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cea5:	51                   	push   ecx
c001cea6:	e8 a1 37 fe ff       	call   c000064c <memcmp>
c001ceab:	83 c4 10             	add    esp,0x10
c001ceae:	85 c0                	test   eax,eax
c001ceb0:	75 21                	jne    c001ced3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001ceb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ceba:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cebe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cec2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cec5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cecc:	89 d0                	mov    eax,edx
c001cece:	40                   	inc    eax
c001cecf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ced3:	50                   	push   eax
c001ced4:	6a 09                	push   0x9
c001ced6:	68 fc c3 02 c0       	push   0xc002c3fc
c001cedb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cee2:	50                   	push   eax
c001cee3:	e8 64 37 fe ff       	call   c000064c <memcmp>
c001cee8:	83 c4 10             	add    esp,0x10
c001ceeb:	85 c0                	test   eax,eax
c001ceed:	75 21                	jne    c001cf10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001ceef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cef3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cef7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cefb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ceff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf02:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cf09:	89 d0                	mov    eax,edx
c001cf0b:	40                   	inc    eax
c001cf0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf10:	50                   	push   eax
c001cf11:	50                   	push   eax
c001cf12:	68 c8 c3 02 c0       	push   0xc002c3c8
c001cf17:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf1e:	50                   	push   eax
c001cf1f:	e8 74 39 fe ff       	call   c0000898 <strcmp>
c001cf24:	83 c4 10             	add    esp,0x10
c001cf27:	85 c0                	test   eax,eax
c001cf29:	75 0f                	jne    c001cf3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cf2b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf3a:	50                   	push   eax
c001cf3b:	50                   	push   eax
c001cf3c:	68 d0 c3 02 c0       	push   0xc002c3d0
c001cf41:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf48:	50                   	push   eax
c001cf49:	e8 4a 39 fe ff       	call   c0000898 <strcmp>
c001cf4e:	83 c4 10             	add    esp,0x10
c001cf51:	85 c0                	test   eax,eax
c001cf53:	75 0f                	jne    c001cf64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cf55:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cf64:	43                   	inc    ebx
c001cf65:	e9 c6 fe ff ff       	jmp    c001ce30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cf6a:	31 d2                	xor    edx,edx
c001cf6c:	50                   	push   eax
c001cf6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf71:	52                   	push   edx
c001cf72:	50                   	push   eax
c001cf73:	55                   	push   ebp
c001cf74:	e8 89 5f ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001cf79:	58                   	pop    eax
c001cf7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf7e:	e8 a6 28 ff ff       	call   c000f829 <malloc>
c001cf83:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf86:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cf8a:	31 d2                	xor    edx,edx
c001cf8c:	58                   	pop    eax
c001cf8d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cf91:	53                   	push   ebx
c001cf92:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cf96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf9a:	52                   	push   edx
c001cf9b:	50                   	push   eax
c001cf9c:	55                   	push   ebp
c001cf9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfa0:	83 c4 14             	add    esp,0x14
c001cfa3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cfa7:	e8 7d 28 ff ff       	call   c000f829 <malloc>
c001cfac:	31 d2                	xor    edx,edx
c001cfae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cfb2:	83 c4 0c             	add    esp,0xc
c001cfb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfb9:	52                   	push   edx
c001cfba:	50                   	push   eax
c001cfbb:	55                   	push   ebp
c001cfbc:	e8 41 5f ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001cfc1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfc4:	31 d2                	xor    edx,edx
c001cfc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfc9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cfcd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cfd1:	52                   	push   edx
c001cfd2:	50                   	push   eax
c001cfd3:	55                   	push   ebp
c001cfd4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfd7:	83 c4 20             	add    esp,0x20
c001cfda:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cfe2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cfe6:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cfea:	0f 84 0b 03 00 00    	je     c001d2fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cff0:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cff7:	31 d2                	xor    edx,edx
c001cff9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cffd:	c1 e8 03             	shr    eax,0x3
c001d000:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d004:	51                   	push   ecx
c001d005:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d009:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d00d:	52                   	push   edx
c001d00e:	50                   	push   eax
c001d00f:	55                   	push   ebp
c001d010:	e8 ed 5e ff ff       	call   c0012f02 <File::seek(unsigned long long)>
c001d015:	5b                   	pop    ebx
c001d016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d01a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d021:	e8 03 28 ff ff       	call   c000f829 <malloc>
c001d026:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d029:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d02d:	31 d2                	xor    edx,edx
c001d02f:	5e                   	pop    esi
c001d030:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d034:	50                   	push   eax
c001d035:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d039:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d03d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d044:	52                   	push   edx
c001d045:	50                   	push   eax
c001d046:	55                   	push   ebp
c001d047:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d04a:	83 c4 20             	add    esp,0x20
c001d04d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d055:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d059:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d05d:	0f 8d 7c 02 00 00    	jge    c001d2df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d063:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d067:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d06b:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d070:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d073:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d07b:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d07f:	89 d8                	mov    eax,ebx
c001d081:	c1 e8 08             	shr    eax,0x8
c001d084:	89 c6                	mov    esi,eax
c001d086:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d08a:	c1 e6 04             	shl    esi,0x4
c001d08d:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d091:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d094:	85 d2                	test   edx,edx
c001d096:	0f 85 bf 00 00 00    	jne    c001d15b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d09c:	83 ec 0c             	sub    esp,0xc
c001d09f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0a3:	03 06                	add    eax,DWORD PTR [esi]
c001d0a5:	50                   	push   eax
c001d0a6:	e8 4b f8 ff ff       	call   c001c8f6 <Thr::getAddressOfKernelSymbol(char const*)>
c001d0ab:	83 c4 10             	add    esp,0x10
c001d0ae:	89 c2                	mov    edx,eax
c001d0b0:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d0b5:	85 c0                	test   eax,eax
c001d0b7:	0f 85 9e 00 00 00    	jne    c001d15b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0bd:	83 ec 0c             	sub    esp,0xc
c001d0c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0c4:	03 06                	add    eax,DWORD PTR [esi]
c001d0c6:	50                   	push   eax
c001d0c7:	e8 a9 16 ff ff       	call   c000e775 <Krnl::resolveCompatibilitySymbol(char*)>
c001d0cc:	83 c4 10             	add    esp,0x10
c001d0cf:	89 c2                	mov    edx,eax
c001d0d1:	85 c0                	test   eax,eax
c001d0d3:	0f 85 82 00 00 00    	jne    c001d15b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0d9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d0dd:	50                   	push   eax
c001d0de:	50                   	push   eax
c001d0df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0e3:	03 06                	add    eax,DWORD PTR [esi]
c001d0e5:	50                   	push   eax
c001d0e6:	68 06 c4 02 c0       	push   0xc002c406
c001d0eb:	e8 91 57 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001d0f0:	58                   	pop    eax
c001d0f1:	5a                   	pop    edx
c001d0f2:	68 20 c4 02 c0       	push   0xc002c420
c001d0f7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0fe:	50                   	push   eax
c001d0ff:	e8 08 37 fe ff       	call   c000080c <strcpy>
c001d104:	59                   	pop    ecx
c001d105:	58                   	pop    eax
c001d106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d10a:	03 06                	add    eax,DWORD PTR [esi]
c001d10c:	50                   	push   eax
c001d10d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d114:	50                   	push   eax
c001d115:	e8 32 38 fe ff       	call   c000094c <strcat>
c001d11a:	58                   	pop    eax
c001d11b:	5a                   	pop    edx
c001d11c:	68 b6 c4 02 c0       	push   0xc002c4b6
c001d121:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d128:	50                   	push   eax
c001d129:	e8 1e 38 fe ff       	call   c000094c <strcat>
c001d12e:	83 c4 10             	add    esp,0x10
c001d131:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d136:	0f 84 5d 01 00 00    	je     c001d299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d13c:	83 ec 0c             	sub    esp,0xc
c001d13f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d146:	50                   	push   eax
c001d147:	e8 a3 d0 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001d14c:	83 c4 10             	add    esp,0x10
c001d14f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d153:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d157:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d15b:	80 fb 01             	cmp    bl,0x1
c001d15e:	0f 85 88 00 00 00    	jne    c001d1ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d164:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d16b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d16f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d173:	01 ce                	add    esi,ecx
c001d175:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d17b:	0f 94 c0             	sete   al
c001d17e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d184:	0f 94 c3             	sete   bl
c001d187:	09 c3                	or     ebx,eax
c001d189:	8b 06                	mov    eax,DWORD PTR [esi]
c001d18b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d190:	74 41                	je     c001d1d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d192:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d195:	84 db                	test   bl,bl
c001d197:	75 15                	jne    c001d1ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d199:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d19d:	66 83 f8 0c          	cmp    ax,0xc
c001d1a1:	76 05                	jbe    c001d1a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d1a3:	b8 0c 00 00 00       	mov    eax,0xc
c001d1a8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d1ac:	76 37                	jbe    c001d1e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d1ae:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d1b2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d1b7:	0f 84 dc 00 00 00    	je     c001d299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d1bd:	83 ec 0c             	sub    esp,0xc
c001d1c0:	68 37 c4 02 c0       	push   0xc002c437
c001d1c5:	e8 25 d0 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001d1ca:	83 c4 10             	add    esp,0x10
c001d1cd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d1d1:	eb 12                	jmp    c001d1e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d1d3:	01 c1                	add    ecx,eax
c001d1d5:	84 db                	test   bl,bl
c001d1d7:	75 0c                	jne    c001d1e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d1d9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d1dd:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d1e1:	77 02                	ja     c001d1e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d1e3:	01 d1                	add    ecx,edx
c001d1e5:	89 0e                	mov    DWORD PTR [esi],ecx
c001d1e7:	e9 ea 00 00 00       	jmp    c001d2d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d1ec:	80 fb 02             	cmp    bl,0x2
c001d1ef:	75 7c                	jne    c001d26d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d1f1:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d1f8:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d1fc:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d200:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d206:	74 20                	je     c001d228 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d208:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d20e:	74 18                	je     c001d228 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d210:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d214:	b9 0a 00 00 00       	mov    ecx,0xa
c001d219:	66 83 f8 0e          	cmp    ax,0xe
c001d21d:	77 03                	ja     c001d222 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d21f:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d222:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d226:	76 1f                	jbe    c001d247 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d228:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d22c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d231:	74 66                	je     c001d299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d233:	83 ec 0c             	sub    esp,0xc
c001d236:	68 53 c4 02 c0       	push   0xc002c453
c001d23b:	e8 af cf ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001d240:	83 c4 10             	add    esp,0x10
c001d243:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d247:	8b 06                	mov    eax,DWORD PTR [esi]
c001d249:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d24e:	74 13                	je     c001d263 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d250:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d254:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d25b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d25f:	01 c8                	add    eax,ecx
c001d261:	eb 04                	jmp    c001d267 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d263:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d267:	01 c2                	add    edx,eax
c001d269:	89 16                	mov    DWORD PTR [esi],edx
c001d26b:	eb 69                	jmp    c001d2d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d26d:	0f b6 db             	movzx  ebx,bl
c001d270:	50                   	push   eax
c001d271:	50                   	push   eax
c001d272:	53                   	push   ebx
c001d273:	68 6f c4 02 c0       	push   0xc002c46f
c001d278:	e8 04 56 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001d27d:	83 c4 10             	add    esp,0x10
c001d280:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d285:	74 12                	je     c001d299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d287:	83 ec 0c             	sub    esp,0xc
c001d28a:	68 7a c4 02 c0       	push   0xc002c47a
c001d28f:	e8 5b cf ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001d294:	83 c4 10             	add    esp,0x10
c001d297:	eb 3d                	jmp    c001d2d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d299:	83 ec 0c             	sub    esp,0xc
c001d29c:	55                   	push   ebp
c001d29d:	e8 00 5c ff ff       	call   c0012ea2 <File::close()>
c001d2a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d2ab:	59                   	pop    ecx
c001d2ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2b0:	e8 84 25 ff ff       	call   c000f839 <free>
c001d2b5:	5b                   	pop    ebx
c001d2b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2ba:	e8 7a 25 ff ff       	call   c000f839 <free>
c001d2bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2c2:	e8 72 25 ff ff       	call   c000f839 <free>
c001d2c7:	5e                   	pop    esi
c001d2c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2cc:	e8 68 25 ff ff       	call   c000f839 <free>
c001d2d1:	83 c4 10             	add    esp,0x10
c001d2d4:	eb 21                	jmp    c001d2f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d2d6:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d2da:	e9 76 fd ff ff       	jmp    c001d055 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d2df:	83 ec 0c             	sub    esp,0xc
c001d2e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2e6:	e8 4e 25 ff ff       	call   c000f839 <free>
c001d2eb:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d2ef:	83 c4 10             	add    esp,0x10
c001d2f2:	e9 eb fc ff ff       	jmp    c001cfe2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d2f7:	31 c0                	xor    eax,eax
c001d2f9:	eb 33                	jmp    c001d32e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d2fb:	83 ec 0c             	sub    esp,0xc
c001d2fe:	55                   	push   ebp
c001d2ff:	e8 9e 5b ff ff       	call   c0012ea2 <File::close()>
c001d304:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d307:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d30a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d30d:	58                   	pop    eax
c001d30e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d312:	e8 22 25 ff ff       	call   c000f839 <free>
c001d317:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d31a:	e8 1a 25 ff ff       	call   c000f839 <free>
c001d31f:	5a                   	pop    edx
c001d320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d324:	e8 10 25 ff ff       	call   c000f839 <free>
c001d329:	83 c4 10             	add    esp,0x10
c001d32c:	b0 01                	mov    al,0x1
c001d32e:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d334:	5b                   	pop    ebx
c001d335:	5e                   	pop    esi
c001d336:	5f                   	pop    edi
c001d337:	5d                   	pop    ebp
c001d338:	c3                   	ret    

c001d339 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d339:	56                   	push   esi
c001d33a:	31 d2                	xor    edx,edx
c001d33c:	53                   	push   ebx
c001d33d:	8b 1d c0 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0c0
c001d343:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d347:	39 d3                	cmp    ebx,edx
c001d349:	7e 1b                	jle    c001d366 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d34b:	8b 04 95 e0 f2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0d20]
c001d352:	39 c8                	cmp    eax,ecx
c001d354:	77 0d                	ja     c001d363 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d356:	8b 34 95 e0 f0 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0f20]
c001d35d:	01 c6                	add    esi,eax
c001d35f:	39 ce                	cmp    esi,ecx
c001d361:	77 05                	ja     c001d368 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d363:	42                   	inc    edx
c001d364:	eb e1                	jmp    c001d347 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d366:	31 c0                	xor    eax,eax
c001d368:	5b                   	pop    ebx
c001d369:	5e                   	pop    esi
c001d36a:	c3                   	ret    

c001d36b <Thr::getDriverNameFromAddress(unsigned long)>:
c001d36b:	53                   	push   ebx
c001d36c:	31 c0                	xor    eax,eax
c001d36e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d372:	8b 1d c0 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0c0
c001d378:	39 c3                	cmp    ebx,eax
c001d37a:	7e 22                	jle    c001d39e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d37c:	8b 14 85 e0 f2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0d20]
c001d383:	39 ca                	cmp    edx,ecx
c001d385:	77 14                	ja     c001d39b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d387:	03 14 85 e0 f0 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0f20]
c001d38e:	39 ca                	cmp    edx,ecx
c001d390:	76 09                	jbe    c001d39b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d392:	8b 04 85 e0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b20]
c001d399:	eb 05                	jmp    c001d3a0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d39b:	40                   	inc    eax
c001d39c:	eb da                	jmp    c001d378 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d39e:	31 c0                	xor    eax,eax
c001d3a0:	5b                   	pop    ebx
c001d3a1:	c3                   	ret    

c001d3a2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d3a2:	53                   	push   ebx
c001d3a3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d3a7:	53                   	push   ebx
c001d3a8:	e8 8c ff ff ff       	call   c001d339 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d3ad:	5a                   	pop    edx
c001d3ae:	31 d2                	xor    edx,edx
c001d3b0:	85 c0                	test   eax,eax
c001d3b2:	74 04                	je     c001d3b8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d3b4:	89 da                	mov    edx,ebx
c001d3b6:	29 c2                	sub    edx,eax
c001d3b8:	89 d0                	mov    eax,edx
c001d3ba:	5b                   	pop    ebx
c001d3bb:	c3                   	ret    

c001d3bc <Thr::loadDLL(char const*, bool)>:
c001d3bc:	55                   	push   ebp
c001d3bd:	57                   	push   edi
c001d3be:	56                   	push   esi
c001d3bf:	53                   	push   ebx
c001d3c0:	81 ec 34 01 00 00    	sub    esp,0x134
c001d3c6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d3cd:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d3d4:	56                   	push   esi
c001d3d5:	68 92 c4 02 c0       	push   0xc002c492
c001d3da:	e8 a2 54 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001d3df:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d3e6:	e8 3e 24 ff ff       	call   c000f829 <malloc>
c001d3eb:	83 c4 0c             	add    esp,0xc
c001d3ee:	89 c3                	mov    ebx,eax
c001d3f0:	ff 35 b0 f8 02 c0    	push   DWORD PTR ds:0xc002f8b0
c001d3f6:	56                   	push   esi
c001d3f7:	50                   	push   eax
c001d3f8:	e8 e3 59 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c001d3fd:	83 c4 10             	add    esp,0x10
c001d400:	85 db                	test   ebx,ebx
c001d402:	75 3c                	jne    c001d440 <Thr::loadDLL(char const*, bool)+0x84>
c001d404:	89 f8                	mov    eax,edi
c001d406:	84 c0                	test   al,al
c001d408:	0f 84 d2 01 00 00    	je     c001d5e0 <Thr::loadDLL(char const*, bool)+0x224>
c001d40e:	55                   	push   ebp
c001d40f:	55                   	push   ebp
c001d410:	68 a3 c4 02 c0       	push   0xc002c4a3
c001d415:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d419:	55                   	push   ebp
c001d41a:	e8 ed 33 fe ff       	call   c000080c <strcpy>
c001d41f:	58                   	pop    eax
c001d420:	5a                   	pop    edx
c001d421:	56                   	push   esi
c001d422:	55                   	push   ebp
c001d423:	e8 24 35 fe ff       	call   c000094c <strcat>
c001d428:	59                   	pop    ecx
c001d429:	58                   	pop    eax
c001d42a:	68 b6 c4 02 c0       	push   0xc002c4b6
c001d42f:	55                   	push   ebp
c001d430:	e8 17 35 fe ff       	call   c000094c <strcat>
c001d435:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d438:	e8 b2 cd ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001d43d:	83 c4 10             	add    esp,0x10
c001d440:	51                   	push   ecx
c001d441:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d445:	50                   	push   eax
c001d446:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d44a:	50                   	push   eax
c001d44b:	53                   	push   ebx
c001d44c:	e8 9f 5c ff ff       	call   c00130f0 <File::stat(unsigned long long*, bool*)>
c001d451:	83 c4 10             	add    esp,0x10
c001d454:	85 db                	test   ebx,ebx
c001d456:	74 0c                	je     c001d464 <Thr::loadDLL(char const*, bool)+0xa8>
c001d458:	83 ec 0c             	sub    esp,0xc
c001d45b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d45d:	53                   	push   ebx
c001d45e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d461:	83 c4 10             	add    esp,0x10
c001d464:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d469:	75 0a                	jne    c001d475 <Thr::loadDLL(char const*, bool)+0xb9>
c001d46b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d46f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d473:	75 3c                	jne    c001d4b1 <Thr::loadDLL(char const*, bool)+0xf5>
c001d475:	89 f8                	mov    eax,edi
c001d477:	84 c0                	test   al,al
c001d479:	0f 84 49 01 00 00    	je     c001d5c8 <Thr::loadDLL(char const*, bool)+0x20c>
c001d47f:	51                   	push   ecx
c001d480:	51                   	push   ecx
c001d481:	68 a3 c4 02 c0       	push   0xc002c4a3
c001d486:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d48a:	53                   	push   ebx
c001d48b:	e8 7c 33 fe ff       	call   c000080c <strcpy>
c001d490:	5d                   	pop    ebp
c001d491:	58                   	pop    eax
c001d492:	56                   	push   esi
c001d493:	53                   	push   ebx
c001d494:	e8 b3 34 fe ff       	call   c000094c <strcat>
c001d499:	58                   	pop    eax
c001d49a:	5a                   	pop    edx
c001d49b:	68 b6 c4 02 c0       	push   0xc002c4b6
c001d4a0:	53                   	push   ebx
c001d4a1:	e8 a6 34 fe ff       	call   c000094c <strcat>
c001d4a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4a9:	e8 41 cd ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001d4ae:	83 c4 10             	add    esp,0x10
c001d4b1:	52                   	push   edx
c001d4b2:	6a 03                	push   0x3
c001d4b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d4bc:	05 ff 0f 00 00       	add    eax,0xfff
c001d4c1:	83 d2 00             	adc    edx,0x0
c001d4c4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d4c8:	50                   	push   eax
c001d4c9:	ff 35 f0 e4 02 c0    	push   DWORD PTR ds:0xc002e4f0
c001d4cf:	e8 84 47 ff ff       	call   c0011c58 <VAS::allocatePages(int, int)>
c001d4d4:	59                   	pop    ecx
c001d4d5:	89 c3                	mov    ebx,eax
c001d4d7:	5d                   	pop    ebp
c001d4d8:	50                   	push   eax
c001d4d9:	68 71 a6 02 c0       	push   0xc002a671
c001d4de:	e8 9e 53 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001d4e3:	89 34 24             	mov    DWORD PTR [esp],esi
c001d4e6:	e8 81 32 fe ff       	call   c000076c <strlen>
c001d4eb:	8b 2d c0 f0 02 c0    	mov    ebp,DWORD PTR ds:0xc002f0c0
c001d4f1:	40                   	inc    eax
c001d4f2:	89 04 24             	mov    DWORD PTR [esp],eax
c001d4f5:	e8 2f 23 ff ff       	call   c000f829 <malloc>
c001d4fa:	89 04 ad e0 f4 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd0b20],eax
c001d501:	58                   	pop    eax
c001d502:	a1 c0 f0 02 c0       	mov    eax,ds:0xc002f0c0
c001d507:	5a                   	pop    edx
c001d508:	56                   	push   esi
c001d509:	ff 34 85 e0 f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b20]
c001d510:	e8 f7 32 fe ff       	call   c000080c <strcpy>
c001d515:	a1 c0 f0 02 c0       	mov    eax,ds:0xc002f0c0
c001d51a:	8d 50 01             	lea    edx,[eax+0x1]
c001d51d:	89 1c 85 e0 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d20],ebx
c001d524:	89 15 c0 f0 02 c0    	mov    DWORD PTR ds:0xc002f0c0,edx
c001d52a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d52e:	83 c4 0c             	add    esp,0xc
c001d531:	89 14 85 e0 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0f20],edx
c001d538:	6a 01                	push   0x1
c001d53a:	53                   	push   ebx
c001d53b:	56                   	push   esi
c001d53c:	e8 c2 f6 ff ff       	call   c001cc03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d541:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d545:	83 c4 10             	add    esp,0x10
c001d548:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d54d:	0f 85 89 00 00 00    	jne    c001d5dc <Thr::loadDLL(char const*, bool)+0x220>
c001d553:	89 f8                	mov    eax,edi
c001d555:	84 c0                	test   al,al
c001d557:	74 73                	je     c001d5cc <Thr::loadDLL(char const*, bool)+0x210>
c001d559:	83 ec 0c             	sub    esp,0xc
c001d55c:	68 b8 c4 02 c0       	push   0xc002c4b8
c001d561:	e8 89 cc ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001d566:	83 c4 10             	add    esp,0x10
c001d569:	eb 61                	jmp    c001d5cc <Thr::loadDLL(char const*, bool)+0x210>
c001d56b:	50                   	push   eax
c001d56c:	50                   	push   eax
c001d56d:	89 e8                	mov    eax,ebp
c001d56f:	c1 e0 0c             	shl    eax,0xc
c001d572:	01 d8                	add    eax,ebx
c001d574:	50                   	push   eax
c001d575:	ff 35 f0 e4 02 c0    	push   DWORD PTR ds:0xc002e4f0
c001d57b:	e8 40 42 ff ff       	call   c00117c0 <VAS::getPageTableEntry(unsigned long)>
c001d580:	83 c4 10             	add    esp,0x10
c001d583:	8b 00                	mov    eax,DWORD PTR [eax]
c001d585:	a8 60                	test   al,0x60
c001d587:	75 11                	jne    c001d59a <Thr::loadDLL(char const*, bool)+0x1de>
c001d589:	83 ec 0c             	sub    esp,0xc
c001d58c:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d591:	50                   	push   eax
c001d592:	e8 1d 26 ff ff       	call   c000fbb4 <Phys::freePage(unsigned long)>
c001d597:	83 c4 10             	add    esp,0x10
c001d59a:	45                   	inc    ebp
c001d59b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d59f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d5a3:	05 ff 0f 00 00       	add    eax,0xfff
c001d5a8:	bf 00 00 00 00       	mov    edi,0x0
c001d5ad:	83 d2 00             	adc    edx,0x0
c001d5b0:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d5b4:	c1 ea 0c             	shr    edx,0xc
c001d5b7:	39 c5                	cmp    ebp,eax
c001d5b9:	89 d1                	mov    ecx,edx
c001d5bb:	89 f8                	mov    eax,edi
c001d5bd:	19 c8                	sbb    eax,ecx
c001d5bf:	72 aa                	jb     c001d56b <Thr::loadDLL(char const*, bool)+0x1af>
c001d5c1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d5c6:	75 18                	jne    c001d5e0 <Thr::loadDLL(char const*, bool)+0x224>
c001d5c8:	31 db                	xor    ebx,ebx
c001d5ca:	eb 14                	jmp    c001d5e0 <Thr::loadDLL(char const*, bool)+0x224>
c001d5cc:	83 ec 0c             	sub    esp,0xc
c001d5cf:	68 d7 c4 02 c0       	push   0xc002c4d7
c001d5d4:	e8 16 cc ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001d5d9:	83 c4 10             	add    esp,0x10
c001d5dc:	31 ed                	xor    ebp,ebp
c001d5de:	eb bb                	jmp    c001d59b <Thr::loadDLL(char const*, bool)+0x1df>
c001d5e0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d5e6:	89 d8                	mov    eax,ebx
c001d5e8:	5b                   	pop    ebx
c001d5e9:	5e                   	pop    esi
c001d5ea:	5f                   	pop    edi
c001d5eb:	5d                   	pop    ebp
c001d5ec:	c3                   	ret    

c001d5ed <Thr::executeDLL(unsigned long, void*)>:
c001d5ed:	56                   	push   esi
c001d5ee:	53                   	push   ebx
c001d5ef:	52                   	push   edx
c001d5f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5f4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d5f8:	85 db                	test   ebx,ebx
c001d5fa:	75 10                	jne    c001d60c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	68 f3 c4 02 c0       	push   0xc002c4f3
c001d604:	e8 e6 cb ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001d609:	83 c4 10             	add    esp,0x10
c001d60c:	50                   	push   eax
c001d60d:	50                   	push   eax
c001d60e:	53                   	push   ebx
c001d60f:	68 1d c5 02 c0       	push   0xc002c51d
c001d614:	e8 68 52 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001d619:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d61d:	89 d8                	mov    eax,ebx
c001d61f:	83 c4 14             	add    esp,0x14
c001d622:	5b                   	pop    ebx
c001d623:	5e                   	pop    esi
c001d624:	ff e0                	jmp    eax

c001d626 <userModeEntryPoint(void*)>:
c001d626:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001d62b:	48                   	dec    eax
c001d62c:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001d631:	75 01                	jne    c001d634 <userModeEntryPoint(void*)+0xe>
c001d633:	fb                   	sti    
c001d634:	fb                   	sti    
c001d635:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d63a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d63d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d643:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d647:	e9 de 2c fe ff       	jmp    c000032a <goToUsermode>

c001d64c <changeTSS>:
c001d64c:	83 ec 14             	sub    esp,0x14
c001d64f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d654:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d657:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d65c:	c1 e2 15             	shl    edx,0x15
c001d65f:	29 d0                	sub    eax,edx
c001d661:	50                   	push   eax
c001d662:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001d667:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d66d:	05 7c 11 00 00       	add    eax,0x117c
c001d672:	50                   	push   eax
c001d673:	e8 8c 37 ff ff       	call   c0010e04 <TSS::setESP(unsigned long)>
c001d678:	83 c4 1c             	add    esp,0x1c
c001d67b:	c3                   	ret    

c001d67c <switchToThread(ThreadControlBlock*)>:
c001d67c:	57                   	push   edi
c001d67d:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001d682:	56                   	push   esi
c001d683:	85 c0                	test   eax,eax
c001d685:	53                   	push   ebx
c001d686:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d68a:	0f 85 88 00 00 00    	jne    c001d718 <switchToThread(ThreadControlBlock*)+0x9c>
c001d690:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d693:	3c ff                	cmp    al,0xff
c001d695:	74 7d                	je     c001d714 <switchToThread(ThreadControlBlock*)+0x98>
c001d697:	0f b6 d0             	movzx  edx,al
c001d69a:	b8 84 03 00 00       	mov    eax,0x384
c001d69f:	29 d0                	sub    eax,edx
c001d6a1:	c1 e0 10             	shl    eax,0x10
c001d6a4:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d6a7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d6aa:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001d6af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d6b5:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d6bc:	74 4a                	je     c001d708 <switchToThread(ThreadControlBlock*)+0x8c>
c001d6be:	0f 31                	rdtsc  
c001d6c0:	a3 c8 f8 02 c0       	mov    ds:0xc002f8c8,eax
c001d6c5:	89 c6                	mov    esi,eax
c001d6c7:	89 d7                	mov    edi,edx
c001d6c9:	2b 35 b8 f8 02 c0    	sub    esi,DWORD PTR ds:0xc002f8b8
c001d6cf:	89 15 cc f8 02 c0    	mov    DWORD PTR ds:0xc002f8cc,edx
c001d6d5:	1b 3d bc f8 02 c0    	sbb    edi,DWORD PTR ds:0xc002f8bc
c001d6db:	89 35 c0 f8 02 c0    	mov    DWORD PTR ds:0xc002f8c0,esi
c001d6e1:	a3 b8 f8 02 c0       	mov    ds:0xc002f8b8,eax
c001d6e6:	89 3d c4 f8 02 c0    	mov    DWORD PTR ds:0xc002f8c4,edi
c001d6ec:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d6f2:	89 15 bc f8 02 c0    	mov    DWORD PTR ds:0xc002f8bc,edx
c001d6f8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d6fb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d6fe:	01 c6                	add    esi,eax
c001d700:	11 d7                	adc    edi,edx
c001d702:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d705:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d708:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d70c:	5b                   	pop    ebx
c001d70d:	5e                   	pop    esi
c001d70e:	5f                   	pop    edi
c001d70f:	e9 4e 2c fe ff       	jmp    c0000362 <switchToThreadASM>
c001d714:	31 c0                	xor    eax,eax
c001d716:	eb 8f                	jmp    c001d6a7 <switchToThread(ThreadControlBlock*)+0x2b>
c001d718:	5b                   	pop    ebx
c001d719:	c7 05 80 f8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x1
c001d723:	5e                   	pop    esi
c001d724:	5f                   	pop    edi
c001d725:	c3                   	ret    

c001d726 <Process::addArgs(char**)>:
c001d726:	57                   	push   edi
c001d727:	56                   	push   esi
c001d728:	53                   	push   ebx
c001d729:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d72d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d731:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d73b:	85 ff                	test   edi,edi
c001d73d:	74 3d                	je     c001d77c <Process::addArgs(char**)+0x56>
c001d73f:	8b 07                	mov    eax,DWORD PTR [edi]
c001d741:	85 c0                	test   eax,eax
c001d743:	74 37                	je     c001d77c <Process::addArgs(char**)+0x56>
c001d745:	31 db                	xor    ebx,ebx
c001d747:	83 ec 0c             	sub    esp,0xc
c001d74a:	50                   	push   eax
c001d74b:	e8 1c 30 fe ff       	call   c000076c <strlen>
c001d750:	40                   	inc    eax
c001d751:	89 04 24             	mov    DWORD PTR [esp],eax
c001d754:	e8 d0 20 ff ff       	call   c000f829 <malloc>
c001d759:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d760:	5a                   	pop    edx
c001d761:	59                   	pop    ecx
c001d762:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d765:	43                   	inc    ebx
c001d766:	50                   	push   eax
c001d767:	e8 a0 30 fe ff       	call   c000080c <strcpy>
c001d76c:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d772:	83 c4 10             	add    esp,0x10
c001d775:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d778:	85 c0                	test   eax,eax
c001d77a:	75 cb                	jne    c001d747 <Process::addArgs(char**)+0x21>
c001d77c:	5b                   	pop    ebx
c001d77d:	5e                   	pop    esi
c001d77e:	5f                   	pop    edi
c001d77f:	c3                   	ret    

c001d780 <Process::Process(char const*, Process*, char**)>:
c001d780:	56                   	push   esi
c001d781:	53                   	push   ebx
c001d782:	83 ec 14             	sub    esp,0x14
c001d785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d789:	05 0c 02 00 00       	add    eax,0x20c
c001d78e:	bb 07 00 00 00       	mov    ebx,0x7
c001d793:	89 c6                	mov    esi,eax
c001d795:	85 db                	test   ebx,ebx
c001d797:	78 12                	js     c001d7ab <Process::Process(char const*, Process*, char**)+0x2b>
c001d799:	83 ec 0c             	sub    esp,0xc
c001d79c:	56                   	push   esi
c001d79d:	e8 f4 b7 00 00       	call   c0028f96 <ThreadControlBlock::ThreadControlBlock()>
c001d7a2:	83 c4 10             	add    esp,0x10
c001d7a5:	83 c6 63             	add    esi,0x63
c001d7a8:	4b                   	dec    ebx
c001d7a9:	eb ea                	jmp    c001d795 <Process::Process(char const*, Process*, char**)+0x15>
c001d7ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7af:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d7b6:	83 ec 0c             	sub    esp,0xc
c001d7b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7bd:	e8 b6 c8 ff ff       	call   c001a078 <Krnl::newProcessEnv(Process*)>
c001d7c2:	83 c4 10             	add    esp,0x10
c001d7c5:	89 c2                	mov    edx,eax
c001d7c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7cb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7d5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d7de:	a1 10 d9 02 c0       	mov    eax,ds:0xc002d910
c001d7e3:	8d 50 01             	lea    edx,[eax+0x1]
c001d7e6:	89 15 10 d9 02 c0    	mov    DWORD PTR ds:0xc002d910,edx
c001d7ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d7f0:	89 02                	mov    DWORD PTR [edx],eax
c001d7f2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d7fa:	83 ec 0c             	sub    esp,0xc
c001d7fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d801:	e8 23 20 ff ff       	call   c000f829 <malloc>
c001d806:	83 c4 10             	add    esp,0x10
c001d809:	89 c3                	mov    ebx,eax
c001d80b:	83 ec 08             	sub    esp,0x8
c001d80e:	6a 00                	push   0x0
c001d810:	53                   	push   ebx
c001d811:	e8 ea 47 ff ff       	call   c0012000 <VAS::VAS(bool)>
c001d816:	83 c4 10             	add    esp,0x10
c001d819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d81d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d827:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d831:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d835:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d839:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d83f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d843:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d849:	85 c0                	test   eax,eax
c001d84b:	74 42                	je     c001d88f <Process::Process(char const*, Process*, char**)+0x10f>
c001d84d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d851:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d857:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d85d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d861:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d86b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d871:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d87b:	05 0c 01 00 00       	add    eax,0x10c
c001d880:	83 ec 08             	sub    esp,0x8
c001d883:	52                   	push   edx
c001d884:	50                   	push   eax
c001d885:	e8 82 2f fe ff       	call   c000080c <strcpy>
c001d88a:	83 c4 10             	add    esp,0x10
c001d88d:	eb 63                	jmp    c001d8f2 <Process::Process(char const*, Process*, char**)+0x172>
c001d88f:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d897:	83 ec 0c             	sub    esp,0xc
c001d89a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d89e:	e8 86 1f ff ff       	call   c000f829 <malloc>
c001d8a3:	83 c4 10             	add    esp,0x10
c001d8a6:	89 c3                	mov    ebx,eax
c001d8a8:	83 ec 08             	sub    esp,0x8
c001d8ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8af:	53                   	push   ebx
c001d8b0:	e8 61 32 ff ff       	call   c0010b16 <VgaText::VgaText(char const*)>
c001d8b5:	83 c4 10             	add    esp,0x10
c001d8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8bc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d8c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8c6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d8cc:	83 ec 0c             	sub    esp,0xc
c001d8cf:	50                   	push   eax
c001d8d0:	e8 00 2a ff ff       	call   c00102d5 <addToTerminalCycle(VgaText*)>
c001d8d5:	83 c4 10             	add    esp,0x10
c001d8d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8dc:	05 0c 01 00 00       	add    eax,0x10c
c001d8e1:	83 ec 08             	sub    esp,0x8
c001d8e4:	68 3c c5 02 c0       	push   0xc002c53c
c001d8e9:	50                   	push   eax
c001d8ea:	e8 1d 2f fe ff       	call   c000080c <strcpy>
c001d8ef:	83 c4 10             	add    esp,0x10
c001d8f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8f6:	83 c0 0c             	add    eax,0xc
c001d8f9:	83 ec 08             	sub    esp,0x8
c001d8fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d900:	50                   	push   eax
c001d901:	e8 06 2f fe ff       	call   c000080c <strcpy>
c001d906:	83 c4 10             	add    esp,0x10
c001d909:	83 ec 08             	sub    esp,0x8
c001d90c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d910:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d914:	e8 0d fe ff ff       	call   c001d726 <Process::addArgs(char**)>
c001d919:	83 c4 10             	add    esp,0x10
c001d91c:	83 ec 08             	sub    esp,0x8
c001d91f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d923:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d927:	e8 a1 ed ff ff       	call   c001c6cd <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d92c:	83 c4 10             	add    esp,0x10
c001d92f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d933:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d937:	83 f0 01             	xor    eax,0x1
c001d93a:	88 c2                	mov    dl,al
c001d93c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d940:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d946:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d94b:	83 ec 08             	sub    esp,0x8
c001d94e:	50                   	push   eax
c001d94f:	68 94 c5 02 c0       	push   0xc002c594
c001d954:	e8 28 4f ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001d959:	83 c4 10             	add    esp,0x10
c001d95c:	90                   	nop
c001d95d:	83 c4 14             	add    esp,0x14
c001d960:	5b                   	pop    ebx
c001d961:	5e                   	pop    esi
c001d962:	c3                   	ret    
c001d963:	90                   	nop

c001d964 <Process::Process(bool, char const*, Process*, char**)>:
c001d964:	56                   	push   esi
c001d965:	53                   	push   ebx
c001d966:	83 ec 24             	sub    esp,0x24
c001d969:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d96d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d971:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d975:	05 0c 02 00 00       	add    eax,0x20c
c001d97a:	bb 07 00 00 00       	mov    ebx,0x7
c001d97f:	89 c6                	mov    esi,eax
c001d981:	85 db                	test   ebx,ebx
c001d983:	78 12                	js     c001d997 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d985:	83 ec 0c             	sub    esp,0xc
c001d988:	56                   	push   esi
c001d989:	e8 08 b6 00 00       	call   c0028f96 <ThreadControlBlock::ThreadControlBlock()>
c001d98e:	83 c4 10             	add    esp,0x10
c001d991:	83 c6 63             	add    esi,0x63
c001d994:	4b                   	dec    ebx
c001d995:	eb ea                	jmp    c001d981 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d997:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d99b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d9a2:	83 ec 0c             	sub    esp,0xc
c001d9a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9a9:	e8 ca c6 ff ff       	call   c001a078 <Krnl::newProcessEnv(Process*)>
c001d9ae:	83 c4 10             	add    esp,0x10
c001d9b1:	89 c2                	mov    edx,eax
c001d9b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9b7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d9bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9c1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d9ca:	a1 10 d9 02 c0       	mov    eax,ds:0xc002d910
c001d9cf:	8d 50 01             	lea    edx,[eax+0x1]
c001d9d2:	89 15 10 d9 02 c0    	mov    DWORD PTR ds:0xc002d910,edx
c001d9d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9dc:	89 02                	mov    DWORD PTR [edx],eax
c001d9de:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d9e6:	83 ec 0c             	sub    esp,0xc
c001d9e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d9ed:	e8 37 1e ff ff       	call   c000f829 <malloc>
c001d9f2:	83 c4 10             	add    esp,0x10
c001d9f5:	89 c3                	mov    ebx,eax
c001d9f7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d9fc:	83 ec 08             	sub    esp,0x8
c001d9ff:	50                   	push   eax
c001da00:	53                   	push   ebx
c001da01:	e8 fa 45 ff ff       	call   c0012000 <VAS::VAS(bool)>
c001da06:	83 c4 10             	add    esp,0x10
c001da09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da0d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001da13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da17:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001da21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da25:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001da29:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001da2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da33:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da39:	85 c0                	test   eax,eax
c001da3b:	74 42                	je     c001da7f <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001da3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da41:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da47:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001da4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da51:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001da57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da5b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da61:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001da67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da6b:	05 0c 01 00 00       	add    eax,0x10c
c001da70:	83 ec 08             	sub    esp,0x8
c001da73:	52                   	push   edx
c001da74:	50                   	push   eax
c001da75:	e8 92 2d fe ff       	call   c000080c <strcpy>
c001da7a:	83 c4 10             	add    esp,0x10
c001da7d:	eb 63                	jmp    c001dae2 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001da7f:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001da87:	83 ec 0c             	sub    esp,0xc
c001da8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001da8e:	e8 96 1d ff ff       	call   c000f829 <malloc>
c001da93:	83 c4 10             	add    esp,0x10
c001da96:	89 c3                	mov    ebx,eax
c001da98:	83 ec 08             	sub    esp,0x8
c001da9b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001da9f:	53                   	push   ebx
c001daa0:	e8 71 30 ff ff       	call   c0010b16 <VgaText::VgaText(char const*)>
c001daa5:	83 c4 10             	add    esp,0x10
c001daa8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daac:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dab6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dabc:	83 ec 0c             	sub    esp,0xc
c001dabf:	50                   	push   eax
c001dac0:	e8 10 28 ff ff       	call   c00102d5 <addToTerminalCycle(VgaText*)>
c001dac5:	83 c4 10             	add    esp,0x10
c001dac8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dacc:	05 0c 01 00 00       	add    eax,0x10c
c001dad1:	83 ec 08             	sub    esp,0x8
c001dad4:	68 3c c5 02 c0       	push   0xc002c53c
c001dad9:	50                   	push   eax
c001dada:	e8 2d 2d fe ff       	call   c000080c <strcpy>
c001dadf:	83 c4 10             	add    esp,0x10
c001dae2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dae6:	83 c0 0c             	add    eax,0xc
c001dae9:	83 ec 08             	sub    esp,0x8
c001daec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001daf0:	50                   	push   eax
c001daf1:	e8 16 2d fe ff       	call   c000080c <strcpy>
c001daf6:	83 c4 10             	add    esp,0x10
c001daf9:	83 ec 08             	sub    esp,0x8
c001dafc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001db00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db04:	e8 1d fc ff ff       	call   c001d726 <Process::addArgs(char**)>
c001db09:	83 c4 10             	add    esp,0x10
c001db0c:	90                   	nop
c001db0d:	83 c4 24             	add    esp,0x24
c001db10:	5b                   	pop    ebx
c001db11:	5e                   	pop    esi
c001db12:	c3                   	ret    

c001db13 <taskStartupFunction>:
c001db13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db18:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001db1b:	c3                   	ret    

c001db1c <Semaphore::Semaphore(int)>:
c001db1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db24:	89 10                	mov    DWORD PTR [eax],edx
c001db26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db2a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001db31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db35:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001db3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db40:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db47:	90                   	nop
c001db48:	c3                   	ret    
c001db49:	90                   	nop

c001db4a <Mutex::Mutex()>:
c001db4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db4e:	6a 01                	push   0x1
c001db50:	50                   	push   eax
c001db51:	e8 c6 ff ff ff       	call   c001db1c <Semaphore::Semaphore(int)>
c001db56:	83 c4 08             	add    esp,0x8
c001db59:	90                   	nop
c001db5a:	c3                   	ret    
c001db5b:	90                   	nop

c001db5c <Process::createThread(void (*)(void*), void*, int)>:
c001db5c:	55                   	push   ebp
c001db5d:	31 c9                	xor    ecx,ecx
c001db5f:	57                   	push   edi
c001db60:	56                   	push   esi
c001db61:	53                   	push   ebx
c001db62:	83 ec 1c             	sub    esp,0x1c
c001db65:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db69:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001db70:	89 f2                	mov    edx,esi
c001db72:	0f b7 c2             	movzx  eax,dx
c001db75:	83 e2 01             	and    edx,0x1
c001db78:	74 16                	je     c001db90 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001db7a:	d1 f8                	sar    eax,1
c001db7c:	41                   	inc    ecx
c001db7d:	89 c2                	mov    edx,eax
c001db7f:	83 f9 10             	cmp    ecx,0x10
c001db82:	75 ee                	jne    c001db72 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001db84:	83 c4 1c             	add    esp,0x1c
c001db87:	31 db                	xor    ebx,ebx
c001db89:	89 d8                	mov    eax,ebx
c001db8b:	5b                   	pop    ebx
c001db8c:	5e                   	pop    esi
c001db8d:	5f                   	pop    edi
c001db8e:	5d                   	pop    ebp
c001db8f:	c3                   	ret    
c001db90:	b8 01 00 00 00       	mov    eax,0x1
c001db95:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001db98:	d3 e0                	shl    eax,cl
c001db9a:	09 c6                	or     esi,eax
c001db9c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001db9f:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dba6:	89 c6                	mov    esi,eax
c001dba8:	c1 e6 05             	shl    esi,0x5
c001dbab:	01 f0                	add    eax,esi
c001dbad:	01 d8                	add    eax,ebx
c001dbaf:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dbb6:	75 0a                	jne    c001dbc2 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dbb8:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dbc2:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dbc8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dbcc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dbcf:	01 ca                	add    edx,ecx
c001dbd1:	83 ec 08             	sub    esp,0x8
c001dbd4:	89 d0                	mov    eax,edx
c001dbd6:	c1 e0 05             	shl    eax,0x5
c001dbd9:	01 d0                	add    eax,edx
c001dbdb:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dbdf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dbe3:	01 d8                	add    eax,ebx
c001dbe5:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dbeb:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dbf1:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dbf7:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dbfd:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dc03:	89 cd                	mov    ebp,ecx
c001dc05:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001dc09:	f7 dd                	neg    ebp
c001dc0b:	c1 e5 15             	shl    ebp,0x15
c001dc0e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001dc14:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001dc1a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dc24:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001dc2a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dc34:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dc3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc42:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001dc49:	53                   	push   ebx
c001dc4a:	68 a4 f8 02 c0       	push   0xc002f8a4
c001dc4f:	e8 fc b0 00 00       	call   c0028d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc54:	89 d8                	mov    eax,ebx
c001dc56:	83 c4 10             	add    esp,0x10
c001dc59:	83 c4 1c             	add    esp,0x1c
c001dc5c:	5b                   	pop    ebx
c001dc5d:	5e                   	pop    esi
c001dc5e:	5f                   	pop    edi
c001dc5f:	5d                   	pop    ebp
c001dc60:	c3                   	ret    
c001dc61:	90                   	nop

c001dc62 <Process::createUserThread()>:
c001dc62:	83 ec 0c             	sub    esp,0xc
c001dc65:	68 80 00 00 00       	push   0x80
c001dc6a:	6a 00                	push   0x0
c001dc6c:	68 26 d6 01 c0       	push   0xc001d626
c001dc71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc75:	e8 e2 fe ff ff       	call   c001db5c <Process::createThread(void (*)(void*), void*, int)>
c001dc7a:	83 c4 1c             	add    esp,0x1c
c001dc7d:	c3                   	ret    

c001dc7e <setupMultitasking(void (*)())>:
c001dc7e:	56                   	push   esi
c001dc7f:	53                   	push   ebx
c001dc80:	51                   	push   ecx
c001dc81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dc85:	eb 10                	jmp    c001dc97 <setupMultitasking(void (*)())+0x19>
c001dc87:	83 ec 0c             	sub    esp,0xc
c001dc8a:	68 a4 f8 02 c0       	push   0xc002f8a4
c001dc8f:	e8 0e b0 00 00       	call   c0028ca2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc94:	83 c4 10             	add    esp,0x10
c001dc97:	83 ec 0c             	sub    esp,0xc
c001dc9a:	68 a4 f8 02 c0       	push   0xc002f8a4
c001dc9f:	e8 da af 00 00       	call   c0028c7e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dca4:	83 c4 10             	add    esp,0x10
c001dca7:	84 c0                	test   al,al
c001dca9:	74 dc                	je     c001dc87 <setupMultitasking(void (*)())+0x9>
c001dcab:	83 ec 0c             	sub    esp,0xc
c001dcae:	68 3f 07 00 00       	push   0x73f
c001dcb3:	e8 71 1b ff ff       	call   c000f829 <malloc>
c001dcb8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dcbf:	89 c3                	mov    ebx,eax
c001dcc1:	6a 00                	push   0x0
c001dcc3:	68 40 c5 02 c0       	push   0xc002c540
c001dcc8:	6a 01                	push   0x1
c001dcca:	50                   	push   eax
c001dccb:	e8 94 fc ff ff       	call   c001d964 <Process::Process(bool, char const*, Process*, char**)>
c001dcd0:	83 c4 14             	add    esp,0x14
c001dcd3:	89 1d b0 f8 02 c0    	mov    DWORD PTR ds:0xc002f8b0,ebx
c001dcd9:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dcdf:	e8 ff 28 ff ff       	call   c00105e3 <setActiveTerminal(VgaText*)>
c001dce4:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dcec:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001dcf6:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dcfc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dcff:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dd09:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dd0f:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dd15:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001dd1f:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dd29:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dd33:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dd39:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dd43:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dd49:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001dd53:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dd59:	58                   	pop    eax
c001dd5a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001dd60:	5a                   	pop    edx
c001dd61:	68 3c c5 02 c0       	push   0xc002c53c
c001dd66:	50                   	push   eax
c001dd67:	e8 a0 2a fe ff       	call   c000080c <strcpy>
c001dd6c:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dd73:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dd77:	83 c4 14             	add    esp,0x14
c001dd7a:	5b                   	pop    ebx
c001dd7b:	5e                   	pop    esi
c001dd7c:	e9 d3 25 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dd81 <schedule()>:
c001dd81:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001dd86:	85 c0                	test   eax,eax
c001dd88:	74 0b                	je     c001dd95 <schedule()+0x14>
c001dd8a:	c7 05 80 f8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x1
c001dd94:	c3                   	ret    
c001dd95:	53                   	push   ebx
c001dd96:	83 ec 14             	sub    esp,0x14
c001dd99:	68 a4 f8 02 c0       	push   0xc002f8a4
c001dd9e:	e8 db ae 00 00       	call   c0028c7e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dda3:	83 c4 10             	add    esp,0x10
c001dda6:	84 c0                	test   al,al
c001dda8:	75 38                	jne    c001dde2 <schedule()+0x61>
c001ddaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddaf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ddb2:	4a                   	dec    edx
c001ddb3:	74 32                	je     c001dde7 <schedule()+0x66>
c001ddb5:	83 ec 0c             	sub    esp,0xc
c001ddb8:	68 a4 f8 02 c0       	push   0xc002f8a4
c001ddbd:	e8 d8 ae 00 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddc2:	c7 04 24 a4 f8 02 c0 	mov    DWORD PTR [esp],0xc002f8a4
c001ddc9:	89 c3                	mov    ebx,eax
c001ddcb:	e8 d2 ae 00 00       	call   c0028ca2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ddd0:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001ddd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ddda:	e8 9d f8 ff ff       	call   c001d67c <switchToThread(ThreadControlBlock*)>
c001dddf:	83 c4 10             	add    esp,0x10
c001dde2:	83 c4 08             	add    esp,0x8
c001dde5:	5b                   	pop    ebx
c001dde6:	c3                   	ret    
c001dde7:	83 ec 08             	sub    esp,0x8
c001ddea:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ddf1:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001ddf7:	68 a4 f8 02 c0       	push   0xc002f8a4
c001ddfc:	e8 4f af 00 00       	call   c0028d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de01:	83 c4 10             	add    esp,0x10
c001de04:	eb af                	jmp    c001ddb5 <schedule()+0x34>

c001de06 <Semaphore::tryAcquire()>:
c001de06:	53                   	push   ebx
c001de07:	83 ec 08             	sub    esp,0x8
c001de0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de0e:	fa                   	cli    
c001de0f:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001de14:	8d 50 01             	lea    edx,[eax+0x1]
c001de17:	89 15 88 f8 02 c0    	mov    DWORD PTR ds:0xc002f888,edx
c001de1d:	8b 15 84 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f884
c001de23:	8d 5a 01             	lea    ebx,[edx+0x1]
c001de26:	89 1d 84 f8 02 c0    	mov    DWORD PTR ds:0xc002f884,ebx
c001de2c:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001de2f:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001de31:	7c 2a                	jl     c001de5d <Semaphore::tryAcquire()+0x57>
c001de33:	89 15 84 f8 02 c0    	mov    DWORD PTR ds:0xc002f884,edx
c001de39:	85 d2                	test   edx,edx
c001de3b:	75 0a                	jne    c001de47 <Semaphore::tryAcquire()+0x41>
c001de3d:	8b 15 80 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f880
c001de43:	85 d2                	test   edx,edx
c001de45:	75 5b                	jne    c001dea2 <Semaphore::tryAcquire()+0x9c>
c001de47:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001de4c:	85 c0                	test   eax,eax
c001de4e:	74 07                	je     c001de57 <Semaphore::tryAcquire()+0x51>
c001de50:	31 c0                	xor    eax,eax
c001de52:	83 c4 08             	add    esp,0x8
c001de55:	5b                   	pop    ebx
c001de56:	c3                   	ret    
c001de57:	fb                   	sti    
c001de58:	83 c4 08             	add    esp,0x8
c001de5b:	5b                   	pop    ebx
c001de5c:	c3                   	ret    
c001de5d:	43                   	inc    ebx
c001de5e:	89 15 84 f8 02 c0    	mov    DWORD PTR ds:0xc002f884,edx
c001de64:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001de67:	85 d2                	test   edx,edx
c001de69:	75 1f                	jne    c001de8a <Semaphore::tryAcquire()+0x84>
c001de6b:	8b 0d 80 f8 02 c0    	mov    ecx,DWORD PTR ds:0xc002f880
c001de71:	85 c9                	test   ecx,ecx
c001de73:	74 15                	je     c001de8a <Semaphore::tryAcquire()+0x84>
c001de75:	c7 05 80 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x0
c001de7f:	e8 fd fe ff ff       	call   c001dd81 <schedule()>
c001de84:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001de89:	48                   	dec    eax
c001de8a:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001de8f:	85 c0                	test   eax,eax
c001de91:	75 08                	jne    c001de9b <Semaphore::tryAcquire()+0x95>
c001de93:	fb                   	sti    
c001de94:	b0 01                	mov    al,0x1
c001de96:	83 c4 08             	add    esp,0x8
c001de99:	5b                   	pop    ebx
c001de9a:	c3                   	ret    
c001de9b:	b0 01                	mov    al,0x1
c001de9d:	83 c4 08             	add    esp,0x8
c001dea0:	5b                   	pop    ebx
c001dea1:	c3                   	ret    
c001dea2:	c7 05 80 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x0
c001deac:	e8 d0 fe ff ff       	call   c001dd81 <schedule()>
c001deb1:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001deb6:	48                   	dec    eax
c001deb7:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001debc:	85 c0                	test   eax,eax
c001debe:	75 90                	jne    c001de50 <Semaphore::tryAcquire()+0x4a>
c001dec0:	eb 95                	jmp    c001de57 <Semaphore::tryAcquire()+0x51>

c001dec2 <Semaphore::assertLocked(char const*)>:
c001dec2:	83 ec 0c             	sub    esp,0xc
c001dec5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dec9:	fa                   	cli    
c001deca:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001ded0:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001ded5:	8d 48 01             	lea    ecx,[eax+0x1]
c001ded8:	89 0d 84 f8 02 c0    	mov    DWORD PTR ds:0xc002f884,ecx
c001dede:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001dee0:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001dee3:	7c 24                	jl     c001df09 <Semaphore::assertLocked(char const*)+0x47>
c001dee5:	a3 84 f8 02 c0       	mov    ds:0xc002f884,eax
c001deea:	85 c0                	test   eax,eax
c001deec:	75 09                	jne    c001def7 <Semaphore::assertLocked(char const*)+0x35>
c001deee:	a1 80 f8 02 c0       	mov    eax,ds:0xc002f880
c001def3:	85 c0                	test   eax,eax
c001def5:	75 29                	jne    c001df20 <Semaphore::assertLocked(char const*)+0x5e>
c001def7:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001defc:	48                   	dec    eax
c001defd:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001df02:	75 01                	jne    c001df05 <Semaphore::assertLocked(char const*)+0x43>
c001df04:	fb                   	sti    
c001df05:	83 c4 0c             	add    esp,0xc
c001df08:	c3                   	ret    
c001df09:	83 ec 0c             	sub    esp,0xc
c001df0c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001df10:	e8 da c2 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001df15:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001df1a:	83 c4 10             	add    esp,0x10
c001df1d:	48                   	dec    eax
c001df1e:	eb c5                	jmp    c001dee5 <Semaphore::assertLocked(char const*)+0x23>
c001df20:	c7 05 80 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x0
c001df2a:	e8 52 fe ff ff       	call   c001dd81 <schedule()>
c001df2f:	eb c6                	jmp    c001def7 <Semaphore::assertLocked(char const*)+0x35>

c001df31 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001df31:	83 ec 0c             	sub    esp,0xc
c001df34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df3d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001df40:	e8 3c fe ff ff       	call   c001dd81 <schedule()>
c001df45:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001df4a:	48                   	dec    eax
c001df4b:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001df50:	75 01                	jne    c001df53 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001df52:	fb                   	sti    
c001df53:	83 c4 0c             	add    esp,0xc
c001df56:	c3                   	ret    

c001df57 <blockTask(TaskState)>:
c001df57:	83 ec 0c             	sub    esp,0xc
c001df5a:	fa                   	cli    
c001df5b:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001df61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df6a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001df6d:	e8 0f fe ff ff       	call   c001dd81 <schedule()>
c001df72:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001df77:	48                   	dec    eax
c001df78:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001df7d:	75 01                	jne    c001df80 <blockTask(TaskState)+0x29>
c001df7f:	fb                   	sti    
c001df80:	83 c4 0c             	add    esp,0xc
c001df83:	c3                   	ret    

c001df84 <waitTask(int, int*, int)>:
c001df84:	83 ec 18             	sub    esp,0x18
c001df87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df90:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001df93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001df97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df9c:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001df9f:	6a 07                	push   0x7
c001dfa1:	e8 b1 ff ff ff       	call   c001df57 <blockTask(TaskState)>
c001dfa6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfab:	83 c4 10             	add    esp,0x10
c001dfae:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dfb1:	85 d2                	test   edx,edx
c001dfb3:	74 0a                	je     c001dfbf <waitTask(int, int*, int)+0x3b>
c001dfb5:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dfb8:	89 02                	mov    DWORD PTR [edx],eax
c001dfba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfbf:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dfc2:	83 c4 0c             	add    esp,0xc
c001dfc5:	c3                   	ret    

c001dfc6 <nanoSleepUntil(unsigned long long)>:
c001dfc6:	83 ec 0c             	sub    esp,0xc
c001dfc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfcd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dfd1:	3b 05 f0 e9 02 c0    	cmp    eax,DWORD PTR ds:0xc002e9f0
c001dfd7:	89 d1                	mov    ecx,edx
c001dfd9:	1b 0d f4 e9 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e9f4
c001dfdf:	73 04                	jae    c001dfe5 <nanoSleepUntil(unsigned long long)+0x1f>
c001dfe1:	83 c4 0c             	add    esp,0xc
c001dfe4:	c3                   	ret    
c001dfe5:	fa                   	cli    
c001dfe6:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001dfec:	83 ec 08             	sub    esp,0x8
c001dfef:	ff 05 84 f8 02 c0    	inc    DWORD PTR ds:0xc002f884
c001dff5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dffb:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dffe:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e001:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e007:	68 98 f8 02 c0       	push   0xc002f898
c001e00c:	e8 3f ad 00 00       	call   c0028d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e011:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e018:	e8 3a ff ff ff       	call   c001df57 <blockTask(TaskState)>
c001e01d:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001e022:	83 c4 10             	add    esp,0x10
c001e025:	48                   	dec    eax
c001e026:	a3 84 f8 02 c0       	mov    ds:0xc002f884,eax
c001e02b:	85 c0                	test   eax,eax
c001e02d:	75 09                	jne    c001e038 <nanoSleepUntil(unsigned long long)+0x72>
c001e02f:	a1 80 f8 02 c0       	mov    eax,ds:0xc002f880
c001e034:	85 c0                	test   eax,eax
c001e036:	75 12                	jne    c001e04a <nanoSleepUntil(unsigned long long)+0x84>
c001e038:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e03d:	48                   	dec    eax
c001e03e:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e043:	75 9c                	jne    c001dfe1 <nanoSleepUntil(unsigned long long)+0x1b>
c001e045:	fb                   	sti    
c001e046:	83 c4 0c             	add    esp,0xc
c001e049:	c3                   	ret    
c001e04a:	c7 05 80 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x0
c001e054:	e8 28 fd ff ff       	call   c001dd81 <schedule()>
c001e059:	eb dd                	jmp    c001e038 <nanoSleepUntil(unsigned long long)+0x72>

c001e05b <nanoSleep(unsigned long long)>:
c001e05b:	a1 f0 e9 02 c0       	mov    eax,ds:0xc002e9f0
c001e060:	8b 15 f4 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9f4
c001e066:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e06a:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e06e:	e9 53 ff ff ff       	jmp    c001dfc6 <nanoSleepUntil(unsigned long long)>

c001e073 <sleep(unsigned long long)>:
c001e073:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e07b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e080:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e084:	01 ca                	add    edx,ecx
c001e086:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e08a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e08e:	eb cb                	jmp    c001e05b <nanoSleep(unsigned long long)>

c001e090 <Semaphore::acquire()>:
c001e090:	83 ec 0c             	sub    esp,0xc
c001e093:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e097:	fa                   	cli    
c001e098:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001e09d:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e0a3:	8d 48 01             	lea    ecx,[eax+0x1]
c001e0a6:	89 0d 84 f8 02 c0    	mov    DWORD PTR ds:0xc002f884,ecx
c001e0ac:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e0af:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e0b1:	7d 28                	jge    c001e0db <Semaphore::acquire()+0x4b>
c001e0b3:	41                   	inc    ecx
c001e0b4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e0b7:	a3 84 f8 02 c0       	mov    ds:0xc002f884,eax
c001e0bc:	85 c0                	test   eax,eax
c001e0be:	75 09                	jne    c001e0c9 <Semaphore::acquire()+0x39>
c001e0c0:	a1 80 f8 02 c0       	mov    eax,ds:0xc002f880
c001e0c5:	85 c0                	test   eax,eax
c001e0c7:	75 5d                	jne    c001e126 <Semaphore::acquire()+0x96>
c001e0c9:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e0ce:	48                   	dec    eax
c001e0cf:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e0d4:	75 01                	jne    c001e0d7 <Semaphore::acquire()+0x47>
c001e0d6:	fb                   	sti    
c001e0d7:	83 c4 0c             	add    esp,0xc
c001e0da:	c3                   	ret    
c001e0db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0e0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e0e7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e0ea:	85 c9                	test   ecx,ecx
c001e0ec:	74 49                	je     c001e137 <Semaphore::acquire()+0xa7>
c001e0ee:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e0f1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e0f7:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e0fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0ff:	83 ec 0c             	sub    esp,0xc
c001e102:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e105:	68 bc c5 02 c0       	push   0xc002c5bc
c001e10a:	e8 72 47 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001e10f:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001e116:	e8 3c fe ff ff       	call   c001df57 <blockTask(TaskState)>
c001e11b:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001e120:	83 c4 10             	add    esp,0x10
c001e123:	48                   	dec    eax
c001e124:	eb 91                	jmp    c001e0b7 <Semaphore::acquire()+0x27>
c001e126:	c7 05 80 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x0
c001e130:	e8 4c fc ff ff       	call   c001dd81 <schedule()>
c001e135:	eb 92                	jmp    c001e0c9 <Semaphore::acquire()+0x39>
c001e137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e13c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e13f:	eb b9                	jmp    c001e0fa <Semaphore::acquire()+0x6a>

c001e141 <taskReturned>:
c001e141:	83 ec 18             	sub    esp,0x18
c001e144:	68 dc c5 02 c0       	push   0xc002c5dc
c001e149:	e8 a1 c0 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001e14e:	83 c4 10             	add    esp,0x10
c001e151:	83 ec 0c             	sub    esp,0xc
c001e154:	6a 02                	push   0x2
c001e156:	e8 fc fd ff ff       	call   c001df57 <blockTask(TaskState)>
c001e15b:	fa                   	cli    
c001e15c:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e162:	e8 1a fc ff ff       	call   c001dd81 <schedule()>
c001e167:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e16c:	83 c4 10             	add    esp,0x10
c001e16f:	48                   	dec    eax
c001e170:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e175:	85 c0                	test   eax,eax
c001e177:	75 d8                	jne    c001e151 <taskReturned+0x10>
c001e179:	fb                   	sti    
c001e17a:	eb d5                	jmp    c001e151 <taskReturned+0x10>

c001e17c <Thr::processFromPID(int)>:
c001e17c:	57                   	push   edi
c001e17d:	56                   	push   esi
c001e17e:	53                   	push   ebx
c001e17f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e183:	fa                   	cli    
c001e184:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e18a:	83 ec 0c             	sub    esp,0xc
c001e18d:	68 a4 f8 02 c0       	push   0xc002f8a4
c001e192:	e8 03 ab 00 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e197:	83 c4 10             	add    esp,0x10
c001e19a:	89 c7                	mov    edi,eax
c001e19c:	eb 14                	jmp    c001e1b2 <Thr::processFromPID(int)+0x36>
c001e19e:	83 ec 0c             	sub    esp,0xc
c001e1a1:	68 a4 f8 02 c0       	push   0xc002f8a4
c001e1a6:	e8 ef aa 00 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1ab:	83 c4 10             	add    esp,0x10
c001e1ae:	39 f8                	cmp    eax,edi
c001e1b0:	74 49                	je     c001e1fb <Thr::processFromPID(int)+0x7f>
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	68 a4 f8 02 c0       	push   0xc002f8a4
c001e1ba:	e8 db aa 00 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1bf:	c7 04 24 a4 f8 02 c0 	mov    DWORD PTR [esp],0xc002f8a4
c001e1c6:	89 c3                	mov    ebx,eax
c001e1c8:	e8 d5 aa 00 00       	call   c0028ca2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1cd:	58                   	pop    eax
c001e1ce:	5a                   	pop    edx
c001e1cf:	53                   	push   ebx
c001e1d0:	68 a4 f8 02 c0       	push   0xc002f8a4
c001e1d5:	e8 76 ab 00 00       	call   c0028d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1da:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1dd:	83 c4 10             	add    esp,0x10
c001e1e0:	39 30                	cmp    DWORD PTR [eax],esi
c001e1e2:	75 ba                	jne    c001e19e <Thr::processFromPID(int)+0x22>
c001e1e4:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e1e9:	48                   	dec    eax
c001e1ea:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e1ef:	74 07                	je     c001e1f8 <Thr::processFromPID(int)+0x7c>
c001e1f1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1f4:	5b                   	pop    ebx
c001e1f5:	5e                   	pop    esi
c001e1f6:	5f                   	pop    edi
c001e1f7:	c3                   	ret    
c001e1f8:	fb                   	sti    
c001e1f9:	eb f6                	jmp    c001e1f1 <Thr::processFromPID(int)+0x75>
c001e1fb:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e200:	48                   	dec    eax
c001e201:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e206:	75 05                	jne    c001e20d <Thr::processFromPID(int)+0x91>
c001e208:	fb                   	sti    
c001e209:	5b                   	pop    ebx
c001e20a:	5e                   	pop    esi
c001e20b:	5f                   	pop    edi
c001e20c:	c3                   	ret    
c001e20d:	5b                   	pop    ebx
c001e20e:	31 c0                	xor    eax,eax
c001e210:	5e                   	pop    esi
c001e211:	5f                   	pop    edi
c001e212:	c3                   	ret    

c001e213 <unblockTask(ThreadControlBlock*)>:
c001e213:	53                   	push   ebx
c001e214:	83 ec 08             	sub    esp,0x8
c001e217:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e21b:	fa                   	cli    
c001e21c:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e222:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e225:	85 c0                	test   eax,eax
c001e227:	74 5a                	je     c001e283 <unblockTask(ThreadControlBlock*)+0x70>
c001e229:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e22c:	48                   	dec    eax
c001e22d:	74 31                	je     c001e260 <unblockTask(ThreadControlBlock*)+0x4d>
c001e22f:	83 ec 0c             	sub    esp,0xc
c001e232:	68 a4 f8 02 c0       	push   0xc002f8a4
c001e237:	e8 5e aa 00 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e23c:	83 c4 10             	add    esp,0x10
c001e23f:	85 c0                	test   eax,eax
c001e241:	75 17                	jne    c001e25a <unblockTask(ThreadControlBlock*)+0x47>
c001e243:	eb 50                	jmp    c001e295 <unblockTask(ThreadControlBlock*)+0x82>
c001e245:	83 ec 08             	sub    esp,0x8
c001e248:	50                   	push   eax
c001e249:	68 a4 f8 02 c0       	push   0xc002f8a4
c001e24e:	e8 cf ad 00 00       	call   c0029022 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e253:	83 c4 10             	add    esp,0x10
c001e256:	85 c0                	test   eax,eax
c001e258:	74 3b                	je     c001e295 <unblockTask(ThreadControlBlock*)+0x82>
c001e25a:	39 c3                	cmp    ebx,eax
c001e25c:	75 e7                	jne    c001e245 <unblockTask(ThreadControlBlock*)+0x32>
c001e25e:	eb 10                	jmp    c001e270 <unblockTask(ThreadControlBlock*)+0x5d>
c001e260:	83 ec 0c             	sub    esp,0xc
c001e263:	68 5e c5 02 c0       	push   0xc002c55e
c001e268:	e8 14 46 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001e26d:	83 c4 10             	add    esp,0x10
c001e270:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e275:	48                   	dec    eax
c001e276:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e27b:	75 01                	jne    c001e27e <unblockTask(ThreadControlBlock*)+0x6b>
c001e27d:	fb                   	sti    
c001e27e:	83 c4 08             	add    esp,0x8
c001e281:	5b                   	pop    ebx
c001e282:	c3                   	ret    
c001e283:	83 ec 0c             	sub    esp,0xc
c001e286:	68 47 c5 02 c0       	push   0xc002c547
c001e28b:	e8 f1 45 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001e290:	83 c4 10             	add    esp,0x10
c001e293:	eb db                	jmp    c001e270 <unblockTask(ThreadControlBlock*)+0x5d>
c001e295:	83 ec 08             	sub    esp,0x8
c001e298:	53                   	push   ebx
c001e299:	68 a4 f8 02 c0       	push   0xc002f8a4
c001e29e:	e8 ad aa 00 00       	call   c0028d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2a3:	83 c4 10             	add    esp,0x10
c001e2a6:	eb c8                	jmp    c001e270 <unblockTask(ThreadControlBlock*)+0x5d>

c001e2a8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e2a8:	55                   	push   ebp
c001e2a9:	57                   	push   edi
c001e2aa:	56                   	push   esi
c001e2ab:	53                   	push   ebx
c001e2ac:	83 ec 1c             	sub    esp,0x1c
c001e2af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e2b3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2b6:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e2bc:	85 ff                	test   edi,edi
c001e2be:	7e 20                	jle    c001e2e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e2c0:	31 f6                	xor    esi,esi
c001e2c2:	83 ec 0c             	sub    esp,0xc
c001e2c5:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e2cc:	46                   	inc    esi
c001e2cd:	e8 67 15 ff ff       	call   c000f839 <free>
c001e2d2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2d5:	83 c4 10             	add    esp,0x10
c001e2d8:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e2de:	7f e2                	jg     c001e2c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e2e0:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e2ea:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e2ef:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e2f2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e2f5:	d3 c0                	rol    eax,cl
c001e2f7:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e2fe:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e301:	89 f7                	mov    edi,esi
c001e303:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e30b:	0f 85 64 01 00 00    	jne    c001e475 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e311:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e317:	85 ed                	test   ebp,ebp
c001e319:	74 1b                	je     c001e336 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e31b:	83 ec 0c             	sub    esp,0xc
c001e31e:	55                   	push   ebp
c001e31f:	e8 70 bc ff ff       	call   c0019f94 <EnvVarContainer::~EnvVarContainer()>
c001e324:	59                   	pop    ecx
c001e325:	5e                   	pop    esi
c001e326:	6a 0c                	push   0xc
c001e328:	55                   	push   ebp
c001e329:	e8 7b 44 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c001e32e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e331:	83 c4 10             	add    esp,0x10
c001e334:	89 f7                	mov    edi,esi
c001e336:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e33c:	85 c0                	test   eax,eax
c001e33e:	0f 84 aa 00 00 00    	je     c001e3ee <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e344:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e347:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e34b:	31 c9                	xor    ecx,ecx
c001e34d:	eb 10                	jmp    c001e35f <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e34f:	41                   	inc    ecx
c001e350:	83 f9 10             	cmp    ecx,0x10
c001e353:	0f 84 95 00 00 00    	je     c001e3ee <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e359:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e35f:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e366:	d3 fa                	sar    edx,cl
c001e368:	83 e2 01             	and    edx,0x1
c001e36b:	74 e2                	je     c001e34f <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e36d:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e370:	01 ca                	add    edx,ecx
c001e372:	89 d5                	mov    ebp,edx
c001e374:	c1 e5 05             	shl    ebp,0x5
c001e377:	01 ea                	add    edx,ebp
c001e379:	01 d0                	add    eax,edx
c001e37b:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e381:	83 fd 07             	cmp    ebp,0x7
c001e384:	75 c9                	jne    c001e34f <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e386:	05 40 02 00 00       	add    eax,0x240
c001e38b:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e38e:	83 fd ff             	cmp    ebp,0xffffffff
c001e391:	0f 8c e6 00 00 00    	jl     c001e47d <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e397:	0f 84 97 01 00 00    	je     c001e534 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e39d:	85 ed                	test   ebp,ebp
c001e39f:	0f 84 7e 01 00 00    	je     c001e523 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e3a5:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e3a7:	75 a6                	jne    c001e34f <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3a9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e3af:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e3b3:	01 d0                	add    eax,edx
c001e3b5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e3b9:	83 ec 0c             	sub    esp,0xc
c001e3bc:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e3c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3c5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e3cb:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e3d2:	50                   	push   eax
c001e3d3:	e8 3b fe ff ff       	call   c001e213 <unblockTask(ThreadControlBlock*)>
c001e3d8:	83 c4 10             	add    esp,0x10
c001e3db:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e3de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e3e2:	89 f7                	mov    edi,esi
c001e3e4:	41                   	inc    ecx
c001e3e5:	83 f9 10             	cmp    ecx,0x10
c001e3e8:	0f 85 6b ff ff ff    	jne    c001e359 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e3ee:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e3f4:	85 c0                	test   eax,eax
c001e3f6:	74 5d                	je     c001e455 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e3f8:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e3fe:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e404:	74 4f                	je     c001e455 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e406:	83 ec 0c             	sub    esp,0xc
c001e409:	68 a4 f8 02 c0       	push   0xc002f8a4
c001e40e:	e8 87 a8 00 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e413:	c7 04 24 a4 f8 02 c0 	mov    DWORD PTR [esp],0xc002f8a4
c001e41a:	89 c7                	mov    edi,eax
c001e41c:	e8 5d a8 00 00       	call   c0028c7e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e421:	83 c4 10             	add    esp,0x10
c001e424:	84 c0                	test   al,al
c001e426:	0f 84 c2 00 00 00    	je     c001e4ee <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e42c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e42f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e435:	85 d2                	test   edx,edx
c001e437:	74 0f                	je     c001e448 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e439:	83 ec 0c             	sub    esp,0xc
c001e43c:	8b 02                	mov    eax,DWORD PTR [edx]
c001e43e:	52                   	push   edx
c001e43f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e442:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e445:	83 c4 10             	add    esp,0x10
c001e448:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e452:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e455:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e45b:	85 db                	test   ebx,ebx
c001e45d:	74 16                	je     c001e475 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e45f:	83 ec 0c             	sub    esp,0xc
c001e462:	53                   	push   ebx
c001e463:	e8 72 35 ff ff       	call   c00119da <VAS::~VAS()>
c001e468:	58                   	pop    eax
c001e469:	5a                   	pop    edx
c001e46a:	6a 14                	push   0x14
c001e46c:	53                   	push   ebx
c001e46d:	e8 37 43 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c001e472:	83 c4 10             	add    esp,0x10
c001e475:	83 c4 1c             	add    esp,0x1c
c001e478:	5b                   	pop    ebx
c001e479:	5e                   	pop    esi
c001e47a:	5f                   	pop    edi
c001e47b:	5d                   	pop    ebp
c001e47c:	c3                   	ret    
c001e47d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e481:	83 ec 0c             	sub    esp,0xc
c001e484:	68 10 c6 02 c0       	push   0xc002c610
c001e489:	e8 61 bd ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001e48e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e491:	83 c4 10             	add    esp,0x10
c001e494:	89 f7                	mov    edi,esi
c001e496:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e49a:	e9 b0 fe ff ff       	jmp    c001e34f <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e49f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e4a5:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e4ab:	75 1c                	jne    c001e4c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e4ad:	83 ec 0c             	sub    esp,0xc
c001e4b0:	68 78 c6 02 c0       	push   0xc002c678
c001e4b5:	e8 c7 43 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001e4ba:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e4c1:	e8 91 fa ff ff       	call   c001df57 <blockTask(TaskState)>
c001e4c6:	83 c4 10             	add    esp,0x10
c001e4c9:	83 ec 08             	sub    esp,0x8
c001e4cc:	56                   	push   esi
c001e4cd:	68 a4 f8 02 c0       	push   0xc002f8a4
c001e4d2:	e8 79 a8 00 00       	call   c0028d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4d7:	c7 04 24 a4 f8 02 c0 	mov    DWORD PTR [esp],0xc002f8a4
c001e4de:	e8 b7 a7 00 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4e3:	83 c4 10             	add    esp,0x10
c001e4e6:	39 f8                	cmp    eax,edi
c001e4e8:	0f 84 3e ff ff ff    	je     c001e42c <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e4ee:	83 ec 0c             	sub    esp,0xc
c001e4f1:	68 a4 f8 02 c0       	push   0xc002f8a4
c001e4f6:	e8 9f a7 00 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4fb:	c7 04 24 a4 f8 02 c0 	mov    DWORD PTR [esp],0xc002f8a4
c001e502:	89 c6                	mov    esi,eax
c001e504:	e8 99 a7 00 00       	call   c0028ca2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e509:	83 c4 10             	add    esp,0x10
c001e50c:	39 f3                	cmp    ebx,esi
c001e50e:	74 b9                	je     c001e4c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e510:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e513:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e516:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e51c:	75 ab                	jne    c001e4c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e51e:	e9 7c ff ff ff       	jmp    c001e49f <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e523:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e527:	83 ec 0c             	sub    esp,0xc
c001e52a:	68 44 c6 02 c0       	push   0xc002c644
c001e52f:	e9 55 ff ff ff       	jmp    c001e489 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e534:	8b 36                	mov    esi,DWORD PTR [esi]
c001e536:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e53a:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e53d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e540:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e546:	01 d7                	add    edi,edx
c001e548:	89 f8                	mov    eax,edi
c001e54a:	e9 66 fe ff ff       	jmp    c001e3b5 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e54f <cleanerTaskFunction(void*)>:
c001e54f:	53                   	push   ebx
c001e550:	83 ec 08             	sub    esp,0x8
c001e553:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e558:	48                   	dec    eax
c001e559:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e55e:	75 01                	jne    c001e561 <cleanerTaskFunction(void*)+0x12>
c001e560:	fb                   	sti    
c001e561:	fa                   	cli    
c001e562:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e567:	80 3d 6c f8 02 c0 00 	cmp    BYTE PTR ds:0xc002f86c,0x0
c001e56e:	8d 50 01             	lea    edx,[eax+0x1]
c001e571:	89 15 88 f8 02 c0    	mov    DWORD PTR ds:0xc002f888,edx
c001e577:	0f 84 a1 00 00 00    	je     c001e61e <cleanerTaskFunction(void*)+0xcf>
c001e57d:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e582:	85 c0                	test   eax,eax
c001e584:	75 01                	jne    c001e587 <cleanerTaskFunction(void*)+0x38>
c001e586:	fb                   	sti    
c001e587:	c6 05 6c f8 02 c0 00 	mov    BYTE PTR ds:0xc002f86c,0x0
c001e58e:	fa                   	cli    
c001e58f:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e595:	ff 05 84 f8 02 c0    	inc    DWORD PTR ds:0xc002f884
c001e59b:	fa                   	cli    
c001e59c:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e5a2:	eb 26                	jmp    c001e5ca <cleanerTaskFunction(void*)+0x7b>
c001e5a4:	83 ec 0c             	sub    esp,0xc
c001e5a7:	68 8c f8 02 c0       	push   0xc002f88c
c001e5ac:	e8 e9 a6 00 00       	call   c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5b1:	c7 04 24 8c f8 02 c0 	mov    DWORD PTR [esp],0xc002f88c
c001e5b8:	89 c3                	mov    ebx,eax
c001e5ba:	e8 e3 a6 00 00       	call   c0028ca2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e5c2:	e8 e1 fc ff ff       	call   c001e2a8 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e5c7:	83 c4 10             	add    esp,0x10
c001e5ca:	83 ec 0c             	sub    esp,0xc
c001e5cd:	68 8c f8 02 c0       	push   0xc002f88c
c001e5d2:	e8 a7 a6 00 00       	call   c0028c7e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5d7:	83 c4 10             	add    esp,0x10
c001e5da:	84 c0                	test   al,al
c001e5dc:	74 c6                	je     c001e5a4 <cleanerTaskFunction(void*)+0x55>
c001e5de:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e5e3:	48                   	dec    eax
c001e5e4:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e5e9:	75 01                	jne    c001e5ec <cleanerTaskFunction(void*)+0x9d>
c001e5eb:	fb                   	sti    
c001e5ec:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001e5f1:	48                   	dec    eax
c001e5f2:	a3 84 f8 02 c0       	mov    ds:0xc002f884,eax
c001e5f7:	0f 85 56 ff ff ff    	jne    c001e553 <cleanerTaskFunction(void*)+0x4>
c001e5fd:	a1 80 f8 02 c0       	mov    eax,ds:0xc002f880
c001e602:	85 c0                	test   eax,eax
c001e604:	0f 84 49 ff ff ff    	je     c001e553 <cleanerTaskFunction(void*)+0x4>
c001e60a:	c7 05 80 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x0
c001e614:	e8 68 f7 ff ff       	call   c001dd81 <schedule()>
c001e619:	e9 35 ff ff ff       	jmp    c001e553 <cleanerTaskFunction(void*)+0x4>
c001e61e:	83 ec 0c             	sub    esp,0xc
c001e621:	6a 02                	push   0x2
c001e623:	e8 09 f9 ff ff       	call   c001df31 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e628:	83 c4 10             	add    esp,0x10
c001e62b:	e9 57 ff ff ff       	jmp    c001e587 <cleanerTaskFunction(void*)+0x38>

c001e630 <terminateTask(int)>:
c001e630:	83 ec 14             	sub    esp,0x14
c001e633:	fa                   	cli    
c001e634:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e63a:	ff 05 84 f8 02 c0    	inc    DWORD PTR ds:0xc002f884
c001e640:	fa                   	cli    
c001e641:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e647:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e64b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e650:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e653:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e658:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e65b:	50                   	push   eax
c001e65c:	68 8c f8 02 c0       	push   0xc002f88c
c001e661:	e8 ea a6 00 00       	call   c0028d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e666:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e66b:	83 c4 10             	add    esp,0x10
c001e66e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e675:	a1 68 f8 02 c0       	mov    eax,ds:0xc002f868
c001e67a:	85 c0                	test   eax,eax
c001e67c:	74 53                	je     c001e6d1 <terminateTask(int)+0xa1>
c001e67e:	83 ec 0c             	sub    esp,0xc
c001e681:	c6 05 6c f8 02 c0 01 	mov    BYTE PTR ds:0xc002f86c,0x1
c001e688:	50                   	push   eax
c001e689:	e8 85 fb ff ff       	call   c001e213 <unblockTask(ThreadControlBlock*)>
c001e68e:	83 c4 10             	add    esp,0x10
c001e691:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e696:	48                   	dec    eax
c001e697:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e69c:	75 01                	jne    c001e69f <terminateTask(int)+0x6f>
c001e69e:	fb                   	sti    
c001e69f:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001e6a4:	48                   	dec    eax
c001e6a5:	a3 84 f8 02 c0       	mov    ds:0xc002f884,eax
c001e6aa:	75 09                	jne    c001e6b5 <terminateTask(int)+0x85>
c001e6ac:	83 3d 80 f8 02 c0 00 	cmp    DWORD PTR ds:0xc002f880,0x0
c001e6b3:	75 2e                	jne    c001e6e3 <terminateTask(int)+0xb3>
c001e6b5:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e6ba:	48                   	dec    eax
c001e6bb:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e6c0:	75 01                	jne    c001e6c3 <terminateTask(int)+0x93>
c001e6c2:	fb                   	sti    
c001e6c3:	fa                   	cli    
c001e6c4:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e6ca:	e8 b2 f6 ff ff       	call   c001dd81 <schedule()>
c001e6cf:	eb e4                	jmp    c001e6b5 <terminateTask(int)+0x85>
c001e6d1:	83 ec 0c             	sub    esp,0xc
c001e6d4:	68 75 c5 02 c0       	push   0xc002c575
c001e6d9:	e8 a3 41 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001e6de:	83 c4 10             	add    esp,0x10
c001e6e1:	eb ae                	jmp    c001e691 <terminateTask(int)+0x61>
c001e6e3:	c7 05 80 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x0
c001e6ed:	eb db                	jmp    c001e6ca <terminateTask(int)+0x9a>

c001e6ef <Thr::terminateFromIRQ(int)>:
c001e6ef:	83 ec 18             	sub    esp,0x18
c001e6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6f6:	e8 35 ff ff ff       	call   c001e630 <terminateTask(int)>
c001e6fb:	90                   	nop

c001e6fc <Semaphore::release()>:
c001e6fc:	83 ec 0c             	sub    esp,0xc
c001e6ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e703:	fa                   	cli    
c001e704:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001e709:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e70f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e712:	89 0d 84 f8 02 c0    	mov    DWORD PTR ds:0xc002f884,ecx
c001e718:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e71b:	85 c9                	test   ecx,ecx
c001e71d:	74 3c                	je     c001e75b <Semaphore::release()+0x5f>
c001e71f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e722:	83 ec 0c             	sub    esp,0xc
c001e725:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e728:	51                   	push   ecx
c001e729:	e8 e5 fa ff ff       	call   c001e213 <unblockTask(ThreadControlBlock*)>
c001e72e:	a1 84 f8 02 c0       	mov    eax,ds:0xc002f884
c001e733:	83 c4 10             	add    esp,0x10
c001e736:	48                   	dec    eax
c001e737:	a3 84 f8 02 c0       	mov    ds:0xc002f884,eax
c001e73c:	85 c0                	test   eax,eax
c001e73e:	75 09                	jne    c001e749 <Semaphore::release()+0x4d>
c001e740:	a1 80 f8 02 c0       	mov    eax,ds:0xc002f880
c001e745:	85 c0                	test   eax,eax
c001e747:	75 17                	jne    c001e760 <Semaphore::release()+0x64>
c001e749:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e74e:	48                   	dec    eax
c001e74f:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e754:	75 01                	jne    c001e757 <Semaphore::release()+0x5b>
c001e756:	fb                   	sti    
c001e757:	83 c4 0c             	add    esp,0xc
c001e75a:	c3                   	ret    
c001e75b:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e75e:	eb d7                	jmp    c001e737 <Semaphore::release()+0x3b>
c001e760:	c7 05 80 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f880,0x0
c001e76a:	e8 12 f6 ff ff       	call   c001dd81 <schedule()>
c001e76f:	eb d8                	jmp    c001e749 <Semaphore::release()+0x4d>

c001e771 <__static_initialization_and_destruction_0(int, int)>:
c001e771:	83 ec 0c             	sub    esp,0xc
c001e774:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e779:	0f 85 88 00 00 00    	jne    c001e807 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e77f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e787:	75 7e                	jne    c001e807 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e789:	83 ec 0c             	sub    esp,0xc
c001e78c:	68 a4 f8 02 c0       	push   0xc002f8a4
c001e791:	e8 4a a8 00 00       	call   c0028fe0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e796:	83 c4 10             	add    esp,0x10
c001e799:	83 ec 04             	sub    esp,0x4
c001e79c:	68 58 d1 02 c0       	push   0xc002d158
c001e7a1:	68 a4 f8 02 c0       	push   0xc002f8a4
c001e7a6:	68 94 8f 02 c0       	push   0xc0028f94
c001e7ab:	e8 73 3f ff ff       	call   c0012723 <__cxa_atexit>
c001e7b0:	83 c4 10             	add    esp,0x10
c001e7b3:	83 ec 0c             	sub    esp,0xc
c001e7b6:	68 98 f8 02 c0       	push   0xc002f898
c001e7bb:	e8 20 a8 00 00       	call   c0028fe0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e7c0:	83 c4 10             	add    esp,0x10
c001e7c3:	83 ec 04             	sub    esp,0x4
c001e7c6:	68 58 d1 02 c0       	push   0xc002d158
c001e7cb:	68 98 f8 02 c0       	push   0xc002f898
c001e7d0:	68 94 8f 02 c0       	push   0xc0028f94
c001e7d5:	e8 49 3f ff ff       	call   c0012723 <__cxa_atexit>
c001e7da:	83 c4 10             	add    esp,0x10
c001e7dd:	83 ec 0c             	sub    esp,0xc
c001e7e0:	68 8c f8 02 c0       	push   0xc002f88c
c001e7e5:	e8 f6 a7 00 00       	call   c0028fe0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e7ea:	83 c4 10             	add    esp,0x10
c001e7ed:	83 ec 04             	sub    esp,0x4
c001e7f0:	68 58 d1 02 c0       	push   0xc002d158
c001e7f5:	68 8c f8 02 c0       	push   0xc002f88c
c001e7fa:	68 94 8f 02 c0       	push   0xc0028f94
c001e7ff:	e8 1f 3f ff ff       	call   c0012723 <__cxa_atexit>
c001e804:	83 c4 10             	add    esp,0x10
c001e807:	90                   	nop
c001e808:	83 c4 0c             	add    esp,0xc
c001e80b:	c3                   	ret    

c001e80c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e80c:	83 ec 0c             	sub    esp,0xc
c001e80f:	83 ec 08             	sub    esp,0x8
c001e812:	68 ff ff 00 00       	push   0xffff
c001e817:	6a 01                	push   0x1
c001e819:	e8 53 ff ff ff       	call   c001e771 <__static_initialization_and_destruction_0(int, int)>
c001e81e:	83 c4 10             	add    esp,0x10
c001e821:	83 c4 0c             	add    esp,0xc
c001e824:	c3                   	ret    

c001e825 <Vm::inbv(unsigned short)>:
c001e825:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e829:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e82e:	75 06                	jne    c001e836 <Vm::inbv(unsigned short)+0x11>
c001e830:	a0 ec f8 02 c0       	mov    al,ds:0xc002f8ec
c001e835:	c3                   	ret    
c001e836:	ec                   	in     al,dx
c001e837:	c3                   	ret    

c001e838 <Vm::outbv(unsigned short, unsigned char)>:
c001e838:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e840:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e845:	75 25                	jne    c001e86c <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e847:	8b 0d ec f8 02 c0    	mov    ecx,DWORD PTR ds:0xc002f8ec
c001e84d:	8d 51 01             	lea    edx,[ecx+0x1]
c001e850:	88 81 00 f9 02 c0    	mov    BYTE PTR [ecx-0x3ffd0700],al
c001e856:	89 15 ec f8 02 c0    	mov    DWORD PTR ds:0xc002f8ec,edx
c001e85c:	83 fa 20             	cmp    edx,0x20
c001e85f:	75 0c                	jne    c001e86d <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e861:	c7 05 ec f8 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002f8ec,0x1f
c001e86b:	c3                   	ret    
c001e86c:	ee                   	out    dx,al
c001e86d:	c3                   	ret    

c001e86e <Vm::realToLinear(unsigned short, unsigned short)>:
c001e86e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e873:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e878:	c1 e0 04             	shl    eax,0x4
c001e87b:	01 d0                	add    eax,edx
c001e87d:	c3                   	ret    

c001e87e <Vm::getSegment(unsigned int)>:
c001e87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e882:	c1 e8 10             	shr    eax,0x10
c001e885:	c3                   	ret    

c001e886 <Vm::getOffset(unsigned int)>:
c001e886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e88a:	c3                   	ret    

c001e88b <Vm::mainloop2()>:
c001e88b:	83 ec 18             	sub    esp,0x18
c001e88e:	fa                   	cli    
c001e88f:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e895:	6a 02                	push   0x2
c001e897:	c6 05 e5 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f8e5,0x1
c001e89e:	e8 8e f6 ff ff       	call   c001df31 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e8a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8a8:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e8ac:	52                   	push   edx
c001e8ad:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e8b1:	52                   	push   edx
c001e8b2:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e8b6:	52                   	push   edx
c001e8b7:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e8bb:	50                   	push   eax
c001e8bc:	e8 39 1a fe ff       	call   c00002fa <goToVM86>
c001e8c1:	83 c4 2c             	add    esp,0x2c
c001e8c4:	c3                   	ret    

c001e8c5 <Vm::mainVm8086Loop(void*)>:
c001e8c5:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e8ca:	48                   	dec    eax
c001e8cb:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e8d0:	75 01                	jne    c001e8d3 <Vm::mainVm8086Loop(void*)+0xe>
c001e8d2:	fb                   	sti    
c001e8d3:	eb b6                	jmp    c001e88b <Vm::mainloop2()>

c001e8d5 <Vm::mainloop3(unsigned long)>:
c001e8d5:	83 ec 18             	sub    esp,0x18
c001e8d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e8dc:	fa                   	cli    
c001e8dd:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e8e3:	6a 02                	push   0x2
c001e8e5:	c6 05 e4 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f8e4,0x1
c001e8ec:	a3 e0 f8 02 c0       	mov    ds:0xc002f8e0,eax
c001e8f1:	e8 3b f6 ff ff       	call   c001df31 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e8f6:	83 c4 1c             	add    esp,0x1c
c001e8f9:	eb 90                	jmp    c001e88b <Vm::mainloop2()>

c001e8fb <Vm::initialise8086()>:
c001e8fb:	83 ec 0c             	sub    esp,0xc
c001e8fe:	68 80 00 00 00       	push   0x80
c001e903:	6a 00                	push   0x0
c001e905:	68 c5 e8 01 c0       	push   0xc001e8c5
c001e90a:	ff 35 b0 f8 02 c0    	push   DWORD PTR ds:0xc002f8b0
c001e910:	e8 47 f2 ff ff       	call   c001db5c <Process::createThread(void (*)(void*), void*, int)>
c001e915:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e91c:	a3 e8 f8 02 c0       	mov    ds:0xc002f8e8,eax
c001e921:	68 00 01 00 00       	push   0x100
c001e926:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001e92b:	6a 00                	push   0x0
c001e92d:	6a 00                	push   0x0
c001e92f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e935:	e8 12 35 ff ff       	call   c0011e4c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e93a:	83 c4 2c             	add    esp,0x2c
c001e93d:	c3                   	ret    

c001e93e <Vm::finish8086()>:
c001e93e:	53                   	push   ebx
c001e93f:	83 ec 08             	sub    esp,0x8
c001e942:	fa                   	cli    
c001e943:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e949:	80 3d e4 f8 02 c0 00 	cmp    BYTE PTR ds:0xc002f8e4,0x0
c001e950:	75 15                	jne    c001e967 <Vm::finish8086()+0x29>
c001e952:	e8 2a f4 ff ff       	call   c001dd81 <schedule()>
c001e957:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e95c:	48                   	dec    eax
c001e95d:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001e962:	75 de                	jne    c001e942 <Vm::finish8086()+0x4>
c001e964:	fb                   	sti    
c001e965:	eb db                	jmp    c001e942 <Vm::finish8086()+0x4>
c001e967:	83 ec 0c             	sub    esp,0xc
c001e96a:	8b 1d e0 f8 02 c0    	mov    ebx,DWORD PTR ds:0xc002f8e0
c001e970:	ff 35 e8 f8 02 c0    	push   DWORD PTR ds:0xc002f8e8
c001e976:	c6 05 e4 f8 02 c0 00 	mov    BYTE PTR ds:0xc002f8e4,0x0
c001e97d:	e8 91 f8 ff ff       	call   c001e213 <unblockTask(ThreadControlBlock*)>
c001e982:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e987:	83 c4 10             	add    esp,0x10
c001e98a:	8d 50 ff             	lea    edx,[eax-0x1]
c001e98d:	89 15 88 f8 02 c0    	mov    DWORD PTR ds:0xc002f888,edx
c001e993:	85 d2                	test   edx,edx
c001e995:	75 01                	jne    c001e998 <Vm::finish8086()+0x5a>
c001e997:	fb                   	sti    
c001e998:	89 d8                	mov    eax,ebx
c001e99a:	83 c4 08             	add    esp,0x8
c001e99d:	5b                   	pop    ebx
c001e99e:	c3                   	ret    

c001e99f <Vm::getOutput8086(unsigned char*)>:
c001e99f:	57                   	push   edi
c001e9a0:	8b 0d ec f8 02 c0    	mov    ecx,DWORD PTR ds:0xc002f8ec
c001e9a6:	56                   	push   esi
c001e9a7:	be 00 f9 02 c0       	mov    esi,0xc002f900
c001e9ac:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e9b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e9b2:	a1 ec f8 02 c0       	mov    eax,ds:0xc002f8ec
c001e9b7:	5e                   	pop    esi
c001e9b8:	c7 05 ec f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f8ec,0x0
c001e9c2:	5f                   	pop    edi
c001e9c3:	c3                   	ret    

c001e9c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e9c4:	55                   	push   ebp
c001e9c5:	57                   	push   edi
c001e9c6:	56                   	push   esi
c001e9c7:	53                   	push   ebx
c001e9c8:	83 ec 2c             	sub    esp,0x2c
c001e9cb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e9cf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e9d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e9d7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e9db:	fa                   	cli    
c001e9dc:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c001e9e2:	0f b6 35 e5 f8 02 c0 	movzx  esi,BYTE PTR ds:0xc002f8e5
c001e9e9:	89 f0                	mov    eax,esi
c001e9eb:	84 c0                	test   al,al
c001e9ed:	75 1d                	jne    c001ea0c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e9ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e9f3:	e8 89 f3 ff ff       	call   c001dd81 <schedule()>
c001e9f8:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001e9fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ea01:	48                   	dec    eax
c001ea02:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001ea07:	75 d2                	jne    c001e9db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ea09:	fb                   	sti    
c001ea0a:	eb cf                	jmp    c001e9db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ea0c:	a1 e8 f8 02 c0       	mov    eax,ds:0xc002f8e8
c001ea11:	c7 05 ec f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f8ec,0x0
c001ea1b:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ea1f:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ea23:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ea27:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ea2b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ea2f:	50                   	push   eax
c001ea30:	6a 20                	push   0x20
c001ea32:	6a 00                	push   0x0
c001ea34:	68 00 f9 02 c0       	push   0xc002f900
c001ea39:	e8 12 1d fe ff       	call   c0000750 <memset>
c001ea3e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ea45:	e8 df 0d ff ff       	call   c000f829 <malloc>
c001ea4a:	83 c4 0c             	add    esp,0xc
c001ea4d:	89 c3                	mov    ebx,eax
c001ea4f:	ff 35 b0 f8 02 c0    	push   DWORD PTR ds:0xc002f8b0
c001ea55:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ea59:	50                   	push   eax
c001ea5a:	e8 81 43 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c001ea5f:	83 c4 10             	add    esp,0x10
c001ea62:	85 db                	test   ebx,ebx
c001ea64:	75 0a                	jne    c001ea70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ea66:	83 ec 0c             	sub    esp,0xc
c001ea69:	68 a0 c6 02 c0       	push   0xc002c6a0
c001ea6e:	eb 3e                	jmp    c001eaae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ea70:	50                   	push   eax
c001ea71:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ea75:	50                   	push   eax
c001ea76:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ea7a:	50                   	push   eax
c001ea7b:	53                   	push   ebx
c001ea7c:	e8 6f 46 ff ff       	call   c00130f0 <File::stat(unsigned long long*, bool*)>
c001ea81:	83 c4 10             	add    esp,0x10
c001ea84:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001ea89:	74 0a                	je     c001ea95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ea8b:	83 ec 0c             	sub    esp,0xc
c001ea8e:	68 b4 c6 02 c0       	push   0xc002c6b4
c001ea93:	eb 19                	jmp    c001eaae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ea95:	51                   	push   ecx
c001ea96:	51                   	push   ecx
c001ea97:	6a 01                	push   0x1
c001ea99:	53                   	push   ebx
c001ea9a:	e8 a5 43 ff ff       	call   c0012e44 <File::open(FileOpenMode)>
c001ea9f:	83 c4 10             	add    esp,0x10
c001eaa2:	85 c0                	test   eax,eax
c001eaa4:	74 24                	je     c001eaca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001eaa6:	83 ec 0c             	sub    esp,0xc
c001eaa9:	68 cd c6 02 c0       	push   0xc002c6cd
c001eaae:	e8 3c b7 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001eab3:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001eab8:	83 c4 10             	add    esp,0x10
c001eabb:	48                   	dec    eax
c001eabc:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001eac1:	85 c0                	test   eax,eax
c001eac3:	75 01                	jne    c001eac6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001eac5:	fb                   	sti    
c001eac6:	31 f6                	xor    esi,esi
c001eac8:	eb 58                	jmp    c001eb22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001eaca:	0f b7 ed             	movzx  ebp,bp
c001eacd:	50                   	push   eax
c001eace:	0f b7 ff             	movzx  edi,di
c001ead1:	50                   	push   eax
c001ead2:	55                   	push   ebp
c001ead3:	57                   	push   edi
c001ead4:	e8 95 fd ff ff       	call   c001e86e <Vm::realToLinear(unsigned short, unsigned short)>
c001ead9:	5a                   	pop    edx
c001eada:	8b 13                	mov    edx,DWORD PTR [ebx]
c001eadc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eae0:	51                   	push   ecx
c001eae1:	50                   	push   eax
c001eae2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eae6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eaea:	53                   	push   ebx
c001eaeb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eaee:	83 c4 14             	add    esp,0x14
c001eaf1:	53                   	push   ebx
c001eaf2:	e8 ab 43 ff ff       	call   c0012ea2 <File::close()>
c001eaf7:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c001eafc:	83 c4 10             	add    esp,0x10
c001eaff:	48                   	dec    eax
c001eb00:	c6 05 e5 f8 02 c0 00 	mov    BYTE PTR ds:0xc002f8e5,0x0
c001eb07:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c001eb0c:	85 c0                	test   eax,eax
c001eb0e:	75 01                	jne    c001eb11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001eb10:	fb                   	sti    
c001eb11:	83 ec 0c             	sub    esp,0xc
c001eb14:	ff 35 e8 f8 02 c0    	push   DWORD PTR ds:0xc002f8e8
c001eb1a:	e8 f4 f6 ff ff       	call   c001e213 <unblockTask(ThreadControlBlock*)>
c001eb1f:	83 c4 10             	add    esp,0x10
c001eb22:	83 c4 2c             	add    esp,0x2c
c001eb25:	89 f0                	mov    eax,esi
c001eb27:	5b                   	pop    ebx
c001eb28:	5e                   	pop    esi
c001eb29:	5f                   	pop    edi
c001eb2a:	5d                   	pop    ebp
c001eb2b:	c3                   	ret    

c001eb2c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eb2c:	57                   	push   edi
c001eb2d:	56                   	push   esi
c001eb2e:	53                   	push   ebx
c001eb2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb37:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb3b:	83 e8 06             	sub    eax,0x6
c001eb3e:	0f b7 c0             	movzx  eax,ax
c001eb41:	50                   	push   eax
c001eb42:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001eb47:	50                   	push   eax
c001eb48:	e8 21 fd ff ff       	call   c001e86e <Vm::realToLinear(unsigned short, unsigned short)>
c001eb4d:	5a                   	pop    edx
c001eb4e:	5e                   	pop    esi
c001eb4f:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001eb52:	8d 56 fa             	lea    edx,[esi-0x6]
c001eb55:	81 e2 ff ff 00 00    	and    edx,0xffff
c001eb5b:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001eb5e:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001eb61:	83 c2 02             	add    edx,0x2
c001eb64:	66 89 10             	mov    WORD PTR [eax],dx
c001eb67:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001eb6a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001eb6e:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001eb71:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001eb75:	89 d6                	mov    esi,edx
c001eb77:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001eb7d:	66 81 e6 ff fd       	and    si,0xfdff
c001eb82:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001eb86:	74 07                	je     c001eb8f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001eb88:	89 d6                	mov    esi,edx
c001eb8a:	66 81 ce 00 02       	or     si,0x200
c001eb8f:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001eb93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb98:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eb9c:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001eba4:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001eba7:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ebaf:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ebb2:	5b                   	pop    ebx
c001ebb3:	5e                   	pop    esi
c001ebb4:	5f                   	pop    edi
c001ebb5:	c3                   	ret    

c001ebb6 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ebb6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebbb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ebc0:	c1 e0 04             	shl    eax,0x4
c001ebc3:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ebc6:	c3                   	ret    

c001ebc7 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ebc7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebcc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ebd1:	c1 e0 04             	shl    eax,0x4
c001ebd4:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ebd8:	c3                   	ret    

c001ebd9 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ebd9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebde:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ebe3:	c1 e0 04             	shl    eax,0x4
c001ebe6:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ebe9:	c3                   	ret    

c001ebea <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ebea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ebf4:	c1 e0 04             	shl    eax,0x4
c001ebf7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ebfb:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ebfe:	c3                   	ret    

c001ebff <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ebff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec04:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec09:	c1 e0 04             	shl    eax,0x4
c001ec0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec10:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ec14:	c3                   	ret    

c001ec15 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ec15:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec1a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec1f:	c1 e0 04             	shl    eax,0x4
c001ec22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec26:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ec29:	c3                   	ret    

c001ec2a <Vm::faultHandler(regs*)>:
c001ec2a:	55                   	push   ebp
c001ec2b:	57                   	push   edi
c001ec2c:	56                   	push   esi
c001ec2d:	53                   	push   ebx
c001ec2e:	83 ec 1c             	sub    esp,0x1c
c001ec31:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ec35:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001ec38:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001ec3c:	0f b7 f8             	movzx  edi,ax
c001ec3f:	52                   	push   edx
c001ec40:	0f b7 c0             	movzx  eax,ax
c001ec43:	50                   	push   eax
c001ec44:	e8 25 fc ff ff       	call   c001e86e <Vm::realToLinear(unsigned short, unsigned short)>
c001ec49:	5a                   	pop    edx
c001ec4a:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001ec4d:	59                   	pop    ecx
c001ec4e:	89 c1                	mov    ecx,eax
c001ec50:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ec53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ec57:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ec60:	0f b7 c5             	movzx  eax,bp
c001ec63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec67:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ec6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ec6f:	e8 fa fb ff ff       	call   c001e86e <Vm::realToLinear(unsigned short, unsigned short)>
c001ec74:	5e                   	pop    esi
c001ec75:	be 06 00 00 00       	mov    esi,0x6
c001ec7a:	5a                   	pop    edx
c001ec7b:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ec80:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ec85:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001ec88:	80 fa 9d             	cmp    dl,0x9d
c001ec8b:	0f 84 2c 02 00 00    	je     c001eebd <Vm::faultHandler(regs*)+0x293>
c001ec91:	0f 87 91 00 00 00    	ja     c001ed28 <Vm::faultHandler(regs*)+0xfe>
c001ec97:	80 fa 66             	cmp    dl,0x66
c001ec9a:	0f 84 98 01 00 00    	je     c001ee38 <Vm::faultHandler(regs*)+0x20e>
c001eca0:	77 47                	ja     c001ece9 <Vm::faultHandler(regs*)+0xbf>
c001eca2:	80 fa 36             	cmp    dl,0x36
c001eca5:	0f 84 80 01 00 00    	je     c001ee2b <Vm::faultHandler(regs*)+0x201>
c001ecab:	77 1a                	ja     c001ecc7 <Vm::faultHandler(regs*)+0x9d>
c001ecad:	80 fa 26             	cmp    dl,0x26
c001ecb0:	0f 84 4e 01 00 00    	je     c001ee04 <Vm::faultHandler(regs*)+0x1da>
c001ecb6:	80 fa 2e             	cmp    dl,0x2e
c001ecb9:	0f 85 e2 05 00 00    	jne    c001f2a1 <Vm::faultHandler(regs*)+0x677>
c001ecbf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ecc2:	31 f6                	xor    esi,esi
c001ecc4:	41                   	inc    ecx
c001ecc5:	eb be                	jmp    c001ec85 <Vm::faultHandler(regs*)+0x5b>
c001ecc7:	80 fa 64             	cmp    dl,0x64
c001ecca:	0f 84 41 01 00 00    	je     c001ee11 <Vm::faultHandler(regs*)+0x1e7>
c001ecd0:	0f 87 48 01 00 00    	ja     c001ee1e <Vm::faultHandler(regs*)+0x1f4>
c001ecd6:	80 fa 3e             	cmp    dl,0x3e
c001ecd9:	0f 85 c2 05 00 00    	jne    c001f2a1 <Vm::faultHandler(regs*)+0x677>
c001ecdf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ece2:	be 01 00 00 00       	mov    esi,0x1
c001ece7:	eb db                	jmp    c001ecc4 <Vm::faultHandler(regs*)+0x9a>
c001ece9:	80 fa 6d             	cmp    dl,0x6d
c001ecec:	0f 84 ec 02 00 00    	je     c001efde <Vm::faultHandler(regs*)+0x3b4>
c001ecf2:	77 17                	ja     c001ed0b <Vm::faultHandler(regs*)+0xe1>
c001ecf4:	80 fa 67             	cmp    dl,0x67
c001ecf7:	0f 84 48 01 00 00    	je     c001ee45 <Vm::faultHandler(regs*)+0x21b>
c001ecfd:	80 fa 6c             	cmp    dl,0x6c
c001ed00:	0f 84 69 02 00 00    	je     c001ef6f <Vm::faultHandler(regs*)+0x345>
c001ed06:	e9 96 05 00 00       	jmp    c001f2a1 <Vm::faultHandler(regs*)+0x677>
c001ed0b:	80 fa 6f             	cmp    dl,0x6f
c001ed0e:	0f 84 f4 03 00 00    	je     c001f108 <Vm::faultHandler(regs*)+0x4de>
c001ed14:	0f 82 59 03 00 00    	jb     c001f073 <Vm::faultHandler(regs*)+0x449>
c001ed1a:	80 fa 9c             	cmp    dl,0x9c
c001ed1d:	0f 84 2f 01 00 00    	je     c001ee52 <Vm::faultHandler(regs*)+0x228>
c001ed23:	e9 79 05 00 00       	jmp    c001f2a1 <Vm::faultHandler(regs*)+0x677>
c001ed28:	80 fa ec             	cmp    dl,0xec
c001ed2b:	0f 84 14 05 00 00    	je     c001f245 <Vm::faultHandler(regs*)+0x61b>
c001ed31:	77 7b                	ja     c001edae <Vm::faultHandler(regs*)+0x184>
c001ed33:	80 fa e4             	cmp    dl,0xe4
c001ed36:	0f 84 93 04 00 00    	je     c001f1cf <Vm::faultHandler(regs*)+0x5a5>
c001ed3c:	77 53                	ja     c001ed91 <Vm::faultHandler(regs*)+0x167>
c001ed3e:	80 fa cd             	cmp    dl,0xcd
c001ed41:	0f 84 d9 01 00 00    	je     c001ef20 <Vm::faultHandler(regs*)+0x2f6>
c001ed47:	80 fa cf             	cmp    dl,0xcf
c001ed4a:	0f 85 51 05 00 00    	jne    c001f2a1 <Vm::faultHandler(regs*)+0x677>
c001ed50:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ed53:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001ed56:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001ed5a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001ed5d:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001ed61:	81 ca 00 02 02 00    	or     edx,0x20200
c001ed67:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ed6a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001ed6e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ed74:	66 c1 e8 09          	shr    ax,0x9
c001ed78:	83 e0 01             	and    eax,0x1
c001ed7b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ed7e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ed81:	83 c0 06             	add    eax,0x6
c001ed84:	25 ff ff 00 00       	and    eax,0xffff
c001ed89:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ed8c:	e9 0c 05 00 00       	jmp    c001f29d <Vm::faultHandler(regs*)+0x673>
c001ed91:	80 fa e6             	cmp    dl,0xe6
c001ed94:	0f 84 7f 04 00 00    	je     c001f219 <Vm::faultHandler(regs*)+0x5ef>
c001ed9a:	0f 82 4b 04 00 00    	jb     c001f1eb <Vm::faultHandler(regs*)+0x5c1>
c001eda0:	80 fa e7             	cmp    dl,0xe7
c001eda3:	0f 84 87 04 00 00    	je     c001f230 <Vm::faultHandler(regs*)+0x606>
c001eda9:	e9 f3 04 00 00       	jmp    c001f2a1 <Vm::faultHandler(regs*)+0x677>
c001edae:	80 fa ef             	cmp    dl,0xef
c001edb1:	0f 84 d1 04 00 00    	je     c001f288 <Vm::faultHandler(regs*)+0x65e>
c001edb7:	77 28                	ja     c001ede1 <Vm::faultHandler(regs*)+0x1b7>
c001edb9:	80 fa ed             	cmp    dl,0xed
c001edbc:	0f 84 9f 04 00 00    	je     c001f261 <Vm::faultHandler(regs*)+0x637>
c001edc2:	80 fa ee             	cmp    dl,0xee
c001edc5:	0f 85 d6 04 00 00    	jne    c001f2a1 <Vm::faultHandler(regs*)+0x677>
c001edcb:	50                   	push   eax
c001edcc:	50                   	push   eax
c001edcd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001edd1:	50                   	push   eax
c001edd2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001edd6:	50                   	push   eax
c001edd7:	e8 5c fa ff ff       	call   c001e838 <Vm::outbv(unsigned short, unsigned char)>
c001eddc:	e9 9f 04 00 00       	jmp    c001f280 <Vm::faultHandler(regs*)+0x656>
c001ede1:	80 fa fa             	cmp    dl,0xfa
c001ede4:	0f 84 69 01 00 00    	je     c001ef53 <Vm::faultHandler(regs*)+0x329>
c001edea:	80 fa fb             	cmp    dl,0xfb
c001eded:	0f 84 6e 01 00 00    	je     c001ef61 <Vm::faultHandler(regs*)+0x337>
c001edf3:	80 fa f3             	cmp    dl,0xf3
c001edf6:	0f 85 a5 04 00 00    	jne    c001f2a1 <Vm::faultHandler(regs*)+0x677>
c001edfc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001edff:	e9 c0 fe ff ff       	jmp    c001ecc4 <Vm::faultHandler(regs*)+0x9a>
c001ee04:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee07:	be 02 00 00 00       	mov    esi,0x2
c001ee0c:	e9 b3 fe ff ff       	jmp    c001ecc4 <Vm::faultHandler(regs*)+0x9a>
c001ee11:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee14:	be 03 00 00 00       	mov    esi,0x3
c001ee19:	e9 a6 fe ff ff       	jmp    c001ecc4 <Vm::faultHandler(regs*)+0x9a>
c001ee1e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee21:	be 04 00 00 00       	mov    esi,0x4
c001ee26:	e9 99 fe ff ff       	jmp    c001ecc4 <Vm::faultHandler(regs*)+0x9a>
c001ee2b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee2e:	be 05 00 00 00       	mov    esi,0x5
c001ee33:	e9 8c fe ff ff       	jmp    c001ecc4 <Vm::faultHandler(regs*)+0x9a>
c001ee38:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee3b:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ee40:	e9 7f fe ff ff       	jmp    c001ecc4 <Vm::faultHandler(regs*)+0x9a>
c001ee45:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee48:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ee4d:	e9 72 fe ff ff       	jmp    c001ecc4 <Vm::faultHandler(regs*)+0x9a>
c001ee52:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ee55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee59:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee5e:	74 30                	je     c001ee90 <Vm::faultHandler(regs*)+0x266>
c001ee60:	83 e9 04             	sub    ecx,0x4
c001ee63:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ee69:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ee6f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ee72:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ee75:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ee7b:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ee7f:	0f 84 15 04 00 00    	je     c001f29a <Vm::faultHandler(regs*)+0x670>
c001ee85:	80 ce 02             	or     dh,0x2
c001ee88:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ee8b:	e9 0a 04 00 00       	jmp    c001f29a <Vm::faultHandler(regs*)+0x670>
c001ee90:	83 e9 02             	sub    ecx,0x2
c001ee93:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ee99:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ee9c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eea0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eea6:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eeaa:	74 05                	je     c001eeb1 <Vm::faultHandler(regs*)+0x287>
c001eeac:	80 ce 02             	or     dh,0x2
c001eeaf:	eb 03                	jmp    c001eeb4 <Vm::faultHandler(regs*)+0x28a>
c001eeb1:	80 e6 fd             	and    dh,0xfd
c001eeb4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eeb8:	e9 dd 03 00 00       	jmp    c001f29a <Vm::faultHandler(regs*)+0x670>
c001eebd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eec2:	74 2a                	je     c001eeee <Vm::faultHandler(regs*)+0x2c4>
c001eec4:	8b 10                	mov    edx,DWORD PTR [eax]
c001eec6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eecc:	81 ca 00 02 02 00    	or     edx,0x20200
c001eed2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eed5:	8b 00                	mov    eax,DWORD PTR [eax]
c001eed7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eedd:	c1 e8 09             	shr    eax,0x9
c001eee0:	83 e0 01             	and    eax,0x1
c001eee3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eee6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eee9:	83 c0 04             	add    eax,0x4
c001eeec:	eb 25                	jmp    c001ef13 <Vm::faultHandler(regs*)+0x2e9>
c001eeee:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eef1:	81 ca 00 02 02 00    	or     edx,0x20200
c001eef7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eefa:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eefd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef03:	66 c1 e8 09          	shr    ax,0x9
c001ef07:	83 e0 01             	and    eax,0x1
c001ef0a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef0d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ef10:	83 c0 02             	add    eax,0x2
c001ef13:	25 ff ff 00 00       	and    eax,0xffff
c001ef18:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ef1b:	e9 7a 03 00 00       	jmp    c001f29a <Vm::faultHandler(regs*)+0x670>
c001ef20:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef24:	3c ee                	cmp    al,0xee
c001ef26:	75 10                	jne    c001ef38 <Vm::faultHandler(regs*)+0x30e>
c001ef28:	83 ec 0c             	sub    esp,0xc
c001ef2b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ef2e:	e8 a2 f9 ff ff       	call   c001e8d5 <Vm::mainloop3(unsigned long)>
c001ef33:	e9 4b 03 00 00       	jmp    c001f283 <Vm::faultHandler(regs*)+0x659>
c001ef38:	83 ec 0c             	sub    esp,0xc
c001ef3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ef3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef43:	51                   	push   ecx
c001ef44:	50                   	push   eax
c001ef45:	53                   	push   ebx
c001ef46:	e8 e1 fb ff ff       	call   c001eb2c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ef4b:	83 c4 20             	add    esp,0x20
c001ef4e:	e9 4a 03 00 00       	jmp    c001f29d <Vm::faultHandler(regs*)+0x673>
c001ef53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef58:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ef5c:	e9 39 03 00 00       	jmp    c001f29a <Vm::faultHandler(regs*)+0x670>
c001ef61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef66:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ef6a:	e9 2b 03 00 00       	jmp    c001f29a <Vm::faultHandler(regs*)+0x670>
c001ef6f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ef72:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ef77:	74 2b                	je     c001efa4 <Vm::faultHandler(regs*)+0x37a>
c001ef79:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ef80:	76 22                	jbe    c001efa4 <Vm::faultHandler(regs*)+0x37a>
c001ef82:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ef86:	50                   	push   eax
c001ef87:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ef8b:	50                   	push   eax
c001ef8c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ef90:	50                   	push   eax
c001ef91:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ef95:	50                   	push   eax
c001ef96:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef9a:	50                   	push   eax
c001ef9b:	6a 6c                	push   0x6c
c001ef9d:	6a 6c                	push   0x6c
c001ef9f:	e9 b9 01 00 00       	jmp    c001f15d <Vm::faultHandler(regs*)+0x533>
c001efa4:	83 ec 0c             	sub    esp,0xc
c001efa7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001efab:	0f b7 f6             	movzx  esi,si
c001efae:	50                   	push   eax
c001efaf:	e8 71 f8 ff ff       	call   c001e825 <Vm::inbv(unsigned short)>
c001efb4:	83 c4 0c             	add    esp,0xc
c001efb7:	0f b6 c0             	movzx  eax,al
c001efba:	50                   	push   eax
c001efbb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001efbf:	50                   	push   eax
c001efc0:	56                   	push   esi
c001efc1:	e8 24 fc ff ff       	call   c001ebea <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001efc6:	83 c4 10             	add    esp,0x10
c001efc9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001efcc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001efd0:	74 03                	je     c001efd5 <Vm::faultHandler(regs*)+0x3ab>
c001efd2:	48                   	dec    eax
c001efd3:	eb 01                	jmp    c001efd6 <Vm::faultHandler(regs*)+0x3ac>
c001efd5:	40                   	inc    eax
c001efd6:	0f b7 c0             	movzx  eax,ax
c001efd9:	e9 8d 00 00 00       	jmp    c001f06b <Vm::faultHandler(regs*)+0x441>
c001efde:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001efe1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001efe4:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001efe9:	74 29                	je     c001f014 <Vm::faultHandler(regs*)+0x3ea>
c001efeb:	3d ff ff 00 00       	cmp    eax,0xffff
c001eff0:	76 22                	jbe    c001f014 <Vm::faultHandler(regs*)+0x3ea>
c001eff2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eff6:	50                   	push   eax
c001eff7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001effb:	50                   	push   eax
c001effc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f000:	50                   	push   eax
c001f001:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f005:	50                   	push   eax
c001f006:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f00a:	50                   	push   eax
c001f00b:	6a 6d                	push   0x6d
c001f00d:	6a 6d                	push   0x6d
c001f00f:	e9 49 01 00 00       	jmp    c001f15d <Vm::faultHandler(regs*)+0x533>
c001f014:	0f b7 c8             	movzx  ecx,ax
c001f017:	0f b7 f6             	movzx  esi,si
c001f01a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f01d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f022:	74 20                	je     c001f044 <Vm::faultHandler(regs*)+0x41a>
c001f024:	ed                   	in     eax,dx
c001f025:	55                   	push   ebp
c001f026:	50                   	push   eax
c001f027:	51                   	push   ecx
c001f028:	56                   	push   esi
c001f029:	e8 e7 fb ff ff       	call   c001ec15 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f02e:	83 c4 10             	add    esp,0x10
c001f031:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f034:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f038:	74 05                	je     c001f03f <Vm::faultHandler(regs*)+0x415>
c001f03a:	83 e8 04             	sub    eax,0x4
c001f03d:	eb 27                	jmp    c001f066 <Vm::faultHandler(regs*)+0x43c>
c001f03f:	83 c0 04             	add    eax,0x4
c001f042:	eb 22                	jmp    c001f066 <Vm::faultHandler(regs*)+0x43c>
c001f044:	66 ed                	in     ax,dx
c001f046:	0f b7 c0             	movzx  eax,ax
c001f049:	57                   	push   edi
c001f04a:	50                   	push   eax
c001f04b:	51                   	push   ecx
c001f04c:	56                   	push   esi
c001f04d:	e8 ad fb ff ff       	call   c001ebff <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f052:	83 c4 10             	add    esp,0x10
c001f055:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f058:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f05c:	74 05                	je     c001f063 <Vm::faultHandler(regs*)+0x439>
c001f05e:	83 e8 02             	sub    eax,0x2
c001f061:	eb 03                	jmp    c001f066 <Vm::faultHandler(regs*)+0x43c>
c001f063:	83 c0 02             	add    eax,0x2
c001f066:	25 ff ff 00 00       	and    eax,0xffff
c001f06b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f06e:	e9 27 02 00 00       	jmp    c001f29a <Vm::faultHandler(regs*)+0x670>
c001f073:	8d 46 ff             	lea    eax,[esi-0x1]
c001f076:	3c 05                	cmp    al,0x5
c001f078:	77 24                	ja     c001f09e <Vm::faultHandler(regs*)+0x474>
c001f07a:	0f b6 c0             	movzx  eax,al
c001f07d:	ff 24 85 40 c7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd38c0]
c001f084:	0f b7 fd             	movzx  edi,bp
c001f087:	eb 15                	jmp    c001f09e <Vm::faultHandler(regs*)+0x474>
c001f089:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f08d:	eb 0f                	jmp    c001f09e <Vm::faultHandler(regs*)+0x474>
c001f08f:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f093:	eb 09                	jmp    c001f09e <Vm::faultHandler(regs*)+0x474>
c001f095:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f099:	eb 03                	jmp    c001f09e <Vm::faultHandler(regs*)+0x474>
c001f09b:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f09e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f0a1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f0a6:	74 29                	je     c001f0d1 <Vm::faultHandler(regs*)+0x4a7>
c001f0a8:	3d ff ff 00 00       	cmp    eax,0xffff
c001f0ad:	76 22                	jbe    c001f0d1 <Vm::faultHandler(regs*)+0x4a7>
c001f0af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f0b3:	50                   	push   eax
c001f0b4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f0b8:	50                   	push   eax
c001f0b9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f0bd:	50                   	push   eax
c001f0be:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f0c2:	50                   	push   eax
c001f0c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f0c7:	50                   	push   eax
c001f0c8:	6a 6e                	push   0x6e
c001f0ca:	6a 6e                	push   0x6e
c001f0cc:	e9 8c 00 00 00       	jmp    c001f15d <Vm::faultHandler(regs*)+0x533>
c001f0d1:	0f b7 c0             	movzx  eax,ax
c001f0d4:	52                   	push   edx
c001f0d5:	52                   	push   edx
c001f0d6:	50                   	push   eax
c001f0d7:	57                   	push   edi
c001f0d8:	e8 d9 fa ff ff       	call   c001ebb6 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f0dd:	59                   	pop    ecx
c001f0de:	0f b6 c0             	movzx  eax,al
c001f0e1:	5e                   	pop    esi
c001f0e2:	50                   	push   eax
c001f0e3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f0e7:	50                   	push   eax
c001f0e8:	e8 4b f7 ff ff       	call   c001e838 <Vm::outbv(unsigned short, unsigned char)>
c001f0ed:	83 c4 10             	add    esp,0x10
c001f0f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f0f3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f0f7:	74 03                	je     c001f0fc <Vm::faultHandler(regs*)+0x4d2>
c001f0f9:	48                   	dec    eax
c001f0fa:	eb 01                	jmp    c001f0fd <Vm::faultHandler(regs*)+0x4d3>
c001f0fc:	40                   	inc    eax
c001f0fd:	0f b7 c0             	movzx  eax,ax
c001f100:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f103:	e9 92 01 00 00       	jmp    c001f29a <Vm::faultHandler(regs*)+0x670>
c001f108:	8d 46 ff             	lea    eax,[esi-0x1]
c001f10b:	3c 05                	cmp    al,0x5
c001f10d:	77 1f                	ja     c001f12e <Vm::faultHandler(regs*)+0x504>
c001f10f:	0f b6 c0             	movzx  eax,al
c001f112:	ff 24 85 58 c7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd38a8]
c001f119:	89 ef                	mov    edi,ebp
c001f11b:	eb 11                	jmp    c001f12e <Vm::faultHandler(regs*)+0x504>
c001f11d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f120:	eb 0c                	jmp    c001f12e <Vm::faultHandler(regs*)+0x504>
c001f122:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f125:	eb 07                	jmp    c001f12e <Vm::faultHandler(regs*)+0x504>
c001f127:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f12a:	eb 02                	jmp    c001f12e <Vm::faultHandler(regs*)+0x504>
c001f12c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f12e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f131:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f136:	74 37                	je     c001f16f <Vm::faultHandler(regs*)+0x545>
c001f138:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f13e:	76 2f                	jbe    c001f16f <Vm::faultHandler(regs*)+0x545>
c001f140:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f144:	50                   	push   eax
c001f145:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f149:	50                   	push   eax
c001f14a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f14e:	50                   	push   eax
c001f14f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f153:	50                   	push   eax
c001f154:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f158:	50                   	push   eax
c001f159:	6a 6f                	push   0x6f
c001f15b:	6a 6f                	push   0x6f
c001f15d:	68 e6 c6 02 c0       	push   0xc002c6e6
c001f162:	e8 1a 37 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001f167:	83 c4 20             	add    esp,0x20
c001f16a:	e9 86 01 00 00       	jmp    c001f2f5 <Vm::faultHandler(regs*)+0x6cb>
c001f16f:	0f b7 d7             	movzx  edx,di
c001f172:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f175:	0f b7 c6             	movzx  eax,si
c001f178:	81 e1 00 04 00 00    	and    ecx,0x400
c001f17e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f181:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f186:	74 1d                	je     c001f1a5 <Vm::faultHandler(regs*)+0x57b>
c001f188:	55                   	push   ebp
c001f189:	55                   	push   ebp
c001f18a:	50                   	push   eax
c001f18b:	52                   	push   edx
c001f18c:	e8 48 fa ff ff       	call   c001ebd9 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f191:	83 c4 10             	add    esp,0x10
c001f194:	89 fa                	mov    edx,edi
c001f196:	ef                   	out    dx,eax
c001f197:	85 c9                	test   ecx,ecx
c001f199:	74 05                	je     c001f1a0 <Vm::faultHandler(regs*)+0x576>
c001f19b:	83 ee 04             	sub    esi,0x4
c001f19e:	eb 21                	jmp    c001f1c1 <Vm::faultHandler(regs*)+0x597>
c001f1a0:	83 c6 04             	add    esi,0x4
c001f1a3:	eb 1c                	jmp    c001f1c1 <Vm::faultHandler(regs*)+0x597>
c001f1a5:	55                   	push   ebp
c001f1a6:	55                   	push   ebp
c001f1a7:	50                   	push   eax
c001f1a8:	52                   	push   edx
c001f1a9:	e8 19 fa ff ff       	call   c001ebc7 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f1ae:	83 c4 10             	add    esp,0x10
c001f1b1:	89 fa                	mov    edx,edi
c001f1b3:	66 ef                	out    dx,ax
c001f1b5:	85 c9                	test   ecx,ecx
c001f1b7:	74 05                	je     c001f1be <Vm::faultHandler(regs*)+0x594>
c001f1b9:	83 ee 02             	sub    esi,0x2
c001f1bc:	eb 03                	jmp    c001f1c1 <Vm::faultHandler(regs*)+0x597>
c001f1be:	83 c6 02             	add    esi,0x2
c001f1c1:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f1c7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f1ca:	e9 cb 00 00 00       	jmp    c001f29a <Vm::faultHandler(regs*)+0x670>
c001f1cf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f1d6:	83 ec 0c             	sub    esp,0xc
c001f1d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f1dd:	50                   	push   eax
c001f1de:	e8 42 f6 ff ff       	call   c001e825 <Vm::inbv(unsigned short)>
c001f1e3:	0f b6 c0             	movzx  eax,al
c001f1e6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f1e9:	eb 3f                	jmp    c001f22a <Vm::faultHandler(regs*)+0x600>
c001f1eb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f1f0:	74 07                	je     c001f1f9 <Vm::faultHandler(regs*)+0x5cf>
c001f1f2:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f1f6:	ed                   	in     eax,dx
c001f1f7:	eb 14                	jmp    c001f20d <Vm::faultHandler(regs*)+0x5e3>
c001f1f9:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f1fc:	66 31 f6             	xor    si,si
c001f1ff:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f202:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f206:	66 ed                	in     ax,dx
c001f208:	0f b7 c0             	movzx  eax,ax
c001f20b:	09 f0                	or     eax,esi
c001f20d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f210:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f214:	e9 84 00 00 00       	jmp    c001f29d <Vm::faultHandler(regs*)+0x673>
c001f219:	52                   	push   edx
c001f21a:	52                   	push   edx
c001f21b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f21f:	50                   	push   eax
c001f220:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f224:	50                   	push   eax
c001f225:	e8 0e f6 ff ff       	call   c001e838 <Vm::outbv(unsigned short, unsigned char)>
c001f22a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f22e:	eb 53                	jmp    c001f283 <Vm::faultHandler(regs*)+0x659>
c001f230:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f233:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f237:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f23c:	74 03                	je     c001f241 <Vm::faultHandler(regs*)+0x617>
c001f23e:	ef                   	out    dx,eax
c001f23f:	eb cf                	jmp    c001f210 <Vm::faultHandler(regs*)+0x5e6>
c001f241:	66 ef                	out    dx,ax
c001f243:	eb cb                	jmp    c001f210 <Vm::faultHandler(regs*)+0x5e6>
c001f245:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f24c:	83 ec 0c             	sub    esp,0xc
c001f24f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f253:	50                   	push   eax
c001f254:	e8 cc f5 ff ff       	call   c001e825 <Vm::inbv(unsigned short)>
c001f259:	0f b6 c0             	movzx  eax,al
c001f25c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f25f:	eb 1f                	jmp    c001f280 <Vm::faultHandler(regs*)+0x656>
c001f261:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f264:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f269:	74 03                	je     c001f26e <Vm::faultHandler(regs*)+0x644>
c001f26b:	ed                   	in     eax,dx
c001f26c:	eb 0d                	jmp    c001f27b <Vm::faultHandler(regs*)+0x651>
c001f26e:	66 ed                	in     ax,dx
c001f270:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f273:	0f b7 c0             	movzx  eax,ax
c001f276:	66 31 d2             	xor    dx,dx
c001f279:	09 d0                	or     eax,edx
c001f27b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f27e:	eb 1a                	jmp    c001f29a <Vm::faultHandler(regs*)+0x670>
c001f280:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f283:	83 c4 10             	add    esp,0x10
c001f286:	eb 15                	jmp    c001f29d <Vm::faultHandler(regs*)+0x673>
c001f288:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f28b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f28e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f293:	74 03                	je     c001f298 <Vm::faultHandler(regs*)+0x66e>
c001f295:	ef                   	out    dx,eax
c001f296:	eb 02                	jmp    c001f29a <Vm::faultHandler(regs*)+0x670>
c001f298:	66 ef                	out    dx,ax
c001f29a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f29d:	b0 01                	mov    al,0x1
c001f29f:	eb 56                	jmp    c001f2f7 <Vm::faultHandler(regs*)+0x6cd>
c001f2a1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f2a5:	50                   	push   eax
c001f2a6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f2aa:	50                   	push   eax
c001f2ab:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f2af:	50                   	push   eax
c001f2b0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f2b4:	50                   	push   eax
c001f2b5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f2b9:	50                   	push   eax
c001f2ba:	52                   	push   edx
c001f2bb:	52                   	push   edx
c001f2bc:	68 13 c7 02 c0       	push   0xc002c713
c001f2c1:	e8 bb 35 ff ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c001f2c6:	83 c4 20             	add    esp,0x20
c001f2c9:	83 ec 0c             	sub    esp,0xc
c001f2cc:	6a 60                	push   0x60
c001f2ce:	e8 52 f5 ff ff       	call   c001e825 <Vm::inbv(unsigned short)>
c001f2d3:	83 c4 10             	add    esp,0x10
c001f2d6:	3c 1c                	cmp    al,0x1c
c001f2d8:	74 04                	je     c001f2de <Vm::faultHandler(regs*)+0x6b4>
c001f2da:	3c 5a                	cmp    al,0x5a
c001f2dc:	75 eb                	jne    c001f2c9 <Vm::faultHandler(regs*)+0x69f>
c001f2de:	3c 5a                	cmp    al,0x5a
c001f2e0:	74 04                	je     c001f2e6 <Vm::faultHandler(regs*)+0x6bc>
c001f2e2:	3c 1c                	cmp    al,0x1c
c001f2e4:	75 0f                	jne    c001f2f5 <Vm::faultHandler(regs*)+0x6cb>
c001f2e6:	83 ec 0c             	sub    esp,0xc
c001f2e9:	6a 60                	push   0x60
c001f2eb:	e8 35 f5 ff ff       	call   c001e825 <Vm::inbv(unsigned short)>
c001f2f0:	83 c4 10             	add    esp,0x10
c001f2f3:	eb e9                	jmp    c001f2de <Vm::faultHandler(regs*)+0x6b4>
c001f2f5:	31 c0                	xor    eax,eax
c001f2f7:	83 c4 1c             	add    esp,0x1c
c001f2fa:	5b                   	pop    ebx
c001f2fb:	5e                   	pop    esi
c001f2fc:	5f                   	pop    edi
c001f2fd:	5d                   	pop    ebp
c001f2fe:	c3                   	ret    

c001f2ff <Vm::fpuInternalTo32(unsigned long long)>:
c001f2ff:	57                   	push   edi
c001f300:	56                   	push   esi
c001f301:	53                   	push   ebx
c001f302:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f30a:	89 d6                	mov    esi,edx
c001f30c:	89 d7                	mov    edi,edx
c001f30e:	89 c1                	mov    ecx,eax
c001f310:	c1 ef 14             	shr    edi,0x14
c001f313:	89 d3                	mov    ebx,edx
c001f315:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f31b:	31 d2                	xor    edx,edx
c001f31d:	89 f8                	mov    eax,edi
c001f31f:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f325:	bf ff 00 00 00       	mov    edi,0xff
c001f32a:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f32f:	83 d2 ff             	adc    edx,0xffffffff
c001f332:	39 c7                	cmp    edi,eax
c001f334:	bf 00 00 00 00       	mov    edi,0x0
c001f339:	19 d7                	sbb    edi,edx
c001f33b:	72 15                	jb     c001f352 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f33d:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f341:	c1 e0 17             	shl    eax,0x17
c001f344:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f34a:	09 f1                	or     ecx,esi
c001f34c:	09 c1                	or     ecx,eax
c001f34e:	89 cf                	mov    edi,ecx
c001f350:	eb 02                	jmp    c001f354 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f352:	31 ff                	xor    edi,edi
c001f354:	89 f8                	mov    eax,edi
c001f356:	5b                   	pop    ebx
c001f357:	5e                   	pop    esi
c001f358:	5f                   	pop    edi
c001f359:	c3                   	ret    

c001f35a <Vm::fpuInternalTo64(unsigned long long)>:
c001f35a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f35e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f362:	c3                   	ret    

c001f363 <Vm::fpu32ToInternal(unsigned int)>:
c001f363:	57                   	push   edi
c001f364:	31 ff                	xor    edi,edi
c001f366:	56                   	push   esi
c001f367:	53                   	push   ebx
c001f368:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f36c:	89 cb                	mov    ebx,ecx
c001f36e:	89 ce                	mov    esi,ecx
c001f370:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f376:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f37c:	c1 e9 17             	shr    ecx,0x17
c001f37f:	89 f0                	mov    eax,esi
c001f381:	0f b6 d1             	movzx  edx,cl
c001f384:	81 c2 80 03 00 00    	add    edx,0x380
c001f38a:	89 d1                	mov    ecx,edx
c001f38c:	89 fa                	mov    edx,edi
c001f38e:	c1 e1 14             	shl    ecx,0x14
c001f391:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f395:	c1 e0 1d             	shl    eax,0x1d
c001f398:	89 d7                	mov    edi,edx
c001f39a:	89 c6                	mov    esi,eax
c001f39c:	89 ca                	mov    edx,ecx
c001f39e:	89 f0                	mov    eax,esi
c001f3a0:	09 fa                	or     edx,edi
c001f3a2:	09 da                	or     edx,ebx
c001f3a4:	5b                   	pop    ebx
c001f3a5:	5e                   	pop    esi
c001f3a6:	5f                   	pop    edi
c001f3a7:	c3                   	ret    

c001f3a8 <Vm::fpu64ToInternal(unsigned long long)>:
c001f3a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f3b0:	c3                   	ret    

c001f3b1 <Vm::fpuFloatToLong(unsigned long long)>:
c001f3b1:	57                   	push   edi
c001f3b2:	31 c0                	xor    eax,eax
c001f3b4:	56                   	push   esi
c001f3b5:	31 d2                	xor    edx,edx
c001f3b7:	53                   	push   ebx
c001f3b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f3bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f3c0:	89 d9                	mov    ecx,ebx
c001f3c2:	c1 e9 14             	shr    ecx,0x14
c001f3c5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f3cb:	89 cf                	mov    edi,ecx
c001f3cd:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f3d3:	78 33                	js     c001f408 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f3d5:	89 d9                	mov    ecx,ebx
c001f3d7:	89 f0                	mov    eax,esi
c001f3d9:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f3df:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f3e5:	89 ca                	mov    edx,ecx
c001f3e7:	b9 34 00 00 00       	mov    ecx,0x34
c001f3ec:	29 f9                	sub    ecx,edi
c001f3ee:	0f ad d0             	shrd   eax,edx,cl
c001f3f1:	d3 fa                	sar    edx,cl
c001f3f3:	f6 c1 20             	test   cl,0x20
c001f3f6:	74 05                	je     c001f3fd <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f3f8:	89 d0                	mov    eax,edx
c001f3fa:	c1 fa 1f             	sar    edx,0x1f
c001f3fd:	85 db                	test   ebx,ebx
c001f3ff:	79 07                	jns    c001f408 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f401:	f7 d8                	neg    eax
c001f403:	83 d2 00             	adc    edx,0x0
c001f406:	f7 da                	neg    edx
c001f408:	5b                   	pop    ebx
c001f409:	5e                   	pop    esi
c001f40a:	5f                   	pop    edi
c001f40b:	c3                   	ret    

c001f40c <Vm::fpuULongToFloat(unsigned long long)>:
c001f40c:	57                   	push   edi
c001f40d:	31 c9                	xor    ecx,ecx
c001f40f:	56                   	push   esi
c001f410:	53                   	push   ebx
c001f411:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f415:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f419:	0f ba e7 14          	bt     edi,0x14
c001f41d:	72 07                	jb     c001f426 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f41f:	01 f6                	add    esi,esi
c001f421:	11 ff                	adc    edi,edi
c001f423:	41                   	inc    ecx
c001f424:	eb f3                	jmp    c001f419 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f426:	89 fa                	mov    edx,edi
c001f428:	89 f0                	mov    eax,esi
c001f42a:	bb 33 04 00 00       	mov    ebx,0x433
c001f42f:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f435:	29 cb                	sub    ebx,ecx
c001f437:	89 d9                	mov    ecx,ebx
c001f439:	5b                   	pop    ebx
c001f43a:	c1 e1 14             	shl    ecx,0x14
c001f43d:	5e                   	pop    esi
c001f43e:	09 ca                	or     edx,ecx
c001f440:	5f                   	pop    edi
c001f441:	c3                   	ret    

c001f442 <Vm::fpuLongToFloat(long long)>:
c001f442:	56                   	push   esi
c001f443:	31 c0                	xor    eax,eax
c001f445:	53                   	push   ebx
c001f446:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f44a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f44e:	39 c8                	cmp    eax,ecx
c001f450:	19 d8                	sbb    eax,ebx
c001f452:	7d 04                	jge    c001f458 <Vm::fpuLongToFloat(long long)+0x16>
c001f454:	31 f6                	xor    esi,esi
c001f456:	eb 0c                	jmp    c001f464 <Vm::fpuLongToFloat(long long)+0x22>
c001f458:	f7 d9                	neg    ecx
c001f45a:	be 01 00 00 00       	mov    esi,0x1
c001f45f:	83 d3 00             	adc    ebx,0x0
c001f462:	f7 db                	neg    ebx
c001f464:	31 c0                	xor    eax,eax
c001f466:	0f ba e3 14          	bt     ebx,0x14
c001f46a:	72 07                	jb     c001f473 <Vm::fpuLongToFloat(long long)+0x31>
c001f46c:	01 c9                	add    ecx,ecx
c001f46e:	11 db                	adc    ebx,ebx
c001f470:	40                   	inc    eax
c001f471:	eb f3                	jmp    c001f466 <Vm::fpuLongToFloat(long long)+0x24>
c001f473:	ba 33 04 00 00       	mov    edx,0x433
c001f478:	29 c2                	sub    edx,eax
c001f47a:	89 c8                	mov    eax,ecx
c001f47c:	c1 e2 14             	shl    edx,0x14
c001f47f:	89 d9                	mov    ecx,ebx
c001f481:	89 f3                	mov    ebx,esi
c001f483:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f489:	09 ca                	or     edx,ecx
c001f48b:	84 db                	test   bl,bl
c001f48d:	74 06                	je     c001f495 <Vm::fpuLongToFloat(long long)+0x53>
c001f48f:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f495:	5b                   	pop    ebx
c001f496:	5e                   	pop    esi
c001f497:	c3                   	ret    

c001f498 <Vm::fpuGet0()>:
c001f498:	31 c0                	xor    eax,eax
c001f49a:	31 d2                	xor    edx,edx
c001f49c:	c3                   	ret    

c001f49d <Vm::fpuGet1()>:
c001f49d:	b8 01 00 00 00       	mov    eax,0x1
c001f4a2:	31 d2                	xor    edx,edx
c001f4a4:	c3                   	ret    

c001f4a5 <Vm::fpuGetPi()>:
c001f4a5:	b8 03 00 00 00       	mov    eax,0x3
c001f4aa:	31 d2                	xor    edx,edx
c001f4ac:	c3                   	ret    

c001f4ad <Vm::fpuGetLog2E()>:
c001f4ad:	83 ec 18             	sub    esp,0x18
c001f4b0:	68 70 c7 02 c0       	push   0xc002c770
c001f4b5:	e8 35 ad ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001f4ba:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f4bf:	31 d2                	xor    edx,edx
c001f4c1:	83 c4 1c             	add    esp,0x1c
c001f4c4:	c3                   	ret    

c001f4c5 <Vm::fpuGetLogE2()>:
c001f4c5:	83 ec 18             	sub    esp,0x18
c001f4c8:	68 7c c7 02 c0       	push   0xc002c77c
c001f4cd:	e8 1d ad ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001f4d2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f4d7:	31 d2                	xor    edx,edx
c001f4d9:	83 c4 1c             	add    esp,0x1c
c001f4dc:	c3                   	ret    

c001f4dd <Vm::fpuGetLog210()>:
c001f4dd:	83 ec 18             	sub    esp,0x18
c001f4e0:	68 88 c7 02 c0       	push   0xc002c788
c001f4e5:	e8 05 ad ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001f4ea:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f4ef:	31 d2                	xor    edx,edx
c001f4f1:	83 c4 1c             	add    esp,0x1c
c001f4f4:	c3                   	ret    

c001f4f5 <Vm::fpuGetLog102()>:
c001f4f5:	83 ec 18             	sub    esp,0x18
c001f4f8:	68 95 c7 02 c0       	push   0xc002c795
c001f4fd:	e8 ed ac ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001f502:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f507:	31 d2                	xor    edx,edx
c001f509:	83 c4 1c             	add    esp,0x1c
c001f50c:	c3                   	ret    

c001f50d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f50d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f511:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f515:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f519:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f51d:	0f 92 c0             	setb   al
c001f520:	c3                   	ret    

c001f521 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f521:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f529:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f52d:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f531:	09 c2                	or     edx,eax
c001f533:	0f 94 c0             	sete   al
c001f536:	c3                   	ret    

c001f537 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f537:	57                   	push   edi
c001f538:	56                   	push   esi
c001f539:	53                   	push   ebx
c001f53a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f53e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f542:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f546:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f54a:	57                   	push   edi
c001f54b:	56                   	push   esi
c001f54c:	53                   	push   ebx
c001f54d:	51                   	push   ecx
c001f54e:	e8 ce ff ff ff       	call   c001f521 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f553:	83 c4 10             	add    esp,0x10
c001f556:	88 c2                	mov    dl,al
c001f558:	31 c0                	xor    eax,eax
c001f55a:	84 d2                	test   dl,dl
c001f55c:	75 0c                	jne    c001f56a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f55e:	57                   	push   edi
c001f55f:	56                   	push   esi
c001f560:	53                   	push   ebx
c001f561:	51                   	push   ecx
c001f562:	e8 a6 ff ff ff       	call   c001f50d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f567:	83 c4 10             	add    esp,0x10
c001f56a:	83 e0 01             	and    eax,0x1
c001f56d:	5b                   	pop    ebx
c001f56e:	88 c1                	mov    cl,al
c001f570:	83 e2 01             	and    edx,0x1
c001f573:	a0 21 f9 02 c0       	mov    al,ds:0xc002f921
c001f578:	c1 e2 06             	shl    edx,0x6
c001f57b:	83 e0 ba             	and    eax,0xffffffba
c001f57e:	5e                   	pop    esi
c001f57f:	09 c8                	or     eax,ecx
c001f581:	5f                   	pop    edi
c001f582:	09 d0                	or     eax,edx
c001f584:	a2 21 f9 02 c0       	mov    ds:0xc002f921,al
c001f589:	c3                   	ret    

c001f58a <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f58a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f58e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f592:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f596:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f59a:	c3                   	ret    

c001f59b <Vm::fpuAbs(unsigned long long)>:
c001f59b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f59f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f5a3:	c3                   	ret    

c001f5a4 <Vm::fpuChs(unsigned long long)>:
c001f5a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f5ac:	f7 d8                	neg    eax
c001f5ae:	83 d2 00             	adc    edx,0x0
c001f5b1:	f7 da                	neg    edx
c001f5b3:	c3                   	ret    

c001f5b4 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f5b4:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f5b8:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f5bd:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f5c1:	eb c7                	jmp    c001f58a <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f5c3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f5c3:	53                   	push   ebx
c001f5c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f5cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5d0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f5d4:	0f af ca             	imul   ecx,edx
c001f5d7:	0f af d8             	imul   ebx,eax
c001f5da:	f7 e2                	mul    edx
c001f5dc:	01 d9                	add    ecx,ebx
c001f5de:	5b                   	pop    ebx
c001f5df:	01 ca                	add    edx,ecx
c001f5e1:	c3                   	ret    

c001f5e2 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f5e2:	83 ec 0c             	sub    esp,0xc
c001f5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5f5:	e8 2a 76 00 00       	call   c0026c24 <__udivdi3>
c001f5fa:	83 c4 1c             	add    esp,0x1c
c001f5fd:	c3                   	ret    

c001f5fe <Vm::fpuSquare(unsigned long long)>:
c001f5fe:	50                   	push   eax
c001f5ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f603:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f607:	52                   	push   edx
c001f608:	50                   	push   eax
c001f609:	52                   	push   edx
c001f60a:	50                   	push   eax
c001f60b:	e8 b3 ff ff ff       	call   c001f5c3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f610:	83 c4 14             	add    esp,0x14
c001f613:	c3                   	ret    

c001f614 <Vm::fpuGetReg(int)>:
c001f614:	83 ec 0c             	sub    esp,0xc
c001f617:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f61c:	76 10                	jbe    c001f62e <Vm::fpuGetReg(int)+0x1a>
c001f61e:	83 ec 0c             	sub    esp,0xc
c001f621:	68 a2 c7 02 c0       	push   0xc002c7a2
c001f626:	e8 c4 ab ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001f62b:	83 c4 10             	add    esp,0x10
c001f62e:	a0 21 f9 02 c0       	mov    al,ds:0xc002f921
c001f633:	b9 08 00 00 00       	mov    ecx,0x8
c001f638:	c0 e8 03             	shr    al,0x3
c001f63b:	83 e0 07             	and    eax,0x7
c001f63e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f642:	99                   	cdq    
c001f643:	f7 f9                	idiv   ecx
c001f645:	8b 04 d5 24 f9 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd06dc]
c001f64c:	8b 14 d5 28 f9 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd06d8]
c001f653:	83 c4 0c             	add    esp,0xc
c001f656:	c3                   	ret    

c001f657 <Vm::fpuSetReg(int, unsigned long long)>:
c001f657:	57                   	push   edi
c001f658:	56                   	push   esi
c001f659:	52                   	push   edx
c001f65a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f65e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f662:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f667:	76 10                	jbe    c001f679 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f669:	83 ec 0c             	sub    esp,0xc
c001f66c:	68 b5 c7 02 c0       	push   0xc002c7b5
c001f671:	e8 79 ab ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c001f676:	83 c4 10             	add    esp,0x10
c001f679:	a0 21 f9 02 c0       	mov    al,ds:0xc002f921
c001f67e:	b9 08 00 00 00       	mov    ecx,0x8
c001f683:	c0 e8 03             	shr    al,0x3
c001f686:	83 e0 07             	and    eax,0x7
c001f689:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f68d:	99                   	cdq    
c001f68e:	f7 f9                	idiv   ecx
c001f690:	89 34 d5 24 f9 02 c0 	mov    DWORD PTR [edx*8-0x3ffd06dc],esi
c001f697:	89 3c d5 28 f9 02 c0 	mov    DWORD PTR [edx*8-0x3ffd06d8],edi
c001f69e:	58                   	pop    eax
c001f69f:	5e                   	pop    esi
c001f6a0:	5f                   	pop    edi
c001f6a1:	c3                   	ret    

c001f6a2 <Vm::fpuPush(unsigned long long)>:
c001f6a2:	a0 21 f9 02 c0       	mov    al,ds:0xc002f921
c001f6a7:	c0 e8 03             	shr    al,0x3
c001f6aa:	83 e0 07             	and    eax,0x7
c001f6ad:	83 c0 07             	add    eax,0x7
c001f6b0:	88 c2                	mov    dl,al
c001f6b2:	83 e0 07             	and    eax,0x7
c001f6b5:	83 e2 07             	and    edx,0x7
c001f6b8:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f6bf:	8a 15 21 f9 02 c0    	mov    dl,BYTE PTR ds:0xc002f921
c001f6c5:	83 e2 c7             	and    edx,0xffffffc7
c001f6c8:	09 ca                	or     edx,ecx
c001f6ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6ce:	88 15 21 f9 02 c0    	mov    BYTE PTR ds:0xc002f921,dl
c001f6d4:	89 0c c5 28 f9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd06d8],ecx
c001f6db:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f6df:	89 14 c5 24 f9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd06dc],edx
c001f6e6:	a1 64 f9 02 c0       	mov    eax,ds:0xc002f964
c001f6eb:	83 f8 08             	cmp    eax,0x8
c001f6ee:	75 08                	jne    c001f6f8 <Vm::fpuPush(unsigned long long)+0x56>
c001f6f0:	80 0d 20 f9 02 c0 40 	or     BYTE PTR ds:0xc002f920,0x40
c001f6f7:	c3                   	ret    
c001f6f8:	40                   	inc    eax
c001f6f9:	a3 64 f9 02 c0       	mov    ds:0xc002f964,eax
c001f6fe:	c3                   	ret    

c001f6ff <Vm::fpuPop()>:
c001f6ff:	8a 0d 21 f9 02 c0    	mov    cl,BYTE PTR ds:0xc002f921
c001f705:	53                   	push   ebx
c001f706:	c0 e9 03             	shr    cl,0x3
c001f709:	8a 1d 21 f9 02 c0    	mov    bl,BYTE PTR ds:0xc002f921
c001f70f:	83 e1 07             	and    ecx,0x7
c001f712:	83 e3 c7             	and    ebx,0xffffffc7
c001f715:	8b 04 cd 24 f9 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd06dc]
c001f71c:	8b 14 cd 28 f9 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd06d8]
c001f723:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f72a:	83 e1 38             	and    ecx,0x38
c001f72d:	09 d9                	or     ecx,ebx
c001f72f:	88 0d 21 f9 02 c0    	mov    BYTE PTR ds:0xc002f921,cl
c001f735:	8b 0d 64 f9 02 c0    	mov    ecx,DWORD PTR ds:0xc002f964
c001f73b:	85 c9                	test   ecx,ecx
c001f73d:	74 09                	je     c001f748 <Vm::fpuPop()+0x49>
c001f73f:	49                   	dec    ecx
c001f740:	89 0d 64 f9 02 c0    	mov    DWORD PTR ds:0xc002f964,ecx
c001f746:	eb 07                	jmp    c001f74f <Vm::fpuPop()+0x50>
c001f748:	80 0d 20 f9 02 c0 40 	or     BYTE PTR ds:0xc002f920,0x40
c001f74f:	5b                   	pop    ebx
c001f750:	c3                   	ret    

c001f751 <Vm::x87Handler(regs*)>:
c001f751:	55                   	push   ebp
c001f752:	57                   	push   edi
c001f753:	56                   	push   esi
c001f754:	53                   	push   ebx
c001f755:	83 ec 1c             	sub    esp,0x1c
c001f758:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f75c:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f761:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f764:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f76c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f770:	50                   	push   eax
c001f771:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f775:	50                   	push   eax
c001f776:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f77a:	50                   	push   eax
c001f77b:	53                   	push   ebx
c001f77c:	e8 87 a1 ff ff       	call   c0019908 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f781:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f784:	83 c4 10             	add    esp,0x10
c001f787:	89 c6                	mov    esi,eax
c001f789:	80 fa d9             	cmp    dl,0xd9
c001f78c:	0f 85 52 01 00 00    	jne    c001f8e4 <Vm::x87Handler(regs*)+0x193>
c001f792:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f796:	8d 50 20             	lea    edx,[eax+0x20]
c001f799:	80 fa 0e             	cmp    dl,0xe
c001f79c:	0f 87 86 00 00 00    	ja     c001f828 <Vm::x87Handler(regs*)+0xd7>
c001f7a2:	0f b6 d2             	movzx  edx,dl
c001f7a5:	ff 24 95 c8 c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3838]
c001f7ac:	e8 e7 fc ff ff       	call   c001f498 <Vm::fpuGet0()>
c001f7b1:	eb 05                	jmp    c001f7b8 <Vm::x87Handler(regs*)+0x67>
c001f7b3:	e8 e5 fc ff ff       	call   c001f49d <Vm::fpuGet1()>
c001f7b8:	57                   	push   edi
c001f7b9:	57                   	push   edi
c001f7ba:	52                   	push   edx
c001f7bb:	50                   	push   eax
c001f7bc:	e8 e1 fe ff ff       	call   c001f6a2 <Vm::fpuPush(unsigned long long)>
c001f7c1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f7c5:	83 c4 10             	add    esp,0x10
c001f7c8:	b0 01                	mov    al,0x1
c001f7ca:	e9 e3 09 00 00       	jmp    c00201b2 <Vm::x87Handler(regs*)+0xa61>
c001f7cf:	83 ec 0c             	sub    esp,0xc
c001f7d2:	6a 00                	push   0x0
c001f7d4:	e8 3b fe ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001f7d9:	59                   	pop    ecx
c001f7da:	5e                   	pop    esi
c001f7db:	52                   	push   edx
c001f7dc:	50                   	push   eax
c001f7dd:	e8 c2 fd ff ff       	call   c001f5a4 <Vm::fpuChs(unsigned long long)>
c001f7e2:	eb 13                	jmp    c001f7f7 <Vm::x87Handler(regs*)+0xa6>
c001f7e4:	83 ec 0c             	sub    esp,0xc
c001f7e7:	6a 00                	push   0x0
c001f7e9:	e8 26 fe ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001f7ee:	5f                   	pop    edi
c001f7ef:	5d                   	pop    ebp
c001f7f0:	52                   	push   edx
c001f7f1:	50                   	push   eax
c001f7f2:	e8 a4 fd ff ff       	call   c001f59b <Vm::fpuAbs(unsigned long long)>
c001f7f7:	83 c4 0c             	add    esp,0xc
c001f7fa:	52                   	push   edx
c001f7fb:	50                   	push   eax
c001f7fc:	6a 00                	push   0x0
c001f7fe:	e8 54 fe ff ff       	call   c001f657 <Vm::fpuSetReg(int, unsigned long long)>
c001f803:	eb bc                	jmp    c001f7c1 <Vm::x87Handler(regs*)+0x70>
c001f805:	e8 d3 fc ff ff       	call   c001f4dd <Vm::fpuGetLog210()>
c001f80a:	eb ac                	jmp    c001f7b8 <Vm::x87Handler(regs*)+0x67>
c001f80c:	e8 9c fc ff ff       	call   c001f4ad <Vm::fpuGetLog2E()>
c001f811:	eb a5                	jmp    c001f7b8 <Vm::x87Handler(regs*)+0x67>
c001f813:	e8 8d fc ff ff       	call   c001f4a5 <Vm::fpuGetPi()>
c001f818:	eb 9e                	jmp    c001f7b8 <Vm::x87Handler(regs*)+0x67>
c001f81a:	e8 d6 fc ff ff       	call   c001f4f5 <Vm::fpuGetLog102()>
c001f81f:	eb 97                	jmp    c001f7b8 <Vm::x87Handler(regs*)+0x67>
c001f821:	e8 9f fc ff ff       	call   c001f4c5 <Vm::fpuGetLogE2()>
c001f826:	eb 90                	jmp    c001f7b8 <Vm::x87Handler(regs*)+0x67>
c001f828:	8d 50 40             	lea    edx,[eax+0x40]
c001f82b:	80 fa 07             	cmp    dl,0x7
c001f82e:	77 15                	ja     c001f845 <Vm::x87Handler(regs*)+0xf4>
c001f830:	83 ec 0c             	sub    esp,0xc
c001f833:	2d c0 00 00 00       	sub    eax,0xc0
c001f838:	50                   	push   eax
c001f839:	e8 d6 fd ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001f83e:	59                   	pop    ecx
c001f83f:	5e                   	pop    esi
c001f840:	e9 75 ff ff ff       	jmp    c001f7ba <Vm::x87Handler(regs*)+0x69>
c001f845:	8d 50 38             	lea    edx,[eax+0x38]
c001f848:	80 fa 07             	cmp    dl,0x7
c001f84b:	77 3c                	ja     c001f889 <Vm::x87Handler(regs*)+0x138>
c001f84d:	83 ec 0c             	sub    esp,0xc
c001f850:	2d c8 00 00 00       	sub    eax,0xc8
c001f855:	50                   	push   eax
c001f856:	e8 b9 fd ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001f85b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f862:	89 c6                	mov    esi,eax
c001f864:	89 d7                	mov    edi,edx
c001f866:	e8 a9 fd ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001f86b:	83 c4 0c             	add    esp,0xc
c001f86e:	52                   	push   edx
c001f86f:	50                   	push   eax
c001f870:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f874:	2d c8 00 00 00       	sub    eax,0xc8
c001f879:	50                   	push   eax
c001f87a:	e8 d8 fd ff ff       	call   c001f657 <Vm::fpuSetReg(int, unsigned long long)>
c001f87f:	83 c4 0c             	add    esp,0xc
c001f882:	57                   	push   edi
c001f883:	56                   	push   esi
c001f884:	e9 73 ff ff ff       	jmp    c001f7fc <Vm::x87Handler(regs*)+0xab>
c001f889:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f88d:	84 d2                	test   dl,dl
c001f88f:	75 0f                	jne    c001f8a0 <Vm::x87Handler(regs*)+0x14f>
c001f891:	83 ec 0c             	sub    esp,0xc
c001f894:	ff 36                	push   DWORD PTR [esi]
c001f896:	e8 c8 fa ff ff       	call   c001f363 <Vm::fpu32ToInternal(unsigned int)>
c001f89b:	e9 bf 00 00 00       	jmp    c001f95f <Vm::x87Handler(regs*)+0x20e>
c001f8a0:	80 fa 03             	cmp    dl,0x3
c001f8a3:	75 13                	jne    c001f8b8 <Vm::x87Handler(regs*)+0x167>
c001f8a5:	e8 55 fe ff ff       	call   c001f6ff <Vm::fpuPop()>
c001f8aa:	55                   	push   ebp
c001f8ab:	55                   	push   ebp
c001f8ac:	52                   	push   edx
c001f8ad:	50                   	push   eax
c001f8ae:	e8 4c fa ff ff       	call   c001f2ff <Vm::fpuInternalTo32(unsigned long long)>
c001f8b3:	e9 88 00 00 00       	jmp    c001f940 <Vm::x87Handler(regs*)+0x1ef>
c001f8b8:	80 fa 05             	cmp    dl,0x5
c001f8bb:	75 0e                	jne    c001f8cb <Vm::x87Handler(regs*)+0x17a>
c001f8bd:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f8c0:	66 a3 22 f9 02 c0    	mov    ds:0xc002f922,ax
c001f8c6:	e9 df 00 00 00       	jmp    c001f9aa <Vm::x87Handler(regs*)+0x259>
c001f8cb:	31 c0                	xor    eax,eax
c001f8cd:	80 fa 07             	cmp    dl,0x7
c001f8d0:	0f 85 dc 08 00 00    	jne    c00201b2 <Vm::x87Handler(regs*)+0xa61>
c001f8d6:	66 a1 22 f9 02 c0    	mov    ax,ds:0xc002f922
c001f8dc:	66 89 06             	mov    WORD PTR [esi],ax
c001f8df:	e9 c6 00 00 00       	jmp    c001f9aa <Vm::x87Handler(regs*)+0x259>
c001f8e4:	80 fa d8             	cmp    dl,0xd8
c001f8e7:	0f 84 c9 00 00 00    	je     c001f9b6 <Vm::x87Handler(regs*)+0x265>
c001f8ed:	80 fa dc             	cmp    dl,0xdc
c001f8f0:	0f 84 0d 02 00 00    	je     c001fb03 <Vm::x87Handler(regs*)+0x3b2>
c001f8f6:	80 fa de             	cmp    dl,0xde
c001f8f9:	0f 84 cd 02 00 00    	je     c001fbcc <Vm::x87Handler(regs*)+0x47b>
c001f8ff:	80 fa dd             	cmp    dl,0xdd
c001f902:	0f 84 5f 04 00 00    	je     c001fd67 <Vm::x87Handler(regs*)+0x616>
c001f908:	80 fa da             	cmp    dl,0xda
c001f90b:	0f 84 24 05 00 00    	je     c001fe35 <Vm::x87Handler(regs*)+0x6e4>
c001f911:	80 fa df             	cmp    dl,0xdf
c001f914:	0f 84 68 05 00 00    	je     c001fe82 <Vm::x87Handler(regs*)+0x731>
c001f91a:	31 c0                	xor    eax,eax
c001f91c:	80 fa db             	cmp    dl,0xdb
c001f91f:	0f 85 8d 08 00 00    	jne    c00201b2 <Vm::x87Handler(regs*)+0xa61>
c001f925:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f929:	80 fa 03             	cmp    dl,0x3
c001f92c:	0f 85 70 06 00 00    	jne    c001ffa2 <Vm::x87Handler(regs*)+0x851>
c001f932:	e8 c8 fd ff ff       	call   c001f6ff <Vm::fpuPop()>
c001f937:	55                   	push   ebp
c001f938:	55                   	push   ebp
c001f939:	52                   	push   edx
c001f93a:	50                   	push   eax
c001f93b:	e8 71 fa ff ff       	call   c001f3b1 <Vm::fpuFloatToLong(unsigned long long)>
c001f940:	83 c4 10             	add    esp,0x10
c001f943:	89 06                	mov    DWORD PTR [esi],eax
c001f945:	eb 63                	jmp    c001f9aa <Vm::x87Handler(regs*)+0x259>
c001f947:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f94b:	84 d2                	test   dl,dl
c001f94d:	0f 85 e6 05 00 00    	jne    c001ff39 <Vm::x87Handler(regs*)+0x7e8>
c001f953:	57                   	push   edi
c001f954:	57                   	push   edi
c001f955:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f958:	ff 36                	push   DWORD PTR [esi]
c001f95a:	e8 49 fa ff ff       	call   c001f3a8 <Vm::fpu64ToInternal(unsigned long long)>
c001f95f:	5e                   	pop    esi
c001f960:	5f                   	pop    edi
c001f961:	52                   	push   edx
c001f962:	50                   	push   eax
c001f963:	e8 3a fd ff ff       	call   c001f6a2 <Vm::fpuPush(unsigned long long)>
c001f968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f96c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f96f:	e9 51 fe ff ff       	jmp    c001f7c5 <Vm::x87Handler(regs*)+0x74>
c001f974:	80 fa 03             	cmp    dl,0x3
c001f977:	0f 85 d7 06 00 00    	jne    c0020054 <Vm::x87Handler(regs*)+0x903>
c001f97d:	57                   	push   edi
c001f97e:	57                   	push   edi
c001f97f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f982:	ff 36                	push   DWORD PTR [esi]
c001f984:	e8 1f fa ff ff       	call   c001f3a8 <Vm::fpu64ToInternal(unsigned long long)>
c001f989:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f990:	89 c6                	mov    esi,eax
c001f992:	89 d7                	mov    edi,edx
c001f994:	e8 7b fc ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001f999:	57                   	push   edi
c001f99a:	56                   	push   esi
c001f99b:	52                   	push   edx
c001f99c:	50                   	push   eax
c001f99d:	e8 95 fb ff ff       	call   c001f537 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9a2:	83 c4 20             	add    esp,0x20
c001f9a5:	e8 55 fd ff ff       	call   c001f6ff <Vm::fpuPop()>
c001f9aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9ae:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f9b1:	e9 12 fe ff ff       	jmp    c001f7c8 <Vm::x87Handler(regs*)+0x77>
c001f9b6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9ba:	8d 50 40             	lea    edx,[eax+0x40]
c001f9bd:	80 fa 07             	cmp    dl,0x7
c001f9c0:	77 29                	ja     c001f9eb <Vm::x87Handler(regs*)+0x29a>
c001f9c2:	83 ec 0c             	sub    esp,0xc
c001f9c5:	2d c0 00 00 00       	sub    eax,0xc0
c001f9ca:	50                   	push   eax
c001f9cb:	e8 44 fc ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001f9d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9d7:	89 c6                	mov    esi,eax
c001f9d9:	89 d7                	mov    edi,edx
c001f9db:	e8 34 fc ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001f9e0:	57                   	push   edi
c001f9e1:	56                   	push   esi
c001f9e2:	52                   	push   edx
c001f9e3:	50                   	push   eax
c001f9e4:	e8 a1 fb ff ff       	call   c001f58a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f9e9:	eb 2f                	jmp    c001fa1a <Vm::x87Handler(regs*)+0x2c9>
c001f9eb:	8d 50 38             	lea    edx,[eax+0x38]
c001f9ee:	80 fa 07             	cmp    dl,0x7
c001f9f1:	77 2f                	ja     c001fa22 <Vm::x87Handler(regs*)+0x2d1>
c001f9f3:	83 ec 0c             	sub    esp,0xc
c001f9f6:	2d c8 00 00 00       	sub    eax,0xc8
c001f9fb:	50                   	push   eax
c001f9fc:	e8 13 fc ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fa01:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa08:	89 c6                	mov    esi,eax
c001fa0a:	89 d7                	mov    edi,edx
c001fa0c:	e8 03 fc ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fa11:	57                   	push   edi
c001fa12:	56                   	push   esi
c001fa13:	52                   	push   edx
c001fa14:	50                   	push   eax
c001fa15:	e8 a9 fb ff ff       	call   c001f5c3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa1a:	83 c4 1c             	add    esp,0x1c
c001fa1d:	e9 d8 fd ff ff       	jmp    c001f7fa <Vm::x87Handler(regs*)+0xa9>
c001fa22:	8d 50 30             	lea    edx,[eax+0x30]
c001fa25:	80 fa 07             	cmp    dl,0x7
c001fa28:	77 0d                	ja     c001fa37 <Vm::x87Handler(regs*)+0x2e6>
c001fa2a:	83 ec 0c             	sub    esp,0xc
c001fa2d:	2d d0 00 00 00       	sub    eax,0xd0
c001fa32:	e9 99 03 00 00       	jmp    c001fdd0 <Vm::x87Handler(regs*)+0x67f>
c001fa37:	8d 50 28             	lea    edx,[eax+0x28]
c001fa3a:	80 fa 07             	cmp    dl,0x7
c001fa3d:	77 0d                	ja     c001fa4c <Vm::x87Handler(regs*)+0x2fb>
c001fa3f:	83 ec 0c             	sub    esp,0xc
c001fa42:	2d d8 00 00 00       	sub    eax,0xd8
c001fa47:	e9 c0 03 00 00       	jmp    c001fe0c <Vm::x87Handler(regs*)+0x6bb>
c001fa4c:	8d 50 20             	lea    edx,[eax+0x20]
c001fa4f:	80 fa 07             	cmp    dl,0x7
c001fa52:	77 1b                	ja     c001fa6f <Vm::x87Handler(regs*)+0x31e>
c001fa54:	83 ec 0c             	sub    esp,0xc
c001fa57:	2d e0 00 00 00       	sub    eax,0xe0
c001fa5c:	50                   	push   eax
c001fa5d:	e8 b2 fb ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fa62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa69:	89 c6                	mov    esi,eax
c001fa6b:	89 d7                	mov    edi,edx
c001fa6d:	eb 22                	jmp    c001fa91 <Vm::x87Handler(regs*)+0x340>
c001fa6f:	8d 50 18             	lea    edx,[eax+0x18]
c001fa72:	80 fa 07             	cmp    dl,0x7
c001fa75:	77 2d                	ja     c001faa4 <Vm::x87Handler(regs*)+0x353>
c001fa77:	83 ec 0c             	sub    esp,0xc
c001fa7a:	6a 00                	push   0x0
c001fa7c:	e8 93 fb ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fa81:	89 c6                	mov    esi,eax
c001fa83:	89 d7                	mov    edi,edx
c001fa85:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa89:	2d e8 00 00 00       	sub    eax,0xe8
c001fa8e:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa91:	e8 7e fb ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fa96:	57                   	push   edi
c001fa97:	56                   	push   esi
c001fa98:	52                   	push   edx
c001fa99:	50                   	push   eax
c001fa9a:	e8 15 fb ff ff       	call   c001f5b4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa9f:	e9 76 ff ff ff       	jmp    c001fa1a <Vm::x87Handler(regs*)+0x2c9>
c001faa4:	8d 50 10             	lea    edx,[eax+0x10]
c001faa7:	80 fa 07             	cmp    dl,0x7
c001faaa:	77 1b                	ja     c001fac7 <Vm::x87Handler(regs*)+0x376>
c001faac:	83 ec 0c             	sub    esp,0xc
c001faaf:	2d f0 00 00 00       	sub    eax,0xf0
c001fab4:	50                   	push   eax
c001fab5:	e8 5a fb ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001faba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fac1:	89 c6                	mov    esi,eax
c001fac3:	89 d7                	mov    edi,edx
c001fac5:	eb 22                	jmp    c001fae9 <Vm::x87Handler(regs*)+0x398>
c001fac7:	3c f7                	cmp    al,0xf7
c001fac9:	0f 86 d1 03 00 00    	jbe    c001fea0 <Vm::x87Handler(regs*)+0x74f>
c001facf:	83 ec 0c             	sub    esp,0xc
c001fad2:	6a 00                	push   0x0
c001fad4:	e8 3b fb ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fad9:	89 c6                	mov    esi,eax
c001fadb:	89 d7                	mov    edi,edx
c001fadd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fae1:	2d f8 00 00 00       	sub    eax,0xf8
c001fae6:	89 04 24             	mov    DWORD PTR [esp],eax
c001fae9:	e8 26 fb ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001faee:	57                   	push   edi
c001faef:	56                   	push   esi
c001faf0:	52                   	push   edx
c001faf1:	50                   	push   eax
c001faf2:	e8 eb fa ff ff       	call   c001f5e2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001faf7:	83 c4 1c             	add    esp,0x1c
c001fafa:	52                   	push   edx
c001fafb:	50                   	push   eax
c001fafc:	6a 00                	push   0x0
c001fafe:	e9 51 02 00 00       	jmp    c001fd54 <Vm::x87Handler(regs*)+0x603>
c001fb03:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb07:	8d 50 40             	lea    edx,[eax+0x40]
c001fb0a:	80 fa 07             	cmp    dl,0x7
c001fb0d:	77 37                	ja     c001fb46 <Vm::x87Handler(regs*)+0x3f5>
c001fb0f:	83 ec 0c             	sub    esp,0xc
c001fb12:	2d c0 00 00 00       	sub    eax,0xc0
c001fb17:	50                   	push   eax
c001fb18:	e8 f7 fa ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fb1d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb24:	89 c6                	mov    esi,eax
c001fb26:	89 d7                	mov    edi,edx
c001fb28:	e8 e7 fa ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fb2d:	57                   	push   edi
c001fb2e:	56                   	push   esi
c001fb2f:	52                   	push   edx
c001fb30:	50                   	push   eax
c001fb31:	e8 54 fa ff ff       	call   c001f58a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb36:	83 c4 1c             	add    esp,0x1c
c001fb39:	52                   	push   edx
c001fb3a:	50                   	push   eax
c001fb3b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb3f:	2d c0 00 00 00       	sub    eax,0xc0
c001fb44:	eb 3d                	jmp    c001fb83 <Vm::x87Handler(regs*)+0x432>
c001fb46:	8d 50 38             	lea    edx,[eax+0x38]
c001fb49:	80 fa 07             	cmp    dl,0x7
c001fb4c:	77 3b                	ja     c001fb89 <Vm::x87Handler(regs*)+0x438>
c001fb4e:	83 ec 0c             	sub    esp,0xc
c001fb51:	2d c8 00 00 00       	sub    eax,0xc8
c001fb56:	50                   	push   eax
c001fb57:	e8 b8 fa ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fb5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb63:	89 c6                	mov    esi,eax
c001fb65:	89 d7                	mov    edi,edx
c001fb67:	e8 a8 fa ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fb6c:	57                   	push   edi
c001fb6d:	56                   	push   esi
c001fb6e:	52                   	push   edx
c001fb6f:	50                   	push   eax
c001fb70:	e8 4e fa ff ff       	call   c001f5c3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fb75:	83 c4 1c             	add    esp,0x1c
c001fb78:	52                   	push   edx
c001fb79:	50                   	push   eax
c001fb7a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb7e:	2d c8 00 00 00       	sub    eax,0xc8
c001fb83:	50                   	push   eax
c001fb84:	e9 75 fc ff ff       	jmp    c001f7fe <Vm::x87Handler(regs*)+0xad>
c001fb89:	83 c0 18             	add    eax,0x18
c001fb8c:	3c 07                	cmp    al,0x7
c001fb8e:	0f 87 3b 04 00 00    	ja     c001ffcf <Vm::x87Handler(regs*)+0x87e>
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	6a 00                	push   0x0
c001fb99:	e8 76 fa ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fb9e:	89 c6                	mov    esi,eax
c001fba0:	89 d7                	mov    edi,edx
c001fba2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fba6:	2d e8 00 00 00       	sub    eax,0xe8
c001fbab:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbae:	e8 61 fa ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fbb3:	57                   	push   edi
c001fbb4:	56                   	push   esi
c001fbb5:	52                   	push   edx
c001fbb6:	50                   	push   eax
c001fbb7:	e8 f8 f9 ff ff       	call   c001f5b4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbbc:	83 c4 1c             	add    esp,0x1c
c001fbbf:	52                   	push   edx
c001fbc0:	50                   	push   eax
c001fbc1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbc5:	2d e8 00 00 00       	sub    eax,0xe8
c001fbca:	eb b7                	jmp    c001fb83 <Vm::x87Handler(regs*)+0x432>
c001fbcc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbd0:	8d 50 40             	lea    edx,[eax+0x40]
c001fbd3:	80 fa 07             	cmp    dl,0x7
c001fbd6:	77 3a                	ja     c001fc12 <Vm::x87Handler(regs*)+0x4c1>
c001fbd8:	83 ec 0c             	sub    esp,0xc
c001fbdb:	2d c0 00 00 00       	sub    eax,0xc0
c001fbe0:	50                   	push   eax
c001fbe1:	e8 2e fa ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fbe6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbed:	89 c6                	mov    esi,eax
c001fbef:	89 d7                	mov    edi,edx
c001fbf1:	e8 1e fa ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fbf6:	57                   	push   edi
c001fbf7:	56                   	push   esi
c001fbf8:	52                   	push   edx
c001fbf9:	50                   	push   eax
c001fbfa:	e8 8b f9 ff ff       	call   c001f58a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fbff:	83 c4 1c             	add    esp,0x1c
c001fc02:	52                   	push   edx
c001fc03:	50                   	push   eax
c001fc04:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc08:	2d c0 00 00 00       	sub    eax,0xc0
c001fc0d:	e9 9e 01 00 00       	jmp    c001fdb0 <Vm::x87Handler(regs*)+0x65f>
c001fc12:	8d 50 20             	lea    edx,[eax+0x20]
c001fc15:	80 fa 07             	cmp    dl,0x7
c001fc18:	77 3a                	ja     c001fc54 <Vm::x87Handler(regs*)+0x503>
c001fc1a:	83 ec 0c             	sub    esp,0xc
c001fc1d:	2d e0 00 00 00       	sub    eax,0xe0
c001fc22:	50                   	push   eax
c001fc23:	e8 ec f9 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fc28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc2f:	89 c6                	mov    esi,eax
c001fc31:	89 d7                	mov    edi,edx
c001fc33:	e8 dc f9 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fc38:	57                   	push   edi
c001fc39:	56                   	push   esi
c001fc3a:	52                   	push   edx
c001fc3b:	50                   	push   eax
c001fc3c:	e8 73 f9 ff ff       	call   c001f5b4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc41:	83 c4 1c             	add    esp,0x1c
c001fc44:	52                   	push   edx
c001fc45:	50                   	push   eax
c001fc46:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc4a:	2d e0 00 00 00       	sub    eax,0xe0
c001fc4f:	e9 5c 01 00 00       	jmp    c001fdb0 <Vm::x87Handler(regs*)+0x65f>
c001fc54:	8d 50 18             	lea    edx,[eax+0x18]
c001fc57:	80 fa 07             	cmp    dl,0x7
c001fc5a:	77 3b                	ja     c001fc97 <Vm::x87Handler(regs*)+0x546>
c001fc5c:	83 ec 0c             	sub    esp,0xc
c001fc5f:	6a 00                	push   0x0
c001fc61:	e8 ae f9 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fc66:	89 c6                	mov    esi,eax
c001fc68:	89 d7                	mov    edi,edx
c001fc6a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc6e:	2d e8 00 00 00       	sub    eax,0xe8
c001fc73:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc76:	e8 99 f9 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fc7b:	57                   	push   edi
c001fc7c:	56                   	push   esi
c001fc7d:	52                   	push   edx
c001fc7e:	50                   	push   eax
c001fc7f:	e8 30 f9 ff ff       	call   c001f5b4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc84:	83 c4 1c             	add    esp,0x1c
c001fc87:	52                   	push   edx
c001fc88:	50                   	push   eax
c001fc89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc8d:	2d e8 00 00 00       	sub    eax,0xe8
c001fc92:	e9 19 01 00 00       	jmp    c001fdb0 <Vm::x87Handler(regs*)+0x65f>
c001fc97:	8d 50 38             	lea    edx,[eax+0x38]
c001fc9a:	80 fa 07             	cmp    dl,0x7
c001fc9d:	77 37                	ja     c001fcd6 <Vm::x87Handler(regs*)+0x585>
c001fc9f:	83 ec 0c             	sub    esp,0xc
c001fca2:	2d c8 00 00 00       	sub    eax,0xc8
c001fca7:	50                   	push   eax
c001fca8:	e8 67 f9 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fcad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcb4:	89 c6                	mov    esi,eax
c001fcb6:	89 d7                	mov    edi,edx
c001fcb8:	e8 57 f9 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fcbd:	57                   	push   edi
c001fcbe:	56                   	push   esi
c001fcbf:	52                   	push   edx
c001fcc0:	50                   	push   eax
c001fcc1:	e8 fd f8 ff ff       	call   c001f5c3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fcc6:	83 c4 1c             	add    esp,0x1c
c001fcc9:	52                   	push   edx
c001fcca:	50                   	push   eax
c001fccb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fccf:	2d c8 00 00 00       	sub    eax,0xc8
c001fcd4:	eb 7d                	jmp    c001fd53 <Vm::x87Handler(regs*)+0x602>
c001fcd6:	3c f7                	cmp    al,0xf7
c001fcd8:	76 38                	jbe    c001fd12 <Vm::x87Handler(regs*)+0x5c1>
c001fcda:	83 ec 0c             	sub    esp,0xc
c001fcdd:	6a 00                	push   0x0
c001fcdf:	e8 30 f9 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fce4:	89 c6                	mov    esi,eax
c001fce6:	89 d7                	mov    edi,edx
c001fce8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcec:	2d f8 00 00 00       	sub    eax,0xf8
c001fcf1:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcf4:	e8 1b f9 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fcf9:	57                   	push   edi
c001fcfa:	56                   	push   esi
c001fcfb:	52                   	push   edx
c001fcfc:	50                   	push   eax
c001fcfd:	e8 e0 f8 ff ff       	call   c001f5e2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd02:	83 c4 1c             	add    esp,0x1c
c001fd05:	52                   	push   edx
c001fd06:	50                   	push   eax
c001fd07:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd0b:	2d f8 00 00 00       	sub    eax,0xf8
c001fd10:	eb 41                	jmp    c001fd53 <Vm::x87Handler(regs*)+0x602>
c001fd12:	8d 50 10             	lea    edx,[eax+0x10]
c001fd15:	80 fa 07             	cmp    dl,0x7
c001fd18:	0f 87 5a 01 00 00    	ja     c001fe78 <Vm::x87Handler(regs*)+0x727>
c001fd1e:	83 ec 0c             	sub    esp,0xc
c001fd21:	2d f0 00 00 00       	sub    eax,0xf0
c001fd26:	50                   	push   eax
c001fd27:	e8 e8 f8 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fd2c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd33:	89 c6                	mov    esi,eax
c001fd35:	89 d7                	mov    edi,edx
c001fd37:	e8 d8 f8 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fd3c:	57                   	push   edi
c001fd3d:	56                   	push   esi
c001fd3e:	52                   	push   edx
c001fd3f:	50                   	push   eax
c001fd40:	e8 9d f8 ff ff       	call   c001f5e2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd45:	83 c4 1c             	add    esp,0x1c
c001fd48:	52                   	push   edx
c001fd49:	50                   	push   eax
c001fd4a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd4e:	2d f0 00 00 00       	sub    eax,0xf0
c001fd53:	50                   	push   eax
c001fd54:	e8 fe f8 ff ff       	call   c001f657 <Vm::fpuSetReg(int, unsigned long long)>
c001fd59:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fd5d:	e8 9d f9 ff ff       	call   c001f6ff <Vm::fpuPop()>
c001fd62:	e9 5e fa ff ff       	jmp    c001f7c5 <Vm::x87Handler(regs*)+0x74>
c001fd67:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd6b:	8d 50 30             	lea    edx,[eax+0x30]
c001fd6e:	80 fa 07             	cmp    dl,0x7
c001fd71:	77 1d                	ja     c001fd90 <Vm::x87Handler(regs*)+0x63f>
c001fd73:	83 ec 0c             	sub    esp,0xc
c001fd76:	6a 00                	push   0x0
c001fd78:	e8 97 f8 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fd7d:	83 c4 0c             	add    esp,0xc
c001fd80:	52                   	push   edx
c001fd81:	50                   	push   eax
c001fd82:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd86:	2d d0 00 00 00       	sub    eax,0xd0
c001fd8b:	e9 f3 fd ff ff       	jmp    c001fb83 <Vm::x87Handler(regs*)+0x432>
c001fd90:	8d 50 28             	lea    edx,[eax+0x28]
c001fd93:	80 fa 07             	cmp    dl,0x7
c001fd96:	77 28                	ja     c001fdc0 <Vm::x87Handler(regs*)+0x66f>
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	6a 00                	push   0x0
c001fd9d:	e8 72 f8 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fda2:	83 c4 0c             	add    esp,0xc
c001fda5:	52                   	push   edx
c001fda6:	50                   	push   eax
c001fda7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdab:	2d d8 00 00 00       	sub    eax,0xd8
c001fdb0:	50                   	push   eax
c001fdb1:	e8 a1 f8 ff ff       	call   c001f657 <Vm::fpuSetReg(int, unsigned long long)>
c001fdb6:	e8 44 f9 ff ff       	call   c001f6ff <Vm::fpuPop()>
c001fdbb:	e9 01 fa ff ff       	jmp    c001f7c1 <Vm::x87Handler(regs*)+0x70>
c001fdc0:	8d 50 20             	lea    edx,[eax+0x20]
c001fdc3:	80 fa 07             	cmp    dl,0x7
c001fdc6:	77 30                	ja     c001fdf8 <Vm::x87Handler(regs*)+0x6a7>
c001fdc8:	83 ec 0c             	sub    esp,0xc
c001fdcb:	2d e0 00 00 00       	sub    eax,0xe0
c001fdd0:	50                   	push   eax
c001fdd1:	e8 3e f8 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fdd6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fddd:	89 c6                	mov    esi,eax
c001fddf:	89 d7                	mov    edi,edx
c001fde1:	e8 2e f8 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fde6:	57                   	push   edi
c001fde7:	56                   	push   esi
c001fde8:	52                   	push   edx
c001fde9:	50                   	push   eax
c001fdea:	e8 48 f7 ff ff       	call   c001f537 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdef:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fdf3:	e9 54 02 00 00       	jmp    c002004c <Vm::x87Handler(regs*)+0x8fb>
c001fdf8:	8d 50 18             	lea    edx,[eax+0x18]
c001fdfb:	80 fa 07             	cmp    dl,0x7
c001fdfe:	0f 87 43 fb ff ff    	ja     c001f947 <Vm::x87Handler(regs*)+0x1f6>
c001fe04:	83 ec 0c             	sub    esp,0xc
c001fe07:	2d e8 00 00 00       	sub    eax,0xe8
c001fe0c:	50                   	push   eax
c001fe0d:	e8 02 f8 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fe12:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe19:	89 c6                	mov    esi,eax
c001fe1b:	89 d7                	mov    edi,edx
c001fe1d:	e8 f2 f7 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fe22:	57                   	push   edi
c001fe23:	56                   	push   esi
c001fe24:	52                   	push   edx
c001fe25:	50                   	push   eax
c001fe26:	e8 0c f7 ff ff       	call   c001f537 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe2b:	83 c4 20             	add    esp,0x20
c001fe2e:	e8 cc f8 ff ff       	call   c001f6ff <Vm::fpuPop()>
c001fe33:	eb 62                	jmp    c001fe97 <Vm::x87Handler(regs*)+0x746>
c001fe35:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fe39:	0f 85 0f 01 00 00    	jne    c001ff4e <Vm::x87Handler(regs*)+0x7fd>
c001fe3f:	83 ec 0c             	sub    esp,0xc
c001fe42:	6a 01                	push   0x1
c001fe44:	e8 cb f7 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fe49:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe50:	89 c6                	mov    esi,eax
c001fe52:	89 d7                	mov    edi,edx
c001fe54:	e8 bb f7 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fe59:	57                   	push   edi
c001fe5a:	56                   	push   esi
c001fe5b:	52                   	push   edx
c001fe5c:	50                   	push   eax
c001fe5d:	e8 d5 f6 ff ff       	call   c001f537 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe62:	83 c4 20             	add    esp,0x20
c001fe65:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fe69:	e8 91 f8 ff ff       	call   c001f6ff <Vm::fpuPop()>
c001fe6e:	e8 8c f8 ff ff       	call   c001f6ff <Vm::fpuPop()>
c001fe73:	e9 50 f9 ff ff       	jmp    c001f7c8 <Vm::x87Handler(regs*)+0x77>
c001fe78:	3c d9                	cmp    al,0xd9
c001fe7a:	0f 85 b5 02 00 00    	jne    c0020135 <Vm::x87Handler(regs*)+0x9e4>
c001fe80:	eb bd                	jmp    c001fe3f <Vm::x87Handler(regs*)+0x6ee>
c001fe82:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fe86:	0f 85 ea 02 00 00    	jne    c0020176 <Vm::x87Handler(regs*)+0xa25>
c001fe8c:	0f b7 05 20 f9 02 c0 	movzx  eax,WORD PTR ds:0xc002f920
c001fe93:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fe97:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fe9b:	e9 28 f9 ff ff       	jmp    c001f7c8 <Vm::x87Handler(regs*)+0x77>
c001fea0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fea4:	84 d2                	test   dl,dl
c001fea6:	75 0f                	jne    c001feb7 <Vm::x87Handler(regs*)+0x766>
c001fea8:	83 ec 0c             	sub    esp,0xc
c001feab:	ff 36                	push   DWORD PTR [esi]
c001fead:	e8 b1 f4 ff ff       	call   c001f363 <Vm::fpu32ToInternal(unsigned int)>
c001feb2:	e9 2c 01 00 00       	jmp    c001ffe3 <Vm::x87Handler(regs*)+0x892>
c001feb7:	80 fa 01             	cmp    dl,0x1
c001feba:	75 0f                	jne    c001fecb <Vm::x87Handler(regs*)+0x77a>
c001febc:	83 ec 0c             	sub    esp,0xc
c001febf:	ff 36                	push   DWORD PTR [esi]
c001fec1:	e8 9d f4 ff ff       	call   c001f363 <Vm::fpu32ToInternal(unsigned int)>
c001fec6:	e9 81 02 00 00       	jmp    c002014c <Vm::x87Handler(regs*)+0x9fb>
c001fecb:	80 fa 04             	cmp    dl,0x4
c001fece:	75 0f                	jne    c001fedf <Vm::x87Handler(regs*)+0x78e>
c001fed0:	83 ec 0c             	sub    esp,0xc
c001fed3:	ff 36                	push   DWORD PTR [esi]
c001fed5:	e8 89 f4 ff ff       	call   c001f363 <Vm::fpu32ToInternal(unsigned int)>
c001feda:	e9 86 01 00 00       	jmp    c0020065 <Vm::x87Handler(regs*)+0x914>
c001fedf:	80 fa 05             	cmp    dl,0x5
c001fee2:	75 1b                	jne    c001feff <Vm::x87Handler(regs*)+0x7ae>
c001fee4:	83 ec 0c             	sub    esp,0xc
c001fee7:	6a 00                	push   0x0
c001fee9:	e8 26 f7 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001feee:	89 c7                	mov    edi,eax
c001fef0:	89 d5                	mov    ebp,edx
c001fef2:	58                   	pop    eax
c001fef3:	ff 36                	push   DWORD PTR [esi]
c001fef5:	e8 69 f4 ff ff       	call   c001f363 <Vm::fpu32ToInternal(unsigned int)>
c001fefa:	e9 a3 01 00 00       	jmp    c00200a2 <Vm::x87Handler(regs*)+0x951>
c001feff:	80 fa 06             	cmp    dl,0x6
c001ff02:	75 0f                	jne    c001ff13 <Vm::x87Handler(regs*)+0x7c2>
c001ff04:	83 ec 0c             	sub    esp,0xc
c001ff07:	ff 36                	push   DWORD PTR [esi]
c001ff09:	e8 55 f4 ff ff       	call   c001f363 <Vm::fpu32ToInternal(unsigned int)>
c001ff0e:	e9 ae 01 00 00       	jmp    c00200c1 <Vm::x87Handler(regs*)+0x970>
c001ff13:	31 c0                	xor    eax,eax
c001ff15:	80 fa 07             	cmp    dl,0x7
c001ff18:	0f 85 94 02 00 00    	jne    c00201b2 <Vm::x87Handler(regs*)+0xa61>
c001ff1e:	83 ec 0c             	sub    esp,0xc
c001ff21:	6a 00                	push   0x0
c001ff23:	e8 ec f6 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001ff28:	89 c7                	mov    edi,eax
c001ff2a:	89 d5                	mov    ebp,edx
c001ff2c:	58                   	pop    eax
c001ff2d:	ff 36                	push   DWORD PTR [esi]
c001ff2f:	e8 2f f4 ff ff       	call   c001f363 <Vm::fpu32ToInternal(unsigned int)>
c001ff34:	e9 cb 01 00 00       	jmp    c0020104 <Vm::x87Handler(regs*)+0x9b3>
c001ff39:	80 fa 03             	cmp    dl,0x3
c001ff3c:	0f 85 d3 01 00 00    	jne    c0020115 <Vm::x87Handler(regs*)+0x9c4>
c001ff42:	e8 b8 f7 ff ff       	call   c001f6ff <Vm::fpuPop()>
c001ff47:	51                   	push   ecx
c001ff48:	51                   	push   ecx
c001ff49:	e9 de 01 00 00       	jmp    c002012c <Vm::x87Handler(regs*)+0x9db>
c001ff4e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff52:	80 fa 01             	cmp    dl,0x1
c001ff55:	75 09                	jne    c001ff60 <Vm::x87Handler(regs*)+0x80f>
c001ff57:	57                   	push   edi
c001ff58:	57                   	push   edi
c001ff59:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff5b:	e9 e3 01 00 00       	jmp    c0020143 <Vm::x87Handler(regs*)+0x9f2>
c001ff60:	80 fa 04             	cmp    dl,0x4
c001ff63:	75 12                	jne    c001ff77 <Vm::x87Handler(regs*)+0x826>
c001ff65:	31 d2                	xor    edx,edx
c001ff67:	51                   	push   ecx
c001ff68:	51                   	push   ecx
c001ff69:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff6b:	52                   	push   edx
c001ff6c:	50                   	push   eax
c001ff6d:	e8 d0 f4 ff ff       	call   c001f442 <Vm::fpuLongToFloat(long long)>
c001ff72:	e9 ee 00 00 00       	jmp    c0020065 <Vm::x87Handler(regs*)+0x914>
c001ff77:	31 c0                	xor    eax,eax
c001ff79:	80 fa 07             	cmp    dl,0x7
c001ff7c:	0f 85 30 02 00 00    	jne    c00201b2 <Vm::x87Handler(regs*)+0xa61>
c001ff82:	83 ec 0c             	sub    esp,0xc
c001ff85:	6a 00                	push   0x0
c001ff87:	e8 88 f6 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001ff8c:	89 c7                	mov    edi,eax
c001ff8e:	89 d5                	mov    ebp,edx
c001ff90:	58                   	pop    eax
c001ff91:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff93:	5a                   	pop    edx
c001ff94:	31 d2                	xor    edx,edx
c001ff96:	52                   	push   edx
c001ff97:	50                   	push   eax
c001ff98:	e8 a5 f4 ff ff       	call   c001f442 <Vm::fpuLongToFloat(long long)>
c001ff9d:	e9 62 01 00 00       	jmp    c0020104 <Vm::x87Handler(regs*)+0x9b3>
c001ffa2:	84 d2                	test   dl,dl
c001ffa4:	75 0d                	jne    c001ffb3 <Vm::x87Handler(regs*)+0x862>
c001ffa6:	31 d2                	xor    edx,edx
c001ffa8:	55                   	push   ebp
c001ffa9:	55                   	push   ebp
c001ffaa:	8b 06                	mov    eax,DWORD PTR [esi]
c001ffac:	52                   	push   edx
c001ffad:	50                   	push   eax
c001ffae:	e9 d3 01 00 00       	jmp    c0020186 <Vm::x87Handler(regs*)+0xa35>
c001ffb3:	31 c0                	xor    eax,eax
c001ffb5:	80 fa 02             	cmp    dl,0x2
c001ffb8:	0f 85 f4 01 00 00    	jne    c00201b2 <Vm::x87Handler(regs*)+0xa61>
c001ffbe:	83 ec 0c             	sub    esp,0xc
c001ffc1:	6a 00                	push   0x0
c001ffc3:	e8 4c f6 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001ffc8:	59                   	pop    ecx
c001ffc9:	5f                   	pop    edi
c001ffca:	e9 6a f9 ff ff       	jmp    c001f939 <Vm::x87Handler(regs*)+0x1e8>
c001ffcf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ffd3:	84 d2                	test   dl,dl
c001ffd5:	75 2a                	jne    c0020001 <Vm::x87Handler(regs*)+0x8b0>
c001ffd7:	50                   	push   eax
c001ffd8:	50                   	push   eax
c001ffd9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ffdc:	ff 36                	push   DWORD PTR [esi]
c001ffde:	e8 c5 f3 ff ff       	call   c001f3a8 <Vm::fpu64ToInternal(unsigned long long)>
c001ffe3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffea:	89 c6                	mov    esi,eax
c001ffec:	89 d7                	mov    edi,edx
c001ffee:	e8 21 f6 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c001fff3:	57                   	push   edi
c001fff4:	56                   	push   esi
c001fff5:	52                   	push   edx
c001fff6:	50                   	push   eax
c001fff7:	e8 8e f5 ff ff       	call   c001f58a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fffc:	e9 64 01 00 00       	jmp    c0020165 <Vm::x87Handler(regs*)+0xa14>
c0020001:	80 fa 01             	cmp    dl,0x1
c0020004:	75 11                	jne    c0020017 <Vm::x87Handler(regs*)+0x8c6>
c0020006:	50                   	push   eax
c0020007:	50                   	push   eax
c0020008:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002000b:	ff 36                	push   DWORD PTR [esi]
c002000d:	e8 96 f3 ff ff       	call   c001f3a8 <Vm::fpu64ToInternal(unsigned long long)>
c0020012:	e9 35 01 00 00       	jmp    c002014c <Vm::x87Handler(regs*)+0x9fb>
c0020017:	80 fa 02             	cmp    dl,0x2
c002001a:	0f 85 54 f9 ff ff    	jne    c001f974 <Vm::x87Handler(regs*)+0x223>
c0020020:	55                   	push   ebp
c0020021:	55                   	push   ebp
c0020022:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020025:	ff 36                	push   DWORD PTR [esi]
c0020027:	e8 7c f3 ff ff       	call   c001f3a8 <Vm::fpu64ToInternal(unsigned long long)>
c002002c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020033:	89 c6                	mov    esi,eax
c0020035:	89 d7                	mov    edi,edx
c0020037:	e8 d8 f5 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c002003c:	57                   	push   edi
c002003d:	56                   	push   esi
c002003e:	52                   	push   edx
c002003f:	50                   	push   eax
c0020040:	e8 f2 f4 ff ff       	call   c001f537 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020049:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002004c:	83 c4 20             	add    esp,0x20
c002004f:	e9 74 f7 ff ff       	jmp    c001f7c8 <Vm::x87Handler(regs*)+0x77>
c0020054:	80 fa 04             	cmp    dl,0x4
c0020057:	75 2a                	jne    c0020083 <Vm::x87Handler(regs*)+0x932>
c0020059:	51                   	push   ecx
c002005a:	51                   	push   ecx
c002005b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002005e:	ff 36                	push   DWORD PTR [esi]
c0020060:	e8 43 f3 ff ff       	call   c001f3a8 <Vm::fpu64ToInternal(unsigned long long)>
c0020065:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002006c:	89 c6                	mov    esi,eax
c002006e:	89 d7                	mov    edi,edx
c0020070:	e8 9f f5 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c0020075:	57                   	push   edi
c0020076:	56                   	push   esi
c0020077:	52                   	push   edx
c0020078:	50                   	push   eax
c0020079:	e8 36 f5 ff ff       	call   c001f5b4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002007e:	e9 e2 00 00 00       	jmp    c0020165 <Vm::x87Handler(regs*)+0xa14>
c0020083:	80 fa 05             	cmp    dl,0x5
c0020086:	75 28                	jne    c00200b0 <Vm::x87Handler(regs*)+0x95f>
c0020088:	83 ec 0c             	sub    esp,0xc
c002008b:	6a 00                	push   0x0
c002008d:	e8 82 f5 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c0020092:	89 c7                	mov    edi,eax
c0020094:	89 d5                	mov    ebp,edx
c0020096:	58                   	pop    eax
c0020097:	5a                   	pop    edx
c0020098:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002009b:	ff 36                	push   DWORD PTR [esi]
c002009d:	e8 06 f3 ff ff       	call   c001f3a8 <Vm::fpu64ToInternal(unsigned long long)>
c00200a2:	83 c4 10             	add    esp,0x10
c00200a5:	55                   	push   ebp
c00200a6:	57                   	push   edi
c00200a7:	52                   	push   edx
c00200a8:	50                   	push   eax
c00200a9:	e8 06 f5 ff ff       	call   c001f5b4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200ae:	eb 60                	jmp    c0020110 <Vm::x87Handler(regs*)+0x9bf>
c00200b0:	80 fa 06             	cmp    dl,0x6
c00200b3:	75 2a                	jne    c00200df <Vm::x87Handler(regs*)+0x98e>
c00200b5:	51                   	push   ecx
c00200b6:	51                   	push   ecx
c00200b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00200ba:	ff 36                	push   DWORD PTR [esi]
c00200bc:	e8 e7 f2 ff ff       	call   c001f3a8 <Vm::fpu64ToInternal(unsigned long long)>
c00200c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200c8:	89 c6                	mov    esi,eax
c00200ca:	89 d7                	mov    edi,edx
c00200cc:	e8 43 f5 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c00200d1:	57                   	push   edi
c00200d2:	56                   	push   esi
c00200d3:	52                   	push   edx
c00200d4:	50                   	push   eax
c00200d5:	e8 08 f5 ff ff       	call   c001f5e2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200da:	e9 86 00 00 00       	jmp    c0020165 <Vm::x87Handler(regs*)+0xa14>
c00200df:	31 c0                	xor    eax,eax
c00200e1:	80 fa 07             	cmp    dl,0x7
c00200e4:	0f 85 c8 00 00 00    	jne    c00201b2 <Vm::x87Handler(regs*)+0xa61>
c00200ea:	83 ec 0c             	sub    esp,0xc
c00200ed:	6a 00                	push   0x0
c00200ef:	e8 20 f5 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c00200f4:	89 c7                	mov    edi,eax
c00200f6:	89 d5                	mov    ebp,edx
c00200f8:	58                   	pop    eax
c00200f9:	5a                   	pop    edx
c00200fa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00200fd:	ff 36                	push   DWORD PTR [esi]
c00200ff:	e8 a4 f2 ff ff       	call   c001f3a8 <Vm::fpu64ToInternal(unsigned long long)>
c0020104:	83 c4 10             	add    esp,0x10
c0020107:	55                   	push   ebp
c0020108:	57                   	push   edi
c0020109:	52                   	push   edx
c002010a:	50                   	push   eax
c002010b:	e8 d2 f4 ff ff       	call   c001f5e2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020110:	83 c4 0c             	add    esp,0xc
c0020113:	eb 53                	jmp    c0020168 <Vm::x87Handler(regs*)+0xa17>
c0020115:	31 c0                	xor    eax,eax
c0020117:	80 fa 02             	cmp    dl,0x2
c002011a:	0f 85 92 00 00 00    	jne    c00201b2 <Vm::x87Handler(regs*)+0xa61>
c0020120:	83 ec 0c             	sub    esp,0xc
c0020123:	6a 00                	push   0x0
c0020125:	e8 ea f4 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c002012a:	59                   	pop    ecx
c002012b:	5f                   	pop    edi
c002012c:	52                   	push   edx
c002012d:	50                   	push   eax
c002012e:	e8 27 f2 ff ff       	call   c001f35a <Vm::fpuInternalTo64(unsigned long long)>
c0020133:	eb 70                	jmp    c00201a5 <Vm::x87Handler(regs*)+0xa54>
c0020135:	31 c0                	xor    eax,eax
c0020137:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002013c:	75 74                	jne    c00201b2 <Vm::x87Handler(regs*)+0xa61>
c002013e:	50                   	push   eax
c002013f:	50                   	push   eax
c0020140:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020143:	31 d2                	xor    edx,edx
c0020145:	52                   	push   edx
c0020146:	50                   	push   eax
c0020147:	e8 f6 f2 ff ff       	call   c001f442 <Vm::fpuLongToFloat(long long)>
c002014c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020153:	89 c6                	mov    esi,eax
c0020155:	89 d7                	mov    edi,edx
c0020157:	e8 b8 f4 ff ff       	call   c001f614 <Vm::fpuGetReg(int)>
c002015c:	57                   	push   edi
c002015d:	56                   	push   esi
c002015e:	52                   	push   edx
c002015f:	50                   	push   eax
c0020160:	e8 5e f4 ff ff       	call   c001f5c3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020165:	83 c4 1c             	add    esp,0x1c
c0020168:	52                   	push   edx
c0020169:	50                   	push   eax
c002016a:	6a 00                	push   0x0
c002016c:	e8 e6 f4 ff ff       	call   c001f657 <Vm::fpuSetReg(int, unsigned long long)>
c0020171:	e9 f2 f7 ff ff       	jmp    c001f968 <Vm::x87Handler(regs*)+0x217>
c0020176:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002017a:	80 fa 05             	cmp    dl,0x5
c002017d:	75 11                	jne    c0020190 <Vm::x87Handler(regs*)+0xa3f>
c002017f:	55                   	push   ebp
c0020180:	55                   	push   ebp
c0020181:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020184:	ff 36                	push   DWORD PTR [esi]
c0020186:	e8 81 f2 ff ff       	call   c001f40c <Vm::fpuULongToFloat(unsigned long long)>
c002018b:	e9 cf f7 ff ff       	jmp    c001f95f <Vm::x87Handler(regs*)+0x20e>
c0020190:	31 c0                	xor    eax,eax
c0020192:	80 fa 07             	cmp    dl,0x7
c0020195:	75 1b                	jne    c00201b2 <Vm::x87Handler(regs*)+0xa61>
c0020197:	e8 63 f5 ff ff       	call   c001f6ff <Vm::fpuPop()>
c002019c:	51                   	push   ecx
c002019d:	51                   	push   ecx
c002019e:	52                   	push   edx
c002019f:	50                   	push   eax
c00201a0:	e8 0c f2 ff ff       	call   c001f3b1 <Vm::fpuFloatToLong(unsigned long long)>
c00201a5:	83 c4 10             	add    esp,0x10
c00201a8:	89 06                	mov    DWORD PTR [esi],eax
c00201aa:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00201ad:	e9 f8 f7 ff ff       	jmp    c001f9aa <Vm::x87Handler(regs*)+0x259>
c00201b2:	83 c4 1c             	add    esp,0x1c
c00201b5:	5b                   	pop    ebx
c00201b6:	5e                   	pop    esi
c00201b7:	5f                   	pop    edi
c00201b8:	5d                   	pop    ebp
c00201b9:	c3                   	ret    

c00201ba <__static_initialization_and_destruction_0(int, int)>:
c00201ba:	83 ec 0c             	sub    esp,0xc
c00201bd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00201c2:	75 1a                	jne    c00201de <__static_initialization_and_destruction_0(int, int)+0x24>
c00201c4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00201cc:	75 10                	jne    c00201de <__static_initialization_and_destruction_0(int, int)+0x24>
c00201ce:	83 ec 0c             	sub    esp,0xc
c00201d1:	68 20 f9 02 c0       	push   0xc002f920
c00201d6:	e8 4f 8e 00 00       	call   c002902a <Vm::_FPUState::_FPUState()>
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	90                   	nop
c00201df:	83 c4 0c             	add    esp,0xc
c00201e2:	c3                   	ret    

c00201e3 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00201e3:	83 ec 0c             	sub    esp,0xc
c00201e6:	83 ec 08             	sub    esp,0x8
c00201e9:	68 ff ff 00 00       	push   0xffff
c00201ee:	6a 01                	push   0x1
c00201f0:	e8 c5 ff ff ff       	call   c00201ba <__static_initialization_and_destruction_0(int, int)>
c00201f5:	83 c4 10             	add    esp,0x10
c00201f8:	83 c4 0c             	add    esp,0xc
c00201fb:	c3                   	ret    

c00201fc <FAT::getName()>:
c00201fc:	b8 04 c8 02 c0       	mov    eax,0xc002c804
c0020201:	c3                   	ret    

c0020202 <FAT::tell(void*, unsigned long long*)>:
c0020202:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020207:	75 06                	jne    c002020f <FAT::tell(void*, unsigned long long*)+0xd>
c0020209:	b8 04 00 00 00       	mov    eax,0x4
c002020e:	c3                   	ret    
c002020f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020214:	75 06                	jne    c002021c <FAT::tell(void*, unsigned long long*)+0x1a>
c0020216:	b8 04 00 00 00       	mov    eax,0x4
c002021b:	c3                   	ret    
c002021c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020220:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020223:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020226:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002022a:	89 01                	mov    DWORD PTR [ecx],eax
c002022c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002022f:	b8 00 00 00 00       	mov    eax,0x0
c0020234:	c3                   	ret    
c0020235:	90                   	nop

c0020236 <FAT::stat(void*, unsigned long long*)>:
c0020236:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002023b:	75 06                	jne    c0020243 <FAT::stat(void*, unsigned long long*)+0xd>
c002023d:	b8 04 00 00 00       	mov    eax,0x4
c0020242:	c3                   	ret    
c0020243:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020248:	75 06                	jne    c0020250 <FAT::stat(void*, unsigned long long*)+0x1a>
c002024a:	b8 04 00 00 00       	mov    eax,0x4
c002024f:	c3                   	ret    
c0020250:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020254:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020257:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002025a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002025e:	89 01                	mov    DWORD PTR [ecx],eax
c0020260:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020263:	b8 00 00 00 00       	mov    eax,0x0
c0020268:	c3                   	ret    
c0020269:	90                   	nop

c002026a <FAT::~FAT()>:
c002026a:	83 ec 0c             	sub    esp,0xc
c002026d:	ba 50 c8 02 c0       	mov    edx,0xc002c850
c0020272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020276:	89 10                	mov    DWORD PTR [eax],edx
c0020278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002027c:	83 ec 0c             	sub    esp,0xc
c002027f:	50                   	push   eax
c0020280:	e8 2b 29 ff ff       	call   c0012bb0 <Filesystem::~Filesystem()>
c0020285:	83 c4 10             	add    esp,0x10
c0020288:	90                   	nop
c0020289:	83 c4 0c             	add    esp,0xc
c002028c:	c3                   	ret    
c002028d:	90                   	nop

c002028e <FAT::~FAT()>:
c002028e:	83 ec 0c             	sub    esp,0xc
c0020291:	83 ec 0c             	sub    esp,0xc
c0020294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020298:	e8 cd ff ff ff       	call   c002026a <FAT::~FAT()>
c002029d:	83 c4 10             	add    esp,0x10
c00202a0:	83 ec 08             	sub    esp,0x8
c00202a3:	6a 08                	push   0x8
c00202a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a9:	e8 fb 24 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c00202ae:	83 c4 10             	add    esp,0x10
c00202b1:	83 c4 0c             	add    esp,0xc
c00202b4:	c3                   	ret    
c00202b5:	90                   	nop

c00202b6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00202b6:	83 ec 1c             	sub    esp,0x1c
c00202b9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00202c0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00202c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00202c9:	8b 04 85 a0 f9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0660]
c00202d0:	83 f8 ff             	cmp    eax,0xffffffff
c00202d3:	75 34                	jne    c0020309 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00202d5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00202d9:	88 c2                	mov    dl,al
c00202db:	a1 80 f9 02 c0       	mov    eax,ds:0xc002f980
c00202e0:	01 d0                	add    eax,edx
c00202e2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00202e6:	8b 15 80 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f980
c00202ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00202f0:	89 14 85 a0 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0660],edx
c00202f7:	a1 80 f9 02 c0       	mov    eax,ds:0xc002f980
c00202fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020300:	89 14 85 20 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05e0],edx
c0020307:	eb 17                	jmp    c0020320 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020309:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002030d:	88 c2                	mov    dl,al
c002030f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020313:	8b 04 85 a0 f9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0660]
c002031a:	01 d0                	add    eax,edx
c002031c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020320:	83 ec 04             	sub    esp,0x4
c0020323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002032b:	8d 44 24 15          	lea    eax,[esp+0x15]
c002032f:	50                   	push   eax
c0020330:	e8 c9 69 fe ff       	call   c0006cfe <f_getlabel>
c0020335:	83 c4 10             	add    esp,0x10
c0020338:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002033c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020341:	75 07                	jne    c002034a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020343:	b8 00 00 00 00       	mov    eax,0x0
c0020348:	eb 05                	jmp    c002034f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002034a:	b8 01 00 00 00       	mov    eax,0x1
c002034f:	83 c4 1c             	add    esp,0x1c
c0020352:	c3                   	ret    
c0020353:	90                   	nop

c0020354 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020354:	57                   	push   edi
c0020355:	83 ec 58             	sub    esp,0x58
c0020358:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020360:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020364:	b9 0f 00 00 00       	mov    ecx,0xf
c0020369:	b8 00 00 00 00       	mov    eax,0x0
c002036e:	fc                   	cld    
c002036f:	89 d7                	mov    edi,edx
c0020371:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020373:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020377:	8b 04 85 a0 f9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0660]
c002037e:	83 f8 ff             	cmp    eax,0xffffffff
c0020381:	75 34                	jne    c00203b7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020383:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020387:	88 c2                	mov    dl,al
c0020389:	a1 80 f9 02 c0       	mov    eax,ds:0xc002f980
c002038e:	01 d0                	add    eax,edx
c0020390:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020394:	8b 15 80 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f980
c002039a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002039e:	89 14 85 a0 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0660],edx
c00203a5:	a1 80 f9 02 c0       	mov    eax,ds:0xc002f980
c00203aa:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00203ae:	89 14 85 20 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05e0],edx
c00203b5:	eb 17                	jmp    c00203ce <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00203b7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00203bb:	88 c2                	mov    dl,al
c00203bd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00203c1:	8b 04 85 a0 f9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0660]
c00203c8:	01 d0                	add    eax,edx
c00203ca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00203ce:	83 ec 08             	sub    esp,0x8
c00203d1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00203d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00203d9:	50                   	push   eax
c00203da:	e8 6d 05 fe ff       	call   c000094c <strcat>
c00203df:	83 c4 10             	add    esp,0x10
c00203e2:	83 ec 0c             	sub    esp,0xc
c00203e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00203e9:	50                   	push   eax
c00203ea:	e8 fd 6a fe ff       	call   c0006eec <f_setlabel>
c00203ef:	83 c4 10             	add    esp,0x10
c00203f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00203f6:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00203fb:	75 07                	jne    c0020404 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00203fd:	b8 00 00 00 00       	mov    eax,0x0
c0020402:	eb 05                	jmp    c0020409 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020404:	b8 01 00 00 00       	mov    eax,0x1
c0020409:	83 c4 58             	add    esp,0x58
c002040c:	5f                   	pop    edi
c002040d:	c3                   	ret    

c002040e <FAT::format(LogicalDisk*, int, char const*, int)>:
c002040e:	83 ec 2c             	sub    esp,0x2c
c0020411:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020419:	83 ec 08             	sub    esp,0x8
c002041c:	68 28 c8 02 c0       	push   0xc002c828
c0020421:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020425:	e8 6e 04 fe ff       	call   c0000898 <strcmp>
c002042a:	83 c4 10             	add    esp,0x10
c002042d:	85 c0                	test   eax,eax
c002042f:	0f 94 c0             	sete   al
c0020432:	84 c0                	test   al,al
c0020434:	74 0d                	je     c0020443 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020436:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002043e:	e9 a6 00 00 00       	jmp    c00204e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020443:	83 ec 08             	sub    esp,0x8
c0020446:	68 1a c8 02 c0       	push   0xc002c81a
c002044b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002044f:	e8 44 04 fe ff       	call   c0000898 <strcmp>
c0020454:	83 c4 10             	add    esp,0x10
c0020457:	85 c0                	test   eax,eax
c0020459:	0f 94 c0             	sete   al
c002045c:	84 c0                	test   al,al
c002045e:	74 0a                	je     c002046a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020460:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020468:	eb 7f                	jmp    c00204e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002046a:	83 ec 08             	sub    esp,0x8
c002046d:	68 20 c8 02 c0       	push   0xc002c820
c0020472:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020476:	e8 1d 04 fe ff       	call   c0000898 <strcmp>
c002047b:	83 c4 10             	add    esp,0x10
c002047e:	85 c0                	test   eax,eax
c0020480:	0f 94 c0             	sete   al
c0020483:	84 c0                	test   al,al
c0020485:	74 0a                	je     c0020491 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020487:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002048f:	eb 58                	jmp    c00204e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020491:	83 ec 08             	sub    esp,0x8
c0020494:	68 8c 97 02 c0       	push   0xc002978c
c0020499:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002049d:	e8 f6 03 fe ff       	call   c0000898 <strcmp>
c00204a2:	83 c4 10             	add    esp,0x10
c00204a5:	85 c0                	test   eax,eax
c00204a7:	0f 94 c0             	sete   al
c00204aa:	84 c0                	test   al,al
c00204ac:	74 0a                	je     c00204b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00204ae:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00204b6:	eb 31                	jmp    c00204e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00204b8:	83 ec 08             	sub    esp,0x8
c00204bb:	68 26 c8 02 c0       	push   0xc002c826
c00204c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00204c4:	e8 cf 03 fe ff       	call   c0000898 <strcmp>
c00204c9:	83 c4 10             	add    esp,0x10
c00204cc:	85 c0                	test   eax,eax
c00204ce:	0f 94 c0             	sete   al
c00204d1:	84 c0                	test   al,al
c00204d3:	74 0a                	je     c00204df <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00204d5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00204dd:	eb 0a                	jmp    c00204e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00204df:	b8 08 00 00 00       	mov    eax,0x8
c00204e4:	e9 df 00 00 00       	jmp    c00205c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00204e9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00204f0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00204f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00204f9:	8b 04 85 a0 f9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0660]
c0020500:	83 f8 ff             	cmp    eax,0xffffffff
c0020503:	75 34                	jne    c0020539 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020505:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020509:	88 c2                	mov    dl,al
c002050b:	a1 80 f9 02 c0       	mov    eax,ds:0xc002f980
c0020510:	01 d0                	add    eax,edx
c0020512:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020516:	8b 15 80 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f980
c002051c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020520:	89 14 85 a0 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0660],edx
c0020527:	a1 80 f9 02 c0       	mov    eax,ds:0xc002f980
c002052c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020530:	89 14 85 20 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05e0],edx
c0020537:	eb 17                	jmp    c0020550 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020539:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002053d:	88 c2                	mov    dl,al
c002053f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020543:	8b 04 85 a0 f9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0660]
c002054a:	01 d0                	add    eax,edx
c002054c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020550:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020554:	88 04 24             	mov    BYTE PTR [esp],al
c0020557:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002055b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002055f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020567:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002056c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020574:	83 ec 0c             	sub    esp,0xc
c0020577:	68 00 20 00 00       	push   0x2000
c002057c:	e8 a8 f2 fe ff       	call   c000f829 <malloc>
c0020581:	83 c4 10             	add    esp,0x10
c0020584:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020588:	68 00 20 00 00       	push   0x2000
c002058d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020591:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020595:	50                   	push   eax
c0020596:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002059a:	50                   	push   eax
c002059b:	e8 cd 6f fe ff       	call   c000756d <f_mkfs>
c00205a0:	83 c4 10             	add    esp,0x10
c00205a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00205a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00205ac:	75 07                	jne    c00205b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00205ae:	b8 00 00 00 00       	mov    eax,0x0
c00205b3:	eb 13                	jmp    c00205c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00205b5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00205ba:	75 07                	jne    c00205c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00205bc:	b8 09 00 00 00       	mov    eax,0x9
c00205c1:	eb 05                	jmp    c00205c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00205c3:	b8 01 00 00 00       	mov    eax,0x1
c00205c8:	83 c4 2c             	add    esp,0x2c
c00205cb:	c3                   	ret    

c00205cc <FAT::tryMount(LogicalDisk*, int)>:
c00205cc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00205d2:	a1 80 f9 02 c0       	mov    eax,ds:0xc002f980
c00205d7:	83 f8 14             	cmp    eax,0x14
c00205da:	75 17                	jne    c00205f3 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00205dc:	83 ec 0c             	sub    esp,0xc
c00205df:	68 2c c8 02 c0       	push   0xc002c82c
c00205e4:	e8 06 9c ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c00205e9:	83 c4 10             	add    esp,0x10
c00205ec:	b0 00                	mov    al,0x0
c00205ee:	e9 d7 01 00 00       	jmp    c00207ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00205f3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00205fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020600:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020606:	3d 00 02 00 00       	cmp    eax,0x200
c002060b:	74 07                	je     c0020614 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002060d:	b0 00                	mov    al,0x0
c002060f:	e9 b6 01 00 00       	jmp    c00207ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020614:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002061c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020623:	8b 04 85 a0 f9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0660]
c002062a:	83 f8 ff             	cmp    eax,0xffffffff
c002062d:	74 07                	je     c0020636 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002062f:	b0 01                	mov    al,0x1
c0020631:	e9 94 01 00 00       	jmp    c00207ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020636:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020640:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020648:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002064f:	88 c2                	mov    dl,al
c0020651:	a1 80 f9 02 c0       	mov    eax,ds:0xc002f980
c0020656:	01 d0                	add    eax,edx
c0020658:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002065f:	8b 15 80 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f980
c0020665:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002066c:	89 14 85 a0 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0660],edx
c0020673:	a1 80 f9 02 c0       	mov    eax,ds:0xc002f980
c0020678:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002067f:	89 14 85 20 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05e0],edx
c0020686:	83 ec 0c             	sub    esp,0xc
c0020689:	68 54 02 00 00       	push   0x254
c002068e:	e8 96 f1 fe ff       	call   c000f829 <malloc>
c0020693:	83 c4 10             	add    esp,0x10
c0020696:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002069d:	83 ec 04             	sub    esp,0x4
c00206a0:	6a 00                	push   0x0
c00206a2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00206a9:	50                   	push   eax
c00206aa:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00206b1:	e8 3f 48 fe ff       	call   c0004ef5 <f_mount>
c00206b6:	83 c4 10             	add    esp,0x10
c00206b9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00206c0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00206c8:	74 19                	je     c00206e3 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00206ca:	83 ec 0c             	sub    esp,0xc
c00206cd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00206d4:	e8 70 f1 fe ff       	call   c000f849 <rfree>
c00206d9:	83 c4 10             	add    esp,0x10
c00206dc:	b0 00                	mov    al,0x0
c00206de:	e9 e7 00 00 00       	jmp    c00207ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00206e3:	83 ec 04             	sub    esp,0x4
c00206e6:	68 00 01 00 00       	push   0x100
c00206eb:	6a 00                	push   0x0
c00206ed:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00206f4:	50                   	push   eax
c00206f5:	e8 56 00 fe ff       	call   c0000750 <memset>
c00206fa:	83 c4 10             	add    esp,0x10
c00206fd:	83 ec 08             	sub    esp,0x8
c0020700:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020707:	50                   	push   eax
c0020708:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002070f:	50                   	push   eax
c0020710:	e8 37 02 fe ff       	call   c000094c <strcat>
c0020715:	83 c4 10             	add    esp,0x10
c0020718:	83 ec 08             	sub    esp,0x8
c002071b:	68 3a c8 02 c0       	push   0xc002c83a
c0020720:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020727:	50                   	push   eax
c0020728:	e8 1f 02 fe ff       	call   c000094c <strcat>
c002072d:	83 c4 10             	add    esp,0x10
c0020730:	83 ec 04             	sub    esp,0x4
c0020733:	6a 01                	push   0x1
c0020735:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002073c:	50                   	push   eax
c002073d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020741:	50                   	push   eax
c0020742:	e8 10 48 fe ff       	call   c0004f57 <f_open>
c0020747:	83 c4 10             	add    esp,0x10
c002074a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020751:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020758:	85 c0                	test   eax,eax
c002075a:	74 0a                	je     c0020766 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002075c:	78 2d                	js     c002078b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002075e:	83 e8 04             	sub    eax,0x4
c0020761:	83 f8 01             	cmp    eax,0x1
c0020764:	77 25                	ja     c002078b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020766:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002076e:	83 ec 0c             	sub    esp,0xc
c0020771:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020775:	50                   	push   eax
c0020776:	e8 2e 53 fe ff       	call   c0005aa9 <f_close>
c002077b:	83 c4 10             	add    esp,0x10
c002077e:	90                   	nop
c002077f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020787:	74 3a                	je     c00207c3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020789:	eb 2d                	jmp    c00207b8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002078b:	83 ec 0c             	sub    esp,0xc
c002078e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020795:	e8 af f0 fe ff       	call   c000f849 <rfree>
c002079a:	83 c4 10             	add    esp,0x10
c002079d:	83 ec 04             	sub    esp,0x4
c00207a0:	6a 00                	push   0x0
c00207a2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00207a9:	50                   	push   eax
c00207aa:	6a 00                	push   0x0
c00207ac:	e8 44 47 fe ff       	call   c0004ef5 <f_mount>
c00207b1:	83 c4 10             	add    esp,0x10
c00207b4:	b0 00                	mov    al,0x0
c00207b6:	eb 12                	jmp    c00207ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207b8:	a1 80 f9 02 c0       	mov    eax,ds:0xc002f980
c00207bd:	40                   	inc    eax
c00207be:	a3 80 f9 02 c0       	mov    ds:0xc002f980,eax
c00207c3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00207ca:	81 c4 6c 03 00 00    	add    esp,0x36c
c00207d0:	c3                   	ret    
c00207d1:	90                   	nop

c00207d2 <FAT::allocateSwapfile(char const*, int)>:
c00207d2:	53                   	push   ebx
c00207d3:	81 ec 28 04 00 00    	sub    esp,0x428
c00207d9:	c7 84 24 10 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x410],0x114
c00207e4:	83 ec 0c             	sub    esp,0xc
c00207e7:	ff b4 24 1c 04 00 00 	push   DWORD PTR [esp+0x41c]
c00207ee:	e8 36 f0 fe ff       	call   c000f829 <malloc>
c00207f3:	83 c4 10             	add    esp,0x10
c00207f6:	89 c3                	mov    ebx,eax
c00207f8:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c00207fd:	83 ec 04             	sub    esp,0x4
c0020800:	50                   	push   eax
c0020801:	ff b4 24 3c 04 00 00 	push   DWORD PTR [esp+0x43c]
c0020808:	53                   	push   ebx
c0020809:	e8 d2 25 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c002080e:	83 c4 10             	add    esp,0x10
c0020811:	89 9c 24 1c 04 00 00 	mov    DWORD PTR [esp+0x41c],ebx
c0020818:	83 ec 0c             	sub    esp,0xc
c002081b:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020822:	e8 95 27 ff ff       	call   c0012fbc <File::unlink()>
c0020827:	83 c4 10             	add    esp,0x10
c002082a:	83 ec 08             	sub    esp,0x8
c002082d:	6a 12                	push   0x12
c002082f:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020836:	e8 09 26 ff ff       	call   c0012e44 <File::open(FileOpenMode)>
c002083b:	83 c4 10             	add    esp,0x10
c002083e:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020845:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002084b:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020852:	8b 84 24 38 04 00 00 	mov    eax,DWORD PTR [esp+0x438]
c0020859:	c1 e0 14             	shl    eax,0x14
c002085c:	99                   	cdq    
c002085d:	6a 01                	push   0x1
c002085f:	52                   	push   edx
c0020860:	50                   	push   eax
c0020861:	ff b4 24 24 04 00 00 	push   DWORD PTR [esp+0x424]
c0020868:	e8 ec 68 fe ff       	call   c0007159 <f_expand>
c002086d:	83 c4 10             	add    esp,0x10
c0020870:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020877:	8b 00                	mov    eax,DWORD PTR [eax]
c0020879:	83 c0 10             	add    eax,0x10
c002087c:	8b 00                	mov    eax,DWORD PTR [eax]
c002087e:	83 ec 0c             	sub    esp,0xc
c0020881:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020885:	52                   	push   edx
c0020886:	8d 54 24 20          	lea    edx,[esp+0x20]
c002088a:	52                   	push   edx
c002088b:	6a 00                	push   0x0
c002088d:	68 00 04 00 00       	push   0x400
c0020892:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020899:	ff d0                	call   eax
c002089b:	83 c4 20             	add    esp,0x20
c002089e:	83 ec 0c             	sub    esp,0xc
c00208a1:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c00208a8:	e8 f5 25 ff ff       	call   c0012ea2 <File::close()>
c00208ad:	83 c4 10             	add    esp,0x10
c00208b0:	83 ec 08             	sub    esp,0x8
c00208b3:	6a 01                	push   0x1
c00208b5:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c00208bc:	e8 83 25 ff ff       	call   c0012e44 <File::open(FileOpenMode)>
c00208c1:	83 c4 10             	add    esp,0x10
c00208c4:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00208cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00208cd:	83 c0 0c             	add    eax,0xc
c00208d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00208d2:	83 ec 0c             	sub    esp,0xc
c00208d5:	8d 54 24 14          	lea    edx,[esp+0x14]
c00208d9:	52                   	push   edx
c00208da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00208de:	52                   	push   edx
c00208df:	6a 00                	push   0x0
c00208e1:	6a 04                	push   0x4
c00208e3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00208ea:	ff d0                	call   eax
c00208ec:	83 c4 20             	add    esp,0x20
c00208ef:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00208f6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00208fc:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020903:	8b 84 24 18 04 00 00 	mov    eax,DWORD PTR [esp+0x418]
c002090a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002090d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020910:	89 84 24 14 04 00 00 	mov    DWORD PTR [esp+0x414],eax
c0020917:	83 ec 0c             	sub    esp,0xc
c002091a:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020921:	e8 7c 25 ff ff       	call   c0012ea2 <File::close()>
c0020926:	83 c4 10             	add    esp,0x10
c0020929:	8b 84 24 14 04 00 00 	mov    eax,DWORD PTR [esp+0x414]
c0020930:	ba 00 00 00 00       	mov    edx,0x0
c0020935:	81 c4 28 04 00 00    	add    esp,0x428
c002093b:	5b                   	pop    ebx
c002093c:	c3                   	ret    
c002093d:	90                   	nop

c002093e <FAT::readDir(void*, unsigned long, void*, int*)>:
c002093e:	57                   	push   edi
c002093f:	56                   	push   esi
c0020940:	53                   	push   ebx
c0020941:	81 ec 50 02 00 00    	sub    esp,0x250
c0020947:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002094f:	74 0a                	je     c002095b <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020951:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020959:	75 0a                	jne    c0020965 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c002095b:	b8 04 00 00 00       	mov    eax,0x4
c0020960:	e9 29 01 00 00       	jmp    c0020a8e <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020965:	83 ec 08             	sub    esp,0x8
c0020968:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002096f:	50                   	push   eax
c0020970:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020977:	e8 37 57 fe ff       	call   c00060b3 <f_readdir>
c002097c:	83 c4 10             	add    esp,0x10
c002097f:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020986:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c002098d:	83 ec 0c             	sub    esp,0xc
c0020990:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020997:	83 c0 1a             	add    eax,0x1a
c002099a:	50                   	push   eax
c002099b:	e8 cc fd fd ff       	call   c000076c <strlen>
c00209a0:	83 c4 10             	add    esp,0x10
c00209a3:	ba 00 00 00 00       	mov    edx,0x0
c00209a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00209b0:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00209b7:	0f b6 c0             	movzx  eax,al
c00209ba:	83 e0 10             	and    eax,0x10
c00209bd:	74 07                	je     c00209c6 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00209bf:	b8 02 00 00 00       	mov    eax,0x2
c00209c4:	eb 05                	jmp    c00209cb <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c00209c6:	b8 01 00 00 00       	mov    eax,0x1
c00209cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00209cf:	83 ec 08             	sub    esp,0x8
c00209d2:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00209d9:	83 c0 1a             	add    eax,0x1a
c00209dc:	50                   	push   eax
c00209dd:	8d 44 24 10          	lea    eax,[esp+0x10]
c00209e1:	83 c0 10             	add    eax,0x10
c00209e4:	50                   	push   eax
c00209e5:	e8 22 fe fd ff       	call   c000080c <strcpy>
c00209ea:	83 c4 10             	add    esp,0x10
c00209ed:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00209f4:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00209fb:	8d 44 24 04          	lea    eax,[esp+0x4]
c00209ff:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020a06:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020a0d:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020a14:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020a1b:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020a22:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020a29:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020a30:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020a37:	89 c6                	mov    esi,eax
c0020a39:	89 d7                	mov    edi,edx
c0020a3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a3d:	89 c8                	mov    eax,ecx
c0020a3f:	89 fa                	mov    edx,edi
c0020a41:	89 f3                	mov    ebx,esi
c0020a43:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020a4a:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020a51:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020a58:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020a5f:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020a65:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020a6c:	84 c0                	test   al,al
c0020a6e:	75 07                	jne    c0020a77 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020a70:	b8 07 00 00 00       	mov    eax,0x7
c0020a75:	eb 17                	jmp    c0020a8e <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020a77:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020a7e:	85 c0                	test   eax,eax
c0020a80:	75 07                	jne    c0020a89 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020a82:	b8 00 00 00 00       	mov    eax,0x0
c0020a87:	eb 05                	jmp    c0020a8e <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020a89:	b8 01 00 00 00       	mov    eax,0x1
c0020a8e:	81 c4 50 02 00 00    	add    esp,0x250
c0020a94:	5b                   	pop    ebx
c0020a95:	5e                   	pop    esi
c0020a96:	5f                   	pop    edi
c0020a97:	c3                   	ret    

c0020a98 <FAT::read(void*, unsigned long, void*, int*)>:
c0020a98:	83 ec 1c             	sub    esp,0x1c
c0020a9b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020aa0:	74 07                	je     c0020aa9 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020aa2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020aa7:	75 07                	jne    c0020ab0 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020aa9:	b8 04 00 00 00       	mov    eax,0x4
c0020aae:	eb 3d                	jmp    c0020aed <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020ab0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ab4:	50                   	push   eax
c0020ab5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020ab9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020abd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ac1:	e8 cd 48 fe ff       	call   c0005393 <f_read>
c0020ac6:	83 c4 10             	add    esp,0x10
c0020ac9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020acd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ad1:	89 c2                	mov    edx,eax
c0020ad3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ad7:	89 10                	mov    DWORD PTR [eax],edx
c0020ad9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020add:	85 c0                	test   eax,eax
c0020adf:	75 07                	jne    c0020ae8 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020ae1:	b8 00 00 00 00       	mov    eax,0x0
c0020ae6:	eb 05                	jmp    c0020aed <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020ae8:	b8 01 00 00 00       	mov    eax,0x1
c0020aed:	83 c4 1c             	add    esp,0x1c
c0020af0:	c3                   	ret    
c0020af1:	90                   	nop

c0020af2 <FAT::write(void*, unsigned long, void*, int*)>:
c0020af2:	83 ec 1c             	sub    esp,0x1c
c0020af5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020afa:	74 07                	je     c0020b03 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020afc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b01:	75 07                	jne    c0020b0a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020b03:	b8 04 00 00 00       	mov    eax,0x4
c0020b08:	eb 3d                	jmp    c0020b47 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b0a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b0e:	50                   	push   eax
c0020b0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b1b:	e8 f3 4a fe ff       	call   c0005613 <f_write>
c0020b20:	83 c4 10             	add    esp,0x10
c0020b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b2b:	89 c2                	mov    edx,eax
c0020b2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b31:	89 10                	mov    DWORD PTR [eax],edx
c0020b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b37:	85 c0                	test   eax,eax
c0020b39:	75 07                	jne    c0020b42 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020b3b:	b8 00 00 00 00       	mov    eax,0x0
c0020b40:	eb 05                	jmp    c0020b47 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b42:	b8 01 00 00 00       	mov    eax,0x1
c0020b47:	83 c4 1c             	add    esp,0x1c
c0020b4a:	c3                   	ret    
c0020b4b:	90                   	nop

c0020b4c <FAT::close(void*)>:
c0020b4c:	83 ec 1c             	sub    esp,0x1c
c0020b4f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b54:	75 07                	jne    c0020b5d <FAT::close(void*)+0x11>
c0020b56:	b8 04 00 00 00       	mov    eax,0x4
c0020b5b:	eb 36                	jmp    c0020b93 <FAT::close(void*)+0x47>
c0020b5d:	83 ec 0c             	sub    esp,0xc
c0020b60:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b64:	e8 40 4f fe ff       	call   c0005aa9 <f_close>
c0020b69:	83 c4 10             	add    esp,0x10
c0020b6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b70:	83 ec 0c             	sub    esp,0xc
c0020b73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b77:	e8 bd ec fe ff       	call   c000f839 <free>
c0020b7c:	83 c4 10             	add    esp,0x10
c0020b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b83:	85 c0                	test   eax,eax
c0020b85:	75 07                	jne    c0020b8e <FAT::close(void*)+0x42>
c0020b87:	b8 00 00 00 00       	mov    eax,0x0
c0020b8c:	eb 05                	jmp    c0020b93 <FAT::close(void*)+0x47>
c0020b8e:	b8 01 00 00 00       	mov    eax,0x1
c0020b93:	83 c4 1c             	add    esp,0x1c
c0020b96:	c3                   	ret    
c0020b97:	90                   	nop

c0020b98 <FAT::closeDir(void*)>:
c0020b98:	83 ec 1c             	sub    esp,0x1c
c0020b9b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ba0:	75 07                	jne    c0020ba9 <FAT::closeDir(void*)+0x11>
c0020ba2:	b8 04 00 00 00       	mov    eax,0x4
c0020ba7:	eb 36                	jmp    c0020bdf <FAT::closeDir(void*)+0x47>
c0020ba9:	83 ec 0c             	sub    esp,0xc
c0020bac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bb0:	e8 dc 54 fe ff       	call   c0006091 <f_closedir>
c0020bb5:	83 c4 10             	add    esp,0x10
c0020bb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bbc:	83 ec 0c             	sub    esp,0xc
c0020bbf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bc3:	e8 71 ec fe ff       	call   c000f839 <free>
c0020bc8:	83 c4 10             	add    esp,0x10
c0020bcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bcf:	85 c0                	test   eax,eax
c0020bd1:	75 07                	jne    c0020bda <FAT::closeDir(void*)+0x42>
c0020bd3:	b8 00 00 00 00       	mov    eax,0x0
c0020bd8:	eb 05                	jmp    c0020bdf <FAT::closeDir(void*)+0x47>
c0020bda:	b8 01 00 00 00       	mov    eax,0x1
c0020bdf:	83 c4 1c             	add    esp,0x1c
c0020be2:	c3                   	ret    
c0020be3:	90                   	nop

c0020be4 <FAT::seek(void*, unsigned long long)>:
c0020be4:	83 ec 2c             	sub    esp,0x2c
c0020be7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020bef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020bf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bf7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020bfc:	75 07                	jne    c0020c05 <FAT::seek(void*, unsigned long long)+0x21>
c0020bfe:	b8 04 00 00 00       	mov    eax,0x4
c0020c03:	eb 2f                	jmp    c0020c34 <FAT::seek(void*, unsigned long long)+0x50>
c0020c05:	83 ec 04             	sub    esp,0x4
c0020c08:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c0c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c10:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020c14:	e8 bf 4e fe ff       	call   c0005ad8 <f_lseek>
c0020c19:	83 c4 10             	add    esp,0x10
c0020c1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c24:	85 c0                	test   eax,eax
c0020c26:	75 07                	jne    c0020c2f <FAT::seek(void*, unsigned long long)+0x4b>
c0020c28:	b8 00 00 00 00       	mov    eax,0x0
c0020c2d:	eb 05                	jmp    c0020c34 <FAT::seek(void*, unsigned long long)+0x50>
c0020c2f:	b8 01 00 00 00       	mov    eax,0x1
c0020c34:	83 c4 2c             	add    esp,0x2c
c0020c37:	c3                   	ret    

c0020c38 <fatWrapperReadDisk>:
c0020c38:	83 ec 1c             	sub    esp,0x1c
c0020c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c3f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020c43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c47:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020c4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c52:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c57:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c0020c5e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020c62:	83 ec 0c             	sub    esp,0xc
c0020c65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c69:	52                   	push   edx
c0020c6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c72:	50                   	push   eax
c0020c73:	e8 64 55 ff ff       	call   c00161dc <LogicalDisk::read(unsigned long long, int, void*)>
c0020c78:	83 c4 20             	add    esp,0x20
c0020c7b:	83 c4 1c             	add    esp,0x1c
c0020c7e:	c3                   	ret    

c0020c7f <fatWrapperWriteDisk>:
c0020c7f:	83 ec 1c             	sub    esp,0x1c
c0020c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c86:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020c8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020c95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c99:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c9e:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c0020ca5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ca9:	83 ec 0c             	sub    esp,0xc
c0020cac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cb0:	52                   	push   edx
c0020cb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cb9:	50                   	push   eax
c0020cba:	e8 89 55 ff ff       	call   c0016248 <LogicalDisk::write(unsigned long long, int, void*)>
c0020cbf:	83 c4 20             	add    esp,0x20
c0020cc2:	83 c4 1c             	add    esp,0x1c
c0020cc5:	c3                   	ret    

c0020cc6 <fatWrapperIoctl>:
c0020cc6:	53                   	push   ebx
c0020cc7:	83 ec 28             	sub    esp,0x28
c0020cca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020cce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020cd2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020cd6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020cda:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020cdf:	75 31                	jne    c0020d12 <fatWrapperIoctl+0x4c>
c0020ce1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ce5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ce9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cee:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c0020cf5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020cfb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020d01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d05:	66 89 02             	mov    WORD PTR [edx],ax
c0020d08:	b8 00 00 00 00       	mov    eax,0x0
c0020d0d:	e9 b2 00 00 00       	jmp    c0020dc4 <fatWrapperIoctl+0xfe>
c0020d12:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020d17:	75 6a                	jne    c0020d83 <fatWrapperIoctl+0xbd>
c0020d19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d21:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d26:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c0020d2d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d33:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020d39:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020d3f:	89 c8                	mov    eax,ecx
c0020d41:	89 da                	mov    edx,ebx
c0020d43:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020d47:	c1 e0 0a             	shl    eax,0xa
c0020d4a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020d4f:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c0020d56:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020d5c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020d62:	89 cb                	mov    ebx,ecx
c0020d64:	c1 fb 1f             	sar    ebx,0x1f
c0020d67:	53                   	push   ebx
c0020d68:	51                   	push   ecx
c0020d69:	52                   	push   edx
c0020d6a:	50                   	push   eax
c0020d6b:	e8 b4 5e 00 00       	call   c0026c24 <__udivdi3>
c0020d70:	83 c4 10             	add    esp,0x10
c0020d73:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020d77:	89 01                	mov    DWORD PTR [ecx],eax
c0020d79:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020d7c:	b8 00 00 00 00       	mov    eax,0x0
c0020d81:	eb 41                	jmp    c0020dc4 <fatWrapperIoctl+0xfe>
c0020d83:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020d88:	75 07                	jne    c0020d91 <fatWrapperIoctl+0xcb>
c0020d8a:	b8 00 00 00 00       	mov    eax,0x0
c0020d8f:	eb 33                	jmp    c0020dc4 <fatWrapperIoctl+0xfe>
c0020d91:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020d96:	75 19                	jne    c0020db1 <fatWrapperIoctl+0xeb>
c0020d98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020da0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020da4:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020daa:	b8 00 00 00 00       	mov    eax,0x0
c0020daf:	eb 13                	jmp    c0020dc4 <fatWrapperIoctl+0xfe>
c0020db1:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020db6:	75 07                	jne    c0020dbf <fatWrapperIoctl+0xf9>
c0020db8:	b8 00 00 00 00       	mov    eax,0x0
c0020dbd:	eb 05                	jmp    c0020dc4 <fatWrapperIoctl+0xfe>
c0020dbf:	b8 04 00 00 00       	mov    eax,0x4
c0020dc4:	83 c4 28             	add    esp,0x28
c0020dc7:	5b                   	pop    ebx
c0020dc8:	c3                   	ret    
c0020dc9:	90                   	nop

c0020dca <FAT::FAT()>:
c0020dca:	83 ec 1c             	sub    esp,0x1c
c0020dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dd1:	83 ec 0c             	sub    esp,0xc
c0020dd4:	50                   	push   eax
c0020dd5:	e8 b2 1d ff ff       	call   c0012b8c <Filesystem::Filesystem()>
c0020dda:	83 c4 10             	add    esp,0x10
c0020ddd:	ba 50 c8 02 c0       	mov    edx,0xc002c850
c0020de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020de6:	89 10                	mov    DWORD PTR [eax],edx
c0020de8:	c7 05 80 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f980,0x0
c0020df2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020dfa:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020dff:	7f 15                	jg     c0020e16 <FAT::FAT()+0x4c>
c0020e01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e05:	c7 04 85 a0 f9 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0660],0xffffffff
c0020e10:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020e14:	eb e4                	jmp    c0020dfa <FAT::FAT()+0x30>
c0020e16:	90                   	nop
c0020e17:	83 c4 1c             	add    esp,0x1c
c0020e1a:	c3                   	ret    
c0020e1b:	90                   	nop

c0020e1c <FAT::fixFilepath(char*)>:
c0020e1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e20:	8a 00                	mov    al,BYTE PTR [eax]
c0020e22:	3c 40                	cmp    al,0x40
c0020e24:	7e 2c                	jle    c0020e52 <FAT::fixFilepath(char*)+0x36>
c0020e26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e2a:	8a 00                	mov    al,BYTE PTR [eax]
c0020e2c:	83 e8 41             	sub    eax,0x41
c0020e2f:	88 c2                	mov    dl,al
c0020e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e35:	88 10                	mov    BYTE PTR [eax],dl
c0020e37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e3b:	8a 00                	mov    al,BYTE PTR [eax]
c0020e3d:	0f be c0             	movsx  eax,al
c0020e40:	8b 04 85 a0 f9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0660]
c0020e47:	83 c0 30             	add    eax,0x30
c0020e4a:	88 c2                	mov    dl,al
c0020e4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e50:	88 10                	mov    BYTE PTR [eax],dl
c0020e52:	90                   	nop
c0020e53:	c3                   	ret    

c0020e54 <FAT::open(char const*, void**, FileOpenMode)>:
c0020e54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e5a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e62:	74 0a                	je     c0020e6e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020e64:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020e6c:	75 0a                	jne    c0020e78 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020e6e:	b8 04 00 00 00       	mov    eax,0x4
c0020e73:	e9 fd 00 00 00       	jmp    c0020f75 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020e78:	83 ec 08             	sub    esp,0x8
c0020e7b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e82:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e86:	50                   	push   eax
c0020e87:	e8 80 f9 fd ff       	call   c000080c <strcpy>
c0020e8c:	83 c4 10             	add    esp,0x10
c0020e8f:	83 ec 08             	sub    esp,0x8
c0020e92:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020e96:	50                   	push   eax
c0020e97:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e9e:	e8 79 ff ff ff       	call   c0020e1c <FAT::fixFilepath(char*)>
c0020ea3:	83 c4 10             	add    esp,0x10
c0020ea6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020eae:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020eb5:	83 e0 01             	and    eax,0x1
c0020eb8:	74 08                	je     c0020ec2 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020eba:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020ec2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ec9:	83 e0 04             	and    eax,0x4
c0020ecc:	74 10                	je     c0020ede <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020ece:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020ed6:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020ede:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ee5:	83 e0 02             	and    eax,0x2
c0020ee8:	74 08                	je     c0020ef2 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020eea:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020ef2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ef9:	83 e0 08             	and    eax,0x8
c0020efc:	74 08                	je     c0020f06 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020efe:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020f06:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f0d:	83 e0 10             	and    eax,0x10
c0020f10:	74 08                	je     c0020f1a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020f12:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020f1a:	83 ec 0c             	sub    esp,0xc
c0020f1d:	68 50 02 00 00       	push   0x250
c0020f22:	e8 02 e9 fe ff       	call   c000f829 <malloc>
c0020f27:	83 c4 10             	add    esp,0x10
c0020f2a:	89 c2                	mov    edx,eax
c0020f2c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f33:	89 10                	mov    DWORD PTR [eax],edx
c0020f35:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020f3d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f44:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f46:	83 ec 04             	sub    esp,0x4
c0020f49:	52                   	push   edx
c0020f4a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020f4e:	52                   	push   edx
c0020f4f:	50                   	push   eax
c0020f50:	e8 02 40 fe ff       	call   c0004f57 <f_open>
c0020f55:	83 c4 10             	add    esp,0x10
c0020f58:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020f5f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020f67:	74 07                	je     c0020f70 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020f69:	b8 01 00 00 00       	mov    eax,0x1
c0020f6e:	eb 05                	jmp    c0020f75 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020f70:	b8 00 00 00 00       	mov    eax,0x0
c0020f75:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f7b:	c3                   	ret    

c0020f7c <FAT::openDir(char const*, void**)>:
c0020f7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f82:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f8a:	74 0a                	je     c0020f96 <FAT::openDir(char const*, void**)+0x1a>
c0020f8c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020f94:	75 07                	jne    c0020f9d <FAT::openDir(char const*, void**)+0x21>
c0020f96:	b8 04 00 00 00       	mov    eax,0x4
c0020f9b:	eb 7d                	jmp    c002101a <FAT::openDir(char const*, void**)+0x9e>
c0020f9d:	83 ec 08             	sub    esp,0x8
c0020fa0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fa7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fab:	50                   	push   eax
c0020fac:	e8 5b f8 fd ff       	call   c000080c <strcpy>
c0020fb1:	83 c4 10             	add    esp,0x10
c0020fb4:	83 ec 08             	sub    esp,0x8
c0020fb7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fbb:	50                   	push   eax
c0020fbc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fc3:	e8 54 fe ff ff       	call   c0020e1c <FAT::fixFilepath(char*)>
c0020fc8:	83 c4 10             	add    esp,0x10
c0020fcb:	83 ec 0c             	sub    esp,0xc
c0020fce:	6a 4c                	push   0x4c
c0020fd0:	e8 54 e8 fe ff       	call   c000f829 <malloc>
c0020fd5:	83 c4 10             	add    esp,0x10
c0020fd8:	89 c2                	mov    edx,eax
c0020fda:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020fe1:	89 10                	mov    DWORD PTR [eax],edx
c0020fe3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020fea:	8b 00                	mov    eax,DWORD PTR [eax]
c0020fec:	83 ec 08             	sub    esp,0x8
c0020fef:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020ff3:	52                   	push   edx
c0020ff4:	50                   	push   eax
c0020ff5:	e8 95 4f fe ff       	call   c0005f8f <f_opendir>
c0020ffa:	83 c4 10             	add    esp,0x10
c0020ffd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021004:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002100c:	74 07                	je     c0021015 <FAT::openDir(char const*, void**)+0x99>
c002100e:	b8 01 00 00 00       	mov    eax,0x1
c0021013:	eb 05                	jmp    c002101a <FAT::openDir(char const*, void**)+0x9e>
c0021015:	b8 00 00 00 00       	mov    eax,0x0
c002101a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021020:	c3                   	ret    
c0021021:	90                   	nop

c0021022 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021022:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021028:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021030:	75 0a                	jne    c002103c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021032:	b8 04 00 00 00       	mov    eax,0x4
c0021037:	e9 c9 00 00 00       	jmp    c0021105 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002103c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021044:	75 0a                	jne    c0021050 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021046:	b8 04 00 00 00       	mov    eax,0x4
c002104b:	e9 b5 00 00 00       	jmp    c0021105 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021050:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021058:	75 0a                	jne    c0021064 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002105a:	b8 04 00 00 00       	mov    eax,0x4
c002105f:	e9 a1 00 00 00       	jmp    c0021105 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021064:	83 ec 08             	sub    esp,0x8
c0021067:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002106e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021075:	50                   	push   eax
c0021076:	e8 91 f7 fd ff       	call   c000080c <strcpy>
c002107b:	83 c4 10             	add    esp,0x10
c002107e:	83 ec 08             	sub    esp,0x8
c0021081:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021088:	50                   	push   eax
c0021089:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021090:	e8 87 fd ff ff       	call   c0020e1c <FAT::fixFilepath(char*)>
c0021095:	83 c4 10             	add    esp,0x10
c0021098:	83 ec 08             	sub    esp,0x8
c002109b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002109f:	50                   	push   eax
c00210a0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210a7:	50                   	push   eax
c00210a8:	e8 a1 50 fe ff       	call   c000614e <f_stat>
c00210ad:	83 c4 10             	add    esp,0x10
c00210b0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00210b7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00210be:	85 c0                	test   eax,eax
c00210c0:	74 07                	je     c00210c9 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00210c2:	83 f8 04             	cmp    eax,0x4
c00210c5:	74 32                	je     c00210f9 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00210c7:	eb 37                	jmp    c0021100 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00210c9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00210cd:	0f b6 c0             	movzx  eax,al
c00210d0:	83 e0 10             	and    eax,0x10
c00210d3:	0f 95 c2             	setne  dl
c00210d6:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00210dd:	88 10                	mov    BYTE PTR [eax],dl
c00210df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00210e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00210e6:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00210ed:	89 01                	mov    DWORD PTR [ecx],eax
c00210ef:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00210f2:	b8 00 00 00 00       	mov    eax,0x0
c00210f7:	eb 0c                	jmp    c0021105 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210f9:	b8 02 00 00 00       	mov    eax,0x2
c00210fe:	eb 05                	jmp    c0021105 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021100:	b8 01 00 00 00       	mov    eax,0x1
c0021105:	81 c4 2c 02 00 00    	add    esp,0x22c
c002110b:	c3                   	ret    

c002110c <FAT::unlink(char const*)>:
c002110c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021112:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002111a:	75 07                	jne    c0021123 <FAT::unlink(char const*)+0x17>
c002111c:	b8 04 00 00 00       	mov    eax,0x4
c0021121:	eb 5c                	jmp    c002117f <FAT::unlink(char const*)+0x73>
c0021123:	83 ec 08             	sub    esp,0x8
c0021126:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002112d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021131:	50                   	push   eax
c0021132:	e8 d5 f6 fd ff       	call   c000080c <strcpy>
c0021137:	83 c4 10             	add    esp,0x10
c002113a:	83 ec 08             	sub    esp,0x8
c002113d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021141:	50                   	push   eax
c0021142:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021149:	e8 ce fc ff ff       	call   c0020e1c <FAT::fixFilepath(char*)>
c002114e:	83 c4 10             	add    esp,0x10
c0021151:	83 ec 0c             	sub    esp,0xc
c0021154:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021158:	50                   	push   eax
c0021159:	e8 42 53 fe ff       	call   c00064a0 <f_unlink>
c002115e:	83 c4 10             	add    esp,0x10
c0021161:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021168:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002116f:	85 c0                	test   eax,eax
c0021171:	75 07                	jne    c002117a <FAT::unlink(char const*)+0x6e>
c0021173:	b8 00 00 00 00       	mov    eax,0x0
c0021178:	eb 05                	jmp    c002117f <FAT::unlink(char const*)+0x73>
c002117a:	b8 01 00 00 00       	mov    eax,0x1
c002117f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021185:	c3                   	ret    

c0021186 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021186:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002118c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021193:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002119a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002119e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00211a2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00211aa:	75 0a                	jne    c00211b6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00211ac:	b8 04 00 00 00       	mov    eax,0x4
c00211b1:	e9 1c 01 00 00       	jmp    c00212d2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00211b6:	83 ec 08             	sub    esp,0x8
c00211b9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00211c0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00211c4:	50                   	push   eax
c00211c5:	e8 42 f6 fd ff       	call   c000080c <strcpy>
c00211ca:	83 c4 10             	add    esp,0x10
c00211cd:	83 ec 08             	sub    esp,0x8
c00211d0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00211d4:	50                   	push   eax
c00211d5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00211dc:	e8 3b fc ff ff       	call   c0020e1c <FAT::fixFilepath(char*)>
c00211e1:	83 c4 10             	add    esp,0x10
c00211e4:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00211ec:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00211f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00211f9:	83 e0 01             	and    eax,0x1
c00211fc:	74 08                	je     c0021206 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00211fe:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021206:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002120b:	83 e0 02             	and    eax,0x2
c002120e:	74 08                	je     c0021218 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021210:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021218:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002121d:	83 e0 04             	and    eax,0x4
c0021220:	74 08                	je     c002122a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021222:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002122a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002122f:	83 e0 08             	and    eax,0x8
c0021232:	74 08                	je     c002123c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021234:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002123c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021241:	83 e0 01             	and    eax,0x1
c0021244:	74 08                	je     c002124e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021246:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002124e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021253:	83 e0 02             	and    eax,0x2
c0021256:	74 08                	je     c0021260 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021258:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021260:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021265:	83 e0 04             	and    eax,0x4
c0021268:	74 08                	je     c0021272 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002126a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021272:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021277:	83 e0 08             	and    eax,0x8
c002127a:	74 08                	je     c0021284 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002127c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021284:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002128b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021292:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002129a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00212a2:	83 ec 04             	sub    esp,0x4
c00212a5:	52                   	push   edx
c00212a6:	50                   	push   eax
c00212a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00212ab:	50                   	push   eax
c00212ac:	e8 91 58 fe ff       	call   c0006b42 <f_chmod>
c00212b1:	83 c4 10             	add    esp,0x10
c00212b4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00212bb:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00212c2:	85 c0                	test   eax,eax
c00212c4:	75 07                	jne    c00212cd <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00212c6:	b8 00 00 00 00       	mov    eax,0x0
c00212cb:	eb 05                	jmp    c00212d2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00212cd:	b8 01 00 00 00       	mov    eax,0x1
c00212d2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00212d8:	c3                   	ret    
c00212d9:	90                   	nop

c00212da <FAT::rename(char const*, char const*)>:
c00212da:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00212e0:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00212e8:	74 0a                	je     c00212f4 <FAT::rename(char const*, char const*)+0x1a>
c00212ea:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00212f2:	75 0a                	jne    c00212fe <FAT::rename(char const*, char const*)+0x24>
c00212f4:	b8 04 00 00 00       	mov    eax,0x4
c00212f9:	e9 98 00 00 00       	jmp    c0021396 <FAT::rename(char const*, char const*)+0xbc>
c00212fe:	83 ec 08             	sub    esp,0x8
c0021301:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021308:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002130f:	50                   	push   eax
c0021310:	e8 f7 f4 fd ff       	call   c000080c <strcpy>
c0021315:	83 c4 10             	add    esp,0x10
c0021318:	83 ec 08             	sub    esp,0x8
c002131b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021322:	50                   	push   eax
c0021323:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002132a:	e8 ed fa ff ff       	call   c0020e1c <FAT::fixFilepath(char*)>
c002132f:	83 c4 10             	add    esp,0x10
c0021332:	83 ec 08             	sub    esp,0x8
c0021335:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002133c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021340:	50                   	push   eax
c0021341:	e8 c6 f4 fd ff       	call   c000080c <strcpy>
c0021346:	83 c4 10             	add    esp,0x10
c0021349:	83 ec 08             	sub    esp,0x8
c002134c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021350:	50                   	push   eax
c0021351:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021358:	e8 bf fa ff ff       	call   c0020e1c <FAT::fixFilepath(char*)>
c002135d:	83 c4 10             	add    esp,0x10
c0021360:	83 ec 08             	sub    esp,0x8
c0021363:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021367:	50                   	push   eax
c0021368:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002136f:	50                   	push   eax
c0021370:	e8 da 54 fe ff       	call   c000684f <f_rename>
c0021375:	83 c4 10             	add    esp,0x10
c0021378:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002137f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021386:	85 c0                	test   eax,eax
c0021388:	75 07                	jne    c0021391 <FAT::rename(char const*, char const*)+0xb7>
c002138a:	b8 00 00 00 00       	mov    eax,0x0
c002138f:	eb 05                	jmp    c0021396 <FAT::rename(char const*, char const*)+0xbc>
c0021391:	b8 01 00 00 00       	mov    eax,0x1
c0021396:	81 c4 1c 02 00 00    	add    esp,0x21c
c002139c:	c3                   	ret    
c002139d:	90                   	nop

c002139e <FAT::mkdir(char const*)>:
c002139e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213a4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213ac:	75 07                	jne    c00213b5 <FAT::mkdir(char const*)+0x17>
c00213ae:	b8 04 00 00 00       	mov    eax,0x4
c00213b3:	eb 5c                	jmp    c0021411 <FAT::mkdir(char const*)+0x73>
c00213b5:	83 ec 08             	sub    esp,0x8
c00213b8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213c3:	50                   	push   eax
c00213c4:	e8 43 f4 fd ff       	call   c000080c <strcpy>
c00213c9:	83 c4 10             	add    esp,0x10
c00213cc:	83 ec 08             	sub    esp,0x8
c00213cf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213d3:	50                   	push   eax
c00213d4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213db:	e8 3c fa ff ff       	call   c0020e1c <FAT::fixFilepath(char*)>
c00213e0:	83 c4 10             	add    esp,0x10
c00213e3:	83 ec 0c             	sub    esp,0xc
c00213e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213ea:	50                   	push   eax
c00213eb:	e8 33 52 fe ff       	call   c0006623 <f_mkdir>
c00213f0:	83 c4 10             	add    esp,0x10
c00213f3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213fa:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021401:	85 c0                	test   eax,eax
c0021403:	75 07                	jne    c002140c <FAT::mkdir(char const*)+0x6e>
c0021405:	b8 00 00 00 00       	mov    eax,0x0
c002140a:	eb 05                	jmp    c0021411 <FAT::mkdir(char const*)+0x73>
c002140c:	b8 01 00 00 00       	mov    eax,0x1
c0021411:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021417:	c3                   	ret    

c0021418 <FAT::exists(char const*)>:
c0021418:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002141e:	83 ec 08             	sub    esp,0x8
c0021421:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021428:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002142c:	50                   	push   eax
c002142d:	e8 da f3 fd ff       	call   c000080c <strcpy>
c0021432:	83 c4 10             	add    esp,0x10
c0021435:	83 ec 08             	sub    esp,0x8
c0021438:	8d 44 24 08          	lea    eax,[esp+0x8]
c002143c:	50                   	push   eax
c002143d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021444:	e8 d3 f9 ff ff       	call   c0020e1c <FAT::fixFilepath(char*)>
c0021449:	83 c4 10             	add    esp,0x10
c002144c:	83 ec 08             	sub    esp,0x8
c002144f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021456:	50                   	push   eax
c0021457:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002145b:	50                   	push   eax
c002145c:	e8 ed 4c fe ff       	call   c000614e <f_stat>
c0021461:	83 c4 10             	add    esp,0x10
c0021464:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002146b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021472:	85 c0                	test   eax,eax
c0021474:	75 04                	jne    c002147a <FAT::exists(char const*)+0x62>
c0021476:	b0 01                	mov    al,0x1
c0021478:	eb 02                	jmp    c002147c <FAT::exists(char const*)+0x64>
c002147a:	b0 00                	mov    al,0x0
c002147c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021482:	c3                   	ret    
c0021483:	90                   	nop

c0021484 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021484:	b8 08 00 00 00       	mov    eax,0x8
c0021489:	c3                   	ret    

c002148a <ISO9660::seek(void*, unsigned long long)>:
c002148a:	53                   	push   ebx
c002148b:	b8 04 00 00 00       	mov    eax,0x4
c0021490:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021494:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021498:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002149c:	85 d2                	test   edx,edx
c002149e:	74 17                	je     c00214b7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214a0:	89 c8                	mov    eax,ecx
c00214a2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00214a5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00214a8:	b8 01 00 00 00       	mov    eax,0x1
c00214ad:	73 08                	jae    c00214b7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214af:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00214b2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00214b5:	31 c0                	xor    eax,eax
c00214b7:	5b                   	pop    ebx
c00214b8:	c3                   	ret    
c00214b9:	90                   	nop

c00214ba <ISO9660::tell(void*, unsigned long long*)>:
c00214ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00214be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214c2:	85 d2                	test   edx,edx
c00214c4:	74 12                	je     c00214d8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00214c6:	85 c0                	test   eax,eax
c00214c8:	74 0e                	je     c00214d8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00214ca:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00214cd:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00214d0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00214d3:	89 10                	mov    DWORD PTR [eax],edx
c00214d5:	31 c0                	xor    eax,eax
c00214d7:	c3                   	ret    
c00214d8:	b8 04 00 00 00       	mov    eax,0x4
c00214dd:	c3                   	ret    

c00214de <ISO9660::getName()>:
c00214de:	b8 b0 c8 02 c0       	mov    eax,0xc002c8b0
c00214e3:	c3                   	ret    

c00214e4 <ISO9660::stat(void*, unsigned long long*)>:
c00214e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00214e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214ec:	85 d2                	test   edx,edx
c00214ee:	74 12                	je     c0021502 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00214f0:	85 c0                	test   eax,eax
c00214f2:	74 0e                	je     c0021502 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00214f4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00214f7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00214fa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00214fd:	89 10                	mov    DWORD PTR [eax],edx
c00214ff:	31 c0                	xor    eax,eax
c0021501:	c3                   	ret    
c0021502:	b8 04 00 00 00       	mov    eax,0x4
c0021507:	c3                   	ret    

c0021508 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021508:	b8 01 00 00 00       	mov    eax,0x1
c002150d:	c3                   	ret    

c002150e <ISO9660::unlink(char const*)>:
c002150e:	b8 01 00 00 00       	mov    eax,0x1
c0021513:	c3                   	ret    

c0021514 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021514:	b8 01 00 00 00       	mov    eax,0x1
c0021519:	c3                   	ret    

c002151a <ISO9660::rename(char const*, char const*)>:
c002151a:	b8 01 00 00 00       	mov    eax,0x1
c002151f:	c3                   	ret    

c0021520 <ISO9660::mkdir(char const*)>:
c0021520:	b8 01 00 00 00       	mov    eax,0x1
c0021525:	c3                   	ret    

c0021526 <ISO9660::close(void*)>:
c0021526:	83 ec 0c             	sub    esp,0xc
c0021529:	b8 04 00 00 00       	mov    eax,0x4
c002152e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021532:	85 d2                	test   edx,edx
c0021534:	74 0e                	je     c0021544 <ISO9660::close(void*)+0x1e>
c0021536:	83 ec 0c             	sub    esp,0xc
c0021539:	52                   	push   edx
c002153a:	e8 fa e2 fe ff       	call   c000f839 <free>
c002153f:	83 c4 10             	add    esp,0x10
c0021542:	31 c0                	xor    eax,eax
c0021544:	83 c4 0c             	add    esp,0xc
c0021547:	c3                   	ret    

c0021548 <ISO9660::closeDir(void*)>:
c0021548:	83 ec 0c             	sub    esp,0xc
c002154b:	b8 04 00 00 00       	mov    eax,0x4
c0021550:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021554:	85 d2                	test   edx,edx
c0021556:	74 0e                	je     c0021566 <ISO9660::closeDir(void*)+0x1e>
c0021558:	83 ec 0c             	sub    esp,0xc
c002155b:	52                   	push   edx
c002155c:	e8 d8 e2 fe ff       	call   c000f839 <free>
c0021561:	83 c4 10             	add    esp,0x10
c0021564:	31 c0                	xor    eax,eax
c0021566:	83 c4 0c             	add    esp,0xc
c0021569:	c3                   	ret    

c002156a <ISO9660::~ISO9660()>:
c002156a:	83 ec 0c             	sub    esp,0xc
c002156d:	ba d4 c8 02 c0       	mov    edx,0xc002c8d4
c0021572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021576:	89 10                	mov    DWORD PTR [eax],edx
c0021578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002157c:	83 ec 0c             	sub    esp,0xc
c002157f:	50                   	push   eax
c0021580:	e8 2b 16 ff ff       	call   c0012bb0 <Filesystem::~Filesystem()>
c0021585:	83 c4 10             	add    esp,0x10
c0021588:	90                   	nop
c0021589:	83 c4 0c             	add    esp,0xc
c002158c:	c3                   	ret    
c002158d:	90                   	nop

c002158e <ISO9660::~ISO9660()>:
c002158e:	83 ec 0c             	sub    esp,0xc
c0021591:	83 ec 0c             	sub    esp,0xc
c0021594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021598:	e8 cd ff ff ff       	call   c002156a <ISO9660::~ISO9660()>
c002159d:	83 c4 10             	add    esp,0x10
c00215a0:	83 ec 08             	sub    esp,0x8
c00215a3:	6a 08                	push   0x8
c00215a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215a9:	e8 fb 11 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c00215ae:	83 c4 10             	add    esp,0x10
c00215b1:	83 c4 0c             	add    esp,0xc
c00215b4:	c3                   	ret    

c00215b5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00215b5:	55                   	push   ebp
c00215b6:	31 c9                	xor    ecx,ecx
c00215b8:	57                   	push   edi
c00215b9:	56                   	push   esi
c00215ba:	53                   	push   ebx
c00215bb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00215bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00215c3:	89 eb                	mov    ebx,ebp
c00215c5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00215c9:	39 ce                	cmp    esi,ecx
c00215cb:	7e 17                	jle    c00215e4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00215cd:	31 d2                	xor    edx,edx
c00215cf:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00215d3:	7d 13                	jge    c00215e8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00215d5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00215d9:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00215dc:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00215df:	75 0d                	jne    c00215ee <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00215e1:	42                   	inc    edx
c00215e2:	eb eb                	jmp    c00215cf <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00215e4:	31 c0                	xor    eax,eax
c00215e6:	eb 0a                	jmp    c00215f2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00215e8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00215ec:	eb 04                	jmp    c00215f2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00215ee:	41                   	inc    ecx
c00215ef:	43                   	inc    ebx
c00215f0:	eb d7                	jmp    c00215c9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00215f2:	5b                   	pop    ebx
c00215f3:	5e                   	pop    esi
c00215f4:	5f                   	pop    edi
c00215f5:	5d                   	pop    ebp
c00215f6:	c3                   	ret    

c00215f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00215f7:	57                   	push   edi
c00215f8:	56                   	push   esi
c00215f9:	53                   	push   ebx
c00215fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00215fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021602:	39 0d 80 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa80,ecx
c0021608:	75 08                	jne    c0021612 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c002160a:	38 05 14 d9 02 c0    	cmp    BYTE PTR ds:0xc002d914,al
c0021610:	74 2b                	je     c002163d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021612:	83 ec 0c             	sub    esp,0xc
c0021615:	a2 14 d9 02 c0       	mov    ds:0xc002d914,al
c002161a:	68 a0 fa 02 c0       	push   0xc002faa0
c002161f:	0f be c0             	movsx  eax,al
c0021622:	6a 01                	push   0x1
c0021624:	89 0d 80 fa 02 c0    	mov    DWORD PTR ds:0xc002fa80,ecx
c002162a:	31 db                	xor    ebx,ebx
c002162c:	53                   	push   ebx
c002162d:	51                   	push   ecx
c002162e:	ff 34 85 7c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1784]
c0021635:	e8 a2 4b ff ff       	call   c00161dc <LogicalDisk::read(unsigned long long, int, void*)>
c002163a:	83 c4 20             	add    esp,0x20
c002163d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021641:	be a0 fa 02 c0       	mov    esi,0xc002faa0
c0021646:	b9 00 08 00 00       	mov    ecx,0x800
c002164b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002164d:	5b                   	pop    ebx
c002164e:	5e                   	pop    esi
c002164f:	5f                   	pop    edi
c0021650:	c3                   	ret    
c0021651:	90                   	nop

c0021652 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021652:	81 ec 10 08 00 00    	sub    esp,0x810
c0021658:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002165f:	83 c0 41             	add    eax,0x41
c0021662:	0f be c0             	movsx  eax,al
c0021665:	50                   	push   eax
c0021666:	8d 44 24 08          	lea    eax,[esp+0x8]
c002166a:	50                   	push   eax
c002166b:	6a 10                	push   0x10
c002166d:	e8 85 ff ff ff       	call   c00215f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021672:	83 c4 10             	add    esp,0x10
c0021675:	31 c0                	xor    eax,eax
c0021677:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002167c:	75 1d                	jne    c002169b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002167e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021683:	75 16                	jne    c002169b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021685:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002168a:	75 0f                	jne    c002169b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002168c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021691:	75 08                	jne    c002169b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021693:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021698:	0f 94 c0             	sete   al
c002169b:	81 c4 0c 08 00 00    	add    esp,0x80c
c00216a1:	c3                   	ret    

c00216a2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00216a2:	55                   	push   ebp
c00216a3:	57                   	push   edi
c00216a4:	56                   	push   esi
c00216a5:	53                   	push   ebx
c00216a6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00216ac:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00216b3:	85 ed                	test   ebp,ebp
c00216b5:	0f 84 da 01 00 00    	je     c0021895 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00216bb:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00216c3:	0f 84 cc 01 00 00    	je     c0021895 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00216c9:	b8 01 00 00 00       	mov    eax,0x1
c00216ce:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00216d2:	0f 85 c2 01 00 00    	jne    c002189a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00216d8:	31 d2                	xor    edx,edx
c00216da:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00216e1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00216e4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00216e7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00216ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00216ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00216f1:	01 c8                	add    eax,ecx
c00216f3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00216f6:	11 da                	adc    edx,ebx
c00216f8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00216fc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021700:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021704:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021708:	19 d7                	sbb    edi,edx
c002170a:	72 11                	jb     c002171d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c002170c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002170f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021717:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002171b:	eb 0c                	jmp    c0021729 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002171d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021721:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021725:	29 ce                	sub    esi,ecx
c0021727:	19 df                	sbb    edi,ebx
c0021729:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002172c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002172f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021733:	c1 e0 0b             	shl    eax,0xb
c0021736:	01 c8                	add    eax,ecx
c0021738:	11 da                	adc    edx,ebx
c002173a:	89 04 24             	mov    DWORD PTR [esp],eax
c002173d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021741:	51                   	push   ecx
c0021742:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021746:	50                   	push   eax
c0021747:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002174b:	53                   	push   ebx
c002174c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021750:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021754:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021758:	50                   	push   eax
c0021759:	e8 99 fe ff ff       	call   c00215f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002175e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021761:	b8 00 08 00 00       	mov    eax,0x800
c0021766:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002176c:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021770:	29 d0                	sub    eax,edx
c0021772:	83 c4 10             	add    esp,0x10
c0021775:	89 f9                	mov    ecx,edi
c0021777:	39 c6                	cmp    esi,eax
c0021779:	83 d9 00             	sbb    ecx,0x0
c002177c:	7d 1b                	jge    c0021799 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c002177e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021783:	75 12                	jne    c0021797 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021785:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002178c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021792:	e9 fa 00 00 00       	jmp    c0021891 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021797:	89 f0                	mov    eax,esi
c0021799:	01 d3                	add    ebx,edx
c002179b:	31 d2                	xor    edx,edx
c002179d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00217a1:	39 c2                	cmp    edx,eax
c00217a3:	7d 14                	jge    c00217b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00217a5:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00217ac:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00217b0:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00217b3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00217b6:	42                   	inc    edx
c00217b7:	eb e8                	jmp    c00217a1 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00217b9:	89 c2                	mov    edx,eax
c00217bb:	85 c0                	test   eax,eax
c00217bd:	79 02                	jns    c00217c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00217bf:	31 d2                	xor    edx,edx
c00217c1:	01 c2                	add    edx,eax
c00217c3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00217c6:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00217cd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00217d1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00217d5:	99                   	cdq    
c00217d6:	01 c1                	add    ecx,eax
c00217d8:	11 d3                	adc    ebx,edx
c00217da:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00217de:	29 c6                	sub    esi,eax
c00217e0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00217e4:	19 d7                	sbb    edi,edx
c00217e6:	89 34 24             	mov    DWORD PTR [esp],esi
c00217e9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00217ed:	b8 ff 07 00 00       	mov    eax,0x7ff
c00217f2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00217f5:	b8 00 00 00 00       	mov    eax,0x0
c00217fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00217fe:	7d 43                	jge    c0021843 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021800:	52                   	push   edx
c0021801:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021805:	50                   	push   eax
c0021806:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002180a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002180e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021812:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021816:	50                   	push   eax
c0021817:	e8 db fd ff ff       	call   c00215f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002181c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021824:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021829:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021831:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021839:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002183e:	83 c4 10             	add    esp,0x10
c0021841:	eb aa                	jmp    c00217ed <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021847:	0b 04 24             	or     eax,DWORD PTR [esp]
c002184a:	74 2a                	je     c0021876 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c002184c:	50                   	push   eax
c002184d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021851:	50                   	push   eax
c0021852:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021856:	56                   	push   esi
c0021857:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002185b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002185f:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021863:	51                   	push   ecx
c0021864:	e8 8e fd ff ff       	call   c00215f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021869:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002186d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021871:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021873:	83 c4 10             	add    esp,0x10
c0021876:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002187d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021881:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021885:	89 18                	mov    DWORD PTR [eax],ebx
c0021887:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002188b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002188e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021891:	31 c0                	xor    eax,eax
c0021893:	eb 05                	jmp    c002189a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021895:	b8 04 00 00 00       	mov    eax,0x4
c002189a:	81 c4 2c 08 00 00    	add    esp,0x82c
c00218a0:	5b                   	pop    ebx
c00218a1:	5e                   	pop    esi
c00218a2:	5f                   	pop    edi
c00218a3:	5d                   	pop    ebp
c00218a4:	c3                   	ret    
c00218a5:	90                   	nop

c00218a6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00218a6:	55                   	push   ebp
c00218a7:	57                   	push   edi
c00218a8:	56                   	push   esi
c00218a9:	53                   	push   ebx
c00218aa:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00218b0:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00218b7:	85 ed                	test   ebp,ebp
c00218b9:	0f 84 51 02 00 00    	je     c0021b10 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00218bf:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00218c7:	0f 84 43 02 00 00    	je     c0021b10 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00218cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00218d0:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00218d3:	75 0a                	jne    c00218df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00218d5:	b8 07 00 00 00       	mov    eax,0x7
c00218da:	e9 36 02 00 00       	jmp    c0021b15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00218df:	50                   	push   eax
c00218e0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218e4:	50                   	push   eax
c00218e5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00218ec:	53                   	push   ebx
c00218ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218f0:	c1 e0 0b             	shl    eax,0xb
c00218f3:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00218f6:	c1 e8 0b             	shr    eax,0xb
c00218f9:	50                   	push   eax
c00218fa:	e8 f8 fc ff ff       	call   c00215f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218ff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021902:	83 c4 10             	add    esp,0x10
c0021905:	89 c1                	mov    ecx,eax
c0021907:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002190a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021910:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021913:	84 db                	test   bl,bl
c0021915:	0f 85 8b 00 00 00    	jne    c00219a6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c002191b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021921:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021924:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002192a:	29 c6                	sub    esi,eax
c002192c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021930:	89 f3                	mov    ebx,esi
c0021932:	89 f1                	mov    ecx,esi
c0021934:	c1 fb 1f             	sar    ebx,0x1f
c0021937:	01 f0                	add    eax,esi
c0021939:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002193c:	11 da                	adc    edx,ebx
c002193e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021941:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021945:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021948:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002194b:	89 d8                	mov    eax,ebx
c002194d:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021951:	ba 00 00 00 00       	mov    edx,0x0
c0021956:	19 f8                	sbb    eax,edi
c0021958:	b8 00 00 00 00       	mov    eax,0x0
c002195d:	73 08                	jae    c0021967 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c002195f:	89 f0                	mov    eax,esi
c0021961:	89 fa                	mov    edx,edi
c0021963:	29 c8                	sub    eax,ecx
c0021965:	19 da                	sbb    edx,ebx
c0021967:	89 d7                	mov    edi,edx
c0021969:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002196c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002196f:	09 c7                	or     edi,eax
c0021971:	0f 84 5e ff ff ff    	je     c00218d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021977:	57                   	push   edi
c0021978:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002197c:	50                   	push   eax
c002197d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021984:	53                   	push   ebx
c0021985:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021988:	c1 e0 0b             	shl    eax,0xb
c002198b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002198f:	c1 e8 0b             	shr    eax,0xb
c0021992:	50                   	push   eax
c0021993:	e8 5f fc ff ff       	call   c00215f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021998:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002199b:	83 c4 10             	add    esp,0x10
c002199e:	25 ff 07 00 00       	and    eax,0x7ff
c00219a3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00219a6:	31 ff                	xor    edi,edi
c00219a8:	56                   	push   esi
c00219a9:	6a 28                	push   0x28
c00219ab:	6a 00                	push   0x0
c00219ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00219b1:	50                   	push   eax
c00219b2:	e8 99 ed fd ff       	call   c0000750 <memset>
c00219b7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00219ba:	25 ff 07 00 00       	and    eax,0x7ff
c00219bf:	89 c6                	mov    esi,eax
c00219c1:	83 c6 21             	add    esi,0x21
c00219c4:	83 d7 00             	adc    edi,0x0
c00219c7:	83 c4 10             	add    esp,0x10
c00219ca:	31 c9                	xor    ecx,ecx
c00219cc:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00219d3:	83 f9 28             	cmp    ecx,0x28
c00219d6:	88 04 24             	mov    BYTE PTR [esp],al
c00219d9:	0f 94 c2             	sete   dl
c00219dc:	88 d0                	mov    al,dl
c00219de:	ba ff 07 00 00       	mov    edx,0x7ff
c00219e3:	39 f2                	cmp    edx,esi
c00219e5:	ba 00 00 00 00       	mov    edx,0x0
c00219ea:	19 fa                	sbb    edx,edi
c00219ec:	0f 92 c2             	setb   dl
c00219ef:	09 c2                	or     edx,eax
c00219f1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00219f5:	0f 94 c0             	sete   al
c00219f8:	08 d0                	or     al,dl
c00219fa:	75 16                	jne    c0021a12 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00219fc:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021a00:	74 10                	je     c0021a12 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021a02:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021a05:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021a09:	41                   	inc    ecx
c0021a0a:	83 c6 01             	add    esi,0x1
c0021a0d:	83 d7 00             	adc    edi,0x0
c0021a10:	eb ba                	jmp    c00219cc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021a12:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021a19:	83 ec 0c             	sub    esp,0xc
c0021a1c:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021a20:	56                   	push   esi
c0021a21:	e8 46 ed fd ff       	call   c000076c <strlen>
c0021a26:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021a2d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021a31:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021a39:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021a3c:	5a                   	pop    edx
c0021a3d:	25 ff 07 00 00       	and    eax,0x7ff
c0021a42:	59                   	pop    ecx
c0021a43:	01 f8                	add    eax,edi
c0021a45:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021a4b:	83 e0 02             	and    eax,0x2
c0021a4e:	3c 01                	cmp    al,0x1
c0021a50:	19 c0                	sbb    eax,eax
c0021a52:	83 c0 02             	add    eax,0x2
c0021a55:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021a59:	56                   	push   esi
c0021a5a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021a5e:	50                   	push   eax
c0021a5f:	e8 a8 ed fd ff       	call   c000080c <strcpy>
c0021a64:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021a68:	83 c4 10             	add    esp,0x10
c0021a6b:	84 c0                	test   al,al
c0021a6d:	75 21                	jne    c0021a90 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021a6f:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021a77:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021a7f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021a87:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021a8e:	eb 28                	jmp    c0021ab8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021a90:	fe c8                	dec    al
c0021a92:	75 24                	jne    c0021ab8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021a94:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021a9c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021aa4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021aac:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021ab3:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021ab8:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021abc:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021ac3:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021aca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021acc:	0f b6 f3             	movzx  esi,bl
c0021acf:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021ad6:	31 db                	xor    ebx,ebx
c0021ad8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021ade:	89 df                	mov    edi,ebx
c0021ae0:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ae6:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021ae9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021aec:	39 c6                	cmp    esi,eax
c0021aee:	19 d7                	sbb    edi,edx
c0021af0:	72 10                	jb     c0021b02 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021af2:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021af9:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021b00:	eb 0a                	jmp    c0021b0c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021b02:	29 f0                	sub    eax,esi
c0021b04:	19 da                	sbb    edx,ebx
c0021b06:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021b09:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021b0c:	31 c0                	xor    eax,eax
c0021b0e:	eb 05                	jmp    c0021b15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021b10:	b8 04 00 00 00       	mov    eax,0x4
c0021b15:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021b1b:	5b                   	pop    ebx
c0021b1c:	5e                   	pop    esi
c0021b1d:	5f                   	pop    edi
c0021b1e:	5d                   	pop    ebp
c0021b1f:	c3                   	ret    

c0021b20 <readRoot(unsigned int*, unsigned int*, char)>:
c0021b20:	57                   	push   edi
c0021b21:	56                   	push   esi
c0021b22:	81 ec 38 08 00 00    	sub    esp,0x838
c0021b28:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021b30:	50                   	push   eax
c0021b31:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021b35:	50                   	push   eax
c0021b36:	6a 10                	push   0x10
c0021b38:	e8 ba fa ff ff       	call   c00215f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b3d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021b44:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021b48:	b9 22 00 00 00       	mov    ecx,0x22
c0021b4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021b4f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b56:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021b5a:	89 10                	mov    DWORD PTR [eax],edx
c0021b5c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021b63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b67:	89 10                	mov    DWORD PTR [eax],edx
c0021b69:	81 c4 44 08 00 00    	add    esp,0x844
c0021b6f:	b0 01                	mov    al,0x1
c0021b71:	5e                   	pop    esi
c0021b72:	5f                   	pop    edi
c0021b73:	c3                   	ret    

c0021b74 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021b74:	55                   	push   ebp
c0021b75:	57                   	push   edi
c0021b76:	56                   	push   esi
c0021b77:	53                   	push   ebx
c0021b78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021b7e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021b85:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021b8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021b90:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021b94:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021b98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021b9c:	75 03                	jne    c0021ba1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021b9e:	83 c3 02             	add    ebx,0x2
c0021ba1:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021ba4:	75 03                	jne    c0021ba9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021ba6:	43                   	inc    ebx
c0021ba7:	eb f8                	jmp    c0021ba1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021ba9:	51                   	push   ecx
c0021baa:	68 00 01 00 00       	push   0x100
c0021baf:	6a 00                	push   0x0
c0021bb1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021bb5:	50                   	push   eax
c0021bb6:	e8 95 eb fd ff       	call   c0000750 <memset>
c0021bbb:	83 c4 10             	add    esp,0x10
c0021bbe:	31 d2                	xor    edx,edx
c0021bc0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021bc3:	84 c0                	test   al,al
c0021bc5:	74 21                	je     c0021be8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021bc7:	3c 2f                	cmp    al,0x2f
c0021bc9:	75 0b                	jne    c0021bd6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021bcb:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021bcf:	bd 01 00 00 00       	mov    ebp,0x1
c0021bd4:	eb 14                	jmp    c0021bea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021bd6:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021bd9:	80 f9 19             	cmp    cl,0x19
c0021bdc:	77 03                	ja     c0021be1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021bde:	83 e8 20             	sub    eax,0x20
c0021be1:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021be5:	42                   	inc    edx
c0021be6:	eb d8                	jmp    c0021bc0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021be8:	31 ed                	xor    ebp,ebp
c0021bea:	83 ec 0c             	sub    esp,0xc
c0021bed:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021bf4:	e8 30 dc fe ff       	call   c000f829 <malloc>
c0021bf9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021c00:	89 c6                	mov    esi,eax
c0021c02:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021c08:	c1 ef 0b             	shr    edi,0xb
c0021c0b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021c12:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021c16:	83 c4 10             	add    esp,0x10
c0021c19:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021c1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021c22:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021c29:	74 28                	je     c0021c53 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021c2b:	52                   	push   edx
c0021c2c:	57                   	push   edi
c0021c2d:	50                   	push   eax
c0021c2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c32:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021c39:	e8 b9 f9 ff ff       	call   c00215f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c42:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021c49:	05 00 08 00 00       	add    eax,0x800
c0021c4e:	83 c4 10             	add    esp,0x10
c0021c51:	eb cb                	jmp    c0021c1e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021c53:	83 ec 0c             	sub    esp,0xc
c0021c56:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021c5a:	57                   	push   edi
c0021c5b:	e8 0c eb fd ff       	call   c000076c <strlen>
c0021c60:	50                   	push   eax
c0021c61:	57                   	push   edi
c0021c62:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021c69:	56                   	push   esi
c0021c6a:	e8 46 f9 ff ff       	call   c00215b5 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021c6f:	83 c4 20             	add    esp,0x20
c0021c72:	85 c0                	test   eax,eax
c0021c74:	75 13                	jne    c0021c89 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021c76:	83 ec 0c             	sub    esp,0xc
c0021c79:	56                   	push   esi
c0021c7a:	e8 ba db fe ff       	call   c000f839 <free>
c0021c7f:	83 c4 10             	add    esp,0x10
c0021c82:	31 c0                	xor    eax,eax
c0021c84:	e9 b3 00 00 00       	jmp    c0021d3c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021c89:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021c8d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021c91:	c1 e7 08             	shl    edi,0x8
c0021c94:	c1 e2 10             	shl    edx,0x10
c0021c97:	09 d7                	or     edi,edx
c0021c99:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021c9d:	09 d7                	or     edi,edx
c0021c9f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021ca3:	c1 e2 18             	shl    edx,0x18
c0021ca6:	09 d7                	or     edi,edx
c0021ca8:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021cac:	89 d1                	mov    ecx,edx
c0021cae:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021cb2:	c1 e1 08             	shl    ecx,0x8
c0021cb5:	c1 e2 10             	shl    edx,0x10
c0021cb8:	09 ca                	or     edx,ecx
c0021cba:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021cbe:	09 ca                	or     edx,ecx
c0021cc0:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021cc4:	c1 e1 18             	shl    ecx,0x18
c0021cc7:	09 ca                	or     edx,ecx
c0021cc9:	89 e9                	mov    ecx,ebp
c0021ccb:	84 c9                	test   cl,cl
c0021ccd:	74 3c                	je     c0021d0b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021ccf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021cd3:	83 ec 0c             	sub    esp,0xc
c0021cd6:	56                   	push   esi
c0021cd7:	e8 5d db fe ff       	call   c000f839 <free>
c0021cdc:	83 c4 0c             	add    esp,0xc
c0021cdf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ce6:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ceb:	50                   	push   eax
c0021cec:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021cf3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021cfa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021cfe:	52                   	push   edx
c0021cff:	57                   	push   edi
c0021d00:	53                   	push   ebx
c0021d01:	e8 6e fe ff ff       	call   c0021b74 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021d06:	83 c4 20             	add    esp,0x20
c0021d09:	eb 31                	jmp    c0021d3c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d0b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021d0e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021d15:	d0 e8                	shr    al,1
c0021d17:	89 3b                	mov    DWORD PTR [ebx],edi
c0021d19:	83 e0 01             	and    eax,0x1
c0021d1c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021d23:	83 ec 0c             	sub    esp,0xc
c0021d26:	89 13                	mov    DWORD PTR [ebx],edx
c0021d28:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021d2f:	89 03                	mov    DWORD PTR [ebx],eax
c0021d31:	56                   	push   esi
c0021d32:	e8 02 db fe ff       	call   c000f839 <free>
c0021d37:	83 c4 10             	add    esp,0x10
c0021d3a:	b0 01                	mov    al,0x1
c0021d3c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021d42:	5b                   	pop    ebx
c0021d43:	5e                   	pop    esi
c0021d44:	5f                   	pop    edi
c0021d45:	5d                   	pop    ebp
c0021d46:	c3                   	ret    

c0021d47 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021d47:	55                   	push   ebp
c0021d48:	57                   	push   edi
c0021d49:	56                   	push   esi
c0021d4a:	53                   	push   ebx
c0021d4b:	83 ec 20             	sub    esp,0x20
c0021d4e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021d52:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021d56:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021d5a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021d62:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021d6a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021d6f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021d75:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021d7b:	57                   	push   edi
c0021d7c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d80:	50                   	push   eax
c0021d81:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d85:	50                   	push   eax
c0021d86:	e8 95 fd ff ff       	call   c0021b20 <readRoot(unsigned int*, unsigned int*, char)>
c0021d8b:	5a                   	pop    edx
c0021d8c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021d90:	e8 d7 e9 fd ff       	call   c000076c <strlen>
c0021d95:	83 c4 10             	add    esp,0x10
c0021d98:	83 f8 03             	cmp    eax,0x3
c0021d9b:	77 17                	ja     c0021db4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021da1:	89 03                	mov    DWORD PTR [ebx],eax
c0021da3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021da7:	89 06                	mov    DWORD PTR [esi],eax
c0021da9:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021db0:	b0 01                	mov    al,0x1
c0021db2:	eb 19                	jmp    c0021dcd <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021db4:	50                   	push   eax
c0021db5:	55                   	push   ebp
c0021db6:	57                   	push   edi
c0021db7:	56                   	push   esi
c0021db8:	53                   	push   ebx
c0021db9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021dbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021dc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021dc5:	e8 aa fd ff ff       	call   c0021b74 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021dca:	83 c4 20             	add    esp,0x20
c0021dcd:	83 c4 1c             	add    esp,0x1c
c0021dd0:	5b                   	pop    ebx
c0021dd1:	5e                   	pop    esi
c0021dd2:	5f                   	pop    edi
c0021dd3:	5d                   	pop    ebp
c0021dd4:	c3                   	ret    
c0021dd5:	90                   	nop

c0021dd6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021dd6:	57                   	push   edi
c0021dd7:	56                   	push   esi
c0021dd8:	53                   	push   ebx
c0021dd9:	83 ec 10             	sub    esp,0x10
c0021ddc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021de0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021de4:	85 ff                	test   edi,edi
c0021de6:	0f 84 8b 00 00 00    	je     c0021e77 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021dec:	85 f6                	test   esi,esi
c0021dee:	0f 84 83 00 00 00    	je     c0021e77 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021df4:	b8 03 00 00 00       	mov    eax,0x3
c0021df9:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021dfe:	75 7c                	jne    c0021e7c <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021e00:	83 ec 0c             	sub    esp,0xc
c0021e03:	6a 1c                	push   0x1c
c0021e05:	e8 1f da fe ff       	call   c000f829 <malloc>
c0021e0a:	89 07                	mov    DWORD PTR [edi],eax
c0021e0c:	89 c3                	mov    ebx,eax
c0021e0e:	58                   	pop    eax
c0021e0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e13:	50                   	push   eax
c0021e14:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021e17:	50                   	push   eax
c0021e18:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e1c:	50                   	push   eax
c0021e1d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e21:	50                   	push   eax
c0021e22:	56                   	push   esi
c0021e23:	e8 1f ff ff ff       	call   c0021d47 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021e28:	83 c4 20             	add    esp,0x20
c0021e2b:	84 c0                	test   al,al
c0021e2d:	74 07                	je     c0021e36 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021e2f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021e34:	74 0b                	je     c0021e41 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021e36:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021e3a:	b8 01 00 00 00       	mov    eax,0x1
c0021e3f:	eb 3b                	jmp    c0021e7c <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021e41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e45:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021e49:	89 03                	mov    DWORD PTR [ebx],eax
c0021e4b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021e52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e56:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021e5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021e64:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021e67:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021e6e:	8a 06                	mov    al,BYTE PTR [esi]
c0021e70:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021e73:	31 c0                	xor    eax,eax
c0021e75:	eb 05                	jmp    c0021e7c <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021e77:	b8 04 00 00 00       	mov    eax,0x4
c0021e7c:	83 c4 10             	add    esp,0x10
c0021e7f:	5b                   	pop    ebx
c0021e80:	5e                   	pop    esi
c0021e81:	5f                   	pop    edi
c0021e82:	c3                   	ret    
c0021e83:	90                   	nop

c0021e84 <ISO9660::exists(char const*)>:
c0021e84:	83 ec 28             	sub    esp,0x28
c0021e87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021e8b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021e8f:	52                   	push   edx
c0021e90:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021e93:	52                   	push   edx
c0021e94:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021e98:	52                   	push   edx
c0021e99:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021e9d:	52                   	push   edx
c0021e9e:	50                   	push   eax
c0021e9f:	e8 a3 fe ff ff       	call   c0021d47 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ea4:	83 c4 3c             	add    esp,0x3c
c0021ea7:	c3                   	ret    

c0021ea8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021ea8:	56                   	push   esi
c0021ea9:	53                   	push   ebx
c0021eaa:	83 ec 14             	sub    esp,0x14
c0021ead:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021eb1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021eb5:	85 db                	test   ebx,ebx
c0021eb7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021ebb:	0f 94 c2             	sete   dl
c0021ebe:	85 f6                	test   esi,esi
c0021ec0:	0f 94 c0             	sete   al
c0021ec3:	08 c2                	or     dl,al
c0021ec5:	75 68                	jne    c0021f2f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021ec7:	85 c9                	test   ecx,ecx
c0021ec9:	74 64                	je     c0021f2f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021ecb:	83 ec 0c             	sub    esp,0xc
c0021ece:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021ed1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ed5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021edb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ee2:	50                   	push   eax
c0021ee3:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021ee6:	50                   	push   eax
c0021ee7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021eeb:	50                   	push   eax
c0021eec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ef0:	50                   	push   eax
c0021ef1:	51                   	push   ecx
c0021ef2:	e8 50 fe ff ff       	call   c0021d47 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ef7:	83 c4 20             	add    esp,0x20
c0021efa:	ba 01 00 00 00       	mov    edx,0x1
c0021eff:	84 c0                	test   al,al
c0021f01:	74 31                	je     c0021f34 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f07:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f0e:	89 03                	mov    DWORD PTR [ebx],eax
c0021f10:	ba 00 00 00 00       	mov    edx,0x0
c0021f15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f19:	85 c0                	test   eax,eax
c0021f1b:	0f 95 06             	setne  BYTE PTR [esi]
c0021f1e:	74 14                	je     c0021f34 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f20:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f26:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f2d:	eb 05                	jmp    c0021f34 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f2f:	ba 04 00 00 00       	mov    edx,0x4
c0021f34:	83 c4 14             	add    esp,0x14
c0021f37:	89 d0                	mov    eax,edx
c0021f39:	5b                   	pop    ebx
c0021f3a:	5e                   	pop    esi
c0021f3b:	c3                   	ret    

c0021f3c <ISO9660::openDir(char const*, void**)>:
c0021f3c:	57                   	push   edi
c0021f3d:	56                   	push   esi
c0021f3e:	53                   	push   ebx
c0021f3f:	83 ec 10             	sub    esp,0x10
c0021f42:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f46:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f4a:	85 ff                	test   edi,edi
c0021f4c:	74 7b                	je     c0021fc9 <ISO9660::openDir(char const*, void**)+0x8d>
c0021f4e:	85 f6                	test   esi,esi
c0021f50:	74 77                	je     c0021fc9 <ISO9660::openDir(char const*, void**)+0x8d>
c0021f52:	83 ec 0c             	sub    esp,0xc
c0021f55:	6a 1c                	push   0x1c
c0021f57:	e8 cd d8 fe ff       	call   c000f829 <malloc>
c0021f5c:	89 07                	mov    DWORD PTR [edi],eax
c0021f5e:	89 c3                	mov    ebx,eax
c0021f60:	58                   	pop    eax
c0021f61:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f65:	50                   	push   eax
c0021f66:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021f69:	50                   	push   eax
c0021f6a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f6e:	50                   	push   eax
c0021f6f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f73:	50                   	push   eax
c0021f74:	56                   	push   esi
c0021f75:	e8 cd fd ff ff       	call   c0021d47 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f7a:	83 c4 20             	add    esp,0x20
c0021f7d:	84 c0                	test   al,al
c0021f7f:	74 07                	je     c0021f88 <ISO9660::openDir(char const*, void**)+0x4c>
c0021f81:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021f86:	75 0b                	jne    c0021f93 <ISO9660::openDir(char const*, void**)+0x57>
c0021f88:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021f8c:	b8 01 00 00 00       	mov    eax,0x1
c0021f91:	eb 3b                	jmp    c0021fce <ISO9660::openDir(char const*, void**)+0x92>
c0021f93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f97:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021f9b:	89 03                	mov    DWORD PTR [ebx],eax
c0021f9d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021fa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fa8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021faf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fb6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021fb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021fc0:	8a 06                	mov    al,BYTE PTR [esi]
c0021fc2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021fc5:	31 c0                	xor    eax,eax
c0021fc7:	eb 05                	jmp    c0021fce <ISO9660::openDir(char const*, void**)+0x92>
c0021fc9:	b8 04 00 00 00       	mov    eax,0x4
c0021fce:	83 c4 10             	add    esp,0x10
c0021fd1:	5b                   	pop    ebx
c0021fd2:	5e                   	pop    esi
c0021fd3:	5f                   	pop    edi
c0021fd4:	c3                   	ret    
c0021fd5:	90                   	nop

c0021fd6 <ISO9660::ISO9660()>:
c0021fd6:	83 ec 0c             	sub    esp,0xc
c0021fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fdd:	83 ec 0c             	sub    esp,0xc
c0021fe0:	50                   	push   eax
c0021fe1:	e8 a6 0b ff ff       	call   c0012b8c <Filesystem::Filesystem()>
c0021fe6:	83 c4 10             	add    esp,0x10
c0021fe9:	ba d4 c8 02 c0       	mov    edx,0xc002c8d4
c0021fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff2:	89 10                	mov    DWORD PTR [eax],edx
c0021ff4:	90                   	nop
c0021ff5:	83 c4 0c             	add    esp,0xc
c0021ff8:	c3                   	ret    
c0021ff9:	90                   	nop

c0021ffa <SoundChannel::SoundChannel(int, int, int, int)>:
c0021ffa:	83 ec 1c             	sub    esp,0x1c
c0021ffd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022001:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022005:	89 10                	mov    DWORD PTR [eax],edx
c0022007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002200b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002200f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022016:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002201a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002201d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022022:	75 23                	jne    c0022047 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0022024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022028:	8b 10                	mov    edx,DWORD PTR [eax]
c002202a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002202e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022031:	0f af c2             	imul   eax,edx
c0022034:	85 c0                	test   eax,eax
c0022036:	79 03                	jns    c002203b <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0022038:	83 c0 03             	add    eax,0x3
c002203b:	c1 f8 02             	sar    eax,0x2
c002203e:	05 a0 0f 00 00       	add    eax,0xfa0
c0022043:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002204b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002204f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022056:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002205d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022061:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022068:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002206c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002206f:	c1 e0 02             	shl    eax,0x2
c0022072:	83 ec 0c             	sub    esp,0xc
c0022075:	50                   	push   eax
c0022076:	e8 ae d7 fe ff       	call   c000f829 <malloc>
c002207b:	83 c4 10             	add    esp,0x10
c002207e:	89 c2                	mov    edx,eax
c0022080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022084:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022087:	83 ec 04             	sub    esp,0x4
c002208a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002208e:	50                   	push   eax
c002208f:	6a 01                	push   0x1
c0022091:	6a 04                	push   0x4
c0022093:	e8 03 6d fe ff       	call   c0008d9b <src_new>
c0022098:	83 c4 10             	add    esp,0x10
c002209b:	89 c2                	mov    edx,eax
c002209d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220a1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00220a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a8:	85 c0                	test   eax,eax
c00220aa:	74 10                	je     c00220bc <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c00220ac:	83 ec 0c             	sub    esp,0xc
c00220af:	68 34 c9 02 c0       	push   0xc002c934
c00220b4:	e8 36 81 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c00220b9:	83 c4 10             	add    esp,0x10
c00220bc:	a0 a0 06 03 c0       	mov    al,ds:0xc00306a0
c00220c1:	83 f0 01             	xor    eax,0x1
c00220c4:	84 c0                	test   al,al
c00220c6:	74 57                	je     c002211f <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c00220c8:	a1 50 c9 02 c0       	mov    eax,ds:0xc002c950
c00220cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00220d9:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00220e1:	7f 35                	jg     c0022118 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c00220e3:	83 ec 0c             	sub    esp,0xc
c00220e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00220ea:	e8 60 54 00 00       	call   c002754f <__floatsisf>
c00220ef:	83 c4 10             	add    esp,0x10
c00220f2:	8b 15 50 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c950
c00220f8:	83 ec 08             	sub    esp,0x8
c00220fb:	52                   	push   edx
c00220fc:	50                   	push   eax
c00220fd:	e8 5f 50 00 00       	call   c0027161 <__mulsf3>
c0022102:	83 c4 10             	add    esp,0x10
c0022105:	89 c2                	mov    edx,eax
c0022107:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002210b:	89 14 85 a0 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd60],edx
c0022112:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022116:	eb c1                	jmp    c00220d9 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0022118:	c6 05 a0 06 03 c0 01 	mov    BYTE PTR ds:0xc00306a0,0x1
c002211f:	90                   	nop
c0022120:	83 c4 1c             	add    esp,0x1c
c0022123:	c3                   	ret    

c0022124 <SoundChannel::~SoundChannel()>:
c0022124:	83 ec 0c             	sub    esp,0xc
c0022127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002212b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002212e:	83 ec 0c             	sub    esp,0xc
c0022131:	50                   	push   eax
c0022132:	e8 02 d7 fe ff       	call   c000f839 <free>
c0022137:	83 c4 10             	add    esp,0x10
c002213a:	90                   	nop
c002213b:	83 c4 0c             	add    esp,0xc
c002213e:	c3                   	ret    
c002213f:	90                   	nop

c0022140 <SoundChannel::getSampleRate()>:
c0022140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022144:	8b 00                	mov    eax,DWORD PTR [eax]
c0022146:	c3                   	ret    
c0022147:	90                   	nop

c0022148 <SoundChannel::getBits()>:
c0022148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002214c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002214f:	c3                   	ret    

c0022150 <SoundChannel::getBufferUsed()>:
c0022150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022154:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022157:	c3                   	ret    

c0022158 <SoundChannel::getBufferSize()>:
c0022158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002215c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002215f:	c3                   	ret    

c0022160 <SoundChannel::unbuffer(float*, int, int)>:
c0022160:	56                   	push   esi
c0022161:	53                   	push   ebx
c0022162:	83 ec 40             	sub    esp,0x40
c0022165:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022169:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002216c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022170:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022173:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022177:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002217b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002217f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022183:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022187:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002218b:	e8 bf 53 00 00       	call   c002754f <__floatsisf>
c0022190:	5a                   	pop    edx
c0022191:	89 c6                	mov    esi,eax
c0022193:	ff 33                	push   DWORD PTR [ebx]
c0022195:	e8 b5 53 00 00       	call   c002754f <__floatsisf>
c002219a:	59                   	pop    ecx
c002219b:	5a                   	pop    edx
c002219c:	50                   	push   eax
c002219d:	56                   	push   esi
c002219e:	e8 81 51 00 00       	call   c0027324 <__divsf3>
c00221a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00221a6:	e8 74 66 00 00       	call   c002881f <__extendsfdf2>
c00221ab:	59                   	pop    ecx
c00221ac:	5e                   	pop    esi
c00221ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00221b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00221b5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00221bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00221c1:	50                   	push   eax
c00221c2:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00221c5:	e8 c6 67 fe ff       	call   c0008990 <src_process>
c00221ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00221ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00221d1:	83 c4 0c             	add    esp,0xc
c00221d4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00221d7:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00221da:	29 d0                	sub    eax,edx
c00221dc:	c1 e0 02             	shl    eax,0x2
c00221df:	50                   	push   eax
c00221e0:	8d 04 91             	lea    eax,[ecx+edx*4]
c00221e3:	50                   	push   eax
c00221e4:	51                   	push   ecx
c00221e5:	e8 9e e4 fd ff       	call   c0000688 <memmove>
c00221ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221ee:	83 c4 44             	add    esp,0x44
c00221f1:	5b                   	pop    ebx
c00221f2:	5e                   	pop    esi
c00221f3:	c3                   	ret    

c00221f4 <SoundChannel::buffer16(short*, int)>:
c00221f4:	55                   	push   ebp
c00221f5:	57                   	push   edi
c00221f6:	56                   	push   esi
c00221f7:	53                   	push   ebx
c00221f8:	83 ec 1c             	sub    esp,0x1c
c00221fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00221ff:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022202:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022205:	0f 84 d2 00 00 00    	je     c00222dd <SoundChannel::buffer16(short*, int)+0xe9>
c002220b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002220f:	85 ed                	test   ebp,ebp
c0022211:	0f 8e c6 00 00 00    	jle    c00222dd <SoundChannel::buffer16(short*, int)+0xe9>
c0022217:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002221b:	bd 00 00 00 38       	mov    ebp,0x38000000
c0022220:	83 ec 0c             	sub    esp,0xc
c0022223:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0022226:	50                   	push   eax
c0022227:	e8 23 53 00 00       	call   c002754f <__floatsisf>
c002222c:	59                   	pop    ecx
c002222d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022230:	5f                   	pop    edi
c0022231:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022234:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022237:	55                   	push   ebp
c0022238:	50                   	push   eax
c0022239:	e8 23 4f 00 00       	call   c0027161 <__mulsf3>
c002223e:	83 c4 10             	add    esp,0x10
c0022241:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022244:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022247:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c002224a:	0f 84 99 00 00 00    	je     c00222e9 <SoundChannel::buffer16(short*, int)+0xf5>
c0022250:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0022255:	74 78                	je     c00222cf <SoundChannel::buffer16(short*, int)+0xdb>
c0022257:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002225b:	83 ec 0c             	sub    esp,0xc
c002225e:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0022262:	50                   	push   eax
c0022263:	e8 e7 52 00 00       	call   c002754f <__floatsisf>
c0022268:	5f                   	pop    edi
c0022269:	8d 4e 01             	lea    ecx,[esi+0x1]
c002226c:	5a                   	pop    edx
c002226d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022270:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022273:	55                   	push   ebp
c0022274:	50                   	push   eax
c0022275:	e8 e7 4e 00 00       	call   c0027161 <__mulsf3>
c002227a:	83 c4 10             	add    esp,0x10
c002227d:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022280:	be 02 00 00 00       	mov    esi,0x2
c0022285:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022288:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c002228b:	74 46                	je     c00222d3 <SoundChannel::buffer16(short*, int)+0xdf>
c002228d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0022291:	eb 36                	jmp    c00222c9 <SoundChannel::buffer16(short*, int)+0xd5>
c0022293:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022297:	83 ec 0c             	sub    esp,0xc
c002229a:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c002229e:	46                   	inc    esi
c002229f:	50                   	push   eax
c00222a0:	e8 aa 52 00 00       	call   c002754f <__floatsisf>
c00222a5:	5a                   	pop    edx
c00222a6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00222a9:	59                   	pop    ecx
c00222aa:	8d 4f 01             	lea    ecx,[edi+0x1]
c00222ad:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00222b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222b4:	50                   	push   eax
c00222b5:	e8 a7 4e 00 00       	call   c0027161 <__mulsf3>
c00222ba:	83 c4 10             	add    esp,0x10
c00222bd:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c00222c1:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00222c4:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00222c7:	74 0a                	je     c00222d3 <SoundChannel::buffer16(short*, int)+0xdf>
c00222c9:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c00222cd:	75 c4                	jne    c0022293 <SoundChannel::buffer16(short*, int)+0x9f>
c00222cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00222d3:	83 c4 1c             	add    esp,0x1c
c00222d6:	89 f0                	mov    eax,esi
c00222d8:	5b                   	pop    ebx
c00222d9:	5e                   	pop    esi
c00222da:	5f                   	pop    edi
c00222db:	5d                   	pop    ebp
c00222dc:	c3                   	ret    
c00222dd:	83 c4 1c             	add    esp,0x1c
c00222e0:	31 f6                	xor    esi,esi
c00222e2:	5b                   	pop    ebx
c00222e3:	89 f0                	mov    eax,esi
c00222e5:	5e                   	pop    esi
c00222e6:	5f                   	pop    edi
c00222e7:	5d                   	pop    ebp
c00222e8:	c3                   	ret    
c00222e9:	be 01 00 00 00       	mov    esi,0x1
c00222ee:	eb e3                	jmp    c00222d3 <SoundChannel::buffer16(short*, int)+0xdf>

c00222f0 <SoundChannel::buffer8(unsigned char*, int)>:
c00222f0:	55                   	push   ebp
c00222f1:	57                   	push   edi
c00222f2:	56                   	push   esi
c00222f3:	53                   	push   ebx
c00222f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222f8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00222fc:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00222ff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022303:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022306:	74 7a                	je     c0022382 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022308:	85 ff                	test   edi,edi
c002230a:	7e 76                	jle    c0022382 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002230c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022310:	8d 70 01             	lea    esi,[eax+0x1]
c0022313:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022316:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022319:	8b 1c 9d a0 02 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfd60]
c0022320:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022323:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022326:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022329:	74 5e                	je     c0022389 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002232b:	83 ff 01             	cmp    edi,0x1
c002232e:	74 4b                	je     c002237b <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022330:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022334:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022337:	8d 70 01             	lea    esi,[eax+0x1]
c002233a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002233d:	8b 1c 9d a0 02 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfd60]
c0022344:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022347:	b8 02 00 00 00       	mov    eax,0x2
c002234c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002234f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022352:	75 23                	jne    c0022377 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022354:	eb 27                	jmp    c002237d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022356:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002235b:	8d 71 01             	lea    esi,[ecx+0x1]
c002235e:	40                   	inc    eax
c002235f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022362:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022365:	8b 1c 9d a0 02 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfd60]
c002236c:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002236f:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022372:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022375:	74 06                	je     c002237d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022377:	39 c7                	cmp    edi,eax
c0022379:	75 db                	jne    c0022356 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002237b:	89 f8                	mov    eax,edi
c002237d:	5b                   	pop    ebx
c002237e:	5e                   	pop    esi
c002237f:	5f                   	pop    edi
c0022380:	5d                   	pop    ebp
c0022381:	c3                   	ret    
c0022382:	5b                   	pop    ebx
c0022383:	31 c0                	xor    eax,eax
c0022385:	5e                   	pop    esi
c0022386:	5f                   	pop    edi
c0022387:	5d                   	pop    ebp
c0022388:	c3                   	ret    
c0022389:	b8 01 00 00 00       	mov    eax,0x1
c002238e:	eb ed                	jmp    c002237d <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022390 <SoundDevice::SoundDevice(char const*)>:
c0022390:	83 ec 1c             	sub    esp,0x1c
c0022393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022397:	83 ec 08             	sub    esp,0x8
c002239a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002239e:	50                   	push   eax
c002239f:	e8 1a 1b ff ff       	call   c0013ebe <Device::Device(char const*)>
c00223a4:	83 c4 10             	add    esp,0x10
c00223a7:	ba 5c c9 02 c0       	mov    edx,0xc002c95c
c00223ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b0:	89 10                	mov    DWORD PTR [eax],edx
c00223b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b6:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00223c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223c4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00223ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223d6:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00223db:	7f 19                	jg     c00223f6 <SoundDevice::SoundDevice(char const*)+0x66>
c00223dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00223e5:	83 c2 54             	add    edx,0x54
c00223e8:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00223f0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00223f4:	eb e0                	jmp    c00223d6 <SoundDevice::SoundDevice(char const*)+0x46>
c00223f6:	90                   	nop
c00223f7:	83 c4 1c             	add    esp,0x1c
c00223fa:	c3                   	ret    
c00223fb:	90                   	nop

c00223fc <SoundDevice::~SoundDevice()>:
c00223fc:	53                   	push   ebx
c00223fd:	83 ec 18             	sub    esp,0x18
c0022400:	ba 5c c9 02 c0       	mov    edx,0xc002c95c
c0022405:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022409:	89 10                	mov    DWORD PTR [eax],edx
c002240b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022413:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022418:	7f 46                	jg     c0022460 <SoundDevice::~SoundDevice()+0x64>
c002241a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002241e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022422:	83 c2 54             	add    edx,0x54
c0022425:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022429:	85 c0                	test   eax,eax
c002242b:	74 2d                	je     c002245a <SoundDevice::~SoundDevice()+0x5e>
c002242d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022431:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022435:	83 c2 54             	add    edx,0x54
c0022438:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002243c:	85 db                	test   ebx,ebx
c002243e:	74 1a                	je     c002245a <SoundDevice::~SoundDevice()+0x5e>
c0022440:	83 ec 0c             	sub    esp,0xc
c0022443:	53                   	push   ebx
c0022444:	e8 db fc ff ff       	call   c0022124 <SoundChannel::~SoundChannel()>
c0022449:	83 c4 10             	add    esp,0x10
c002244c:	83 ec 08             	sub    esp,0x8
c002244f:	6a 2c                	push   0x2c
c0022451:	53                   	push   ebx
c0022452:	e8 52 03 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0022457:	83 c4 10             	add    esp,0x10
c002245a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002245e:	eb b3                	jmp    c0022413 <SoundDevice::~SoundDevice()+0x17>
c0022460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022464:	83 ec 0c             	sub    esp,0xc
c0022467:	50                   	push   eax
c0022468:	e8 1b 17 ff ff       	call   c0013b88 <Device::~Device()>
c002246d:	83 c4 10             	add    esp,0x10
c0022470:	90                   	nop
c0022471:	83 c4 18             	add    esp,0x18
c0022474:	5b                   	pop    ebx
c0022475:	c3                   	ret    

c0022476 <SoundDevice::~SoundDevice()>:
c0022476:	83 ec 0c             	sub    esp,0xc
c0022479:	83 ec 0c             	sub    esp,0xc
c002247c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022480:	e8 77 ff ff ff       	call   c00223fc <SoundDevice::~SoundDevice()>
c0022485:	83 c4 10             	add    esp,0x10
c0022488:	83 ec 08             	sub    esp,0x8
c002248b:	68 e4 01 00 00       	push   0x1e4
c0022490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022494:	e8 10 03 ff ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0022499:	83 c4 10             	add    esp,0x10
c002249c:	83 c4 0c             	add    esp,0xc
c002249f:	c3                   	ret    

c00224a0 <SoundDevice::getFreeChannelNum()>:
c00224a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00224a4:	31 c0                	xor    eax,eax
c00224a6:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00224ae:	74 09                	je     c00224b9 <SoundDevice::getFreeChannelNum()+0x19>
c00224b0:	40                   	inc    eax
c00224b1:	83 f8 20             	cmp    eax,0x20
c00224b4:	75 f0                	jne    c00224a6 <SoundDevice::getFreeChannelNum()+0x6>
c00224b6:	83 c8 ff             	or     eax,0xffffffff
c00224b9:	c3                   	ret    

c00224ba <SoundDevice::addChannel(SoundChannel*)>:
c00224ba:	56                   	push   esi
c00224bb:	53                   	push   ebx
c00224bc:	51                   	push   ecx
c00224bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00224c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00224c5:	53                   	push   ebx
c00224c6:	e8 d5 ff ff ff       	call   c00224a0 <SoundDevice::getFreeChannelNum()>
c00224cb:	5a                   	pop    edx
c00224cc:	83 f8 ff             	cmp    eax,0xffffffff
c00224cf:	74 51                	je     c0022522 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00224d1:	85 f6                	test   esi,esi
c00224d3:	74 4d                	je     c0022522 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00224d5:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00224dc:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00224e3:	75 30                	jne    c0022515 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00224e5:	83 ec 0c             	sub    esp,0xc
c00224e8:	56                   	push   esi
c00224e9:	e8 52 fc ff ff       	call   c0022140 <SoundChannel::getSampleRate()>
c00224ee:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00224f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00224f7:	e8 4c fc ff ff       	call   c0022148 <SoundChannel::getBits()>
c00224fc:	83 c4 0c             	add    esp,0xc
c00224ff:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022505:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022507:	50                   	push   eax
c0022508:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002250e:	53                   	push   ebx
c002250f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022512:	83 c4 10             	add    esp,0x10
c0022515:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002251b:	b8 01 00 00 00       	mov    eax,0x1
c0022520:	eb 03                	jmp    c0022525 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022522:	83 c8 ff             	or     eax,0xffffffff
c0022525:	5a                   	pop    edx
c0022526:	5b                   	pop    ebx
c0022527:	5e                   	pop    esi
c0022528:	c3                   	ret    
c0022529:	90                   	nop

c002252a <SoundDevice::removeChannel(int)>:
c002252a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002252e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022532:	83 fa 1f             	cmp    edx,0x1f
c0022535:	77 23                	ja     c002255a <SoundDevice::removeChannel(int)+0x30>
c0022537:	8d 14 90             	lea    edx,[eax+edx*4]
c002253a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022541:	74 17                	je     c002255a <SoundDevice::removeChannel(int)+0x30>
c0022543:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002254d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022553:	75 05                	jne    c002255a <SoundDevice::removeChannel(int)+0x30>
c0022555:	8b 00                	mov    eax,DWORD PTR [eax]
c0022557:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c002255a:	c3                   	ret    
c002255b:	90                   	nop

c002255c <SoundDevice::floatTo16(float*, short*, int)>:
c002255c:	57                   	push   edi
c002255d:	56                   	push   esi
c002255e:	53                   	push   ebx
c002255f:	31 db                	xor    ebx,ebx
c0022561:	83 ec 10             	sub    esp,0x10
c0022564:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022568:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002256c:	0f 8d d0 00 00 00    	jge    c0022642 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022572:	83 ec 0c             	sub    esp,0xc
c0022575:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022579:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002257c:	e8 9e 62 00 00       	call   c002881f <__extendsfdf2>
c0022581:	83 c4 10             	add    esp,0x10
c0022584:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022588:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002258c:	68 00 00 f0 3f       	push   0x3ff00000
c0022591:	6a 00                	push   0x0
c0022593:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022597:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002259b:	e8 0b 52 00 00       	call   c00277ab <__adddf3>
c00225a0:	83 c4 10             	add    esp,0x10
c00225a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225ab:	68 00 00 e0 3f       	push   0x3fe00000
c00225b0:	6a 00                	push   0x0
c00225b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225ba:	e8 69 58 00 00       	call   c0027e28 <__muldf3>
c00225bf:	83 c4 10             	add    esp,0x10
c00225c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225ca:	68 c0 ff df 40       	push   0x40dfffc0
c00225cf:	6a 00                	push   0x0
c00225d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225d9:	e8 4a 58 00 00       	call   c0027e28 <__muldf3>
c00225de:	59                   	pop    ecx
c00225df:	5f                   	pop    edi
c00225e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00225e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00225e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225f0:	e8 06 61 00 00       	call   c00286fb <__truncdfsf2>
c00225f5:	5a                   	pop    edx
c00225f6:	89 c7                	mov    edi,eax
c00225f8:	59                   	pop    ecx
c00225f9:	68 00 fe ff 46       	push   0x46fffe00
c00225fe:	50                   	push   eax
c00225ff:	e8 a1 51 00 00       	call   c00277a5 <__gesf2>
c0022604:	83 c4 10             	add    esp,0x10
c0022607:	85 c0                	test   eax,eax
c0022609:	78 08                	js     c0022613 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c002260b:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022611:	eb 29                	jmp    c002263c <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022613:	50                   	push   eax
c0022614:	50                   	push   eax
c0022615:	6a 00                	push   0x0
c0022617:	57                   	push   edi
c0022618:	e8 8c 51 00 00       	call   c00277a9 <__lesf2>
c002261d:	83 c4 10             	add    esp,0x10
c0022620:	85 c0                	test   eax,eax
c0022622:	7f 08                	jg     c002262c <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022624:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c002262a:	eb 10                	jmp    c002263c <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002262c:	83 ec 0c             	sub    esp,0xc
c002262f:	57                   	push   edi
c0022630:	e8 87 62 00 00       	call   c00288bc <lrintf>
c0022635:	83 c4 10             	add    esp,0x10
c0022638:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c002263c:	43                   	inc    ebx
c002263d:	e9 26 ff ff ff       	jmp    c0022568 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022642:	83 c4 10             	add    esp,0x10
c0022645:	5b                   	pop    ebx
c0022646:	5e                   	pop    esi
c0022647:	5f                   	pop    edi
c0022648:	c3                   	ret    
c0022649:	90                   	nop

c002264a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002264a:	57                   	push   edi
c002264b:	56                   	push   esi
c002264c:	53                   	push   ebx
c002264d:	31 db                	xor    ebx,ebx
c002264f:	83 ec 10             	sub    esp,0x10
c0022652:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022656:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002265a:	0f 8d cb 00 00 00    	jge    c002272b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022660:	83 ec 0c             	sub    esp,0xc
c0022663:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022667:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002266a:	e8 b0 61 00 00       	call   c002881f <__extendsfdf2>
c002266f:	83 c4 10             	add    esp,0x10
c0022672:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022676:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002267a:	68 00 00 f0 3f       	push   0x3ff00000
c002267f:	6a 00                	push   0x0
c0022681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022685:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022689:	e8 1d 51 00 00       	call   c00277ab <__adddf3>
c002268e:	83 c4 10             	add    esp,0x10
c0022691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022699:	68 00 00 e0 3f       	push   0x3fe00000
c002269e:	6a 00                	push   0x0
c00226a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226a8:	e8 7b 57 00 00       	call   c0027e28 <__muldf3>
c00226ad:	83 c4 10             	add    esp,0x10
c00226b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226b8:	68 00 00 60 40       	push   0x40600000
c00226bd:	6a 00                	push   0x0
c00226bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226c7:	e8 5c 57 00 00       	call   c0027e28 <__muldf3>
c00226cc:	59                   	pop    ecx
c00226cd:	5f                   	pop    edi
c00226ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00226d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00226d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226de:	e8 18 60 00 00       	call   c00286fb <__truncdfsf2>
c00226e3:	5a                   	pop    edx
c00226e4:	89 c7                	mov    edi,eax
c00226e6:	59                   	pop    ecx
c00226e7:	68 00 00 fe 42       	push   0x42fe0000
c00226ec:	50                   	push   eax
c00226ed:	e8 b3 50 00 00       	call   c00277a5 <__gesf2>
c00226f2:	83 c4 10             	add    esp,0x10
c00226f5:	85 c0                	test   eax,eax
c00226f7:	78 06                	js     c00226ff <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00226f9:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00226fd:	eb 26                	jmp    c0022725 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00226ff:	50                   	push   eax
c0022700:	50                   	push   eax
c0022701:	6a 00                	push   0x0
c0022703:	57                   	push   edi
c0022704:	e8 a0 50 00 00       	call   c00277a9 <__lesf2>
c0022709:	83 c4 10             	add    esp,0x10
c002270c:	85 c0                	test   eax,eax
c002270e:	7f 06                	jg     c0022716 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022710:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022714:	eb 0f                	jmp    c0022725 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022716:	83 ec 0c             	sub    esp,0xc
c0022719:	57                   	push   edi
c002271a:	e8 9d 61 00 00       	call   c00288bc <lrintf>
c002271f:	83 c4 10             	add    esp,0x10
c0022722:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022725:	43                   	inc    ebx
c0022726:	e9 2b ff ff ff       	jmp    c0022656 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002272b:	83 c4 10             	add    esp,0x10
c002272e:	5b                   	pop    ebx
c002272f:	5e                   	pop    esi
c0022730:	5f                   	pop    edi
c0022731:	c3                   	ret    

c0022732 <SoundDevice::getAudio(int, float*, float*)>:
c0022732:	55                   	push   ebp
c0022733:	31 ed                	xor    ebp,ebp
c0022735:	57                   	push   edi
c0022736:	56                   	push   esi
c0022737:	31 f6                	xor    esi,esi
c0022739:	53                   	push   ebx
c002273a:	83 ec 20             	sub    esp,0x20
c002273d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022741:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022745:	c1 e0 02             	shl    eax,0x2
c0022748:	50                   	push   eax
c0022749:	6a 00                	push   0x0
c002274b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002274f:	e8 fc df fd ff       	call   c0000750 <memset>
c0022754:	83 c4 10             	add    esp,0x10
c0022757:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002275f:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c0022766:	85 c9                	test   ecx,ecx
c0022768:	74 52                	je     c00227bc <SoundDevice::getAudio(int, float*, float*)+0x8a>
c002276a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002276e:	99                   	cdq    
c002276f:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022775:	50                   	push   eax
c0022776:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002277c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022780:	51                   	push   ecx
c0022781:	e8 da f9 ff ff       	call   c0022160 <SoundChannel::unbuffer(float*, int, int)>
c0022786:	31 d2                	xor    edx,edx
c0022788:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002278c:	83 c4 10             	add    esp,0x10
c002278f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022793:	7d 1e                	jge    c00227b3 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022795:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022799:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002279d:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c00227a0:	89 cf                	mov    edi,ecx
c00227a2:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00227a8:	0f af ca             	imul   ecx,edx
c00227ab:	42                   	inc    edx
c00227ac:	01 e9                	add    ecx,ebp
c00227ae:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c00227b1:	eb dc                	jmp    c002278f <SoundDevice::getAudio(int, float*, float*)+0x5d>
c00227b3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00227b7:	45                   	inc    ebp
c00227b8:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00227bc:	46                   	inc    esi
c00227bd:	83 fe 20             	cmp    esi,0x20
c00227c0:	75 9d                	jne    c002275f <SoundDevice::getAudio(int, float*, float*)+0x2d>
c00227c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227c6:	83 c4 1c             	add    esp,0x1c
c00227c9:	5b                   	pop    ebx
c00227ca:	5e                   	pop    esi
c00227cb:	5f                   	pop    edi
c00227cc:	5d                   	pop    ebp
c00227cd:	c3                   	ret    

c00227ce <PCI::open(int, int, void*)>:
c00227ce:	83 ec 18             	sub    esp,0x18
c00227d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00227d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00227d9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00227df:	8b 10                	mov    edx,DWORD PTR [eax]
c00227e1:	50                   	push   eax
c00227e2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00227e5:	31 c0                	xor    eax,eax
c00227e7:	83 c4 1c             	add    esp,0x1c
c00227ea:	c3                   	ret    
c00227eb:	90                   	nop

c00227ec <PCI::close(int, int, void*)>:
c00227ec:	31 c0                	xor    eax,eax
c00227ee:	c3                   	ret    
c00227ef:	90                   	nop

c00227f0 <PCI::PCI()>:
c00227f0:	83 ec 0c             	sub    esp,0xc
c00227f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227f7:	83 ec 08             	sub    esp,0x8
c00227fa:	68 8c c9 02 c0       	push   0xc002c98c
c00227ff:	50                   	push   eax
c0022800:	e8 1d 0d ff ff       	call   c0013522 <Bus::Bus(char const*)>
c0022805:	83 c4 10             	add    esp,0x10
c0022808:	ba 78 ca 02 c0       	mov    edx,0xc002ca78
c002280d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022811:	89 10                	mov    DWORD PTR [eax],edx
c0022813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022817:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022825:	a3 a4 06 03 c0       	mov    ds:0xc00306a4,eax
c002282a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002282e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022834:	0f b6 d0             	movzx  edx,al
c0022837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002283b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022846:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002284c:	0f b6 d0             	movzx  edx,al
c002284f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022853:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002285c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022862:	8d 50 01             	lea    edx,[eax+0x1]
c0022865:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022869:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002286f:	0f b6 d0             	movzx  edx,al
c0022872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022876:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002287a:	83 c9 c0             	or     ecx,0xffffffc0
c002287d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022881:	90                   	nop
c0022882:	83 c4 0c             	add    esp,0xc
c0022885:	c3                   	ret    

c0022886 <PCI::readBAR8(unsigned int, int)>:
c0022886:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002288a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002288e:	f6 c2 01             	test   dl,0x1
c0022891:	74 07                	je     c002289a <PCI::readBAR8(unsigned int, int)+0x14>
c0022893:	83 e2 fc             	and    edx,0xfffffffc
c0022896:	01 c2                	add    edx,eax
c0022898:	ec                   	in     al,dx
c0022899:	c3                   	ret    
c002289a:	83 e2 f0             	and    edx,0xfffffff0
c002289d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00228a0:	c3                   	ret    
c00228a1:	90                   	nop

c00228a2 <PCI::readBAR16(unsigned int, int)>:
c00228a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00228a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228aa:	f6 c2 01             	test   dl,0x1
c00228ad:	74 08                	je     c00228b7 <PCI::readBAR16(unsigned int, int)+0x15>
c00228af:	83 e2 fc             	and    edx,0xfffffffc
c00228b2:	01 c2                	add    edx,eax
c00228b4:	66 ed                	in     ax,dx
c00228b6:	c3                   	ret    
c00228b7:	83 e2 f0             	and    edx,0xfffffff0
c00228ba:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00228be:	c3                   	ret    
c00228bf:	90                   	nop

c00228c0 <PCI::readBAR32(unsigned int, int)>:
c00228c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00228c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228c8:	f6 c2 01             	test   dl,0x1
c00228cb:	74 07                	je     c00228d4 <PCI::readBAR32(unsigned int, int)+0x14>
c00228cd:	83 e2 fc             	and    edx,0xfffffffc
c00228d0:	01 c2                	add    edx,eax
c00228d2:	ed                   	in     eax,dx
c00228d3:	c3                   	ret    
c00228d4:	83 e2 f0             	and    edx,0xfffffff0
c00228d7:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00228da:	c3                   	ret    
c00228db:	90                   	nop

c00228dc <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00228dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00228e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228e8:	f6 c2 01             	test   dl,0x1
c00228eb:	74 07                	je     c00228f4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00228ed:	83 e2 fc             	and    edx,0xfffffffc
c00228f0:	01 ca                	add    edx,ecx
c00228f2:	ee                   	out    dx,al
c00228f3:	c3                   	ret    
c00228f4:	83 e2 f0             	and    edx,0xfffffff0
c00228f7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00228fa:	c3                   	ret    
c00228fb:	90                   	nop

c00228fc <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00228fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022900:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022904:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022908:	f6 c2 01             	test   dl,0x1
c002290b:	74 08                	je     c0022915 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002290d:	83 e2 fc             	and    edx,0xfffffffc
c0022910:	01 ca                	add    edx,ecx
c0022912:	66 ef                	out    dx,ax
c0022914:	c3                   	ret    
c0022915:	83 e2 f0             	and    edx,0xfffffff0
c0022918:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002291c:	c3                   	ret    
c002291d:	90                   	nop

c002291e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002291e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022922:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002292a:	f6 c2 01             	test   dl,0x1
c002292d:	74 07                	je     c0022936 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002292f:	83 e2 fc             	and    edx,0xfffffffc
c0022932:	01 ca                	add    edx,ecx
c0022934:	ef                   	out    dx,eax
c0022935:	c3                   	ret    
c0022936:	83 e2 f0             	and    edx,0xfffffff0
c0022939:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002293c:	c3                   	ret    
c002293d:	90                   	nop

c002293e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002293e:	55                   	push   ebp
c002293f:	57                   	push   edi
c0022940:	56                   	push   esi
c0022941:	53                   	push   ebx
c0022942:	83 ec 0c             	sub    esp,0xc
c0022945:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022949:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002294d:	89 f0                	mov    eax,esi
c002294f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022953:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022957:	3c 07                	cmp    al,0x7
c0022959:	76 10                	jbe    c002296b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002295b:	83 ec 0c             	sub    esp,0xc
c002295e:	68 94 c9 02 c0       	push   0xc002c994
c0022963:	e8 87 78 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0022968:	83 c4 10             	add    esp,0x10
c002296b:	80 fb 0f             	cmp    bl,0xf
c002296e:	76 10                	jbe    c0022980 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022970:	83 ec 0c             	sub    esp,0xc
c0022973:	68 c4 c9 02 c0       	push   0xc002c9c4
c0022978:	e8 72 78 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c002297d:	83 c4 10             	add    esp,0x10
c0022980:	8d 04 36             	lea    eax,[esi+esi*1]
c0022983:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022988:	83 c8 f0             	or     eax,0xfffffff0
c002298b:	ee                   	out    dx,al
c002298c:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022991:	89 e8                	mov    eax,ebp
c0022993:	ee                   	out    dx,al
c0022994:	83 c4 0c             	add    esp,0xc
c0022997:	89 d8                	mov    eax,ebx
c0022999:	66 81 e7 fc 00       	and    di,0xfc
c002299e:	5b                   	pop    ebx
c002299f:	c1 e0 08             	shl    eax,0x8
c00229a2:	5e                   	pop    esi
c00229a3:	09 f8                	or     eax,edi
c00229a5:	5f                   	pop    edi
c00229a6:	66 0d 00 c0          	or     ax,0xc000
c00229aa:	5d                   	pop    ebp
c00229ab:	c3                   	ret    

c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00229ac:	57                   	push   edi
c00229ad:	56                   	push   esi
c00229ae:	53                   	push   ebx
c00229af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00229b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00229b7:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00229bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00229c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00229c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00229c9:	83 ff 01             	cmp    edi,0x1
c00229cc:	75 3e                	jne    c0022a0c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00229ce:	89 de                	mov    esi,ebx
c00229d0:	0f b6 c0             	movzx  eax,al
c00229d3:	81 e6 fc 00 00 00    	and    esi,0xfc
c00229d9:	c1 e0 10             	shl    eax,0x10
c00229dc:	0f b6 c9             	movzx  ecx,cl
c00229df:	09 f0                	or     eax,esi
c00229e1:	c1 e1 08             	shl    ecx,0x8
c00229e4:	0f b6 d2             	movzx  edx,dl
c00229e7:	09 c8                	or     eax,ecx
c00229e9:	c1 e2 0b             	shl    edx,0xb
c00229ec:	09 d0                	or     eax,edx
c00229ee:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229f3:	0d 00 00 00 80       	or     eax,0x80000000
c00229f8:	ef                   	out    dx,eax
c00229f9:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229fe:	ed                   	in     eax,dx
c00229ff:	83 e3 02             	and    ebx,0x2
c0022a02:	0f b6 cb             	movzx  ecx,bl
c0022a05:	c1 e1 03             	shl    ecx,0x3
c0022a08:	d3 e8                	shr    eax,cl
c0022a0a:	eb 43                	jmp    c0022a4f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022a0c:	83 ff 02             	cmp    edi,0x2
c0022a0f:	75 2c                	jne    c0022a3d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022a11:	83 ec 0c             	sub    esp,0xc
c0022a14:	0f b6 c9             	movzx  ecx,cl
c0022a17:	0f b6 d2             	movzx  edx,dl
c0022a1a:	0f b6 fb             	movzx  edi,bl
c0022a1d:	0f b6 c0             	movzx  eax,al
c0022a20:	57                   	push   edi
c0022a21:	51                   	push   ecx
c0022a22:	52                   	push   edx
c0022a23:	50                   	push   eax
c0022a24:	56                   	push   esi
c0022a25:	e8 14 ff ff ff       	call   c002293e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a2a:	89 c2                	mov    edx,eax
c0022a2c:	ed                   	in     eax,dx
c0022a2d:	83 e3 02             	and    ebx,0x2
c0022a30:	83 c4 20             	add    esp,0x20
c0022a33:	0f b6 cb             	movzx  ecx,bl
c0022a36:	c1 e1 03             	shl    ecx,0x3
c0022a39:	d3 e8                	shr    eax,cl
c0022a3b:	eb 12                	jmp    c0022a4f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022a3d:	83 ec 0c             	sub    esp,0xc
c0022a40:	68 f4 c9 02 c0       	push   0xc002c9f4
c0022a45:	e8 a5 77 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0022a4a:	83 c4 10             	add    esp,0x10
c0022a4d:	31 c0                	xor    eax,eax
c0022a4f:	5b                   	pop    ebx
c0022a50:	5e                   	pop    esi
c0022a51:	5f                   	pop    edi
c0022a52:	c3                   	ret    
c0022a53:	90                   	nop

c0022a54 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a54:	83 ec 18             	sub    esp,0x18
c0022a57:	6a 00                	push   0x0
c0022a59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a5e:	50                   	push   eax
c0022a5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a64:	50                   	push   eax
c0022a65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a6a:	50                   	push   eax
c0022a6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022a6f:	e8 38 ff ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a74:	83 c4 2c             	add    esp,0x2c
c0022a77:	c3                   	ret    

c0022a78 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a78:	83 ec 18             	sub    esp,0x18
c0022a7b:	6a 0e                	push   0xe
c0022a7d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a82:	50                   	push   eax
c0022a83:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a88:	50                   	push   eax
c0022a89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a8e:	50                   	push   eax
c0022a8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022a93:	e8 14 ff ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a98:	83 c4 2c             	add    esp,0x2c
c0022a9b:	0f b6 c0             	movzx  eax,al
c0022a9e:	c3                   	ret    
c0022a9f:	90                   	nop

c0022aa0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022aa0:	55                   	push   ebp
c0022aa1:	57                   	push   edi
c0022aa2:	56                   	push   esi
c0022aa3:	53                   	push   ebx
c0022aa4:	83 ec 18             	sub    esp,0x18
c0022aa7:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022aac:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022ab1:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022ab6:	6a 0a                	push   0xa
c0022ab8:	56                   	push   esi
c0022ab9:	55                   	push   ebp
c0022aba:	57                   	push   edi
c0022abb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022abf:	e8 e8 fe ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac4:	83 c4 14             	add    esp,0x14
c0022ac7:	89 c3                	mov    ebx,eax
c0022ac9:	6a 0a                	push   0xa
c0022acb:	0f b6 db             	movzx  ebx,bl
c0022ace:	56                   	push   esi
c0022acf:	55                   	push   ebp
c0022ad0:	57                   	push   edi
c0022ad1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022ad5:	e8 d2 fe ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ada:	83 c4 2c             	add    esp,0x2c
c0022add:	25 00 ff 00 00       	and    eax,0xff00
c0022ae2:	09 d8                	or     eax,ebx
c0022ae4:	5b                   	pop    ebx
c0022ae5:	5e                   	pop    esi
c0022ae6:	5f                   	pop    edi
c0022ae7:	5d                   	pop    ebp
c0022ae8:	c3                   	ret    
c0022ae9:	90                   	nop

c0022aea <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022aea:	83 ec 18             	sub    esp,0x18
c0022aed:	6a 08                	push   0x8
c0022aef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022af4:	50                   	push   eax
c0022af5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022afa:	50                   	push   eax
c0022afb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b00:	50                   	push   eax
c0022b01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022b05:	e8 a2 fe ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0a:	83 c4 2c             	add    esp,0x2c
c0022b0d:	0f b6 c4             	movzx  eax,ah
c0022b10:	c3                   	ret    
c0022b11:	90                   	nop

c0022b12 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b12:	83 ec 18             	sub    esp,0x18
c0022b15:	6a 08                	push   0x8
c0022b17:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b1c:	50                   	push   eax
c0022b1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b22:	50                   	push   eax
c0022b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b28:	50                   	push   eax
c0022b29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022b2d:	e8 7a fe ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b32:	83 c4 2c             	add    esp,0x2c
c0022b35:	c3                   	ret    

c0022b36 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b36:	83 ec 18             	sub    esp,0x18
c0022b39:	6a 3c                	push   0x3c
c0022b3b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b40:	50                   	push   eax
c0022b41:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b46:	50                   	push   eax
c0022b47:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b4c:	50                   	push   eax
c0022b4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022b51:	e8 56 fe ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b56:	83 c4 2c             	add    esp,0x2c
c0022b59:	c3                   	ret    

c0022b5a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b5a:	83 ec 18             	sub    esp,0x18
c0022b5d:	6a 18                	push   0x18
c0022b5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b64:	50                   	push   eax
c0022b65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b6a:	50                   	push   eax
c0022b6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b70:	50                   	push   eax
c0022b71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022b75:	e8 32 fe ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b7a:	83 c4 2c             	add    esp,0x2c
c0022b7d:	0f b6 c4             	movzx  eax,ah
c0022b80:	c3                   	ret    
c0022b81:	90                   	nop

c0022b82 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b82:	55                   	push   ebp
c0022b83:	57                   	push   edi
c0022b84:	56                   	push   esi
c0022b85:	53                   	push   ebx
c0022b86:	83 ec 28             	sub    esp,0x28
c0022b89:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022b8d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022b92:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022b97:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022b9c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022ba3:	8d 43 12             	lea    eax,[ebx+0x12]
c0022ba6:	83 c3 10             	add    ebx,0x10
c0022ba9:	0f b6 c0             	movzx  eax,al
c0022bac:	0f b6 db             	movzx  ebx,bl
c0022baf:	50                   	push   eax
c0022bb0:	51                   	push   ecx
c0022bb1:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022bb5:	57                   	push   edi
c0022bb6:	55                   	push   ebp
c0022bb7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022bbb:	e8 ec fd ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bc0:	83 c4 14             	add    esp,0x14
c0022bc3:	89 c6                	mov    esi,eax
c0022bc5:	53                   	push   ebx
c0022bc6:	c1 e6 10             	shl    esi,0x10
c0022bc9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022bcd:	51                   	push   ecx
c0022bce:	57                   	push   edi
c0022bcf:	55                   	push   ebp
c0022bd0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022bd4:	e8 d3 fd ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bd9:	83 c4 3c             	add    esp,0x3c
c0022bdc:	0f b7 c0             	movzx  eax,ax
c0022bdf:	5b                   	pop    ebx
c0022be0:	09 f0                	or     eax,esi
c0022be2:	5e                   	pop    esi
c0022be3:	5f                   	pop    edi
c0022be4:	5d                   	pop    ebp
c0022be5:	c3                   	ret    

c0022be6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022be6:	55                   	push   ebp
c0022be7:	57                   	push   edi
c0022be8:	56                   	push   esi
c0022be9:	53                   	push   ebx
c0022bea:	83 ec 0c             	sub    esp,0xc
c0022bed:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022bf1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022bf5:	89 f5                	mov    ebp,esi
c0022bf7:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022bfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022c01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022c05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c09:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022c0d:	83 f9 01             	cmp    ecx,0x1
c0022c10:	75 5d                	jne    c0022c6f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022c12:	0f b6 c8             	movzx  ecx,al
c0022c15:	0f b6 d2             	movzx  edx,dl
c0022c18:	c1 e1 10             	shl    ecx,0x10
c0022c1b:	c1 e2 0b             	shl    edx,0xb
c0022c1e:	89 f0                	mov    eax,esi
c0022c20:	25 fc 00 00 00       	and    eax,0xfc
c0022c25:	09 c1                	or     ecx,eax
c0022c27:	89 e8                	mov    eax,ebp
c0022c29:	0f b6 c0             	movzx  eax,al
c0022c2c:	c1 e0 08             	shl    eax,0x8
c0022c2f:	09 c1                	or     ecx,eax
c0022c31:	09 d1                	or     ecx,edx
c0022c33:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c38:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022c3e:	89 c8                	mov    eax,ecx
c0022c40:	ef                   	out    dx,eax
c0022c41:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c46:	ed                   	in     eax,dx
c0022c47:	0f b7 db             	movzx  ebx,bx
c0022c4a:	83 e6 02             	and    esi,0x2
c0022c4d:	74 0a                	je     c0022c59 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022c4f:	0f b7 d0             	movzx  edx,ax
c0022c52:	c1 e3 10             	shl    ebx,0x10
c0022c55:	09 d3                	or     ebx,edx
c0022c57:	eb 05                	jmp    c0022c5e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022c59:	66 31 c0             	xor    ax,ax
c0022c5c:	09 c3                	or     ebx,eax
c0022c5e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c63:	89 c8                	mov    eax,ecx
c0022c65:	ef                   	out    dx,eax
c0022c66:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c6b:	89 d8                	mov    eax,ebx
c0022c6d:	eb 41                	jmp    c0022cb0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022c6f:	83 f9 02             	cmp    ecx,0x2
c0022c72:	75 45                	jne    c0022cb9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022c74:	83 ec 0c             	sub    esp,0xc
c0022c77:	0f b6 d2             	movzx  edx,dl
c0022c7a:	89 f1                	mov    ecx,esi
c0022c7c:	0f b6 c0             	movzx  eax,al
c0022c7f:	0f b6 f1             	movzx  esi,cl
c0022c82:	89 e9                	mov    ecx,ebp
c0022c84:	56                   	push   esi
c0022c85:	0f b6 c9             	movzx  ecx,cl
c0022c88:	51                   	push   ecx
c0022c89:	52                   	push   edx
c0022c8a:	50                   	push   eax
c0022c8b:	57                   	push   edi
c0022c8c:	e8 ad fc ff ff       	call   c002293e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c91:	89 c2                	mov    edx,eax
c0022c93:	ed                   	in     eax,dx
c0022c94:	83 c4 20             	add    esp,0x20
c0022c97:	0f b7 db             	movzx  ebx,bx
c0022c9a:	f6 c2 02             	test   dl,0x2
c0022c9d:	74 0c                	je     c0022cab <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022c9f:	0f b7 c8             	movzx  ecx,ax
c0022ca2:	89 d8                	mov    eax,ebx
c0022ca4:	c1 e0 10             	shl    eax,0x10
c0022ca7:	09 c8                	or     eax,ecx
c0022ca9:	eb 05                	jmp    c0022cb0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022cab:	66 31 c0             	xor    ax,ax
c0022cae:	09 d8                	or     eax,ebx
c0022cb0:	ef                   	out    dx,eax
c0022cb1:	83 c4 0c             	add    esp,0xc
c0022cb4:	5b                   	pop    ebx
c0022cb5:	5e                   	pop    esi
c0022cb6:	5f                   	pop    edi
c0022cb7:	5d                   	pop    ebp
c0022cb8:	c3                   	ret    
c0022cb9:	c7 44 24 20 f4 c9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c9f4
c0022cc1:	83 c4 0c             	add    esp,0xc
c0022cc4:	5b                   	pop    ebx
c0022cc5:	5e                   	pop    esi
c0022cc6:	5f                   	pop    edi
c0022cc7:	5d                   	pop    ebp
c0022cc8:	e9 22 75 ff ff       	jmp    c001a1ef <Krnl::panic(char const*)>
c0022ccd:	90                   	nop

c0022cce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022cce:	55                   	push   ebp
c0022ccf:	57                   	push   edi
c0022cd0:	56                   	push   esi
c0022cd1:	53                   	push   ebx
c0022cd2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022cd8:	80 3d b0 06 03 c0 00 	cmp    BYTE PTR ds:0xc00306b0,0x0
c0022cdf:	0f 85 84 00 00 00    	jne    c0022d69 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022ce5:	83 ec 0c             	sub    esp,0xc
c0022ce8:	68 14 01 00 00       	push   0x114
c0022ced:	e8 37 cb fe ff       	call   c000f829 <malloc>
c0022cf2:	83 c4 0c             	add    esp,0xc
c0022cf5:	89 c3                	mov    ebx,eax
c0022cf7:	ff 35 b0 f8 02 c0    	push   DWORD PTR ds:0xc002f8b0
c0022cfd:	68 fa c9 02 c0       	push   0xc002c9fa
c0022d02:	50                   	push   eax
c0022d03:	e8 d8 00 ff ff       	call   c0012de0 <File::File(char const*, Process*)>
c0022d08:	5a                   	pop    edx
c0022d09:	59                   	pop    ecx
c0022d0a:	6a 01                	push   0x1
c0022d0c:	53                   	push   ebx
c0022d0d:	e8 32 01 ff ff       	call   c0012e44 <File::open(FileOpenMode)>
c0022d12:	83 c4 0c             	add    esp,0xc
c0022d15:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022d19:	50                   	push   eax
c0022d1a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022d1e:	50                   	push   eax
c0022d1f:	53                   	push   ebx
c0022d20:	e8 cb 03 ff ff       	call   c00130f0 <File::stat(unsigned long long*, bool*)>
c0022d25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022d29:	40                   	inc    eax
c0022d2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d2d:	e8 f7 ca fe ff       	call   c000f829 <malloc>
c0022d32:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022d36:	a3 ac 06 03 c0       	mov    ds:0xc00306ac,eax
c0022d3b:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022d3f:	5e                   	pop    esi
c0022d40:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022d42:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022d46:	51                   	push   ecx
c0022d47:	50                   	push   eax
c0022d48:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022d4c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022d50:	53                   	push   ebx
c0022d51:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022d54:	83 c4 14             	add    esp,0x14
c0022d57:	53                   	push   ebx
c0022d58:	e8 45 01 ff ff       	call   c0012ea2 <File::close()>
c0022d5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022d61:	83 c4 10             	add    esp,0x10
c0022d64:	a3 a8 06 03 c0       	mov    ds:0xc00306a8,eax
c0022d69:	a1 a8 06 03 c0       	mov    eax,ds:0xc00306a8
c0022d6e:	8b 15 ac 06 03 c0    	mov    edx,DWORD PTR ds:0xc00306ac
c0022d74:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d77:	31 ff                	xor    edi,edi
c0022d79:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022d81:	31 f6                	xor    esi,esi
c0022d83:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022d88:	31 db                	xor    ebx,ebx
c0022d8a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022d92:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022d97:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022d9e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022da2:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022da9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022dad:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022db0:	0f 8e 6b 01 00 00    	jle    c0022f21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022db6:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022db9:	d4 40                	aam    0x40
c0022dbb:	d5 39                	aad    0x39
c0022dbd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022dc1:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022dc5:	d4 40                	aam    0x40
c0022dc7:	d5 39                	aad    0x39
c0022dc9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022dcd:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022dd1:	d4 40                	aam    0x40
c0022dd3:	d5 39                	aad    0x39
c0022dd5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022dd9:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022ddd:	d4 40                	aam    0x40
c0022ddf:	d5 39                	aad    0x39
c0022de1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022de5:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022de9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022ded:	3c 56                	cmp    al,0x56
c0022def:	74 45                	je     c0022e36 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022df1:	d4 40                	aam    0x40
c0022df3:	d5 39                	aad    0x39
c0022df5:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022df8:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022dfc:	0f b6 c9             	movzx  ecx,cl
c0022dff:	c1 e1 04             	shl    ecx,0x4
c0022e02:	d4 40                	aam    0x40
c0022e04:	d5 39                	aad    0x39
c0022e06:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022e09:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022e0d:	0f b6 db             	movzx  ebx,bl
c0022e10:	09 cb                	or     ebx,ecx
c0022e12:	c1 e3 04             	shl    ebx,0x4
c0022e15:	d4 40                	aam    0x40
c0022e17:	d5 39                	aad    0x39
c0022e19:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022e1c:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022e20:	0f b6 c9             	movzx  ecx,cl
c0022e23:	09 cb                	or     ebx,ecx
c0022e25:	c1 e3 04             	shl    ebx,0x4
c0022e28:	89 d9                	mov    ecx,ebx
c0022e2a:	d4 40                	aam    0x40
c0022e2c:	d5 39                	aad    0x39
c0022e2e:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022e31:	0f b6 db             	movzx  ebx,bl
c0022e34:	09 cb                	or     ebx,ecx
c0022e36:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022e3a:	80 f9 44             	cmp    cl,0x44
c0022e3d:	74 47                	je     c0022e86 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022e3f:	88 c8                	mov    al,cl
c0022e41:	d4 40                	aam    0x40
c0022e43:	d5 39                	aad    0x39
c0022e45:	83 e8 30             	sub    eax,0x30
c0022e48:	0f b6 e8             	movzx  ebp,al
c0022e4b:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022e4f:	c1 e5 04             	shl    ebp,0x4
c0022e52:	d4 40                	aam    0x40
c0022e54:	d5 39                	aad    0x39
c0022e56:	83 e8 30             	sub    eax,0x30
c0022e59:	0f b6 f0             	movzx  esi,al
c0022e5c:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022e60:	09 ee                	or     esi,ebp
c0022e62:	c1 e6 04             	shl    esi,0x4
c0022e65:	d4 40                	aam    0x40
c0022e67:	d5 39                	aad    0x39
c0022e69:	83 e8 30             	sub    eax,0x30
c0022e6c:	0f b6 e8             	movzx  ebp,al
c0022e6f:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022e73:	09 ee                	or     esi,ebp
c0022e75:	c1 e6 04             	shl    esi,0x4
c0022e78:	89 f5                	mov    ebp,esi
c0022e7a:	d4 40                	aam    0x40
c0022e7c:	d5 39                	aad    0x39
c0022e7e:	83 e8 30             	sub    eax,0x30
c0022e81:	0f b6 f0             	movzx  esi,al
c0022e84:	09 ee                	or     esi,ebp
c0022e86:	83 c7 10             	add    edi,0x10
c0022e89:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022e8d:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022e90:	3c 0a                	cmp    al,0xa
c0022e92:	74 09                	je     c0022e9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022e94:	45                   	inc    ebp
c0022e95:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022e98:	75 16                	jne    c0022eb0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022e9a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022e9d:	3c 0a                	cmp    al,0xa
c0022e9f:	0f 94 c0             	sete   al
c0022ea2:	0f b6 c0             	movzx  eax,al
c0022ea5:	01 c7                	add    edi,eax
c0022ea7:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022eac:	75 0c                	jne    c0022eba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022eae:	eb 15                	jmp    c0022ec5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022eb0:	47                   	inc    edi
c0022eb1:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022eb4:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022eb8:	eb d3                	jmp    c0022e8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022eba:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022ebf:	0f 85 e8 fe ff ff    	jne    c0022dad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022ec5:	80 f9 44             	cmp    cl,0x44
c0022ec8:	74 0b                	je     c0022ed5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022eca:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022ecf:	0f 85 d8 fe ff ff    	jne    c0022dad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022ed5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022ed9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022edd:	c1 e1 04             	shl    ecx,0x4
c0022ee0:	83 e8 30             	sub    eax,0x30
c0022ee3:	09 c8                	or     eax,ecx
c0022ee5:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022ee9:	0f 85 be fe ff ff    	jne    c0022dad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022eef:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022ef7:	c1 e1 04             	shl    ecx,0x4
c0022efa:	83 e8 30             	sub    eax,0x30
c0022efd:	09 c8                	or     eax,ecx
c0022eff:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022f03:	0f 85 a4 fe ff ff    	jne    c0022dad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022f09:	50                   	push   eax
c0022f0a:	50                   	push   eax
c0022f0b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022f0f:	50                   	push   eax
c0022f10:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022f17:	e8 f0 d8 fd ff       	call   c000080c <strcpy>
c0022f1c:	83 c4 10             	add    esp,0x10
c0022f1f:	eb 15                	jmp    c0022f36 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022f21:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022f28:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022f33:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022f36:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022f3d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022f43:	5b                   	pop    ebx
c0022f44:	5e                   	pop    esi
c0022f45:	5f                   	pop    edi
c0022f46:	5d                   	pop    ebp
c0022f47:	c3                   	ret    

c0022f48 <PCI::checkBus(unsigned char)>:
c0022f48:	56                   	push   esi
c0022f49:	53                   	push   ebx
c0022f4a:	31 db                	xor    ebx,ebx
c0022f4c:	51                   	push   ecx
c0022f4d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022f52:	52                   	push   edx
c0022f53:	53                   	push   ebx
c0022f54:	43                   	inc    ebx
c0022f55:	56                   	push   esi
c0022f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f5a:	e8 37 03 00 00       	call   c0023296 <PCI::checkDevice(unsigned char, unsigned char)>
c0022f5f:	83 c4 10             	add    esp,0x10
c0022f62:	83 fb 20             	cmp    ebx,0x20
c0022f65:	75 eb                	jne    c0022f52 <PCI::checkBus(unsigned char)+0xa>
c0022f67:	58                   	pop    eax
c0022f68:	5b                   	pop    ebx
c0022f69:	5e                   	pop    esi
c0022f6a:	c3                   	ret    
c0022f6b:	90                   	nop

c0022f6c <PCI::foundDevice(PCIDeviceInfo)>:
c0022f6c:	55                   	push   ebp
c0022f6d:	57                   	push   edi
c0022f6e:	56                   	push   esi
c0022f6f:	53                   	push   ebx
c0022f70:	83 ec 1c             	sub    esp,0x1c
c0022f73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022f77:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022f7d:	0f 84 52 01 00 00    	je     c00230d5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022f83:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022f87:	66 81 f9 06 04       	cmp    cx,0x406
c0022f8c:	75 2c                	jne    c0022fba <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022f8e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022f93:	50                   	push   eax
c0022f94:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022f99:	50                   	push   eax
c0022f9a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022f9f:	50                   	push   eax
c0022fa0:	56                   	push   esi
c0022fa1:	e8 b4 fb ff ff       	call   c0022b5a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022fa6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022faa:	0f b6 c0             	movzx  eax,al
c0022fad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022fb1:	83 c4 2c             	add    esp,0x2c
c0022fb4:	5b                   	pop    ebx
c0022fb5:	5e                   	pop    esi
c0022fb6:	5f                   	pop    edi
c0022fb7:	5d                   	pop    ebp
c0022fb8:	eb 8e                	jmp    c0022f48 <PCI::checkBus(unsigned char)>
c0022fba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022fbe:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022fc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022fc8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022fcc:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022fd0:	88 d3                	mov    bl,dl
c0022fd2:	85 c0                	test   eax,eax
c0022fd4:	74 33                	je     c0023009 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022fd6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022fd9:	85 d2                	test   edx,edx
c0022fdb:	74 28                	je     c0023005 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022fdd:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022fe3:	31 ef                	xor    edi,ebp
c0022fe5:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022feb:	75 18                	jne    c0023005 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022fed:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022ff1:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022ff7:	75 0c                	jne    c0023005 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ff9:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022fff:	0f 84 d0 00 00 00    	je     c00230d5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023005:	8b 00                	mov    eax,DWORD PTR [eax]
c0023007:	eb c9                	jmp    c0022fd2 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023009:	66 81 f9 01 06       	cmp    cx,0x601
c002300e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023012:	75 19                	jne    c002302d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023014:	83 ec 0c             	sub    esp,0xc
c0023017:	68 64 01 00 00       	push   0x164
c002301c:	e8 08 c8 fe ff       	call   c000f829 <malloc>
c0023021:	89 c5                	mov    ebp,eax
c0023023:	89 04 24             	mov    DWORD PTR [esp],eax
c0023026:	e8 85 0e 00 00       	call   c0023eb0 <SATABus::SATABus()>
c002302b:	eb 1e                	jmp    c002304b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002302d:	66 81 f9 01 01       	cmp    cx,0x101
c0023032:	75 60                	jne    c0023094 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023034:	83 ec 0c             	sub    esp,0xc
c0023037:	68 70 02 00 00       	push   0x270
c002303c:	e8 e8 c7 fe ff       	call   c000f829 <malloc>
c0023041:	89 c5                	mov    ebp,eax
c0023043:	89 04 24             	mov    DWORD PTR [esp],eax
c0023046:	e8 0f 03 00 00       	call   c002335a <IDE::IDE()>
c002304b:	58                   	pop    eax
c002304c:	5a                   	pop    edx
c002304d:	55                   	push   ebp
c002304e:	56                   	push   esi
c002304f:	e8 66 0c ff ff       	call   c0013cba <Device::addChild(Device*)>
c0023054:	83 ec 1c             	sub    esp,0x1c
c0023057:	b9 09 00 00 00       	mov    ecx,0x9
c002305c:	fc                   	cld    
c002305d:	89 e7                	mov    edi,esp
c002305f:	89 de                	mov    esi,ebx
c0023061:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023063:	55                   	push   ebp
c0023064:	e8 63 0b ff ff       	call   c0013bcc <Device::preOpenPCI(PCIDeviceInfo)>
c0023069:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002306c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023070:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023078:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023080:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023088:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002308b:	83 c4 4c             	add    esp,0x4c
c002308e:	5b                   	pop    ebx
c002308f:	5e                   	pop    esi
c0023090:	5f                   	pop    edi
c0023091:	5d                   	pop    ebp
c0023092:	ff e0                	jmp    eax
c0023094:	83 ec 0c             	sub    esp,0xc
c0023097:	68 58 01 00 00       	push   0x158
c002309c:	e8 88 c7 fe ff       	call   c000f829 <malloc>
c00230a1:	89 c5                	mov    ebp,eax
c00230a3:	58                   	pop    eax
c00230a4:	5a                   	pop    edx
c00230a5:	68 13 ca 02 c0       	push   0xc002ca13
c00230aa:	55                   	push   ebp
c00230ab:	e8 14 0f ff ff       	call   c0013fc4 <DriverlessDevice::DriverlessDevice(char const*)>
c00230b0:	59                   	pop    ecx
c00230b1:	5f                   	pop    edi
c00230b2:	55                   	push   ebp
c00230b3:	56                   	push   esi
c00230b4:	e8 01 0c ff ff       	call   c0013cba <Device::addChild(Device*)>
c00230b9:	b9 09 00 00 00       	mov    ecx,0x9
c00230be:	fc                   	cld    
c00230bf:	89 df                	mov    edi,ebx
c00230c1:	89 de                	mov    esi,ebx
c00230c3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00230c5:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00230c9:	83 c4 2c             	add    esp,0x2c
c00230cc:	5b                   	pop    ebx
c00230cd:	5e                   	pop    esi
c00230ce:	5f                   	pop    edi
c00230cf:	5d                   	pop    ebp
c00230d0:	e9 f7 0a ff ff       	jmp    c0013bcc <Device::preOpenPCI(PCIDeviceInfo)>
c00230d5:	83 c4 1c             	add    esp,0x1c
c00230d8:	5b                   	pop    ebx
c00230d9:	5e                   	pop    esi
c00230da:	5f                   	pop    edi
c00230db:	5d                   	pop    ebp
c00230dc:	c3                   	ret    
c00230dd:	90                   	nop

c00230de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00230de:	55                   	push   ebp
c00230df:	57                   	push   edi
c00230e0:	56                   	push   esi
c00230e1:	53                   	push   ebx
c00230e2:	83 ec 68             	sub    esp,0x68
c00230e5:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00230e9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00230f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00230f4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00230fb:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0023100:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023104:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002310b:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0023110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023114:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0023119:	6a 0c                	push   0xc
c002311b:	57                   	push   edi
c002311c:	53                   	push   ebx
c002311d:	56                   	push   esi
c002311e:	55                   	push   ebp
c002311f:	e8 88 f8 ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023124:	83 c4 20             	add    esp,0x20
c0023127:	57                   	push   edi
c0023128:	53                   	push   ebx
c0023129:	56                   	push   esi
c002312a:	55                   	push   ebp
c002312b:	e8 70 f9 ff ff       	call   c0022aa0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023130:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0023135:	57                   	push   edi
c0023136:	53                   	push   ebx
c0023137:	56                   	push   esi
c0023138:	55                   	push   ebp
c0023139:	e8 f8 f9 ff ff       	call   c0022b36 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002313e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0023142:	83 c4 14             	add    esp,0x14
c0023145:	6a 3c                	push   0x3c
c0023147:	57                   	push   edi
c0023148:	53                   	push   ebx
c0023149:	56                   	push   esi
c002314a:	55                   	push   ebp
c002314b:	e8 5c f8 ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023150:	0f b6 c4             	movzx  eax,ah
c0023153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023157:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002315b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002315f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0023164:	83 c4 20             	add    esp,0x20
c0023167:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002316d:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023174:	74 7c                	je     c00231f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023176:	31 c0                	xor    eax,eax
c0023178:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c002317e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023184:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c002318a:	7e 66                	jle    c00231f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c002318c:	8d 14 c2             	lea    edx,[edx+eax*8]
c002318f:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023196:	39 cb                	cmp    ebx,ecx
c0023198:	75 55                	jne    c00231ef <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002319a:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00231a1:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00231a5:	75 48                	jne    c00231ef <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c00231a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00231ab:	83 ec 0c             	sub    esp,0xc
c00231ae:	68 2d ca 02 c0       	push   0xc002ca2d
c00231b3:	e8 c9 f6 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00231b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00231bc:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c00231c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00231c6:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00231cc:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c00231d4:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00231d8:	52                   	push   edx
c00231d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231dd:	53                   	push   ebx
c00231de:	68 52 ca 02 c0       	push   0xc002ca52
c00231e3:	e8 99 f6 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00231e8:	83 c4 20             	add    esp,0x20
c00231eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00231ef:	40                   	inc    eax
c00231f0:	eb 86                	jmp    c0023178 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c00231f2:	31 d2                	xor    edx,edx
c00231f4:	83 ec 0c             	sub    esp,0xc
c00231f7:	57                   	push   edi
c00231f8:	53                   	push   ebx
c00231f9:	56                   	push   esi
c00231fa:	52                   	push   edx
c00231fb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00231ff:	55                   	push   ebp
c0023200:	e8 7d f9 ff ff       	call   c0022b82 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023205:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023209:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002320d:	42                   	inc    edx
c002320e:	83 c4 20             	add    esp,0x20
c0023211:	83 fa 06             	cmp    edx,0x6
c0023214:	75 de                	jne    c00231f4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0023216:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002321b:	83 ec 0c             	sub    esp,0xc
c002321e:	86 e0                	xchg   al,ah
c0023220:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023225:	6a 02                	push   0x2
c0023227:	57                   	push   edi
c0023228:	53                   	push   ebx
c0023229:	56                   	push   esi
c002322a:	55                   	push   ebp
c002322b:	e8 7c f7 ff ff       	call   c00229ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023230:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023235:	83 c4 20             	add    esp,0x20
c0023238:	57                   	push   edi
c0023239:	53                   	push   ebx
c002323a:	56                   	push   esi
c002323b:	55                   	push   ebp
c002323c:	e8 a9 f8 ff ff       	call   c0022aea <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023241:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023245:	57                   	push   edi
c0023246:	53                   	push   ebx
c0023247:	56                   	push   esi
c0023248:	55                   	push   ebp
c0023249:	e8 06 f8 ff ff       	call   c0022a54 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002324e:	b9 09 00 00 00       	mov    ecx,0x9
c0023253:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023258:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c002325c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0023260:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023264:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023268:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002326c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0023270:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023274:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023278:	83 ec 0c             	sub    esp,0xc
c002327b:	fc                   	cld    
c002327c:	89 e7                	mov    edi,esp
c002327e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023282:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023284:	55                   	push   ebp
c0023285:	e8 e2 fc ff ff       	call   c0022f6c <PCI::foundDevice(PCIDeviceInfo)>
c002328a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023290:	5b                   	pop    ebx
c0023291:	5e                   	pop    esi
c0023292:	5f                   	pop    edi
c0023293:	5d                   	pop    ebp
c0023294:	c3                   	ret    
c0023295:	90                   	nop

c0023296 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023296:	55                   	push   ebp
c0023297:	57                   	push   edi
c0023298:	56                   	push   esi
c0023299:	53                   	push   ebx
c002329a:	83 ec 0c             	sub    esp,0xc
c002329d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00232a1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00232a6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00232ab:	6a 00                	push   0x0
c00232ad:	56                   	push   esi
c00232ae:	57                   	push   edi
c00232af:	55                   	push   ebp
c00232b0:	e8 9f f7 ff ff       	call   c0022a54 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00232b5:	6a 00                	push   0x0
c00232b7:	56                   	push   esi
c00232b8:	57                   	push   edi
c00232b9:	55                   	push   ebp
c00232ba:	e8 1f fe ff ff       	call   c00230de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00232bf:	83 c4 20             	add    esp,0x20
c00232c2:	6a 00                	push   0x0
c00232c4:	56                   	push   esi
c00232c5:	57                   	push   edi
c00232c6:	55                   	push   ebp
c00232c7:	e8 ac f7 ff ff       	call   c0022a78 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00232cc:	83 c4 10             	add    esp,0x10
c00232cf:	84 c0                	test   al,al
c00232d1:	79 27                	jns    c00232fa <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00232d3:	bb 01 00 00 00       	mov    ebx,0x1
c00232d8:	53                   	push   ebx
c00232d9:	56                   	push   esi
c00232da:	57                   	push   edi
c00232db:	55                   	push   ebp
c00232dc:	e8 73 f7 ff ff       	call   c0022a54 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00232e1:	83 c4 10             	add    esp,0x10
c00232e4:	66 40                	inc    ax
c00232e6:	74 0c                	je     c00232f4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00232e8:	53                   	push   ebx
c00232e9:	56                   	push   esi
c00232ea:	57                   	push   edi
c00232eb:	55                   	push   ebp
c00232ec:	e8 ed fd ff ff       	call   c00230de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00232f1:	83 c4 10             	add    esp,0x10
c00232f4:	43                   	inc    ebx
c00232f5:	83 fb 08             	cmp    ebx,0x8
c00232f8:	75 de                	jne    c00232d8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00232fa:	83 c4 0c             	add    esp,0xc
c00232fd:	5b                   	pop    ebx
c00232fe:	5e                   	pop    esi
c00232ff:	5f                   	pop    edi
c0023300:	5d                   	pop    ebp
c0023301:	c3                   	ret    

c0023302 <PCI::detect()>:
c0023302:	56                   	push   esi
c0023303:	53                   	push   ebx
c0023304:	53                   	push   ebx
c0023305:	31 db                	xor    ebx,ebx
c0023307:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002330b:	6a 00                	push   0x0
c002330d:	6a 00                	push   0x0
c002330f:	6a 00                	push   0x0
c0023311:	56                   	push   esi
c0023312:	e8 61 f7 ff ff       	call   c0022a78 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023317:	83 c4 10             	add    esp,0x10
c002331a:	a8 80                	test   al,0x80
c002331c:	75 21                	jne    c002333f <PCI::detect()+0x3d>
c002331e:	51                   	push   ecx
c002331f:	51                   	push   ecx
c0023320:	6a 00                	push   0x0
c0023322:	56                   	push   esi
c0023323:	e8 20 fc ff ff       	call   c0022f48 <PCI::checkBus(unsigned char)>
c0023328:	83 c4 10             	add    esp,0x10
c002332b:	eb 24                	jmp    c0023351 <PCI::detect()+0x4f>
c002332d:	52                   	push   edx
c002332e:	52                   	push   edx
c002332f:	53                   	push   ebx
c0023330:	43                   	inc    ebx
c0023331:	56                   	push   esi
c0023332:	e8 11 fc ff ff       	call   c0022f48 <PCI::checkBus(unsigned char)>
c0023337:	83 c4 10             	add    esp,0x10
c002333a:	83 fb 08             	cmp    ebx,0x8
c002333d:	74 12                	je     c0023351 <PCI::detect()+0x4f>
c002333f:	53                   	push   ebx
c0023340:	6a 00                	push   0x0
c0023342:	6a 00                	push   0x0
c0023344:	56                   	push   esi
c0023345:	e8 0a f7 ff ff       	call   c0022a54 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002334a:	83 c4 10             	add    esp,0x10
c002334d:	66 40                	inc    ax
c002334f:	74 dc                	je     c002332d <PCI::detect()+0x2b>
c0023351:	58                   	pop    eax
c0023352:	5b                   	pop    ebx
c0023353:	5e                   	pop    esi
c0023354:	c3                   	ret    
c0023355:	90                   	nop

c0023356 <IDE::close(int, int, void*)>:
c0023356:	83 c8 ff             	or     eax,0xffffffff
c0023359:	c3                   	ret    

c002335a <IDE::IDE()>:
c002335a:	83 ec 0c             	sub    esp,0xc
c002335d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023361:	83 ec 08             	sub    esp,0x8
c0023364:	68 9c ca 02 c0       	push   0xc002ca9c
c0023369:	50                   	push   eax
c002336a:	e8 f9 0c ff ff       	call   c0014068 <HardDiskController::HardDiskController(char const*)>
c002336f:	83 c4 10             	add    esp,0x10
c0023372:	ba 2c cb 02 c0       	mov    edx,0xc002cb2c
c0023377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002337b:	89 10                	mov    DWORD PTR [eax],edx
c002337d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023381:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023388:	90                   	nop
c0023389:	83 c4 0c             	add    esp,0xc
c002338c:	c3                   	ret    
c002338d:	90                   	nop

c002338e <IDE::prepareInterrupt(unsigned char)>:
c002338e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023393:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023397:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002339f:	c3                   	ret    

c00233a0 <selectDrive(unsigned char, unsigned char)>:
c00233a0:	c3                   	ret    
c00233a1:	90                   	nop

c00233a2 <IDE::getBase(unsigned char)>:
c00233a2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00233a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233ab:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00233b3:	c3                   	ret    

c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00233b4:	55                   	push   ebp
c00233b5:	57                   	push   edi
c00233b6:	56                   	push   esi
c00233b7:	53                   	push   ebx
c00233b8:	83 ec 1c             	sub    esp,0x1c
c00233bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00233bf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00233c3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00233c6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00233ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00233ce:	80 f9 03             	cmp    cl,0x3
c00233d1:	77 51                	ja     c0023424 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00233d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00233d7:	0f b6 f2             	movzx  esi,dl
c00233da:	0f b6 db             	movzx  ebx,bl
c00233dd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00233e0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00233e4:	83 ca 80             	or     edx,0xffffff80
c00233e7:	0f b6 d2             	movzx  edx,dl
c00233ea:	52                   	push   edx
c00233eb:	6a 0c                	push   0xc
c00233ed:	56                   	push   esi
c00233ee:	57                   	push   edi
c00233ef:	e8 c0 ff ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233f4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00233f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233fd:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023401:	ee                   	out    dx,al
c0023402:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023407:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002340b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002340f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023413:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002341b:	83 c4 2c             	add    esp,0x2c
c002341e:	5b                   	pop    ebx
c002341f:	5e                   	pop    esi
c0023420:	5f                   	pop    edi
c0023421:	5d                   	pop    ebp
c0023422:	eb 90                	jmp    c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023424:	80 fb 07             	cmp    bl,0x7
c0023427:	77 12                	ja     c002343b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023429:	0f b6 d2             	movzx  edx,dl
c002342c:	0f b6 db             	movzx  ebx,bl
c002342f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023437:	89 da                	mov    edx,ebx
c0023439:	eb 2f                	jmp    c002346a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002343b:	80 fb 0d             	cmp    bl,0xd
c002343e:	77 13                	ja     c0023453 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023440:	0f b6 d2             	movzx  edx,dl
c0023443:	0f b6 db             	movzx  ebx,bl
c0023446:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002344d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023451:	eb 17                	jmp    c002346a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023453:	80 fb 15             	cmp    bl,0x15
c0023456:	77 13                	ja     c002346b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023458:	0f b6 d2             	movzx  edx,dl
c002345b:	0f b6 db             	movzx  ebx,bl
c002345e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023466:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002346a:	ee                   	out    dx,al
c002346b:	83 c4 1c             	add    esp,0x1c
c002346e:	5b                   	pop    ebx
c002346f:	5e                   	pop    esi
c0023470:	5f                   	pop    edi
c0023471:	5d                   	pop    ebp
c0023472:	c3                   	ret    
c0023473:	90                   	nop

c0023474 <IDE::read(unsigned char, unsigned char)>:
c0023474:	55                   	push   ebp
c0023475:	57                   	push   edi
c0023476:	56                   	push   esi
c0023477:	53                   	push   ebx
c0023478:	83 ec 1c             	sub    esp,0x1c
c002347b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002347f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023483:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023486:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002348a:	3c 03                	cmp    al,0x3
c002348c:	77 43                	ja     c00234d1 <IDE::read(unsigned char, unsigned char)+0x5d>
c002348e:	0f b6 f2             	movzx  esi,dl
c0023491:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023494:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023498:	83 c8 80             	or     eax,0xffffff80
c002349b:	0f b6 c0             	movzx  eax,al
c002349e:	50                   	push   eax
c002349f:	6a 0c                	push   0xc
c00234a1:	56                   	push   esi
c00234a2:	57                   	push   edi
c00234a3:	e8 0c ff ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234a8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00234ad:	0f b6 c3             	movzx  eax,bl
c00234b0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00234b4:	ec                   	in     al,dx
c00234b5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00234b9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00234be:	52                   	push   edx
c00234bf:	6a 0c                	push   0xc
c00234c1:	56                   	push   esi
c00234c2:	57                   	push   edi
c00234c3:	e8 ec fe ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234c8:	83 c4 20             	add    esp,0x20
c00234cb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00234cf:	eb 49                	jmp    c002351a <IDE::read(unsigned char, unsigned char)+0xa6>
c00234d1:	80 fb 07             	cmp    bl,0x7
c00234d4:	77 12                	ja     c00234e8 <IDE::read(unsigned char, unsigned char)+0x74>
c00234d6:	0f b6 d2             	movzx  edx,dl
c00234d9:	0f b6 c3             	movzx  eax,bl
c00234dc:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00234e4:	89 c2                	mov    edx,eax
c00234e6:	eb 31                	jmp    c0023519 <IDE::read(unsigned char, unsigned char)+0xa5>
c00234e8:	80 fb 0d             	cmp    bl,0xd
c00234eb:	77 13                	ja     c0023500 <IDE::read(unsigned char, unsigned char)+0x8c>
c00234ed:	0f b6 d2             	movzx  edx,dl
c00234f0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00234f7:	0f b6 d3             	movzx  edx,bl
c00234fa:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00234fe:	eb 19                	jmp    c0023519 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023500:	31 c0                	xor    eax,eax
c0023502:	80 fb 15             	cmp    bl,0x15
c0023505:	77 13                	ja     c002351a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023507:	0f b6 d2             	movzx  edx,dl
c002350a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023512:	0f b6 d3             	movzx  edx,bl
c0023515:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023519:	ec                   	in     al,dx
c002351a:	83 c4 1c             	add    esp,0x1c
c002351d:	5b                   	pop    ebx
c002351e:	5e                   	pop    esi
c002351f:	5f                   	pop    edi
c0023520:	5d                   	pop    ebp
c0023521:	c3                   	ret    

c0023522 <IDE::waitInterrupt(unsigned char)>:
c0023522:	55                   	push   ebp
c0023523:	57                   	push   edi
c0023524:	56                   	push   esi
c0023525:	53                   	push   ebx
c0023526:	31 db                	xor    ebx,ebx
c0023528:	83 ec 0c             	sub    esp,0xc
c002352b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002352f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023534:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002353c:	89 e8                	mov    eax,ebp
c002353e:	84 c0                	test   al,al
c0023540:	75 34                	jne    c0023576 <IDE::waitInterrupt(unsigned char)+0x54>
c0023542:	52                   	push   edx
c0023543:	6a 0c                	push   0xc
c0023545:	56                   	push   esi
c0023546:	57                   	push   edi
c0023547:	e8 28 ff ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c002354c:	83 c4 10             	add    esp,0x10
c002354f:	a8 01                	test   al,0x1
c0023551:	75 2b                	jne    c002357e <IDE::waitInterrupt(unsigned char)+0x5c>
c0023553:	f6 c3 04             	test   bl,0x4
c0023556:	75 16                	jne    c002356e <IDE::waitInterrupt(unsigned char)+0x4c>
c0023558:	83 fb 32             	cmp    ebx,0x32
c002355b:	7e 11                	jle    c002356e <IDE::waitInterrupt(unsigned char)+0x4c>
c002355d:	50                   	push   eax
c002355e:	50                   	push   eax
c002355f:	6a 00                	push   0x0
c0023561:	68 80 96 98 00       	push   0x989680
c0023566:	e8 f0 aa ff ff       	call   c001e05b <nanoSleep(unsigned long long)>
c002356b:	83 c4 10             	add    esp,0x10
c002356e:	83 fb 3c             	cmp    ebx,0x3c
c0023571:	74 0b                	je     c002357e <IDE::waitInterrupt(unsigned char)+0x5c>
c0023573:	43                   	inc    ebx
c0023574:	eb be                	jmp    c0023534 <IDE::waitInterrupt(unsigned char)+0x12>
c0023576:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002357e:	83 c4 0c             	add    esp,0xc
c0023581:	89 e8                	mov    eax,ebp
c0023583:	5b                   	pop    ebx
c0023584:	5e                   	pop    esi
c0023585:	5f                   	pop    edi
c0023586:	5d                   	pop    ebp
c0023587:	c3                   	ret    

c0023588 <ideChannel0IRQHandler(regs*, void*)>:
c0023588:	83 ec 10             	sub    esp,0x10
c002358b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002358f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023596:	6a 07                	push   0x7
c0023598:	6a 00                	push   0x0
c002359a:	50                   	push   eax
c002359b:	e8 d4 fe ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c00235a0:	83 c4 1c             	add    esp,0x1c
c00235a3:	c3                   	ret    

c00235a4 <ideChannel1IRQHandler(regs*, void*)>:
c00235a4:	83 ec 10             	sub    esp,0x10
c00235a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235ab:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00235b2:	6a 07                	push   0x7
c00235b4:	6a 01                	push   0x1
c00235b6:	50                   	push   eax
c00235b7:	e8 b8 fe ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c00235bc:	83 c4 1c             	add    esp,0x1c
c00235bf:	c3                   	ret    

c00235c0 <IDE::enableIRQs(unsigned char, bool)>:
c00235c0:	57                   	push   edi
c00235c1:	56                   	push   esi
c00235c2:	be 04 00 00 00       	mov    esi,0x4
c00235c7:	53                   	push   ebx
c00235c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00235cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00235d1:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00235d6:	0f 94 c0             	sete   al
c00235d9:	d1 e0                	shl    eax,1
c00235db:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00235e2:	0f b6 c0             	movzx  eax,al
c00235e5:	50                   	push   eax
c00235e6:	6a 0c                	push   0xc
c00235e8:	57                   	push   edi
c00235e9:	53                   	push   ebx
c00235ea:	e8 c5 fd ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235ef:	83 c4 10             	add    esp,0x10
c00235f2:	50                   	push   eax
c00235f3:	6a 0c                	push   0xc
c00235f5:	57                   	push   edi
c00235f6:	53                   	push   ebx
c00235f7:	e8 78 fe ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c00235fc:	83 c4 10             	add    esp,0x10
c00235ff:	4e                   	dec    esi
c0023600:	75 f0                	jne    c00235f2 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023602:	5b                   	pop    ebx
c0023603:	5e                   	pop    esi
c0023604:	5f                   	pop    edi
c0023605:	c3                   	ret    

c0023606 <IDE::open(int, int, void*)>:
c0023606:	55                   	push   ebp
c0023607:	57                   	push   edi
c0023608:	56                   	push   esi
c0023609:	53                   	push   ebx
c002360a:	83 ec 1c             	sub    esp,0x1c
c002360d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023611:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002361a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023623:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002362a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023631:	0f 85 b0 02 00 00    	jne    c00238e7 <IDE::open(int, int, void*)+0x2e1>
c0023637:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002363d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023641:	83 e0 7f             	and    eax,0x7f
c0023644:	3c 05                	cmp    al,0x5
c0023646:	74 04                	je     c002364c <IDE::open(int, int, void*)+0x46>
c0023648:	3c 0f                	cmp    al,0xf
c002364a:	75 32                	jne    c002367e <IDE::open(int, int, void*)+0x78>
c002364c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023652:	83 e0 fc             	and    eax,0xfffffffc
c0023655:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002365c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023662:	83 e0 fc             	and    eax,0xfffffffc
c0023665:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002366c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023672:	83 e0 fc             	and    eax,0xfffffffc
c0023675:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002367c:	eb 14                	jmp    c0023692 <IDE::open(int, int, void*)+0x8c>
c002367e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023688:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023692:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023699:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00236a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00236a4:	89 c6                	mov    esi,eax
c00236a6:	bf f8 0c 00 00       	mov    edi,0xcf8
c00236ab:	c1 e6 10             	shl    esi,0x10
c00236ae:	89 e8                	mov    eax,ebp
c00236b0:	89 fa                	mov    edx,edi
c00236b2:	c1 e0 0b             	shl    eax,0xb
c00236b5:	09 f0                	or     eax,esi
c00236b7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00236be:	c1 e6 08             	shl    esi,0x8
c00236c1:	09 c6                	or     esi,eax
c00236c3:	89 f0                	mov    eax,esi
c00236c5:	0d 08 00 00 80       	or     eax,0x80000008
c00236ca:	ef                   	out    dx,eax
c00236cb:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00236d0:	89 ca                	mov    edx,ecx
c00236d2:	ed                   	in     eax,dx
c00236d3:	c1 e8 10             	shr    eax,0x10
c00236d6:	3d ff ff 00 00       	cmp    eax,0xffff
c00236db:	0f 84 f5 00 00 00    	je     c00237d6 <IDE::open(int, int, void*)+0x1d0>
c00236e1:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00236e7:	89 fa                	mov    edx,edi
c00236e9:	89 f0                	mov    eax,esi
c00236eb:	ef                   	out    dx,eax
c00236ec:	b0 fe                	mov    al,0xfe
c00236ee:	89 ca                	mov    edx,ecx
c00236f0:	ee                   	out    dx,al
c00236f1:	89 f0                	mov    eax,esi
c00236f3:	89 fa                	mov    edx,edi
c00236f5:	ef                   	out    dx,eax
c00236f6:	89 ca                	mov    edx,ecx
c00236f8:	ed                   	in     eax,dx
c00236f9:	3c fe                	cmp    al,0xfe
c00236fb:	0f 85 a9 00 00 00    	jne    c00237aa <IDE::open(int, int, void*)+0x1a4>
c0023701:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0023707:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002370e:	74 33                	je     c0023743 <IDE::open(int, int, void*)+0x13d>
c0023710:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023716:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002371a:	40                   	inc    eax
c002371b:	83 ec 0c             	sub    esp,0xc
c002371e:	0f b6 c0             	movzx  eax,al
c0023721:	50                   	push   eax
c0023722:	55                   	push   ebp
c0023723:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023727:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002372d:	51                   	push   ecx
c002372e:	e8 e5 46 ff ff       	call   c0017e18 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023733:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023738:	83 c4 1c             	add    esp,0x1c
c002373b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023741:	eb 0a                	jmp    c002374d <IDE::open(int, int, void*)+0x147>
c0023743:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002374d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023754:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002375b:	c1 e1 10             	shl    ecx,0x10
c002375e:	c1 e0 08             	shl    eax,0x8
c0023761:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023766:	09 c1                	or     ecx,eax
c0023768:	89 fa                	mov    edx,edi
c002376a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023771:	c1 e0 0b             	shl    eax,0xb
c0023774:	09 c1                	or     ecx,eax
c0023776:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002377c:	89 c8                	mov    eax,ecx
c002377e:	ef                   	out    dx,eax
c002377f:	be fc 0c 00 00       	mov    esi,0xcfc
c0023784:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002378a:	89 f2                	mov    edx,esi
c002378c:	ee                   	out    dx,al
c002378d:	89 c8                	mov    eax,ecx
c002378f:	89 fa                	mov    edx,edi
c0023791:	ef                   	out    dx,eax
c0023792:	89 f2                	mov    edx,esi
c0023794:	ed                   	in     eax,dx
c0023795:	0f b6 c0             	movzx  eax,al
c0023798:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002379e:	74 46                	je     c00237e6 <IDE::open(int, int, void*)+0x1e0>
c00237a0:	83 ec 0c             	sub    esp,0xc
c00237a3:	68 b4 ca 02 c0       	push   0xc002cab4
c00237a8:	eb 34                	jmp    c00237de <IDE::open(int, int, void*)+0x1d8>
c00237aa:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00237b3:	75 17                	jne    c00237cc <IDE::open(int, int, void*)+0x1c6>
c00237b5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00237ba:	74 07                	je     c00237c3 <IDE::open(int, int, void*)+0x1bd>
c00237bc:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00237c1:	75 09                	jne    c00237cc <IDE::open(int, int, void*)+0x1c6>
c00237c3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00237ca:	eb 1a                	jmp    c00237e6 <IDE::open(int, int, void*)+0x1e0>
c00237cc:	83 ec 0c             	sub    esp,0xc
c00237cf:	68 bc ca 02 c0       	push   0xc002cabc
c00237d4:	eb 08                	jmp    c00237de <IDE::open(int, int, void*)+0x1d8>
c00237d6:	83 ec 0c             	sub    esp,0xc
c00237d9:	68 ed ca 02 c0       	push   0xc002caed
c00237de:	e8 0c 6a ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c00237e3:	83 c4 10             	add    esp,0x10
c00237e6:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00237ed:	79 1a                	jns    c0023809 <IDE::open(int, int, void*)+0x203>
c00237ef:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00237f5:	83 e0 fc             	and    eax,0xfffffffc
c00237f8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00237ff:	83 c0 08             	add    eax,0x8
c0023802:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023809:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002380f:	89 c2                	mov    edx,eax
c0023811:	83 e2 0f             	and    edx,0xf
c0023814:	66 83 fa 08          	cmp    dx,0x8
c0023818:	75 0a                	jne    c0023824 <IDE::open(int, int, void*)+0x21e>
c002381a:	83 e8 02             	sub    eax,0x2
c002381d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023824:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002382a:	89 c2                	mov    edx,eax
c002382c:	83 e2 0f             	and    edx,0xf
c002382f:	66 83 fa 08          	cmp    dx,0x8
c0023833:	75 0a                	jne    c002383f <IDE::open(int, int, void*)+0x239>
c0023835:	83 e8 02             	sub    eax,0x2
c0023838:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002383f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023846:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002384d:	89 d0                	mov    eax,edx
c002384f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023852:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023856:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002385a:	8d 4a 01             	lea    ecx,[edx+0x1]
c002385d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023862:	0f b6 c9             	movzx  ecx,cl
c0023865:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002386c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002386f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023873:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023877:	8d 50 02             	lea    edx,[eax+0x2]
c002387a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002387f:	0f b6 d2             	movzx  edx,dl
c0023882:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023888:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002388b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002388f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023893:	8d 48 03             	lea    ecx,[eax+0x3]
c0023896:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002389b:	0f b6 c9             	movzx  ecx,cl
c002389e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00238a4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00238a7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00238ab:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00238af:	8d 50 04             	lea    edx,[eax+0x4]
c00238b2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00238b8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00238bd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00238c4:	66 85 f6             	test   si,si
c00238c7:	74 5b                	je     c0023924 <IDE::open(int, int, void*)+0x31e>
c00238c9:	0f b6 d2             	movzx  edx,dl
c00238cc:	83 c0 05             	add    eax,0x5
c00238cf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00238d2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00238d6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00238da:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00238e0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00238e5:	eb 3d                	jmp    c0023924 <IDE::open(int, int, void*)+0x31e>
c00238e7:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00238ed:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00238f4:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00238fb:	66 05 06 02          	add    ax,0x206
c00238ff:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023906:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002390d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023914:	66 05 06 02          	add    ax,0x206
c0023918:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002391f:	e9 e5 fe ff ff       	jmp    c0023809 <IDE::open(int, int, void*)+0x203>
c0023924:	50                   	push   eax
c0023925:	50                   	push   eax
c0023926:	6a 00                	push   0x0
c0023928:	53                   	push   ebx
c0023929:	e8 60 fa ff ff       	call   c002338e <IDE::prepareInterrupt(unsigned char)>
c002392e:	5a                   	pop    edx
c002392f:	59                   	pop    ecx
c0023930:	6a 01                	push   0x1
c0023932:	53                   	push   ebx
c0023933:	e8 56 fa ff ff       	call   c002338e <IDE::prepareInterrupt(unsigned char)>
c0023938:	83 c4 0c             	add    esp,0xc
c002393b:	6a 00                	push   0x0
c002393d:	6a 00                	push   0x0
c002393f:	53                   	push   ebx
c0023940:	e8 7b fc ff ff       	call   c00235c0 <IDE::enableIRQs(unsigned char, bool)>
c0023945:	83 c4 0c             	add    esp,0xc
c0023948:	6a 00                	push   0x0
c002394a:	6a 01                	push   0x1
c002394c:	53                   	push   ebx
c002394d:	e8 6e fc ff ff       	call   c00235c0 <IDE::enableIRQs(unsigned char, bool)>
c0023952:	83 c4 10             	add    esp,0x10
c0023955:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002395c:	74 34                	je     c0023992 <IDE::open(int, int, void*)+0x38c>
c002395e:	83 ec 0c             	sub    esp,0xc
c0023961:	53                   	push   ebx
c0023962:	6a 01                	push   0x1
c0023964:	68 88 35 02 c0       	push   0xc0023588
c0023969:	6a 0e                	push   0xe
c002396b:	53                   	push   ebx
c002396c:	e8 c1 02 ff ff       	call   c0013c32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023971:	83 c4 14             	add    esp,0x14
c0023974:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002397a:	53                   	push   ebx
c002397b:	6a 01                	push   0x1
c002397d:	68 a4 35 02 c0       	push   0xc00235a4
c0023982:	6a 0f                	push   0xf
c0023984:	53                   	push   ebx
c0023985:	e8 a8 02 ff ff       	call   c0013c32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002398a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023990:	eb 38                	jmp    c00239ca <IDE::open(int, int, void*)+0x3c4>
c0023992:	83 ec 0c             	sub    esp,0xc
c0023995:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002399f:	53                   	push   ebx
c00239a0:	6a 00                	push   0x0
c00239a2:	68 88 35 02 c0       	push   0xc0023588
c00239a7:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00239ad:	53                   	push   ebx
c00239ae:	e8 7f 02 ff ff       	call   c0013c32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00239b3:	83 c4 14             	add    esp,0x14
c00239b6:	53                   	push   ebx
c00239b7:	6a 00                	push   0x0
c00239b9:	68 a4 35 02 c0       	push   0xc00235a4
c00239be:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00239c4:	53                   	push   ebx
c00239c5:	e8 68 02 ff ff       	call   c0013c32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00239ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00239cc:	83 c4 20             	add    esp,0x20
c00239cf:	83 ec 0c             	sub    esp,0xc
c00239d2:	53                   	push   ebx
c00239d3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00239d6:	83 c4 0c             	add    esp,0xc
c00239d9:	6a 07                	push   0x7
c00239db:	6a 00                	push   0x0
c00239dd:	53                   	push   ebx
c00239de:	e8 91 fa ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c00239e3:	83 c4 0c             	add    esp,0xc
c00239e6:	6a 07                	push   0x7
c00239e8:	6a 01                	push   0x1
c00239ea:	53                   	push   ebx
c00239eb:	e8 84 fa ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c00239f0:	83 c4 0c             	add    esp,0xc
c00239f3:	6a 01                	push   0x1
c00239f5:	6a 00                	push   0x0
c00239f7:	53                   	push   ebx
c00239f8:	e8 c3 fb ff ff       	call   c00235c0 <IDE::enableIRQs(unsigned char, bool)>
c00239fd:	83 c4 0c             	add    esp,0xc
c0023a00:	6a 01                	push   0x1
c0023a02:	6a 01                	push   0x1
c0023a04:	53                   	push   ebx
c0023a05:	e8 b6 fb ff ff       	call   c00235c0 <IDE::enableIRQs(unsigned char, bool)>
c0023a0a:	83 c4 2c             	add    esp,0x2c
c0023a0d:	31 c0                	xor    eax,eax
c0023a0f:	5b                   	pop    ebx
c0023a10:	5e                   	pop    esi
c0023a11:	5f                   	pop    edi
c0023a12:	5d                   	pop    ebp
c0023a13:	c3                   	ret    

c0023a14 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023a14:	55                   	push   ebp
c0023a15:	57                   	push   edi
c0023a16:	56                   	push   esi
c0023a17:	53                   	push   ebx
c0023a18:	83 ec 1c             	sub    esp,0x1c
c0023a1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023a1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a23:	8d 50 f8             	lea    edx,[eax-0x8]
c0023a26:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a2a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023a2e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023a32:	80 fa 03             	cmp    dl,0x3
c0023a35:	77 5d                	ja     c0023a94 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023a37:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023a3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023a3f:	0f b6 db             	movzx  ebx,bl
c0023a42:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023a45:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023a49:	83 ca 80             	or     edx,0xffffff80
c0023a4c:	0f b6 d2             	movzx  edx,dl
c0023a4f:	52                   	push   edx
c0023a50:	6a 0c                	push   0xc
c0023a52:	53                   	push   ebx
c0023a53:	56                   	push   esi
c0023a54:	e8 5b f9 ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a59:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023a5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a62:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023a66:	0f b6 c0             	movzx  eax,al
c0023a69:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023a6d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023a6f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023a74:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023a78:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023a7c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023a80:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023a88:	83 c4 2c             	add    esp,0x2c
c0023a8b:	5b                   	pop    ebx
c0023a8c:	5e                   	pop    esi
c0023a8d:	5f                   	pop    edi
c0023a8e:	5d                   	pop    ebp
c0023a8f:	e9 20 f9 ff ff       	jmp    c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a94:	3c 07                	cmp    al,0x7
c0023a96:	77 10                	ja     c0023aa8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023a98:	0f b6 db             	movzx  ebx,bl
c0023a9b:	0f b6 d0             	movzx  edx,al
c0023a9e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023aa6:	eb 2d                	jmp    c0023ad5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023aa8:	3c 0d                	cmp    al,0xd
c0023aaa:	77 13                	ja     c0023abf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023aac:	0f b6 db             	movzx  ebx,bl
c0023aaf:	0f b6 c0             	movzx  eax,al
c0023ab2:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023ab9:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023abd:	eb 16                	jmp    c0023ad5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023abf:	3c 15                	cmp    al,0x15
c0023ac1:	77 14                	ja     c0023ad7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023ac3:	0f b6 db             	movzx  ebx,bl
c0023ac6:	0f b6 c0             	movzx  eax,al
c0023ac9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023ad1:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023ad5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023ad7:	83 c4 1c             	add    esp,0x1c
c0023ada:	5b                   	pop    ebx
c0023adb:	5e                   	pop    esi
c0023adc:	5f                   	pop    edi
c0023add:	5d                   	pop    ebp
c0023ade:	c3                   	ret    
c0023adf:	90                   	nop

c0023ae0 <IDE::detect()>:
c0023ae0:	55                   	push   ebp
c0023ae1:	57                   	push   edi
c0023ae2:	56                   	push   esi
c0023ae3:	53                   	push   ebx
c0023ae4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023aea:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023af1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023af8:	0f 85 9d 02 00 00    	jne    c0023d9b <IDE::detect()+0x2bb>
c0023afe:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023b05:	31 f6                	xor    esi,esi
c0023b07:	31 ed                	xor    ebp,ebp
c0023b09:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023b11:	89 e8                	mov    eax,ebp
c0023b13:	c1 e0 06             	shl    eax,0x6
c0023b16:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023b1e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023b22:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023b26:	c1 e0 04             	shl    eax,0x4
c0023b29:	83 c8 a0             	or     eax,0xffffffa0
c0023b2c:	0f b6 c0             	movzx  eax,al
c0023b2f:	50                   	push   eax
c0023b30:	6a 06                	push   0x6
c0023b32:	56                   	push   esi
c0023b33:	53                   	push   ebx
c0023b34:	e8 7b f8 ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b39:	83 c4 0c             	add    esp,0xc
c0023b3c:	6a 0c                	push   0xc
c0023b3e:	56                   	push   esi
c0023b3f:	53                   	push   ebx
c0023b40:	e8 2f f9 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023b45:	83 c4 0c             	add    esp,0xc
c0023b48:	6a 0c                	push   0xc
c0023b4a:	56                   	push   esi
c0023b4b:	53                   	push   ebx
c0023b4c:	e8 23 f9 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023b51:	83 c4 0c             	add    esp,0xc
c0023b54:	6a 0c                	push   0xc
c0023b56:	56                   	push   esi
c0023b57:	53                   	push   ebx
c0023b58:	e8 17 f9 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023b5d:	83 c4 0c             	add    esp,0xc
c0023b60:	6a 0c                	push   0xc
c0023b62:	56                   	push   esi
c0023b63:	53                   	push   ebx
c0023b64:	e8 0b f9 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023b69:	68 ec 00 00 00       	push   0xec
c0023b6e:	6a 07                	push   0x7
c0023b70:	56                   	push   esi
c0023b71:	53                   	push   ebx
c0023b72:	e8 3d f8 ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b77:	83 c4 1c             	add    esp,0x1c
c0023b7a:	6a 0c                	push   0xc
c0023b7c:	56                   	push   esi
c0023b7d:	53                   	push   ebx
c0023b7e:	e8 f1 f8 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023b83:	83 c4 0c             	add    esp,0xc
c0023b86:	6a 0c                	push   0xc
c0023b88:	56                   	push   esi
c0023b89:	53                   	push   ebx
c0023b8a:	e8 e5 f8 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023b8f:	83 c4 0c             	add    esp,0xc
c0023b92:	6a 0c                	push   0xc
c0023b94:	56                   	push   esi
c0023b95:	53                   	push   ebx
c0023b96:	e8 d9 f8 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023b9b:	83 c4 0c             	add    esp,0xc
c0023b9e:	6a 0c                	push   0xc
c0023ba0:	56                   	push   esi
c0023ba1:	53                   	push   ebx
c0023ba2:	e8 cd f8 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023ba7:	83 c4 0c             	add    esp,0xc
c0023baa:	6a 0c                	push   0xc
c0023bac:	56                   	push   esi
c0023bad:	53                   	push   ebx
c0023bae:	e8 c1 f8 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023bb3:	83 c4 10             	add    esp,0x10
c0023bb6:	84 c0                	test   al,al
c0023bb8:	0f 84 63 01 00 00    	je     c0023d21 <IDE::detect()+0x241>
c0023bbe:	31 ff                	xor    edi,edi
c0023bc0:	50                   	push   eax
c0023bc1:	6a 0c                	push   0xc
c0023bc3:	56                   	push   esi
c0023bc4:	53                   	push   ebx
c0023bc5:	e8 aa f8 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023bca:	83 c4 10             	add    esp,0x10
c0023bcd:	a8 01                	test   al,0x1
c0023bcf:	0f 85 6d 01 00 00    	jne    c0023d42 <IDE::detect()+0x262>
c0023bd5:	84 c0                	test   al,al
c0023bd7:	78 04                	js     c0023bdd <IDE::detect()+0xfd>
c0023bd9:	a8 08                	test   al,0x8
c0023bdb:	75 27                	jne    c0023c04 <IDE::detect()+0x124>
c0023bdd:	47                   	inc    edi
c0023bde:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023be4:	7e da                	jle    c0023bc0 <IDE::detect()+0xe0>
c0023be6:	50                   	push   eax
c0023be7:	50                   	push   eax
c0023be8:	6a 00                	push   0x0
c0023bea:	68 40 4b 4c 00       	push   0x4c4b40
c0023bef:	e8 67 a4 ff ff       	call   c001e05b <nanoSleep(unsigned long long)>
c0023bf4:	83 c4 10             	add    esp,0x10
c0023bf7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023bfd:	75 c1                	jne    c0023bc0 <IDE::detect()+0xe0>
c0023bff:	e9 3e 01 00 00       	jmp    c0023d42 <IDE::detect()+0x262>
c0023c04:	31 c9                	xor    ecx,ecx
c0023c06:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023c0a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023c0e:	83 ec 0c             	sub    esp,0xc
c0023c11:	68 80 00 00 00       	push   0x80
c0023c16:	57                   	push   edi
c0023c17:	6a 00                	push   0x0
c0023c19:	56                   	push   esi
c0023c1a:	53                   	push   ebx
c0023c1b:	e8 f4 fd ff ff       	call   c0023a14 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023c20:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023c25:	89 e8                	mov    eax,ebp
c0023c27:	89 d1                	mov    ecx,edx
c0023c29:	c1 e0 06             	shl    eax,0x6
c0023c2c:	01 d8                	add    eax,ebx
c0023c2e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023c35:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023c3c:	89 f2                	mov    edx,esi
c0023c3e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023c44:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023c48:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023c4e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023c52:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023c59:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023c61:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023c68:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023c70:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023c76:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023c7d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023c83:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023c87:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023c8b:	83 c4 20             	add    esp,0x20
c0023c8e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023c91:	83 c0 02             	add    eax,0x2
c0023c94:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023c9a:	83 c7 02             	add    edi,0x2
c0023c9d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023ca0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023ca6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023caa:	75 e2                	jne    c0023c8e <IDE::detect()+0x1ae>
c0023cac:	89 e8                	mov    eax,ebp
c0023cae:	c1 e0 06             	shl    eax,0x6
c0023cb1:	01 d8                	add    eax,ebx
c0023cb3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023cb9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023cc0:	66 c1 ea 09          	shr    dx,0x9
c0023cc4:	83 e2 01             	and    edx,0x1
c0023cc7:	84 c9                	test   cl,cl
c0023cc9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023ccf:	75 22                	jne    c0023cf3 <IDE::detect()+0x213>
c0023cd1:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023cd8:	74 46                	je     c0023d20 <IDE::detect()+0x240>
c0023cda:	83 ec 0c             	sub    esp,0xc
c0023cdd:	68 7c 01 00 00       	push   0x17c
c0023ce2:	e8 42 bb fe ff       	call   c000f829 <malloc>
c0023ce7:	89 c7                	mov    edi,eax
c0023ce9:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cec:	e8 15 05 00 00       	call   c0024206 <ATA::ATA()>
c0023cf1:	eb 17                	jmp    c0023d0a <IDE::detect()+0x22a>
c0023cf3:	83 ec 0c             	sub    esp,0xc
c0023cf6:	68 80 01 00 00       	push   0x180
c0023cfb:	e8 29 bb fe ff       	call   c000f829 <malloc>
c0023d00:	89 c7                	mov    edi,eax
c0023d02:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d05:	e8 88 0b 00 00       	call   c0024892 <ATAPI::ATAPI()>
c0023d0a:	5a                   	pop    edx
c0023d0b:	59                   	pop    ecx
c0023d0c:	57                   	push   edi
c0023d0d:	53                   	push   ebx
c0023d0e:	e8 a7 ff fe ff       	call   c0013cba <Device::addChild(Device*)>
c0023d13:	8b 07                	mov    eax,DWORD PTR [edi]
c0023d15:	53                   	push   ebx
c0023d16:	55                   	push   ebp
c0023d17:	6a 00                	push   0x0
c0023d19:	57                   	push   edi
c0023d1a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023d1d:	83 c4 20             	add    esp,0x20
c0023d20:	45                   	inc    ebp
c0023d21:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023d26:	74 0d                	je     c0023d35 <IDE::detect()+0x255>
c0023d28:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023d30:	e9 dc fd ff ff       	jmp    c0023b11 <IDE::detect()+0x31>
c0023d35:	4e                   	dec    esi
c0023d36:	74 63                	je     c0023d9b <IDE::detect()+0x2bb>
c0023d38:	be 01 00 00 00       	mov    esi,0x1
c0023d3d:	e9 c7 fd ff ff       	jmp    c0023b09 <IDE::detect()+0x29>
c0023d42:	50                   	push   eax
c0023d43:	6a 04                	push   0x4
c0023d45:	56                   	push   esi
c0023d46:	53                   	push   ebx
c0023d47:	e8 28 f7 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023d4c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023d50:	83 c4 0c             	add    esp,0xc
c0023d53:	6a 05                	push   0x5
c0023d55:	56                   	push   esi
c0023d56:	53                   	push   ebx
c0023d57:	e8 18 f7 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023d5c:	83 c4 10             	add    esp,0x10
c0023d5f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023d63:	80 fa 14             	cmp    dl,0x14
c0023d66:	75 04                	jne    c0023d6c <IDE::detect()+0x28c>
c0023d68:	3c eb                	cmp    al,0xeb
c0023d6a:	eb 07                	jmp    c0023d73 <IDE::detect()+0x293>
c0023d6c:	3c 96                	cmp    al,0x96
c0023d6e:	75 b1                	jne    c0023d21 <IDE::detect()+0x241>
c0023d70:	80 fa 69             	cmp    dl,0x69
c0023d73:	75 ac                	jne    c0023d21 <IDE::detect()+0x241>
c0023d75:	68 a1 00 00 00       	push   0xa1
c0023d7a:	6a 07                	push   0x7
c0023d7c:	56                   	push   esi
c0023d7d:	53                   	push   ebx
c0023d7e:	e8 31 f6 ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d83:	5f                   	pop    edi
c0023d84:	58                   	pop    eax
c0023d85:	6a 00                	push   0x0
c0023d87:	68 40 42 0f 00       	push   0xf4240
c0023d8c:	e8 ca a2 ff ff       	call   c001e05b <nanoSleep(unsigned long long)>
c0023d91:	83 c4 10             	add    esp,0x10
c0023d94:	b1 01                	mov    cl,0x1
c0023d96:	e9 6b fe ff ff       	jmp    c0023c06 <IDE::detect()+0x126>
c0023d9b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023da1:	5b                   	pop    ebx
c0023da2:	5e                   	pop    esi
c0023da3:	5f                   	pop    edi
c0023da4:	5d                   	pop    ebp
c0023da5:	c3                   	ret    

c0023da6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023da6:	55                   	push   ebp
c0023da7:	57                   	push   edi
c0023da8:	56                   	push   esi
c0023da9:	53                   	push   ebx
c0023daa:	83 ec 1c             	sub    esp,0x1c
c0023dad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023db1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023db5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023db9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023dbd:	88 c3                	mov    bl,al
c0023dbf:	84 c0                	test   al,al
c0023dc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023dc5:	0f 84 81 00 00 00    	je     c0023e4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023dcb:	83 ec 0c             	sub    esp,0xc
c0023dce:	68 17 cb 02 c0       	push   0xc002cb17
c0023dd3:	e8 a9 ea fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0023dd8:	83 c4 10             	add    esp,0x10
c0023ddb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ddf:	3c 01                	cmp    al,0x1
c0023de1:	74 63                	je     c0023e46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023de3:	3c 02                	cmp    al,0x2
c0023de5:	75 53                	jne    c0023e3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023de7:	d1 e6                	shl    esi,1
c0023de9:	09 ee                	or     esi,ebp
c0023deb:	50                   	push   eax
c0023dec:	89 f0                	mov    eax,esi
c0023dee:	6a 01                	push   0x1
c0023df0:	0f b6 f0             	movzx  esi,al
c0023df3:	c1 e6 06             	shl    esi,0x6
c0023df6:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023dfe:	50                   	push   eax
c0023dff:	57                   	push   edi
c0023e00:	e8 6f f6 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023e05:	83 c4 10             	add    esp,0x10
c0023e08:	a8 01                	test   al,0x1
c0023e0a:	74 02                	je     c0023e0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023e0c:	b3 07                	mov    bl,0x7
c0023e0e:	a8 02                	test   al,0x2
c0023e10:	74 02                	je     c0023e14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023e12:	b3 03                	mov    bl,0x3
c0023e14:	a8 04                	test   al,0x4
c0023e16:	74 02                	je     c0023e1a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023e18:	b3 14                	mov    bl,0x14
c0023e1a:	a8 08                	test   al,0x8
c0023e1c:	74 02                	je     c0023e20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023e1e:	b3 03                	mov    bl,0x3
c0023e20:	a8 10                	test   al,0x10
c0023e22:	74 02                	je     c0023e26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023e24:	b3 15                	mov    bl,0x15
c0023e26:	a8 20                	test   al,0x20
c0023e28:	74 02                	je     c0023e2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023e2a:	b3 03                	mov    bl,0x3
c0023e2c:	a8 40                	test   al,0x40
c0023e2e:	74 02                	je     c0023e32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023e30:	b3 16                	mov    bl,0x16
c0023e32:	84 c0                	test   al,al
c0023e34:	79 16                	jns    c0023e4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023e36:	b3 0d                	mov    bl,0xd
c0023e38:	eb 12                	jmp    c0023e4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023e3a:	3c 03                	cmp    al,0x3
c0023e3c:	74 0c                	je     c0023e4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023e3e:	3c 04                	cmp    al,0x4
c0023e40:	75 0a                	jne    c0023e4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023e42:	b3 08                	mov    bl,0x8
c0023e44:	eb 06                	jmp    c0023e4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023e46:	b3 13                	mov    bl,0x13
c0023e48:	eb 02                	jmp    c0023e4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023e4a:	b3 17                	mov    bl,0x17
c0023e4c:	83 c4 1c             	add    esp,0x1c
c0023e4f:	88 d8                	mov    al,bl
c0023e51:	5b                   	pop    ebx
c0023e52:	5e                   	pop    esi
c0023e53:	5f                   	pop    edi
c0023e54:	5d                   	pop    ebp
c0023e55:	c3                   	ret    

c0023e56 <IDE::polling(unsigned char, unsigned int)>:
c0023e56:	57                   	push   edi
c0023e57:	56                   	push   esi
c0023e58:	53                   	push   ebx
c0023e59:	bb 04 00 00 00       	mov    ebx,0x4
c0023e5e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023e62:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023e67:	52                   	push   edx
c0023e68:	6a 0c                	push   0xc
c0023e6a:	56                   	push   esi
c0023e6b:	57                   	push   edi
c0023e6c:	e8 03 f6 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023e71:	83 c4 10             	add    esp,0x10
c0023e74:	4b                   	dec    ebx
c0023e75:	75 f0                	jne    c0023e67 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023e77:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023e7c:	50                   	push   eax
c0023e7d:	6a 0c                	push   0xc
c0023e7f:	56                   	push   esi
c0023e80:	57                   	push   edi
c0023e81:	e8 ee f5 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0023e86:	83 c4 10             	add    esp,0x10
c0023e89:	a8 01                	test   al,0x1
c0023e8b:	75 17                	jne    c0023ea4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023e8d:	a8 20                	test   al,0x20
c0023e8f:	75 0f                	jne    c0023ea0 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023e91:	4b                   	dec    ebx
c0023e92:	74 10                	je     c0023ea4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023e94:	84 c0                	test   al,al
c0023e96:	78 e4                	js     c0023e7c <IDE::polling(unsigned char, unsigned int)+0x26>
c0023e98:	a8 08                	test   al,0x8
c0023e9a:	74 e0                	je     c0023e7c <IDE::polling(unsigned char, unsigned int)+0x26>
c0023e9c:	31 c0                	xor    eax,eax
c0023e9e:	eb 06                	jmp    c0023ea6 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023ea0:	b0 01                	mov    al,0x1
c0023ea2:	eb 02                	jmp    c0023ea6 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023ea4:	b0 02                	mov    al,0x2
c0023ea6:	5b                   	pop    ebx
c0023ea7:	5e                   	pop    esi
c0023ea8:	5f                   	pop    edi
c0023ea9:	c3                   	ret    

c0023eaa <SATABus::close(int, int, void*)>:
c0023eaa:	31 c0                	xor    eax,eax
c0023eac:	c3                   	ret    
c0023ead:	90                   	nop

c0023eae <SATABus::detect()>:
c0023eae:	c3                   	ret    
c0023eaf:	90                   	nop

c0023eb0 <SATABus::SATABus()>:
c0023eb0:	83 ec 0c             	sub    esp,0xc
c0023eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023eb7:	83 ec 08             	sub    esp,0x8
c0023eba:	68 50 cb 02 c0       	push   0xc002cb50
c0023ebf:	50                   	push   eax
c0023ec0:	e8 a3 01 ff ff       	call   c0014068 <HardDiskController::HardDiskController(char const*)>
c0023ec5:	83 c4 10             	add    esp,0x10
c0023ec8:	ba a4 cb 02 c0       	mov    edx,0xc002cba4
c0023ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ed1:	89 10                	mov    DWORD PTR [eax],edx
c0023ed3:	83 ec 0c             	sub    esp,0xc
c0023ed6:	6a 50                	push   0x50
c0023ed8:	e8 40 be fe ff       	call   c000fd1d <Phys::allocateContiguousPages(int)>
c0023edd:	83 c4 10             	add    esp,0x10
c0023ee0:	89 c2                	mov    edx,eax
c0023ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ee6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023eec:	83 ec 0c             	sub    esp,0xc
c0023eef:	6a 50                	push   0x50
c0023ef1:	e8 b9 d5 fe ff       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c0023ef6:	83 c4 10             	add    esp,0x10
c0023ef9:	89 c2                	mov    edx,eax
c0023efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023eff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023f05:	a1 f0 e4 02 c0       	mov    eax,ds:0xc002e4f0
c0023f0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023f0e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023f14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023f18:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023f1e:	83 ec 0c             	sub    esp,0xc
c0023f21:	6a 03                	push   0x3
c0023f23:	6a 50                	push   0x50
c0023f25:	51                   	push   ecx
c0023f26:	52                   	push   edx
c0023f27:	50                   	push   eax
c0023f28:	e8 1f df fe ff       	call   c0011e4c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023f2d:	83 c4 20             	add    esp,0x20
c0023f30:	90                   	nop
c0023f31:	83 c4 0c             	add    esp,0xc
c0023f34:	c3                   	ret    
c0023f35:	90                   	nop

c0023f36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023f36:	83 ec 0c             	sub    esp,0xc
c0023f39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f3d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023f40:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023f43:	09 c2                	or     edx,eax
c0023f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f49:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023f4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023f51:	31 c0                	xor    eax,eax
c0023f53:	c1 e9 08             	shr    ecx,0x8
c0023f56:	83 e1 0f             	and    ecx,0xf
c0023f59:	39 c8                	cmp    eax,ecx
c0023f5b:	74 0a                	je     c0023f67 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023f5d:	f6 c2 01             	test   dl,0x1
c0023f60:	74 18                	je     c0023f7a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023f62:	d1 ea                	shr    edx,1
c0023f64:	40                   	inc    eax
c0023f65:	eb f2                	jmp    c0023f59 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023f67:	83 ec 0c             	sub    esp,0xc
c0023f6a:	68 74 cb 02 c0       	push   0xc002cb74
c0023f6f:	e8 7b 62 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0023f74:	83 c4 10             	add    esp,0x10
c0023f77:	83 c8 ff             	or     eax,0xffffffff
c0023f7a:	83 c4 0c             	add    esp,0xc
c0023f7d:	c3                   	ret    

c0023f7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023f7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023f82:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023f85:	89 c2                	mov    edx,eax
c0023f87:	c1 ea 08             	shr    edx,0x8
c0023f8a:	83 e2 0f             	and    edx,0xf
c0023f8d:	fe ca                	dec    dl
c0023f8f:	75 31                	jne    c0023fc2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023f91:	83 e0 0f             	and    eax,0xf
c0023f94:	3c 03                	cmp    al,0x3
c0023f96:	75 2a                	jne    c0023fc2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023f98:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023f9b:	b8 02 00 00 00       	mov    eax,0x2
c0023fa0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023fa6:	74 1c                	je     c0023fc4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023fa8:	b8 04 00 00 00       	mov    eax,0x4
c0023fad:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023fb3:	74 0f                	je     c0023fc4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023fb5:	31 c0                	xor    eax,eax
c0023fb7:	83 fa 03             	cmp    edx,0x3
c0023fba:	0f 94 c0             	sete   al
c0023fbd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023fc1:	c3                   	ret    
c0023fc2:	31 c0                	xor    eax,eax
c0023fc4:	c3                   	ret    
c0023fc5:	90                   	nop

c0023fc6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023fc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023fca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023fcd:	0f ba e2 0f          	bt     edx,0xf
c0023fd1:	72 f7                	jb     c0023fca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023fd3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023fd6:	83 ca 10             	or     edx,0x10
c0023fd9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023fdc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023fdf:	83 ca 01             	or     edx,0x1
c0023fe2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023fe5:	c3                   	ret    

c0023fe6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023fe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023fea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023fed:	83 e2 fe             	and    edx,0xfffffffe
c0023ff0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ff3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ff6:	83 e2 ef             	and    edx,0xffffffef
c0023ff9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ffc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023fff:	0f ba e2 0e          	bt     edx,0xe
c0024003:	72 f7                	jb     c0023ffc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024005:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024008:	0f ba e2 0f          	bt     edx,0xf
c002400c:	72 ee                	jb     c0023ffc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002400e:	c3                   	ret    
c002400f:	90                   	nop

c0024010 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024010:	55                   	push   ebp
c0024011:	57                   	push   edi
c0024012:	56                   	push   esi
c0024013:	53                   	push   ebx
c0024014:	83 ec 1c             	sub    esp,0x1c
c0024017:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002401b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002401f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024023:	53                   	push   ebx
c0024024:	89 fd                	mov    ebp,edi
c0024026:	56                   	push   esi
c0024027:	c1 e5 0a             	shl    ebp,0xa
c002402a:	e8 b7 ff ff ff       	call   c0023fe6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002402f:	83 ec 0c             	sub    esp,0xc
c0024032:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024038:	01 e8                	add    eax,ebp
c002403a:	89 03                	mov    DWORD PTR [ebx],eax
c002403c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002403e:	68 00 04 00 00       	push   0x400
c0024043:	6a 00                	push   0x0
c0024045:	50                   	push   eax
c0024046:	e8 05 c7 fd ff       	call   c0000750 <memset>
c002404b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024051:	89 fa                	mov    edx,edi
c0024053:	01 e8                	add    eax,ebp
c0024055:	c1 e7 0d             	shl    edi,0xd
c0024058:	89 03                	mov    DWORD PTR [ebx],eax
c002405a:	c1 e2 08             	shl    edx,0x8
c002405d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024064:	81 c2 00 80 00 00    	add    edx,0x8000
c002406a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002406e:	89 d0                	mov    eax,edx
c0024070:	83 c4 1c             	add    esp,0x1c
c0024073:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024079:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002407c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002407f:	68 00 01 00 00       	push   0x100
c0024084:	6a 00                	push   0x0
c0024086:	50                   	push   eax
c0024087:	e8 c4 c6 fd ff       	call   c0000750 <memset>
c002408c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024090:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024096:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002409c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00240a0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00240a3:	83 c4 10             	add    esp,0x10
c00240a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00240ad:	31 ff                	xor    edi,edi
c00240af:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00240b5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00240bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00240bf:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00240c5:	83 c5 20             	add    ebp,0x20
c00240c8:	01 f8                	add    eax,edi
c00240ca:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00240cd:	52                   	push   edx
c00240ce:	68 00 01 00 00       	push   0x100
c00240d3:	6a 00                	push   0x0
c00240d5:	50                   	push   eax
c00240d6:	e8 75 c6 fd ff       	call   c0000750 <memset>
c00240db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00240df:	83 c4 10             	add    esp,0x10
c00240e2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00240e8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00240ef:	01 f8                	add    eax,edi
c00240f1:	81 c7 00 01 00 00    	add    edi,0x100
c00240f7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00240fa:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024100:	75 b3                	jne    c00240b5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024102:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024106:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002410a:	83 c4 1c             	add    esp,0x1c
c002410d:	5b                   	pop    ebx
c002410e:	5e                   	pop    esi
c002410f:	5f                   	pop    edi
c0024110:	5d                   	pop    ebp
c0024111:	e9 b0 fe ff ff       	jmp    c0023fc6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024116 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024116:	55                   	push   ebp
c0024117:	57                   	push   edi
c0024118:	56                   	push   esi
c0024119:	53                   	push   ebx
c002411a:	31 db                	xor    ebx,ebx
c002411c:	83 ec 0c             	sub    esp,0xc
c002411f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024123:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024127:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002412a:	f7 c7 01 00 00 00    	test   edi,0x1
c0024130:	74 7a                	je     c00241ac <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0024132:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024136:	89 d8                	mov    eax,ebx
c0024138:	c1 e0 07             	shl    eax,0x7
c002413b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0024142:	55                   	push   ebp
c0024143:	56                   	push   esi
c0024144:	e8 35 fe ff ff       	call   c0023f7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024149:	5a                   	pop    edx
c002414a:	83 f8 01             	cmp    eax,0x1
c002414d:	59                   	pop    ecx
c002414e:	75 21                	jne    c0024171 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0024150:	50                   	push   eax
c0024151:	53                   	push   ebx
c0024152:	55                   	push   ebp
c0024153:	56                   	push   esi
c0024154:	e8 b7 fe ff ff       	call   c0024010 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024159:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024160:	e8 c4 b6 fe ff       	call   c000f829 <malloc>
c0024165:	89 c5                	mov    ebp,eax
c0024167:	89 04 24             	mov    DWORD PTR [esp],eax
c002416a:	e8 87 0d 00 00       	call   c0024ef6 <SATA::SATA()>
c002416f:	eb 24                	jmp    c0024195 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0024171:	83 f8 04             	cmp    eax,0x4
c0024174:	75 36                	jne    c00241ac <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0024176:	51                   	push   ecx
c0024177:	53                   	push   ebx
c0024178:	55                   	push   ebp
c0024179:	56                   	push   esi
c002417a:	e8 91 fe ff ff       	call   c0024010 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002417f:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024186:	e8 9e b6 fe ff       	call   c000f829 <malloc>
c002418b:	89 c5                	mov    ebp,eax
c002418d:	89 04 24             	mov    DWORD PTR [esp],eax
c0024190:	e8 d7 10 00 00       	call   c002526c <SATAPI::SATAPI()>
c0024195:	58                   	pop    eax
c0024196:	5a                   	pop    edx
c0024197:	55                   	push   ebp
c0024198:	56                   	push   esi
c0024199:	e8 1c fb fe ff       	call   c0013cba <Device::addChild(Device*)>
c002419e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00241a1:	56                   	push   esi
c00241a2:	6a 00                	push   0x0
c00241a4:	53                   	push   ebx
c00241a5:	55                   	push   ebp
c00241a6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00241a9:	83 c4 20             	add    esp,0x20
c00241ac:	d1 ef                	shr    edi,1
c00241ae:	43                   	inc    ebx
c00241af:	83 fb 20             	cmp    ebx,0x20
c00241b2:	0f 85 72 ff ff ff    	jne    c002412a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00241b8:	83 c4 0c             	add    esp,0xc
c00241bb:	5b                   	pop    ebx
c00241bc:	5e                   	pop    esi
c00241bd:	5f                   	pop    edi
c00241be:	5d                   	pop    ebp
c00241bf:	c3                   	ret    

c00241c0 <SATABus::open(int, int, void*)>:
c00241c0:	83 ec 14             	sub    esp,0x14
c00241c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00241c7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00241cd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00241d3:	52                   	push   edx
c00241d4:	50                   	push   eax
c00241d5:	e8 3c ff ff ff       	call   c0024116 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00241da:	31 c0                	xor    eax,eax
c00241dc:	83 c4 1c             	add    esp,0x1c
c00241df:	c3                   	ret    

c00241e0 <ATA::close(int, int, void*)>:
c00241e0:	83 ec 0c             	sub    esp,0xc
c00241e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00241ed:	85 c0                	test   eax,eax
c00241ef:	74 0c                	je     c00241fd <ATA::close(int, int, void*)+0x1d>
c00241f1:	83 ec 0c             	sub    esp,0xc
c00241f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00241f6:	50                   	push   eax
c00241f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00241fa:	83 c4 10             	add    esp,0x10
c00241fd:	31 c0                	xor    eax,eax
c00241ff:	83 c4 0c             	add    esp,0xc
c0024202:	c3                   	ret    
c0024203:	90                   	nop

c0024204 <ATA::powerSaving(PowerSavingLevel)>:
c0024204:	c3                   	ret    
c0024205:	90                   	nop

c0024206 <ATA::ATA()>:
c0024206:	83 ec 0c             	sub    esp,0xc
c0024209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002420d:	83 ec 04             	sub    esp,0x4
c0024210:	68 00 02 00 00       	push   0x200
c0024215:	68 99 cc 02 c0       	push   0xc002cc99
c002421a:	50                   	push   eax
c002421b:	e8 d0 fe fe ff       	call   c00140f0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024220:	83 c4 10             	add    esp,0x10
c0024223:	ba 1c cc 02 c0       	mov    edx,0xc002cc1c
c0024228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002422c:	89 10                	mov    DWORD PTR [eax],edx
c002422e:	90                   	nop
c002422f:	83 c4 0c             	add    esp,0xc
c0024232:	c3                   	ret    
c0024233:	90                   	nop

c0024234 <ATA::flush(bool)>:
c0024234:	53                   	push   ebx
c0024235:	83 ec 08             	sub    esp,0x8
c0024238:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002423d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024241:	19 c0                	sbb    eax,eax
c0024243:	83 e0 fd             	and    eax,0xfffffffd
c0024246:	05 ea 00 00 00       	add    eax,0xea
c002424b:	50                   	push   eax
c002424c:	6a 07                	push   0x7
c002424e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024255:	50                   	push   eax
c0024256:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002425c:	e8 53 f1 ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024261:	83 c4 0c             	add    esp,0xc
c0024264:	6a 00                	push   0x0
c0024266:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002426d:	50                   	push   eax
c002426e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024274:	e8 dd fb ff ff       	call   c0023e56 <IDE::polling(unsigned char, unsigned int)>
c0024279:	83 c4 18             	add    esp,0x18
c002427c:	5b                   	pop    ebx
c002427d:	c3                   	ret    

c002427e <ATA::readyForCommand()>:
c002427e:	56                   	push   esi
c002427f:	53                   	push   ebx
c0024280:	31 db                	xor    ebx,ebx
c0024282:	50                   	push   eax
c0024283:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024287:	50                   	push   eax
c0024288:	6a 0c                	push   0xc
c002428a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024291:	50                   	push   eax
c0024292:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024298:	e8 d7 f1 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c002429d:	83 c4 10             	add    esp,0x10
c00242a0:	a8 88                	test   al,0x88
c00242a2:	74 23                	je     c00242c7 <ATA::readyForCommand()+0x49>
c00242a4:	43                   	inc    ebx
c00242a5:	83 fb 63             	cmp    ebx,0x63
c00242a8:	7e dd                	jle    c0024287 <ATA::readyForCommand()+0x9>
c00242aa:	51                   	push   ecx
c00242ab:	51                   	push   ecx
c00242ac:	6a 00                	push   0x0
c00242ae:	68 40 42 0f 00       	push   0xf4240
c00242b3:	e8 a3 9d ff ff       	call   c001e05b <nanoSleep(unsigned long long)>
c00242b8:	83 c4 10             	add    esp,0x10
c00242bb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00242c1:	75 c4                	jne    c0024287 <ATA::readyForCommand()+0x9>
c00242c3:	31 c0                	xor    eax,eax
c00242c5:	eb 02                	jmp    c00242c9 <ATA::readyForCommand()+0x4b>
c00242c7:	b0 01                	mov    al,0x1
c00242c9:	5a                   	pop    edx
c00242ca:	5b                   	pop    ebx
c00242cb:	5e                   	pop    esi
c00242cc:	c3                   	ret    
c00242cd:	90                   	nop

c00242ce <ATA::access(unsigned long long, int, void*, bool)>:
c00242ce:	55                   	push   ebp
c00242cf:	57                   	push   edi
c00242d0:	56                   	push   esi
c00242d1:	53                   	push   ebx
c00242d2:	83 ec 38             	sub    esp,0x38
c00242d5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00242d9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00242dd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00242e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00242e5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00242e9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00242ed:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00242f1:	68 c8 cb 02 c0       	push   0xc002cbc8
c00242f6:	e8 86 e5 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00242fb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024301:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024305:	83 c4 10             	add    esp,0x10
c0024308:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002430e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024312:	c1 e0 06             	shl    eax,0x6
c0024315:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002431d:	74 5d                	je     c002437c <ATA::access(unsigned long long, int, void*, bool)+0xae>
c002431f:	89 fa                	mov    edx,edi
c0024321:	89 f0                	mov    eax,esi
c0024323:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024327:	c1 ea 1c             	shr    edx,0x1c
c002432a:	89 d1                	mov    ecx,edx
c002432c:	09 c1                	or     ecx,eax
c002432e:	74 25                	je     c0024355 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c0024330:	31 ed                	xor    ebp,ebp
c0024332:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024339:	89 fa                	mov    edx,edi
c002433b:	89 f0                	mov    eax,esi
c002433d:	0f ad d0             	shrd   eax,edx,cl
c0024340:	d3 ea                	shr    edx,cl
c0024342:	f6 c1 20             	test   cl,0x20
c0024345:	74 02                	je     c0024349 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c0024347:	89 d0                	mov    eax,edx
c0024349:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002434d:	45                   	inc    ebp
c002434e:	83 fd 06             	cmp    ebp,0x6
c0024351:	75 df                	jne    c0024332 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c0024353:	eb 76                	jmp    c00243cb <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c0024355:	89 f0                	mov    eax,esi
c0024357:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002435c:	89 fa                	mov    edx,edi
c002435e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024365:	0f ac d0 10          	shrd   eax,edx,0x10
c0024369:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002436e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024372:	c1 ee 18             	shr    esi,0x18
c0024375:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002437a:	eb 56                	jmp    c00243d2 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c002437c:	6a 00                	push   0x0
c002437e:	6a 3f                	push   0x3f
c0024380:	57                   	push   edi
c0024381:	56                   	push   esi
c0024382:	e8 9d 29 00 00       	call   c0026d24 <__umoddi3>
c0024387:	83 c4 10             	add    esp,0x10
c002438a:	40                   	inc    eax
c002438b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002438f:	6a 00                	push   0x0
c0024391:	68 f0 03 00 00       	push   0x3f0
c0024396:	57                   	push   edi
c0024397:	56                   	push   esi
c0024398:	e8 87 28 00 00       	call   c0026c24 <__udivdi3>
c002439d:	83 c4 10             	add    esp,0x10
c00243a0:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00243a5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00243ac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00243b1:	6a 00                	push   0x0
c00243b3:	6a 3f                	push   0x3f
c00243b5:	57                   	push   edi
c00243b6:	56                   	push   esi
c00243b7:	e8 68 28 00 00       	call   c0026c24 <__udivdi3>
c00243bc:	83 c4 10             	add    esp,0x10
c00243bf:	89 c6                	mov    esi,eax
c00243c1:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00243c6:	83 e6 0f             	and    esi,0xf
c00243c9:	eb 07                	jmp    c00243d2 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c00243cb:	31 f6                	xor    esi,esi
c00243cd:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00243d2:	bf 01 00 00 00       	mov    edi,0x1
c00243d7:	50                   	push   eax
c00243d8:	6a 00                	push   0x0
c00243da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243e1:	50                   	push   eax
c00243e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00243e6:	e8 d5 f1 ff ff       	call   c00235c0 <IDE::enableIRQs(unsigned char, bool)>
c00243eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00243ee:	e8 8b fe ff ff       	call   c002427e <ATA::readyForCommand()>
c00243f3:	83 c4 10             	add    esp,0x10
c00243f6:	84 c0                	test   al,al
c00243f8:	0f 84 bc 02 00 00    	je     c00246ba <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00243fe:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024404:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002440a:	c1 e0 04             	shl    eax,0x4
c002440d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024414:	09 c6                	or     esi,eax
c0024416:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002441b:	75 05                	jne    c0024422 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c002441d:	83 ce a0             	or     esi,0xffffffa0
c0024420:	eb 03                	jmp    c0024425 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c0024422:	83 ce e0             	or     esi,0xffffffe0
c0024425:	89 f0                	mov    eax,esi
c0024427:	0f b6 f0             	movzx  esi,al
c002442a:	56                   	push   esi
c002442b:	6a 06                	push   0x6
c002442d:	51                   	push   ecx
c002442e:	52                   	push   edx
c002442f:	e8 80 ef ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024434:	83 c4 10             	add    esp,0x10
c0024437:	6a 00                	push   0x0
c0024439:	6a 01                	push   0x1
c002443b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024442:	50                   	push   eax
c0024443:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024449:	e8 66 ef ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002444e:	83 c4 10             	add    esp,0x10
c0024451:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024456:	75 6e                	jne    c00244c6 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c0024458:	6a 00                	push   0x0
c002445a:	6a 08                	push   0x8
c002445c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024463:	50                   	push   eax
c0024464:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002446a:	e8 45 ef ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002446f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024474:	50                   	push   eax
c0024475:	6a 09                	push   0x9
c0024477:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002447e:	50                   	push   eax
c002447f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024485:	e8 2a ef ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002448a:	83 c4 20             	add    esp,0x20
c002448d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024492:	50                   	push   eax
c0024493:	6a 0a                	push   0xa
c0024495:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002449c:	50                   	push   eax
c002449d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244a3:	e8 0c ef ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244a8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00244ad:	50                   	push   eax
c00244ae:	6a 0b                	push   0xb
c00244b0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244b7:	50                   	push   eax
c00244b8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244be:	e8 f1 ee ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244c3:	83 c4 20             	add    esp,0x20
c00244c6:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00244cb:	50                   	push   eax
c00244cc:	6a 02                	push   0x2
c00244ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244d5:	50                   	push   eax
c00244d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244dc:	e8 d3 ee ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244e1:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00244e6:	50                   	push   eax
c00244e7:	6a 03                	push   0x3
c00244e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244f0:	50                   	push   eax
c00244f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244f7:	e8 b8 ee ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244fc:	83 c4 20             	add    esp,0x20
c00244ff:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024504:	50                   	push   eax
c0024505:	6a 04                	push   0x4
c0024507:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002450e:	50                   	push   eax
c002450f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024515:	e8 9a ee ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002451a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002451f:	50                   	push   eax
c0024520:	6a 05                	push   0x5
c0024522:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024529:	50                   	push   eax
c002452a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024530:	e8 7f ee ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024535:	83 c4 20             	add    esp,0x20
c0024538:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002453d:	0f 94 c0             	sete   al
c0024540:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024545:	74 09                	je     c0024550 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c0024547:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002454e:	eb 07                	jmp    c0024557 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c0024550:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024557:	0f b6 c0             	movzx  eax,al
c002455a:	50                   	push   eax
c002455b:	6a 07                	push   0x7
c002455d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024564:	50                   	push   eax
c0024565:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002456b:	e8 44 ee ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024570:	c7 04 24 d5 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbd5
c0024577:	e8 05 e3 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c002457c:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024580:	83 c4 10             	add    esp,0x10
c0024583:	85 f6                	test   esi,esi
c0024585:	0f 84 f7 00 00 00    	je     c0024682 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c002458b:	83 ec 0c             	sub    esp,0xc
c002458e:	68 d8 cb 02 c0       	push   0xc002cbd8
c0024593:	e8 e9 e2 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0024598:	83 c4 0c             	add    esp,0xc
c002459b:	6a 01                	push   0x1
c002459d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245a4:	50                   	push   eax
c00245a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245ab:	e8 a6 f8 ff ff       	call   c0023e56 <IDE::polling(unsigned char, unsigned int)>
c00245b0:	c7 04 24 db cb 02 c0 	mov    DWORD PTR [esp],0xc002cbdb
c00245b7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00245bb:	e8 c1 e2 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00245c0:	83 c4 10             	add    esp,0x10
c00245c3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00245c7:	84 c0                	test   al,al
c00245c9:	74 2b                	je     c00245f6 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c00245cb:	0f b6 f8             	movzx  edi,al
c00245ce:	57                   	push   edi
c00245cf:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00245d6:	50                   	push   eax
c00245d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245de:	50                   	push   eax
c00245df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245e5:	e8 bc f7 ff ff       	call   c0023da6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00245ea:	c7 04 24 de cb 02 c0 	mov    DWORD PTR [esp],0xc002cbde
c00245f1:	e9 bc 00 00 00       	jmp    c00246b2 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c00245f6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00245fb:	74 50                	je     c002464d <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c00245fd:	83 ec 0c             	sub    esp,0xc
c0024600:	31 ed                	xor    ebp,ebp
c0024602:	68 e9 cb 02 c0       	push   0xc002cbe9
c0024607:	e8 75 e2 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c002460c:	83 c4 10             	add    esp,0x10
c002460f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024613:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024617:	50                   	push   eax
c0024618:	50                   	push   eax
c0024619:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024620:	50                   	push   eax
c0024621:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024627:	e8 76 ed ff ff       	call   c00233a2 <IDE::getBase(unsigned char)>
c002462c:	89 c2                	mov    edx,eax
c002462e:	89 f8                	mov    eax,edi
c0024630:	66 ef                	out    dx,ax
c0024632:	45                   	inc    ebp
c0024633:	83 c4 10             	add    esp,0x10
c0024636:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002463c:	75 d1                	jne    c002460f <ATA::access(unsigned long long, int, void*, bool)+0x341>
c002463e:	83 ec 0c             	sub    esp,0xc
c0024641:	68 ec cb 02 c0       	push   0xc002cbec
c0024646:	e8 36 e2 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c002464b:	eb 24                	jmp    c0024671 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c002464d:	51                   	push   ecx
c002464e:	51                   	push   ecx
c002464f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024656:	50                   	push   eax
c0024657:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002465d:	e8 40 ed ff ff       	call   c00233a2 <IDE::getBase(unsigned char)>
c0024662:	b9 00 01 00 00       	mov    ecx,0x100
c0024667:	89 c2                	mov    edx,eax
c0024669:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002466d:	fc                   	cld    
c002466e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024671:	83 c4 10             	add    esp,0x10
c0024674:	4e                   	dec    esi
c0024675:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002467d:	e9 01 ff ff ff       	jmp    c0024583 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c0024682:	31 ff                	xor    edi,edi
c0024684:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024689:	74 2f                	je     c00246ba <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c002468b:	83 ec 0c             	sub    esp,0xc
c002468e:	68 ef cb 02 c0       	push   0xc002cbef
c0024693:	e8 e9 e1 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0024698:	58                   	pop    eax
c0024699:	31 c0                	xor    eax,eax
c002469b:	5a                   	pop    edx
c002469c:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00246a1:	0f 94 c0             	sete   al
c00246a4:	50                   	push   eax
c00246a5:	53                   	push   ebx
c00246a6:	e8 89 fb ff ff       	call   c0024234 <ATA::flush(bool)>
c00246ab:	c7 04 24 f2 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbf2
c00246b2:	e8 ca e1 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00246b7:	83 c4 10             	add    esp,0x10
c00246ba:	83 c4 2c             	add    esp,0x2c
c00246bd:	89 f8                	mov    eax,edi
c00246bf:	5b                   	pop    ebx
c00246c0:	5e                   	pop    esi
c00246c1:	5f                   	pop    edi
c00246c2:	5d                   	pop    ebp
c00246c3:	c3                   	ret    

c00246c4 <ATA::read(unsigned long long, int, void*)>:
c00246c4:	57                   	push   edi
c00246c5:	b8 04 00 00 00       	mov    eax,0x4
c00246ca:	56                   	push   esi
c00246cb:	53                   	push   ebx
c00246cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00246d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00246d4:	8d 7a ff             	lea    edi,[edx-0x1]
c00246d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00246db:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00246df:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00246e5:	77 25                	ja     c002470c <ATA::read(unsigned long long, int, void*)+0x48>
c00246e7:	b8 06 00 00 00       	mov    eax,0x6
c00246ec:	85 f6                	test   esi,esi
c00246ee:	74 1c                	je     c002470c <ATA::read(unsigned long long, int, void*)+0x48>
c00246f0:	50                   	push   eax
c00246f1:	50                   	push   eax
c00246f2:	6a 00                	push   0x0
c00246f4:	56                   	push   esi
c00246f5:	52                   	push   edx
c00246f6:	53                   	push   ebx
c00246f7:	51                   	push   ecx
c00246f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00246fc:	e8 cd fb ff ff       	call   c00242ce <ATA::access(unsigned long long, int, void*, bool)>
c0024701:	83 c4 20             	add    esp,0x20
c0024704:	85 c0                	test   eax,eax
c0024706:	0f 95 c0             	setne  al
c0024709:	0f b6 c0             	movzx  eax,al
c002470c:	5b                   	pop    ebx
c002470d:	5e                   	pop    esi
c002470e:	5f                   	pop    edi
c002470f:	c3                   	ret    

c0024710 <ATA::write(unsigned long long, int, void*)>:
c0024710:	55                   	push   ebp
c0024711:	57                   	push   edi
c0024712:	56                   	push   esi
c0024713:	53                   	push   ebx
c0024714:	83 ec 18             	sub    esp,0x18
c0024717:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002471b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002471f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0024723:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0024727:	68 f5 cb 02 c0       	push   0xc002cbf5
c002472c:	e8 50 e1 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0024731:	8d 53 ff             	lea    edx,[ebx-0x1]
c0024734:	83 c4 10             	add    esp,0x10
c0024737:	b8 04 00 00 00       	mov    eax,0x4
c002473c:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0024742:	77 25                	ja     c0024769 <ATA::write(unsigned long long, int, void*)+0x59>
c0024744:	b8 06 00 00 00       	mov    eax,0x6
c0024749:	85 f6                	test   esi,esi
c002474b:	74 1c                	je     c0024769 <ATA::write(unsigned long long, int, void*)+0x59>
c002474d:	50                   	push   eax
c002474e:	50                   	push   eax
c002474f:	6a 01                	push   0x1
c0024751:	56                   	push   esi
c0024752:	53                   	push   ebx
c0024753:	55                   	push   ebp
c0024754:	57                   	push   edi
c0024755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024759:	e8 70 fb ff ff       	call   c00242ce <ATA::access(unsigned long long, int, void*, bool)>
c002475e:	83 c4 20             	add    esp,0x20
c0024761:	85 c0                	test   eax,eax
c0024763:	0f 95 c0             	setne  al
c0024766:	0f b6 c0             	movzx  eax,al
c0024769:	83 c4 0c             	add    esp,0xc
c002476c:	5b                   	pop    ebx
c002476d:	5e                   	pop    esi
c002476e:	5f                   	pop    edi
c002476f:	5d                   	pop    ebp
c0024770:	c3                   	ret    
c0024771:	90                   	nop

c0024772 <ATA::detectCHS()>:
c0024772:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024776:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002477c:	c1 e0 06             	shl    eax,0x6
c002477f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024785:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002478f:	c7 44 24 04 01 cc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cc01
c0024797:	e9 53 5a ff ff       	jmp    c001a1ef <Krnl::panic(char const*)>

c002479c <ATA::open(int, int, void*)>:
c002479c:	53                   	push   ebx
c002479d:	83 ec 08             	sub    esp,0x8
c00247a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00247a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00247a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00247ac:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00247b2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00247b8:	c1 e0 06             	shl    eax,0x6
c00247bb:	01 d0                	add    eax,edx
c00247bd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00247c4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00247ca:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00247d1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00247db:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00247e1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00247e8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00247ef:	75 0c                	jne    c00247fd <ATA::open(int, int, void*)+0x61>
c00247f1:	83 ec 0c             	sub    esp,0xc
c00247f4:	53                   	push   ebx
c00247f5:	e8 78 ff ff ff       	call   c0024772 <ATA::detectCHS()>
c00247fa:	83 c4 10             	add    esp,0x10
c00247fd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024803:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024809:	c1 e0 06             	shl    eax,0x6
c002480c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024813:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002481d:	d1 e8                	shr    eax,1
c002481f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024825:	6a 04                	push   0x4
c0024827:	6a 0c                	push   0xc
c0024829:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024830:	50                   	push   eax
c0024831:	52                   	push   edx
c0024832:	e8 7d eb ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024837:	90                   	nop
c0024838:	90                   	nop
c0024839:	6a 00                	push   0x0
c002483b:	6a 0c                	push   0xc
c002483d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024844:	50                   	push   eax
c0024845:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002484b:	e8 64 eb ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024850:	83 c4 14             	add    esp,0x14
c0024853:	53                   	push   ebx
c0024854:	e8 ff f8 fe ff       	call   c0014158 <PhysicalDisk::startCache()>
c0024859:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002485c:	e8 7f 1b ff ff       	call   c00163e0 <createPartitionsForDisk(PhysicalDisk*)>
c0024861:	31 c0                	xor    eax,eax
c0024863:	83 c4 18             	add    esp,0x18
c0024866:	5b                   	pop    ebx
c0024867:	c3                   	ret    

c0024868 <ATAPI::write(unsigned long long, int, void*)>:
c0024868:	b8 03 00 00 00       	mov    eax,0x3
c002486d:	c3                   	ret    

c002486e <ATAPI::close(int, int, void*)>:
c002486e:	83 ec 0c             	sub    esp,0xc
c0024871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024875:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002487b:	85 c0                	test   eax,eax
c002487d:	74 0c                	je     c002488b <ATAPI::close(int, int, void*)+0x1d>
c002487f:	83 ec 0c             	sub    esp,0xc
c0024882:	8b 10                	mov    edx,DWORD PTR [eax]
c0024884:	50                   	push   eax
c0024885:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024888:	83 c4 10             	add    esp,0x10
c002488b:	31 c0                	xor    eax,eax
c002488d:	83 c4 0c             	add    esp,0xc
c0024890:	c3                   	ret    
c0024891:	90                   	nop

c0024892 <ATAPI::ATAPI()>:
c0024892:	83 ec 0c             	sub    esp,0xc
c0024895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024899:	83 ec 04             	sub    esp,0x4
c002489c:	68 00 08 00 00       	push   0x800
c00248a1:	68 39 cd 02 c0       	push   0xc002cd39
c00248a6:	50                   	push   eax
c00248a7:	e8 44 f8 fe ff       	call   c00140f0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00248ac:	83 c4 10             	add    esp,0x10
c00248af:	ba 54 cc 02 c0       	mov    edx,0xc002cc54
c00248b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248b8:	89 10                	mov    DWORD PTR [eax],edx
c00248ba:	90                   	nop
c00248bb:	83 c4 0c             	add    esp,0xc
c00248be:	c3                   	ret    
c00248bf:	90                   	nop

c00248c0 <ATAPI::readyForCommand()>:
c00248c0:	56                   	push   esi
c00248c1:	53                   	push   ebx
c00248c2:	31 db                	xor    ebx,ebx
c00248c4:	50                   	push   eax
c00248c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00248c9:	50                   	push   eax
c00248ca:	6a 0c                	push   0xc
c00248cc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00248d3:	50                   	push   eax
c00248d4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00248da:	e8 95 eb ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c00248df:	83 c4 10             	add    esp,0x10
c00248e2:	a8 88                	test   al,0x88
c00248e4:	74 23                	je     c0024909 <ATAPI::readyForCommand()+0x49>
c00248e6:	43                   	inc    ebx
c00248e7:	83 fb 63             	cmp    ebx,0x63
c00248ea:	7e dd                	jle    c00248c9 <ATAPI::readyForCommand()+0x9>
c00248ec:	51                   	push   ecx
c00248ed:	51                   	push   ecx
c00248ee:	6a 00                	push   0x0
c00248f0:	68 40 42 0f 00       	push   0xf4240
c00248f5:	e8 61 97 ff ff       	call   c001e05b <nanoSleep(unsigned long long)>
c00248fa:	83 c4 10             	add    esp,0x10
c00248fd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024903:	75 c4                	jne    c00248c9 <ATAPI::readyForCommand()+0x9>
c0024905:	31 c0                	xor    eax,eax
c0024907:	eb 02                	jmp    c002490b <ATAPI::readyForCommand()+0x4b>
c0024909:	b0 01                	mov    al,0x1
c002490b:	5a                   	pop    edx
c002490c:	5b                   	pop    ebx
c002490d:	5e                   	pop    esi
c002490e:	c3                   	ret    
c002490f:	90                   	nop

c0024910 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024910:	55                   	push   ebp
c0024911:	57                   	push   edi
c0024912:	56                   	push   esi
c0024913:	53                   	push   ebx
c0024914:	83 ec 20             	sub    esp,0x20
c0024917:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002491b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002491f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024923:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024927:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002492b:	6a 01                	push   0x1
c002492d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024934:	50                   	push   eax
c0024935:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002493b:	e8 80 ec ff ff       	call   c00235c0 <IDE::enableIRQs(unsigned char, bool)>
c0024940:	5e                   	pop    esi
c0024941:	58                   	pop    eax
c0024942:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024949:	50                   	push   eax
c002494a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024950:	e8 39 ea ff ff       	call   c002338e <IDE::prepareInterrupt(unsigned char)>
c0024955:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024958:	e8 63 ff ff ff       	call   c00248c0 <ATAPI::readyForCommand()>
c002495d:	83 c4 10             	add    esp,0x10
c0024960:	84 c0                	test   al,al
c0024962:	75 0a                	jne    c002496e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024964:	bb 01 00 00 00       	mov    ebx,0x1
c0024969:	e9 57 02 00 00       	jmp    c0024bc5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002496e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024974:	c1 e0 04             	shl    eax,0x4
c0024977:	0f b6 c0             	movzx  eax,al
c002497a:	50                   	push   eax
c002497b:	6a 06                	push   0x6
c002497d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024984:	50                   	push   eax
c0024985:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002498b:	e8 24 ea ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024990:	6a 00                	push   0x0
c0024992:	6a 01                	push   0x1
c0024994:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002499b:	50                   	push   eax
c002499c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249a2:	e8 0d ea ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249a7:	83 c4 20             	add    esp,0x20
c00249aa:	0f b6 c3             	movzx  eax,bl
c00249ad:	0f b6 df             	movzx  ebx,bh
c00249b0:	50                   	push   eax
c00249b1:	6a 04                	push   0x4
c00249b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249ba:	50                   	push   eax
c00249bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249c1:	e8 ee e9 ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249c6:	53                   	push   ebx
c00249c7:	6a 05                	push   0x5
c00249c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249d0:	50                   	push   eax
c00249d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249d7:	e8 d8 e9 ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249dc:	83 c4 20             	add    esp,0x20
c00249df:	68 a0 00 00 00       	push   0xa0
c00249e4:	6a 07                	push   0x7
c00249e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249ed:	50                   	push   eax
c00249ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249f4:	e8 bb e9 ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249f9:	83 c4 0c             	add    esp,0xc
c00249fc:	6a 01                	push   0x1
c00249fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a05:	50                   	push   eax
c0024a06:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a0c:	e8 45 f4 ff ff       	call   c0023e56 <IDE::polling(unsigned char, unsigned int)>
c0024a11:	83 c4 10             	add    esp,0x10
c0024a14:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024a1a:	84 c0                	test   al,al
c0024a1c:	74 23                	je     c0024a41 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024a1e:	0f b6 d8             	movzx  ebx,al
c0024a21:	0f b6 d2             	movzx  edx,dl
c0024a24:	53                   	push   ebx
c0024a25:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024a2c:	50                   	push   eax
c0024a2d:	52                   	push   edx
c0024a2e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a34:	e8 6d f3 ff ff       	call   c0023da6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024a39:	83 c4 10             	add    esp,0x10
c0024a3c:	e9 84 01 00 00       	jmp    c0024bc5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024a41:	0f b6 d2             	movzx  edx,dl
c0024a44:	53                   	push   ebx
c0024a45:	53                   	push   ebx
c0024a46:	52                   	push   edx
c0024a47:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a4d:	e8 50 e9 ff ff       	call   c00233a2 <IDE::getBase(unsigned char)>
c0024a52:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024a56:	b9 06 00 00 00       	mov    ecx,0x6
c0024a5b:	89 c2                	mov    edx,eax
c0024a5d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024a60:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024a64:	83 c4 10             	add    esp,0x10
c0024a67:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024a6d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024a74:	85 db                	test   ebx,ebx
c0024a76:	0f 84 ec 00 00 00    	je     c0024b68 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024a7c:	51                   	push   ecx
c0024a7d:	51                   	push   ecx
c0024a7e:	52                   	push   edx
c0024a7f:	50                   	push   eax
c0024a80:	e8 9d ea ff ff       	call   c0023522 <IDE::waitInterrupt(unsigned char)>
c0024a85:	83 c4 10             	add    esp,0x10
c0024a88:	84 c0                	test   al,al
c0024a8a:	0f 84 d4 fe ff ff    	je     c0024964 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024a90:	56                   	push   esi
c0024a91:	56                   	push   esi
c0024a92:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a99:	50                   	push   eax
c0024a9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024aa0:	e8 e9 e8 ff ff       	call   c002338e <IDE::prepareInterrupt(unsigned char)>
c0024aa5:	83 c4 0c             	add    esp,0xc
c0024aa8:	6a 04                	push   0x4
c0024aaa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ab1:	50                   	push   eax
c0024ab2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ab8:	e8 b7 e9 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0024abd:	83 c4 0c             	add    esp,0xc
c0024ac0:	89 c6                	mov    esi,eax
c0024ac2:	6a 05                	push   0x5
c0024ac4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024acb:	50                   	push   eax
c0024acc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ad2:	e8 9d e9 ff ff       	call   c0023474 <IDE::read(unsigned char, unsigned char)>
c0024ad7:	89 f1                	mov    ecx,esi
c0024ad9:	0f b6 c0             	movzx  eax,al
c0024adc:	0f b6 f1             	movzx  esi,cl
c0024adf:	c1 e0 08             	shl    eax,0x8
c0024ae2:	09 c6                	or     esi,eax
c0024ae4:	d1 fe                	sar    esi,1
c0024ae6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024aea:	83 c4 10             	add    esp,0x10
c0024aed:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024af2:	74 41                	je     c0024b35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024af4:	31 c9                	xor    ecx,ecx
c0024af6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024afc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024b03:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024b07:	75 0a                	jne    c0024b13 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024b09:	01 c9                	add    ecx,ecx
c0024b0b:	01 cd                	add    ebp,ecx
c0024b0d:	4b                   	dec    ebx
c0024b0e:	e9 54 ff ff ff       	jmp    c0024a67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024b13:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024b18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024b1c:	51                   	push   ecx
c0024b1d:	51                   	push   ecx
c0024b1e:	52                   	push   edx
c0024b1f:	50                   	push   eax
c0024b20:	e8 7d e8 ff ff       	call   c00233a2 <IDE::getBase(unsigned char)>
c0024b25:	89 c2                	mov    edx,eax
c0024b27:	89 f0                	mov    eax,esi
c0024b29:	66 ef                	out    dx,ax
c0024b2b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024b2f:	83 c4 10             	add    esp,0x10
c0024b32:	41                   	inc    ecx
c0024b33:	eb c1                	jmp    c0024af6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024b35:	31 f6                	xor    esi,esi
c0024b37:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024b3d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024b44:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024b48:	75 06                	jne    c0024b50 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024b4a:	01 f6                	add    esi,esi
c0024b4c:	01 f5                	add    ebp,esi
c0024b4e:	eb bd                	jmp    c0024b0d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024b50:	51                   	push   ecx
c0024b51:	51                   	push   ecx
c0024b52:	52                   	push   edx
c0024b53:	50                   	push   eax
c0024b54:	e8 49 e8 ff ff       	call   c00233a2 <IDE::getBase(unsigned char)>
c0024b59:	89 c2                	mov    edx,eax
c0024b5b:	66 ed                	in     ax,dx
c0024b5d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024b62:	83 c4 10             	add    esp,0x10
c0024b65:	46                   	inc    esi
c0024b66:	eb cf                	jmp    c0024b37 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024b68:	51                   	push   ecx
c0024b69:	51                   	push   ecx
c0024b6a:	52                   	push   edx
c0024b6b:	50                   	push   eax
c0024b6c:	e8 b1 e9 ff ff       	call   c0023522 <IDE::waitInterrupt(unsigned char)>
c0024b71:	83 c4 10             	add    esp,0x10
c0024b74:	84 c0                	test   al,al
c0024b76:	0f 84 e8 fd ff ff    	je     c0024964 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024b7c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024b81:	52                   	push   edx
c0024b82:	52                   	push   edx
c0024b83:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b8a:	50                   	push   eax
c0024b8b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b91:	e8 f8 e7 ff ff       	call   c002338e <IDE::prepareInterrupt(unsigned char)>
c0024b96:	83 c4 10             	add    esp,0x10
c0024b99:	50                   	push   eax
c0024b9a:	50                   	push   eax
c0024b9b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ba2:	50                   	push   eax
c0024ba3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ba9:	e8 f4 e7 ff ff       	call   c00233a2 <IDE::getBase(unsigned char)>
c0024bae:	8d 50 07             	lea    edx,[eax+0x7]
c0024bb1:	ec                   	in     al,dx
c0024bb2:	83 c4 10             	add    esp,0x10
c0024bb5:	a8 88                	test   al,0x88
c0024bb7:	74 0a                	je     c0024bc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024bb9:	4b                   	dec    ebx
c0024bba:	75 dd                	jne    c0024b99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024bbc:	bb 02 00 00 00       	mov    ebx,0x2
c0024bc1:	eb 02                	jmp    c0024bc5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024bc3:	31 db                	xor    ebx,ebx
c0024bc5:	83 c4 1c             	add    esp,0x1c
c0024bc8:	89 d8                	mov    eax,ebx
c0024bca:	5b                   	pop    ebx
c0024bcb:	5e                   	pop    esi
c0024bcc:	5f                   	pop    edi
c0024bcd:	5d                   	pop    ebp
c0024bce:	c3                   	ret    
c0024bcf:	90                   	nop

c0024bd0 <ATAPI::diskRemoved()>:
c0024bd0:	83 ec 18             	sub    esp,0x18
c0024bd3:	68 45 cd 02 c0       	push   0xc002cd45
c0024bd8:	e8 a4 dc fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0024bdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024be1:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024be8:	83 c4 1c             	add    esp,0x1c
c0024beb:	c3                   	ret    

c0024bec <ATAPI::eject()>:
c0024bec:	57                   	push   edi
c0024bed:	b9 03 00 00 00       	mov    ecx,0x3
c0024bf2:	53                   	push   ebx
c0024bf3:	83 ec 14             	sub    esp,0x14
c0024bf6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024bfa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024bfe:	fc                   	cld    
c0024bff:	31 c0                	xor    eax,eax
c0024c01:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c03:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024c08:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024c0d:	50                   	push   eax
c0024c0e:	50                   	push   eax
c0024c0f:	6a 00                	push   0x0
c0024c11:	6a 00                	push   0x0
c0024c13:	6a 00                	push   0x0
c0024c15:	6a 02                	push   0x2
c0024c17:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c1b:	50                   	push   eax
c0024c1c:	53                   	push   ebx
c0024c1d:	e8 ee fc ff ff       	call   c0024910 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c22:	83 c4 14             	add    esp,0x14
c0024c25:	53                   	push   ebx
c0024c26:	e8 a5 ff ff ff       	call   c0024bd0 <ATAPI::diskRemoved()>
c0024c2b:	83 c4 24             	add    esp,0x24
c0024c2e:	31 c0                	xor    eax,eax
c0024c30:	5b                   	pop    ebx
c0024c31:	5f                   	pop    edi
c0024c32:	c3                   	ret    
c0024c33:	90                   	nop

c0024c34 <ATAPI::diskInserted()>:
c0024c34:	53                   	push   ebx
c0024c35:	83 ec 14             	sub    esp,0x14
c0024c38:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024c3c:	68 5c cd 02 c0       	push   0xc002cd5c
c0024c41:	e8 3b dc fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0024c46:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024c4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c50:	e8 03 f5 fe ff       	call   c0014158 <PhysicalDisk::startCache()>
c0024c55:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024c59:	83 c4 18             	add    esp,0x18
c0024c5c:	5b                   	pop    ebx
c0024c5d:	e9 7e 17 ff ff       	jmp    c00163e0 <createPartitionsForDisk(PhysicalDisk*)>

c0024c62 <ATAPI::detectMedia()>:
c0024c62:	56                   	push   esi
c0024c63:	53                   	push   ebx
c0024c64:	83 ec 28             	sub    esp,0x28
c0024c67:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024c6b:	6a 0c                	push   0xc
c0024c6d:	6a 00                	push   0x0
c0024c6f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024c73:	56                   	push   esi
c0024c74:	e8 d7 ba fd ff       	call   c0000750 <memset>
c0024c79:	58                   	pop    eax
c0024c7a:	5a                   	pop    edx
c0024c7b:	6a 00                	push   0x0
c0024c7d:	6a 00                	push   0x0
c0024c7f:	6a 00                	push   0x0
c0024c81:	6a 00                	push   0x0
c0024c83:	56                   	push   esi
c0024c84:	53                   	push   ebx
c0024c85:	e8 86 fc ff ff       	call   c0024910 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c8a:	83 c4 1c             	add    esp,0x1c
c0024c8d:	6a 0c                	push   0xc
c0024c8f:	6a 00                	push   0x0
c0024c91:	56                   	push   esi
c0024c92:	e8 b9 ba fd ff       	call   c0000750 <memset>
c0024c97:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024c9c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024ca1:	59                   	pop    ecx
c0024ca2:	58                   	pop    eax
c0024ca3:	6a 01                	push   0x1
c0024ca5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024ca9:	50                   	push   eax
c0024caa:	6a 00                	push   0x0
c0024cac:	6a 12                	push   0x12
c0024cae:	56                   	push   esi
c0024caf:	53                   	push   ebx
c0024cb0:	e8 5b fc ff ff       	call   c0024910 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024cb5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024cb9:	83 c4 20             	add    esp,0x20
c0024cbc:	83 e0 7f             	and    eax,0x7f
c0024cbf:	3c 70                	cmp    al,0x70
c0024cc1:	74 15                	je     c0024cd8 <ATAPI::detectMedia()+0x76>
c0024cc3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024cca:	75 0c                	jne    c0024cd8 <ATAPI::detectMedia()+0x76>
c0024ccc:	83 ec 0c             	sub    esp,0xc
c0024ccf:	53                   	push   ebx
c0024cd0:	e8 5f ff ff ff       	call   c0024c34 <ATAPI::diskInserted()>
c0024cd5:	83 c4 10             	add    esp,0x10
c0024cd8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024cdc:	83 e0 0f             	and    eax,0xf
c0024cdf:	3c 02                	cmp    al,0x2
c0024ce1:	75 1b                	jne    c0024cfe <ATAPI::detectMedia()+0x9c>
c0024ce3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024ce8:	75 2d                	jne    c0024d17 <ATAPI::detectMedia()+0xb5>
c0024cea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024cf1:	74 24                	je     c0024d17 <ATAPI::detectMedia()+0xb5>
c0024cf3:	83 ec 0c             	sub    esp,0xc
c0024cf6:	53                   	push   ebx
c0024cf7:	e8 d4 fe ff ff       	call   c0024bd0 <ATAPI::diskRemoved()>
c0024cfc:	eb 16                	jmp    c0024d14 <ATAPI::detectMedia()+0xb2>
c0024cfe:	84 c0                	test   al,al
c0024d00:	75 15                	jne    c0024d17 <ATAPI::detectMedia()+0xb5>
c0024d02:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024d09:	75 0c                	jne    c0024d17 <ATAPI::detectMedia()+0xb5>
c0024d0b:	83 ec 0c             	sub    esp,0xc
c0024d0e:	53                   	push   ebx
c0024d0f:	e8 20 ff ff ff       	call   c0024c34 <ATAPI::diskInserted()>
c0024d14:	83 c4 10             	add    esp,0x10
c0024d17:	83 c4 24             	add    esp,0x24
c0024d1a:	5b                   	pop    ebx
c0024d1b:	5e                   	pop    esi
c0024d1c:	c3                   	ret    
c0024d1d:	90                   	nop

c0024d1e <ATAPI::open(int, int, void*)>:
c0024d1e:	53                   	push   ebx
c0024d1f:	83 ec 08             	sub    esp,0x8
c0024d22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d2e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d34:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024d3a:	c1 e0 06             	shl    eax,0x6
c0024d3d:	01 d0                	add    eax,edx
c0024d3f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024d46:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024d4c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024d53:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024d5d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024d63:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024d6a:	6a 04                	push   0x4
c0024d6c:	6a 0c                	push   0xc
c0024d6e:	51                   	push   ecx
c0024d6f:	52                   	push   edx
c0024d70:	e8 3f e6 ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d75:	90                   	nop
c0024d76:	90                   	nop
c0024d77:	6a 00                	push   0x0
c0024d79:	6a 0c                	push   0xc
c0024d7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d82:	50                   	push   eax
c0024d83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d89:	e8 26 e6 ff ff       	call   c00233b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d8e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024d95:	83 c4 14             	add    esp,0x14
c0024d98:	53                   	push   ebx
c0024d99:	e8 c4 fe ff ff       	call   c0024c62 <ATAPI::detectMedia()>
c0024d9e:	31 c0                	xor    eax,eax
c0024da0:	83 c4 18             	add    esp,0x18
c0024da3:	5b                   	pop    ebx
c0024da4:	c3                   	ret    
c0024da5:	90                   	nop

c0024da6 <ATAPI::read(unsigned long long, int, void*)>:
c0024da6:	55                   	push   ebp
c0024da7:	57                   	push   edi
c0024da8:	56                   	push   esi
c0024da9:	53                   	push   ebx
c0024daa:	83 ec 1c             	sub    esp,0x1c
c0024dad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024db1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024db5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024db9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024dc0:	74 41                	je     c0024e03 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024dc2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024dc6:	b9 03 00 00 00       	mov    ecx,0x3
c0024dcb:	fc                   	cld    
c0024dcc:	31 c0                	xor    eax,eax
c0024dce:	86 fb                	xchg   bl,bh
c0024dd0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024dd2:	c1 c3 10             	rol    ebx,0x10
c0024dd5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024dda:	89 e8                	mov    eax,ebp
c0024ddc:	86 fb                	xchg   bl,bh
c0024dde:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024de2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024de6:	50                   	push   eax
c0024de7:	50                   	push   eax
c0024de8:	55                   	push   ebp
c0024de9:	c1 e5 0b             	shl    ebp,0xb
c0024dec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024df0:	6a 00                	push   0x0
c0024df2:	55                   	push   ebp
c0024df3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024df7:	50                   	push   eax
c0024df8:	56                   	push   esi
c0024df9:	e8 12 fb ff ff       	call   c0024910 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024dfe:	83 c4 20             	add    esp,0x20
c0024e01:	eb 1a                	jmp    c0024e1d <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024e03:	83 ec 0c             	sub    esp,0xc
c0024e06:	56                   	push   esi
c0024e07:	e8 56 fe ff ff       	call   c0024c62 <ATAPI::detectMedia()>
c0024e0c:	83 c4 10             	add    esp,0x10
c0024e0f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024e16:	75 aa                	jne    c0024dc2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024e18:	b8 02 00 00 00       	mov    eax,0x2
c0024e1d:	83 c4 1c             	add    esp,0x1c
c0024e20:	5b                   	pop    ebx
c0024e21:	5e                   	pop    esi
c0024e22:	5f                   	pop    edi
c0024e23:	5d                   	pop    ebp
c0024e24:	c3                   	ret    
c0024e25:	90                   	nop

c0024e26 <SATA::close(int, int, void*)>:
c0024e26:	83 ec 0c             	sub    esp,0xc
c0024e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e2d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e33:	85 c0                	test   eax,eax
c0024e35:	74 0c                	je     c0024e43 <SATA::close(int, int, void*)+0x1d>
c0024e37:	83 ec 0c             	sub    esp,0xc
c0024e3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e3c:	50                   	push   eax
c0024e3d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e40:	83 c4 10             	add    esp,0x10
c0024e43:	31 c0                	xor    eax,eax
c0024e45:	83 c4 0c             	add    esp,0xc
c0024e48:	c3                   	ret    
c0024e49:	90                   	nop

c0024e4a <SATA::powerSaving(PowerSavingLevel)>:
c0024e4a:	c3                   	ret    
c0024e4b:	90                   	nop

c0024e4c <SATA::open(int, int, void*)>:
c0024e4c:	56                   	push   esi
c0024e4d:	53                   	push   ebx
c0024e4e:	50                   	push   eax
c0024e4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024e53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e57:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024e61:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024e67:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024e71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e75:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024e7f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024e85:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024e8c:	e8 94 ad fe ff       	call   c000fc25 <Phys::allocatePage()>
c0024e91:	89 c6                	mov    esi,eax
c0024e93:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024e99:	81 c6 00 10 00 00    	add    esi,0x1000
c0024e9f:	e8 81 ad fe ff       	call   c000fc25 <Phys::allocatePage()>
c0024ea4:	39 c6                	cmp    esi,eax
c0024ea6:	74 10                	je     c0024eb8 <SATA::open(int, int, void*)+0x6c>
c0024ea8:	83 ec 0c             	sub    esp,0xc
c0024eab:	68 84 cc 02 c0       	push   0xc002cc84
c0024eb0:	e8 3a 53 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0024eb5:	83 c4 10             	add    esp,0x10
c0024eb8:	83 ec 0c             	sub    esp,0xc
c0024ebb:	6a 02                	push   0x2
c0024ebd:	e8 ed c5 fe ff       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c0024ec2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ec8:	6a 03                	push   0x3
c0024eca:	50                   	push   eax
c0024ecb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024ed1:	ff 35 f0 e4 02 c0    	push   DWORD PTR ds:0xc002e4f0
c0024ed7:	e8 7a cc fe ff       	call   c0011b56 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024edc:	83 c4 14             	add    esp,0x14
c0024edf:	53                   	push   ebx
c0024ee0:	e8 73 f2 fe ff       	call   c0014158 <PhysicalDisk::startCache()>
c0024ee5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ee8:	e8 f3 14 ff ff       	call   c00163e0 <createPartitionsForDisk(PhysicalDisk*)>
c0024eed:	83 c4 14             	add    esp,0x14
c0024ef0:	31 c0                	xor    eax,eax
c0024ef2:	5b                   	pop    ebx
c0024ef3:	5e                   	pop    esi
c0024ef4:	c3                   	ret    
c0024ef5:	90                   	nop

c0024ef6 <SATA::SATA()>:
c0024ef6:	83 ec 0c             	sub    esp,0xc
c0024ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024efd:	83 ec 04             	sub    esp,0x4
c0024f00:	68 00 02 00 00       	push   0x200
c0024f05:	68 98 cc 02 c0       	push   0xc002cc98
c0024f0a:	50                   	push   eax
c0024f0b:	e8 e0 f1 fe ff       	call   c00140f0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024f10:	83 c4 10             	add    esp,0x10
c0024f13:	ba 08 cd 02 c0       	mov    edx,0xc002cd08
c0024f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f1c:	89 10                	mov    DWORD PTR [eax],edx
c0024f1e:	90                   	nop
c0024f1f:	83 c4 0c             	add    esp,0xc
c0024f22:	c3                   	ret    
c0024f23:	90                   	nop

c0024f24 <SATA::access(unsigned long long, int, void*, bool)>:
c0024f24:	55                   	push   ebp
c0024f25:	57                   	push   edi
c0024f26:	56                   	push   esi
c0024f27:	53                   	push   ebx
c0024f28:	83 ec 2c             	sub    esp,0x2c
c0024f2b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024f2f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024f33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024f37:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f3b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024f3f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024f44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f48:	7e 10                	jle    c0024f5a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024f4a:	83 ec 0c             	sub    esp,0xc
c0024f4d:	68 a8 cc 02 c0       	push   0xc002cca8
c0024f52:	e8 98 52 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0024f57:	83 c4 10             	add    esp,0x10
c0024f5a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024f60:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024f66:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024f6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f70:	89 d0                	mov    eax,edx
c0024f72:	c1 e0 07             	shl    eax,0x7
c0024f75:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f79:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024f83:	51                   	push   ecx
c0024f84:	8d 42 02             	lea    eax,[edx+0x2]
c0024f87:	51                   	push   ecx
c0024f88:	c1 e0 07             	shl    eax,0x7
c0024f8b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024f8f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024f93:	50                   	push   eax
c0024f94:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024f9a:	e8 97 ef ff ff       	call   c0023f36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024f9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024fa3:	83 c4 10             	add    esp,0x10
c0024fa6:	b8 01 00 00 00       	mov    eax,0x1
c0024fab:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024fb0:	0f 84 cb 01 00 00    	je     c0025181 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024fb6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024fba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024fbe:	c1 e0 09             	shl    eax,0x9
c0024fc1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024fc6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024fca:	74 0e                	je     c0024fda <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024fcc:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024fd2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024fd6:	89 c1                	mov    ecx,eax
c0024fd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024fda:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024fde:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024fe4:	8d 42 02             	lea    eax,[edx+0x2]
c0024fe7:	c1 e0 07             	shl    eax,0x7
c0024fea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024fee:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ff0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024ff6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ffc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025000:	c1 e1 05             	shl    ecx,0x5
c0025003:	01 c8                	add    eax,ecx
c0025005:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025009:	83 e1 01             	and    ecx,0x1
c002500c:	89 ce                	mov    esi,ecx
c002500e:	8a 08                	mov    cl,BYTE PTR [eax]
c0025010:	c1 e6 06             	shl    esi,0x6
c0025013:	83 e1 bf             	and    ecx,0xffffffbf
c0025016:	09 f1                	or     ecx,esi
c0025018:	88 08                	mov    BYTE PTR [eax],cl
c002501a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002501c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025022:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025028:	89 08                	mov    DWORD PTR [eax],ecx
c002502a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025030:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025036:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002503c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002503f:	50                   	push   eax
c0025040:	68 90 00 00 00       	push   0x90
c0025045:	6a 00                	push   0x0
c0025047:	56                   	push   esi
c0025048:	e8 03 b7 fd ff       	call   c0000750 <memset>
c002504d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025053:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025057:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002505d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025061:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025065:	83 c4 10             	add    esp,0x10
c0025068:	48                   	dec    eax
c0025069:	25 ff ff 3f 00       	and    eax,0x3fffff
c002506e:	89 c1                	mov    ecx,eax
c0025070:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025076:	25 00 00 c0 ff       	and    eax,0xffc00000
c002507b:	09 c8                	or     eax,ecx
c002507d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025083:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025086:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c002508d:	66 25 00 7f          	and    ax,0x7f00
c0025091:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025095:	66 0d 27 80          	or     ax,0x8027
c0025099:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002509e:	66 89 06             	mov    WORD PTR [esi],ax
c00250a1:	19 c0                	sbb    eax,eax
c00250a3:	83 e0 f0             	and    eax,0xfffffff0
c00250a6:	83 c0 35             	add    eax,0x35
c00250a9:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00250ac:	89 e8                	mov    eax,ebp
c00250ae:	c1 e8 10             	shr    eax,0x10
c00250b1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00250b4:	89 e8                	mov    eax,ebp
c00250b6:	c1 e8 18             	shr    eax,0x18
c00250b9:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00250bc:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00250c0:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00250c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00250c7:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00250ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00250ce:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00250d2:	89 d6                	mov    esi,edx
c00250d4:	31 c0                	xor    eax,eax
c00250d6:	c1 e6 07             	shl    esi,0x7
c00250d9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00250dd:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00250e3:	80 e1 88             	and    cl,0x88
c00250e6:	74 0a                	je     c00250f2 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00250e8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00250ed:	74 0a                	je     c00250f9 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00250ef:	40                   	inc    eax
c00250f0:	eb eb                	jmp    c00250dd <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00250f2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00250f7:	75 0a                	jne    c0025103 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00250f9:	83 ec 0c             	sub    esp,0xc
c00250fc:	68 e1 cc 02 c0       	push   0xc002cce1
c0025101:	eb 56                	jmp    c0025159 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025103:	b8 01 00 00 00       	mov    eax,0x1
c0025108:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002510c:	c1 e2 07             	shl    edx,0x7
c002510f:	d3 e0                	shl    eax,cl
c0025111:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025115:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002511b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025121:	85 c8                	test   eax,ecx
c0025123:	74 20                	je     c0025145 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025125:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002512b:	0f ba e1 1e          	bt     ecx,0x1e
c002512f:	73 ea                	jae    c002511b <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025131:	83 ec 0c             	sub    esp,0xc
c0025134:	68 ef cc 02 c0       	push   0xc002ccef
c0025139:	e8 b1 50 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c002513e:	83 c4 10             	add    esp,0x10
c0025141:	31 c0                	xor    eax,eax
c0025143:	eb 3c                	jmp    c0025181 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025145:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002514b:	0f ba e0 1e          	bt     eax,0x1e
c002514f:	73 17                	jae    c0025168 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025151:	83 ec 0c             	sub    esp,0xc
c0025154:	68 ef cc 02 c0       	push   0xc002ccef
c0025159:	e8 91 50 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c002515e:	83 c4 10             	add    esp,0x10
c0025161:	b8 01 00 00 00       	mov    eax,0x1
c0025166:	eb 19                	jmp    c0025181 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025168:	31 c0                	xor    eax,eax
c002516a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002516f:	75 10                	jne    c0025181 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025171:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025177:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002517b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002517f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025181:	83 c4 2c             	add    esp,0x2c
c0025184:	5b                   	pop    ebx
c0025185:	5e                   	pop    esi
c0025186:	5f                   	pop    edi
c0025187:	5d                   	pop    ebp
c0025188:	c3                   	ret    
c0025189:	90                   	nop

c002518a <SATA::read(unsigned long long, int, void*)>:
c002518a:	57                   	push   edi
c002518b:	b8 04 00 00 00       	mov    eax,0x4
c0025190:	56                   	push   esi
c0025191:	53                   	push   ebx
c0025192:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025196:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002519a:	8d 7a ff             	lea    edi,[edx-0x1]
c002519d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00251a1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00251a5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00251ab:	77 25                	ja     c00251d2 <SATA::read(unsigned long long, int, void*)+0x48>
c00251ad:	b8 06 00 00 00       	mov    eax,0x6
c00251b2:	85 f6                	test   esi,esi
c00251b4:	74 1c                	je     c00251d2 <SATA::read(unsigned long long, int, void*)+0x48>
c00251b6:	50                   	push   eax
c00251b7:	50                   	push   eax
c00251b8:	6a 00                	push   0x0
c00251ba:	56                   	push   esi
c00251bb:	52                   	push   edx
c00251bc:	53                   	push   ebx
c00251bd:	51                   	push   ecx
c00251be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00251c2:	e8 5d fd ff ff       	call   c0024f24 <SATA::access(unsigned long long, int, void*, bool)>
c00251c7:	83 c4 20             	add    esp,0x20
c00251ca:	85 c0                	test   eax,eax
c00251cc:	0f 95 c0             	setne  al
c00251cf:	0f b6 c0             	movzx  eax,al
c00251d2:	5b                   	pop    ebx
c00251d3:	5e                   	pop    esi
c00251d4:	5f                   	pop    edi
c00251d5:	c3                   	ret    

c00251d6 <SATA::write(unsigned long long, int, void*)>:
c00251d6:	55                   	push   ebp
c00251d7:	b8 04 00 00 00       	mov    eax,0x4
c00251dc:	57                   	push   edi
c00251dd:	56                   	push   esi
c00251de:	53                   	push   ebx
c00251df:	83 ec 0c             	sub    esp,0xc
c00251e2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00251e6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00251ea:	8d 73 ff             	lea    esi,[ebx-0x1]
c00251ed:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00251f1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00251f5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00251fb:	77 3d                	ja     c002523a <SATA::write(unsigned long long, int, void*)+0x64>
c00251fd:	b8 06 00 00 00       	mov    eax,0x6
c0025202:	85 ed                	test   ebp,ebp
c0025204:	74 34                	je     c002523a <SATA::write(unsigned long long, int, void*)+0x64>
c0025206:	c1 e3 09             	shl    ebx,0x9
c0025209:	01 eb                	add    ebx,ebp
c002520b:	89 d6                	mov    esi,edx
c002520d:	89 cf                	mov    edi,ecx
c002520f:	83 c6 01             	add    esi,0x1
c0025212:	83 d7 00             	adc    edi,0x0
c0025215:	50                   	push   eax
c0025216:	50                   	push   eax
c0025217:	6a 01                	push   0x1
c0025219:	55                   	push   ebp
c002521a:	81 c5 00 02 00 00    	add    ebp,0x200
c0025220:	6a 01                	push   0x1
c0025222:	51                   	push   ecx
c0025223:	52                   	push   edx
c0025224:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025228:	e8 f7 fc ff ff       	call   c0024f24 <SATA::access(unsigned long long, int, void*, bool)>
c002522d:	83 c4 20             	add    esp,0x20
c0025230:	89 f2                	mov    edx,esi
c0025232:	89 f9                	mov    ecx,edi
c0025234:	39 dd                	cmp    ebp,ebx
c0025236:	75 d3                	jne    c002520b <SATA::write(unsigned long long, int, void*)+0x35>
c0025238:	31 c0                	xor    eax,eax
c002523a:	83 c4 0c             	add    esp,0xc
c002523d:	5b                   	pop    ebx
c002523e:	5e                   	pop    esi
c002523f:	5f                   	pop    edi
c0025240:	5d                   	pop    ebp
c0025241:	c3                   	ret    

c0025242 <SATAPI::write(unsigned long long, int, void*)>:
c0025242:	b8 03 00 00 00       	mov    eax,0x3
c0025247:	c3                   	ret    

c0025248 <SATAPI::close(int, int, void*)>:
c0025248:	83 ec 0c             	sub    esp,0xc
c002524b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002524f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025255:	85 c0                	test   eax,eax
c0025257:	74 0c                	je     c0025265 <SATAPI::close(int, int, void*)+0x1d>
c0025259:	83 ec 0c             	sub    esp,0xc
c002525c:	8b 10                	mov    edx,DWORD PTR [eax]
c002525e:	50                   	push   eax
c002525f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025262:	83 c4 10             	add    esp,0x10
c0025265:	31 c0                	xor    eax,eax
c0025267:	83 c4 0c             	add    esp,0xc
c002526a:	c3                   	ret    
c002526b:	90                   	nop

c002526c <SATAPI::SATAPI()>:
c002526c:	83 ec 0c             	sub    esp,0xc
c002526f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025273:	83 ec 04             	sub    esp,0x4
c0025276:	68 00 08 00 00       	push   0x800
c002527b:	68 38 cd 02 c0       	push   0xc002cd38
c0025280:	50                   	push   eax
c0025281:	e8 6a ee fe ff       	call   c00140f0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025286:	83 c4 10             	add    esp,0x10
c0025289:	ba e4 cd 02 c0       	mov    edx,0xc002cde4
c002528e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025292:	89 10                	mov    DWORD PTR [eax],edx
c0025294:	90                   	nop
c0025295:	83 c4 0c             	add    esp,0xc
c0025298:	c3                   	ret    
c0025299:	90                   	nop

c002529a <SATAPI::diskRemoved()>:
c002529a:	83 ec 18             	sub    esp,0x18
c002529d:	68 44 cd 02 c0       	push   0xc002cd44
c00252a2:	e8 da d5 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00252a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00252ab:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00252b2:	83 c4 1c             	add    esp,0x1c
c00252b5:	c3                   	ret    

c00252b6 <SATAPI::diskInserted()>:
c00252b6:	53                   	push   ebx
c00252b7:	83 ec 14             	sub    esp,0x14
c00252ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00252be:	68 5b cd 02 c0       	push   0xc002cd5b
c00252c3:	e8 b9 d5 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00252c8:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00252cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00252d2:	e8 81 ee fe ff       	call   c0014158 <PhysicalDisk::startCache()>
c00252d7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00252db:	83 c4 18             	add    esp,0x18
c00252de:	5b                   	pop    ebx
c00252df:	e9 fc 10 ff ff       	jmp    c00163e0 <createPartitionsForDisk(PhysicalDisk*)>

c00252e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00252e4:	55                   	push   ebp
c00252e5:	57                   	push   edi
c00252e6:	56                   	push   esi
c00252e7:	53                   	push   ebx
c00252e8:	83 ec 34             	sub    esp,0x34
c00252eb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00252ef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00252f3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00252f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00252fb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00252ff:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025305:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002530b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002530f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025315:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025319:	c1 e0 07             	shl    eax,0x7
c002531c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025320:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025324:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002532e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025332:	8d 58 02             	lea    ebx,[eax+0x2]
c0025335:	c1 e3 07             	shl    ebx,0x7
c0025338:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002533c:	53                   	push   ebx
c002533d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025343:	e8 ee eb ff ff       	call   c0023f36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025348:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002534c:	83 c4 10             	add    esp,0x10
c002534f:	b8 01 00 00 00       	mov    eax,0x1
c0025354:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025359:	0f 84 85 01 00 00    	je     c00254e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002535f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025365:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025367:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002536d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025373:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025377:	c1 e1 05             	shl    ecx,0x5
c002537a:	01 c8                	add    eax,ecx
c002537c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002537e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025384:	81 c9 25 00 01 00    	or     ecx,0x10025
c002538a:	89 08                	mov    DWORD PTR [eax],ecx
c002538c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025392:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025398:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002539e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00253a1:	8d 7b 40             	lea    edi,[ebx+0x40]
c00253a4:	50                   	push   eax
c00253a5:	68 90 00 00 00       	push   0x90
c00253aa:	6a 00                	push   0x0
c00253ac:	53                   	push   ebx
c00253ad:	e8 9e b3 fd ff       	call   c0000750 <memset>
c00253b2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00253b6:	b9 0c 00 00 00       	mov    ecx,0xc
c00253bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00253bd:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c00253c3:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00253c7:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00253cd:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00253d1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00253d5:	48                   	dec    eax
c00253d6:	25 ff ff 3f 00       	and    eax,0x3fffff
c00253db:	89 c1                	mov    ecx,eax
c00253dd:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00253e3:	25 00 00 c0 ff       	and    eax,0xffc00000
c00253e8:	09 c8                	or     eax,ecx
c00253ea:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00253f0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00253f3:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00253fa:	66 25 00 7f          	and    ax,0x7f00
c00253fe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025402:	66 0d 27 80          	or     ax,0x8027
c0025406:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002540a:	66 89 03             	mov    WORD PTR [ebx],ax
c002540d:	89 d0                	mov    eax,edx
c002540f:	c1 ea 18             	shr    edx,0x18
c0025412:	c1 e8 10             	shr    eax,0x10
c0025415:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025418:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002541b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002541f:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025422:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025426:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025429:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002542d:	83 c4 10             	add    esp,0x10
c0025430:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025434:	31 c0                	xor    eax,eax
c0025436:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002543a:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025440:	80 e2 88             	and    dl,0x88
c0025443:	74 0a                	je     c002544f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025445:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002544a:	74 0a                	je     c0025456 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c002544c:	40                   	inc    eax
c002544d:	eb eb                	jmp    c002543a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c002544f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025454:	75 0f                	jne    c0025465 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025456:	83 ec 0c             	sub    esp,0xc
c0025459:	68 e1 cc 02 c0       	push   0xc002cce1
c002545e:	e8 8c 4d ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0025463:	eb 3f                	jmp    c00254a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025465:	ba 01 00 00 00       	mov    edx,0x1
c002546a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002546e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025472:	d3 e2                	shl    edx,cl
c0025474:	c1 e0 07             	shl    eax,0x7
c0025477:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c002547d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025481:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025487:	85 ca                	test   edx,ecx
c0025489:	74 23                	je     c00254ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002548b:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025491:	0f ba e1 1e          	bt     ecx,0x1e
c0025495:	73 ea                	jae    c0025481 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025497:	83 ec 0c             	sub    esp,0xc
c002549a:	68 73 cd 02 c0       	push   0xc002cd73
c002549f:	e8 dd d3 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c00254a4:	83 c4 10             	add    esp,0x10
c00254a7:	b8 01 00 00 00       	mov    eax,0x1
c00254ac:	eb 36                	jmp    c00254e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00254ae:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00254b4:	0f ba e0 1e          	bt     eax,0x1e
c00254b8:	73 0a                	jae    c00254c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c00254ba:	83 ec 0c             	sub    esp,0xc
c00254bd:	68 86 cd 02 c0       	push   0xc002cd86
c00254c2:	eb db                	jmp    c002549f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c00254c4:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00254c9:	74 17                	je     c00254e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00254cb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00254d0:	74 10                	je     c00254e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00254d2:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c00254d8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00254dc:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00254e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00254e2:	31 c0                	xor    eax,eax
c00254e4:	83 c4 2c             	add    esp,0x2c
c00254e7:	5b                   	pop    ebx
c00254e8:	5e                   	pop    esi
c00254e9:	5f                   	pop    edi
c00254ea:	5d                   	pop    ebp
c00254eb:	c3                   	ret    

c00254ec <SATAPI::eject()>:
c00254ec:	57                   	push   edi
c00254ed:	b9 03 00 00 00       	mov    ecx,0x3
c00254f2:	53                   	push   ebx
c00254f3:	83 ec 14             	sub    esp,0x14
c00254f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00254fa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254fe:	fc                   	cld    
c00254ff:	31 c0                	xor    eax,eax
c0025501:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025503:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025508:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002550d:	50                   	push   eax
c002550e:	6a 00                	push   0x0
c0025510:	6a 00                	push   0x0
c0025512:	6a 00                	push   0x0
c0025514:	6a 00                	push   0x0
c0025516:	6a 02                	push   0x2
c0025518:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002551c:	50                   	push   eax
c002551d:	53                   	push   ebx
c002551e:	e8 c1 fd ff ff       	call   c00252e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025523:	83 c4 14             	add    esp,0x14
c0025526:	53                   	push   ebx
c0025527:	e8 6e fd ff ff       	call   c002529a <SATAPI::diskRemoved()>
c002552c:	83 c4 24             	add    esp,0x24
c002552f:	31 c0                	xor    eax,eax
c0025531:	5b                   	pop    ebx
c0025532:	5f                   	pop    edi
c0025533:	c3                   	ret    

c0025534 <SATAPI::detectMedia()>:
c0025534:	56                   	push   esi
c0025535:	53                   	push   ebx
c0025536:	83 ec 28             	sub    esp,0x28
c0025539:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002553d:	6a 0c                	push   0xc
c002553f:	6a 00                	push   0x0
c0025541:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025545:	56                   	push   esi
c0025546:	e8 05 b2 fd ff       	call   c0000750 <memset>
c002554b:	83 c4 0c             	add    esp,0xc
c002554e:	6a 00                	push   0x0
c0025550:	6a 00                	push   0x0
c0025552:	6a 00                	push   0x0
c0025554:	6a 00                	push   0x0
c0025556:	6a 00                	push   0x0
c0025558:	56                   	push   esi
c0025559:	53                   	push   ebx
c002555a:	e8 85 fd ff ff       	call   c00252e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002555f:	83 c4 1c             	add    esp,0x1c
c0025562:	6a 0c                	push   0xc
c0025564:	6a 00                	push   0x0
c0025566:	56                   	push   esi
c0025567:	e8 e4 b1 fd ff       	call   c0000750 <memset>
c002556c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025571:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025576:	83 c4 0c             	add    esp,0xc
c0025579:	6a 01                	push   0x1
c002557b:	8d 44 24 16          	lea    eax,[esp+0x16]
c002557f:	50                   	push   eax
c0025580:	6a 00                	push   0x0
c0025582:	6a 00                	push   0x0
c0025584:	6a 12                	push   0x12
c0025586:	56                   	push   esi
c0025587:	53                   	push   ebx
c0025588:	e8 57 fd ff ff       	call   c00252e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002558d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025591:	83 c4 20             	add    esp,0x20
c0025594:	83 e0 7f             	and    eax,0x7f
c0025597:	3c 70                	cmp    al,0x70
c0025599:	74 15                	je     c00255b0 <SATAPI::detectMedia()+0x7c>
c002559b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00255a2:	75 0c                	jne    c00255b0 <SATAPI::detectMedia()+0x7c>
c00255a4:	83 ec 0c             	sub    esp,0xc
c00255a7:	53                   	push   ebx
c00255a8:	e8 09 fd ff ff       	call   c00252b6 <SATAPI::diskInserted()>
c00255ad:	83 c4 10             	add    esp,0x10
c00255b0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00255b4:	83 e0 0f             	and    eax,0xf
c00255b7:	3c 02                	cmp    al,0x2
c00255b9:	75 1b                	jne    c00255d6 <SATAPI::detectMedia()+0xa2>
c00255bb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00255c0:	75 2d                	jne    c00255ef <SATAPI::detectMedia()+0xbb>
c00255c2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00255c9:	74 24                	je     c00255ef <SATAPI::detectMedia()+0xbb>
c00255cb:	83 ec 0c             	sub    esp,0xc
c00255ce:	53                   	push   ebx
c00255cf:	e8 c6 fc ff ff       	call   c002529a <SATAPI::diskRemoved()>
c00255d4:	eb 16                	jmp    c00255ec <SATAPI::detectMedia()+0xb8>
c00255d6:	84 c0                	test   al,al
c00255d8:	75 15                	jne    c00255ef <SATAPI::detectMedia()+0xbb>
c00255da:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00255e1:	75 0c                	jne    c00255ef <SATAPI::detectMedia()+0xbb>
c00255e3:	83 ec 0c             	sub    esp,0xc
c00255e6:	53                   	push   ebx
c00255e7:	e8 ca fc ff ff       	call   c00252b6 <SATAPI::diskInserted()>
c00255ec:	83 c4 10             	add    esp,0x10
c00255ef:	83 c4 24             	add    esp,0x24
c00255f2:	5b                   	pop    ebx
c00255f3:	5e                   	pop    esi
c00255f4:	c3                   	ret    
c00255f5:	90                   	nop

c00255f6 <SATAPI::open(int, int, void*)>:
c00255f6:	56                   	push   esi
c00255f7:	53                   	push   ebx
c00255f8:	50                   	push   eax
c00255f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00255fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025601:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002560b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025611:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002561b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002561f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025629:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002562f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025636:	e8 ea a5 fe ff       	call   c000fc25 <Phys::allocatePage()>
c002563b:	89 c6                	mov    esi,eax
c002563d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025643:	81 c6 00 10 00 00    	add    esi,0x1000
c0025649:	e8 d7 a5 fe ff       	call   c000fc25 <Phys::allocatePage()>
c002564e:	39 c6                	cmp    esi,eax
c0025650:	74 10                	je     c0025662 <SATAPI::open(int, int, void*)+0x6c>
c0025652:	83 ec 0c             	sub    esp,0xc
c0025655:	68 9b cd 02 c0       	push   0xc002cd9b
c002565a:	e8 90 4b ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c002565f:	83 c4 10             	add    esp,0x10
c0025662:	83 ec 0c             	sub    esp,0xc
c0025665:	6a 02                	push   0x2
c0025667:	e8 43 be fe ff       	call   c00114af <Virt::allocateKernelVirtualPages(int)>
c002566c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025672:	6a 03                	push   0x3
c0025674:	50                   	push   eax
c0025675:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002567b:	ff 35 f0 e4 02 c0    	push   DWORD PTR ds:0xc002e4f0
c0025681:	e8 d0 c4 fe ff       	call   c0011b56 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025686:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002568d:	83 c4 14             	add    esp,0x14
c0025690:	53                   	push   ebx
c0025691:	e8 9e fe ff ff       	call   c0025534 <SATAPI::detectMedia()>
c0025696:	83 c4 14             	add    esp,0x14
c0025699:	31 c0                	xor    eax,eax
c002569b:	5b                   	pop    ebx
c002569c:	5e                   	pop    esi
c002569d:	c3                   	ret    

c002569e <SATAPI::read(unsigned long long, int, void*)>:
c002569e:	55                   	push   ebp
c002569f:	57                   	push   edi
c00256a0:	56                   	push   esi
c00256a1:	53                   	push   ebx
c00256a2:	83 ec 1c             	sub    esp,0x1c
c00256a5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00256a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00256ad:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00256b1:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00256b8:	74 19                	je     c00256d3 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00256ba:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00256bf:	7e 2e                	jle    c00256ef <SATAPI::read(unsigned long long, int, void*)+0x51>
c00256c1:	83 ec 0c             	sub    esp,0xc
c00256c4:	68 b1 cd 02 c0       	push   0xc002cdb1
c00256c9:	e8 21 4b ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c00256ce:	83 c4 10             	add    esp,0x10
c00256d1:	eb 1c                	jmp    c00256ef <SATAPI::read(unsigned long long, int, void*)+0x51>
c00256d3:	83 ec 0c             	sub    esp,0xc
c00256d6:	55                   	push   ebp
c00256d7:	e8 58 fe ff ff       	call   c0025534 <SATAPI::detectMedia()>
c00256dc:	83 c4 10             	add    esp,0x10
c00256df:	b8 02 00 00 00       	mov    eax,0x2
c00256e4:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00256eb:	75 cd                	jne    c00256ba <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00256ed:	eb 49                	jmp    c0025738 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00256ef:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00256f3:	b9 03 00 00 00       	mov    ecx,0x3
c00256f8:	fc                   	cld    
c00256f9:	31 c0                	xor    eax,eax
c00256fb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00256fd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025702:	89 d8                	mov    eax,ebx
c0025704:	86 e0                	xchg   al,ah
c0025706:	c1 c0 10             	rol    eax,0x10
c0025709:	86 e0                	xchg   al,ah
c002570b:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002570f:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025713:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025717:	50                   	push   eax
c0025718:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002571c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025720:	56                   	push   esi
c0025721:	53                   	push   ebx
c0025722:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025726:	c1 e0 0b             	shl    eax,0xb
c0025729:	50                   	push   eax
c002572a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002572e:	50                   	push   eax
c002572f:	55                   	push   ebp
c0025730:	e8 af fb ff ff       	call   c00252e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025735:	83 c4 20             	add    esp,0x20
c0025738:	83 c4 1c             	add    esp,0x1c
c002573b:	5b                   	pop    ebx
c002573c:	5e                   	pop    esi
c002573d:	5f                   	pop    edi
c002573e:	5d                   	pop    ebp
c002573f:	c3                   	ret    

c0025740 <AVX::open(int, int, void*)>:
c0025740:	83 ec 0c             	sub    esp,0xc
c0025743:	e8 40 11 00 00       	call   c0026888 <avxInit>
c0025748:	b8 00 00 00 00       	mov    eax,0x0
c002574d:	83 c4 0c             	add    esp,0xc
c0025750:	c3                   	ret    
c0025751:	90                   	nop

c0025752 <AVX::close(int, int, void*)>:
c0025752:	83 ec 0c             	sub    esp,0xc
c0025755:	e8 2f 11 00 00       	call   c0026889 <avxClose>
c002575a:	b8 00 00 00 00       	mov    eax,0x0
c002575f:	83 c4 0c             	add    esp,0xc
c0025762:	c3                   	ret    
c0025763:	90                   	nop

c0025764 <AVX::available()>:
c0025764:	83 ec 0c             	sub    esp,0xc
c0025767:	e8 14 11 00 00       	call   c0026880 <avxDetect>
c002576c:	85 c0                	test   eax,eax
c002576e:	0f 95 c0             	setne  al
c0025771:	83 c4 0c             	add    esp,0xc
c0025774:	c3                   	ret    
c0025775:	90                   	nop

c0025776 <AVX::save(void*)>:
c0025776:	83 ec 0c             	sub    esp,0xc
c0025779:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002577d:	83 ec 0c             	sub    esp,0xc
c0025780:	50                   	push   eax
c0025781:	e8 00 11 00 00       	call   c0026886 <avxSave>
c0025786:	83 c4 10             	add    esp,0x10
c0025789:	90                   	nop
c002578a:	83 c4 0c             	add    esp,0xc
c002578d:	c3                   	ret    

c002578e <AVX::load(void*)>:
c002578e:	83 ec 0c             	sub    esp,0xc
c0025791:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025795:	83 ec 0c             	sub    esp,0xc
c0025798:	50                   	push   eax
c0025799:	e8 e9 10 00 00       	call   c0026887 <avxLoad>
c002579e:	83 c4 10             	add    esp,0x10
c00257a1:	90                   	nop
c00257a2:	83 c4 0c             	add    esp,0xc
c00257a5:	c3                   	ret    

c00257a6 <AVX::AVX()>:
c00257a6:	83 ec 0c             	sub    esp,0xc
c00257a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ad:	83 ec 08             	sub    esp,0x8
c00257b0:	68 14 ce 02 c0       	push   0xc002ce14
c00257b5:	50                   	push   eax
c00257b6:	e8 13 ea fe ff       	call   c00141ce <FPU::FPU(char const*)>
c00257bb:	83 c4 10             	add    esp,0x10
c00257be:	ba 24 ce 02 c0       	mov    edx,0xc002ce24
c00257c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257c7:	89 10                	mov    DWORD PTR [eax],edx
c00257c9:	90                   	nop
c00257ca:	83 c4 0c             	add    esp,0xc
c00257cd:	c3                   	ret    

c00257ce <MMX::available()>:
c00257ce:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00257d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00257d9:	83 e0 20             	and    eax,0x20
c00257dc:	84 c0                	test   al,al
c00257de:	0f 95 c0             	setne  al
c00257e1:	c3                   	ret    

c00257e2 <MMX::open(int, int, void*)>:
c00257e2:	83 ec 0c             	sub    esp,0xc
c00257e5:	e8 28 11 00 00       	call   c0026912 <x87Init>
c00257ea:	b8 00 00 00 00       	mov    eax,0x0
c00257ef:	83 c4 0c             	add    esp,0xc
c00257f2:	c3                   	ret    
c00257f3:	90                   	nop

c00257f4 <MMX::close(int, int, void*)>:
c00257f4:	83 ec 0c             	sub    esp,0xc
c00257f7:	e8 30 11 00 00       	call   c002692c <x87Close>
c00257fc:	b8 00 00 00 00       	mov    eax,0x0
c0025801:	83 c4 0c             	add    esp,0xc
c0025804:	c3                   	ret    
c0025805:	90                   	nop

c0025806 <MMX::save(void*)>:
c0025806:	83 ec 0c             	sub    esp,0xc
c0025809:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002580d:	83 ec 0c             	sub    esp,0xc
c0025810:	50                   	push   eax
c0025811:	e8 eb 10 00 00       	call   c0026901 <x87Save>
c0025816:	83 c4 10             	add    esp,0x10
c0025819:	90                   	nop
c002581a:	83 c4 0c             	add    esp,0xc
c002581d:	c3                   	ret    

c002581e <MMX::load(void*)>:
c002581e:	83 ec 0c             	sub    esp,0xc
c0025821:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025825:	83 ec 0c             	sub    esp,0xc
c0025828:	50                   	push   eax
c0025829:	e8 dc 10 00 00       	call   c002690a <x87Load>
c002582e:	83 c4 10             	add    esp,0x10
c0025831:	90                   	nop
c0025832:	83 c4 0c             	add    esp,0xc
c0025835:	c3                   	ret    

c0025836 <MMX::MMX()>:
c0025836:	83 ec 0c             	sub    esp,0xc
c0025839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002583d:	83 ec 08             	sub    esp,0x8
c0025840:	68 54 ce 02 c0       	push   0xc002ce54
c0025845:	50                   	push   eax
c0025846:	e8 83 e9 fe ff       	call   c00141ce <FPU::FPU(char const*)>
c002584b:	83 c4 10             	add    esp,0x10
c002584e:	ba 64 ce 02 c0       	mov    edx,0xc002ce64
c0025853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025857:	89 10                	mov    DWORD PTR [eax],edx
c0025859:	90                   	nop
c002585a:	83 c4 0c             	add    esp,0xc
c002585d:	c3                   	ret    

c002585e <SSE::open(int, int, void*)>:
c002585e:	83 ec 0c             	sub    esp,0xc
c0025861:	e8 5e 10 00 00       	call   c00268c4 <sseInit>
c0025866:	b8 00 00 00 00       	mov    eax,0x0
c002586b:	83 c4 0c             	add    esp,0xc
c002586e:	c3                   	ret    
c002586f:	90                   	nop

c0025870 <SSE::close(int, int, void*)>:
c0025870:	83 ec 0c             	sub    esp,0xc
c0025873:	e8 5c 10 00 00       	call   c00268d4 <sseClose>
c0025878:	b8 00 00 00 00       	mov    eax,0x0
c002587d:	83 c4 0c             	add    esp,0xc
c0025880:	c3                   	ret    
c0025881:	90                   	nop

c0025882 <SSE::available()>:
c0025882:	83 ec 1c             	sub    esp,0x1c
c0025885:	e8 16 10 00 00       	call   c00268a0 <absolutelyNoChanceInHell>
c002588a:	85 c0                	test   eax,eax
c002588c:	0f 95 c0             	setne  al
c002588f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025893:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025897:	83 c4 1c             	add    esp,0x1c
c002589a:	c3                   	ret    
c002589b:	90                   	nop

c002589c <SSE::save(void*)>:
c002589c:	83 ec 0c             	sub    esp,0xc
c002589f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258a3:	83 ec 0c             	sub    esp,0xc
c00258a6:	50                   	push   eax
c00258a7:	e8 0c 10 00 00       	call   c00268b8 <sseSave>
c00258ac:	83 c4 10             	add    esp,0x10
c00258af:	90                   	nop
c00258b0:	83 c4 0c             	add    esp,0xc
c00258b3:	c3                   	ret    

c00258b4 <SSE::load(void*)>:
c00258b4:	83 ec 0c             	sub    esp,0xc
c00258b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258bb:	83 ec 0c             	sub    esp,0xc
c00258be:	50                   	push   eax
c00258bf:	e8 fa 0f 00 00       	call   c00268be <sseLoad>
c00258c4:	83 c4 10             	add    esp,0x10
c00258c7:	90                   	nop
c00258c8:	83 c4 0c             	add    esp,0xc
c00258cb:	c3                   	ret    

c00258cc <SSE::SSE()>:
c00258cc:	83 ec 0c             	sub    esp,0xc
c00258cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258d3:	83 ec 08             	sub    esp,0x8
c00258d6:	68 94 ce 02 c0       	push   0xc002ce94
c00258db:	50                   	push   eax
c00258dc:	e8 ed e8 fe ff       	call   c00141ce <FPU::FPU(char const*)>
c00258e1:	83 c4 10             	add    esp,0x10
c00258e4:	ba a4 ce 02 c0       	mov    edx,0xc002cea4
c00258e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258ed:	89 10                	mov    DWORD PTR [eax],edx
c00258ef:	90                   	nop
c00258f0:	83 c4 0c             	add    esp,0xc
c00258f3:	c3                   	ret    

c00258f4 <x87::open(int, int, void*)>:
c00258f4:	83 ec 0c             	sub    esp,0xc
c00258f7:	e8 16 10 00 00       	call   c0026912 <x87Init>
c00258fc:	b8 00 00 00 00       	mov    eax,0x0
c0025901:	83 c4 0c             	add    esp,0xc
c0025904:	c3                   	ret    
c0025905:	90                   	nop

c0025906 <x87::close(int, int, void*)>:
c0025906:	83 ec 0c             	sub    esp,0xc
c0025909:	e8 1e 10 00 00       	call   c002692c <x87Close>
c002590e:	b8 00 00 00 00       	mov    eax,0x0
c0025913:	83 c4 0c             	add    esp,0xc
c0025916:	c3                   	ret    
c0025917:	90                   	nop

c0025918 <x87::available()>:
c0025918:	83 ec 0c             	sub    esp,0xc
c002591b:	e8 c6 0f 00 00       	call   c00268e6 <x87Detect>
c0025920:	85 c0                	test   eax,eax
c0025922:	0f 95 c0             	setne  al
c0025925:	83 c4 0c             	add    esp,0xc
c0025928:	c3                   	ret    
c0025929:	90                   	nop

c002592a <x87::save(void*)>:
c002592a:	83 ec 0c             	sub    esp,0xc
c002592d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025931:	83 ec 0c             	sub    esp,0xc
c0025934:	50                   	push   eax
c0025935:	e8 c7 0f 00 00       	call   c0026901 <x87Save>
c002593a:	83 c4 10             	add    esp,0x10
c002593d:	90                   	nop
c002593e:	83 c4 0c             	add    esp,0xc
c0025941:	c3                   	ret    

c0025942 <x87::load(void*)>:
c0025942:	83 ec 0c             	sub    esp,0xc
c0025945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025949:	83 ec 0c             	sub    esp,0xc
c002594c:	50                   	push   eax
c002594d:	e8 b8 0f 00 00       	call   c002690a <x87Load>
c0025952:	83 c4 10             	add    esp,0x10
c0025955:	90                   	nop
c0025956:	83 c4 0c             	add    esp,0xc
c0025959:	c3                   	ret    

c002595a <x87::x87()>:
c002595a:	83 ec 0c             	sub    esp,0xc
c002595d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025961:	83 ec 08             	sub    esp,0x8
c0025964:	68 d4 ce 02 c0       	push   0xc002ced4
c0025969:	50                   	push   eax
c002596a:	e8 5f e8 fe ff       	call   c00141ce <FPU::FPU(char const*)>
c002596f:	83 c4 10             	add    esp,0x10
c0025972:	ba e4 ce 02 c0       	mov    edx,0xc002cee4
c0025977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002597b:	89 10                	mov    DWORD PTR [eax],edx
c002597d:	90                   	nop
c002597e:	83 c4 0c             	add    esp,0xc
c0025981:	c3                   	ret    

c0025982 <APIC::disable()>:
c0025982:	90                   	nop
c0025983:	c3                   	ret    

c0025984 <APIC::close(int, int, void*)>:
c0025984:	55                   	push   ebp
c0025985:	89 e5                	mov    ebp,esp
c0025987:	83 ec 08             	sub    esp,0x8
c002598a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002598d:	8b 00                	mov    eax,DWORD PTR [eax]
c002598f:	83 c0 3c             	add    eax,0x3c
c0025992:	8b 00                	mov    eax,DWORD PTR [eax]
c0025994:	83 ec 0c             	sub    esp,0xc
c0025997:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002599a:	ff d0                	call   eax
c002599c:	83 c4 10             	add    esp,0x10
c002599f:	b8 00 00 00 00       	mov    eax,0x0
c00259a4:	c9                   	leave  
c00259a5:	c3                   	ret    

c00259a6 <IOAPIC::close(int, int, void*)>:
c00259a6:	b8 00 00 00 00       	mov    eax,0x0
c00259ab:	c3                   	ret    

c00259ac <APIC::io_wait()>:
c00259ac:	eb 00                	jmp    c00259ae <APIC::io_wait()+0x2>
c00259ae:	eb 00                	jmp    c00259b0 <APIC::io_wait()+0x4>
c00259b0:	90                   	nop
c00259b1:	c3                   	ret    

c00259b2 <APIC::getBase()>:
c00259b2:	55                   	push   ebp
c00259b3:	89 e5                	mov    ebp,esp
c00259b5:	83 ec 18             	sub    esp,0x18
c00259b8:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00259bd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00259c3:	83 e0 08             	and    eax,0x8
c00259c6:	84 c0                	test   al,al
c00259c8:	75 07                	jne    c00259d1 <APIC::getBase()+0x1f>
c00259ca:	b8 00 00 00 00       	mov    eax,0x0
c00259cf:	eb 21                	jmp    c00259f2 <APIC::getBase()+0x40>
c00259d1:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00259d6:	83 ec 08             	sub    esp,0x8
c00259d9:	6a 1b                	push   0x1b
c00259db:	50                   	push   eax
c00259dc:	e8 a1 93 fe ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c00259e1:	83 c4 10             	add    esp,0x10
c00259e4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00259e7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00259ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c00259f2:	c9                   	leave  
c00259f3:	c3                   	ret    

c00259f4 <APIC::eoi(unsigned char)>:
c00259f4:	55                   	push   ebp
c00259f5:	89 e5                	mov    ebp,esp
c00259f7:	83 ec 28             	sub    esp,0x28
c00259fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259fd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025a00:	83 ec 0c             	sub    esp,0xc
c0025a03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a06:	e8 a7 ff ff ff       	call   c00259b2 <APIC::getBase()>
c0025a0b:	83 c4 10             	add    esp,0x10
c0025a0e:	05 b0 00 00 00       	add    eax,0xb0
c0025a13:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025a16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025a19:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025a1f:	90                   	nop
c0025a20:	c9                   	leave  
c0025a21:	c3                   	ret    

c0025a22 <APIC::open(int, int, void*)>:
c0025a22:	55                   	push   ebp
c0025a23:	89 e5                	mov    ebp,esp
c0025a25:	57                   	push   edi
c0025a26:	56                   	push   esi
c0025a27:	53                   	push   ebx
c0025a28:	83 ec 2c             	sub    esp,0x2c
c0025a2b:	83 ec 0c             	sub    esp,0xc
c0025a2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a31:	e8 7c ff ff ff       	call   c00259b2 <APIC::getBase()>
c0025a36:	83 c4 10             	add    esp,0x10
c0025a39:	89 c2                	mov    edx,eax
c0025a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a3e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a44:	0f b6 f8             	movzx  edi,al
c0025a47:	89 d0                	mov    eax,edx
c0025a49:	ba 00 00 00 00       	mov    edx,0x0
c0025a4e:	89 c1                	mov    ecx,eax
c0025a50:	80 e5 ff             	and    ch,0xff
c0025a53:	89 cb                	mov    ebx,ecx
c0025a55:	0f b6 f2             	movzx  esi,dl
c0025a58:	89 d8                	mov    eax,ebx
c0025a5a:	89 f2                	mov    edx,esi
c0025a5c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a5f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025a62:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025a66:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025a6a:	83 e0 00             	and    eax,0x0
c0025a6d:	09 d0                	or     eax,edx
c0025a6f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025a73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a76:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a7c:	8d 50 01             	lea    edx,[eax+0x1]
c0025a7f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a82:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025a88:	0f b6 d0             	movzx  edx,al
c0025a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a8e:	83 c2 08             	add    edx,0x8
c0025a91:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025a95:	0f b6 c9             	movzx  ecx,cl
c0025a98:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025a9e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025aa2:	83 ec 0c             	sub    esp,0xc
c0025aa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025aa8:	e8 05 ff ff ff       	call   c00259b2 <APIC::getBase()>
c0025aad:	83 c4 10             	add    esp,0x10
c0025ab0:	05 f0 00 00 00       	add    eax,0xf0
c0025ab5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025ab8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025abb:	8b 00                	mov    eax,DWORD PTR [eax]
c0025abd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025ac0:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025ac7:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025ace:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025ad1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ad4:	89 10                	mov    DWORD PTR [eax],edx
c0025ad6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025add:	a1 30 ec 02 c0       	mov    eax,ds:0xc002ec30
c0025ae2:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025ae5:	7d 7c                	jge    c0025b63 <APIC::open(int, int, void*)+0x141>
c0025ae7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025aea:	8b 04 85 40 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13c0]
c0025af1:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025af4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025af7:	8b 04 85 40 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13c0]
c0025afe:	c1 e8 08             	shr    eax,0x8
c0025b01:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025b05:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025b08:	8b 04 85 40 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13c0]
c0025b0f:	c1 e8 18             	shr    eax,0x18
c0025b12:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025b15:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025b19:	75 40                	jne    c0025b5b <APIC::open(int, int, void*)+0x139>
c0025b1b:	83 ec 0c             	sub    esp,0xc
c0025b1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b21:	e8 8c fe ff ff       	call   c00259b2 <APIC::getBase()>
c0025b26:	83 c4 10             	add    esp,0x10
c0025b29:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025b2d:	75 07                	jne    c0025b36 <APIC::open(int, int, void*)+0x114>
c0025b2f:	ba 60 03 00 00       	mov    edx,0x360
c0025b34:	eb 05                	jmp    c0025b3b <APIC::open(int, int, void*)+0x119>
c0025b36:	ba 50 03 00 00       	mov    edx,0x350
c0025b3b:	01 d0                	add    eax,edx
c0025b3d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025b40:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025b43:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b45:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025b48:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025b4f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025b53:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025b56:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025b59:	89 10                	mov    DWORD PTR [eax],edx
c0025b5b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025b5e:	e9 7a ff ff ff       	jmp    c0025add <APIC::open(int, int, void*)+0xbb>
c0025b63:	b8 00 00 00 00       	mov    eax,0x0
c0025b68:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b6b:	5b                   	pop    ebx
c0025b6c:	5e                   	pop    esi
c0025b6d:	5f                   	pop    edi
c0025b6e:	5d                   	pop    ebp
c0025b6f:	c3                   	ret    

c0025b70 <IOAPIC::IOAPIC()>:
c0025b70:	83 ec 0c             	sub    esp,0xc
c0025b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b77:	83 ec 08             	sub    esp,0x8
c0025b7a:	68 14 cf 02 c0       	push   0xc002cf14
c0025b7f:	50                   	push   eax
c0025b80:	e8 39 e3 fe ff       	call   c0013ebe <Device::Device(char const*)>
c0025b85:	83 c4 10             	add    esp,0x10
c0025b88:	ba 3c d0 02 c0       	mov    edx,0xc002d03c
c0025b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b91:	89 10                	mov    DWORD PTR [eax],edx
c0025b93:	90                   	nop
c0025b94:	83 c4 0c             	add    esp,0xc
c0025b97:	c3                   	ret    

c0025b98 <APIC::APIC()>:
c0025b98:	53                   	push   ebx
c0025b99:	83 ec 18             	sub    esp,0x18
c0025b9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ba0:	83 ec 08             	sub    esp,0x8
c0025ba3:	68 1c cf 02 c0       	push   0xc002cf1c
c0025ba8:	50                   	push   eax
c0025ba9:	e8 7a ea fe ff       	call   c0014628 <InterruptController::InterruptController(char const*)>
c0025bae:	83 c4 10             	add    esp,0x10
c0025bb1:	ba f4 cf 02 c0       	mov    edx,0xc002cff4
c0025bb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025bba:	89 10                	mov    DWORD PTR [eax],edx
c0025bbc:	a0 00 07 03 c0       	mov    al,ds:0xc0030700
c0025bc1:	83 f0 01             	xor    eax,0x1
c0025bc4:	84 c0                	test   al,al
c0025bc6:	0f 84 a1 00 00 00    	je     c0025c6d <APIC::APIC()+0xd5>
c0025bcc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025bd1:	a0 e0 ec 02 c0       	mov    al,ds:0xc002ece0
c0025bd6:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025bda:	0f 83 86 00 00 00    	jae    c0025c66 <APIC::APIC()+0xce>
c0025be0:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025be8:	83 ec 0c             	sub    esp,0xc
c0025beb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025bef:	e8 35 9c fe ff       	call   c000f829 <malloc>
c0025bf4:	83 c4 10             	add    esp,0x10
c0025bf7:	89 c3                	mov    ebx,eax
c0025bf9:	83 ec 0c             	sub    esp,0xc
c0025bfc:	53                   	push   ebx
c0025bfd:	e8 6e ff ff ff       	call   c0025b70 <IOAPIC::IOAPIC()>
c0025c02:	83 c4 10             	add    esp,0x10
c0025c05:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025c09:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025c0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025c12:	89 14 85 e0 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf920],edx
c0025c19:	a1 c0 06 03 c0       	mov    eax,ds:0xc00306c0
c0025c1e:	40                   	inc    eax
c0025c1f:	a3 c0 06 03 c0       	mov    ds:0xc00306c0,eax
c0025c24:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0025c29:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025c2f:	83 ec 08             	sub    esp,0x8
c0025c32:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025c36:	50                   	push   eax
c0025c37:	e8 7e e0 fe ff       	call   c0013cba <Device::addChild(Device*)>
c0025c3c:	83 c4 10             	add    esp,0x10
c0025c3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c45:	83 c0 08             	add    eax,0x8
c0025c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c4a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025c4f:	6a 00                	push   0x0
c0025c51:	6a 00                	push   0x0
c0025c53:	52                   	push   edx
c0025c54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025c58:	ff d0                	call   eax
c0025c5a:	83 c4 10             	add    esp,0x10
c0025c5d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025c61:	e9 6b ff ff ff       	jmp    c0025bd1 <APIC::APIC()+0x39>
c0025c66:	c6 05 00 07 03 c0 01 	mov    BYTE PTR ds:0xc0030700,0x1
c0025c6d:	90                   	nop
c0025c6e:	83 c4 18             	add    esp,0x18
c0025c71:	5b                   	pop    ebx
c0025c72:	c3                   	ret    
c0025c73:	90                   	nop

c0025c74 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025c74:	55                   	push   ebp
c0025c75:	89 e5                	mov    ebp,esp
c0025c77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c7a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025c80:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025c83:	72 1d                	jb     c0025ca2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c88:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025c8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c91:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025c97:	01 d0                	add    eax,edx
c0025c99:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025c9c:	73 04                	jae    c0025ca2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025c9e:	b0 01                	mov    al,0x1
c0025ca0:	eb 02                	jmp    c0025ca4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025ca2:	b0 00                	mov    al,0x0
c0025ca4:	5d                   	pop    ebp
c0025ca5:	c3                   	ret    

c0025ca6 <IOAPIC::read(int)>:
c0025ca6:	55                   	push   ebp
c0025ca7:	89 e5                	mov    ebp,esp
c0025ca9:	83 ec 10             	sub    esp,0x10
c0025cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025caf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025cb5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025cb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cbb:	0f b6 d0             	movzx  edx,al
c0025cbe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025cc1:	89 10                	mov    DWORD PTR [eax],edx
c0025cc3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025cc6:	83 c0 10             	add    eax,0x10
c0025cc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ccb:	c9                   	leave  
c0025ccc:	c3                   	ret    
c0025ccd:	90                   	nop

c0025cce <IOAPIC::open(int, int, void*)>:
c0025cce:	55                   	push   ebp
c0025ccf:	89 e5                	mov    ebp,esp
c0025cd1:	57                   	push   edi
c0025cd2:	56                   	push   esi
c0025cd3:	53                   	push   ebx
c0025cd4:	83 ec 0c             	sub    esp,0xc
c0025cd7:	83 ec 0c             	sub    esp,0xc
c0025cda:	68 47 cf 02 c0       	push   0xc002cf47
c0025cdf:	e8 9d cb fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0025ce4:	83 c4 10             	add    esp,0x10
c0025ce7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ced:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cf6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025cfc:	8b 14 85 20 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd12e0]
c0025d03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d06:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025d0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d0f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025d15:	8b 14 85 a0 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1260]
c0025d1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d1f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d28:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d31:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025d37:	0f b6 f8             	movzx  edi,al
c0025d3a:	89 d0                	mov    eax,edx
c0025d3c:	ba 00 00 00 00       	mov    edx,0x0
c0025d41:	89 c1                	mov    ecx,eax
c0025d43:	80 e5 ff             	and    ch,0xff
c0025d46:	89 cb                	mov    ebx,ecx
c0025d48:	0f b6 f2             	movzx  esi,dl
c0025d4b:	89 d8                	mov    eax,ebx
c0025d4d:	89 f2                	mov    edx,esi
c0025d4f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025d52:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025d55:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025d59:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025d5d:	83 e0 00             	and    eax,0x0
c0025d60:	09 d0                	or     eax,edx
c0025d62:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d69:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025d6f:	8d 50 01             	lea    edx,[eax+0x1]
c0025d72:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025d75:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025d7b:	0f b6 d0             	movzx  edx,al
c0025d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d81:	83 c2 08             	add    edx,0x8
c0025d84:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025d88:	0f b6 c9             	movzx  ecx,cl
c0025d8b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025d91:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025d95:	83 ec 08             	sub    esp,0x8
c0025d98:	6a 01                	push   0x1
c0025d9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d9d:	e8 04 ff ff ff       	call   c0025ca6 <IOAPIC::read(int)>
c0025da2:	83 c4 10             	add    esp,0x10
c0025da5:	c1 f8 10             	sar    eax,0x10
c0025da8:	0f b6 c0             	movzx  eax,al
c0025dab:	8d 50 01             	lea    edx,[eax+0x1]
c0025dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025db1:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025db7:	b8 00 00 00 00       	mov    eax,0x0
c0025dbc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025dbf:	5b                   	pop    ebx
c0025dc0:	5e                   	pop    esi
c0025dc1:	5f                   	pop    edi
c0025dc2:	5d                   	pop    ebp
c0025dc3:	c3                   	ret    

c0025dc4 <IOAPIC::write(int, int)>:
c0025dc4:	55                   	push   ebp
c0025dc5:	89 e5                	mov    ebp,esp
c0025dc7:	83 ec 10             	sub    esp,0x10
c0025dca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dcd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025dd3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025dd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dd9:	0f b6 d0             	movzx  edx,al
c0025ddc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ddf:	89 10                	mov    DWORD PTR [eax],edx
c0025de1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025de4:	8d 50 10             	lea    edx,[eax+0x10]
c0025de7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025dea:	89 02                	mov    DWORD PTR [edx],eax
c0025dec:	90                   	nop
c0025ded:	c9                   	leave  
c0025dee:	c3                   	ret    
c0025def:	90                   	nop

c0025df0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025df0:	55                   	push   ebp
c0025df1:	89 e5                	mov    ebp,esp
c0025df3:	53                   	push   ebx
c0025df4:	83 ec 2c             	sub    esp,0x2c
c0025df7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dfa:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025dfd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025e00:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025e03:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025e06:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025e09:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025e0c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025e0f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025e12:	88 d8                	mov    al,bl
c0025e14:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025e17:	88 c8                	mov    al,cl
c0025e19:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025e1c:	88 d0                	mov    al,dl
c0025e1e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025e21:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025e25:	83 c0 08             	add    eax,0x8
c0025e28:	01 c0                	add    eax,eax
c0025e2a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025e2d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025e31:	83 c0 08             	add    eax,0x8
c0025e34:	01 c0                	add    eax,eax
c0025e36:	40                   	inc    eax
c0025e37:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025e3a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025e3d:	50                   	push   eax
c0025e3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e41:	e8 60 fe ff ff       	call   c0025ca6 <IOAPIC::read(int)>
c0025e46:	83 c4 08             	add    esp,0x8
c0025e49:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025e4c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025e53:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025e56:	c1 e0 18             	shl    eax,0x18
c0025e59:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025e5c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025e5f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025e62:	52                   	push   edx
c0025e63:	50                   	push   eax
c0025e64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e67:	e8 58 ff ff ff       	call   c0025dc4 <IOAPIC::write(int, int)>
c0025e6c:	83 c4 0c             	add    esp,0xc
c0025e6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e72:	50                   	push   eax
c0025e73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e76:	e8 2b fe ff ff       	call   c0025ca6 <IOAPIC::read(int)>
c0025e7b:	83 c4 08             	add    esp,0x8
c0025e7e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025e81:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025e88:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025e8f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025e96:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025e9a:	74 09                	je     c0025ea5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025e9c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025ea3:	eb 07                	jmp    c0025eac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025ea5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025eac:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025eb0:	74 09                	je     c0025ebb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025eb2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025eb9:	eb 07                	jmp    c0025ec2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025ebb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025ec2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025ec9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025ecd:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025ed0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025ed3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025ed6:	52                   	push   edx
c0025ed7:	50                   	push   eax
c0025ed8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025edb:	e8 e4 fe ff ff       	call   c0025dc4 <IOAPIC::write(int, int)>
c0025ee0:	83 c4 0c             	add    esp,0xc
c0025ee3:	90                   	nop
c0025ee4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025ee7:	c9                   	leave  
c0025ee8:	c3                   	ret    
c0025ee9:	90                   	nop

c0025eea <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025eea:	55                   	push   ebp
c0025eeb:	89 e5                	mov    ebp,esp
c0025eed:	57                   	push   edi
c0025eee:	56                   	push   esi
c0025eef:	53                   	push   ebx
c0025ef0:	83 ec 2c             	sub    esp,0x2c
c0025ef3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025ef6:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025ef9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025efd:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025f01:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025f05:	74 5a                	je     c0025f61 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025f07:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025f0b:	7f 44                	jg     c0025f51 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025f0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f10:	05 e0 d5 02 c0       	add    eax,0xc002d5e0
c0025f15:	8a 00                	mov    al,BYTE PTR [eax]
c0025f17:	0f b6 c0             	movzx  eax,al
c0025f1a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025f1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f20:	66 8b 84 00 c0 ec 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1340]
c0025f28:	0f b7 c0             	movzx  eax,ax
c0025f2b:	83 e0 02             	and    eax,0x2
c0025f2e:	85 c0                	test   eax,eax
c0025f30:	74 04                	je     c0025f36 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025f32:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025f36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f39:	66 8b 84 00 c0 ec 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1340]
c0025f41:	0f b7 c0             	movzx  eax,ax
c0025f44:	83 e0 08             	and    eax,0x8
c0025f47:	85 c0                	test   eax,eax
c0025f49:	74 16                	je     c0025f61 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025f4b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025f4f:	eb 10                	jmp    c0025f61 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025f51:	83 ec 0c             	sub    esp,0xc
c0025f54:	68 58 cf 02 c0       	push   0xc002cf58
c0025f59:	e8 91 42 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0025f5e:	83 c4 10             	add    esp,0x10
c0025f61:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025f65:	a1 c0 06 03 c0       	mov    eax,ds:0xc00306c0
c0025f6a:	83 ec 08             	sub    esp,0x8
c0025f6d:	50                   	push   eax
c0025f6e:	68 90 cf 02 c0       	push   0xc002cf90
c0025f73:	e8 09 c9 fe ff       	call   c0012881 <Dbg::kprintf(char const*, ...)>
c0025f78:	83 c4 10             	add    esp,0x10
c0025f7b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025f82:	a1 c0 06 03 c0       	mov    eax,ds:0xc00306c0
c0025f87:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025f8a:	7d 67                	jge    c0025ff3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025f8c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025f8f:	8b 04 85 e0 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf920]
c0025f96:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025f99:	83 ec 08             	sub    esp,0x8
c0025f9c:	52                   	push   edx
c0025f9d:	50                   	push   eax
c0025f9e:	e8 d1 fc ff ff       	call   c0025c74 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025fa3:	83 c4 10             	add    esp,0x10
c0025fa6:	84 c0                	test   al,al
c0025fa8:	74 44                	je     c0025fee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025faa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025fad:	8b 1c 85 e0 06 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcf920]
c0025fb4:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025fb8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025fbb:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025fbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fc2:	83 c0 20             	add    eax,0x20
c0025fc5:	0f b6 f0             	movzx  esi,al
c0025fc8:	b8 00 00 00 00       	mov    eax,0x0
c0025fcd:	99                   	cdq    
c0025fce:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025fd1:	0f b6 c9             	movzx  ecx,cl
c0025fd4:	83 ec 04             	sub    esp,0x4
c0025fd7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025fda:	57                   	push   edi
c0025fdb:	56                   	push   esi
c0025fdc:	52                   	push   edx
c0025fdd:	50                   	push   eax
c0025fde:	51                   	push   ecx
c0025fdf:	53                   	push   ebx
c0025fe0:	e8 0b fe ff ff       	call   c0025df0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025fe5:	83 c4 20             	add    esp,0x20
c0025fe8:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025fec:	eb 05                	jmp    c0025ff3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025fee:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025ff1:	eb 8f                	jmp    c0025f82 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025ff3:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025ff6:	83 f0 01             	xor    eax,0x1
c0025ff9:	84 c0                	test   al,al
c0025ffb:	74 10                	je     c002600d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025ffd:	83 ec 0c             	sub    esp,0xc
c0026000:	68 a7 cf 02 c0       	push   0xc002cfa7
c0026005:	e8 e5 41 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c002600a:	83 c4 10             	add    esp,0x10
c002600d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026011:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026018:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002601c:	7f 65                	jg     c0026083 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002601e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026021:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026024:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002602b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002602e:	01 ca                	add    edx,ecx
c0026030:	83 c2 54             	add    edx,0x54
c0026033:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026037:	85 c0                	test   eax,eax
c0026039:	75 43                	jne    c002607e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002603b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002603e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026041:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026048:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002604b:	01 ca                	add    edx,ecx
c002604d:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026050:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026053:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002605a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002605d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026064:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026067:	01 ca                	add    edx,ecx
c0026069:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002606f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026072:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026076:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026079:	83 e8 20             	sub    eax,0x20
c002607c:	eb 1a                	jmp    c0026098 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002607e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026081:	eb 95                	jmp    c0026018 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026083:	83 ec 0c             	sub    esp,0xc
c0026086:	68 b4 cf 02 c0       	push   0xc002cfb4
c002608b:	e8 5f 41 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0026090:	83 c4 10             	add    esp,0x10
c0026093:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026098:	8d 65 f4             	lea    esp,[ebp-0xc]
c002609b:	5b                   	pop    ebx
c002609c:	5e                   	pop    esi
c002609d:	5f                   	pop    edi
c002609e:	5d                   	pop    ebp
c002609f:	c3                   	ret    

c00260a0 <PIC::disable()>:
c00260a0:	55                   	push   ebp
c00260a1:	89 e5                	mov    ebp,esp
c00260a3:	83 ec 10             	sub    esp,0x10
c00260a6:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00260ac:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00260b0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260b3:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00260b7:	ee                   	out    dx,al
c00260b8:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00260be:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00260c2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00260c5:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00260c9:	ee                   	out    dx,al
c00260ca:	90                   	nop
c00260cb:	c9                   	leave  
c00260cc:	c3                   	ret    
c00260cd:	90                   	nop

c00260ce <PIC::close(int, int, void*)>:
c00260ce:	55                   	push   ebp
c00260cf:	89 e5                	mov    ebp,esp
c00260d1:	83 ec 08             	sub    esp,0x8
c00260d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00260d9:	83 c0 3c             	add    eax,0x3c
c00260dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00260de:	83 ec 0c             	sub    esp,0xc
c00260e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e4:	ff d0                	call   eax
c00260e6:	83 c4 10             	add    esp,0x10
c00260e9:	b8 00 00 00 00       	mov    eax,0x0
c00260ee:	c9                   	leave  
c00260ef:	c3                   	ret    

c00260f0 <PIC::PIC()>:
c00260f0:	83 ec 0c             	sub    esp,0xc
c00260f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260f7:	83 ec 08             	sub    esp,0x8
c00260fa:	68 60 d0 02 c0       	push   0xc002d060
c00260ff:	50                   	push   eax
c0026100:	e8 23 e5 fe ff       	call   c0014628 <InterruptController::InterruptController(char const*)>
c0026105:	83 c4 10             	add    esp,0x10
c0026108:	ba 8c d0 02 c0       	mov    edx,0xc002d08c
c002610d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026111:	89 10                	mov    DWORD PTR [eax],edx
c0026113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026117:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002611d:	0f b6 d0             	movzx  edx,al
c0026120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026124:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002612b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002612f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026135:	0f b6 d0             	movzx  edx,al
c0026138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002613c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026145:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002614b:	8d 50 01             	lea    edx,[eax+0x1]
c002614e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026152:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026158:	0f b6 d0             	movzx  edx,al
c002615b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002615f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026163:	83 e1 3f             	and    ecx,0x3f
c0026166:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002616a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002616e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026174:	0f b6 d0             	movzx  edx,al
c0026177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002617b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026186:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002618c:	0f b6 d0             	movzx  edx,al
c002618f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026193:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002619c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00261a2:	8d 50 01             	lea    edx,[eax+0x1]
c00261a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00261a9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00261af:	0f b6 d0             	movzx  edx,al
c00261b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00261ba:	83 e1 3f             	and    ecx,0x3f
c00261bd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00261c1:	90                   	nop
c00261c2:	83 c4 0c             	add    esp,0xc
c00261c5:	c3                   	ret    

c00261c6 <PIC::ioWait()>:
c00261c6:	eb 00                	jmp    c00261c8 <PIC::ioWait()+0x2>
c00261c8:	eb 00                	jmp    c00261ca <PIC::ioWait()+0x4>
c00261ca:	90                   	nop
c00261cb:	c3                   	ret    

c00261cc <PIC::getIRQReg(int)>:
c00261cc:	55                   	push   ebp
c00261cd:	89 e5                	mov    ebp,esp
c00261cf:	83 ec 10             	sub    esp,0x10
c00261d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00261d5:	0f b6 c0             	movzx  eax,al
c00261d8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00261de:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00261e1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261e4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261e8:	ee                   	out    dx,al
c00261e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00261ec:	0f b6 c0             	movzx  eax,al
c00261ef:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00261f5:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00261f8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261fb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261ff:	ee                   	out    dx,al
c0026200:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026206:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002620a:	89 c2                	mov    edx,eax
c002620c:	ec                   	in     al,dx
c002620d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026210:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026213:	0f b6 c0             	movzx  eax,al
c0026216:	c1 e0 08             	shl    eax,0x8
c0026219:	89 c1                	mov    ecx,eax
c002621b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026221:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026225:	89 c2                	mov    edx,eax
c0026227:	ec                   	in     al,dx
c0026228:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002622b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002622e:	0f b6 c0             	movzx  eax,al
c0026231:	09 c8                	or     eax,ecx
c0026233:	c9                   	leave  
c0026234:	c3                   	ret    
c0026235:	90                   	nop

c0026236 <PIC::eoi(unsigned char)>:
c0026236:	55                   	push   ebp
c0026237:	89 e5                	mov    ebp,esp
c0026239:	83 ec 14             	sub    esp,0x14
c002623c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002623f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026242:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026246:	75 1e                	jne    c0026266 <PIC::eoi(unsigned char)+0x30>
c0026248:	6a 0b                	push   0xb
c002624a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002624d:	e8 7a ff ff ff       	call   c00261cc <PIC::getIRQReg(int)>
c0026252:	83 c4 08             	add    esp,0x8
c0026255:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026259:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002625d:	25 80 00 00 00       	and    eax,0x80
c0026262:	85 c0                	test   eax,eax
c0026264:	74 5f                	je     c00262c5 <PIC::eoi(unsigned char)+0x8f>
c0026266:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002626a:	75 2d                	jne    c0026299 <PIC::eoi(unsigned char)+0x63>
c002626c:	6a 0b                	push   0xb
c002626e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026271:	e8 56 ff ff ff       	call   c00261cc <PIC::getIRQReg(int)>
c0026276:	83 c4 08             	add    esp,0x8
c0026279:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002627d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026280:	66 85 c0             	test   ax,ax
c0026283:	78 14                	js     c0026299 <PIC::eoi(unsigned char)+0x63>
c0026285:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002628b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002628f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026292:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026296:	ee                   	out    dx,al
c0026297:	eb 2d                	jmp    c00262c6 <PIC::eoi(unsigned char)+0x90>
c0026299:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002629d:	76 12                	jbe    c00262b1 <PIC::eoi(unsigned char)+0x7b>
c002629f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00262a5:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00262a9:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262ac:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262b0:	ee                   	out    dx,al
c00262b1:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00262b7:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00262bb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00262be:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00262c2:	ee                   	out    dx,al
c00262c3:	eb 01                	jmp    c00262c6 <PIC::eoi(unsigned char)+0x90>
c00262c5:	90                   	nop
c00262c6:	c9                   	leave  
c00262c7:	c3                   	ret    

c00262c8 <PIC::remap()>:
c00262c8:	55                   	push   ebp
c00262c9:	89 e5                	mov    ebp,esp
c00262cb:	83 ec 48             	sub    esp,0x48
c00262ce:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00262d5:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00262dc:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00262e2:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00262e5:	89 c2                	mov    edx,eax
c00262e7:	ec                   	in     al,dx
c00262e8:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00262eb:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00262ee:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00262f1:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00262f7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00262fa:	89 c2                	mov    edx,eax
c00262fc:	ec                   	in     al,dx
c00262fd:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026300:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026303:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026306:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002630c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026310:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026313:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026316:	ee                   	out    dx,al
c0026317:	83 ec 0c             	sub    esp,0xc
c002631a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002631d:	e8 a4 fe ff ff       	call   c00261c6 <PIC::ioWait()>
c0026322:	83 c4 10             	add    esp,0x10
c0026325:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002632b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002632f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026332:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026335:	ee                   	out    dx,al
c0026336:	83 ec 0c             	sub    esp,0xc
c0026339:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002633c:	e8 85 fe ff ff       	call   c00261c6 <PIC::ioWait()>
c0026341:	83 c4 10             	add    esp,0x10
c0026344:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026347:	0f b6 c0             	movzx  eax,al
c002634a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026350:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026353:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026356:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026359:	ee                   	out    dx,al
c002635a:	83 ec 0c             	sub    esp,0xc
c002635d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026360:	e8 61 fe ff ff       	call   c00261c6 <PIC::ioWait()>
c0026365:	83 c4 10             	add    esp,0x10
c0026368:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002636b:	0f b6 c0             	movzx  eax,al
c002636e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026374:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026377:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002637a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002637d:	ee                   	out    dx,al
c002637e:	83 ec 0c             	sub    esp,0xc
c0026381:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026384:	e8 3d fe ff ff       	call   c00261c6 <PIC::ioWait()>
c0026389:	83 c4 10             	add    esp,0x10
c002638c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026392:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026396:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026399:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002639c:	ee                   	out    dx,al
c002639d:	83 ec 0c             	sub    esp,0xc
c00263a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263a3:	e8 1e fe ff ff       	call   c00261c6 <PIC::ioWait()>
c00263a8:	83 c4 10             	add    esp,0x10
c00263ab:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00263b1:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00263b5:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00263b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00263bb:	ee                   	out    dx,al
c00263bc:	83 ec 0c             	sub    esp,0xc
c00263bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263c2:	e8 ff fd ff ff       	call   c00261c6 <PIC::ioWait()>
c00263c7:	83 c4 10             	add    esp,0x10
c00263ca:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00263d0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00263d4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00263d7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00263da:	ee                   	out    dx,al
c00263db:	83 ec 0c             	sub    esp,0xc
c00263de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263e1:	e8 e0 fd ff ff       	call   c00261c6 <PIC::ioWait()>
c00263e6:	83 c4 10             	add    esp,0x10
c00263e9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00263ef:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00263f3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00263f6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00263f9:	ee                   	out    dx,al
c00263fa:	83 ec 0c             	sub    esp,0xc
c00263fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026400:	e8 c1 fd ff ff       	call   c00261c6 <PIC::ioWait()>
c0026405:	83 c4 10             	add    esp,0x10
c0026408:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002640c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026412:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026415:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026418:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002641b:	ee                   	out    dx,al
c002641c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026420:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026426:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026429:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002642c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002642f:	ee                   	out    dx,al
c0026430:	90                   	nop
c0026431:	c9                   	leave  
c0026432:	c3                   	ret    
c0026433:	90                   	nop

c0026434 <PIC::open(int, int, void*)>:
c0026434:	55                   	push   ebp
c0026435:	89 e5                	mov    ebp,esp
c0026437:	83 ec 18             	sub    esp,0x18
c002643a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026440:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026444:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026447:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002644b:	ee                   	out    dx,al
c002644c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026452:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026456:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026459:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002645d:	ee                   	out    dx,al
c002645e:	83 ec 0c             	sub    esp,0xc
c0026461:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026464:	e8 5f fe ff ff       	call   c00262c8 <PIC::remap()>
c0026469:	83 c4 10             	add    esp,0x10
c002646c:	b8 00 00 00 00       	mov    eax,0x0
c0026471:	c9                   	leave  
c0026472:	c3                   	ret    
c0026473:	90                   	nop

c0026474 <APICTimer::close(int, int, void*)>:
c0026474:	b8 00 00 00 00       	mov    eax,0x0
c0026479:	c3                   	ret    

c002647a <apicTimerHandler(regs*, void*)>:
c002647a:	83 ec 0c             	sub    esp,0xc
c002647d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026481:	8b 00                	mov    eax,DWORD PTR [eax]
c0026483:	99                   	cdq    
c0026484:	52                   	push   edx
c0026485:	50                   	push   eax
c0026486:	6a 00                	push   0x0
c0026488:	68 00 ca 9a 3b       	push   0x3b9aca00
c002648d:	e8 92 07 00 00       	call   c0026c24 <__udivdi3>
c0026492:	83 c4 10             	add    esp,0x10
c0026495:	83 ec 08             	sub    esp,0x8
c0026498:	52                   	push   edx
c0026499:	50                   	push   eax
c002649a:	e8 e6 02 ff ff       	call   c0016785 <timerHandler(unsigned long long)>
c002649f:	83 c4 10             	add    esp,0x10
c00264a2:	90                   	nop
c00264a3:	83 c4 0c             	add    esp,0xc
c00264a6:	c3                   	ret    
c00264a7:	90                   	nop

c00264a8 <APICTimer::write(int)>:
c00264a8:	53                   	push   ebx
c00264a9:	83 ec 28             	sub    esp,0x28
c00264ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00264b0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00264b4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00264ba:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00264bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00264c5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00264cb:	83 ec 0c             	sub    esp,0xc
c00264ce:	50                   	push   eax
c00264cf:	e8 de f4 ff ff       	call   c00259b2 <APIC::getBase()>
c00264d4:	83 c4 10             	add    esp,0x10
c00264d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00264db:	a1 f0 e9 02 c0       	mov    eax,ds:0xc002e9f0
c00264e0:	8b 15 f4 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9f4
c00264e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00264ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00264ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00264f2:	05 e0 03 00 00       	add    eax,0x3e0
c00264f7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00264fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026501:	05 80 03 00 00       	add    eax,0x380
c0026506:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002650c:	fb                   	sti    
c002650d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026511:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026515:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002651a:	83 d2 00             	adc    edx,0x0
c002651d:	89 c1                	mov    ecx,eax
c002651f:	89 d3                	mov    ebx,edx
c0026521:	a1 f0 e9 02 c0       	mov    eax,ds:0xc002e9f0
c0026526:	8b 15 f4 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9f4
c002652c:	39 c8                	cmp    eax,ecx
c002652e:	89 d0                	mov    eax,edx
c0026530:	19 d8                	sbb    eax,ebx
c0026532:	73 02                	jae    c0026536 <APICTimer::write(int)+0x8e>
c0026534:	eb d7                	jmp    c002650d <APICTimer::write(int)+0x65>
c0026536:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002653a:	05 20 03 00 00       	add    eax,0x320
c002653f:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026545:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026549:	05 90 03 00 00       	add    eax,0x390
c002654e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026550:	f7 d0                	not    eax
c0026552:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026556:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002655a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002655e:	ba 00 00 00 00       	mov    edx,0x0
c0026563:	f7 f3                	div    ebx
c0026565:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026569:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002656d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026573:	0d 00 00 02 00       	or     eax,0x20000
c0026578:	89 c2                	mov    edx,eax
c002657a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002657e:	05 20 03 00 00       	add    eax,0x320
c0026583:	89 10                	mov    DWORD PTR [eax],edx
c0026585:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026589:	05 e0 03 00 00       	add    eax,0x3e0
c002658e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026594:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026598:	05 80 03 00 00       	add    eax,0x380
c002659d:	89 c2                	mov    edx,eax
c002659f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00265a3:	89 02                	mov    DWORD PTR [edx],eax
c00265a5:	90                   	nop
c00265a6:	83 c4 28             	add    esp,0x28
c00265a9:	5b                   	pop    ebx
c00265aa:	c3                   	ret    
c00265ab:	90                   	nop

c00265ac <APICTimer::open(int, int, void*)>:
c00265ac:	57                   	push   edi
c00265ad:	56                   	push   esi
c00265ae:	53                   	push   ebx
c00265af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00265b5:	83 c0 24             	add    eax,0x24
c00265b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00265ba:	83 ec 08             	sub    esp,0x8
c00265bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265c5:	ff d0                	call   eax
c00265c7:	83 c4 10             	add    esp,0x10
c00265ca:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00265cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00265d5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00265db:	83 ec 0c             	sub    esp,0xc
c00265de:	50                   	push   eax
c00265df:	e8 ce f3 ff ff       	call   c00259b2 <APIC::getBase()>
c00265e4:	83 c4 10             	add    esp,0x10
c00265e7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00265ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00265f7:	0f b6 f8             	movzx  edi,al
c00265fa:	89 d0                	mov    eax,edx
c00265fc:	ba 00 00 00 00       	mov    edx,0x0
c0026601:	89 c1                	mov    ecx,eax
c0026603:	80 e5 ff             	and    ch,0xff
c0026606:	89 cb                	mov    ebx,ecx
c0026608:	0f b6 f2             	movzx  esi,dl
c002660b:	89 d8                	mov    eax,ebx
c002660d:	89 f2                	mov    edx,esi
c002660f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026613:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026616:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002661a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002661e:	83 e0 00             	and    eax,0x0
c0026621:	09 d0                	or     eax,edx
c0026623:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002662b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026631:	8d 50 01             	lea    edx,[eax+0x1]
c0026634:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026638:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002663e:	0f b6 d0             	movzx  edx,al
c0026641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026645:	83 c2 08             	add    edx,0x8
c0026648:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002664c:	0f b6 c9             	movzx  ecx,cl
c002664f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026655:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002665d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026661:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002666b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002666f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026675:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026679:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002667f:	83 ec 0c             	sub    esp,0xc
c0026682:	51                   	push   ecx
c0026683:	6a 01                	push   0x1
c0026685:	68 7a 64 02 c0       	push   0xc002647a
c002668a:	52                   	push   edx
c002668b:	50                   	push   eax
c002668c:	e8 a1 d5 fe ff       	call   c0013c32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026691:	83 c4 20             	add    esp,0x20
c0026694:	89 c2                	mov    edx,eax
c0026696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00266a0:	b8 00 00 00 00       	mov    eax,0x0
c00266a5:	5b                   	pop    ebx
c00266a6:	5e                   	pop    esi
c00266a7:	5f                   	pop    edi
c00266a8:	c3                   	ret    
c00266a9:	90                   	nop

c00266aa <APICTimer::APICTimer()>:
c00266aa:	83 ec 0c             	sub    esp,0xc
c00266ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b1:	83 ec 08             	sub    esp,0x8
c00266b4:	68 cc d0 02 c0       	push   0xc002d0cc
c00266b9:	50                   	push   eax
c00266ba:	e8 37 00 ff ff       	call   c00166f6 <Timer::Timer(char const*)>
c00266bf:	83 c4 10             	add    esp,0x10
c00266c2:	ba e0 d0 02 c0       	mov    edx,0xc002d0e0
c00266c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266cb:	89 10                	mov    DWORD PTR [eax],edx
c00266cd:	90                   	nop
c00266ce:	83 c4 0c             	add    esp,0xc
c00266d1:	c3                   	ret    

c00266d2 <PIT::write(int)>:
c00266d2:	83 ec 10             	sub    esp,0x10
c00266d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00266d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00266dd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00266e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00266e7:	a3 04 07 03 c0       	mov    ds:0xc0030704,eax
c00266ec:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00266f1:	99                   	cdq    
c00266f2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00266f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00266fa:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026701:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026706:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002670a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002670f:	ee                   	out    dx,al
c0026710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026714:	0f b6 c0             	movzx  eax,al
c0026717:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002671e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026722:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026726:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002672b:	ee                   	out    dx,al
c002672c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026730:	c1 f8 08             	sar    eax,0x8
c0026733:	0f b6 c0             	movzx  eax,al
c0026736:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002673d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026741:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026745:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002674a:	ee                   	out    dx,al
c002674b:	90                   	nop
c002674c:	83 c4 10             	add    esp,0x10
c002674f:	c3                   	ret    

c0026750 <pitHandler(regs*, void*)>:
c0026750:	83 ec 0c             	sub    esp,0xc
c0026753:	a1 04 07 03 c0       	mov    eax,ds:0xc0030704
c0026758:	99                   	cdq    
c0026759:	52                   	push   edx
c002675a:	50                   	push   eax
c002675b:	6a 00                	push   0x0
c002675d:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026762:	e8 bd 04 00 00       	call   c0026c24 <__udivdi3>
c0026767:	83 c4 10             	add    esp,0x10
c002676a:	83 ec 08             	sub    esp,0x8
c002676d:	52                   	push   edx
c002676e:	50                   	push   eax
c002676f:	e8 11 00 ff ff       	call   c0016785 <timerHandler(unsigned long long)>
c0026774:	83 c4 10             	add    esp,0x10
c0026777:	90                   	nop
c0026778:	83 c4 0c             	add    esp,0xc
c002677b:	c3                   	ret    

c002677c <PIT::open(int, int, void*)>:
c002677c:	83 ec 0c             	sub    esp,0xc
c002677f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026783:	8b 00                	mov    eax,DWORD PTR [eax]
c0026785:	83 c0 24             	add    eax,0x24
c0026788:	8b 00                	mov    eax,DWORD PTR [eax]
c002678a:	83 ec 08             	sub    esp,0x8
c002678d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026791:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026795:	ff d0                	call   eax
c0026797:	83 c4 10             	add    esp,0x10
c002679a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002679e:	83 ec 0c             	sub    esp,0xc
c00267a1:	6a 00                	push   0x0
c00267a3:	6a 01                	push   0x1
c00267a5:	68 50 67 02 c0       	push   0xc0026750
c00267aa:	6a 00                	push   0x0
c00267ac:	50                   	push   eax
c00267ad:	e8 80 d4 fe ff       	call   c0013c32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00267b2:	83 c4 20             	add    esp,0x20
c00267b5:	89 c2                	mov    edx,eax
c00267b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267bb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00267c1:	b8 00 00 00 00       	mov    eax,0x0
c00267c6:	83 c4 0c             	add    esp,0xc
c00267c9:	c3                   	ret    

c00267ca <PIT::close(int, int, void*)>:
c00267ca:	83 ec 0c             	sub    esp,0xc
c00267cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267d1:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00267db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267df:	6a 01                	push   0x1
c00267e1:	68 50 67 02 c0       	push   0xc0026750
c00267e6:	6a 00                	push   0x0
c00267e8:	50                   	push   eax
c00267e9:	e8 8e d4 fe ff       	call   c0013c7c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00267ee:	83 c4 10             	add    esp,0x10
c00267f1:	b8 00 00 00 00       	mov    eax,0x0
c00267f6:	83 c4 0c             	add    esp,0xc
c00267f9:	c3                   	ret    

c00267fa <PIT::PIT()>:
c00267fa:	83 ec 0c             	sub    esp,0xc
c00267fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026801:	83 ec 08             	sub    esp,0x8
c0026804:	68 08 d1 02 c0       	push   0xc002d108
c0026809:	50                   	push   eax
c002680a:	e8 e7 fe fe ff       	call   c00166f6 <Timer::Timer(char const*)>
c002680f:	83 c4 10             	add    esp,0x10
c0026812:	ba 30 d1 02 c0       	mov    edx,0xc002d130
c0026817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002681b:	89 10                	mov    DWORD PTR [eax],edx
c002681d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026821:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026827:	0f b6 d0             	movzx  edx,al
c002682a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002682e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026839:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002683f:	0f b6 d0             	movzx  edx,al
c0026842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026846:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002684b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002684f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026855:	8d 50 01             	lea    edx,[eax+0x1]
c0026858:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002685c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026862:	0f b6 d0             	movzx  edx,al
c0026865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026869:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002686d:	83 e1 3f             	and    ecx,0x3f
c0026870:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026874:	90                   	nop
c0026875:	83 c4 0c             	add    esp,0xc
c0026878:	c3                   	ret    
c0026879:	66 90                	xchg   ax,ax
c002687b:	66 90                	xchg   ax,ax
c002687d:	66 90                	xchg   ax,ax
c002687f:	90                   	nop

c0026880 <avxDetect>:
c0026880:	b8 00 00 00 00       	mov    eax,0x0
c0026885:	c3                   	ret    

c0026886 <avxSave>:
c0026886:	c3                   	ret    

c0026887 <avxLoad>:
c0026887:	c3                   	ret    

c0026888 <avxInit>:
c0026888:	c3                   	ret    

c0026889 <avxClose>:
c0026889:	c3                   	ret    

c002688a <wouldSheSayYes>:
c002688a:	c3                   	ret    
c002688b:	49                   	dec    ecx
c002688c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026890:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026894:	75 20                	jne    c00268b6 <sseDetect.noSSE+0x1>
c0026896:	4e                   	dec    esi
c0026897:	79 61                	jns    c00268fa <x87Detect+0x14>
c0026899:	68 2e 2e 2e 00       	push   0x2e2e2e
c002689e:	66 90                	xchg   ax,ax

c00268a0 <absolutelyNoChanceInHell>:
c00268a0:	b8 01 00 00 00       	mov    eax,0x1
c00268a5:	0f a2                	cpuid  
c00268a7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00268ad:	74 06                	je     c00268b5 <sseDetect.noSSE>
c00268af:	b8 01 00 00 00       	mov    eax,0x1
c00268b4:	c3                   	ret    

c00268b5 <sseDetect.noSSE>:
c00268b5:	31 c0                	xor    eax,eax
c00268b7:	c3                   	ret    

c00268b8 <sseSave>:
c00268b8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00268bd:	c3                   	ret    

c00268be <sseLoad>:
c00268be:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00268c3:	c3                   	ret    

c00268c4 <sseInit>:
c00268c4:	e8 49 00 00 00       	call   c0026912 <x87Init>
c00268c9:	0f 20 e0             	mov    eax,cr4
c00268cc:	66 0d 00 06          	or     ax,0x600
c00268d0:	0f 22 e0             	mov    cr4,eax
c00268d3:	c3                   	ret    

c00268d4 <sseClose>:
c00268d4:	c3                   	ret    
c00268d5:	66 90                	xchg   ax,ax
c00268d7:	66 90                	xchg   ax,ax
c00268d9:	66 90                	xchg   ax,ax
c00268db:	66 90                	xchg   ax,ax
c00268dd:	66 90                	xchg   ax,ax
c00268df:	90                   	nop

c00268e0 <value_37F>:
c00268e0:	7f 03                	jg     c00268e5 <value_37A+0x1>

c00268e2 <value_37E>:
c00268e2:	7e 03                	jle    c00268e7 <x87Detect+0x1>

c00268e4 <value_37A>:
c00268e4:	7a 03                	jp     c00268e9 <x87Detect+0x3>

c00268e6 <x87Detect>:
c00268e6:	b8 01 00 00 00       	mov    eax,0x1
c00268eb:	0f a2                	cpuid  
c00268ed:	f7 c2 01 00 00 00    	test   edx,0x1
c00268f3:	74 06                	je     c00268fb <x87Detect.nox87>
c00268f5:	b8 01 00 00 00       	mov    eax,0x1
c00268fa:	c3                   	ret    

c00268fb <x87Detect.nox87>:
c00268fb:	b8 00 00 00 00       	mov    eax,0x0
c0026900:	c3                   	ret    

c0026901 <x87Save>:
c0026901:	55                   	push   ebp
c0026902:	89 e5                	mov    ebp,esp
c0026904:	9b dd 75 08          	fsave  [ebp+0x8]
c0026908:	c9                   	leave  
c0026909:	c3                   	ret    

c002690a <x87Load>:
c002690a:	55                   	push   ebp
c002690b:	89 e5                	mov    ebp,esp
c002690d:	dd 65 08             	frstor [ebp+0x8]
c0026910:	c9                   	leave  
c0026911:	c3                   	ret    

c0026912 <x87Init>:
c0026912:	9b db e3             	finit  
c0026915:	0f 20 c0             	mov    eax,cr0
c0026918:	66 25 fb ff          	and    ax,0xfffb
c002691c:	66 0d 22 00          	or     ax,0x22
c0026920:	0f 22 c0             	mov    cr0,eax
c0026923:	0f 06                	clts   
c0026925:	d9 2d e4 68 02 c0    	fldcw  WORD PTR ds:0xc00268e4
c002692b:	c3                   	ret    

c002692c <x87Close>:
c002692c:	c3                   	ret    
c002692d:	66 90                	xchg   ax,ax
c002692f:	90                   	nop

c0026930 <__do_global_ctors_aux>:
c0026930:	a1 24 95 02 c0       	mov    eax,ds:0xc0029524
c0026935:	83 f8 ff             	cmp    eax,0xffffffff
c0026938:	74 1a                	je     c0026954 <__do_global_ctors_aux+0x24>
c002693a:	55                   	push   ebp
c002693b:	89 e5                	mov    ebp,esp
c002693d:	53                   	push   ebx
c002693e:	52                   	push   edx
c002693f:	bb 24 95 02 c0       	mov    ebx,0xc0029524
c0026944:	ff d0                	call   eax
c0026946:	83 eb 04             	sub    ebx,0x4
c0026949:	8b 03                	mov    eax,DWORD PTR [ebx]
c002694b:	83 f8 ff             	cmp    eax,0xffffffff
c002694e:	75 f4                	jne    c0026944 <__do_global_ctors_aux+0x14>
c0026950:	58                   	pop    eax
c0026951:	5b                   	pop    ebx
c0026952:	5d                   	pop    ebp
c0026953:	c3                   	ret    
c0026954:	c3                   	ret    
c0026955:	66 90                	xchg   ax,ax
c0026957:	90                   	nop

c0026958 <__divdi3>:
c0026958:	55                   	push   ebp
c0026959:	57                   	push   edi
c002695a:	56                   	push   esi
c002695b:	53                   	push   ebx
c002695c:	83 ec 1c             	sub    esp,0x1c
c002695f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026963:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026967:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002696a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002696e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026972:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026976:	85 db                	test   ebx,ebx
c0026978:	0f 88 8e 00 00 00    	js     c0026a0c <__divdi3+0xb4>
c002697e:	89 dd                	mov    ebp,ebx
c0026980:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026988:	89 d3                	mov    ebx,edx
c002698a:	85 d2                	test   edx,edx
c002698c:	79 0d                	jns    c002699b <__divdi3+0x43>
c002698e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026992:	f7 d8                	neg    eax
c0026994:	83 d2 00             	adc    edx,0x0
c0026997:	f7 da                	neg    edx
c0026999:	89 d3                	mov    ebx,edx
c002699b:	89 c7                	mov    edi,eax
c002699d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00269a0:	85 db                	test   ebx,ebx
c00269a2:	75 48                	jne    c00269ec <__divdi3+0x94>
c00269a4:	39 ef                	cmp    edi,ebp
c00269a6:	76 24                	jbe    c00269cc <__divdi3+0x74>
c00269a8:	89 ea                	mov    edx,ebp
c00269aa:	f7 f7                	div    edi
c00269ac:	89 c1                	mov    ecx,eax
c00269ae:	31 f6                	xor    esi,esi
c00269b0:	89 c8                	mov    eax,ecx
c00269b2:	89 f2                	mov    edx,esi
c00269b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00269b8:	85 c9                	test   ecx,ecx
c00269ba:	74 07                	je     c00269c3 <__divdi3+0x6b>
c00269bc:	f7 d8                	neg    eax
c00269be:	83 d2 00             	adc    edx,0x0
c00269c1:	f7 da                	neg    edx
c00269c3:	83 c4 1c             	add    esp,0x1c
c00269c6:	5b                   	pop    ebx
c00269c7:	5e                   	pop    esi
c00269c8:	5f                   	pop    edi
c00269c9:	5d                   	pop    ebp
c00269ca:	c3                   	ret    
c00269cb:	90                   	nop
c00269cc:	85 ff                	test   edi,edi
c00269ce:	75 0b                	jne    c00269db <__divdi3+0x83>
c00269d0:	b8 01 00 00 00       	mov    eax,0x1
c00269d5:	31 d2                	xor    edx,edx
c00269d7:	f7 f3                	div    ebx
c00269d9:	89 c7                	mov    edi,eax
c00269db:	31 d2                	xor    edx,edx
c00269dd:	89 e8                	mov    eax,ebp
c00269df:	f7 f7                	div    edi
c00269e1:	89 c6                	mov    esi,eax
c00269e3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00269e6:	f7 f7                	div    edi
c00269e8:	89 c1                	mov    ecx,eax
c00269ea:	eb c4                	jmp    c00269b0 <__divdi3+0x58>
c00269ec:	39 eb                	cmp    ebx,ebp
c00269ee:	77 3c                	ja     c0026a2c <__divdi3+0xd4>
c00269f0:	0f bd f3             	bsr    esi,ebx
c00269f3:	83 f6 1f             	xor    esi,0x1f
c00269f6:	75 40                	jne    c0026a38 <__divdi3+0xe0>
c00269f8:	39 eb                	cmp    ebx,ebp
c00269fa:	72 09                	jb     c0026a05 <__divdi3+0xad>
c00269fc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00269ff:	0f 87 97 00 00 00    	ja     c0026a9c <__divdi3+0x144>
c0026a05:	b9 01 00 00 00       	mov    ecx,0x1
c0026a0a:	eb a4                	jmp    c00269b0 <__divdi3+0x58>
c0026a0c:	f7 d9                	neg    ecx
c0026a0e:	83 d3 00             	adc    ebx,0x0
c0026a11:	f7 db                	neg    ebx
c0026a13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026a16:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026a1a:	89 dd                	mov    ebp,ebx
c0026a1c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026a24:	e9 5f ff ff ff       	jmp    c0026988 <__divdi3+0x30>
c0026a29:	8d 76 00             	lea    esi,[esi+0x0]
c0026a2c:	31 f6                	xor    esi,esi
c0026a2e:	31 c9                	xor    ecx,ecx
c0026a30:	e9 7b ff ff ff       	jmp    c00269b0 <__divdi3+0x58>
c0026a35:	8d 76 00             	lea    esi,[esi+0x0]
c0026a38:	b8 20 00 00 00       	mov    eax,0x20
c0026a3d:	29 f0                	sub    eax,esi
c0026a3f:	89 f1                	mov    ecx,esi
c0026a41:	d3 e3                	shl    ebx,cl
c0026a43:	89 fa                	mov    edx,edi
c0026a45:	88 c1                	mov    cl,al
c0026a47:	d3 ea                	shr    edx,cl
c0026a49:	09 da                	or     edx,ebx
c0026a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026a4f:	89 f1                	mov    ecx,esi
c0026a51:	d3 e7                	shl    edi,cl
c0026a53:	89 eb                	mov    ebx,ebp
c0026a55:	88 c1                	mov    cl,al
c0026a57:	d3 eb                	shr    ebx,cl
c0026a59:	89 f1                	mov    ecx,esi
c0026a5b:	d3 e5                	shl    ebp,cl
c0026a5d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026a60:	88 c1                	mov    cl,al
c0026a62:	d3 ea                	shr    edx,cl
c0026a64:	09 d5                	or     ebp,edx
c0026a66:	89 e8                	mov    eax,ebp
c0026a68:	89 da                	mov    edx,ebx
c0026a6a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026a6e:	89 d3                	mov    ebx,edx
c0026a70:	89 c5                	mov    ebp,eax
c0026a72:	f7 e7                	mul    edi
c0026a74:	39 d3                	cmp    ebx,edx
c0026a76:	72 18                	jb     c0026a90 <__divdi3+0x138>
c0026a78:	74 0a                	je     c0026a84 <__divdi3+0x12c>
c0026a7a:	89 e9                	mov    ecx,ebp
c0026a7c:	31 f6                	xor    esi,esi
c0026a7e:	e9 2d ff ff ff       	jmp    c00269b0 <__divdi3+0x58>
c0026a83:	90                   	nop
c0026a84:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026a87:	89 f1                	mov    ecx,esi
c0026a89:	d3 e7                	shl    edi,cl
c0026a8b:	39 c7                	cmp    edi,eax
c0026a8d:	73 eb                	jae    c0026a7a <__divdi3+0x122>
c0026a8f:	90                   	nop
c0026a90:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026a93:	31 f6                	xor    esi,esi
c0026a95:	e9 16 ff ff ff       	jmp    c00269b0 <__divdi3+0x58>
c0026a9a:	66 90                	xchg   ax,ax
c0026a9c:	31 c9                	xor    ecx,ecx
c0026a9e:	e9 0d ff ff ff       	jmp    c00269b0 <__divdi3+0x58>
c0026aa3:	90                   	nop

c0026aa4 <__moddi3>:
c0026aa4:	55                   	push   ebp
c0026aa5:	57                   	push   edi
c0026aa6:	56                   	push   esi
c0026aa7:	53                   	push   ebx
c0026aa8:	83 ec 2c             	sub    esp,0x2c
c0026aab:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026aaf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026ab3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026ab7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026abb:	85 db                	test   ebx,ebx
c0026abd:	0f 88 85 00 00 00    	js     c0026b48 <__moddi3+0xa4>
c0026ac3:	89 de                	mov    esi,ebx
c0026ac5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026acd:	89 d7                	mov    edi,edx
c0026acf:	85 d2                	test   edx,edx
c0026ad1:	79 09                	jns    c0026adc <__moddi3+0x38>
c0026ad3:	f7 d8                	neg    eax
c0026ad5:	83 d2 00             	adc    edx,0x0
c0026ad8:	f7 da                	neg    edx
c0026ada:	89 d7                	mov    edi,edx
c0026adc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ae0:	89 cd                	mov    ebp,ecx
c0026ae2:	85 ff                	test   edi,edi
c0026ae4:	75 52                	jne    c0026b38 <__moddi3+0x94>
c0026ae6:	89 c3                	mov    ebx,eax
c0026ae8:	39 f0                	cmp    eax,esi
c0026aea:	76 24                	jbe    c0026b10 <__moddi3+0x6c>
c0026aec:	89 c8                	mov    eax,ecx
c0026aee:	89 f2                	mov    edx,esi
c0026af0:	f7 f3                	div    ebx
c0026af2:	89 d6                	mov    esi,edx
c0026af4:	89 f0                	mov    eax,esi
c0026af6:	31 d2                	xor    edx,edx
c0026af8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026afc:	85 c9                	test   ecx,ecx
c0026afe:	74 07                	je     c0026b07 <__moddi3+0x63>
c0026b00:	f7 d8                	neg    eax
c0026b02:	83 d2 00             	adc    edx,0x0
c0026b05:	f7 da                	neg    edx
c0026b07:	83 c4 2c             	add    esp,0x2c
c0026b0a:	5b                   	pop    ebx
c0026b0b:	5e                   	pop    esi
c0026b0c:	5f                   	pop    edi
c0026b0d:	5d                   	pop    ebp
c0026b0e:	c3                   	ret    
c0026b0f:	90                   	nop
c0026b10:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026b14:	85 db                	test   ebx,ebx
c0026b16:	75 0d                	jne    c0026b25 <__moddi3+0x81>
c0026b18:	b8 01 00 00 00       	mov    eax,0x1
c0026b1d:	31 d2                	xor    edx,edx
c0026b1f:	f7 f7                	div    edi
c0026b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b25:	89 f0                	mov    eax,esi
c0026b27:	31 d2                	xor    edx,edx
c0026b29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026b2d:	f7 f7                	div    edi
c0026b2f:	89 e8                	mov    eax,ebp
c0026b31:	f7 f7                	div    edi
c0026b33:	89 d6                	mov    esi,edx
c0026b35:	eb bd                	jmp    c0026af4 <__moddi3+0x50>
c0026b37:	90                   	nop
c0026b38:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026b3c:	39 f7                	cmp    edi,esi
c0026b3e:	76 20                	jbe    c0026b60 <__moddi3+0xbc>
c0026b40:	89 c8                	mov    eax,ecx
c0026b42:	89 f2                	mov    edx,esi
c0026b44:	eb b2                	jmp    c0026af8 <__moddi3+0x54>
c0026b46:	66 90                	xchg   ax,ax
c0026b48:	f7 d9                	neg    ecx
c0026b4a:	83 d3 00             	adc    ebx,0x0
c0026b4d:	f7 db                	neg    ebx
c0026b4f:	89 de                	mov    esi,ebx
c0026b51:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026b59:	e9 6f ff ff ff       	jmp    c0026acd <__moddi3+0x29>
c0026b5e:	66 90                	xchg   ax,ax
c0026b60:	0f bd c7             	bsr    eax,edi
c0026b63:	83 f0 1f             	xor    eax,0x1f
c0026b66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026b6a:	75 24                	jne    c0026b90 <__moddi3+0xec>
c0026b6c:	39 f7                	cmp    edi,esi
c0026b6e:	72 06                	jb     c0026b76 <__moddi3+0xd2>
c0026b70:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026b74:	77 0c                	ja     c0026b82 <__moddi3+0xde>
c0026b76:	89 e9                	mov    ecx,ebp
c0026b78:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026b7c:	19 fe                	sbb    esi,edi
c0026b7e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026b82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026b86:	89 f2                	mov    edx,esi
c0026b88:	e9 6b ff ff ff       	jmp    c0026af8 <__moddi3+0x54>
c0026b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b90:	b8 20 00 00 00       	mov    eax,0x20
c0026b95:	89 c2                	mov    edx,eax
c0026b97:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026b9b:	29 da                	sub    edx,ebx
c0026b9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026ba1:	88 d9                	mov    cl,bl
c0026ba3:	d3 e7                	shl    edi,cl
c0026ba5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026ba9:	88 d1                	mov    cl,dl
c0026bab:	d3 e8                	shr    eax,cl
c0026bad:	09 c7                	or     edi,eax
c0026baf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026bb3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026bb7:	89 d8                	mov    eax,ebx
c0026bb9:	88 d9                	mov    cl,bl
c0026bbb:	d3 e7                	shl    edi,cl
c0026bbd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026bc1:	89 f3                	mov    ebx,esi
c0026bc3:	88 d1                	mov    cl,dl
c0026bc5:	d3 eb                	shr    ebx,cl
c0026bc7:	89 c7                	mov    edi,eax
c0026bc9:	88 c1                	mov    cl,al
c0026bcb:	d3 e6                	shl    esi,cl
c0026bcd:	89 e8                	mov    eax,ebp
c0026bcf:	88 d1                	mov    cl,dl
c0026bd1:	d3 e8                	shr    eax,cl
c0026bd3:	09 f0                	or     eax,esi
c0026bd5:	89 f9                	mov    ecx,edi
c0026bd7:	d3 e5                	shl    ebp,cl
c0026bd9:	89 da                	mov    edx,ebx
c0026bdb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026bdf:	89 d3                	mov    ebx,edx
c0026be1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026be5:	89 c6                	mov    esi,eax
c0026be7:	89 d1                	mov    ecx,edx
c0026be9:	39 d3                	cmp    ebx,edx
c0026beb:	72 27                	jb     c0026c14 <__moddi3+0x170>
c0026bed:	74 21                	je     c0026c10 <__moddi3+0x16c>
c0026bef:	29 f5                	sub    ebp,esi
c0026bf1:	19 cb                	sbb    ebx,ecx
c0026bf3:	89 de                	mov    esi,ebx
c0026bf5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026bf9:	d3 e6                	shl    esi,cl
c0026bfb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026bff:	89 f9                	mov    ecx,edi
c0026c01:	d3 ed                	shr    ebp,cl
c0026c03:	09 ee                	or     esi,ebp
c0026c05:	89 f0                	mov    eax,esi
c0026c07:	d3 eb                	shr    ebx,cl
c0026c09:	89 da                	mov    edx,ebx
c0026c0b:	e9 e8 fe ff ff       	jmp    c0026af8 <__moddi3+0x54>
c0026c10:	39 c5                	cmp    ebp,eax
c0026c12:	73 db                	jae    c0026bef <__moddi3+0x14b>
c0026c14:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c18:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026c1c:	89 d1                	mov    ecx,edx
c0026c1e:	89 c6                	mov    esi,eax
c0026c20:	eb cd                	jmp    c0026bef <__moddi3+0x14b>
c0026c22:	66 90                	xchg   ax,ax

c0026c24 <__udivdi3>:
c0026c24:	55                   	push   ebp
c0026c25:	57                   	push   edi
c0026c26:	56                   	push   esi
c0026c27:	53                   	push   ebx
c0026c28:	83 ec 1c             	sub    esp,0x1c
c0026c2b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026c2f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026c33:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026c37:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026c3b:	85 d2                	test   edx,edx
c0026c3d:	75 41                	jne    c0026c80 <__udivdi3+0x5c>
c0026c3f:	39 f7                	cmp    edi,esi
c0026c41:	76 15                	jbe    c0026c58 <__udivdi3+0x34>
c0026c43:	89 e8                	mov    eax,ebp
c0026c45:	89 f2                	mov    edx,esi
c0026c47:	f7 f7                	div    edi
c0026c49:	31 db                	xor    ebx,ebx
c0026c4b:	89 da                	mov    edx,ebx
c0026c4d:	83 c4 1c             	add    esp,0x1c
c0026c50:	5b                   	pop    ebx
c0026c51:	5e                   	pop    esi
c0026c52:	5f                   	pop    edi
c0026c53:	5d                   	pop    ebp
c0026c54:	c3                   	ret    
c0026c55:	8d 76 00             	lea    esi,[esi+0x0]
c0026c58:	89 f9                	mov    ecx,edi
c0026c5a:	85 ff                	test   edi,edi
c0026c5c:	75 0b                	jne    c0026c69 <__udivdi3+0x45>
c0026c5e:	b8 01 00 00 00       	mov    eax,0x1
c0026c63:	31 d2                	xor    edx,edx
c0026c65:	f7 f7                	div    edi
c0026c67:	89 c1                	mov    ecx,eax
c0026c69:	31 d2                	xor    edx,edx
c0026c6b:	89 f0                	mov    eax,esi
c0026c6d:	f7 f1                	div    ecx
c0026c6f:	89 c3                	mov    ebx,eax
c0026c71:	89 e8                	mov    eax,ebp
c0026c73:	f7 f1                	div    ecx
c0026c75:	89 da                	mov    edx,ebx
c0026c77:	83 c4 1c             	add    esp,0x1c
c0026c7a:	5b                   	pop    ebx
c0026c7b:	5e                   	pop    esi
c0026c7c:	5f                   	pop    edi
c0026c7d:	5d                   	pop    ebp
c0026c7e:	c3                   	ret    
c0026c7f:	90                   	nop
c0026c80:	39 f2                	cmp    edx,esi
c0026c82:	77 1c                	ja     c0026ca0 <__udivdi3+0x7c>
c0026c84:	0f bd da             	bsr    ebx,edx
c0026c87:	83 f3 1f             	xor    ebx,0x1f
c0026c8a:	75 24                	jne    c0026cb0 <__udivdi3+0x8c>
c0026c8c:	39 f2                	cmp    edx,esi
c0026c8e:	72 08                	jb     c0026c98 <__udivdi3+0x74>
c0026c90:	39 ef                	cmp    edi,ebp
c0026c92:	0f 87 84 00 00 00    	ja     c0026d1c <__udivdi3+0xf8>
c0026c98:	b8 01 00 00 00       	mov    eax,0x1
c0026c9d:	eb ac                	jmp    c0026c4b <__udivdi3+0x27>
c0026c9f:	90                   	nop
c0026ca0:	31 db                	xor    ebx,ebx
c0026ca2:	31 c0                	xor    eax,eax
c0026ca4:	89 da                	mov    edx,ebx
c0026ca6:	83 c4 1c             	add    esp,0x1c
c0026ca9:	5b                   	pop    ebx
c0026caa:	5e                   	pop    esi
c0026cab:	5f                   	pop    edi
c0026cac:	5d                   	pop    ebp
c0026cad:	c3                   	ret    
c0026cae:	66 90                	xchg   ax,ax
c0026cb0:	b8 20 00 00 00       	mov    eax,0x20
c0026cb5:	29 d8                	sub    eax,ebx
c0026cb7:	88 d9                	mov    cl,bl
c0026cb9:	d3 e2                	shl    edx,cl
c0026cbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026cbf:	89 fa                	mov    edx,edi
c0026cc1:	88 c1                	mov    cl,al
c0026cc3:	d3 ea                	shr    edx,cl
c0026cc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026cc9:	09 d1                	or     ecx,edx
c0026ccb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026ccf:	88 d9                	mov    cl,bl
c0026cd1:	d3 e7                	shl    edi,cl
c0026cd3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026cd7:	89 f7                	mov    edi,esi
c0026cd9:	88 c1                	mov    cl,al
c0026cdb:	d3 ef                	shr    edi,cl
c0026cdd:	88 d9                	mov    cl,bl
c0026cdf:	d3 e6                	shl    esi,cl
c0026ce1:	89 ea                	mov    edx,ebp
c0026ce3:	88 c1                	mov    cl,al
c0026ce5:	d3 ea                	shr    edx,cl
c0026ce7:	09 d6                	or     esi,edx
c0026ce9:	89 f0                	mov    eax,esi
c0026ceb:	89 fa                	mov    edx,edi
c0026ced:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026cf1:	89 d7                	mov    edi,edx
c0026cf3:	89 c6                	mov    esi,eax
c0026cf5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026cf9:	39 d7                	cmp    edi,edx
c0026cfb:	72 13                	jb     c0026d10 <__udivdi3+0xec>
c0026cfd:	74 09                	je     c0026d08 <__udivdi3+0xe4>
c0026cff:	89 f0                	mov    eax,esi
c0026d01:	31 db                	xor    ebx,ebx
c0026d03:	e9 43 ff ff ff       	jmp    c0026c4b <__udivdi3+0x27>
c0026d08:	88 d9                	mov    cl,bl
c0026d0a:	d3 e5                	shl    ebp,cl
c0026d0c:	39 c5                	cmp    ebp,eax
c0026d0e:	73 ef                	jae    c0026cff <__udivdi3+0xdb>
c0026d10:	8d 46 ff             	lea    eax,[esi-0x1]
c0026d13:	31 db                	xor    ebx,ebx
c0026d15:	e9 31 ff ff ff       	jmp    c0026c4b <__udivdi3+0x27>
c0026d1a:	66 90                	xchg   ax,ax
c0026d1c:	31 c0                	xor    eax,eax
c0026d1e:	e9 28 ff ff ff       	jmp    c0026c4b <__udivdi3+0x27>
c0026d23:	90                   	nop

c0026d24 <__umoddi3>:
c0026d24:	55                   	push   ebp
c0026d25:	57                   	push   edi
c0026d26:	56                   	push   esi
c0026d27:	53                   	push   ebx
c0026d28:	83 ec 1c             	sub    esp,0x1c
c0026d2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026d2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026d33:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026d37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026d3b:	89 da                	mov    edx,ebx
c0026d3d:	85 c0                	test   eax,eax
c0026d3f:	75 37                	jne    c0026d78 <__umoddi3+0x54>
c0026d41:	39 df                	cmp    edi,ebx
c0026d43:	76 13                	jbe    c0026d58 <__umoddi3+0x34>
c0026d45:	89 f0                	mov    eax,esi
c0026d47:	f7 f7                	div    edi
c0026d49:	89 d0                	mov    eax,edx
c0026d4b:	31 d2                	xor    edx,edx
c0026d4d:	83 c4 1c             	add    esp,0x1c
c0026d50:	5b                   	pop    ebx
c0026d51:	5e                   	pop    esi
c0026d52:	5f                   	pop    edi
c0026d53:	5d                   	pop    ebp
c0026d54:	c3                   	ret    
c0026d55:	8d 76 00             	lea    esi,[esi+0x0]
c0026d58:	89 fd                	mov    ebp,edi
c0026d5a:	85 ff                	test   edi,edi
c0026d5c:	75 0b                	jne    c0026d69 <__umoddi3+0x45>
c0026d5e:	b8 01 00 00 00       	mov    eax,0x1
c0026d63:	31 d2                	xor    edx,edx
c0026d65:	f7 f7                	div    edi
c0026d67:	89 c5                	mov    ebp,eax
c0026d69:	89 d8                	mov    eax,ebx
c0026d6b:	31 d2                	xor    edx,edx
c0026d6d:	f7 f5                	div    ebp
c0026d6f:	89 f0                	mov    eax,esi
c0026d71:	f7 f5                	div    ebp
c0026d73:	89 d0                	mov    eax,edx
c0026d75:	eb d4                	jmp    c0026d4b <__umoddi3+0x27>
c0026d77:	90                   	nop
c0026d78:	89 f1                	mov    ecx,esi
c0026d7a:	39 d8                	cmp    eax,ebx
c0026d7c:	76 0a                	jbe    c0026d88 <__umoddi3+0x64>
c0026d7e:	89 f0                	mov    eax,esi
c0026d80:	83 c4 1c             	add    esp,0x1c
c0026d83:	5b                   	pop    ebx
c0026d84:	5e                   	pop    esi
c0026d85:	5f                   	pop    edi
c0026d86:	5d                   	pop    ebp
c0026d87:	c3                   	ret    
c0026d88:	0f bd e8             	bsr    ebp,eax
c0026d8b:	83 f5 1f             	xor    ebp,0x1f
c0026d8e:	75 1c                	jne    c0026dac <__umoddi3+0x88>
c0026d90:	39 d8                	cmp    eax,ebx
c0026d92:	72 04                	jb     c0026d98 <__umoddi3+0x74>
c0026d94:	39 f7                	cmp    edi,esi
c0026d96:	77 08                	ja     c0026da0 <__umoddi3+0x7c>
c0026d98:	89 da                	mov    edx,ebx
c0026d9a:	29 fe                	sub    esi,edi
c0026d9c:	19 c2                	sbb    edx,eax
c0026d9e:	89 f1                	mov    ecx,esi
c0026da0:	89 c8                	mov    eax,ecx
c0026da2:	83 c4 1c             	add    esp,0x1c
c0026da5:	5b                   	pop    ebx
c0026da6:	5e                   	pop    esi
c0026da7:	5f                   	pop    edi
c0026da8:	5d                   	pop    ebp
c0026da9:	c3                   	ret    
c0026daa:	66 90                	xchg   ax,ax
c0026dac:	ba 20 00 00 00       	mov    edx,0x20
c0026db1:	29 ea                	sub    edx,ebp
c0026db3:	89 e9                	mov    ecx,ebp
c0026db5:	d3 e0                	shl    eax,cl
c0026db7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026dbb:	89 f8                	mov    eax,edi
c0026dbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026dc1:	88 d1                	mov    cl,dl
c0026dc3:	d3 e8                	shr    eax,cl
c0026dc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026dc9:	09 c1                	or     ecx,eax
c0026dcb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026dcf:	89 e9                	mov    ecx,ebp
c0026dd1:	d3 e7                	shl    edi,cl
c0026dd3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026dd7:	89 d8                	mov    eax,ebx
c0026dd9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026ddd:	88 d1                	mov    cl,dl
c0026ddf:	d3 e8                	shr    eax,cl
c0026de1:	89 c7                	mov    edi,eax
c0026de3:	89 e9                	mov    ecx,ebp
c0026de5:	d3 e3                	shl    ebx,cl
c0026de7:	89 f0                	mov    eax,esi
c0026de9:	88 d1                	mov    cl,dl
c0026deb:	d3 e8                	shr    eax,cl
c0026ded:	09 d8                	or     eax,ebx
c0026def:	89 e9                	mov    ecx,ebp
c0026df1:	d3 e6                	shl    esi,cl
c0026df3:	89 f3                	mov    ebx,esi
c0026df5:	89 fa                	mov    edx,edi
c0026df7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026dfb:	89 d1                	mov    ecx,edx
c0026dfd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026e01:	89 c6                	mov    esi,eax
c0026e03:	89 d7                	mov    edi,edx
c0026e05:	39 d1                	cmp    ecx,edx
c0026e07:	72 27                	jb     c0026e30 <__umoddi3+0x10c>
c0026e09:	74 21                	je     c0026e2c <__umoddi3+0x108>
c0026e0b:	89 ca                	mov    edx,ecx
c0026e0d:	29 f3                	sub    ebx,esi
c0026e0f:	19 fa                	sbb    edx,edi
c0026e11:	89 d0                	mov    eax,edx
c0026e13:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026e17:	d3 e0                	shl    eax,cl
c0026e19:	89 e9                	mov    ecx,ebp
c0026e1b:	d3 eb                	shr    ebx,cl
c0026e1d:	09 d8                	or     eax,ebx
c0026e1f:	d3 ea                	shr    edx,cl
c0026e21:	83 c4 1c             	add    esp,0x1c
c0026e24:	5b                   	pop    ebx
c0026e25:	5e                   	pop    esi
c0026e26:	5f                   	pop    edi
c0026e27:	5d                   	pop    ebp
c0026e28:	c3                   	ret    
c0026e29:	8d 76 00             	lea    esi,[esi+0x0]
c0026e2c:	39 c3                	cmp    ebx,eax
c0026e2e:	73 db                	jae    c0026e0b <__umoddi3+0xe7>
c0026e30:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026e34:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026e38:	89 d7                	mov    edi,edx
c0026e3a:	89 c6                	mov    esi,eax
c0026e3c:	eb cd                	jmp    c0026e0b <__umoddi3+0xe7>

c0026e3e <__addsf3>:
c0026e3e:	55                   	push   ebp
c0026e3f:	89 e5                	mov    ebp,esp
c0026e41:	57                   	push   edi
c0026e42:	56                   	push   esi
c0026e43:	53                   	push   ebx
c0026e44:	83 ec 08             	sub    esp,0x8
c0026e47:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026e4a:	89 fa                	mov    edx,edi
c0026e4c:	89 f8                	mov    eax,edi
c0026e4e:	c1 f8 17             	sar    eax,0x17
c0026e51:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026e54:	c1 e2 08             	shl    edx,0x8
c0026e57:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026e5d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e60:	89 de                	mov    esi,ebx
c0026e62:	c1 fe 17             	sar    esi,0x17
c0026e65:	c1 e3 08             	shl    ebx,0x8
c0026e68:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026e6e:	31 f0                	xor    eax,esi
c0026e70:	0f 88 3b 01 00 00    	js     c0026fb1 <__addsf3+0x173>
c0026e76:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026e79:	29 f1                	sub    ecx,esi
c0026e7b:	85 c9                	test   ecx,ecx
c0026e7d:	7e 54                	jle    c0026ed3 <__addsf3+0x95>
c0026e7f:	89 f0                	mov    eax,esi
c0026e81:	84 c0                	test   al,al
c0026e83:	75 10                	jne    c0026e95 <__addsf3+0x57>
c0026e85:	85 db                	test   ebx,ebx
c0026e87:	0f 84 aa 02 00 00    	je     c0027137 <__addsf3+0x2f9>
c0026e8d:	49                   	dec    ecx
c0026e8e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026e91:	74 38                	je     c0026ecb <__addsf3+0x8d>
c0026e93:	eb 13                	jmp    c0026ea8 <__addsf3+0x6a>
c0026e95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e98:	f7 d0                	not    eax
c0026e9a:	84 c0                	test   al,al
c0026e9c:	0f 84 95 02 00 00    	je     c0027137 <__addsf3+0x2f9>
c0026ea2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ea8:	83 f9 1f             	cmp    ecx,0x1f
c0026eab:	0f 8f 86 02 00 00    	jg     c0027137 <__addsf3+0x2f9>
c0026eb1:	89 de                	mov    esi,ebx
c0026eb3:	d3 ee                	shr    esi,cl
c0026eb5:	b8 20 00 00 00       	mov    eax,0x20
c0026eba:	29 c8                	sub    eax,ecx
c0026ebc:	89 c1                	mov    ecx,eax
c0026ebe:	d3 e3                	shl    ebx,cl
c0026ec0:	31 c0                	xor    eax,eax
c0026ec2:	85 db                	test   ebx,ebx
c0026ec4:	0f 95 c0             	setne  al
c0026ec7:	09 f0                	or     eax,esi
c0026ec9:	01 d0                	add    eax,edx
c0026ecb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ece:	e9 b6 00 00 00       	jmp    c0026f89 <__addsf3+0x14b>
c0026ed3:	74 5c                	je     c0026f31 <__addsf3+0xf3>
c0026ed5:	89 f1                	mov    ecx,esi
c0026ed7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026eda:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026edd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ee1:	75 14                	jne    c0026ef7 <__addsf3+0xb9>
c0026ee3:	85 d2                	test   edx,edx
c0026ee5:	0f 84 4c 02 00 00    	je     c0027137 <__addsf3+0x2f9>
c0026eeb:	49                   	dec    ecx
c0026eec:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026eef:	0f 84 94 00 00 00    	je     c0026f89 <__addsf3+0x14b>
c0026ef5:	eb 12                	jmp    c0026f09 <__addsf3+0xcb>
c0026ef7:	89 f0                	mov    eax,esi
c0026ef9:	f7 d0                	not    eax
c0026efb:	84 c0                	test   al,al
c0026efd:	0f 84 34 02 00 00    	je     c0027137 <__addsf3+0x2f9>
c0026f03:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f09:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f0c:	83 f9 1f             	cmp    ecx,0x1f
c0026f0f:	0f 8f 22 02 00 00    	jg     c0027137 <__addsf3+0x2f9>
c0026f15:	89 d7                	mov    edi,edx
c0026f17:	d3 ef                	shr    edi,cl
c0026f19:	b8 20 00 00 00       	mov    eax,0x20
c0026f1e:	29 c8                	sub    eax,ecx
c0026f20:	89 c1                	mov    ecx,eax
c0026f22:	d3 e2                	shl    edx,cl
c0026f24:	31 c0                	xor    eax,eax
c0026f26:	85 d2                	test   edx,edx
c0026f28:	0f 95 c0             	setne  al
c0026f2b:	09 f8                	or     eax,edi
c0026f2d:	01 d8                	add    eax,ebx
c0026f2f:	eb 58                	jmp    c0026f89 <__addsf3+0x14b>
c0026f31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026f34:	8d 70 01             	lea    esi,[eax+0x1]
c0026f37:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026f3d:	75 32                	jne    c0026f71 <__addsf3+0x133>
c0026f3f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026f43:	75 1f                	jne    c0026f64 <__addsf3+0x126>
c0026f45:	85 d2                	test   edx,edx
c0026f47:	0f 84 e0 01 00 00    	je     c002712d <__addsf3+0x2ef>
c0026f4d:	85 db                	test   ebx,ebx
c0026f4f:	0f 84 e2 01 00 00    	je     c0027137 <__addsf3+0x2f9>
c0026f55:	89 d0                	mov    eax,edx
c0026f57:	01 d8                	add    eax,ebx
c0026f59:	0f 89 a9 01 00 00    	jns    c0027108 <__addsf3+0x2ca>
c0026f5f:	e9 9d 01 00 00       	jmp    c0027101 <__addsf3+0x2c3>
c0026f64:	85 d2                	test   edx,edx
c0026f66:	0f 85 cb 01 00 00    	jne    c0027137 <__addsf3+0x2f9>
c0026f6c:	e9 bc 01 00 00       	jmp    c002712d <__addsf3+0x2ef>
c0026f71:	31 c0                	xor    eax,eax
c0026f73:	89 f1                	mov    ecx,esi
c0026f75:	f7 d1                	not    ecx
c0026f77:	84 c9                	test   cl,cl
c0026f79:	0f 84 90 01 00 00    	je     c002710f <__addsf3+0x2d1>
c0026f7f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026f82:	d1 e8                	shr    eax,1
c0026f84:	e9 86 01 00 00       	jmp    c002710f <__addsf3+0x2d1>
c0026f89:	85 c0                	test   eax,eax
c0026f8b:	0f 89 7e 01 00 00    	jns    c002710f <__addsf3+0x2d1>
c0026f91:	46                   	inc    esi
c0026f92:	89 f2                	mov    edx,esi
c0026f94:	f7 d2                	not    edx
c0026f96:	84 d2                	test   dl,dl
c0026f98:	0f 84 6f 01 00 00    	je     c002710d <__addsf3+0x2cf>
c0026f9e:	89 c2                	mov    edx,eax
c0026fa0:	83 e2 01             	and    edx,0x1
c0026fa3:	d1 e8                	shr    eax,1
c0026fa5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026faa:	09 d0                	or     eax,edx
c0026fac:	e9 5e 01 00 00       	jmp    c002710f <__addsf3+0x2d1>
c0026fb1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026fb5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026fb8:	89 f0                	mov    eax,esi
c0026fba:	0f b6 c0             	movzx  eax,al
c0026fbd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026fc0:	29 c1                	sub    ecx,eax
c0026fc2:	85 c9                	test   ecx,ecx
c0026fc4:	7e 55                	jle    c002701b <__addsf3+0x1dd>
c0026fc6:	85 c0                	test   eax,eax
c0026fc8:	75 11                	jne    c0026fdb <__addsf3+0x19d>
c0026fca:	85 db                	test   ebx,ebx
c0026fcc:	0f 84 65 01 00 00    	je     c0027137 <__addsf3+0x2f9>
c0026fd2:	49                   	dec    ecx
c0026fd3:	75 19                	jne    c0026fee <__addsf3+0x1b0>
c0026fd5:	89 d0                	mov    eax,edx
c0026fd7:	29 d8                	sub    eax,ebx
c0026fd9:	eb 38                	jmp    c0027013 <__addsf3+0x1d5>
c0026fdb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026fde:	f7 d0                	not    eax
c0026fe0:	84 c0                	test   al,al
c0026fe2:	0f 84 4f 01 00 00    	je     c0027137 <__addsf3+0x2f9>
c0026fe8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026fee:	83 f9 1f             	cmp    ecx,0x1f
c0026ff1:	0f 8f 40 01 00 00    	jg     c0027137 <__addsf3+0x2f9>
c0026ff7:	89 de                	mov    esi,ebx
c0026ff9:	d3 ee                	shr    esi,cl
c0026ffb:	b8 20 00 00 00       	mov    eax,0x20
c0027000:	29 c8                	sub    eax,ecx
c0027002:	89 c1                	mov    ecx,eax
c0027004:	d3 e3                	shl    ebx,cl
c0027006:	31 c0                	xor    eax,eax
c0027008:	85 db                	test   ebx,ebx
c002700a:	0f 95 c0             	setne  al
c002700d:	09 f0                	or     eax,esi
c002700f:	29 c2                	sub    edx,eax
c0027011:	89 d0                	mov    eax,edx
c0027013:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027016:	e9 af 00 00 00       	jmp    c00270ca <__addsf3+0x28c>
c002701b:	74 5c                	je     c0027079 <__addsf3+0x23b>
c002701d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027020:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027023:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027027:	75 14                	jne    c002703d <__addsf3+0x1ff>
c0027029:	85 d2                	test   edx,edx
c002702b:	0f 84 06 01 00 00    	je     c0027137 <__addsf3+0x2f9>
c0027031:	48                   	dec    eax
c0027032:	75 1b                	jne    c002704f <__addsf3+0x211>
c0027034:	89 d8                	mov    eax,ebx
c0027036:	29 d0                	sub    eax,edx
c0027038:	e9 8d 00 00 00       	jmp    c00270ca <__addsf3+0x28c>
c002703d:	89 f1                	mov    ecx,esi
c002703f:	f7 d1                	not    ecx
c0027041:	84 c9                	test   cl,cl
c0027043:	0f 84 ee 00 00 00    	je     c0027137 <__addsf3+0x2f9>
c0027049:	81 ca 00 00 00 80    	or     edx,0x80000000
c002704f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027052:	83 f8 1f             	cmp    eax,0x1f
c0027055:	0f 8f dc 00 00 00    	jg     c0027137 <__addsf3+0x2f9>
c002705b:	89 d7                	mov    edi,edx
c002705d:	88 c1                	mov    cl,al
c002705f:	d3 ef                	shr    edi,cl
c0027061:	b9 20 00 00 00       	mov    ecx,0x20
c0027066:	29 c1                	sub    ecx,eax
c0027068:	d3 e2                	shl    edx,cl
c002706a:	31 c0                	xor    eax,eax
c002706c:	85 d2                	test   edx,edx
c002706e:	0f 95 c0             	setne  al
c0027071:	09 f8                	or     eax,edi
c0027073:	29 c3                	sub    ebx,eax
c0027075:	89 d8                	mov    eax,ebx
c0027077:	eb 51                	jmp    c00270ca <__addsf3+0x28c>
c0027079:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002707c:	40                   	inc    eax
c002707d:	a8 fe                	test   al,0xfe
c002707f:	75 3d                	jne    c00270be <__addsf3+0x280>
c0027081:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027085:	0f 85 a7 00 00 00    	jne    c0027132 <__addsf3+0x2f4>
c002708b:	85 d2                	test   edx,edx
c002708d:	75 12                	jne    c00270a1 <__addsf3+0x263>
c002708f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027092:	85 db                	test   ebx,ebx
c0027094:	0f 85 9d 00 00 00    	jne    c0027137 <__addsf3+0x2f9>
c002709a:	31 ff                	xor    edi,edi
c002709c:	e9 96 00 00 00       	jmp    c0027137 <__addsf3+0x2f9>
c00270a1:	85 db                	test   ebx,ebx
c00270a3:	0f 84 8e 00 00 00    	je     c0027137 <__addsf3+0x2f9>
c00270a9:	89 d0                	mov    eax,edx
c00270ab:	29 d8                	sub    eax,ebx
c00270ad:	79 06                	jns    c00270b5 <__addsf3+0x277>
c00270af:	89 d8                	mov    eax,ebx
c00270b1:	29 d0                	sub    eax,edx
c00270b3:	eb 5a                	jmp    c002710f <__addsf3+0x2d1>
c00270b5:	bf 00 00 00 00       	mov    edi,0x0
c00270ba:	74 7b                	je     c0027137 <__addsf3+0x2f9>
c00270bc:	eb 4a                	jmp    c0027108 <__addsf3+0x2ca>
c00270be:	89 d0                	mov    eax,edx
c00270c0:	29 d8                	sub    eax,ebx
c00270c2:	79 12                	jns    c00270d6 <__addsf3+0x298>
c00270c4:	89 d8                	mov    eax,ebx
c00270c6:	29 d0                	sub    eax,edx
c00270c8:	eb 09                	jmp    c00270d3 <__addsf3+0x295>
c00270ca:	85 c0                	test   eax,eax
c00270cc:	79 41                	jns    c002710f <__addsf3+0x2d1>
c00270ce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270d3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00270d6:	31 f6                	xor    esi,esi
c00270d8:	85 c0                	test   eax,eax
c00270da:	74 33                	je     c002710f <__addsf3+0x2d1>
c00270dc:	0f bd c8             	bsr    ecx,eax
c00270df:	83 f1 1f             	xor    ecx,0x1f
c00270e2:	d3 e0                	shl    eax,cl
c00270e4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00270e8:	39 ca                	cmp    edx,ecx
c00270ea:	7f 10                	jg     c00270fc <__addsf3+0x2be>
c00270ec:	29 d1                	sub    ecx,edx
c00270ee:	41                   	inc    ecx
c00270ef:	d3 e8                	shr    eax,cl
c00270f1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00270f4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00270fa:	eb 13                	jmp    c002710f <__addsf3+0x2d1>
c00270fc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00270ff:	29 ce                	sub    esi,ecx
c0027101:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027106:	eb 07                	jmp    c002710f <__addsf3+0x2d1>
c0027108:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002710b:	eb 02                	jmp    c002710f <__addsf3+0x2d1>
c002710d:	31 c0                	xor    eax,eax
c002710f:	89 c2                	mov    edx,eax
c0027111:	c1 ea 08             	shr    edx,0x8
c0027114:	a8 7f                	test   al,0x7f
c0027116:	0f 95 c1             	setne  cl
c0027119:	09 d1                	or     ecx,edx
c002711b:	83 e1 01             	and    ecx,0x1
c002711e:	c1 e8 07             	shr    eax,0x7
c0027121:	21 c8                	and    eax,ecx
c0027123:	c1 e6 17             	shl    esi,0x17
c0027126:	09 d6                	or     esi,edx
c0027128:	8d 3c 30             	lea    edi,[eax+esi*1]
c002712b:	eb 0a                	jmp    c0027137 <__addsf3+0x2f9>
c002712d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027130:	eb 05                	jmp    c0027137 <__addsf3+0x2f9>
c0027132:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027137:	89 f8                	mov    eax,edi
c0027139:	5a                   	pop    edx
c002713a:	59                   	pop    ecx
c002713b:	5b                   	pop    ebx
c002713c:	5e                   	pop    esi
c002713d:	5f                   	pop    edi
c002713e:	5d                   	pop    ebp
c002713f:	c3                   	ret    

c0027140 <__subsf3>:
c0027140:	55                   	push   ebp
c0027141:	89 e5                	mov    ebp,esp
c0027143:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027146:	05 00 00 00 80       	add    eax,0x80000000
c002714b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002714e:	5d                   	pop    ebp
c002714f:	e9 ea fc ff ff       	jmp    c0026e3e <__addsf3>

c0027154 <__negsf2>:
c0027154:	55                   	push   ebp
c0027155:	89 e5                	mov    ebp,esp
c0027157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002715a:	05 00 00 00 80       	add    eax,0x80000000
c002715f:	5d                   	pop    ebp
c0027160:	c3                   	ret    

c0027161 <__mulsf3>:
c0027161:	55                   	push   ebp
c0027162:	89 e5                	mov    ebp,esp
c0027164:	57                   	push   edi
c0027165:	56                   	push   esi
c0027166:	53                   	push   ebx
c0027167:	83 ec 1c             	sub    esp,0x1c
c002716a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002716d:	89 f0                	mov    eax,esi
c002716f:	89 f1                	mov    ecx,esi
c0027171:	c1 f9 17             	sar    ecx,0x17
c0027174:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027177:	c1 e0 08             	shl    eax,0x8
c002717a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002717f:	89 c1                	mov    ecx,eax
c0027181:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027184:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027187:	89 c7                	mov    edi,eax
c0027189:	c1 ff 17             	sar    edi,0x17
c002718c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027190:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027193:	89 f8                	mov    eax,edi
c0027195:	0f b6 c0             	movzx  eax,al
c0027198:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002719b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002719f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00271a2:	42                   	inc    edx
c00271a3:	80 e2 fe             	and    dl,0xfe
c00271a6:	75 7b                	jne    c0027223 <__mulsf3+0xc2>
c00271a8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271ac:	74 54                	je     c0027202 <__mulsf3+0xa1>
c00271ae:	85 c9                	test   ecx,ecx
c00271b0:	0f 85 64 01 00 00    	jne    c002731a <__mulsf3+0x1b9>
c00271b6:	8d 57 01             	lea    edx,[edi+0x1]
c00271b9:	80 e2 fe             	and    dl,0xfe
c00271bc:	75 1f                	jne    c00271dd <__mulsf3+0x7c>
c00271be:	85 c0                	test   eax,eax
c00271c0:	b8 00 00 00 00       	mov    eax,0x0
c00271c5:	74 29                	je     c00271f0 <__mulsf3+0x8f>
c00271c7:	53                   	push   ebx
c00271c8:	53                   	push   ebx
c00271c9:	50                   	push   eax
c00271ca:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271cd:	e8 96 05 00 00       	call   c0027768 <__nesf2>
c00271d2:	83 c4 10             	add    esp,0x10
c00271d5:	85 c0                	test   eax,eax
c00271d7:	0f 85 3a 01 00 00    	jne    c0027317 <__mulsf3+0x1b6>
c00271dd:	85 ff                	test   edi,edi
c00271df:	0f 89 35 01 00 00    	jns    c002731a <__mulsf3+0x1b9>
c00271e5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00271eb:	e9 2a 01 00 00       	jmp    c002731a <__mulsf3+0x1b9>
c00271f0:	51                   	push   ecx
c00271f1:	51                   	push   ecx
c00271f2:	50                   	push   eax
c00271f3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271f6:	e8 6d 05 00 00       	call   c0027768 <__nesf2>
c00271fb:	83 c4 10             	add    esp,0x10
c00271fe:	85 c0                	test   eax,eax
c0027200:	eb 15                	jmp    c0027217 <__mulsf3+0xb6>
c0027202:	85 c9                	test   ecx,ecx
c0027204:	74 0b                	je     c0027211 <__mulsf3+0xb0>
c0027206:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027209:	01 c9                	add    ecx,ecx
c002720b:	78 16                	js     c0027223 <__mulsf3+0xc2>
c002720d:	89 d3                	mov    ebx,edx
c002720f:	eb f5                	jmp    c0027206 <__mulsf3+0xa5>
c0027211:	89 f8                	mov    eax,edi
c0027213:	f7 d0                	not    eax
c0027215:	84 c0                	test   al,al
c0027217:	75 c4                	jne    c00271dd <__mulsf3+0x7c>
c0027219:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002721e:	e9 f7 00 00 00       	jmp    c002731a <__mulsf3+0x1b9>
c0027223:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027226:	c1 e6 08             	shl    esi,0x8
c0027229:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002722f:	8d 57 01             	lea    edx,[edi+0x1]
c0027232:	80 e2 fe             	and    dl,0xfe
c0027235:	75 63                	jne    c002729a <__mulsf3+0x139>
c0027237:	85 c0                	test   eax,eax
c0027239:	74 2f                	je     c002726a <__mulsf3+0x109>
c002723b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002723f:	0f 89 d2 00 00 00    	jns    c0027317 <__mulsf3+0x1b6>
c0027245:	52                   	push   edx
c0027246:	52                   	push   edx
c0027247:	6a 00                	push   0x0
c0027249:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002724c:	e8 dc 04 00 00       	call   c002772d <__eqsf2>
c0027251:	83 c4 10             	add    esp,0x10
c0027254:	85 c0                	test   eax,eax
c0027256:	0f 85 bb 00 00 00    	jne    c0027317 <__mulsf3+0x1b6>
c002725c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002725f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027265:	e9 b0 00 00 00       	jmp    c002731a <__mulsf3+0x1b9>
c002726a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002726d:	50                   	push   eax
c002726e:	50                   	push   eax
c002726f:	6a 00                	push   0x0
c0027271:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027274:	e8 b4 04 00 00       	call   c002772d <__eqsf2>
c0027279:	83 c4 10             	add    esp,0x10
c002727c:	85 c0                	test   eax,eax
c002727e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027281:	75 0c                	jne    c002728f <__mulsf3+0x12e>
c0027283:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027287:	0f 89 8a 00 00 00    	jns    c0027317 <__mulsf3+0x1b6>
c002728d:	eb cd                	jmp    c002725c <__mulsf3+0xfb>
c002728f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027292:	01 f6                	add    esi,esi
c0027294:	78 04                	js     c002729a <__mulsf3+0x139>
c0027296:	89 c3                	mov    ebx,eax
c0027298:	eb f5                	jmp    c002728f <__mulsf3+0x12e>
c002729a:	89 c8                	mov    eax,ecx
c002729c:	0d 00 00 00 80       	or     eax,0x80000000
c00272a1:	81 ce 00 00 00 80    	or     esi,0x80000000
c00272a7:	f7 e6                	mul    esi
c00272a9:	85 c0                	test   eax,eax
c00272ab:	0f 95 c0             	setne  al
c00272ae:	0f b6 c0             	movzx  eax,al
c00272b1:	09 c2                	or     edx,eax
c00272b3:	78 03                	js     c00272b8 <__mulsf3+0x157>
c00272b5:	01 d2                	add    edx,edx
c00272b7:	4b                   	dec    ebx
c00272b8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00272be:	7f 22                	jg     c00272e2 <__mulsf3+0x181>
c00272c0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00272c6:	85 db                	test   ebx,ebx
c00272c8:	7f 23                	jg     c00272ed <__mulsf3+0x18c>
c00272ca:	83 fb e9             	cmp    ebx,0xffffffe9
c00272cd:	7c 1a                	jl     c00272e9 <__mulsf3+0x188>
c00272cf:	81 ca 00 00 00 80    	or     edx,0x80000000
c00272d5:	b9 01 00 00 00       	mov    ecx,0x1
c00272da:	29 d9                	sub    ecx,ebx
c00272dc:	d3 ea                	shr    edx,cl
c00272de:	31 db                	xor    ebx,ebx
c00272e0:	eb 0b                	jmp    c00272ed <__mulsf3+0x18c>
c00272e2:	bb ff 00 00 00       	mov    ebx,0xff
c00272e7:	eb 02                	jmp    c00272eb <__mulsf3+0x18a>
c00272e9:	31 db                	xor    ebx,ebx
c00272eb:	31 d2                	xor    edx,edx
c00272ed:	89 d0                	mov    eax,edx
c00272ef:	c1 e8 08             	shr    eax,0x8
c00272f2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272f5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272fb:	09 fb                	or     ebx,edi
c00272fd:	c1 e3 17             	shl    ebx,0x17
c0027300:	09 c3                	or     ebx,eax
c0027302:	f6 c2 7f             	test   dl,0x7f
c0027305:	0f 95 c1             	setne  cl
c0027308:	09 c8                	or     eax,ecx
c002730a:	83 e0 01             	and    eax,0x1
c002730d:	c1 ea 07             	shr    edx,0x7
c0027310:	21 c2                	and    edx,eax
c0027312:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027315:	eb 03                	jmp    c002731a <__mulsf3+0x1b9>
c0027317:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002731a:	89 f0                	mov    eax,esi
c002731c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002731f:	5b                   	pop    ebx
c0027320:	5e                   	pop    esi
c0027321:	5f                   	pop    edi
c0027322:	5d                   	pop    ebp
c0027323:	c3                   	ret    

c0027324 <__divsf3>:
c0027324:	55                   	push   ebp
c0027325:	89 e5                	mov    ebp,esp
c0027327:	57                   	push   edi
c0027328:	56                   	push   esi
c0027329:	53                   	push   ebx
c002732a:	83 ec 1c             	sub    esp,0x1c
c002732d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027330:	89 d8                	mov    eax,ebx
c0027332:	89 d9                	mov    ecx,ebx
c0027334:	c1 f9 17             	sar    ecx,0x17
c0027337:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002733a:	c1 e0 08             	shl    eax,0x8
c002733d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027342:	89 c1                	mov    ecx,eax
c0027344:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027347:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002734a:	89 c7                	mov    edi,eax
c002734c:	c1 ff 17             	sar    edi,0x17
c002734f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027353:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027356:	89 f8                	mov    eax,edi
c0027358:	0f b6 c0             	movzx  eax,al
c002735b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002735e:	29 c6                	sub    esi,eax
c0027360:	83 c6 7f             	add    esi,0x7f
c0027363:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027366:	42                   	inc    edx
c0027367:	80 e2 fe             	and    dl,0xfe
c002736a:	0f 85 9c 00 00 00    	jne    c002740c <__divsf3+0xe8>
c0027370:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027374:	74 33                	je     c00273a9 <__divsf3+0x85>
c0027376:	85 c9                	test   ecx,ecx
c0027378:	0f 85 c7 01 00 00    	jne    c0027545 <__divsf3+0x221>
c002737e:	8d 57 01             	lea    edx,[edi+0x1]
c0027381:	80 e2 fe             	and    dl,0xfe
c0027384:	75 2f                	jne    c00273b5 <__divsf3+0x91>
c0027386:	85 c0                	test   eax,eax
c0027388:	74 2b                	je     c00273b5 <__divsf3+0x91>
c002738a:	51                   	push   ecx
c002738b:	51                   	push   ecx
c002738c:	6a 00                	push   0x0
c002738e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027391:	e8 d2 03 00 00       	call   c0027768 <__nesf2>
c0027396:	83 c4 10             	add    esp,0x10
c0027399:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002739c:	85 c0                	test   eax,eax
c002739e:	0f 85 a1 01 00 00    	jne    c0027545 <__divsf3+0x221>
c00273a4:	e9 92 01 00 00       	jmp    c002753b <__divsf3+0x217>
c00273a9:	85 c9                	test   ecx,ecx
c00273ab:	75 1b                	jne    c00273c8 <__divsf3+0xa4>
c00273ad:	8d 57 01             	lea    edx,[edi+0x1]
c00273b0:	80 e2 fe             	and    dl,0xfe
c00273b3:	74 1e                	je     c00273d3 <__divsf3+0xaf>
c00273b5:	85 ff                	test   edi,edi
c00273b7:	0f 89 88 01 00 00    	jns    c0027545 <__divsf3+0x221>
c00273bd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00273c3:	e9 7d 01 00 00       	jmp    c0027545 <__divsf3+0x221>
c00273c8:	8d 56 ff             	lea    edx,[esi-0x1]
c00273cb:	01 c9                	add    ecx,ecx
c00273cd:	78 3d                	js     c002740c <__divsf3+0xe8>
c00273cf:	89 d6                	mov    esi,edx
c00273d1:	eb f5                	jmp    c00273c8 <__divsf3+0xa4>
c00273d3:	85 c0                	test   eax,eax
c00273d5:	b8 00 00 00 00       	mov    eax,0x0
c00273da:	74 18                	je     c00273f4 <__divsf3+0xd0>
c00273dc:	52                   	push   edx
c00273dd:	52                   	push   edx
c00273de:	50                   	push   eax
c00273df:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273e2:	e8 81 03 00 00       	call   c0027768 <__nesf2>
c00273e7:	83 c4 10             	add    esp,0x10
c00273ea:	85 c0                	test   eax,eax
c00273ec:	0f 85 50 01 00 00    	jne    c0027542 <__divsf3+0x21e>
c00273f2:	eb c1                	jmp    c00273b5 <__divsf3+0x91>
c00273f4:	56                   	push   esi
c00273f5:	56                   	push   esi
c00273f6:	50                   	push   eax
c00273f7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273fa:	e8 69 03 00 00       	call   c0027768 <__nesf2>
c00273ff:	83 c4 10             	add    esp,0x10
c0027402:	85 c0                	test   eax,eax
c0027404:	0f 84 31 01 00 00    	je     c002753b <__divsf3+0x217>
c002740a:	eb a9                	jmp    c00273b5 <__divsf3+0x91>
c002740c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002740f:	c1 e3 08             	shl    ebx,0x8
c0027412:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027418:	8d 57 01             	lea    edx,[edi+0x1]
c002741b:	80 e2 fe             	and    dl,0xfe
c002741e:	75 71                	jne    c0027491 <__divsf3+0x16d>
c0027420:	85 c0                	test   eax,eax
c0027422:	ba 00 00 00 00       	mov    edx,0x0
c0027427:	74 2f                	je     c0027458 <__divsf3+0x134>
c0027429:	51                   	push   ecx
c002742a:	51                   	push   ecx
c002742b:	52                   	push   edx
c002742c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002742f:	e8 f9 02 00 00       	call   c002772d <__eqsf2>
c0027434:	83 c4 10             	add    esp,0x10
c0027437:	85 c0                	test   eax,eax
c0027439:	0f 85 03 01 00 00    	jne    c0027542 <__divsf3+0x21e>
c002743f:	31 d2                	xor    edx,edx
c0027441:	89 d3                	mov    ebx,edx
c0027443:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027446:	31 f8                	xor    eax,edi
c0027448:	0f 89 f7 00 00 00    	jns    c0027545 <__divsf3+0x221>
c002744e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027453:	e9 ed 00 00 00       	jmp    c0027545 <__divsf3+0x221>
c0027458:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002745b:	50                   	push   eax
c002745c:	50                   	push   eax
c002745d:	52                   	push   edx
c002745e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027461:	e8 c7 02 00 00       	call   c002772d <__eqsf2>
c0027466:	83 c4 10             	add    esp,0x10
c0027469:	85 c0                	test   eax,eax
c002746b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002746e:	75 16                	jne    c0027486 <__divsf3+0x162>
c0027470:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027473:	31 fb                	xor    ebx,edi
c0027475:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002747b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027481:	e9 bf 00 00 00       	jmp    c0027545 <__divsf3+0x221>
c0027486:	8d 46 01             	lea    eax,[esi+0x1]
c0027489:	01 db                	add    ebx,ebx
c002748b:	78 04                	js     c0027491 <__divsf3+0x16d>
c002748d:	89 c6                	mov    esi,eax
c002748f:	eb f5                	jmp    c0027486 <__divsf3+0x162>
c0027491:	89 c8                	mov    eax,ecx
c0027493:	0d 00 00 00 80       	or     eax,0x80000000
c0027498:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002749e:	31 d2                	xor    edx,edx
c00274a0:	39 d8                	cmp    eax,ebx
c00274a2:	72 07                	jb     c00274ab <__divsf3+0x187>
c00274a4:	29 d8                	sub    eax,ebx
c00274a6:	ba 01 00 00 00       	mov    edx,0x1
c00274ab:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00274b2:	01 d2                	add    edx,edx
c00274b4:	89 c1                	mov    ecx,eax
c00274b6:	01 c0                	add    eax,eax
c00274b8:	85 c9                	test   ecx,ecx
c00274ba:	78 04                	js     c00274c0 <__divsf3+0x19c>
c00274bc:	39 c3                	cmp    ebx,eax
c00274be:	77 05                	ja     c00274c5 <__divsf3+0x1a1>
c00274c0:	29 d8                	sub    eax,ebx
c00274c2:	83 ca 01             	or     edx,0x1
c00274c5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00274c8:	75 e8                	jne    c00274b2 <__divsf3+0x18e>
c00274ca:	85 c0                	test   eax,eax
c00274cc:	0f 95 c0             	setne  al
c00274cf:	0f b6 c0             	movzx  eax,al
c00274d2:	c1 e2 06             	shl    edx,0x6
c00274d5:	09 c2                	or     edx,eax
c00274d7:	78 03                	js     c00274dc <__divsf3+0x1b8>
c00274d9:	01 d2                	add    edx,edx
c00274db:	4e                   	dec    esi
c00274dc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00274e2:	7f 22                	jg     c0027506 <__divsf3+0x1e2>
c00274e4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00274ea:	85 f6                	test   esi,esi
c00274ec:	7f 23                	jg     c0027511 <__divsf3+0x1ed>
c00274ee:	83 fe e9             	cmp    esi,0xffffffe9
c00274f1:	7c 1a                	jl     c002750d <__divsf3+0x1e9>
c00274f3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00274f9:	b9 01 00 00 00       	mov    ecx,0x1
c00274fe:	29 f1                	sub    ecx,esi
c0027500:	d3 ea                	shr    edx,cl
c0027502:	31 f6                	xor    esi,esi
c0027504:	eb 0b                	jmp    c0027511 <__divsf3+0x1ed>
c0027506:	be ff 00 00 00       	mov    esi,0xff
c002750b:	eb 02                	jmp    c002750f <__divsf3+0x1eb>
c002750d:	31 f6                	xor    esi,esi
c002750f:	31 d2                	xor    edx,edx
c0027511:	89 d0                	mov    eax,edx
c0027513:	c1 e8 08             	shr    eax,0x8
c0027516:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027519:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002751f:	09 fe                	or     esi,edi
c0027521:	c1 e6 17             	shl    esi,0x17
c0027524:	09 c6                	or     esi,eax
c0027526:	f6 c2 7f             	test   dl,0x7f
c0027529:	0f 95 c1             	setne  cl
c002752c:	09 c8                	or     eax,ecx
c002752e:	83 e0 01             	and    eax,0x1
c0027531:	c1 ea 07             	shr    edx,0x7
c0027534:	21 c2                	and    edx,eax
c0027536:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027539:	eb 0a                	jmp    c0027545 <__divsf3+0x221>
c002753b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027540:	eb 03                	jmp    c0027545 <__divsf3+0x221>
c0027542:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027545:	89 d8                	mov    eax,ebx
c0027547:	8d 65 f4             	lea    esp,[ebp-0xc]
c002754a:	5b                   	pop    ebx
c002754b:	5e                   	pop    esi
c002754c:	5f                   	pop    edi
c002754d:	5d                   	pop    ebp
c002754e:	c3                   	ret    

c002754f <__floatsisf>:
c002754f:	55                   	push   ebp
c0027550:	89 e5                	mov    ebp,esp
c0027552:	53                   	push   ebx
c0027553:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027556:	85 d2                	test   edx,edx
c0027558:	7e 2b                	jle    c0027585 <__floatsisf+0x36>
c002755a:	0f bd ca             	bsr    ecx,edx
c002755d:	83 f1 1f             	xor    ecx,0x1f
c0027560:	d3 e2                	shl    edx,cl
c0027562:	89 d0                	mov    eax,edx
c0027564:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027569:	89 c3                	mov    ebx,eax
c002756b:	c1 eb 08             	shr    ebx,0x8
c002756e:	80 e2 7f             	and    dl,0x7f
c0027571:	0f 95 c2             	setne  dl
c0027574:	09 da                	or     edx,ebx
c0027576:	83 e2 01             	and    edx,0x1
c0027579:	c1 e8 07             	shr    eax,0x7
c002757c:	21 c2                	and    edx,eax
c002757e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027583:	eb 32                	jmp    c00275b7 <__floatsisf+0x68>
c0027585:	b8 00 00 00 00       	mov    eax,0x0
c002758a:	74 34                	je     c00275c0 <__floatsisf+0x71>
c002758c:	f7 da                	neg    edx
c002758e:	0f bd ca             	bsr    ecx,edx
c0027591:	83 f1 1f             	xor    ecx,0x1f
c0027594:	d3 e2                	shl    edx,cl
c0027596:	89 d0                	mov    eax,edx
c0027598:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002759d:	89 c3                	mov    ebx,eax
c002759f:	c1 eb 08             	shr    ebx,0x8
c00275a2:	80 e2 7f             	and    dl,0x7f
c00275a5:	0f 95 c2             	setne  dl
c00275a8:	09 da                	or     edx,ebx
c00275aa:	83 e2 01             	and    edx,0x1
c00275ad:	c1 e8 07             	shr    eax,0x7
c00275b0:	21 c2                	and    edx,eax
c00275b2:	b8 9e 01 00 00       	mov    eax,0x19e
c00275b7:	29 c8                	sub    eax,ecx
c00275b9:	c1 e0 17             	shl    eax,0x17
c00275bc:	09 d8                	or     eax,ebx
c00275be:	01 d0                	add    eax,edx
c00275c0:	5b                   	pop    ebx
c00275c1:	5d                   	pop    ebp
c00275c2:	c3                   	ret    

c00275c3 <__floatunsisf>:
c00275c3:	55                   	push   ebp
c00275c4:	89 e5                	mov    ebp,esp
c00275c6:	53                   	push   ebx
c00275c7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00275ca:	31 c0                	xor    eax,eax
c00275cc:	85 d2                	test   edx,edx
c00275ce:	74 32                	je     c0027602 <__floatunsisf+0x3f>
c00275d0:	0f bd ca             	bsr    ecx,edx
c00275d3:	83 f1 1f             	xor    ecx,0x1f
c00275d6:	d3 e2                	shl    edx,cl
c00275d8:	89 d0                	mov    eax,edx
c00275da:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00275df:	89 c3                	mov    ebx,eax
c00275e1:	c1 eb 08             	shr    ebx,0x8
c00275e4:	80 e2 7f             	and    dl,0x7f
c00275e7:	0f 95 c2             	setne  dl
c00275ea:	09 da                	or     edx,ebx
c00275ec:	83 e2 01             	and    edx,0x1
c00275ef:	c1 e8 07             	shr    eax,0x7
c00275f2:	21 c2                	and    edx,eax
c00275f4:	b8 9e 00 00 00       	mov    eax,0x9e
c00275f9:	29 c8                	sub    eax,ecx
c00275fb:	c1 e0 17             	shl    eax,0x17
c00275fe:	09 d8                	or     eax,ebx
c0027600:	01 d0                	add    eax,edx
c0027602:	5b                   	pop    ebx
c0027603:	5d                   	pop    ebp
c0027604:	c3                   	ret    

c0027605 <__fixsfsi>:
c0027605:	55                   	push   ebp
c0027606:	89 e5                	mov    ebp,esp
c0027608:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002760b:	89 d1                	mov    ecx,edx
c002760d:	c1 e1 08             	shl    ecx,0x8
c0027610:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027616:	c1 fa 17             	sar    edx,0x17
c0027619:	78 1c                	js     c0027637 <__fixsfsi+0x32>
c002761b:	83 ea 7f             	sub    edx,0x7f
c002761e:	31 c0                	xor    eax,eax
c0027620:	83 fa 1e             	cmp    edx,0x1e
c0027623:	77 40                	ja     c0027665 <__fixsfsi+0x60>
c0027625:	89 c8                	mov    eax,ecx
c0027627:	0d 00 00 00 80       	or     eax,0x80000000
c002762c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027631:	29 d1                	sub    ecx,edx
c0027633:	d3 e8                	shr    eax,cl
c0027635:	eb 2e                	jmp    c0027665 <__fixsfsi+0x60>
c0027637:	31 c0                	xor    eax,eax
c0027639:	81 c2 81 00 00 00    	add    edx,0x81
c002763f:	78 24                	js     c0027665 <__fixsfsi+0x60>
c0027641:	83 fa 1e             	cmp    edx,0x1e
c0027644:	7e 09                	jle    c002764f <__fixsfsi+0x4a>
c0027646:	83 fa 1f             	cmp    edx,0x1f
c0027649:	75 18                	jne    c0027663 <__fixsfsi+0x5e>
c002764b:	85 c9                	test   ecx,ecx
c002764d:	75 14                	jne    c0027663 <__fixsfsi+0x5e>
c002764f:	89 c8                	mov    eax,ecx
c0027651:	0d 00 00 00 80       	or     eax,0x80000000
c0027656:	b9 1f 00 00 00       	mov    ecx,0x1f
c002765b:	29 d1                	sub    ecx,edx
c002765d:	d3 e8                	shr    eax,cl
c002765f:	f7 d8                	neg    eax
c0027661:	eb 02                	jmp    c0027665 <__fixsfsi+0x60>
c0027663:	31 c0                	xor    eax,eax
c0027665:	5d                   	pop    ebp
c0027666:	c3                   	ret    

c0027667 <__fixunssfsi>:
c0027667:	55                   	push   ebp
c0027668:	89 e5                	mov    ebp,esp
c002766a:	53                   	push   ebx
c002766b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002766e:	89 d3                	mov    ebx,edx
c0027670:	c1 fb 17             	sar    ebx,0x17
c0027673:	83 eb 7f             	sub    ebx,0x7f
c0027676:	31 c0                	xor    eax,eax
c0027678:	83 fb 1f             	cmp    ebx,0x1f
c002767b:	77 18                	ja     c0027695 <__fixunssfsi+0x2e>
c002767d:	89 d0                	mov    eax,edx
c002767f:	c1 e0 08             	shl    eax,0x8
c0027682:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027687:	0d 00 00 00 80       	or     eax,0x80000000
c002768c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027691:	29 d9                	sub    ecx,ebx
c0027693:	d3 e8                	shr    eax,cl
c0027695:	5b                   	pop    ebx
c0027696:	5d                   	pop    ebp
c0027697:	c3                   	ret    

c0027698 <__cmpsf2>:
c0027698:	55                   	push   ebp
c0027699:	89 e5                	mov    ebp,esp
c002769b:	57                   	push   edi
c002769c:	56                   	push   esi
c002769d:	53                   	push   ebx
c002769e:	83 ec 24             	sub    esp,0x24
c00276a1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00276a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00276a7:	e8 4f 10 00 00       	call   c00286fb <__truncdfsf2>
c00276ac:	5a                   	pop    edx
c00276ad:	59                   	pop    ecx
c00276ae:	89 c3                	mov    ebx,eax
c00276b0:	c1 e8 17             	shr    eax,0x17
c00276b3:	0f b6 f0             	movzx  esi,al
c00276b6:	89 d8                	mov    eax,ebx
c00276b8:	c1 e8 1f             	shr    eax,0x1f
c00276bb:	31 c6                	xor    esi,eax
c00276bd:	c1 e3 08             	shl    ebx,0x8
c00276c0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00276c3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00276c6:	e8 30 10 00 00       	call   c00286fb <__truncdfsf2>
c00276cb:	83 c4 10             	add    esp,0x10
c00276ce:	89 c1                	mov    ecx,eax
c00276d0:	c1 e9 17             	shr    ecx,0x17
c00276d3:	0f b6 c9             	movzx  ecx,cl
c00276d6:	89 c7                	mov    edi,eax
c00276d8:	c1 ef 1f             	shr    edi,0x1f
c00276db:	89 ca                	mov    edx,ecx
c00276dd:	31 fa                	xor    edx,edi
c00276df:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00276e2:	c1 e0 08             	shl    eax,0x8
c00276e5:	89 c2                	mov    edx,eax
c00276e7:	89 d8                	mov    eax,ebx
c00276e9:	09 d0                	or     eax,edx
c00276eb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00276f0:	09 f0                	or     eax,esi
c00276f2:	75 08                	jne    c00276fc <__cmpsf2+0x64>
c00276f4:	31 c0                	xor    eax,eax
c00276f6:	39 f9                	cmp    ecx,edi
c00276f8:	75 0c                	jne    c0027706 <__cmpsf2+0x6e>
c00276fa:	eb 29                	jmp    c0027725 <__cmpsf2+0x8d>
c00276fc:	b8 01 00 00 00       	mov    eax,0x1
c0027701:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027704:	7f 1f                	jg     c0027725 <__cmpsf2+0x8d>
c0027706:	83 c8 ff             	or     eax,0xffffffff
c0027709:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002770c:	7c 17                	jl     c0027725 <__cmpsf2+0x8d>
c002770e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027714:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002771a:	b8 01 00 00 00       	mov    eax,0x1
c002771f:	39 d3                	cmp    ebx,edx
c0027721:	77 02                	ja     c0027725 <__cmpsf2+0x8d>
c0027723:	19 c0                	sbb    eax,eax
c0027725:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027728:	5b                   	pop    ebx
c0027729:	5e                   	pop    esi
c002772a:	5f                   	pop    edi
c002772b:	5d                   	pop    ebp
c002772c:	c3                   	ret    

c002772d <__eqsf2>:
c002772d:	55                   	push   ebp
c002772e:	89 e5                	mov    ebp,esp
c0027730:	83 ec 24             	sub    esp,0x24
c0027733:	6a 01                	push   0x1
c0027735:	83 ec 0c             	sub    esp,0xc
c0027738:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002773b:	e8 df 10 00 00       	call   c002881f <__extendsfdf2>
c0027740:	83 c4 10             	add    esp,0x10
c0027743:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027746:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027749:	52                   	push   edx
c002774a:	50                   	push   eax
c002774b:	50                   	push   eax
c002774c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002774f:	e8 cb 10 00 00       	call   c002881f <__extendsfdf2>
c0027754:	59                   	pop    ecx
c0027755:	59                   	pop    ecx
c0027756:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027759:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002775c:	52                   	push   edx
c002775d:	50                   	push   eax
c002775e:	e8 35 ff ff ff       	call   c0027698 <__cmpsf2>
c0027763:	83 c4 20             	add    esp,0x20
c0027766:	c9                   	leave  
c0027767:	c3                   	ret    

c0027768 <__nesf2>:
c0027768:	eb c3                	jmp    c002772d <__eqsf2>

c002776a <__gtsf2>:
c002776a:	55                   	push   ebp
c002776b:	89 e5                	mov    ebp,esp
c002776d:	83 ec 24             	sub    esp,0x24
c0027770:	6a ff                	push   0xffffffff
c0027772:	83 ec 0c             	sub    esp,0xc
c0027775:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027778:	e8 a2 10 00 00       	call   c002881f <__extendsfdf2>
c002777d:	83 c4 10             	add    esp,0x10
c0027780:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027783:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027786:	52                   	push   edx
c0027787:	50                   	push   eax
c0027788:	50                   	push   eax
c0027789:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002778c:	e8 8e 10 00 00       	call   c002881f <__extendsfdf2>
c0027791:	59                   	pop    ecx
c0027792:	59                   	pop    ecx
c0027793:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027796:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027799:	52                   	push   edx
c002779a:	50                   	push   eax
c002779b:	e8 f8 fe ff ff       	call   c0027698 <__cmpsf2>
c00277a0:	83 c4 20             	add    esp,0x20
c00277a3:	c9                   	leave  
c00277a4:	c3                   	ret    

c00277a5 <__gesf2>:
c00277a5:	eb c3                	jmp    c002776a <__gtsf2>

c00277a7 <__ltsf2>:
c00277a7:	eb 84                	jmp    c002772d <__eqsf2>

c00277a9 <__lesf2>:
c00277a9:	eb 82                	jmp    c002772d <__eqsf2>

c00277ab <__adddf3>:
c00277ab:	55                   	push   ebp
c00277ac:	89 e5                	mov    ebp,esp
c00277ae:	57                   	push   edi
c00277af:	56                   	push   esi
c00277b0:	53                   	push   ebx
c00277b1:	83 ec 24             	sub    esp,0x24
c00277b4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00277b7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00277ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00277bd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00277c0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00277c3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00277c6:	89 c8                	mov    eax,ecx
c00277c8:	89 ce                	mov    esi,ecx
c00277ca:	c1 fe 14             	sar    esi,0x14
c00277cd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00277d0:	89 fb                	mov    ebx,edi
c00277d2:	89 fa                	mov    edx,edi
c00277d4:	c1 e2 0b             	shl    edx,0xb
c00277d7:	c1 e0 0b             	shl    eax,0xb
c00277da:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00277df:	c1 eb 15             	shr    ebx,0x15
c00277e2:	09 d8                	or     eax,ebx
c00277e4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00277e7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00277ea:	c1 fe 14             	sar    esi,0x14
c00277ed:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00277f0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00277f3:	89 f3                	mov    ebx,esi
c00277f5:	c1 e3 0b             	shl    ebx,0xb
c00277f8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00277fb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00277fe:	c1 e3 0b             	shl    ebx,0xb
c0027801:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027807:	c1 ee 15             	shr    esi,0x15
c002780a:	09 f3                	or     ebx,esi
c002780c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002780f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027812:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027815:	0f 88 5f 02 00 00    	js     c0027a7a <__adddf3+0x2cf>
c002781b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002781e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027821:	85 db                	test   ebx,ebx
c0027823:	0f 8e c7 00 00 00    	jle    c00278f0 <__adddf3+0x145>
c0027829:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027830:	75 1a                	jne    c002784c <__adddf3+0xa1>
c0027832:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027835:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027838:	0f 84 b2 05 00 00    	je     c0027df0 <__adddf3+0x645>
c002783e:	4b                   	dec    ebx
c002783f:	75 23                	jne    c0027864 <__adddf3+0xb9>
c0027841:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027844:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027847:	e9 99 00 00 00       	jmp    c00278e5 <__adddf3+0x13a>
c002784c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002784f:	f7 d6                	not    esi
c0027851:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027857:	0f 84 93 05 00 00    	je     c0027df0 <__adddf3+0x645>
c002785d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027864:	83 fb 1f             	cmp    ebx,0x1f
c0027867:	7e 42                	jle    c00278ab <__adddf3+0x100>
c0027869:	83 fb 3f             	cmp    ebx,0x3f
c002786c:	0f 8f 7e 05 00 00    	jg     c0027df0 <__adddf3+0x645>
c0027872:	83 e3 1f             	and    ebx,0x1f
c0027875:	89 d9                	mov    ecx,ebx
c0027877:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002787a:	d3 ef                	shr    edi,cl
c002787c:	31 db                	xor    ebx,ebx
c002787e:	85 c9                	test   ecx,ecx
c0027880:	74 15                	je     c0027897 <__adddf3+0xec>
c0027882:	be 20 00 00 00       	mov    esi,0x20
c0027887:	29 ce                	sub    esi,ecx
c0027889:	89 f1                	mov    ecx,esi
c002788b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002788e:	d3 e6                	shl    esi,cl
c0027890:	31 db                	xor    ebx,ebx
c0027892:	85 f6                	test   esi,esi
c0027894:	0f 95 c3             	setne  bl
c0027897:	31 c9                	xor    ecx,ecx
c0027899:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002789d:	0f 95 c1             	setne  cl
c00278a0:	09 cf                	or     edi,ecx
c00278a2:	09 fb                	or     ebx,edi
c00278a4:	01 da                	add    edx,ebx
c00278a6:	83 d0 00             	adc    eax,0x0
c00278a9:	eb 3a                	jmp    c00278e5 <__adddf3+0x13a>
c00278ab:	bf 20 00 00 00       	mov    edi,0x20
c00278b0:	29 df                	sub    edi,ebx
c00278b2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278b5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278b8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278bb:	d3 e6                	shl    esi,cl
c00278bd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278c0:	88 d9                	mov    cl,bl
c00278c2:	d3 ef                	shr    edi,cl
c00278c4:	09 fe                	or     esi,edi
c00278c6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278c9:	88 d9                	mov    cl,bl
c00278cb:	d3 ef                	shr    edi,cl
c00278cd:	89 fb                	mov    ebx,edi
c00278cf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278d2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278d5:	d3 e7                	shl    edi,cl
c00278d7:	85 ff                	test   edi,edi
c00278d9:	0f 95 c1             	setne  cl
c00278dc:	0f b6 c9             	movzx  ecx,cl
c00278df:	09 ce                	or     esi,ecx
c00278e1:	01 f2                	add    edx,esi
c00278e3:	11 d8                	adc    eax,ebx
c00278e5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278e8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278eb:	e9 52 01 00 00       	jmp    c0027a42 <__adddf3+0x297>
c00278f0:	0f 84 d5 00 00 00    	je     c00279cb <__adddf3+0x220>
c00278f6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00278f9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00278fc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278ff:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027902:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027909:	75 20                	jne    c002792b <__adddf3+0x180>
c002790b:	89 d6                	mov    esi,edx
c002790d:	09 c6                	or     esi,eax
c002790f:	0f 84 db 04 00 00    	je     c0027df0 <__adddf3+0x645>
c0027915:	4b                   	dec    ebx
c0027916:	75 29                	jne    c0027941 <__adddf3+0x196>
c0027918:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002791b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002791e:	01 d1                	add    ecx,edx
c0027920:	11 c6                	adc    esi,eax
c0027922:	89 f0                	mov    eax,esi
c0027924:	89 ca                	mov    edx,ecx
c0027926:	e9 17 01 00 00       	jmp    c0027a42 <__adddf3+0x297>
c002792b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002792e:	f7 d6                	not    esi
c0027930:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027936:	0f 84 b4 04 00 00    	je     c0027df0 <__adddf3+0x645>
c002793c:	0d 00 00 00 80       	or     eax,0x80000000
c0027941:	83 fb 1f             	cmp    ebx,0x1f
c0027944:	7e 48                	jle    c002798e <__adddf3+0x1e3>
c0027946:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027949:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002794c:	83 fb 3f             	cmp    ebx,0x3f
c002794f:	0f 8f 9b 04 00 00    	jg     c0027df0 <__adddf3+0x645>
c0027955:	83 e3 1f             	and    ebx,0x1f
c0027958:	89 d9                	mov    ecx,ebx
c002795a:	89 c7                	mov    edi,eax
c002795c:	d3 ef                	shr    edi,cl
c002795e:	31 db                	xor    ebx,ebx
c0027960:	85 c9                	test   ecx,ecx
c0027962:	74 12                	je     c0027976 <__adddf3+0x1cb>
c0027964:	be 20 00 00 00       	mov    esi,0x20
c0027969:	29 ce                	sub    esi,ecx
c002796b:	89 f1                	mov    ecx,esi
c002796d:	d3 e0                	shl    eax,cl
c002796f:	31 db                	xor    ebx,ebx
c0027971:	85 c0                	test   eax,eax
c0027973:	0f 95 c3             	setne  bl
c0027976:	31 c0                	xor    eax,eax
c0027978:	85 d2                	test   edx,edx
c002797a:	0f 95 c0             	setne  al
c002797d:	09 c7                	or     edi,eax
c002797f:	09 fb                	or     ebx,edi
c0027981:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027984:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027987:	01 da                	add    edx,ebx
c0027989:	83 d6 00             	adc    esi,0x0
c002798c:	eb 39                	jmp    c00279c7 <__adddf3+0x21c>
c002798e:	be 20 00 00 00       	mov    esi,0x20
c0027993:	29 de                	sub    esi,ebx
c0027995:	89 c7                	mov    edi,eax
c0027997:	89 f1                	mov    ecx,esi
c0027999:	d3 e7                	shl    edi,cl
c002799b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002799e:	89 d7                	mov    edi,edx
c00279a0:	88 d9                	mov    cl,bl
c00279a2:	d3 ef                	shr    edi,cl
c00279a4:	89 f9                	mov    ecx,edi
c00279a6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279a9:	09 cf                	or     edi,ecx
c00279ab:	88 d9                	mov    cl,bl
c00279ad:	d3 e8                	shr    eax,cl
c00279af:	89 f1                	mov    ecx,esi
c00279b1:	d3 e2                	shl    edx,cl
c00279b3:	85 d2                	test   edx,edx
c00279b5:	0f 95 c2             	setne  dl
c00279b8:	0f b6 d2             	movzx  edx,dl
c00279bb:	09 d7                	or     edi,edx
c00279bd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279c0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279c3:	01 fa                	add    edx,edi
c00279c5:	11 c6                	adc    esi,eax
c00279c7:	89 f0                	mov    eax,esi
c00279c9:	eb 77                	jmp    c0027a42 <__adddf3+0x297>
c00279cb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279ce:	46                   	inc    esi
c00279cf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00279d2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00279d8:	75 41                	jne    c0027a1b <__adddf3+0x270>
c00279da:	89 d3                	mov    ebx,edx
c00279dc:	09 c3                	or     ebx,eax
c00279de:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00279e5:	75 27                	jne    c0027a0e <__adddf3+0x263>
c00279e7:	85 db                	test   ebx,ebx
c00279e9:	0f 84 fb 03 00 00    	je     c0027dea <__adddf3+0x63f>
c00279ef:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00279f2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00279f5:	0f 84 f5 03 00 00    	je     c0027df0 <__adddf3+0x645>
c00279fb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00279fe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027a01:	85 c0                	test   eax,eax
c0027a03:	0f 89 91 03 00 00    	jns    c0027d9a <__adddf3+0x5ef>
c0027a09:	e9 85 03 00 00       	jmp    c0027d93 <__adddf3+0x5e8>
c0027a0e:	85 db                	test   ebx,ebx
c0027a10:	0f 85 da 03 00 00    	jne    c0027df0 <__adddf3+0x645>
c0027a16:	e9 cf 03 00 00       	jmp    c0027dea <__adddf3+0x63f>
c0027a1b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027a1e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027a21:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a24:	f7 d1                	not    ecx
c0027a26:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027a2c:	0f 84 70 03 00 00    	je     c0027da2 <__adddf3+0x5f7>
c0027a32:	d1 ea                	shr    edx,1
c0027a34:	89 c1                	mov    ecx,eax
c0027a36:	c1 e1 1f             	shl    ecx,0x1f
c0027a39:	09 ca                	or     edx,ecx
c0027a3b:	d1 e8                	shr    eax,1
c0027a3d:	e9 6f 03 00 00       	jmp    c0027db1 <__adddf3+0x606>
c0027a42:	85 c0                	test   eax,eax
c0027a44:	0f 89 67 03 00 00    	jns    c0027db1 <__adddf3+0x606>
c0027a4a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027a4d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a50:	f7 d1                	not    ecx
c0027a52:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027a58:	0f 84 44 03 00 00    	je     c0027da2 <__adddf3+0x5f7>
c0027a5e:	89 d1                	mov    ecx,edx
c0027a60:	d1 e9                	shr    ecx,1
c0027a62:	83 e2 01             	and    edx,0x1
c0027a65:	09 ca                	or     edx,ecx
c0027a67:	89 c1                	mov    ecx,eax
c0027a69:	c1 e1 1f             	shl    ecx,0x1f
c0027a6c:	09 ca                	or     edx,ecx
c0027a6e:	d1 e8                	shr    eax,1
c0027a70:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027a75:	e9 37 03 00 00       	jmp    c0027db1 <__adddf3+0x606>
c0027a7a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a7d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a83:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027a86:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027a89:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a8f:	29 de                	sub    esi,ebx
c0027a91:	85 f6                	test   esi,esi
c0027a93:	0f 8e bd 00 00 00    	jle    c0027b56 <__adddf3+0x3ab>
c0027a99:	85 db                	test   ebx,ebx
c0027a9b:	75 17                	jne    c0027ab4 <__adddf3+0x309>
c0027a9d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027aa0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027aa3:	0f 84 47 03 00 00    	je     c0027df0 <__adddf3+0x645>
c0027aa9:	4e                   	dec    esi
c0027aaa:	75 20                	jne    c0027acc <__adddf3+0x321>
c0027aac:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027aaf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027ab2:	eb 5b                	jmp    c0027b0f <__adddf3+0x364>
c0027ab4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ab7:	f7 d3                	not    ebx
c0027ab9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027abf:	0f 84 2b 03 00 00    	je     c0027df0 <__adddf3+0x645>
c0027ac5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027acc:	83 fe 1f             	cmp    esi,0x1f
c0027acf:	7e 49                	jle    c0027b1a <__adddf3+0x36f>
c0027ad1:	83 fe 3f             	cmp    esi,0x3f
c0027ad4:	0f 8f 16 03 00 00    	jg     c0027df0 <__adddf3+0x645>
c0027ada:	83 e6 1f             	and    esi,0x1f
c0027add:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027ae0:	89 f1                	mov    ecx,esi
c0027ae2:	d3 ef                	shr    edi,cl
c0027ae4:	31 db                	xor    ebx,ebx
c0027ae6:	85 f6                	test   esi,esi
c0027ae8:	74 13                	je     c0027afd <__adddf3+0x352>
c0027aea:	b9 20 00 00 00       	mov    ecx,0x20
c0027aef:	29 f1                	sub    ecx,esi
c0027af1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027af4:	d3 e6                	shl    esi,cl
c0027af6:	31 db                	xor    ebx,ebx
c0027af8:	85 f6                	test   esi,esi
c0027afa:	0f 95 c3             	setne  bl
c0027afd:	31 c9                	xor    ecx,ecx
c0027aff:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027b03:	0f 95 c1             	setne  cl
c0027b06:	09 cf                	or     edi,ecx
c0027b08:	09 fb                	or     ebx,edi
c0027b0a:	29 da                	sub    edx,ebx
c0027b0c:	83 d8 00             	sbb    eax,0x0
c0027b0f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b12:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b15:	e9 aa 01 00 00       	jmp    c0027cc4 <__adddf3+0x519>
c0027b1a:	bf 20 00 00 00       	mov    edi,0x20
c0027b1f:	29 f7                	sub    edi,esi
c0027b21:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b24:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027b27:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027b2a:	d3 e3                	shl    ebx,cl
c0027b2c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027b2f:	89 f1                	mov    ecx,esi
c0027b31:	d3 ef                	shr    edi,cl
c0027b33:	09 fb                	or     ebx,edi
c0027b35:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027b38:	89 f1                	mov    ecx,esi
c0027b3a:	d3 ef                	shr    edi,cl
c0027b3c:	89 fe                	mov    esi,edi
c0027b3e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027b41:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027b44:	d3 e7                	shl    edi,cl
c0027b46:	85 ff                	test   edi,edi
c0027b48:	0f 95 c1             	setne  cl
c0027b4b:	0f b6 c9             	movzx  ecx,cl
c0027b4e:	09 cb                	or     ebx,ecx
c0027b50:	29 da                	sub    edx,ebx
c0027b52:	19 f0                	sbb    eax,esi
c0027b54:	eb b9                	jmp    c0027b0f <__adddf3+0x364>
c0027b56:	0f 84 cd 00 00 00    	je     c0027c29 <__adddf3+0x47e>
c0027b5c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027b5f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b62:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b65:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b69:	75 1b                	jne    c0027b86 <__adddf3+0x3db>
c0027b6b:	89 d6                	mov    esi,edx
c0027b6d:	09 c6                	or     esi,eax
c0027b6f:	0f 84 7b 02 00 00    	je     c0027df0 <__adddf3+0x645>
c0027b75:	4b                   	dec    ebx
c0027b76:	75 24                	jne    c0027b9c <__adddf3+0x3f1>
c0027b78:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b7b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027b7e:	29 d1                	sub    ecx,edx
c0027b80:	19 c6                	sbb    esi,eax
c0027b82:	89 ca                	mov    edx,ecx
c0027b84:	eb 61                	jmp    c0027be7 <__adddf3+0x43c>
c0027b86:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027b89:	f7 d6                	not    esi
c0027b8b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027b91:	0f 84 59 02 00 00    	je     c0027df0 <__adddf3+0x645>
c0027b97:	0d 00 00 00 80       	or     eax,0x80000000
c0027b9c:	83 fb 1f             	cmp    ebx,0x1f
c0027b9f:	7e 4d                	jle    c0027bee <__adddf3+0x443>
c0027ba1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ba4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ba7:	83 fb 3f             	cmp    ebx,0x3f
c0027baa:	0f 8f 40 02 00 00    	jg     c0027df0 <__adddf3+0x645>
c0027bb0:	83 e3 1f             	and    ebx,0x1f
c0027bb3:	89 d9                	mov    ecx,ebx
c0027bb5:	89 c7                	mov    edi,eax
c0027bb7:	d3 ef                	shr    edi,cl
c0027bb9:	31 db                	xor    ebx,ebx
c0027bbb:	85 c9                	test   ecx,ecx
c0027bbd:	74 12                	je     c0027bd1 <__adddf3+0x426>
c0027bbf:	be 20 00 00 00       	mov    esi,0x20
c0027bc4:	29 ce                	sub    esi,ecx
c0027bc6:	89 f1                	mov    ecx,esi
c0027bc8:	d3 e0                	shl    eax,cl
c0027bca:	31 db                	xor    ebx,ebx
c0027bcc:	85 c0                	test   eax,eax
c0027bce:	0f 95 c3             	setne  bl
c0027bd1:	31 c0                	xor    eax,eax
c0027bd3:	85 d2                	test   edx,edx
c0027bd5:	0f 95 c0             	setne  al
c0027bd8:	09 c7                	or     edi,eax
c0027bda:	09 fb                	or     ebx,edi
c0027bdc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027bdf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027be2:	29 da                	sub    edx,ebx
c0027be4:	83 de 00             	sbb    esi,0x0
c0027be7:	89 f0                	mov    eax,esi
c0027be9:	e9 d6 00 00 00       	jmp    c0027cc4 <__adddf3+0x519>
c0027bee:	be 20 00 00 00       	mov    esi,0x20
c0027bf3:	29 de                	sub    esi,ebx
c0027bf5:	89 c7                	mov    edi,eax
c0027bf7:	89 f1                	mov    ecx,esi
c0027bf9:	d3 e7                	shl    edi,cl
c0027bfb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027bfe:	89 d7                	mov    edi,edx
c0027c00:	88 d9                	mov    cl,bl
c0027c02:	d3 ef                	shr    edi,cl
c0027c04:	89 f9                	mov    ecx,edi
c0027c06:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c09:	09 cf                	or     edi,ecx
c0027c0b:	88 d9                	mov    cl,bl
c0027c0d:	d3 e8                	shr    eax,cl
c0027c0f:	89 f1                	mov    ecx,esi
c0027c11:	d3 e2                	shl    edx,cl
c0027c13:	85 d2                	test   edx,edx
c0027c15:	0f 95 c2             	setne  dl
c0027c18:	0f b6 d2             	movzx  edx,dl
c0027c1b:	09 d7                	or     edi,edx
c0027c1d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c20:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027c23:	29 fa                	sub    edx,edi
c0027c25:	19 c6                	sbb    esi,eax
c0027c27:	eb be                	jmp    c0027be7 <__adddf3+0x43c>
c0027c29:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027c2c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027c2f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027c35:	75 6a                	jne    c0027ca1 <__adddf3+0x4f6>
c0027c37:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c3b:	75 58                	jne    c0027c95 <__adddf3+0x4ea>
c0027c3d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027c40:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027c43:	89 d6                	mov    esi,edx
c0027c45:	09 c6                	or     esi,eax
c0027c47:	75 17                	jne    c0027c60 <__adddf3+0x4b5>
c0027c49:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c4c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c4f:	85 db                	test   ebx,ebx
c0027c51:	0f 85 99 01 00 00    	jne    c0027df0 <__adddf3+0x645>
c0027c57:	31 ff                	xor    edi,edi
c0027c59:	31 c9                	xor    ecx,ecx
c0027c5b:	e9 90 01 00 00       	jmp    c0027df0 <__adddf3+0x645>
c0027c60:	85 db                	test   ebx,ebx
c0027c62:	0f 84 88 01 00 00    	je     c0027df0 <__adddf3+0x645>
c0027c68:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027c6b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027c6e:	85 c0                	test   eax,eax
c0027c70:	79 10                	jns    c0027c82 <__adddf3+0x4d7>
c0027c72:	31 c9                	xor    ecx,ecx
c0027c74:	f7 da                	neg    edx
c0027c76:	0f 95 c1             	setne  cl
c0027c79:	01 c8                	add    eax,ecx
c0027c7b:	f7 d8                	neg    eax
c0027c7d:	e9 2f 01 00 00       	jmp    c0027db1 <__adddf3+0x606>
c0027c82:	31 ff                	xor    edi,edi
c0027c84:	31 c9                	xor    ecx,ecx
c0027c86:	89 c3                	mov    ebx,eax
c0027c88:	09 d3                	or     ebx,edx
c0027c8a:	0f 84 60 01 00 00    	je     c0027df0 <__adddf3+0x645>
c0027c90:	e9 05 01 00 00       	jmp    c0027d9a <__adddf3+0x5ef>
c0027c95:	31 ff                	xor    edi,edi
c0027c97:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027c9c:	e9 4f 01 00 00       	jmp    c0027df0 <__adddf3+0x645>
c0027ca1:	89 c1                	mov    ecx,eax
c0027ca3:	89 d0                	mov    eax,edx
c0027ca5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027ca8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027cab:	89 ca                	mov    edx,ecx
c0027cad:	85 c9                	test   ecx,ecx
c0027caf:	79 2c                	jns    c0027cdd <__adddf3+0x532>
c0027cb1:	31 c9                	xor    ecx,ecx
c0027cb3:	f7 d8                	neg    eax
c0027cb5:	0f 95 c1             	setne  cl
c0027cb8:	01 ca                	add    edx,ecx
c0027cba:	f7 da                	neg    edx
c0027cbc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027cbf:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027cc2:	eb 19                	jmp    c0027cdd <__adddf3+0x532>
c0027cc4:	85 c0                	test   eax,eax
c0027cc6:	0f 89 e5 00 00 00    	jns    c0027db1 <__adddf3+0x606>
c0027ccc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027cd1:	89 c1                	mov    ecx,eax
c0027cd3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cd6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027cd9:	89 d0                	mov    eax,edx
c0027cdb:	89 ca                	mov    edx,ecx
c0027cdd:	85 d2                	test   edx,edx
c0027cdf:	74 59                	je     c0027d3a <__adddf3+0x58f>
c0027ce1:	0f bd da             	bsr    ebx,edx
c0027ce4:	83 f3 1f             	xor    ebx,0x1f
c0027ce7:	88 d9                	mov    cl,bl
c0027ce9:	d3 e2                	shl    edx,cl
c0027ceb:	bf 20 00 00 00       	mov    edi,0x20
c0027cf0:	89 f9                	mov    ecx,edi
c0027cf2:	29 d9                	sub    ecx,ebx
c0027cf4:	89 c6                	mov    esi,eax
c0027cf6:	d3 ee                	shr    esi,cl
c0027cf8:	09 d6                	or     esi,edx
c0027cfa:	88 d9                	mov    cl,bl
c0027cfc:	d3 e0                	shl    eax,cl
c0027cfe:	89 c2                	mov    edx,eax
c0027d00:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d03:	25 ff 07 00 00       	and    eax,0x7ff
c0027d08:	39 d8                	cmp    eax,ebx
c0027d0a:	7f 22                	jg     c0027d2e <__adddf3+0x583>
c0027d0c:	29 c3                	sub    ebx,eax
c0027d0e:	43                   	inc    ebx
c0027d0f:	88 d9                	mov    cl,bl
c0027d11:	d3 ea                	shr    edx,cl
c0027d13:	29 df                	sub    edi,ebx
c0027d15:	89 f9                	mov    ecx,edi
c0027d17:	89 f0                	mov    eax,esi
c0027d19:	d3 e0                	shl    eax,cl
c0027d1b:	09 c2                	or     edx,eax
c0027d1d:	89 f0                	mov    eax,esi
c0027d1f:	88 d9                	mov    cl,bl
c0027d21:	d3 e8                	shr    eax,cl
c0027d23:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d26:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027d2c:	eb 6f                	jmp    c0027d9d <__adddf3+0x5f2>
c0027d2e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d31:	29 d8                	sub    eax,ebx
c0027d33:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d36:	89 f0                	mov    eax,esi
c0027d38:	eb 59                	jmp    c0027d93 <__adddf3+0x5e8>
c0027d3a:	85 c0                	test   eax,eax
c0027d3c:	74 6a                	je     c0027da8 <__adddf3+0x5fd>
c0027d3e:	0f bd c8             	bsr    ecx,eax
c0027d41:	83 f1 1f             	xor    ecx,0x1f
c0027d44:	d3 e0                	shl    eax,cl
c0027d46:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027d49:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027d4f:	83 c1 20             	add    ecx,0x20
c0027d52:	39 cb                	cmp    ebx,ecx
c0027d54:	7f 35                	jg     c0027d8b <__adddf3+0x5e0>
c0027d56:	29 d9                	sub    ecx,ebx
c0027d58:	8d 71 01             	lea    esi,[ecx+0x1]
c0027d5b:	83 fe 1f             	cmp    esi,0x1f
c0027d5e:	7e 09                	jle    c0027d69 <__adddf3+0x5be>
c0027d60:	83 e9 1f             	sub    ecx,0x1f
c0027d63:	d3 e8                	shr    eax,cl
c0027d65:	89 c3                	mov    ebx,eax
c0027d67:	eb 11                	jmp    c0027d7a <__adddf3+0x5cf>
c0027d69:	b9 20 00 00 00       	mov    ecx,0x20
c0027d6e:	29 f1                	sub    ecx,esi
c0027d70:	89 c3                	mov    ebx,eax
c0027d72:	d3 e3                	shl    ebx,cl
c0027d74:	89 f1                	mov    ecx,esi
c0027d76:	d3 e8                	shr    eax,cl
c0027d78:	89 c2                	mov    edx,eax
c0027d7a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d7d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027d82:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d85:	89 d0                	mov    eax,edx
c0027d87:	89 da                	mov    edx,ebx
c0027d89:	eb 26                	jmp    c0027db1 <__adddf3+0x606>
c0027d8b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d8e:	29 cf                	sub    edi,ecx
c0027d90:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027d93:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027d98:	eb 17                	jmp    c0027db1 <__adddf3+0x606>
c0027d9a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d9d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027da0:	eb 0f                	jmp    c0027db1 <__adddf3+0x606>
c0027da2:	31 d2                	xor    edx,edx
c0027da4:	31 c0                	xor    eax,eax
c0027da6:	eb 09                	jmp    c0027db1 <__adddf3+0x606>
c0027da8:	89 c2                	mov    edx,eax
c0027daa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027db1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027db4:	c1 e1 14             	shl    ecx,0x14
c0027db7:	89 c3                	mov    ebx,eax
c0027db9:	c1 eb 0b             	shr    ebx,0xb
c0027dbc:	09 d9                	or     ecx,ebx
c0027dbe:	89 d3                	mov    ebx,edx
c0027dc0:	c1 eb 0b             	shr    ebx,0xb
c0027dc3:	c1 e0 15             	shl    eax,0x15
c0027dc6:	09 d8                	or     eax,ebx
c0027dc8:	89 c7                	mov    edi,eax
c0027dca:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027dd0:	0f 95 c0             	setne  al
c0027dd3:	89 c6                	mov    esi,eax
c0027dd5:	09 f3                	or     ebx,esi
c0027dd7:	83 e3 01             	and    ebx,0x1
c0027dda:	c1 ea 0a             	shr    edx,0xa
c0027ddd:	21 da                	and    edx,ebx
c0027ddf:	89 f8                	mov    eax,edi
c0027de1:	01 d0                	add    eax,edx
c0027de3:	83 d1 00             	adc    ecx,0x0
c0027de6:	89 c7                	mov    edi,eax
c0027de8:	eb 06                	jmp    c0027df0 <__adddf3+0x645>
c0027dea:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ded:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027df0:	89 f8                	mov    eax,edi
c0027df2:	89 ca                	mov    edx,ecx
c0027df4:	83 c4 24             	add    esp,0x24
c0027df7:	5b                   	pop    ebx
c0027df8:	5e                   	pop    esi
c0027df9:	5f                   	pop    edi
c0027dfa:	5d                   	pop    ebp
c0027dfb:	c3                   	ret    

c0027dfc <__subdf3>:
c0027dfc:	55                   	push   ebp
c0027dfd:	89 e5                	mov    ebp,esp
c0027dff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e02:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027e05:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027e0b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027e0e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027e11:	5d                   	pop    ebp
c0027e12:	e9 94 f9 ff ff       	jmp    c00277ab <__adddf3>

c0027e17 <__negdf2>:
c0027e17:	55                   	push   ebp
c0027e18:	89 e5                	mov    ebp,esp
c0027e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027e1d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e20:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027e26:	5d                   	pop    ebp
c0027e27:	c3                   	ret    

c0027e28 <__muldf3>:
c0027e28:	55                   	push   ebp
c0027e29:	89 e5                	mov    ebp,esp
c0027e2b:	57                   	push   edi
c0027e2c:	56                   	push   esi
c0027e2d:	53                   	push   ebx
c0027e2e:	83 ec 24             	sub    esp,0x24
c0027e31:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027e37:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e3a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e3d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027e40:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027e43:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e46:	89 c8                	mov    eax,ecx
c0027e48:	c1 f8 14             	sar    eax,0x14
c0027e4b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e4e:	89 f8                	mov    eax,edi
c0027e50:	89 fb                	mov    ebx,edi
c0027e52:	c1 e3 0b             	shl    ebx,0xb
c0027e55:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027e58:	c1 e1 0b             	shl    ecx,0xb
c0027e5b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027e61:	c1 e8 15             	shr    eax,0x15
c0027e64:	09 c1                	or     ecx,eax
c0027e66:	89 d6                	mov    esi,edx
c0027e68:	89 d0                	mov    eax,edx
c0027e6a:	c1 f8 14             	sar    eax,0x14
c0027e6d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027e70:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027e73:	89 c3                	mov    ebx,eax
c0027e75:	c1 e3 0b             	shl    ebx,0xb
c0027e78:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027e7b:	c1 e6 0b             	shl    esi,0xb
c0027e7e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027e84:	c1 e8 15             	shr    eax,0x15
c0027e87:	09 c6                	or     esi,eax
c0027e89:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e8c:	25 ff 07 00 00       	and    eax,0x7ff
c0027e91:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027e94:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e97:	25 ff 07 00 00       	and    eax,0x7ff
c0027e9c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027e9f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ea2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ea5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027eac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027eaf:	40                   	inc    eax
c0027eb0:	a9 fe 07 00 00       	test   eax,0x7fe
c0027eb5:	0f 85 8d 00 00 00    	jne    c0027f48 <__muldf3+0x120>
c0027ebb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ebe:	09 c8                	or     eax,ecx
c0027ec0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027ec4:	74 44                	je     c0027f0a <__muldf3+0xe2>
c0027ec6:	85 c0                	test   eax,eax
c0027ec8:	0f 85 31 02 00 00    	jne    c00280ff <__muldf3+0x2d7>
c0027ece:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ed1:	40                   	inc    eax
c0027ed2:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ed7:	75 13                	jne    c0027eec <__muldf3+0xc4>
c0027ed9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027edc:	09 f1                	or     ecx,esi
c0027ede:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ee2:	74 22                	je     c0027f06 <__muldf3+0xde>
c0027ee4:	85 c9                	test   ecx,ecx
c0027ee6:	0f 85 0d 02 00 00    	jne    c00280f9 <__muldf3+0x2d1>
c0027eec:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027ef0:	0f 89 09 02 00 00    	jns    c00280ff <__muldf3+0x2d7>
c0027ef6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ef9:	05 00 00 00 80       	add    eax,0x80000000
c0027efe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f01:	e9 f9 01 00 00       	jmp    c00280ff <__muldf3+0x2d7>
c0027f06:	85 c9                	test   ecx,ecx
c0027f08:	eb 2e                	jmp    c0027f38 <__muldf3+0x110>
c0027f0a:	85 c0                	test   eax,eax
c0027f0c:	74 20                	je     c0027f2e <__muldf3+0x106>
c0027f0e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027f11:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f14:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f17:	c1 ef 1f             	shr    edi,0x1f
c0027f1a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027f1d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027f20:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027f23:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f26:	09 f9                	or     ecx,edi
c0027f28:	78 1e                	js     c0027f48 <__muldf3+0x120>
c0027f2a:	89 c3                	mov    ebx,eax
c0027f2c:	eb e0                	jmp    c0027f0e <__muldf3+0xe6>
c0027f2e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f31:	f7 d0                	not    eax
c0027f33:	a9 ff 07 00 00       	test   eax,0x7ff
c0027f38:	75 b2                	jne    c0027eec <__muldf3+0xc4>
c0027f3a:	31 ff                	xor    edi,edi
c0027f3c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027f43:	e9 b7 01 00 00       	jmp    c00280ff <__muldf3+0x2d7>
c0027f48:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f4b:	40                   	inc    eax
c0027f4c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f51:	75 57                	jne    c0027faa <__muldf3+0x182>
c0027f53:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027f56:	09 f0                	or     eax,esi
c0027f58:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027f5c:	74 23                	je     c0027f81 <__muldf3+0x159>
c0027f5e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027f62:	0f 89 91 01 00 00    	jns    c00280f9 <__muldf3+0x2d1>
c0027f68:	85 c0                	test   eax,eax
c0027f6a:	0f 85 89 01 00 00    	jne    c00280f9 <__muldf3+0x2d1>
c0027f70:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f73:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027f79:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f7c:	e9 7e 01 00 00       	jmp    c00280ff <__muldf3+0x2d7>
c0027f81:	85 c0                	test   eax,eax
c0027f83:	75 0c                	jne    c0027f91 <__muldf3+0x169>
c0027f85:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027f89:	0f 89 6a 01 00 00    	jns    c00280f9 <__muldf3+0x2d1>
c0027f8f:	eb df                	jmp    c0027f70 <__muldf3+0x148>
c0027f91:	01 f6                	add    esi,esi
c0027f93:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f96:	c1 ea 1f             	shr    edx,0x1f
c0027f99:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027f9c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027f9f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027fa2:	09 d6                	or     esi,edx
c0027fa4:	78 04                	js     c0027faa <__muldf3+0x182>
c0027fa6:	89 c3                	mov    ebx,eax
c0027fa8:	eb e7                	jmp    c0027f91 <__muldf3+0x169>
c0027faa:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027fb0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027fb6:	89 c8                	mov    eax,ecx
c0027fb8:	f7 e6                	mul    esi
c0027fba:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027fbd:	89 c7                	mov    edi,eax
c0027fbf:	89 c8                	mov    eax,ecx
c0027fc1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027fc4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027fc7:	89 c1                	mov    ecx,eax
c0027fc9:	89 f0                	mov    eax,esi
c0027fcb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027fce:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027fd1:	89 c6                	mov    esi,eax
c0027fd3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fd6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027fd9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027fdc:	31 c0                	xor    eax,eax
c0027fde:	01 f1                	add    ecx,esi
c0027fe0:	0f 92 c0             	setb   al
c0027fe3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027fe6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027fe9:	83 d6 00             	adc    esi,0x0
c0027fec:	01 c7                	add    edi,eax
c0027fee:	83 d6 00             	adc    esi,0x0
c0027ff1:	01 ca                	add    edx,ecx
c0027ff3:	0f 92 c1             	setb   cl
c0027ff6:	0f b6 c9             	movzx  ecx,cl
c0027ff9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027ffc:	83 d6 00             	adc    esi,0x0
c0027fff:	01 cf                	add    edi,ecx
c0028001:	83 d6 00             	adc    esi,0x0
c0028004:	31 c9                	xor    ecx,ecx
c0028006:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028009:	0f 95 c1             	setne  cl
c002800c:	09 cf                	or     edi,ecx
c002800e:	85 f6                	test   esi,esi
c0028010:	78 0c                	js     c002801e <__muldf3+0x1f6>
c0028012:	01 f6                	add    esi,esi
c0028014:	89 f8                	mov    eax,edi
c0028016:	c1 e8 1f             	shr    eax,0x1f
c0028019:	09 c6                	or     esi,eax
c002801b:	01 ff                	add    edi,edi
c002801d:	4b                   	dec    ebx
c002801e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028024:	0f 8f 85 00 00 00    	jg     c00280af <__muldf3+0x287>
c002802a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028030:	85 db                	test   ebx,ebx
c0028032:	0f 8f 84 00 00 00    	jg     c00280bc <__muldf3+0x294>
c0028038:	83 fb cc             	cmp    ebx,0xffffffcc
c002803b:	7c 79                	jl     c00280b6 <__muldf3+0x28e>
c002803d:	ba 01 00 00 00       	mov    edx,0x1
c0028042:	29 da                	sub    edx,ebx
c0028044:	81 ce 00 00 00 80    	or     esi,0x80000000
c002804a:	83 fa 1f             	cmp    edx,0x1f
c002804d:	7e 30                	jle    c002807f <__muldf3+0x257>
c002804f:	83 fa 20             	cmp    edx,0x20
c0028052:	75 0b                	jne    c002805f <__muldf3+0x237>
c0028054:	31 c0                	xor    eax,eax
c0028056:	85 ff                	test   edi,edi
c0028058:	0f 95 c0             	setne  al
c002805b:	89 c7                	mov    edi,eax
c002805d:	eb 1a                	jmp    c0028079 <__muldf3+0x251>
c002805f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028062:	89 f0                	mov    eax,esi
c0028064:	d3 e0                	shl    eax,cl
c0028066:	09 f8                	or     eax,edi
c0028068:	0f 95 c0             	setne  al
c002806b:	0f b6 c0             	movzx  eax,al
c002806e:	89 c7                	mov    edi,eax
c0028070:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028075:	29 d9                	sub    ecx,ebx
c0028077:	d3 ee                	shr    esi,cl
c0028079:	09 f7                	or     edi,esi
c002807b:	31 db                	xor    ebx,ebx
c002807d:	eb 3b                	jmp    c00280ba <__muldf3+0x292>
c002807f:	83 c3 1f             	add    ebx,0x1f
c0028082:	89 f0                	mov    eax,esi
c0028084:	88 d9                	mov    cl,bl
c0028086:	d3 e0                	shl    eax,cl
c0028088:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002808b:	89 f8                	mov    eax,edi
c002808d:	88 d1                	mov    cl,dl
c002808f:	d3 e8                	shr    eax,cl
c0028091:	89 c1                	mov    ecx,eax
c0028093:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028096:	09 c8                	or     eax,ecx
c0028098:	88 d9                	mov    cl,bl
c002809a:	d3 e7                	shl    edi,cl
c002809c:	31 db                	xor    ebx,ebx
c002809e:	85 ff                	test   edi,edi
c00280a0:	0f 95 c3             	setne  bl
c00280a3:	89 df                	mov    edi,ebx
c00280a5:	09 c7                	or     edi,eax
c00280a7:	88 d1                	mov    cl,dl
c00280a9:	d3 ee                	shr    esi,cl
c00280ab:	31 db                	xor    ebx,ebx
c00280ad:	eb 0d                	jmp    c00280bc <__muldf3+0x294>
c00280af:	bb ff 07 00 00       	mov    ebx,0x7ff
c00280b4:	eb 02                	jmp    c00280b8 <__muldf3+0x290>
c00280b6:	31 db                	xor    ebx,ebx
c00280b8:	31 ff                	xor    edi,edi
c00280ba:	31 f6                	xor    esi,esi
c00280bc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280bf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00280c2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00280c7:	09 c3                	or     ebx,eax
c00280c9:	c1 e3 14             	shl    ebx,0x14
c00280cc:	89 f0                	mov    eax,esi
c00280ce:	c1 e8 0b             	shr    eax,0xb
c00280d1:	09 c3                	or     ebx,eax
c00280d3:	89 f8                	mov    eax,edi
c00280d5:	c1 e8 0b             	shr    eax,0xb
c00280d8:	c1 e6 15             	shl    esi,0x15
c00280db:	09 c6                	or     esi,eax
c00280dd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00280e3:	0f 95 c1             	setne  cl
c00280e6:	09 c8                	or     eax,ecx
c00280e8:	83 e0 01             	and    eax,0x1
c00280eb:	c1 ef 0a             	shr    edi,0xa
c00280ee:	21 c7                	and    edi,eax
c00280f0:	01 f7                	add    edi,esi
c00280f2:	83 d3 00             	adc    ebx,0x0
c00280f5:	89 da                	mov    edx,ebx
c00280f7:	eb 03                	jmp    c00280fc <__muldf3+0x2d4>
c00280f9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00280fc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00280ff:	89 f8                	mov    eax,edi
c0028101:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028104:	83 c4 24             	add    esp,0x24
c0028107:	5b                   	pop    ebx
c0028108:	5e                   	pop    esi
c0028109:	5f                   	pop    edi
c002810a:	5d                   	pop    ebp
c002810b:	c3                   	ret    

c002810c <__divdf3>:
c002810c:	55                   	push   ebp
c002810d:	89 e5                	mov    ebp,esp
c002810f:	57                   	push   edi
c0028110:	56                   	push   esi
c0028111:	53                   	push   ebx
c0028112:	83 ec 2c             	sub    esp,0x2c
c0028115:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028118:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002811b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002811e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028121:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028124:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028127:	89 ce                	mov    esi,ecx
c0028129:	89 c8                	mov    eax,ecx
c002812b:	c1 f8 14             	sar    eax,0x14
c002812e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028131:	89 f8                	mov    eax,edi
c0028133:	89 fb                	mov    ebx,edi
c0028135:	c1 e3 0b             	shl    ebx,0xb
c0028138:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002813b:	c1 e6 0b             	shl    esi,0xb
c002813e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028144:	c1 e8 15             	shr    eax,0x15
c0028147:	09 c6                	or     esi,eax
c0028149:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002814c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002814f:	89 c2                	mov    edx,eax
c0028151:	c1 fa 14             	sar    edx,0x14
c0028154:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028157:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002815a:	89 de                	mov    esi,ebx
c002815c:	c1 e6 0b             	shl    esi,0xb
c002815f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028162:	c1 e0 0b             	shl    eax,0xb
c0028165:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002816a:	c1 eb 15             	shr    ebx,0x15
c002816d:	09 d8                	or     eax,ebx
c002816f:	89 c2                	mov    edx,eax
c0028171:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028174:	25 ff 07 00 00       	and    eax,0x7ff
c0028179:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002817c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002817f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028185:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028188:	29 d8                	sub    eax,ebx
c002818a:	05 ff 03 00 00       	add    eax,0x3ff
c002818f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028192:	46                   	inc    esi
c0028193:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028199:	0f 85 a5 00 00 00    	jne    c0028244 <__divdf3+0x138>
c002819f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00281a2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00281a5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00281a9:	74 2a                	je     c00281d5 <__divdf3+0xc9>
c00281ab:	85 f6                	test   esi,esi
c00281ad:	0f 85 cc 02 00 00    	jne    c002847f <__divdf3+0x373>
c00281b3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00281b6:	40                   	inc    eax
c00281b7:	a9 fe 07 00 00       	test   eax,0x7fe
c00281bc:	75 26                	jne    c00281e4 <__divdf3+0xd8>
c00281be:	85 db                	test   ebx,ebx
c00281c0:	74 22                	je     c00281e4 <__divdf3+0xd8>
c00281c2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00281c5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00281c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00281cb:	09 d0                	or     eax,edx
c00281cd:	0f 85 ac 02 00 00    	jne    c002847f <__divdf3+0x373>
c00281d3:	eb 63                	jmp    c0028238 <__divdf3+0x12c>
c00281d5:	85 f6                	test   esi,esi
c00281d7:	75 22                	jne    c00281fb <__divdf3+0xef>
c00281d9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00281dc:	40                   	inc    eax
c00281dd:	a9 fe 07 00 00       	test   eax,0x7fe
c00281e2:	74 36                	je     c002821a <__divdf3+0x10e>
c00281e4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00281e8:	0f 89 91 02 00 00    	jns    c002847f <__divdf3+0x373>
c00281ee:	89 f8                	mov    eax,edi
c00281f0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00281f6:	e9 80 02 00 00       	jmp    c002847b <__divdf3+0x36f>
c00281fb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00281fe:	01 f6                	add    esi,esi
c0028200:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028203:	c1 ef 1f             	shr    edi,0x1f
c0028206:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028209:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002820c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002820f:	09 f7                	or     edi,esi
c0028211:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028214:	78 2e                	js     c0028244 <__divdf3+0x138>
c0028216:	89 c8                	mov    eax,ecx
c0028218:	eb e1                	jmp    c00281fb <__divdf3+0xef>
c002821a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002821d:	09 d0                	or     eax,edx
c002821f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028223:	74 0f                	je     c0028234 <__divdf3+0x128>
c0028225:	85 c0                	test   eax,eax
c0028227:	74 bb                	je     c00281e4 <__divdf3+0xd8>
c0028229:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002822c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002822f:	e9 4b 02 00 00       	jmp    c002847f <__divdf3+0x373>
c0028234:	85 c0                	test   eax,eax
c0028236:	75 ac                	jne    c00281e4 <__divdf3+0xd8>
c0028238:	31 ff                	xor    edi,edi
c002823a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002823f:	e9 3b 02 00 00       	jmp    c002847f <__divdf3+0x373>
c0028244:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028247:	8d 4f 01             	lea    ecx,[edi+0x1]
c002824a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028250:	75 6b                	jne    c00282bd <__divdf3+0x1b1>
c0028252:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028255:	09 d6                	or     esi,edx
c0028257:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002825b:	74 28                	je     c0028285 <__divdf3+0x179>
c002825d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028260:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028263:	85 f6                	test   esi,esi
c0028265:	0f 85 14 02 00 00    	jne    c002847f <__divdf3+0x373>
c002826b:	31 ff                	xor    edi,edi
c002826d:	31 c9                	xor    ecx,ecx
c002826f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028272:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028275:	0f 89 04 02 00 00    	jns    c002847f <__divdf3+0x373>
c002827b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028280:	e9 fa 01 00 00       	jmp    c002847f <__divdf3+0x373>
c0028285:	85 f6                	test   esi,esi
c0028287:	75 1b                	jne    c00282a4 <__divdf3+0x198>
c0028289:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002828c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002828f:	25 00 00 00 80       	and    eax,0x80000000
c0028294:	31 c9                	xor    ecx,ecx
c0028296:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002829b:	89 cf                	mov    edi,ecx
c002829d:	89 c1                	mov    ecx,eax
c002829f:	e9 db 01 00 00       	jmp    c002847f <__divdf3+0x373>
c00282a4:	01 d2                	add    edx,edx
c00282a6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00282a9:	c1 eb 1f             	shr    ebx,0x1f
c00282ac:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00282af:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00282b2:	8d 48 01             	lea    ecx,[eax+0x1]
c00282b5:	09 da                	or     edx,ebx
c00282b7:	78 04                	js     c00282bd <__divdf3+0x1b1>
c00282b9:	89 c8                	mov    eax,ecx
c00282bb:	eb e7                	jmp    c00282a4 <__divdf3+0x198>
c00282bd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00282c0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00282c6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00282cc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00282cf:	39 d6                	cmp    esi,edx
c00282d1:	77 0d                	ja     c00282e0 <__divdf3+0x1d4>
c00282d3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00282d6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00282d9:	72 1b                	jb     c00282f6 <__divdf3+0x1ea>
c00282db:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00282de:	75 16                	jne    c00282f6 <__divdf3+0x1ea>
c00282e0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00282e3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00282e6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00282e9:	83 de 00             	sbb    esi,0x0
c00282ec:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00282ef:	ba 01 00 00 00       	mov    edx,0x1
c00282f4:	eb 02                	jmp    c00282f8 <__divdf3+0x1ec>
c00282f6:	31 d2                	xor    edx,edx
c00282f8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00282ff:	31 ff                	xor    edi,edi
c0028301:	01 ff                	add    edi,edi
c0028303:	89 d1                	mov    ecx,edx
c0028305:	c1 e9 1f             	shr    ecx,0x1f
c0028308:	09 cf                	or     edi,ecx
c002830a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002830d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028310:	89 da                	mov    edx,ebx
c0028312:	89 f3                	mov    ebx,esi
c0028314:	8d 34 36             	lea    esi,[esi+esi*1]
c0028317:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002831a:	c1 e9 1f             	shr    ecx,0x1f
c002831d:	09 ce                	or     esi,ecx
c002831f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028322:	01 c9                	add    ecx,ecx
c0028324:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028327:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002832a:	85 db                	test   ebx,ebx
c002832c:	78 29                	js     c0028357 <__divdf3+0x24b>
c002832e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028331:	72 07                	jb     c002833a <__divdf3+0x22e>
c0028333:	75 3c                	jne    c0028371 <__divdf3+0x265>
c0028335:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028338:	77 37                	ja     c0028371 <__divdf3+0x265>
c002833a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002833d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028340:	31 d2                	xor    edx,edx
c0028342:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028345:	0f 97 c2             	seta   dl
c0028348:	29 d6                	sub    esi,edx
c002834a:	89 d9                	mov    ecx,ebx
c002834c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002834f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028352:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028355:	eb 17                	jmp    c002836e <__divdf3+0x262>
c0028357:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002835a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002835d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028360:	0f 97 c1             	seta   cl
c0028363:	0f b6 c9             	movzx  ecx,cl
c0028366:	29 ce                	sub    esi,ecx
c0028368:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002836b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002836e:	83 ca 01             	or     edx,0x1
c0028371:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028374:	75 8b                	jne    c0028301 <__divdf3+0x1f5>
c0028376:	c1 e7 09             	shl    edi,0x9
c0028379:	89 d1                	mov    ecx,edx
c002837b:	c1 e9 17             	shr    ecx,0x17
c002837e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028381:	09 f3                	or     ebx,esi
c0028383:	0f 95 c3             	setne  bl
c0028386:	0f b6 db             	movzx  ebx,bl
c0028389:	c1 e2 09             	shl    edx,0x9
c002838c:	09 d3                	or     ebx,edx
c002838e:	89 ca                	mov    edx,ecx
c0028390:	09 fa                	or     edx,edi
c0028392:	78 0c                	js     c00283a0 <__divdf3+0x294>
c0028394:	01 d2                	add    edx,edx
c0028396:	89 d9                	mov    ecx,ebx
c0028398:	c1 e9 1f             	shr    ecx,0x1f
c002839b:	09 ca                	or     edx,ecx
c002839d:	01 db                	add    ebx,ebx
c002839f:	48                   	dec    eax
c00283a0:	3d fe 07 00 00       	cmp    eax,0x7fe
c00283a5:	0f 8f 83 00 00 00    	jg     c002842e <__divdf3+0x322>
c00283ab:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00283b1:	85 c0                	test   eax,eax
c00283b3:	0f 8f 82 00 00 00    	jg     c002843b <__divdf3+0x32f>
c00283b9:	83 f8 cc             	cmp    eax,0xffffffcc
c00283bc:	7c 77                	jl     c0028435 <__divdf3+0x329>
c00283be:	be 01 00 00 00       	mov    esi,0x1
c00283c3:	29 c6                	sub    esi,eax
c00283c5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00283cb:	83 fe 1f             	cmp    esi,0x1f
c00283ce:	7e 2f                	jle    c00283ff <__divdf3+0x2f3>
c00283d0:	83 fe 20             	cmp    esi,0x20
c00283d3:	75 0a                	jne    c00283df <__divdf3+0x2d3>
c00283d5:	85 db                	test   ebx,ebx
c00283d7:	0f 95 c3             	setne  bl
c00283da:	0f b6 db             	movzx  ebx,bl
c00283dd:	eb 1a                	jmp    c00283f9 <__divdf3+0x2ed>
c00283df:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00283e2:	89 d7                	mov    edi,edx
c00283e4:	d3 e7                	shl    edi,cl
c00283e6:	89 f9                	mov    ecx,edi
c00283e8:	09 d9                	or     ecx,ebx
c00283ea:	0f 95 c3             	setne  bl
c00283ed:	0f b6 db             	movzx  ebx,bl
c00283f0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00283f5:	29 c1                	sub    ecx,eax
c00283f7:	d3 ea                	shr    edx,cl
c00283f9:	09 d3                	or     ebx,edx
c00283fb:	31 c0                	xor    eax,eax
c00283fd:	eb 3a                	jmp    c0028439 <__divdf3+0x32d>
c00283ff:	83 c0 1f             	add    eax,0x1f
c0028402:	89 d7                	mov    edi,edx
c0028404:	88 c1                	mov    cl,al
c0028406:	d3 e7                	shl    edi,cl
c0028408:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002840b:	89 df                	mov    edi,ebx
c002840d:	89 f1                	mov    ecx,esi
c002840f:	d3 ef                	shr    edi,cl
c0028411:	89 f9                	mov    ecx,edi
c0028413:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028416:	09 cf                	or     edi,ecx
c0028418:	88 c1                	mov    cl,al
c002841a:	d3 e3                	shl    ebx,cl
c002841c:	85 db                	test   ebx,ebx
c002841e:	0f 95 c3             	setne  bl
c0028421:	0f b6 db             	movzx  ebx,bl
c0028424:	09 fb                	or     ebx,edi
c0028426:	89 f1                	mov    ecx,esi
c0028428:	d3 ea                	shr    edx,cl
c002842a:	31 c0                	xor    eax,eax
c002842c:	eb 0d                	jmp    c002843b <__divdf3+0x32f>
c002842e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028433:	eb 02                	jmp    c0028437 <__divdf3+0x32b>
c0028435:	31 c0                	xor    eax,eax
c0028437:	31 db                	xor    ebx,ebx
c0028439:	31 d2                	xor    edx,edx
c002843b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002843e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028441:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028447:	09 c8                	or     eax,ecx
c0028449:	c1 e0 14             	shl    eax,0x14
c002844c:	89 d1                	mov    ecx,edx
c002844e:	c1 e9 0b             	shr    ecx,0xb
c0028451:	09 c8                	or     eax,ecx
c0028453:	89 c6                	mov    esi,eax
c0028455:	89 d9                	mov    ecx,ebx
c0028457:	c1 e9 0b             	shr    ecx,0xb
c002845a:	c1 e2 15             	shl    edx,0x15
c002845d:	09 ca                	or     edx,ecx
c002845f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028465:	0f 95 c0             	setne  al
c0028468:	09 c1                	or     ecx,eax
c002846a:	83 e1 01             	and    ecx,0x1
c002846d:	c1 eb 0a             	shr    ebx,0xa
c0028470:	21 cb                	and    ebx,ecx
c0028472:	01 d3                	add    ebx,edx
c0028474:	89 d8                	mov    eax,ebx
c0028476:	83 d6 00             	adc    esi,0x0
c0028479:	89 f2                	mov    edx,esi
c002847b:	89 c7                	mov    edi,eax
c002847d:	89 d1                	mov    ecx,edx
c002847f:	89 f8                	mov    eax,edi
c0028481:	89 ca                	mov    edx,ecx
c0028483:	83 c4 2c             	add    esp,0x2c
c0028486:	5b                   	pop    ebx
c0028487:	5e                   	pop    esi
c0028488:	5f                   	pop    edi
c0028489:	5d                   	pop    ebp
c002848a:	c3                   	ret    

c002848b <__floatsidf>:
c002848b:	55                   	push   ebp
c002848c:	89 e5                	mov    ebp,esp
c002848e:	56                   	push   esi
c002848f:	53                   	push   ebx
c0028490:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028493:	85 db                	test   ebx,ebx
c0028495:	7e 15                	jle    c00284ac <__floatsidf+0x21>
c0028497:	0f bd cb             	bsr    ecx,ebx
c002849a:	83 f1 1f             	xor    ecx,0x1f
c002849d:	d3 e3                	shl    ebx,cl
c002849f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00284a5:	b8 1e 04 00 00       	mov    eax,0x41e
c00284aa:	eb 21                	jmp    c00284cd <__floatsidf+0x42>
c00284ac:	b8 00 00 00 00       	mov    eax,0x0
c00284b1:	ba 00 00 00 00       	mov    edx,0x0
c00284b6:	74 2a                	je     c00284e2 <__floatsidf+0x57>
c00284b8:	f7 db                	neg    ebx
c00284ba:	0f bd cb             	bsr    ecx,ebx
c00284bd:	83 f1 1f             	xor    ecx,0x1f
c00284c0:	d3 e3                	shl    ebx,cl
c00284c2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00284c8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00284cd:	29 c8                	sub    eax,ecx
c00284cf:	c1 e0 14             	shl    eax,0x14
c00284d2:	89 c1                	mov    ecx,eax
c00284d4:	89 de                	mov    esi,ebx
c00284d6:	c1 ee 0b             	shr    esi,0xb
c00284d9:	09 f1                	or     ecx,esi
c00284db:	89 ca                	mov    edx,ecx
c00284dd:	c1 e3 15             	shl    ebx,0x15
c00284e0:	89 d8                	mov    eax,ebx
c00284e2:	5b                   	pop    ebx
c00284e3:	5e                   	pop    esi
c00284e4:	5d                   	pop    ebp
c00284e5:	c3                   	ret    

c00284e6 <__floatunsidf>:
c00284e6:	55                   	push   ebp
c00284e7:	89 e5                	mov    ebp,esp
c00284e9:	56                   	push   esi
c00284ea:	53                   	push   ebx
c00284eb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284ee:	85 db                	test   ebx,ebx
c00284f0:	74 2a                	je     c002851c <__floatunsidf+0x36>
c00284f2:	0f bd cb             	bsr    ecx,ebx
c00284f5:	83 f1 1f             	xor    ecx,0x1f
c00284f8:	d3 e3                	shl    ebx,cl
c00284fa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028500:	b8 1e 04 00 00       	mov    eax,0x41e
c0028505:	29 c8                	sub    eax,ecx
c0028507:	c1 e0 14             	shl    eax,0x14
c002850a:	89 c1                	mov    ecx,eax
c002850c:	89 de                	mov    esi,ebx
c002850e:	c1 ee 0b             	shr    esi,0xb
c0028511:	09 f1                	or     ecx,esi
c0028513:	89 ca                	mov    edx,ecx
c0028515:	c1 e3 15             	shl    ebx,0x15
c0028518:	89 d8                	mov    eax,ebx
c002851a:	eb 04                	jmp    c0028520 <__floatunsidf+0x3a>
c002851c:	31 c0                	xor    eax,eax
c002851e:	31 d2                	xor    edx,edx
c0028520:	5b                   	pop    ebx
c0028521:	5e                   	pop    esi
c0028522:	5d                   	pop    ebp
c0028523:	c3                   	ret    

c0028524 <__fixdfsi>:
c0028524:	55                   	push   ebp
c0028525:	89 e5                	mov    ebp,esp
c0028527:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002852a:	89 d1                	mov    ecx,edx
c002852c:	c1 e1 0b             	shl    ecx,0xb
c002852f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028538:	c1 e8 15             	shr    eax,0x15
c002853b:	09 c1                	or     ecx,eax
c002853d:	c1 fa 14             	sar    edx,0x14
c0028540:	78 1f                	js     c0028561 <__fixdfsi+0x3d>
c0028542:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028548:	31 c0                	xor    eax,eax
c002854a:	83 fa 1e             	cmp    edx,0x1e
c002854d:	77 40                	ja     c002858f <__fixdfsi+0x6b>
c002854f:	89 c8                	mov    eax,ecx
c0028551:	0d 00 00 00 80       	or     eax,0x80000000
c0028556:	b9 1f 00 00 00       	mov    ecx,0x1f
c002855b:	29 d1                	sub    ecx,edx
c002855d:	d3 e8                	shr    eax,cl
c002855f:	eb 2e                	jmp    c002858f <__fixdfsi+0x6b>
c0028561:	31 c0                	xor    eax,eax
c0028563:	81 c2 01 04 00 00    	add    edx,0x401
c0028569:	78 24                	js     c002858f <__fixdfsi+0x6b>
c002856b:	83 fa 1e             	cmp    edx,0x1e
c002856e:	7e 09                	jle    c0028579 <__fixdfsi+0x55>
c0028570:	83 fa 1f             	cmp    edx,0x1f
c0028573:	75 18                	jne    c002858d <__fixdfsi+0x69>
c0028575:	85 c9                	test   ecx,ecx
c0028577:	75 14                	jne    c002858d <__fixdfsi+0x69>
c0028579:	89 c8                	mov    eax,ecx
c002857b:	0d 00 00 00 80       	or     eax,0x80000000
c0028580:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028585:	29 d1                	sub    ecx,edx
c0028587:	d3 e8                	shr    eax,cl
c0028589:	f7 d8                	neg    eax
c002858b:	eb 02                	jmp    c002858f <__fixdfsi+0x6b>
c002858d:	31 c0                	xor    eax,eax
c002858f:	5d                   	pop    ebp
c0028590:	c3                   	ret    

c0028591 <__fixunsdfsi>:
c0028591:	55                   	push   ebp
c0028592:	89 e5                	mov    ebp,esp
c0028594:	53                   	push   ebx
c0028595:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028598:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002859b:	89 d3                	mov    ebx,edx
c002859d:	c1 fb 14             	sar    ebx,0x14
c00285a0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00285a6:	31 c0                	xor    eax,eax
c00285a8:	83 fb 1f             	cmp    ebx,0x1f
c00285ab:	77 1d                	ja     c00285ca <__fixunsdfsi+0x39>
c00285ad:	89 d0                	mov    eax,edx
c00285af:	c1 e0 0b             	shl    eax,0xb
c00285b2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00285b7:	c1 e9 15             	shr    ecx,0x15
c00285ba:	09 c8                	or     eax,ecx
c00285bc:	0d 00 00 00 80       	or     eax,0x80000000
c00285c1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00285c6:	29 d9                	sub    ecx,ebx
c00285c8:	d3 e8                	shr    eax,cl
c00285ca:	5b                   	pop    ebx
c00285cb:	5d                   	pop    ebp
c00285cc:	c3                   	ret    

c00285cd <__cmpdf2>:
c00285cd:	55                   	push   ebp
c00285ce:	89 e5                	mov    ebp,esp
c00285d0:	57                   	push   edi
c00285d1:	56                   	push   esi
c00285d2:	53                   	push   ebx
c00285d3:	83 ec 0c             	sub    esp,0xc
c00285d6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00285d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00285dc:	89 ca                	mov    edx,ecx
c00285de:	c1 ea 14             	shr    edx,0x14
c00285e1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00285e7:	89 cb                	mov    ebx,ecx
c00285e9:	c1 fb 1f             	sar    ebx,0x1f
c00285ec:	31 da                	xor    edx,ebx
c00285ee:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00285f1:	89 df                	mov    edi,ebx
c00285f3:	c1 e7 0b             	shl    edi,0xb
c00285f6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285f9:	c1 e1 0b             	shl    ecx,0xb
c00285fc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028602:	c1 eb 15             	shr    ebx,0x15
c0028605:	09 d9                	or     ecx,ebx
c0028607:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002860a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002860d:	89 ce                	mov    esi,ecx
c002860f:	c1 ee 14             	shr    esi,0x14
c0028612:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028618:	89 cb                	mov    ebx,ecx
c002861a:	c1 fb 1f             	sar    ebx,0x1f
c002861d:	31 de                	xor    esi,ebx
c002861f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028622:	89 df                	mov    edi,ebx
c0028624:	c1 e7 0b             	shl    edi,0xb
c0028627:	c1 e1 0b             	shl    ecx,0xb
c002862a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028630:	c1 eb 15             	shr    ebx,0x15
c0028633:	09 d9                	or     ecx,ebx
c0028635:	89 d3                	mov    ebx,edx
c0028637:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002863d:	43                   	inc    ebx
c002863e:	83 fb 01             	cmp    ebx,0x1
c0028641:	77 08                	ja     c002864b <__cmpdf2+0x7e>
c0028643:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028646:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028649:	75 68                	jne    c00286b3 <__cmpdf2+0xe6>
c002864b:	89 f3                	mov    ebx,esi
c002864d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028653:	43                   	inc    ebx
c0028654:	83 fb 01             	cmp    ebx,0x1
c0028657:	77 06                	ja     c002865f <__cmpdf2+0x92>
c0028659:	89 fb                	mov    ebx,edi
c002865b:	09 cb                	or     ebx,ecx
c002865d:	75 54                	jne    c00286b3 <__cmpdf2+0xe6>
c002865f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028662:	09 f8                	or     eax,edi
c0028664:	09 c8                	or     eax,ecx
c0028666:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028669:	75 12                	jne    c002867d <__cmpdf2+0xb0>
c002866b:	8d 42 01             	lea    eax,[edx+0x1]
c002866e:	83 f8 01             	cmp    eax,0x1
c0028671:	77 0a                	ja     c002867d <__cmpdf2+0xb0>
c0028673:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028676:	31 c0                	xor    eax,eax
c0028678:	83 fb 01             	cmp    ebx,0x1
c002867b:	76 36                	jbe    c00286b3 <__cmpdf2+0xe6>
c002867d:	b8 01 00 00 00       	mov    eax,0x1
c0028682:	39 f2                	cmp    edx,esi
c0028684:	7f 2d                	jg     c00286b3 <__cmpdf2+0xe6>
c0028686:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002868b:	7c 26                	jl     c00286b3 <__cmpdf2+0xe6>
c002868d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028690:	77 07                	ja     c0028699 <__cmpdf2+0xcc>
c0028692:	72 16                	jb     c00286aa <__cmpdf2+0xdd>
c0028694:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028697:	76 0a                	jbe    c00286a3 <__cmpdf2+0xd6>
c0028699:	89 d0                	mov    eax,edx
c002869b:	c1 f8 1f             	sar    eax,0x1f
c002869e:	83 c8 01             	or     eax,0x1
c00286a1:	eb 10                	jmp    c00286b3 <__cmpdf2+0xe6>
c00286a3:	b8 00 00 00 00       	mov    eax,0x0
c00286a8:	73 09                	jae    c00286b3 <__cmpdf2+0xe6>
c00286aa:	89 d0                	mov    eax,edx
c00286ac:	c1 f8 1f             	sar    eax,0x1f
c00286af:	83 e0 02             	and    eax,0x2
c00286b2:	48                   	dec    eax
c00286b3:	83 c4 0c             	add    esp,0xc
c00286b6:	5b                   	pop    ebx
c00286b7:	5e                   	pop    esi
c00286b8:	5f                   	pop    edi
c00286b9:	5d                   	pop    ebp
c00286ba:	c3                   	ret    

c00286bb <__eqdf2>:
c00286bb:	55                   	push   ebp
c00286bc:	89 e5                	mov    ebp,esp
c00286be:	50                   	push   eax
c00286bf:	6a 01                	push   0x1
c00286c1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00286c4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00286c7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00286ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00286cd:	e8 fb fe ff ff       	call   c00285cd <__cmpdf2>
c00286d2:	83 c4 18             	add    esp,0x18
c00286d5:	c9                   	leave  
c00286d6:	c3                   	ret    

c00286d7 <__nedf2>:
c00286d7:	eb e2                	jmp    c00286bb <__eqdf2>

c00286d9 <__gtdf2>:
c00286d9:	55                   	push   ebp
c00286da:	89 e5                	mov    ebp,esp
c00286dc:	50                   	push   eax
c00286dd:	6a ff                	push   0xffffffff
c00286df:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00286e2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00286e5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00286e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00286eb:	e8 dd fe ff ff       	call   c00285cd <__cmpdf2>
c00286f0:	83 c4 18             	add    esp,0x18
c00286f3:	c9                   	leave  
c00286f4:	c3                   	ret    

c00286f5 <__gedf2>:
c00286f5:	eb e2                	jmp    c00286d9 <__gtdf2>

c00286f7 <__ltdf2>:
c00286f7:	eb c2                	jmp    c00286bb <__eqdf2>

c00286f9 <__ledf2>:
c00286f9:	eb c0                	jmp    c00286bb <__eqdf2>

c00286fb <__truncdfsf2>:
c00286fb:	55                   	push   ebp
c00286fc:	89 e5                	mov    ebp,esp
c00286fe:	57                   	push   edi
c00286ff:	56                   	push   esi
c0028700:	53                   	push   ebx
c0028701:	83 ec 0c             	sub    esp,0xc
c0028704:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028707:	89 d1                	mov    ecx,edx
c0028709:	c1 f9 14             	sar    ecx,0x14
c002870c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002870f:	89 df                	mov    edi,ebx
c0028711:	c1 e7 0b             	shl    edi,0xb
c0028714:	89 d0                	mov    eax,edx
c0028716:	c1 e0 0b             	shl    eax,0xb
c0028719:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002871e:	c1 eb 15             	shr    ebx,0x15
c0028721:	09 d8                	or     eax,ebx
c0028723:	89 cb                	mov    ebx,ecx
c0028725:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002872b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028731:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028737:	0f 86 9e 00 00 00    	jbe    c00287db <__truncdfsf2+0xe0>
c002873d:	85 db                	test   ebx,ebx
c002873f:	75 0a                	jne    c002874b <__truncdfsf2+0x50>
c0028741:	c1 fa 17             	sar    edx,0x17
c0028744:	30 d2                	xor    dl,dl
c0028746:	e9 84 00 00 00       	jmp    c00287cf <__truncdfsf2+0xd4>
c002874b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028751:	83 fe 83             	cmp    esi,0xffffff83
c0028754:	7d 4b                	jge    c00287a1 <__truncdfsf2+0xa6>
c0028756:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002875b:	29 f1                	sub    ecx,esi
c002875d:	83 f9 1f             	cmp    ecx,0x1f
c0028760:	7f 6b                	jg     c00287cd <__truncdfsf2+0xd2>
c0028762:	0d 00 00 00 80       	or     eax,0x80000000
c0028767:	89 c3                	mov    ebx,eax
c0028769:	d3 eb                	shr    ebx,cl
c002876b:	be 01 00 00 00       	mov    esi,0x1
c0028770:	d3 e6                	shl    esi,cl
c0028772:	4e                   	dec    esi
c0028773:	21 f0                	and    eax,esi
c0028775:	09 f8                	or     eax,edi
c0028777:	0f 95 c0             	setne  al
c002877a:	0f b6 c0             	movzx  eax,al
c002877d:	09 c3                	or     ebx,eax
c002877f:	89 d9                	mov    ecx,ebx
c0028781:	c1 e9 08             	shr    ecx,0x8
c0028784:	f6 c3 7f             	test   bl,0x7f
c0028787:	0f 95 c0             	setne  al
c002878a:	09 c8                	or     eax,ecx
c002878c:	83 e0 01             	and    eax,0x1
c002878f:	c1 eb 07             	shr    ebx,0x7
c0028792:	21 c3                	and    ebx,eax
c0028794:	81 e2 00 00 00 80    	and    edx,0x80000000
c002879a:	09 d1                	or     ecx,edx
c002879c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002879f:	eb 76                	jmp    c0028817 <__truncdfsf2+0x11c>
c00287a1:	83 c6 80             	add    esi,0xffffff80
c00287a4:	7e 1d                	jle    c00287c3 <__truncdfsf2+0xc8>
c00287a6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00287ac:	75 0b                	jne    c00287b9 <__truncdfsf2+0xbe>
c00287ae:	09 f8                	or     eax,edi
c00287b0:	74 09                	je     c00287bb <__truncdfsf2+0xc0>
c00287b2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00287b7:	eb 02                	jmp    c00287bb <__truncdfsf2+0xc0>
c00287b9:	31 c0                	xor    eax,eax
c00287bb:	c1 fa 17             	sar    edx,0x17
c00287be:	80 ca ff             	or     dl,0xff
c00287c1:	eb 0e                	jmp    c00287d1 <__truncdfsf2+0xd6>
c00287c3:	c1 fa 1f             	sar    edx,0x1f
c00287c6:	c1 e2 08             	shl    edx,0x8
c00287c9:	09 ca                	or     edx,ecx
c00287cb:	eb 04                	jmp    c00287d1 <__truncdfsf2+0xd6>
c00287cd:	31 d2                	xor    edx,edx
c00287cf:	31 c0                	xor    eax,eax
c00287d1:	c1 e2 17             	shl    edx,0x17
c00287d4:	c1 e8 08             	shr    eax,0x8
c00287d7:	09 d0                	or     eax,edx
c00287d9:	eb 3c                	jmp    c0028817 <__truncdfsf2+0x11c>
c00287db:	81 e9 80 03 00 00    	sub    ecx,0x380
c00287e1:	89 ca                	mov    edx,ecx
c00287e3:	c1 fa 0b             	sar    edx,0xb
c00287e6:	c1 e2 08             	shl    edx,0x8
c00287e9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00287ec:	31 db                	xor    ebx,ebx
c00287ee:	85 ff                	test   edi,edi
c00287f0:	0f 95 c3             	setne  bl
c00287f3:	09 d8                	or     eax,ebx
c00287f5:	89 c3                	mov    ebx,eax
c00287f7:	c1 eb 08             	shr    ebx,0x8
c00287fa:	a8 7f                	test   al,0x7f
c00287fc:	0f 95 c2             	setne  dl
c00287ff:	89 d6                	mov    esi,edx
c0028801:	09 de                	or     esi,ebx
c0028803:	83 e6 01             	and    esi,0x1
c0028806:	c1 e8 07             	shr    eax,0x7
c0028809:	21 f0                	and    eax,esi
c002880b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002880e:	09 ca                	or     edx,ecx
c0028810:	c1 e2 17             	shl    edx,0x17
c0028813:	09 da                	or     edx,ebx
c0028815:	01 d0                	add    eax,edx
c0028817:	83 c4 0c             	add    esp,0xc
c002881a:	5b                   	pop    ebx
c002881b:	5e                   	pop    esi
c002881c:	5f                   	pop    edi
c002881d:	5d                   	pop    ebp
c002881e:	c3                   	ret    

c002881f <__extendsfdf2>:
c002881f:	55                   	push   ebp
c0028820:	89 e5                	mov    ebp,esp
c0028822:	57                   	push   edi
c0028823:	56                   	push   esi
c0028824:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028827:	89 d1                	mov    ecx,edx
c0028829:	c1 f9 17             	sar    ecx,0x17
c002882c:	c1 e2 08             	shl    edx,0x8
c002882f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028835:	89 c8                	mov    eax,ecx
c0028837:	80 e4 f8             	and    ah,0xf8
c002883a:	8d 71 01             	lea    esi,[ecx+0x1]
c002883d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028843:	75 27                	jne    c002886c <__extendsfdf2+0x4d>
c0028845:	81 e1 ff 00 00 00    	and    ecx,0xff
c002884b:	75 18                	jne    c0028865 <__extendsfdf2+0x46>
c002884d:	85 d2                	test   edx,edx
c002884f:	74 20                	je     c0028871 <__extendsfdf2+0x52>
c0028851:	41                   	inc    ecx
c0028852:	01 d2                	add    edx,edx
c0028854:	79 fb                	jns    c0028851 <__extendsfdf2+0x32>
c0028856:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002885c:	29 c8                	sub    eax,ecx
c002885e:	05 81 03 00 00       	add    eax,0x381
c0028863:	eb 0c                	jmp    c0028871 <__extendsfdf2+0x52>
c0028865:	05 00 07 00 00       	add    eax,0x700
c002886a:	eb 05                	jmp    c0028871 <__extendsfdf2+0x52>
c002886c:	05 80 03 00 00       	add    eax,0x380
c0028871:	c1 e0 14             	shl    eax,0x14
c0028874:	89 c1                	mov    ecx,eax
c0028876:	89 d0                	mov    eax,edx
c0028878:	c1 e8 0b             	shr    eax,0xb
c002887b:	09 c1                	or     ecx,eax
c002887d:	c1 e2 15             	shl    edx,0x15
c0028880:	89 d0                	mov    eax,edx
c0028882:	89 ca                	mov    edx,ecx
c0028884:	5e                   	pop    esi
c0028885:	5f                   	pop    edi
c0028886:	5d                   	pop    ebp
c0028887:	c3                   	ret    
c0028888:	66 90                	xchg   ax,ax
c002888a:	66 90                	xchg   ax,ax
c002888c:	66 90                	xchg   ax,ax
c002888e:	66 90                	xchg   ax,ax

c0028890 <fabs>:
c0028890:	83 ec 0c             	sub    esp,0xc
c0028893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028897:	89 04 24             	mov    DWORD PTR [esp],eax
c002889a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002889e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00288a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00288a7:	dd 04 24             	fld    QWORD PTR [esp]
c00288aa:	83 c4 0c             	add    esp,0xc
c00288ad:	c3                   	ret    
c00288ae:	66 90                	xchg   ax,ax

c00288b0 <lrint>:
c00288b0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00288b4:	83 ec 04             	sub    esp,0x4
c00288b7:	db 1c 24             	fistp  DWORD PTR [esp]
c00288ba:	58                   	pop    eax
c00288bb:	c3                   	ret    

c00288bc <lrintf>:
c00288bc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00288c0:	83 ec 04             	sub    esp,0x4
c00288c3:	db 1c 24             	fistp  DWORD PTR [esp]
c00288c6:	58                   	pop    eax
c00288c7:	c3                   	ret    

Disassembly of section .init:

c00288c8 <_init>:
c00288c8:	55                   	push   ebp
c00288c9:	89 e5                	mov    ebp,esp
c00288cb:	e8 48 78 fd ff       	call   c0000118 <frame_dummy>
c00288d0:	e8 5b e0 ff ff       	call   c0026930 <__do_global_ctors_aux>
c00288d5:	5d                   	pop    ebp
c00288d6:	c3                   	ret    

Disassembly of section .fini:

c00288d7 <_fini>:
c00288d7:	55                   	push   ebp
c00288d8:	89 e5                	mov    ebp,esp
c00288da:	e8 c9 77 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00288df:	5d                   	pop    ebp
c00288e0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00288e2 <Computer::~Computer()>:
c00288e2:	83 ec 0c             	sub    esp,0xc
c00288e5:	ba 1c a5 02 c0       	mov    edx,0xc002a51c
c00288ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ee:	89 10                	mov    DWORD PTR [eax],edx
c00288f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f4:	83 ec 0c             	sub    esp,0xc
c00288f7:	50                   	push   eax
c00288f8:	e8 8b b2 fe ff       	call   c0013b88 <Device::~Device()>
c00288fd:	83 c4 10             	add    esp,0x10
c0028900:	90                   	nop
c0028901:	83 c4 0c             	add    esp,0xc
c0028904:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028906 <Computer::~Computer()>:
c0028906:	83 ec 0c             	sub    esp,0xc
c0028909:	83 ec 0c             	sub    esp,0xc
c002890c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028910:	e8 cd ff ff ff       	call   c00288e2 <Computer::~Computer()>
c0028915:	83 c4 10             	add    esp,0x10
c0028918:	83 ec 08             	sub    esp,0x8
c002891b:	68 ec 01 00 00       	push   0x1ec
c0028920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028924:	e8 80 9e fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0028929:	83 c4 10             	add    esp,0x10
c002892c:	83 c4 0c             	add    esp,0xc
c002892f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028930 <idleCommon()>:
c0028930:	83 ec 0c             	sub    esp,0xc
c0028933:	fa                   	cli    
c0028934:	ff 05 88 f8 02 c0    	inc    DWORD PTR ds:0xc002f888
c002893a:	e8 42 54 ff ff       	call   c001dd81 <schedule()>
c002893f:	a1 88 f8 02 c0       	mov    eax,ds:0xc002f888
c0028944:	48                   	dec    eax
c0028945:	a3 88 f8 02 c0       	mov    ds:0xc002f888,eax
c002894a:	75 01                	jne    c002894d <idleCommon()+0x1d>
c002894c:	fb                   	sti    
c002894d:	83 c4 0c             	add    esp,0xc
c0028950:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028952 <LinkedList<UnixFile>::~LinkedList()>:
c0028952:	90                   	nop
c0028953:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028954 <LinkedList<UnixFile>::LinkedList()>:
c0028954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028958:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002895e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028962:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028969:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002896d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028978:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002897e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028982:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028989:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002898d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028994:	90                   	nop
c0028995:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028996 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028996:	83 ec 0c             	sub    esp,0xc
c0028999:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002899e:	75 10                	jne    c00289b0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00289a0:	83 ec 0c             	sub    esp,0xc
c00289a3:	68 d4 a7 02 c0       	push   0xc002a7d4
c00289a8:	e8 42 18 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c00289ad:	83 c4 10             	add    esp,0x10
c00289b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00289b6:	85 c0                	test   eax,eax
c00289b8:	74 34                	je     c00289ee <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00289ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289c1:	85 c0                	test   eax,eax
c00289c3:	74 29                	je     c00289ee <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00289c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289ec:	eb 65                	jmp    c0028a53 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00289ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00289f4:	85 c0                	test   eax,eax
c00289f6:	75 4b                	jne    c0028a43 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00289f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289ff:	85 c0                	test   eax,eax
c0028a01:	75 40                	jne    c0028a43 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a0b:	89 10                	mov    DWORD PTR [eax],edx
c0028a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a15:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a1f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a2d:	85 c0                	test   eax,eax
c0028a2f:	74 22                	je     c0028a53 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028a31:	83 ec 0c             	sub    esp,0xc
c0028a34:	68 f6 a7 02 c0       	push   0xc002a7f6
c0028a39:	e8 b1 17 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028a3e:	83 c4 10             	add    esp,0x10
c0028a41:	eb 10                	jmp    c0028a53 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028a43:	83 ec 0c             	sub    esp,0xc
c0028a46:	68 00 a8 02 c0       	push   0xc002a800
c0028a4b:	e8 9f 17 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028a50:	83 c4 10             	add    esp,0x10
c0028a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a5a:	8d 50 01             	lea    edx,[eax+0x1]
c0028a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a61:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a64:	90                   	nop
c0028a65:	83 c4 0c             	add    esp,0xc
c0028a68:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028a6a <LinkedList<UnixFile>::getFirstElement()>:
c0028a6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a70:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028a72 <LinkedList<UnixFile>::removeFirst()>:
c0028a72:	83 ec 0c             	sub    esp,0xc
c0028a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a79:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a7b:	85 c0                	test   eax,eax
c0028a7d:	75 12                	jne    c0028a91 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028a7f:	83 ec 0c             	sub    esp,0xc
c0028a82:	68 0c a8 02 c0       	push   0xc002a80c
c0028a87:	e8 63 17 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028a8c:	83 c4 10             	add    esp,0x10
c0028a8f:	eb 7e                	jmp    c0028b0f <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028a91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a9b:	85 c0                	test   eax,eax
c0028a9d:	74 10                	je     c0028aaf <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028a9f:	83 ec 0c             	sub    esp,0xc
c0028aa2:	68 57 a8 02 c0       	push   0xc002a857
c0028aa7:	e8 43 17 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028aac:	83 c4 10             	add    esp,0x10
c0028aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab3:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ab5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ab8:	85 c0                	test   eax,eax
c0028aba:	75 33                	jne    c0028aef <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ad8:	83 f8 01             	cmp    eax,0x1
c0028adb:	74 21                	je     c0028afe <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028add:	83 ec 0c             	sub    esp,0xc
c0028ae0:	68 30 a8 02 c0       	push   0xc002a830
c0028ae5:	e8 05 17 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028aea:	83 c4 10             	add    esp,0x10
c0028aed:	eb 0f                	jmp    c0028afe <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af3:	8b 00                	mov    eax,DWORD PTR [eax]
c0028af5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afc:	89 10                	mov    DWORD PTR [eax],edx
c0028afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b05:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b0f:	83 c4 0c             	add    esp,0xc
c0028b12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028b14 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028b14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b1b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028b1c <DriverlessDevice::~DriverlessDevice()>:
c0028b1c:	ba fc b0 02 c0       	mov    edx,0xc002b0fc
c0028b21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b25:	89 10                	mov    DWORD PTR [eax],edx
c0028b27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b2b:	50                   	push   eax
c0028b2c:	e8 57 b0 fe ff       	call   c0013b88 <Device::~Device()>
c0028b31:	83 c4 04             	add    esp,0x4
c0028b34:	90                   	nop
c0028b35:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028b36 <DriverlessDevice::~DriverlessDevice()>:
c0028b36:	83 ec 0c             	sub    esp,0xc
c0028b39:	83 ec 0c             	sub    esp,0xc
c0028b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b40:	e8 d7 ff ff ff       	call   c0028b1c <DriverlessDevice::~DriverlessDevice()>
c0028b45:	83 c4 10             	add    esp,0x10
c0028b48:	83 ec 08             	sub    esp,0x8
c0028b4b:	68 58 01 00 00       	push   0x158
c0028b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b54:	e8 50 9c fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0028b59:	83 c4 10             	add    esp,0x10
c0028b5c:	83 c4 0c             	add    esp,0xc
c0028b5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028b60 <LinkedList<Device>::addElement(Device*)>:
c0028b60:	83 ec 0c             	sub    esp,0xc
c0028b63:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b68:	75 10                	jne    c0028b7a <LinkedList<Device>::addElement(Device*)+0x1a>
c0028b6a:	83 ec 0c             	sub    esp,0xc
c0028b6d:	68 d4 a7 02 c0       	push   0xc002a7d4
c0028b72:	e8 78 16 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028b77:	83 c4 10             	add    esp,0x10
c0028b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b80:	85 c0                	test   eax,eax
c0028b82:	74 3a                	je     c0028bbe <LinkedList<Device>::addElement(Device*)+0x5e>
c0028b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b8b:	85 c0                	test   eax,eax
c0028b8d:	74 2f                	je     c0028bbe <LinkedList<Device>::addElement(Device*)+0x5e>
c0028b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b9a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ba8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028baf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bb2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028bbc:	eb 68                	jmp    c0028c26 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bc4:	85 c0                	test   eax,eax
c0028bc6:	75 4e                	jne    c0028c16 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bcf:	85 c0                	test   eax,eax
c0028bd1:	75 43                	jne    c0028c16 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bdb:	89 10                	mov    DWORD PTR [eax],edx
c0028bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028be5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bef:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c00:	85 c0                	test   eax,eax
c0028c02:	74 22                	je     c0028c26 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028c04:	83 ec 0c             	sub    esp,0xc
c0028c07:	68 f6 a7 02 c0       	push   0xc002a7f6
c0028c0c:	e8 de 15 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028c11:	83 c4 10             	add    esp,0x10
c0028c14:	eb 10                	jmp    c0028c26 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028c16:	83 ec 0c             	sub    esp,0xc
c0028c19:	68 00 a8 02 c0       	push   0xc002a800
c0028c1e:	e8 cc 15 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028c23:	83 c4 10             	add    esp,0x10
c0028c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c2d:	8d 50 01             	lea    edx,[eax+0x1]
c0028c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c34:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c37:	90                   	nop
c0028c38:	83 c4 0c             	add    esp,0xc
c0028c3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028c3c <LinkedList<Device>::LinkedList()>:
c0028c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c55:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c75:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c7c:	90                   	nop
c0028c7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028c7e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028c7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c84:	85 c0                	test   eax,eax
c0028c86:	75 0e                	jne    c0028c96 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c8f:	85 c0                	test   eax,eax
c0028c91:	75 03                	jne    c0028c96 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028c93:	b0 01                	mov    al,0x1
c0028c95:	c3                   	ret    
c0028c96:	b0 00                	mov    al,0x0
c0028c98:	90                   	nop
c0028c99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028c9a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028c9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ca0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028ca2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028ca2:	83 ec 0c             	sub    esp,0xc
c0028ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cab:	85 c0                	test   eax,eax
c0028cad:	75 15                	jne    c0028cc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028caf:	83 ec 0c             	sub    esp,0xc
c0028cb2:	68 0c a8 02 c0       	push   0xc002a80c
c0028cb7:	e8 33 15 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028cbc:	83 c4 10             	add    esp,0x10
c0028cbf:	e9 88 00 00 00       	jmp    c0028d4c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ccb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028cce:	85 c0                	test   eax,eax
c0028cd0:	0f 95 c0             	setne  al
c0028cd3:	84 c0                	test   al,al
c0028cd5:	74 10                	je     c0028ce7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028cd7:	83 ec 0c             	sub    esp,0xc
c0028cda:	68 57 a8 02 c0       	push   0xc002a857
c0028cdf:	e8 0b 15 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028ce4:	83 c4 10             	add    esp,0x10
c0028ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ced:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028cf0:	85 c0                	test   eax,eax
c0028cf2:	0f 94 c0             	sete   al
c0028cf5:	84 c0                	test   al,al
c0028cf7:	74 33                	je     c0028d2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d15:	83 f8 01             	cmp    eax,0x1
c0028d18:	74 21                	je     c0028d3b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028d1a:	83 ec 0c             	sub    esp,0xc
c0028d1d:	68 30 a8 02 c0       	push   0xc002a830
c0028d22:	e8 c8 14 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028d27:	83 c4 10             	add    esp,0x10
c0028d2a:	eb 0f                	jmp    c0028d3b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d32:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d39:	89 10                	mov    DWORD PTR [eax],edx
c0028d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d42:	8d 50 ff             	lea    edx,[eax-0x1]
c0028d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d49:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028d4c:	83 c4 0c             	add    esp,0xc
c0028d4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028d50:	83 ec 0c             	sub    esp,0xc
c0028d53:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028d58:	75 10                	jne    c0028d6a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028d5a:	83 ec 0c             	sub    esp,0xc
c0028d5d:	68 d4 a7 02 c0       	push   0xc002a7d4
c0028d62:	e8 88 14 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028d67:	83 c4 10             	add    esp,0x10
c0028d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d70:	85 c0                	test   eax,eax
c0028d72:	74 34                	je     c0028da8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d7b:	85 c0                	test   eax,eax
c0028d7d:	74 29                	je     c0028da8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d8a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d95:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d9f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028da6:	eb 65                	jmp    c0028e0d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0028dae:	85 c0                	test   eax,eax
c0028db0:	75 4b                	jne    c0028dfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028db9:	85 c0                	test   eax,eax
c0028dbb:	75 40                	jne    c0028dfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028dc5:	89 10                	mov    DWORD PTR [eax],edx
c0028dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028dcf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028dd9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028de7:	85 c0                	test   eax,eax
c0028de9:	74 22                	je     c0028e0d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028deb:	83 ec 0c             	sub    esp,0xc
c0028dee:	68 f6 a7 02 c0       	push   0xc002a7f6
c0028df3:	e8 f7 13 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028df8:	83 c4 10             	add    esp,0x10
c0028dfb:	eb 10                	jmp    c0028e0d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028dfd:	83 ec 0c             	sub    esp,0xc
c0028e00:	68 00 a8 02 c0       	push   0xc002a800
c0028e05:	e8 e5 13 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028e0a:	83 c4 10             	add    esp,0x10
c0028e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e14:	8d 50 01             	lea    edx,[eax+0x1]
c0028e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028e1e:	90                   	nop
c0028e1f:	83 c4 0c             	add    esp,0xc
c0028e22:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028e24 <ACPI::~ACPI()>:
c0028e24:	83 ec 0c             	sub    esp,0xc
c0028e27:	ba 90 bb 02 c0       	mov    edx,0xc002bb90
c0028e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e30:	89 10                	mov    DWORD PTR [eax],edx
c0028e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e36:	83 ec 0c             	sub    esp,0xc
c0028e39:	50                   	push   eax
c0028e3a:	e8 49 ad fe ff       	call   c0013b88 <Device::~Device()>
c0028e3f:	83 c4 10             	add    esp,0x10
c0028e42:	90                   	nop
c0028e43:	83 c4 0c             	add    esp,0xc
c0028e46:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028e48 <ACPI::~ACPI()>:
c0028e48:	83 ec 0c             	sub    esp,0xc
c0028e4b:	83 ec 0c             	sub    esp,0xc
c0028e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e52:	e8 cd ff ff ff       	call   c0028e24 <ACPI::~ACPI()>
c0028e57:	83 c4 10             	add    esp,0x10
c0028e5a:	83 ec 08             	sub    esp,0x8
c0028e5d:	68 64 12 00 00       	push   0x1264
c0028e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e66:	e8 3e 99 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0028e6b:	83 c4 10             	add    esp,0x10
c0028e6e:	83 c4 0c             	add    esp,0xc
c0028e71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028e72 <LinkedList<Device>::~LinkedList()>:
c0028e72:	90                   	nop
c0028e73:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028e74 <LinkedList<Device>::isEmpty()>:
c0028e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e78:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e7a:	85 c0                	test   eax,eax
c0028e7c:	75 0e                	jne    c0028e8c <LinkedList<Device>::isEmpty()+0x18>
c0028e7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e85:	85 c0                	test   eax,eax
c0028e87:	75 03                	jne    c0028e8c <LinkedList<Device>::isEmpty()+0x18>
c0028e89:	b0 01                	mov    al,0x1
c0028e8b:	c3                   	ret    
c0028e8c:	b0 00                	mov    al,0x0
c0028e8e:	90                   	nop
c0028e8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028e90 <LinkedList<Device>::getFirstElement()>:
c0028e90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e94:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e96:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028e98 <LinkedList<Device>::removeFirst()>:
c0028e98:	83 ec 0c             	sub    esp,0xc
c0028e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ea1:	85 c0                	test   eax,eax
c0028ea3:	75 15                	jne    c0028eba <LinkedList<Device>::removeFirst()+0x22>
c0028ea5:	83 ec 0c             	sub    esp,0xc
c0028ea8:	68 0c a8 02 c0       	push   0xc002a80c
c0028ead:	e8 3d 13 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028eb2:	83 c4 10             	add    esp,0x10
c0028eb5:	e9 87 00 00 00       	jmp    c0028f41 <LinkedList<Device>::removeFirst()+0xa9>
c0028eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ec1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028ec7:	85 c0                	test   eax,eax
c0028ec9:	74 10                	je     c0028edb <LinkedList<Device>::removeFirst()+0x43>
c0028ecb:	83 ec 0c             	sub    esp,0xc
c0028ece:	68 57 a8 02 c0       	push   0xc002a857
c0028ed3:	e8 17 13 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028ed8:	83 c4 10             	add    esp,0x10
c0028edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028edf:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ee1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028ee7:	85 c0                	test   eax,eax
c0028ee9:	75 33                	jne    c0028f1e <LinkedList<Device>::removeFirst()+0x86>
c0028eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f07:	83 f8 01             	cmp    eax,0x1
c0028f0a:	74 24                	je     c0028f30 <LinkedList<Device>::removeFirst()+0x98>
c0028f0c:	83 ec 0c             	sub    esp,0xc
c0028f0f:	68 30 a8 02 c0       	push   0xc002a830
c0028f14:	e8 d6 12 ff ff       	call   c001a1ef <Krnl::panic(char const*)>
c0028f19:	83 c4 10             	add    esp,0x10
c0028f1c:	eb 12                	jmp    c0028f30 <LinkedList<Device>::removeFirst()+0x98>
c0028f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f22:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f24:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2e:	89 10                	mov    DWORD PTR [eax],edx
c0028f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f37:	8d 50 ff             	lea    edx,[eax-0x1]
c0028f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f41:	83 c4 0c             	add    esp,0xc
c0028f44:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028f46 <CPU::~CPU()>:
c0028f46:	83 ec 0c             	sub    esp,0xc
c0028f49:	ba 2c bf 02 c0       	mov    edx,0xc002bf2c
c0028f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f52:	89 10                	mov    DWORD PTR [eax],edx
c0028f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f58:	83 ec 0c             	sub    esp,0xc
c0028f5b:	50                   	push   eax
c0028f5c:	e8 27 ac fe ff       	call   c0013b88 <Device::~Device()>
c0028f61:	83 c4 10             	add    esp,0x10
c0028f64:	90                   	nop
c0028f65:	83 c4 0c             	add    esp,0xc
c0028f68:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028f6a <CPU::~CPU()>:
c0028f6a:	83 ec 0c             	sub    esp,0xc
c0028f6d:	83 ec 0c             	sub    esp,0xc
c0028f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f74:	e8 cd ff ff ff       	call   c0028f46 <CPU::~CPU()>
c0028f79:	83 c4 10             	add    esp,0x10
c0028f7c:	83 ec 08             	sub    esp,0x8
c0028f7f:	68 98 11 00 00       	push   0x1198
c0028f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f88:	e8 1c 98 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0028f8d:	83 c4 10             	add    esp,0x10
c0028f90:	83 c4 0c             	add    esp,0xc
c0028f93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028f94 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028f94:	90                   	nop
c0028f95:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028f96 <ThreadControlBlock::ThreadControlBlock()>:
c0028f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f9a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028fa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fa5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fb0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028fb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fbb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028fc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fc6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028fcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fd1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028fd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fd9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028fdd:	90                   	nop
c0028fde:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028fe0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fe4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028fea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ff5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ff9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029004:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002900a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002900e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029015:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029019:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029020:	90                   	nop
c0029021:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029022 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029022:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029026:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029029:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002902a <Vm::_FPUState::_FPUState()>:
c002902a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002902e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029035:	90                   	nop
c0029036:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0029038 <PCI::~PCI()>:
c0029038:	83 ec 0c             	sub    esp,0xc
c002903b:	ba 78 ca 02 c0       	mov    edx,0xc002ca78
c0029040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029044:	89 10                	mov    DWORD PTR [eax],edx
c0029046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904a:	83 ec 0c             	sub    esp,0xc
c002904d:	50                   	push   eax
c002904e:	e8 05 a5 fe ff       	call   c0013558 <Bus::~Bus()>
c0029053:	83 c4 10             	add    esp,0x10
c0029056:	90                   	nop
c0029057:	83 c4 0c             	add    esp,0xc
c002905a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002905c <PCI::~PCI()>:
c002905c:	83 ec 0c             	sub    esp,0xc
c002905f:	83 ec 0c             	sub    esp,0xc
c0029062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029066:	e8 cd ff ff ff       	call   c0029038 <PCI::~PCI()>
c002906b:	83 c4 10             	add    esp,0x10
c002906e:	83 ec 08             	sub    esp,0x8
c0029071:	68 5c 01 00 00       	push   0x15c
c0029076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002907a:	e8 2a 97 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c002907f:	83 c4 10             	add    esp,0x10
c0029082:	83 c4 0c             	add    esp,0xc
c0029085:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029086 <IDE::~IDE()>:
c0029086:	83 ec 0c             	sub    esp,0xc
c0029089:	ba 2c cb 02 c0       	mov    edx,0xc002cb2c
c002908e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029092:	89 10                	mov    DWORD PTR [eax],edx
c0029094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029098:	83 ec 0c             	sub    esp,0xc
c002909b:	50                   	push   eax
c002909c:	e8 fd af fe ff       	call   c001409e <HardDiskController::~HardDiskController()>
c00290a1:	83 c4 10             	add    esp,0x10
c00290a4:	90                   	nop
c00290a5:	83 c4 0c             	add    esp,0xc
c00290a8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00290aa <IDE::~IDE()>:
c00290aa:	83 ec 0c             	sub    esp,0xc
c00290ad:	83 ec 0c             	sub    esp,0xc
c00290b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b4:	e8 cd ff ff ff       	call   c0029086 <IDE::~IDE()>
c00290b9:	83 c4 10             	add    esp,0x10
c00290bc:	83 ec 08             	sub    esp,0x8
c00290bf:	68 70 02 00 00       	push   0x270
c00290c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290c8:	e8 dc 96 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c00290cd:	83 c4 10             	add    esp,0x10
c00290d0:	83 c4 0c             	add    esp,0xc
c00290d3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00290d4 <SATABus::~SATABus()>:
c00290d4:	83 ec 0c             	sub    esp,0xc
c00290d7:	ba a4 cb 02 c0       	mov    edx,0xc002cba4
c00290dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e0:	89 10                	mov    DWORD PTR [eax],edx
c00290e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e6:	83 ec 0c             	sub    esp,0xc
c00290e9:	50                   	push   eax
c00290ea:	e8 af af fe ff       	call   c001409e <HardDiskController::~HardDiskController()>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	90                   	nop
c00290f3:	83 c4 0c             	add    esp,0xc
c00290f6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00290f8 <SATABus::~SATABus()>:
c00290f8:	83 ec 0c             	sub    esp,0xc
c00290fb:	83 ec 0c             	sub    esp,0xc
c00290fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029102:	e8 cd ff ff ff       	call   c00290d4 <SATABus::~SATABus()>
c0029107:	83 c4 10             	add    esp,0x10
c002910a:	83 ec 08             	sub    esp,0x8
c002910d:	68 64 01 00 00       	push   0x164
c0029112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029116:	e8 8e 96 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c002911b:	83 c4 10             	add    esp,0x10
c002911e:	83 c4 0c             	add    esp,0xc
c0029121:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029122 <ATA::~ATA()>:
c0029122:	83 ec 0c             	sub    esp,0xc
c0029125:	ba 1c cc 02 c0       	mov    edx,0xc002cc1c
c002912a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912e:	89 10                	mov    DWORD PTR [eax],edx
c0029130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029134:	83 ec 0c             	sub    esp,0xc
c0029137:	50                   	push   eax
c0029138:	e8 43 b0 fe ff       	call   c0014180 <PhysicalDisk::~PhysicalDisk()>
c002913d:	83 c4 10             	add    esp,0x10
c0029140:	90                   	nop
c0029141:	83 c4 0c             	add    esp,0xc
c0029144:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029146 <ATA::~ATA()>:
c0029146:	83 ec 0c             	sub    esp,0xc
c0029149:	83 ec 0c             	sub    esp,0xc
c002914c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029150:	e8 cd ff ff ff       	call   c0029122 <ATA::~ATA()>
c0029155:	83 c4 10             	add    esp,0x10
c0029158:	83 ec 08             	sub    esp,0x8
c002915b:	68 7c 01 00 00       	push   0x17c
c0029160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029164:	e8 40 96 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0029169:	83 c4 10             	add    esp,0x10
c002916c:	83 c4 0c             	add    esp,0xc
c002916f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029170 <ATAPI::~ATAPI()>:
c0029170:	83 ec 0c             	sub    esp,0xc
c0029173:	ba 54 cc 02 c0       	mov    edx,0xc002cc54
c0029178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002917c:	89 10                	mov    DWORD PTR [eax],edx
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	83 ec 0c             	sub    esp,0xc
c0029185:	50                   	push   eax
c0029186:	e8 f5 af fe ff       	call   c0014180 <PhysicalDisk::~PhysicalDisk()>
c002918b:	83 c4 10             	add    esp,0x10
c002918e:	90                   	nop
c002918f:	83 c4 0c             	add    esp,0xc
c0029192:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029194 <ATAPI::~ATAPI()>:
c0029194:	83 ec 0c             	sub    esp,0xc
c0029197:	83 ec 0c             	sub    esp,0xc
c002919a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002919e:	e8 cd ff ff ff       	call   c0029170 <ATAPI::~ATAPI()>
c00291a3:	83 c4 10             	add    esp,0x10
c00291a6:	83 ec 08             	sub    esp,0x8
c00291a9:	68 80 01 00 00       	push   0x180
c00291ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b2:	e8 f2 95 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c00291b7:	83 c4 10             	add    esp,0x10
c00291ba:	83 c4 0c             	add    esp,0xc
c00291bd:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00291be <SATA::~SATA()>:
c00291be:	83 ec 0c             	sub    esp,0xc
c00291c1:	ba 08 cd 02 c0       	mov    edx,0xc002cd08
c00291c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ca:	89 10                	mov    DWORD PTR [eax],edx
c00291cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d0:	83 ec 0c             	sub    esp,0xc
c00291d3:	50                   	push   eax
c00291d4:	e8 a7 af fe ff       	call   c0014180 <PhysicalDisk::~PhysicalDisk()>
c00291d9:	83 c4 10             	add    esp,0x10
c00291dc:	90                   	nop
c00291dd:	83 c4 0c             	add    esp,0xc
c00291e0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00291e2 <SATA::~SATA()>:
c00291e2:	83 ec 0c             	sub    esp,0xc
c00291e5:	83 ec 0c             	sub    esp,0xc
c00291e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ec:	e8 cd ff ff ff       	call   c00291be <SATA::~SATA()>
c00291f1:	83 c4 10             	add    esp,0x10
c00291f4:	83 ec 08             	sub    esp,0x8
c00291f7:	68 7c 01 00 00       	push   0x17c
c00291fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029200:	e8 a4 95 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0029205:	83 c4 10             	add    esp,0x10
c0029208:	83 c4 0c             	add    esp,0xc
c002920b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002920c <SATAPI::~SATAPI()>:
c002920c:	83 ec 0c             	sub    esp,0xc
c002920f:	ba e4 cd 02 c0       	mov    edx,0xc002cde4
c0029214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029218:	89 10                	mov    DWORD PTR [eax],edx
c002921a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002921e:	83 ec 0c             	sub    esp,0xc
c0029221:	50                   	push   eax
c0029222:	e8 59 af fe ff       	call   c0014180 <PhysicalDisk::~PhysicalDisk()>
c0029227:	83 c4 10             	add    esp,0x10
c002922a:	90                   	nop
c002922b:	83 c4 0c             	add    esp,0xc
c002922e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029230 <SATAPI::~SATAPI()>:
c0029230:	83 ec 0c             	sub    esp,0xc
c0029233:	83 ec 0c             	sub    esp,0xc
c0029236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002923a:	e8 cd ff ff ff       	call   c002920c <SATAPI::~SATAPI()>
c002923f:	83 c4 10             	add    esp,0x10
c0029242:	83 ec 08             	sub    esp,0x8
c0029245:	68 80 01 00 00       	push   0x180
c002924a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002924e:	e8 56 95 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0029253:	83 c4 10             	add    esp,0x10
c0029256:	83 c4 0c             	add    esp,0xc
c0029259:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002925a <AVX::~AVX()>:
c002925a:	83 ec 0c             	sub    esp,0xc
c002925d:	ba 24 ce 02 c0       	mov    edx,0xc002ce24
c0029262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029266:	89 10                	mov    DWORD PTR [eax],edx
c0029268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926c:	83 ec 0c             	sub    esp,0xc
c002926f:	50                   	push   eax
c0029270:	e8 8f af fe ff       	call   c0014204 <FPU::~FPU()>
c0029275:	83 c4 10             	add    esp,0x10
c0029278:	90                   	nop
c0029279:	83 c4 0c             	add    esp,0xc
c002927c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002927e <AVX::~AVX()>:
c002927e:	83 ec 0c             	sub    esp,0xc
c0029281:	83 ec 0c             	sub    esp,0xc
c0029284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029288:	e8 cd ff ff ff       	call   c002925a <AVX::~AVX()>
c002928d:	83 c4 10             	add    esp,0x10
c0029290:	83 ec 08             	sub    esp,0x8
c0029293:	68 58 01 00 00       	push   0x158
c0029298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002929c:	e8 08 95 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c00292a1:	83 c4 10             	add    esp,0x10
c00292a4:	83 c4 0c             	add    esp,0xc
c00292a7:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00292a8 <MMX::~MMX()>:
c00292a8:	83 ec 0c             	sub    esp,0xc
c00292ab:	ba 64 ce 02 c0       	mov    edx,0xc002ce64
c00292b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b4:	89 10                	mov    DWORD PTR [eax],edx
c00292b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ba:	83 ec 0c             	sub    esp,0xc
c00292bd:	50                   	push   eax
c00292be:	e8 41 af fe ff       	call   c0014204 <FPU::~FPU()>
c00292c3:	83 c4 10             	add    esp,0x10
c00292c6:	90                   	nop
c00292c7:	83 c4 0c             	add    esp,0xc
c00292ca:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00292cc <MMX::~MMX()>:
c00292cc:	83 ec 0c             	sub    esp,0xc
c00292cf:	83 ec 0c             	sub    esp,0xc
c00292d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292d6:	e8 cd ff ff ff       	call   c00292a8 <MMX::~MMX()>
c00292db:	83 c4 10             	add    esp,0x10
c00292de:	83 ec 08             	sub    esp,0x8
c00292e1:	68 58 01 00 00       	push   0x158
c00292e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292ea:	e8 ba 94 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c00292ef:	83 c4 10             	add    esp,0x10
c00292f2:	83 c4 0c             	add    esp,0xc
c00292f5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00292f6 <SSE::~SSE()>:
c00292f6:	83 ec 0c             	sub    esp,0xc
c00292f9:	ba a4 ce 02 c0       	mov    edx,0xc002cea4
c00292fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029302:	89 10                	mov    DWORD PTR [eax],edx
c0029304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029308:	83 ec 0c             	sub    esp,0xc
c002930b:	50                   	push   eax
c002930c:	e8 f3 ae fe ff       	call   c0014204 <FPU::~FPU()>
c0029311:	83 c4 10             	add    esp,0x10
c0029314:	90                   	nop
c0029315:	83 c4 0c             	add    esp,0xc
c0029318:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002931a <SSE::~SSE()>:
c002931a:	83 ec 0c             	sub    esp,0xc
c002931d:	83 ec 0c             	sub    esp,0xc
c0029320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029324:	e8 cd ff ff ff       	call   c00292f6 <SSE::~SSE()>
c0029329:	83 c4 10             	add    esp,0x10
c002932c:	83 ec 08             	sub    esp,0x8
c002932f:	68 58 01 00 00       	push   0x158
c0029334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029338:	e8 6c 94 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c002933d:	83 c4 10             	add    esp,0x10
c0029340:	83 c4 0c             	add    esp,0xc
c0029343:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029344 <x87::~x87()>:
c0029344:	83 ec 0c             	sub    esp,0xc
c0029347:	ba e4 ce 02 c0       	mov    edx,0xc002cee4
c002934c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029350:	89 10                	mov    DWORD PTR [eax],edx
c0029352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029356:	83 ec 0c             	sub    esp,0xc
c0029359:	50                   	push   eax
c002935a:	e8 a5 ae fe ff       	call   c0014204 <FPU::~FPU()>
c002935f:	83 c4 10             	add    esp,0x10
c0029362:	90                   	nop
c0029363:	83 c4 0c             	add    esp,0xc
c0029366:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029368 <x87::~x87()>:
c0029368:	83 ec 0c             	sub    esp,0xc
c002936b:	83 ec 0c             	sub    esp,0xc
c002936e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029372:	e8 cd ff ff ff       	call   c0029344 <x87::~x87()>
c0029377:	83 c4 10             	add    esp,0x10
c002937a:	83 ec 08             	sub    esp,0x8
c002937d:	68 58 01 00 00       	push   0x158
c0029382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029386:	e8 1e 94 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c002938b:	83 c4 10             	add    esp,0x10
c002938e:	83 c4 0c             	add    esp,0xc
c0029391:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029392 <IOAPIC::~IOAPIC()>:
c0029392:	83 ec 0c             	sub    esp,0xc
c0029395:	ba 3c d0 02 c0       	mov    edx,0xc002d03c
c002939a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939e:	89 10                	mov    DWORD PTR [eax],edx
c00293a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a4:	83 ec 0c             	sub    esp,0xc
c00293a7:	50                   	push   eax
c00293a8:	e8 db a7 fe ff       	call   c0013b88 <Device::~Device()>
c00293ad:	83 c4 10             	add    esp,0x10
c00293b0:	90                   	nop
c00293b1:	83 c4 0c             	add    esp,0xc
c00293b4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00293b6 <IOAPIC::~IOAPIC()>:
c00293b6:	83 ec 0c             	sub    esp,0xc
c00293b9:	83 ec 0c             	sub    esp,0xc
c00293bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293c0:	e8 cd ff ff ff       	call   c0029392 <IOAPIC::~IOAPIC()>
c00293c5:	83 c4 10             	add    esp,0x10
c00293c8:	83 ec 08             	sub    esp,0x8
c00293cb:	68 68 01 00 00       	push   0x168
c00293d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293d4:	e8 d0 93 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c00293d9:	83 c4 10             	add    esp,0x10
c00293dc:	83 c4 0c             	add    esp,0xc
c00293df:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00293e0 <APIC::~APIC()>:
c00293e0:	83 ec 0c             	sub    esp,0xc
c00293e3:	ba f4 cf 02 c0       	mov    edx,0xc002cff4
c00293e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ec:	89 10                	mov    DWORD PTR [eax],edx
c00293ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f2:	83 ec 0c             	sub    esp,0xc
c00293f5:	50                   	push   eax
c00293f6:	e8 d3 b2 fe ff       	call   c00146ce <InterruptController::~InterruptController()>
c00293fb:	83 c4 10             	add    esp,0x10
c00293fe:	90                   	nop
c00293ff:	83 c4 0c             	add    esp,0xc
c0029402:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029404 <APIC::~APIC()>:
c0029404:	83 ec 0c             	sub    esp,0xc
c0029407:	83 ec 0c             	sub    esp,0xc
c002940a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002940e:	e8 cd ff ff ff       	call   c00293e0 <APIC::~APIC()>
c0029413:	83 c4 10             	add    esp,0x10
c0029416:	83 ec 08             	sub    esp,0x8
c0029419:	68 58 21 00 00       	push   0x2158
c002941e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029422:	e8 82 93 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0029427:	83 c4 10             	add    esp,0x10
c002942a:	83 c4 0c             	add    esp,0xc
c002942d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c002942e <PIC::~PIC()>:
c002942e:	83 ec 0c             	sub    esp,0xc
c0029431:	ba 8c d0 02 c0       	mov    edx,0xc002d08c
c0029436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002943a:	89 10                	mov    DWORD PTR [eax],edx
c002943c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029440:	83 ec 0c             	sub    esp,0xc
c0029443:	50                   	push   eax
c0029444:	e8 85 b2 fe ff       	call   c00146ce <InterruptController::~InterruptController()>
c0029449:	83 c4 10             	add    esp,0x10
c002944c:	90                   	nop
c002944d:	83 c4 0c             	add    esp,0xc
c0029450:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029452 <PIC::~PIC()>:
c0029452:	83 ec 0c             	sub    esp,0xc
c0029455:	83 ec 0c             	sub    esp,0xc
c0029458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002945c:	e8 cd ff ff ff       	call   c002942e <PIC::~PIC()>
c0029461:	83 c4 10             	add    esp,0x10
c0029464:	83 ec 08             	sub    esp,0x8
c0029467:	68 58 21 00 00       	push   0x2158
c002946c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029470:	e8 34 93 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0029475:	83 c4 10             	add    esp,0x10
c0029478:	83 c4 0c             	add    esp,0xc
c002947b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002947c <APICTimer::~APICTimer()>:
c002947c:	83 ec 0c             	sub    esp,0xc
c002947f:	ba e0 d0 02 c0       	mov    edx,0xc002d0e0
c0029484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029488:	89 10                	mov    DWORD PTR [eax],edx
c002948a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002948e:	83 ec 0c             	sub    esp,0xc
c0029491:	50                   	push   eax
c0029492:	e8 95 d2 fe ff       	call   c001672c <Timer::~Timer()>
c0029497:	83 c4 10             	add    esp,0x10
c002949a:	90                   	nop
c002949b:	83 c4 0c             	add    esp,0xc
c002949e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00294a0 <APICTimer::~APICTimer()>:
c00294a0:	83 ec 0c             	sub    esp,0xc
c00294a3:	83 ec 0c             	sub    esp,0xc
c00294a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294aa:	e8 cd ff ff ff       	call   c002947c <APICTimer::~APICTimer()>
c00294af:	83 c4 10             	add    esp,0x10
c00294b2:	83 ec 08             	sub    esp,0x8
c00294b5:	68 60 01 00 00       	push   0x160
c00294ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294be:	e8 e6 92 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c00294c3:	83 c4 10             	add    esp,0x10
c00294c6:	83 c4 0c             	add    esp,0xc
c00294c9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00294ca <PIT::~PIT()>:
c00294ca:	83 ec 0c             	sub    esp,0xc
c00294cd:	ba 30 d1 02 c0       	mov    edx,0xc002d130
c00294d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d6:	89 10                	mov    DWORD PTR [eax],edx
c00294d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294dc:	83 ec 0c             	sub    esp,0xc
c00294df:	50                   	push   eax
c00294e0:	e8 47 d2 fe ff       	call   c001672c <Timer::~Timer()>
c00294e5:	83 c4 10             	add    esp,0x10
c00294e8:	90                   	nop
c00294e9:	83 c4 0c             	add    esp,0xc
c00294ec:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00294ee <PIT::~PIT()>:
c00294ee:	83 ec 0c             	sub    esp,0xc
c00294f1:	83 ec 0c             	sub    esp,0xc
c00294f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294f8:	e8 cd ff ff ff       	call   c00294ca <PIT::~PIT()>
c00294fd:	83 c4 10             	add    esp,0x10
c0029500:	83 ec 08             	sub    esp,0x8
c0029503:	68 5c 01 00 00       	push   0x15c
c0029508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002950c:	e8 98 92 fe ff       	call   c00127a9 <operator delete(void*, unsigned long)>
c0029511:	83 c4 10             	add    esp,0x10
c0029514:	83 c4 0c             	add    esp,0xc
c0029517:	c3                   	ret    
