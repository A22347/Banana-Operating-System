
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a3 83 02 00       	call   c00283c8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 1c 90 02 c0       	mov    ebx,0xc002901c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 28 90 02 c0    	cmp    ebx,0xc0029028
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 cf 02 c0       	mov    eax,0xc002cf58
c0000049:	3d 58 cf 02 c0       	cmp    eax,0xc002cf58
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 cf 02 c0       	push   0xc002cf58
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 cf 02 c0       	mov    eax,0xc002cf58
c0000075:	2d 58 cf 02 c0       	sub    eax,0xc002cf58
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 cf 02 c0       	push   0xc002cf58
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d588,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 30 90 02 c0       	mov    ebx,0xc0029030
c00000bb:	81 eb 2c 90 02 c0    	sub    ebx,0xc002902c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 2c 90 02 c0       	mov    esi,0xc002902c
c00000ca:	a1 8c d5 02 c0       	mov    eax,ds:0xc002d58c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c d5 02 c0       	mov    ds:0xc002d58c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c d5 02 c0       	mov    eax,ds:0xc002d58c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 cf 02 c0       	push   0xc002cf58
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 d5 02 c0 01 	mov    BYTE PTR ds:0xc002d588,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 d5 02 c0       	push   0xc002d590
c000012c:	68 58 cf 02 c0       	push   0xc002cf58
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 09 cf 01 00       	call   c001d2ac <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 9e 20 01 00       	call   c0012459 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 e7 ce 01 00       	call   c001d2ac <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 8f d3 01 00       	call   c001d773 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 a5 d9 01 00       	call   c001dd92 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 d0 d9 02 c0 	lgdtd  ds:0xc002d9d0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 07 3e 01 00       	call   c00143e9 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 a8 d5 02 c0       	mov    ds:0xc002d5a8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 a8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 40 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6fc0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 40 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fc0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 40 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6fc0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 40 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6fc0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 40 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fc0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d c0 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5c0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d c0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5c0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 c4 d5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2a3c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 c4 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a3c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d c0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5c0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ec d5 02 c0    	cmp    DWORD PTR ds:0xc002d5ec,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d fc d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5fc
c0000e38:	c7 42 0c f4 d5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d5f4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 fc d5 02 c0    	mov    DWORD PTR ds:0xc002d5fc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ec d5 02 c0    	mov    DWORD PTR ds:0xc002d5ec,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 c0 d5 02 c0 02 	test   BYTE PTR ds:0xc002d5c0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d c0 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5c0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 c4 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2a3c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 c4 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2a3c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 f4 d5 02 c0 	lea    edx,[eax*8-0x3ffd2a0c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 00 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d600
c00011ba:	81 fb f4 d5 02 c0    	cmp    ebx,0xc002d5f4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d f4 d5 02 c0       	cmp    eax,0xc002d5f4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d f0 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5f0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 fc d5 02 c0       	mov    ds:0xc002d5fc,eax
c00011f6:	a3 00 d6 02 c0       	mov    ds:0xc002d600,eax
c00011fb:	a3 f0 d5 02 c0       	mov    ds:0xc002d5f0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 f4 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d5f4
c0001209:	c7 40 0c f4 d5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d5f4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 00 d6 02 c0       	mov    ds:0xc002d600,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 f4 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d5f4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 b8 d5 02 c0 	lea    ebp,[edx*4-0x3ffd2a48]
c000125a:	8b 14 95 c0 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a40]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 c0 d5 02 c0 	lea    ecx,[edx*4-0x3ffd2a40]
c0001275:	8b 14 95 c0 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a40]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd f4 d8 02 c0 	or     DWORD PTR [edi*4-0x3ffd270c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 f4 d5 02 c0 	lea    eax,[eax*8-0x3ffd2a0c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d fc d5 02 c0    	mov    DWORD PTR ds:0xc002d5fc,ecx
c000132f:	89 0d 00 d6 02 c0    	mov    DWORD PTR ds:0xc002d600,ecx
c0001335:	c7 41 08 f4 d5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d5f4
c000133c:	c7 41 0c f4 d5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d5f4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ec d5 02 c0 	lea    edx,[ecx*8-0x3ffd2a14]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d f4 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd270c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d f4 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd270c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ec d5 02 c0 	lea    edx,[eax*4-0x3ffd2a14]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d f4 d8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd270c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d fc d5 02 c0    	mov    DWORD PTR ds:0xc002d5fc,edi
c0001402:	89 3d 00 d6 02 c0    	mov    DWORD PTR ds:0xc002d600,edi
c0001408:	c7 47 08 f4 d5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d5f4
c000140f:	c7 47 0c f4 d5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d5f4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d f0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5f0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ec d5 02 c0       	mov    eax,ds:0xc002d5ec
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ec d5 02 c0    	mov    DWORD PTR ds:0xc002d5ec,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba c0 d5 02 c0       	mov    edx,0xc002d5c0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d c0 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5c0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 14 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d914
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 14 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d914,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 14 d9 02 c0    	mov    DWORD PTR ds:0xc002d914,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ec d5 02 c0    	cmp    DWORD PTR ds:0xc002d5ec,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ec d5 02 c0    	mov    DWORD PTR ds:0xc002d5ec,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d c0 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5c0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 1c d9 02 c0    	push   DWORD PTR ds:0xc002d91c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d c0 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5c0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 1c d9 02 c0       	mov    eax,ds:0xc002d91c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ec d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5ec,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ec d5 02 c0       	mov    eax,ds:0xc002d5ec
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 c4 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2a3c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 f4 d5 02 c0       	mov    eax,0xc002d5f4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ec d8 02 c0       	cmp    eax,0xc002d8ec
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 10 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d910
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 24 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d924
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 34 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d934
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 44 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6ebc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 c0 d5 02 c0       	mov    eax,ds:0xc002d5c0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 c0 d5 02 c0       	mov    ds:0xc002d5c0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 04 d9 02 c0    	mov    DWORD PTR ds:0xc002d904,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 08 d9 02 c0    	mov    DWORD PTR ds:0xc002d908,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 0c d9 02 c0    	mov    DWORD PTR ds:0xc002d90c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 14 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d914,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 80 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef80]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 d0 eb 01 00       	jmp    c00207c2 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 80 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef80]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 01 ec 01 00       	jmp    c0020809 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 80 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef80]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 29 ec 01 00       	jmp    c0020850 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 1a 48 02 00       	call   c0026724 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 60 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6da0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 60 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6da0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 60 91 02 c0       	mov    edx,0xc0029160
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 80 92 02 c0       	mov    edx,0xc0029280
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 94 be 02 c0       	mov    edx,0xc002be94
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 8c 92 02 c0       	mov    edx,0xc002928c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 70 92 02 c0       	mov    edx,0xc0029270
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 60 d9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd26a0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 40 d9 02 c0    	mov    ax,ds:0xc002d940
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 40 d9 02 c0    	mov    ds:0xc002d940,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 17 36 02 00       	call   c0026724 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 92 92 02 c0       	mov    eax,0xc0029292
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad e0 91 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6e20]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 9b 92 02 c0       	mov    eax,0xc002929b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 60 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6da0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 e2 1f 02 00       	call   c0026724 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 70 92 02 c0       	mov    edx,0xc0029270
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 60 91 02 c0       	mov    edx,0xc0029160
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 70 91 02 c0       	mov    edx,0xc0029170
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 60 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd26a0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 60 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd26a0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 a9 09 02 00       	call   c0026724 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 8f 09 02 00       	call   c0026724 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 b7 91 02 c0       	mov    eax,0xc00291b7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 b0 91 02 c0       	mov    eax,0xc00291b0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 60 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd26a0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be a0 91 02 c0       	mov    esi,0xc00291a0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 d2 f0 01 00       	call   c0026724 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 80 92 02 c0       	mov    edx,0xc0029280
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 80 91 02 c0       	mov    edx,0xc0029180
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 90 91 02 c0       	mov    edx,0xc0029190
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba a2 92 02 c0       	mov    edx,0xc00292a2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ae 92 02 c0       	mov    edx,0xc00292ae
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba c2 92 02 c0       	mov    edx,0xc00292c2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c e0 95 02 c0 	mov    DWORD PTR [esp+0xc],0xc00295e0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 e0 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295e0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 e0 93 02 c0       	mov    eax,0xc00293e0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 20 93 02 c0       	mov    eax,0xc0029320
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 26 fa 01 00       	call   c00281f7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 e9 f9 01 00       	call   c00281d9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 bd f9 01 00       	call   c00281f7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 70 f0 01 00       	call   c00278fc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 f2 fa 01 00       	call   c0028390 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 37 f9 01 00       	call   c00281f7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 79 f8 01 00       	call   c00281f7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 46 f8 01 00       	call   c00281d9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 33 f7 01 00       	call   c00281f7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 fb f6 01 00       	call   c00281d9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 e0 96 02 c0       	mov    eax,0xc00296e0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 07 f5 01 00       	call   c00281f7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 cc f4 01 00       	call   c00281d9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 40 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64c0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 dc f1 01 00       	call   c0027f8b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 5a eb 01 00       	call   c0027928 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 16 f4 01 00       	call   c00281fb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 04 f5 01 00       	call   c002831f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 ee ea 01 00       	call   c0027928 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 99 f3 01 00       	call   c00281f5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 7a f3 01 00       	call   c00281f9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 10 f5 01 00       	call   c00283b0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 ba f0 01 00       	call   c0027f8b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 38 ea 01 00       	call   c0027928 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 f4 f2 01 00       	call   c00281fb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 e2 f3 01 00       	call   c002831f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 cc e9 01 00       	call   c0027928 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 77 f2 01 00       	call   c00281f5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 57 f2 01 00       	call   c00281f9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 ec f3 01 00       	call   c00283b0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 92 f1 01 00       	call   c00281f7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 50 f1 01 00       	call   c00281d9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 38 f1 01 00       	call   c00281f7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 aa ee 01 00       	call   c0027f8b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 ac e1 01 00       	call   c00272ab <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 0f e8 01 00       	call   c0027928 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 61 ee 01 00       	call   c0027f8b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 67 e1 01 00       	call   c00272ab <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 36 ee 01 00       	call   c0027f8b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 86 f0 01 00       	call   c00281f5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 63 e7 01 00       	call   c00278fc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 e5 f1 01 00       	call   c0028390 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 0c f0 01 00       	call   c00281d9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 07 e7 01 00       	call   c00278fc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 85 ed 01 00       	call   c0027f8b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 08 e7 01 00       	call   c0027928 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 5a ed 01 00       	call   c0027f8b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 c1 e9 01 00       	call   c0027c0c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 40 e0 01 00       	call   c00272ab <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 a0 d9 01 00       	call   c0026c40 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 77 f0 01 00       	call   c002831f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 60 e6 01 00       	call   c0027928 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 47 f0 01 00       	call   c002831f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 b9 df 01 00       	call   c00272ab <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 f2 ee 01 00       	call   c00281fb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 da e8 01 00       	call   c0027c0c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 60 df 01 00       	call   c00272ab <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 4e f0 01 00       	call   c00283b0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 20 ec 01 00       	call   c0027f8b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 77 e5 01 00       	call   c00278fc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 56 ee 01 00       	call   c00281f7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 ef de 01 00       	call   c00272ab <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 1b e5 01 00       	call   c00278fc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 bd ef 01 00       	call   c00283b0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 6e eb 01 00       	call   c0027f8b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 eb e4 01 00       	call   c0027928 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 3e eb 01 00       	call   c0027f8b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 44 de 01 00       	call   c00272ab <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 14 eb 01 00       	call   c0027f8b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 66 ed 01 00       	call   c00281f7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 3d e4 01 00       	call   c00278fc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 bf ee 01 00       	call   c0028390 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 e6 ec 01 00       	call   c00281d9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 e0 e3 01 00       	call   c00278fc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 5e ea 01 00       	call   c0027f8b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 e1 e3 01 00       	call   c0027928 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 33 ea 01 00       	call   c0027f8b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 9a e6 01 00       	call   c0027c0c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 19 dd 01 00       	call   c00272ab <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 69 d6 01 00       	call   c0026c40 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 40 ed 01 00       	call   c002831f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 29 e3 01 00       	call   c0027928 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 10 ed 01 00       	call   c002831f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 82 dc 01 00       	call   c00272ab <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 bb eb 01 00       	call   c00281fb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 a2 e5 01 00       	call   c0027c0c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 21 dc 01 00       	call   c00272ab <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 0f ed 01 00       	call   c00283b0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 e1 e8 01 00       	call   c0027f8b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 38 e2 01 00       	call   c00278fc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 17 eb 01 00       	call   c00281f7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 b0 db 01 00       	call   c00272ab <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 dc e1 01 00       	call   c00278fc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 51 e8 01 00       	call   c0027f8b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 57 db 01 00       	call   c00272ab <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 a0 9b 02 c0       	mov    eax,0xc0029ba0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 b4 9b 02 c0       	mov    eax,0xc0029bb4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 cc e6 01 00       	call   c0027f8b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 4a e0 01 00       	call   c0027928 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 dc d2 01 00       	call   c0026c40 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 b3 e9 01 00       	call   c002831f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 9c df 01 00       	call   c0027928 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 7f e9 01 00       	call   c002831f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 f1 d8 01 00       	call   c00272ab <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 51 e9 01 00       	call   c002831f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 40 df 01 00       	call   c0027928 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 a9 d8 01 00       	call   c00272ab <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ca d1 01 00       	call   c0026c40 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 a1 e8 01 00       	call   c002831f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 8a de 01 00       	call   c0027928 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 6d e8 01 00       	call   c002831f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 df d7 01 00       	call   c00272ab <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 3f e8 01 00       	call   c002831f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 2e de 01 00       	call   c0027928 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 97 d7 01 00       	call   c00272ab <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 75 d7 01 00       	call   c00272ab <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 51 d0 01 00       	call   c0026c40 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 28 e7 01 00       	call   c002831f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 11 dd 01 00       	call   c0027928 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 f4 e6 01 00       	call   c002831f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 66 d6 01 00       	call   c00272ab <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 c6 e6 01 00       	call   c002831f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 af dc 01 00       	call   c0027928 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 18 d6 01 00       	call   c00272ab <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 78 e6 01 00       	call   c002831f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 61 dc 01 00       	call   c0027928 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ca d5 01 00       	call   c00272ab <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 df ce 01 00       	call   c0026c40 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 b6 e5 01 00       	call   c002831f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 9f db 01 00       	call   c0027928 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 86 e5 01 00       	call   c002831f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 f8 d4 01 00       	call   c00272ab <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 58 e5 01 00       	call   c002831f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 41 db 01 00       	call   c0027928 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 aa d4 01 00       	call   c00272ab <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 0a e5 01 00       	call   c002831f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 f3 da 01 00       	call   c0027928 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 5c d4 01 00       	call   c00272ab <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 30 d4 01 00       	call   c00272ab <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 8d da 01 00       	call   c0027928 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 49 e3 01 00       	call   c00281fb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 d8 d3 01 00       	call   c00272ab <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 35 da 01 00       	call   c0027928 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 f1 e2 01 00       	call   c00281fb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 6b cc 01 00       	call   c0026c40 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 42 e3 01 00       	call   c002831f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 2b d9 01 00       	call   c0027928 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 0e e3 01 00       	call   c002831f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 80 d2 01 00       	call   c00272ab <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 e0 e2 01 00       	call   c002831f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 c9 d8 01 00       	call   c0027928 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 32 d2 01 00       	call   c00272ab <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 92 e2 01 00       	call   c002831f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 7b d8 01 00       	call   c0027928 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 e4 d1 01 00       	call   c00272ab <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 44 e2 01 00       	call   c002831f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 2d d8 01 00       	call   c0027928 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 96 d1 01 00       	call   c00272ab <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 f6 e1 01 00       	call   c002831f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 df d7 01 00       	call   c0027928 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 48 d1 01 00       	call   c00272ab <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 4a ca 01 00       	call   c0026c40 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 21 e1 01 00       	call   c002831f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 0a d7 01 00       	call   c0027928 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 f1 e0 01 00       	call   c002831f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 63 d0 01 00       	call   c00272ab <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 c3 e0 01 00       	call   c002831f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 ac d6 01 00       	call   c0027928 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 15 d0 01 00       	call   c00272ab <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 75 e0 01 00       	call   c002831f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 5e d6 01 00       	call   c0027928 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 c7 cf 01 00       	call   c00272ab <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 27 e0 01 00       	call   c002831f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 10 d6 01 00       	call   c0027928 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 79 cf 01 00       	call   c00272ab <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 d9 df 01 00       	call   c002831f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 c2 d5 01 00       	call   c0027928 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 2b cf 01 00       	call   c00272ab <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 ff ce 01 00       	call   c00272ab <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 5c d5 01 00       	call   c0027928 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 18 de 01 00       	call   c00281fb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 a7 ce 01 00       	call   c00272ab <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 04 d5 01 00       	call   c0027928 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 c0 dd 01 00       	call   c00281fb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 4e ce 01 00       	call   c00272ab <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 ab d4 01 00       	call   c0027928 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 67 dd 01 00       	call   c00281fb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 f5 cd 01 00       	call   c00272ab <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 52 d4 01 00       	call   c0027928 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 0e dd 01 00       	call   c00281fb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 6c c6 01 00       	call   c0026c40 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 43 dd 01 00       	call   c002831f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 2c d3 01 00       	call   c0027928 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 0f dd 01 00       	call   c002831f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 81 cc 01 00       	call   c00272ab <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 e1 dc 01 00       	call   c002831f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ca d2 01 00       	call   c0027928 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 33 cc 01 00       	call   c00272ab <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 93 dc 01 00       	call   c002831f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 7c d2 01 00       	call   c0027928 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 e5 cb 01 00       	call   c00272ab <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 45 dc 01 00       	call   c002831f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 2e d2 01 00       	call   c0027928 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 97 cb 01 00       	call   c00272ab <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 f7 db 01 00       	call   c002831f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 e0 d1 01 00       	call   c0027928 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 49 cb 01 00       	call   c00272ab <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 a9 db 01 00       	call   c002831f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 92 d1 01 00       	call   c0027928 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 f8 ca 01 00       	call   c00272ab <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 58 db 01 00       	call   c002831f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 41 d1 01 00       	call   c0027928 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 aa ca 01 00       	call   c00272ab <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 a4 c3 01 00       	call   c0026c40 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 7b da 01 00       	call   c002831f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 64 d0 01 00       	call   c0027928 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 44 da 01 00       	call   c002831f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 b6 c9 01 00       	call   c00272ab <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 16 da 01 00       	call   c002831f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 ff cf 01 00       	call   c0027928 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 68 c9 01 00       	call   c00272ab <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 c8 d9 01 00       	call   c002831f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 b1 cf 01 00       	call   c0027928 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 1a c9 01 00       	call   c00272ab <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 7a d9 01 00       	call   c002831f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 63 cf 01 00       	call   c0027928 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 cc c8 01 00       	call   c00272ab <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 2c d9 01 00       	call   c002831f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 15 cf 01 00       	call   c0027928 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 7e c8 01 00       	call   c00272ab <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 de d8 01 00       	call   c002831f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 c7 ce 01 00       	call   c0027928 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 2d c8 01 00       	call   c00272ab <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 8d d8 01 00       	call   c002831f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 76 ce 01 00       	call   c0027928 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 e5 c7 01 00       	call   c00272ab <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 be c7 01 00       	call   c00272ab <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 1c ce 01 00       	call   c0027928 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 d8 d6 01 00       	call   c00281fb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 67 c7 01 00       	call   c00272ab <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 c5 cd 01 00       	call   c0027928 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 81 d6 01 00       	call   c00281fb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 0f c7 01 00       	call   c00272ab <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 6d cd 01 00       	call   c0027928 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 29 d6 01 00       	call   c00281fb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 b7 c6 01 00       	call   c00272ab <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 15 cd 01 00       	call   c0027928 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 d1 d5 01 00       	call   c00281fb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 5f c6 01 00       	call   c00272ab <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 bd cc 01 00       	call   c0027928 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 79 d5 01 00       	call   c00281fb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 0d c6 01 00       	call   c00272ab <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 6b cc 01 00       	call   c0027928 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 27 d5 01 00       	call   c00281fb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 3b be 01 00       	call   c0026c40 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 12 d5 01 00       	call   c002831f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 fb ca 01 00       	call   c0027928 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 e2 d4 01 00       	call   c002831f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 54 c4 01 00       	call   c00272ab <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 e4 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd641c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 88 d4 01 00       	call   c002831f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 71 ca 01 00       	call   c0027928 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 dc c3 01 00       	call   c00272ab <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 29 d4 01 00       	call   c002831f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 12 ca 01 00       	call   c0027928 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 7d c3 01 00       	call   c00272ab <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ca d3 01 00       	call   c002831f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 b3 c9 01 00       	call   c0027928 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 1e c3 01 00       	call   c00272ab <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 6b d3 01 00       	call   c002831f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 54 c9 01 00       	call   c0027928 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 bf c2 01 00       	call   c00272ab <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 0c d3 01 00       	call   c002831f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 f5 c8 01 00       	call   c0027928 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 60 c2 01 00       	call   c00272ab <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 ad d2 01 00       	call   c002831f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 96 c8 01 00       	call   c0027928 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 01 c2 01 00       	call   c00272ab <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 4e d2 01 00       	call   c002831f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 37 c8 01 00       	call   c0027928 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 a2 c1 01 00       	call   c00272ab <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 ef d1 01 00       	call   c002831f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 d8 c7 01 00       	call   c0027928 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 43 c1 01 00       	call   c00272ab <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 4d ba 01 00       	call   c0026c40 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 24 d1 01 00       	call   c002831f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 0d c7 01 00       	call   c0027928 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 f4 d0 01 00       	call   c002831f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 66 c0 01 00       	call   c00272ab <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 00 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6400]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 99 d0 01 00       	call   c002831f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 82 c6 01 00       	call   c0027928 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 ed bf 01 00       	call   c00272ab <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 39 d0 01 00       	call   c002831f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 22 c6 01 00       	call   c0027928 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 8d bf 01 00       	call   c00272ab <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 d9 cf 01 00       	call   c002831f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 c2 c5 01 00       	call   c0027928 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 2d bf 01 00       	call   c00272ab <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 79 cf 01 00       	call   c002831f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 62 c5 01 00       	call   c0027928 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 cd be 01 00       	call   c00272ab <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 19 cf 01 00       	call   c002831f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 02 c5 01 00       	call   c0027928 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 6d be 01 00       	call   c00272ab <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 b9 ce 01 00       	call   c002831f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 a2 c4 01 00       	call   c0027928 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 0d be 01 00       	call   c00272ab <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 59 ce 01 00       	call   c002831f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 42 c4 01 00       	call   c0027928 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 ad bd 01 00       	call   c00272ab <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 f9 cd 01 00       	call   c002831f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 e2 c3 01 00       	call   c0027928 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 4d bd 01 00       	call   c00272ab <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 1c 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63e4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 f2 bc 01 00       	call   c00272ab <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 4f c3 01 00       	call   c0027928 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 0b cc 01 00       	call   c00281fb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 95 bc 01 00       	call   c00272ab <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 f2 c2 01 00       	call   c0027928 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 ae cb 01 00       	call   c00281fb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 38 bc 01 00       	call   c00272ab <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 95 c2 01 00       	call   c0027928 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 51 cb 01 00       	call   c00281fb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 db bb 01 00       	call   c00272ab <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 38 c2 01 00       	call   c0027928 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 f4 ca 01 00       	call   c00281fb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 7e bb 01 00       	call   c00272ab <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 db c1 01 00       	call   c0027928 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 97 ca 01 00       	call   c00281fb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 21 bb 01 00       	call   c00272ab <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 7e c1 01 00       	call   c0027928 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 3a ca 01 00       	call   c00281fb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 c4 ba 01 00       	call   c00272ab <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 21 c1 01 00       	call   c0027928 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 dd c9 01 00       	call   c00281fb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 67 ba 01 00       	call   c00272ab <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 c4 c0 01 00       	call   c0027928 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 80 c9 01 00       	call   c00281fb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 7c c0 01 00       	call   c0027928 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 f4 ca 01 00       	jmp    c00283b0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 5e c7 01 00       	call   c00281f7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 1c c7 01 00       	call   c00281d9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 b3 c4 01 00       	call   c0027f8b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 b4 b7 01 00       	call   c00272ab <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 83 c4 01 00       	call   c0027f8b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ea c0 01 00       	call   c0027c0c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 89 c6 01 00       	call   c00281d9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 8c c6 01 00       	call   c00281f7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 5f c6 01 00       	call   c00281f7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 58 c0 01 00       	call   c0027c0c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 e2 c7 01 00       	call   c00283b0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 bd c7 01 00       	call   c00283b0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 8f c3 01 00       	call   c0027f8b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 e6 bc 01 00       	call   c00278fc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 c5 c5 01 00       	call   c00281f7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 5e b6 01 00       	call   c00272ab <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 82 bc 01 00       	call   c00278fc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 24 c7 01 00       	call   c00283b0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 5c bf 01 00       	call   c0027c0c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 d9 b5 01 00       	call   c00272ab <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 05 c2 01 00       	call   c0027f8b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 05 b5 01 00       	call   c00272ab <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 e5 b4 01 00       	call   c00272ab <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 b5 c1 01 00       	call   c0027f8b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 05 c4 01 00       	call   c00281f5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 e4 ba 01 00       	call   c00278fc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 66 c5 01 00       	call   c0028390 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 8d c3 01 00       	call   c00281d9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 8b ba 01 00       	call   c00278fc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 09 c1 01 00       	call   c0027f8b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 8c ba 01 00       	call   c0027928 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 de c0 01 00       	call   c0027f8b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 45 bd 01 00       	call   c0027c0c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 c4 b3 01 00       	call   c00272ab <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 8e c0 01 00       	call   c0027f8b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 da c2 01 00       	call   c00281f7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 cf b9 01 00       	call   c0027928 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 a1 b9 01 00       	call   c0027928 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 da bf 01 00       	call   c0027f8b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 3e bc 01 00       	call   c0027c0c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 06 bc 01 00       	call   c0027c0c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 85 b2 01 00       	call   c00272ab <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 72 c3 01 00       	call   c00283b0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 44 bf 01 00       	call   c0027f8b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 9b b8 01 00       	call   c00278fc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 7a c1 01 00       	call   c00281f7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 12 b2 01 00       	call   c00272ab <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 36 b8 01 00       	call   c00278fc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 d8 c2 01 00       	call   c00283b0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 99 c0 01 00       	call   c00281f7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 57 c0 01 00       	call   c00281d9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 ee bd 01 00       	call   c0027f8b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 ef b0 01 00       	call   c00272ab <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 be bd 01 00       	call   c0027f8b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 25 ba 01 00       	call   c0027c0c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 c4 bf 01 00       	call   c00281d9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 c7 bf 01 00       	call   c00281f7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 9a bf 01 00       	call   c00281f7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 93 b9 01 00       	call   c0027c0c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 1d c1 01 00       	call   c00283b0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 f8 c0 01 00       	call   c00283b0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ca bc 01 00       	call   c0027f8b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 21 b6 01 00       	call   c00278fc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 00 bf 01 00       	call   c00281f7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 99 af 01 00       	call   c00272ab <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 bd b5 01 00       	call   c00278fc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 5f c0 01 00       	call   c00283b0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 97 b8 01 00       	call   c0027c0c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 14 af 01 00       	call   c00272ab <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 3f bb 01 00       	call   c0027f8b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 3f ae 01 00       	call   c00272ab <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 1f ae 01 00       	call   c00272ab <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 ef ba 01 00       	call   c0027f8b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 3f bd 01 00       	call   c00281f5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 1d b4 01 00       	call   c00278fc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 9f be 01 00       	call   c0028390 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 c6 bc 01 00       	call   c00281d9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 c3 b3 01 00       	call   c00278fc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 41 ba 01 00       	call   c0027f8b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 c4 b3 01 00       	call   c0027928 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 16 ba 01 00       	call   c0027f8b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 7d b6 01 00       	call   c0027c0c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 fc ac 01 00       	call   c00272ab <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 c6 b9 01 00       	call   c0027f8b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 12 bc 01 00       	call   c00281f7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 07 b3 01 00       	call   c0027928 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 d9 b2 01 00       	call   c0027928 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 10 b9 01 00       	call   c0027f8b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 74 b5 01 00       	call   c0027c0c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 41 b5 01 00       	call   c0027c0c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 c0 ab 01 00       	call   c00272ab <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 ad bc 01 00       	call   c00283b0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 7f b8 01 00       	call   c0027f8b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 d6 b1 01 00       	call   c00278fc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 b5 ba 01 00       	call   c00281f7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 4d ab 01 00       	call   c00272ab <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 71 b1 01 00       	call   c00278fc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 13 bc 01 00       	call   c00283b0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 d4 b9 01 00       	call   c00281f7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 92 b9 01 00       	call   c00281d9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 29 b7 01 00       	call   c0027f8b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 2a aa 01 00       	call   c00272ab <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 f9 b6 01 00       	call   c0027f8b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 60 b3 01 00       	call   c0027c0c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 ff b8 01 00       	call   c00281d9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 02 b9 01 00       	call   c00281f7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 d5 b8 01 00       	call   c00281f7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 ce b2 01 00       	call   c0027c0c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 58 ba 01 00       	call   c00283b0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 33 ba 01 00       	call   c00283b0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 05 b6 01 00       	call   c0027f8b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 5c af 01 00       	call   c00278fc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 3b b8 01 00       	call   c00281f7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 d4 a8 01 00       	call   c00272ab <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 f8 ae 01 00       	call   c00278fc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 9a b9 01 00       	call   c00283b0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 d2 b1 01 00       	call   c0027c0c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 4f a8 01 00       	call   c00272ab <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 7a b4 01 00       	call   c0027f8b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 7a a7 01 00       	call   c00272ab <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 5a a7 01 00       	call   c00272ab <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 2a b4 01 00       	call   c0027f8b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 7a b6 01 00       	call   c00281f5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 58 ad 01 00       	call   c00278fc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 da b7 01 00       	call   c0028390 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 01 b6 01 00       	call   c00281d9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 fe ac 01 00       	call   c00278fc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 7c b3 01 00       	call   c0027f8b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 ff ac 01 00       	call   c0027928 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 51 b3 01 00       	call   c0027f8b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 b8 af 01 00       	call   c0027c0c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 37 a6 01 00       	call   c00272ab <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 01 b3 01 00       	call   c0027f8b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 4d b5 01 00       	call   c00281f7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 42 ac 01 00       	call   c0027928 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 14 ac 01 00       	call   c0027928 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 4b b2 01 00       	call   c0027f8b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 af ae 01 00       	call   c0027c0c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 7c ae 01 00       	call   c0027c0c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 fb a4 01 00       	call   c00272ab <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 e8 b5 01 00       	call   c00283b0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 ba b1 01 00       	call   c0027f8b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 11 ab 01 00       	call   c00278fc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 f0 b3 01 00       	call   c00281f7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 88 a4 01 00       	call   c00272ab <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 ac aa 01 00       	call   c00278fc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 4e b5 01 00       	call   c00283b0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 0f b3 01 00       	call   c00281f7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 cd b2 01 00       	call   c00281d9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 64 b0 01 00       	call   c0027f8b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 65 a3 01 00       	call   c00272ab <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 34 b0 01 00       	call   c0027f8b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 9b ac 01 00       	call   c0027c0c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 3a b2 01 00       	call   c00281d9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 3d b2 01 00       	call   c00281f7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 10 b2 01 00       	call   c00281f7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 09 ac 01 00       	call   c0027c0c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 93 b3 01 00       	call   c00283b0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 6e b3 01 00       	call   c00283b0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 40 af 01 00       	call   c0027f8b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 97 a8 01 00       	call   c00278fc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 76 b1 01 00       	call   c00281f7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 0f a2 01 00       	call   c00272ab <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 33 a8 01 00       	call   c00278fc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 d5 b2 01 00       	call   c00283b0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 0d ab 01 00       	call   c0027c0c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 8a a1 01 00       	call   c00272ab <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 b5 ad 01 00       	call   c0027f8b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 b5 a0 01 00       	call   c00272ab <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 95 a0 01 00       	call   c00272ab <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 65 ad 01 00       	call   c0027f8b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 b5 af 01 00       	call   c00281f5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 93 a6 01 00       	call   c00278fc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 15 b1 01 00       	call   c0028390 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 3c af 01 00       	call   c00281d9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 39 a6 01 00       	call   c00278fc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 b7 ac 01 00       	call   c0027f8b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 3a a6 01 00       	call   c0027928 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 8c ac 01 00       	call   c0027f8b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 f3 a8 01 00       	call   c0027c0c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 72 9f 01 00       	call   c00272ab <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 3c ac 01 00       	call   c0027f8b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 88 ae 01 00       	call   c00281f7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 7d a5 01 00       	call   c0027928 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 4f a5 01 00       	call   c0027928 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 86 ab 01 00       	call   c0027f8b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ea a7 01 00       	call   c0027c0c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 b7 a7 01 00       	call   c0027c0c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 36 9e 01 00       	call   c00272ab <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 23 af 01 00       	call   c00283b0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 f5 aa 01 00       	call   c0027f8b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 4c a4 01 00       	call   c00278fc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 2b ad 01 00       	call   c00281f7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 c3 9d 01 00       	call   c00272ab <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 e7 a3 01 00       	call   c00278fc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 89 ae 01 00       	call   c00283b0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 47 ac 01 00       	call   c00281f7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 05 ac 01 00       	call   c00281d9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 9c a9 01 00       	call   c0027f8b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 9d 9c 01 00       	call   c00272ab <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 6c a9 01 00       	call   c0027f8b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 d3 a5 01 00       	call   c0027c0c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 72 ab 01 00       	call   c00281d9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 75 ab 01 00       	call   c00281f7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 48 ab 01 00       	call   c00281f7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 41 a5 01 00       	call   c0027c0c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 cb ac 01 00       	call   c00283b0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 a2 ac 01 00       	call   c00283b0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 74 a8 01 00       	call   c0027f8b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 cb a1 01 00       	call   c00278fc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 aa aa 01 00       	call   c00281f7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 43 9b 01 00       	call   c00272ab <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 6b a1 01 00       	call   c00278fc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 0d ac 01 00       	call   c00283b0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 46 a4 01 00       	call   c0027c0c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 c3 9a 01 00       	call   c00272ab <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 ef a6 01 00       	call   c0027f8b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 ef 99 01 00       	call   c00272ab <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 cf 99 01 00       	call   c00272ab <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 9f a6 01 00       	call   c0027f8b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 d3 a8 01 00       	call   c00281d9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ca 9f 01 00       	call   c00278fc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 4c aa 01 00       	call   c0028390 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 73 a8 01 00       	call   c00281d9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 6d 9f 01 00       	call   c00278fc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 eb a5 01 00       	call   c0027f8b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 6e 9f 01 00       	call   c0027928 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 c0 a5 01 00       	call   c0027f8b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 27 a2 01 00       	call   c0027c0c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 a6 98 01 00       	call   c00272ab <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 70 a5 01 00       	call   c0027f8b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 bc a7 01 00       	call   c00281f7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 b1 9e 01 00       	call   c0027928 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 83 9e 01 00       	call   c0027928 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 c7 a4 01 00       	call   c0027f8b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 2e a1 01 00       	call   c0027c0c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 17 9e 01 00       	call   c0027928 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 d3 a6 01 00       	call   c00281fb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 c6 a0 01 00       	call   c0027c0c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 45 97 01 00       	call   c00272ab <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 32 a8 01 00       	call   c00283b0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 04 a4 01 00       	call   c0027f8b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 5b 9d 01 00       	call   c00278fc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 3a a6 01 00       	call   c00281f7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 d2 96 01 00       	call   c00272ab <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 fa 9c 01 00       	call   c00278fc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 9c a7 01 00       	call   c00283b0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 44 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63bc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 38 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63c8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 4f a4 01 00       	call   c00281f7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 0d a4 01 00       	call   c00281d9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 f9 a3 01 00       	call   c00281f7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 6b a1 01 00       	call   c0027f8b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 e9 9a 01 00       	call   c0027928 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 3b a1 01 00       	call   c0027f8b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 41 94 01 00       	call   c00272ab <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 10 a1 01 00       	call   c0027f8b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 60 a3 01 00       	call   c00281f5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 41 9a 01 00       	call   c00278fc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 c3 a4 01 00       	call   c0028390 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ea a2 01 00       	call   c00281d9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 e9 99 01 00       	call   c00278fc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 67 a0 01 00       	call   c0027f8b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ea 99 01 00       	call   c0027928 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 3c a0 01 00       	call   c0027f8b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 a3 9c 01 00       	call   c0027c0c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 22 93 01 00       	call   c00272ab <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 4a 9c 01 00       	call   c0027c0c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 d0 92 01 00       	call   c00272ab <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 be a3 01 00       	call   c00283b0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 90 9f 01 00       	call   c0027f8b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 e7 98 01 00       	call   c00278fc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 c6 a1 01 00       	call   c00281f7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 5f 92 01 00       	call   c00272ab <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 8b 98 01 00       	call   c00278fc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 2d a3 01 00       	call   c00283b0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 da 9e 01 00       	call   c0027f8b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 57 98 01 00       	call   c0027928 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 a8 9e 01 00       	call   c0027f8b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 ae 91 01 00       	call   c00272ab <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 7e 9e 01 00       	call   c0027f8b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 d2 a0 01 00       	call   c00281f9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 ab 97 01 00       	call   c00278fc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 2d a2 01 00       	call   c0028390 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 54 a0 01 00       	call   c00281d9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 52 97 01 00       	call   c00278fc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 d0 9d 01 00       	call   c0027f8b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 53 97 01 00       	call   c0027928 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 a5 9d 01 00       	call   c0027f8b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 0c 9a 01 00       	call   c0027c0c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 8b 90 01 00       	call   c00272ab <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 a7 99 01 00       	call   c0027c0c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 26 90 01 00       	call   c00272ab <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 14 a1 01 00       	call   c00283b0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 e6 9c 01 00       	call   c0027f8b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 3d 96 01 00       	call   c00278fc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 1c 9f 01 00       	call   c00281f7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 b5 8f 01 00       	call   c00272ab <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 e1 95 01 00       	call   c00278fc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 52 9c 01 00       	call   c0027f8b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 58 8f 01 00       	call   c00272ab <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 5e 9d 02 c0       	mov    eax,0xc0029d5e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 6f 9d 02 c0       	mov    eax,0xc0029d6f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c000e4e3:	ff 05 e4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d e0 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030ee0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c000e50d:	e8 cf f4 00 00       	call   c001d9e1 <schedule()>
c000e512:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000e517:	48                   	dec    eax
c000e518:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 30 db 02 c0       	mov    eax,ds:0xc002db30
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 a6 9d 02 c0       	push   0xc0029da6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 c8 d9 02 c0       	mov    eax,0xc002d9c8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 af 9d 02 c0       	push   0xc0029daf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 24 67 02 c0       	mov    eax,0xc0026724
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 b9 9d 02 c0       	push   0xc0029db9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 58 64 02 c0       	mov    eax,0xc0026458
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 c2 9d 02 c0       	push   0xc0029dc2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 24 68 02 c0       	mov    eax,0xc0026824
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 cc 9d 02 c0       	push   0xc0029dcc
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 a4 65 02 c0       	mov    eax,0xc00265a4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 d5 9d 02 c0       	push   0xc0029dd5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 cc d9 02 c0       	mov    eax,0xc002d9cc
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 e2 9d 02 c0       	push   0xc0029de2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 cd d9 02 c0       	mov    eax,0xc002d9cd
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 39 56 00 00       	call   c0013ca6 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 ef 9d 02 c0       	push   0xc0029def
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c000e6be:	68 08 9e 02 c0       	push   0xc0029e08
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 f9 ee 00 00       	call   c001d5c4 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 dc f0 00 00       	call   c001d7bc <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 a0 e1 01 c0       	push   0xc001e1a0
c000e6e9:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c000e6ef:	e8 c8 f0 00 00       	call   c001d7bc <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c000e6fc:	68 ec 9e 02 c0       	push   0xc0029eec
c000e701:	c6 05 cd d9 02 c0 01 	mov    BYTE PTR ds:0xc002d9cd,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 39 fe 00 00       	call   c001e54b <Vm::initialise8086()>
c000e712:	e8 57 43 00 00       	call   c0012a6e <Fs::initVFS()>
c000e717:	c7 04 24 15 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e15
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 ec 9e 02 c0       	push   0xc0029eec
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 fd d6 00 00       	call   c001be49 <Sys::loadSyscalls()>
c000e74c:	e8 f5 b5 00 00       	call   c0019d46 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 2f 9e 02 c0       	push   0xc0029e2f
c000e75b:	68 38 9e 02 c0       	push   0xc0029e38
c000e760:	e8 a6 c4 00 00       	call   c001ac0b <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 f1 4d 00 00       	call   c001355e <User::loadClockSettings(int)>
c000e76d:	c7 04 24 10 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f10
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 dc 54 00 00       	call   c0013c66 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 40 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e40
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 13 b1 00 00       	call   c00198ae <Krnl::startCPUs()>
c000e79b:	c7 04 24 5a 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e5a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 6b 9e 02 c0       	push   0xc0029e6b
c000e7b6:	e8 5e e8 00 00       	call   c001d019 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 89 ea 00 00       	call   c001d24d <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 e6 f3 00 00       	call   c001dbb7 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 87 9e 02 c0       	push   0xc0029e87
c000e7e5:	50                   	push   eax
c000e7e6:	e8 35 55 00 00       	call   c0013d20 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 5c 9f 02 c0       	mov    edx,0xc0029f5c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 e1 d9 02 c0 04 	test   BYTE PTR ds:0xc002d9e1,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 67 7a 01 00       	call   c00263e6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 86 9e 00 00       	call   c0018840 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 5f 9e 00 00       	call   c0018840 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 3d 9e 00 00       	call   c0018840 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 1b 9e 00 00       	call   c0018840 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 e0 d9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d9e0,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 29 9d 00 00       	call   c00187bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 04 9d 00 00       	call   c00187bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 d1 78 01 00       	call   c00263a0 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 8e 78 01 00       	call   c0026380 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 20 9d 00 00       	call   c0018840 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 90 9e 02 c0       	push   0xc0029e90
c000eb62:	e8 e8 b2 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 96 9e 02 c0       	push   0xc0029e96
c000eb9a:	e8 b0 b2 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 30 9f 02 c0       	push   0xc0029f30
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 e0 d9 02 c0 04 	test   BYTE PTR ds:0xc002d9e0,0x4
c000ec03:	0f 94 05 00 c9 02 c0 	sete   BYTE PTR ds:0xc002c900
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 9b 8e 00 00       	call   c0017ab4 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 f4 4e 00 00       	call   c0013b1c <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 40 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e40
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 9c 9c 00 00       	call   c00188f8 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 b1 4e 00 00       	call   c0013b1c <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 2d 54 00 00       	call   c00140b4 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 81 4e 00 00       	call   c0013b1c <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 9c 9e 02 c0       	push   0xc0029e9c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 15 ec 00 00       	call   c001d8de <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 b7 9e 02 c0       	push   0xc0029eb7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 cc 39 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 c8 9e 02 c0       	push   0xc0029ec8
c000ed34:	e8 16 b1 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 d5 9e 02 c0       	push   0xc0029ed5
c000ed49:	e8 01 b1 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 df 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029edf
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 ea b0 00 00       	jmp    c0019e4f <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 d2 d9 02 c0       	mov    ds:0xc002d9d2,eax
c000ee21:	66 89 15 d0 d9 02 c0 	mov    WORD PTR ds:0xc002d9d0,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000ef38:	48                   	dec    eax
c000ef39:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 a1 94 01 00       	call   c0028430 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 98 94 01 00       	call   c0028430 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 d8 d9 02 c0 ff 07 	mov    WORD PTR ds:0xc002d9d8,0x7ff
c000f085:	a3 da d9 02 c0       	mov    ds:0xc002d9da,eax
c000f08a:	0f 01 1d d8 d9 02 c0 	lidtd  ds:0xc002d9d8
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c000f37c:	e8 5d 27 00 00       	call   c0011ade <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c7 17 00 00       	call   c0010b66 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 f8 17 00 00       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 c8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c8
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 9c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c79c
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 9c c7 02 c0       	mov    eax,ds:0xc002c79c
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 80 9f 02 c0       	push   0xc0029f80
c000f455:	e8 89 32 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 9c c7 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c79c,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c000f481:	8b 2d 9c c7 02 c0    	mov    ebp,DWORD PTR ds:0xc002c79c
c000f487:	e8 09 05 00 00       	call   c000f995 <Phys::allocatePage()>
c000f48c:	68 01 04 00 00       	push   0x401
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 43 25 00 00       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 9c c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c79c
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 b0 9f 02 c0       	push   0xc0029fb0
c000f50d:	e8 3d a9 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 b5 9f 02 c0       	push   0xc0029fb5
c000f523:	e8 27 a9 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000f543:	48                   	dec    eax
c000f544:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c000f561:	e8 78 25 00 00       	call   c0011ade <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c000f577:	e8 0c 22 00 00       	call   c0011788 <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 bc 9f 02 c0       	push   0xc0029fbc
c000f6a4:	e8 3a 30 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 b8 09 00 00       	call   c0010066 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 a0 c7 02 c0 	movzx  eax,BYTE PTR ds:0xc002c7a0
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 a0 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3860]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 d6 c7 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd382a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 d5 c7 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd382b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 a0 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3860]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 d4 9f 02 c0       	push   0xc0029fd4
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 e0 d9 02 c0       	mov    ds:0xc002d9e0,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 cb 03 00 00       	call   c000fb21 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 83 1c 00 00       	call   c00113de <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 4a 1e 00 00       	call   c00115b0 <VAS::VAS()>
c000f766:	89 1d 30 db 02 c0    	mov    DWORD PTR ds:0xc002db30,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 c8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9c8,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 be 20 00 00       	call   c0011860 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 ed                	xor    ebp,ebp
c000f7ac:	57                   	push   edi
c000f7ad:	56                   	push   esi
c000f7ae:	53                   	push   ebx
c000f7af:	31 db                	xor    ebx,ebx
c000f7b1:	83 ec 18             	sub    esp,0x18
c000f7b4:	68 f3 9f 02 c0       	push   0xc0029ff3
c000f7b9:	e8 25 2f 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	31 d2                	xor    edx,edx
c000f7c4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	c1 ee 0c             	shr    esi,0xc
c000f7d0:	31 c9                	xor    ecx,ecx
c000f7d2:	eb 17                	jmp    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7d4:	85 c9                	test   ecx,ecx
c000f7d6:	75 04                	jne    c000f7dc <Phys::allocateDMA(unsigned long)+0x33>
c000f7d8:	89 d5                	mov    ebp,edx
c000f7da:	89 d3                	mov    ebx,edx
c000f7dc:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7df:	39 c6                	cmp    esi,eax
c000f7e1:	74 23                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x5d>
c000f7e3:	42                   	inc    edx
c000f7e4:	89 c1                	mov    ecx,eax
c000f7e6:	83 fa 2f             	cmp    edx,0x2f
c000f7e9:	7f 11                	jg     c000f7fc <Phys::allocateDMA(unsigned long)+0x53>
c000f7eb:	80 ba 20 da 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd25e0],0x0
c000f7f2:	74 e0                	je     c000f7d4 <Phys::allocateDMA(unsigned long)+0x2b>
c000f7f4:	31 c9                	xor    ecx,ecx
c000f7f6:	42                   	inc    edx
c000f7f7:	83 fa 2f             	cmp    edx,0x2f
c000f7fa:	7e ef                	jle    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	5f                   	pop    edi
c000f804:	5d                   	pop    ebp
c000f805:	c3                   	ret    
c000f806:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f809:	89 d7                	mov    edi,edx
c000f80b:	4f                   	dec    edi
c000f80c:	79 03                	jns    c000f811 <Phys::allocateDMA(unsigned long)+0x68>
c000f80e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f811:	c1 ff 04             	sar    edi,0x4
c000f814:	89 da                	mov    edx,ebx
c000f816:	c1 fa 04             	sar    edx,0x4
c000f819:	39 fa                	cmp    edx,edi
c000f81b:	75 43                	jne    c000f860 <Phys::allocateDMA(unsigned long)+0xb7>
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 1a                	je     c000f83b <Phys::allocateDMA(unsigned long)+0x92>
c000f821:	be 20 da 02 c0       	mov    esi,0xc002da20
c000f826:	8d 93 20 da 02 c0    	lea    edx,[ebx-0x3ffd25e0]
c000f82c:	f7 d6                	not    esi
c000f82e:	29 de                	sub    esi,ebx
c000f830:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f833:	42                   	inc    edx
c000f834:	8d 04 16             	lea    eax,[esi+edx*1]
c000f837:	39 c1                	cmp    ecx,eax
c000f839:	7f f5                	jg     c000f830 <Phys::allocateDMA(unsigned long)+0x87>
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	68 0c a0 02 c0       	push   0xc002a00c
c000f843:	e8 9b 2e 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 ff                	test   edi,edi
c000f84d:	74 17                	je     c000f866 <Phys::allocateDMA(unsigned long)+0xbd>
c000f84f:	83 c4 0c             	add    esp,0xc
c000f852:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f858:	5b                   	pop    ebx
c000f859:	c1 e0 0c             	shl    eax,0xc
c000f85c:	5e                   	pop    esi
c000f85d:	5f                   	pop    edi
c000f85e:	5d                   	pop    ebp
c000f85f:	c3                   	ret    
c000f860:	89 ea                	mov    edx,ebp
c000f862:	31 c9                	xor    ecx,ecx
c000f864:	eb 90                	jmp    c000f7f6 <Phys::allocateDMA(unsigned long)+0x4d>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	c1 e3 0c             	shl    ebx,0xc
c000f86c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    

c000f877 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 23 a0 02 c0       	push   0xc002a023
c000f87f:	e8 5f 2e 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000f884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	c1 e9 0c             	shr    ecx,0xc
c000f898:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000f8a0:	76 29                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000f8a2:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000f8a8:	c1 ea 0c             	shr    edx,0xc
c000f8ab:	83 c2 10             	add    edx,0x10
c000f8ae:	85 c9                	test   ecx,ecx
c000f8b0:	74 15                	je     c000f8c7 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000f8b2:	8d 82 20 da 02 c0    	lea    eax,[edx-0x3ffd25e0]
c000f8b8:	8d 94 11 20 da 02 c0 	lea    edx,[ecx+edx*1-0x3ffd25e0]
c000f8bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c2:	40                   	inc    eax
c000f8c3:	39 d0                	cmp    eax,edx
c000f8c5:	75 f8                	jne    c000f8bf <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000f8c7:	83 c4 0c             	add    esp,0xc
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb d8                	jmp    c000f8ae <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 e4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8e4
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 e4 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c8e4
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 e4 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c8e4
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f92c:	53                   	push   ebx
c000f92d:	68 39 a0 02 c0       	push   0xc002a039
c000f932:	e8 ac 2d 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f940:	76 3d                	jbe    c000f97f <Phys::freePage(unsigned long)+0x5b>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	c1 eb 0c             	shr    ebx,0xc
c000f948:	53                   	push   ebx
c000f949:	e8 ba ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	84 c0                	test   al,al
c000f953:	74 19                	je     c000f96e <Phys::freePage(unsigned long)+0x4a>
c000f955:	83 ec 08             	sub    esp,0x8
c000f958:	ff 0d 10 da 02 c0    	dec    DWORD PTR ds:0xc002da10
c000f95e:	6a 00                	push   0x0
c000f960:	53                   	push   ebx
c000f961:	e8 70 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 08             	add    esp,0x8
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	c7 44 24 10 4c a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a04c
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 d0 a4 00 00       	jmp    c0019e4f <Krnl::panic(char const*)>
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 00 10 00 00       	push   0x1000
c000f987:	53                   	push   ebx
c000f988:	e8 ea fe ff ff       	call   c000f877 <Phys::freeDMA(unsigned long, unsigned long)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	83 c4 08             	add    esp,0x8
c000f993:	5b                   	pop    ebx
c000f994:	c3                   	ret    

c000f995 <Phys::allocatePage()>:
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	83 ec 14             	sub    esp,0x14
c000f99a:	8b 35 04 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da04
c000f9a0:	89 f3                	mov    ebx,esi
c000f9a2:	eb 0a                	jmp    c000f9ae <Phys::allocatePage()+0x19>
c000f9a4:	89 1d 04 da 02 c0    	mov    DWORD PTR ds:0xc002da04,ebx
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 24                	je     c000f9d2 <Phys::allocatePage()+0x3d>
c000f9ae:	53                   	push   ebx
c000f9af:	e8 54 ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9b4:	5a                   	pop    edx
c000f9b5:	84 c0                	test   al,al
c000f9b7:	74 76                	je     c000fa2f <Phys::allocatePage()+0x9a>
c000f9b9:	43                   	inc    ebx
c000f9ba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9c0:	75 e2                	jne    c000f9a4 <Phys::allocatePage()+0xf>
c000f9c2:	31 db                	xor    ebx,ebx
c000f9c4:	c7 05 04 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da04,0x0
c000f9ce:	39 de                	cmp    esi,ebx
c000f9d0:	75 dc                	jne    c000f9ae <Phys::allocatePage()+0x19>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 80 a0 02 c0       	push   0xc002a080
c000f9da:	e8 04 2d 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000f9df:	58                   	pop    eax
c000f9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ee:	e8 9d 29 00 00       	call   c0012390 <VAS::scanForEviction()>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 76                	jne    c000fa70 <Phys::allocatePage()+0xdb>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	68 00 10 00 00       	push   0x1000
c000fa02:	e8 a2 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 5c                	jne    c000fa6a <Phys::allocatePage()+0xd5>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 98 a0 02 c0       	push   0xc002a098
c000fa16:	e8 34 a4 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 1d 04 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da04
c000fa24:	53                   	push   ebx
c000fa25:	e8 de fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa2a:	5a                   	pop    edx
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 8a                	jne    c000f9b9 <Phys::allocatePage()+0x24>
c000fa2f:	6a 01                	push   0x1
c000fa31:	53                   	push   ebx
c000fa32:	e8 9f fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa37:	5a                   	pop    edx
c000fa38:	a1 10 da 02 c0       	mov    eax,ds:0xc002da10
c000fa3d:	59                   	pop    ecx
c000fa3e:	40                   	inc    eax
c000fa3f:	8b 15 04 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da04
c000fa45:	a3 10 da 02 c0       	mov    ds:0xc002da10,eax
c000fa4a:	c1 e2 0c             	shl    edx,0xc
c000fa4d:	52                   	push   edx
c000fa4e:	ff 35 14 da 02 c0    	push   DWORD PTR ds:0xc002da14
c000fa54:	50                   	push   eax
c000fa55:	68 62 a0 02 c0       	push   0xc002a062
c000fa5a:	e8 84 2c 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000fa5f:	a1 04 da 02 c0       	mov    eax,ds:0xc002da04
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c1 e0 0c             	shl    eax,0xc
c000fa6a:	83 c4 14             	add    esp,0x14
c000fa6d:	5b                   	pop    ebx
c000fa6e:	5e                   	pop    esi
c000fa6f:	c3                   	ret    
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	89 c2                	mov    edx,eax
c000fa75:	6a 01                	push   0x1
c000fa77:	c1 ea 0c             	shr    edx,0xc
c000fa7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa7e:	52                   	push   edx
c000fa7f:	e8 52 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	eb dd                	jmp    c000fa6a <Phys::allocatePage()+0xd5>

c000fa8d <Phys::allocateContiguousPages(int)>:
c000fa8d:	57                   	push   edi
c000fa8e:	56                   	push   esi
c000fa8f:	53                   	push   ebx
c000fa90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa94:	fa                   	cli    
c000fa95:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c000fa9b:	31 db                	xor    ebx,ebx
c000fa9d:	85 db                	test   ebx,ebx
c000fa9f:	75 11                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000faa1:	e8 ef fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000faa6:	83 fe 01             	cmp    esi,0x1
c000faa9:	89 c7                	mov    edi,eax
c000faab:	74 21                	je     c000face <Phys::allocateContiguousPages(int)+0x41>
c000faad:	bb 01 00 00 00       	mov    ebx,0x1
c000fab2:	e8 de fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	c1 e2 0c             	shl    edx,0xc
c000fabc:	01 fa                	add    edx,edi
c000fabe:	39 c2                	cmp    edx,eax
c000fac0:	74 20                	je     c000fae2 <Phys::allocateContiguousPages(int)+0x55>
c000fac2:	bb 01 00 00 00       	mov    ebx,0x1
c000fac7:	89 c7                	mov    edi,eax
c000fac9:	83 fe 01             	cmp    esi,0x1
c000facc:	75 e4                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000face:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000fad3:	48                   	dec    eax
c000fad4:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000fad9:	75 01                	jne    c000fadc <Phys::allocateContiguousPages(int)+0x4f>
c000fadb:	fb                   	sti    
c000fadc:	89 f8                	mov    eax,edi
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	c3                   	ret    
c000fae2:	43                   	inc    ebx
c000fae3:	39 f3                	cmp    ebx,esi
c000fae5:	75 b6                	jne    c000fa9d <Phys::allocateContiguousPages(int)+0x10>
c000fae7:	eb e5                	jmp    c000face <Phys::allocateContiguousPages(int)+0x41>

c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faef:	39 1d 08 da 02 c0    	cmp    DWORD PTR ds:0xc002da08,ebx
c000faf5:	73 06                	jae    c000fafd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000faf7:	89 1d 08 da 02 c0    	mov    DWORD PTR ds:0xc002da08,ebx
c000fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb01:	c1 eb 0c             	shr    ebx,0xc
c000fb04:	c1 e8 0c             	shr    eax,0xc
c000fb07:	39 d8                	cmp    eax,ebx
c000fb09:	73 13                	jae    c000fb1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb0b:	6a 00                	push   0x0
c000fb0d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb10:	50                   	push   eax
c000fb11:	e8 c0 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb16:	5a                   	pop    edx
c000fb17:	89 f0                	mov    eax,esi
c000fb19:	59                   	pop    ecx
c000fb1a:	39 f3                	cmp    ebx,esi
c000fb1c:	75 ed                	jne    c000fb0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    

c000fb21 <Phys::physicalMemorySetup(unsigned int)>:
c000fb21:	55                   	push   ebp
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	83 ec 40             	sub    esp,0x40
c000fb28:	6a 30                	push   0x30
c000fb2a:	6a 00                	push   0x0
c000fb2c:	68 20 da 02 c0       	push   0xc002da20
c000fb31:	e8 1a 0c ff ff       	call   c0000750 <memset>
c000fb36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb3f:	05 00 10 00 00       	add    eax,0x1000
c000fb44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb48:	5b                   	pop    ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	5e                   	pop    esi
c000fb4c:	50                   	push   eax
c000fb4d:	68 a6 a0 02 c0       	push   0xc002a0a6
c000fb52:	e8 8c 2b 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	43                   	inc    ebx
c000fb61:	e8 70 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb6f:	75 e9                	jne    c000fb5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb71:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb78:	66 85 c0             	test   ax,ax
c000fb7b:	0f 84 8e 01 00 00    	je     c000fd0f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb91:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fba2:	eb 15                	jmp    c000fbb9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fba4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fba8:	83 c3 18             	add    ebx,0x18
c000fbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbaf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbb3:	0f 84 66 01 00 00    	je     c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbb9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbbf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbca:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fbcc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbcf:	01 f0                	add    eax,esi
c000fbd1:	55                   	push   ebp
c000fbd2:	11 fa                	adc    edx,edi
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbe0:	56                   	push   esi
c000fbe1:	68 e8 a0 02 c0       	push   0xc002a0e8
c000fbe6:	e8 f8 2a 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000fbeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	09 f8                	or     eax,edi
c000fbf4:	0f 85 25 01 00 00    	jne    c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbfa:	4d                   	dec    ebp
c000fbfb:	75 a7                	jne    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbfd:	ba 00 00 08 00       	mov    edx,0x80000
c000fc02:	89 c1                	mov    ecx,eax
c000fc04:	39 f2                	cmp    edx,esi
c000fc06:	19 f9                	sbb    ecx,edi
c000fc08:	0f 82 a7 00 00 00    	jb     c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc0e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc12:	89 c1                	mov    ecx,eax
c000fc14:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc18:	0f 83 97 00 00 00    	jae    c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc1e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc2b:	39 fa                	cmp    edx,edi
c000fc2d:	19 e8                	sbb    eax,ebp
c000fc2f:	0f 82 14 01 00 00    	jb     c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fc35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc39:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc3d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc43:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc48:	83 d5 ff             	adc    ebp,0xffffffff
c000fc4b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc55:	39 fa                	cmp    edx,edi
c000fc57:	89 c1                	mov    ecx,eax
c000fc59:	19 e9                	sbb    ecx,ebp
c000fc5b:	0f 83 43 ff ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc61:	be 00 00 08 00       	mov    esi,0x80000
c000fc66:	50                   	push   eax
c000fc67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc6b:	57                   	push   edi
c000fc6c:	56                   	push   esi
c000fc6d:	68 0c a1 02 c0       	push   0xc002a10c
c000fc72:	e8 6c 2a 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000fc77:	5a                   	pop    edx
c000fc78:	59                   	pop    ecx
c000fc79:	57                   	push   edi
c000fc7a:	56                   	push   esi
c000fc7b:	e8 69 fe ff ff       	call   c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc88:	83 c4 0c             	add    esp,0xc
c000fc8b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc8f:	03 05 14 da 02 c0    	add    eax,DWORD PTR ds:0xc002da14
c000fc95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9c:	a3 14 da 02 c0       	mov    ds:0xc002da14,eax
c000fca1:	52                   	push   edx
c000fca2:	50                   	push   eax
c000fca3:	68 cc a0 02 c0       	push   0xc002a0cc
c000fca8:	e8 36 2a 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	e9 ef fe ff ff       	jmp    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcb5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcc1:	39 ea                	cmp    edx,ebp
c000fcc3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcc7:	0f 82 d7 fe ff ff    	jb     c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fccd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcd2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcd6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcda:	0f 83 c4 fe ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fce0:	39 ee                	cmp    esi,ebp
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fce8:	0f 83 78 ff ff ff    	jae    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcfe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd0a:	e9 57 ff ff ff       	jmp    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	68 be a0 02 c0       	push   0xc002a0be
c000fd17:	e8 33 a1 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	bb 40 01 00 00       	mov    ebx,0x140
c000fd24:	83 ec 08             	sub    esp,0x8
c000fd27:	6a 00                	push   0x0
c000fd29:	53                   	push   ebx
c000fd2a:	43                   	inc    ebx
c000fd2b:	e8 a6 fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd30:	ff 05 14 da 02 c0    	inc    DWORD PTR ds:0xc002da14
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd3f:	75 e3                	jne    c000fd24 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd41:	83 c4 3c             	add    esp,0x3c
c000fd44:	5b                   	pop    ebx
c000fd45:	5e                   	pop    esi
c000fd46:	5f                   	pop    edi
c000fd47:	5d                   	pop    ebp
c000fd48:	c3                   	ret    
c000fd49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd59:	e9 d7 fe ff ff       	jmp    c000fc35 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000fd5e <Pipe::isAtty()>:
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	c3                   	ret    
c000fd61:	90                   	nop

c000fd62 <Pipe::~Pipe()>:
c000fd62:	83 ec 0c             	sub    esp,0xc
c000fd65:	ba 78 a1 02 c0       	mov    edx,0xc002a178
c000fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6e:	89 10                	mov    DWORD PTR [eax],edx
c000fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	50                   	push   eax
c000fd78:	e8 41 12 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	90                   	nop
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::~Pipe()>:
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd90:	e8 cd ff ff ff       	call   c000fd62 <Pipe::~Pipe()>
c000fd95:	83 c4 10             	add    esp,0x10
c000fd98:	83 ec 08             	sub    esp,0x8
c000fd9b:	6a 20                	push   0x20
c000fd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda1:	e8 65 28 00 00       	call   c001260b <operator delete(void*, unsigned long)>
c000fda6:	83 c4 10             	add    esp,0x10
c000fda9:	83 c4 0c             	add    esp,0xc
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <Pipe::read(unsigned long long, void*, int*)>:
c000fdae:	55                   	push   ebp
c000fdaf:	57                   	push   edi
c000fdb0:	56                   	push   esi
c000fdb1:	53                   	push   ebx
c000fdb2:	83 ec 1c             	sub    esp,0x1c
c000fdb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdc1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc4:	89 c8                	mov    eax,ecx
c000fdc6:	99                   	cdq    
c000fdc7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdcb:	74 24                	je     c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdcd:	39 f9                	cmp    ecx,edi
c000fdcf:	89 d1                	mov    ecx,edx
c000fdd1:	19 f1                	sbb    ecx,esi
c000fdd3:	73 1c                	jae    c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd5:	fa                   	cli    
c000fdd6:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c000fddc:	e8 00 dc 00 00       	call   c001d9e1 <schedule()>
c000fde1:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000fde6:	48                   	dec    eax
c000fde7:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000fdec:	75 d3                	jne    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdee:	fb                   	sti    
c000fdef:	eb d0                	jmp    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf1:	39 f8                	cmp    eax,edi
c000fdf3:	89 d1                	mov    ecx,edx
c000fdf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdfc:	19 f1                	sbb    ecx,esi
c000fdfe:	73 07                	jae    c000fe07 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe00:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe07:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe0a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe0d:	29 f7                	sub    edi,esi
c000fe0f:	89 f8                	mov    eax,edi
c000fe11:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe15:	99                   	cdq    
c000fe16:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe1d:	19 d0                	sbb    eax,edx
c000fe1f:	73 07                	jae    c000fe28 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe28:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe2b:	89 ea                	mov    edx,ebp
c000fe2d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe36:	74 0d                	je     c000fe45 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe38:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe3b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe45:	85 d2                	test   edx,edx
c000fe47:	74 11                	je     c000fe5a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe50:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe54:	89 d1                	mov    ecx,edx
c000fe56:	89 c7                	mov    edi,eax
c000fe58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe5d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe60:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe63:	99                   	cdq    
c000fe64:	89 f7                	mov    edi,esi
c000fe66:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe6d:	c1 ff 1f             	sar    edi,0x1f
c000fe70:	57                   	push   edi
c000fe71:	56                   	push   esi
c000fe72:	52                   	push   edx
c000fe73:	50                   	push   eax
c000fe74:	e8 ab 69 01 00       	call   c0026824 <__umoddi3>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe7f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe84:	75 10                	jne    c000fe96 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	68 35 a1 02 c0       	push   0xc002a135
c000fe8e:	e8 bc 9f 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe9a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe9d:	89 10                	mov    DWORD PTR [eax],edx
c000fe9f:	83 c4 1c             	add    esp,0x1c
c000fea2:	31 c0                	xor    eax,eax
c000fea4:	5b                   	pop    ebx
c000fea5:	5e                   	pop    esi
c000fea6:	5f                   	pop    edi
c000fea7:	5d                   	pop    ebp
c000fea8:	c3                   	ret    
c000fea9:	90                   	nop

c000feaa <Pipe::write(unsigned long long, void*, int*)>:
c000feaa:	55                   	push   ebp
c000feab:	57                   	push   edi
c000feac:	56                   	push   esi
c000fead:	53                   	push   ebx
c000feae:	83 ec 1c             	sub    esp,0x1c
c000feb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feb9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000febc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fec7:	89 d8                	mov    eax,ebx
c000fec9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fecc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fed0:	89 d6                	mov    esi,edx
c000fed2:	89 d7                	mov    edi,edx
c000fed4:	c1 ff 1f             	sar    edi,0x1f
c000fed7:	03 34 24             	add    esi,DWORD PTR [esp]
c000feda:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fede:	c1 f8 1f             	sar    eax,0x1f
c000fee1:	39 f3                	cmp    ebx,esi
c000fee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feeb:	19 f8                	sbb    eax,edi
c000feed:	b8 01 00 00 00       	mov    eax,0x1
c000fef2:	72 6e                	jb     c000ff62 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fef7:	01 d0                	add    eax,edx
c000fef9:	99                   	cdq    
c000fefa:	f7 fb                	idiv   ebx
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	29 d3                	sub    ebx,edx
c000ff02:	89 d7                	mov    edi,edx
c000ff04:	89 de                	mov    esi,ebx
c000ff06:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff09:	c1 fb 1f             	sar    ebx,0x1f
c000ff0c:	39 f2                	cmp    edx,esi
c000ff0e:	19 d8                	sbb    eax,ebx
c000ff10:	b8 00 00 00 00       	mov    eax,0x0
c000ff15:	72 04                	jb     c000ff1b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff17:	89 d0                	mov    eax,edx
c000ff19:	29 f0                	sub    eax,esi
c000ff1b:	89 d3                	mov    ebx,edx
c000ff1d:	29 c3                	sub    ebx,eax
c000ff1f:	74 0b                	je     c000ff2c <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff21:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff24:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff28:	89 d9                	mov    ecx,ebx
c000ff2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 0d                	je     c000ff3d <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff30:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff34:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff37:	89 de                	mov    esi,ebx
c000ff39:	89 c1                	mov    ecx,eax
c000ff3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff3d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff40:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff45:	75 10                	jne    c000ff57 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	68 51 a1 02 c0       	push   0xc002a151
c000ff4f:	e8 fb 9e 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff5b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff5e:	89 08                	mov    DWORD PTR [eax],ecx
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	83 c4 1c             	add    esp,0x1c
c000ff65:	5b                   	pop    ebx
c000ff66:	5e                   	pop    esi
c000ff67:	5f                   	pop    edi
c000ff68:	5d                   	pop    ebp
c000ff69:	c3                   	ret    

c000ff6a <Pipe::Pipe(int)>:
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	83 ec 08             	sub    esp,0x8
c000ff74:	6a 00                	push   0x0
c000ff76:	50                   	push   eax
c000ff77:	e8 60 0e 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	ba 78 a1 02 c0       	mov    edx,0xc002a178
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	50                   	push   eax
c000ffb3:	e8 e1 f5 ff ff       	call   c000f599 <malloc>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	89 c2                	mov    edx,eax
c000ffbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::isAtty()>:
c000ffd2:	b0 01                	mov    al,0x1
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::~VgaText()>:
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	ba 00 a2 02 c0       	mov    edx,0xc002a200
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	89 10                	mov    DWORD PTR [eax],edx
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	50                   	push   eax
c000ffec:	e8 cd 0f 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	90                   	nop
c000fff5:	83 c4 0c             	add    esp,0xc
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <VgaText::~VgaText()>:
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010004:	e8 cd ff ff ff       	call   c000ffd6 <VgaText::~VgaText()>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	83 ec 08             	sub    esp,0x8
c001000f:	68 c4 02 00 00       	push   0x2c4
c0010014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010018:	e8 ee 25 00 00       	call   c001260b <operator delete(void*, unsigned long)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	c3                   	ret    

c0010024 <VgaText::read(unsigned long long, void*, int*)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010033:	e8 72 5b 00 00       	call   c0015baa <readKeyboard(VgaText*, char*, unsigned long)>
c0010038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001003c:	89 02                	mov    DWORD PTR [edx],eax
c001003e:	31 c0                	xor    eax,eax
c0010040:	83 c4 1c             	add    esp,0x1c
c0010043:	c3                   	ret    

c0010044 <setTerminalScrollLock(bool)>:
c0010044:	c3                   	ret    

c0010045 <addToTerminalCycle(VgaText*)>:
c0010045:	8b 15 80 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da80
c001004b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004f:	85 d2                	test   edx,edx
c0010051:	75 09                	jne    c001005c <addToTerminalCycle(VgaText*)+0x17>
c0010053:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010056:	a3 80 da 02 c0       	mov    ds:0xc002da80,eax
c001005b:	c3                   	ret    
c001005c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001005f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010062:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010065:	c3                   	ret    

c0010066 <installVgaTextImplementation()>:
c0010066:	83 ec 10             	sub    esp,0x10
c0010069:	6a 20                	push   0x20
c001006b:	6a 00                	push   0x0
c001006d:	68 60 da 02 c0       	push   0xc002da60
c0010072:	e8 d9 06 ff ff       	call   c0000750 <memset>
c0010077:	83 c4 1c             	add    esp,0x1c
c001007a:	c3                   	ret    

c001007b <scrollTerminalScrollLock(int)>:
c001007b:	c3                   	ret    

c001007c <VgaText::updateTitle()>:
c001007c:	53                   	push   ebx
c001007d:	31 c0                	xor    eax,eax
c001007f:	83 ec 58             	sub    esp,0x58
c0010082:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010086:	89 e1                	mov    ecx,esp
c0010088:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001008c:	40                   	inc    eax
c001008d:	83 f8 50             	cmp    eax,0x50
c0010090:	75 f6                	jne    c0010088 <VgaText::updateTitle()+0xc>
c0010092:	31 c0                	xor    eax,eax
c0010094:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001009b:	84 db                	test   bl,bl
c001009d:	74 06                	je     c00100a5 <VgaText::updateTitle()+0x29>
c001009f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a2:	40                   	inc    eax
c00100a3:	eb ef                	jmp    c0010094 <VgaText::updateTitle()+0x18>
c00100a5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 09                	je     c00100b5 <VgaText::updateTitle()+0x39>
c00100ac:	53                   	push   ebx
c00100ad:	53                   	push   ebx
c00100ae:	51                   	push   ecx
c00100af:	52                   	push   edx
c00100b0:	ff d0                	call   eax
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 c4 58             	add    esp,0x58
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <VgaText::load()>:
c00100ba:	53                   	push   ebx
c00100bb:	31 c0                	xor    eax,eax
c00100bd:	83 ec 58             	sub    esp,0x58
c00100c0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c4:	89 e2                	mov    edx,esp
c00100c6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ca:	40                   	inc    eax
c00100cb:	83 f8 50             	cmp    eax,0x50
c00100ce:	75 f6                	jne    c00100c6 <VgaText::load()+0xc>
c00100d0:	31 c0                	xor    eax,eax
c00100d2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100d9:	84 c9                	test   cl,cl
c00100db:	74 06                	je     c00100e3 <VgaText::load()+0x29>
c00100dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100e0:	40                   	inc    eax
c00100e1:	eb ef                	jmp    c00100d2 <VgaText::load()+0x18>
c00100e3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100e6:	85 c0                	test   eax,eax
c00100e8:	74 09                	je     c00100f3 <VgaText::load()+0x39>
c00100ea:	51                   	push   ecx
c00100eb:	51                   	push   ecx
c00100ec:	52                   	push   edx
c00100ed:	53                   	push   ebx
c00100ee:	ff d0                	call   eax
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 09                	je     c0010103 <VgaText::load()+0x49>
c00100fa:	83 ec 0c             	sub    esp,0xc
c00100fd:	53                   	push   ebx
c00100fe:	ff d0                	call   eax
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	83 c4 58             	add    esp,0x58
c0010106:	5b                   	pop    ebx
c0010107:	c3                   	ret    

c0010108 <VgaText::updateCursor()>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	39 05 84 da 02 c0    	cmp    DWORD PTR ds:0xc002da84,eax
c0010112:	75 09                	jne    c001011d <VgaText::updateCursor()+0x15>
c0010114:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010117:	85 c0                	test   eax,eax
c0010119:	74 02                	je     c001011d <VgaText::updateCursor()+0x15>
c001011b:	ff e0                	jmp    eax
c001011d:	c3                   	ret    

c001011e <VgaText::doANSI_SGR(int)>:
c001011e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	85 d2                	test   edx,edx
c0010128:	75 0b                	jne    c0010135 <VgaText::doANSI_SGR(int)+0x17>
c001012a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010133:	eb 59                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010135:	83 fa 07             	cmp    edx,0x7
c0010138:	75 0b                	jne    c0010145 <VgaText::doANSI_SGR(int)+0x27>
c001013a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001013d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010140:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010143:	eb 49                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010145:	83 fa 1b             	cmp    edx,0x1b
c0010148:	74 e0                	je     c001012a <VgaText::doANSI_SGR(int)+0xc>
c001014a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001014d:	83 f9 07             	cmp    ecx,0x7
c0010150:	77 09                	ja     c001015b <VgaText::doANSI_SGR(int)+0x3d>
c0010152:	8b 14 8d 20 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd36e0]
c0010159:	eb 20                	jmp    c001017b <VgaText::doANSI_SGR(int)+0x5d>
c001015b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001015e:	83 f9 07             	cmp    ecx,0x7
c0010161:	77 09                	ja     c001016c <VgaText::doANSI_SGR(int)+0x4e>
c0010163:	8b 14 8d 20 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd36e0]
c001016a:	eb 22                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c001016c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001016f:	83 f9 07             	cmp    ecx,0x7
c0010172:	77 0b                	ja     c001017f <VgaText::doANSI_SGR(int)+0x61>
c0010174:	8b 14 95 d8 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3828]
c001017b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001017e:	c3                   	ret    
c001017f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010182:	83 f9 07             	cmp    ecx,0x7
c0010185:	77 0a                	ja     c0010191 <VgaText::doANSI_SGR(int)+0x73>
c0010187:	8b 14 95 b0 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3850]
c001018e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010191:	c3                   	ret    

c0010192 <VgaText::setDefaultBgColour(VgaColour)>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001019d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101a0:	c3                   	ret    
c00101a1:	90                   	nop

c00101a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b0:	c3                   	ret    
c00101b1:	90                   	nop

c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b2:	53                   	push   ebx
c00101b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101bf:	51                   	push   ecx
c00101c0:	e8 cd ff ff ff       	call   c0010192 <VgaText::setDefaultBgColour(VgaColour)>
c00101c5:	58                   	pop    eax
c00101c6:	5a                   	pop    edx
c00101c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101cf:	5b                   	pop    ebx
c00101d0:	eb d0                	jmp    c00101a2 <VgaText::setDefaultFgColour(VgaColour)>

c00101d2 <VgaText::setTitleTextColour(VgaColour)>:
c00101d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101dd:	e9 9a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101e2 <VgaText::setTitleColour(VgaColour)>:
c00101e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101ed:	e9 8a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101f2 <VgaText::setTitle(char*)>:
c00101f2:	53                   	push   ebx
c00101f3:	83 ec 10             	sub    esp,0x10
c00101f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fe:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010204:	50                   	push   eax
c0010205:	e8 02 06 ff ff       	call   c000080c <strcpy>
c001020a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001020e:	83 c4 18             	add    esp,0x18
c0010211:	5b                   	pop    ebx
c0010212:	e9 65 fe ff ff       	jmp    c001007c <VgaText::updateTitle()>
c0010217:	90                   	nop

c0010218 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010218:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001021c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010221:	83 e0 0f             	and    eax,0xf
c0010224:	c1 e2 04             	shl    edx,0x4
c0010227:	09 d0                	or     eax,edx
c0010229:	c3                   	ret    

c001022a <VgaText::scrollScreen()>:
c001022a:	55                   	push   ebp
c001022b:	b9 01 00 00 00       	mov    ecx,0x1
c0010230:	57                   	push   edi
c0010231:	56                   	push   esi
c0010232:	53                   	push   ebx
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001023a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010240:	31 ff                	xor    edi,edi
c0010242:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010245:	83 f9 17             	cmp    ecx,0x17
c0010248:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001024b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010252:	75 27                	jne    c001027b <VgaText::scrollScreen()+0x51>
c0010254:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010257:	01 f5                	add    ebp,esi
c0010259:	f7 c7 01 00 00 00    	test   edi,0x1
c001025f:	74 16                	je     c0010277 <VgaText::scrollScreen()+0x4d>
c0010261:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010265:	50                   	push   eax
c0010266:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001026a:	50                   	push   eax
c001026b:	e8 a8 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010270:	5a                   	pop    edx
c0010271:	5a                   	pop    edx
c0010272:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010275:	eb 04                	jmp    c001027b <VgaText::scrollScreen()+0x51>
c0010277:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001027b:	47                   	inc    edi
c001027c:	46                   	inc    esi
c001027d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010283:	75 bd                	jne    c0010242 <VgaText::scrollScreen()+0x18>
c0010285:	41                   	inc    ecx
c0010286:	83 f9 18             	cmp    ecx,0x18
c0010289:	75 af                	jne    c001023a <VgaText::scrollScreen()+0x10>
c001028b:	39 1d 84 da 02 c0    	cmp    DWORD PTR ds:0xc002da84,ebx
c0010291:	75 1b                	jne    c00102ae <VgaText::scrollScreen()+0x84>
c0010293:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010297:	74 05                	je     c001029e <VgaText::scrollScreen()+0x74>
c0010299:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001029c:	eb 10                	jmp    c00102ae <VgaText::scrollScreen()+0x84>
c001029e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102a1:	85 c0                	test   eax,eax
c00102a3:	74 09                	je     c00102ae <VgaText::scrollScreen()+0x84>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	53                   	push   ebx
c00102a9:	ff d0                	call   eax
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b2:	83 c4 0c             	add    esp,0xc
c00102b5:	5b                   	pop    ebx
c00102b6:	5e                   	pop    esi
c00102b7:	5f                   	pop    edi
c00102b8:	5d                   	pop    ebp
c00102b9:	e9 4a fe ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c00102be <VgaText::combineCharAndColour(char, unsigned char)>:
c00102be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c3:	c1 e0 08             	shl    eax,0x8
c00102c6:	89 c2                	mov    edx,eax
c00102c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102cd:	09 d0                	or     eax,edx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102d0:	56                   	push   esi
c00102d1:	53                   	push   ebx
c00102d2:	51                   	push   ecx
c00102d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102dc:	50                   	push   eax
c00102dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e2:	50                   	push   eax
c00102e3:	e8 30 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e8:	5b                   	pop    ebx
c00102e9:	0f b6 c0             	movzx  eax,al
c00102ec:	5e                   	pop    esi
c00102ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f2:	50                   	push   eax
c00102f3:	53                   	push   ebx
c00102f4:	e8 c5 ff ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c00102f9:	5a                   	pop    edx
c00102fa:	5e                   	pop    esi
c00102fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010304:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010308:	0f b7 d2             	movzx  edx,dx
c001030b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001030f:	39 0d 84 da 02 c0    	cmp    DWORD PTR ds:0xc002da84,ecx
c0010315:	75 10                	jne    c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010317:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001031a:	85 c0                	test   eax,eax
c001031c:	74 09                	je     c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010322:	5a                   	pop    edx
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	ff e0                	jmp    eax
c0010327:	58                   	pop    eax
c0010328:	5b                   	pop    ebx
c0010329:	5e                   	pop    esi
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <VgaText::getCursorX()>:
c001032c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010330:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010333:	c3                   	ret    

c0010334 <VgaText::getCursorY()>:
c0010334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010338:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001033b:	c3                   	ret    

c001033c <VgaText::setCursor(int, int)>:
c001033c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010344:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001034b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001034e:	e9 b5 fd ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c0010353 <setActiveTerminal(VgaText*)>:
c0010353:	53                   	push   ebx
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035b:	85 db                	test   ebx,ebx
c001035d:	75 11                	jne    c0010370 <setActiveTerminal(VgaText*)+0x1d>
c001035f:	c7 44 24 10 8c a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a18c
c0010367:	83 c4 08             	add    esp,0x8
c001036a:	5b                   	pop    ebx
c001036b:	e9 df 9a 00 00       	jmp    c0019e4f <Krnl::panic(char const*)>
c0010370:	a1 84 da 02 c0       	mov    eax,ds:0xc002da84
c0010375:	85 c0                	test   eax,eax
c0010377:	74 0c                	je     c0010385 <setActiveTerminal(VgaText*)+0x32>
c0010379:	83 ec 0c             	sub    esp,0xc
c001037c:	50                   	push   eax
c001037d:	e8 86 fd ff ff       	call   c0010108 <VgaText::updateCursor()>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	89 1d 84 da 02 c0    	mov    DWORD PTR ds:0xc002da84,ebx
c001038b:	51                   	push   ecx
c001038c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001038f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010392:	53                   	push   ebx
c0010393:	e8 a4 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c0010398:	83 c4 10             	add    esp,0x10
c001039b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001039f:	75 07                	jne    c00103a8 <setActiveTerminal(VgaText*)+0x55>
c00103a1:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ac:	83 c4 08             	add    esp,0x8
c00103af:	5b                   	pop    ebx
c00103b0:	e9 05 fd ff ff       	jmp    c00100ba <VgaText::load()>

c00103b5 <doTerminalCycle()>:
c00103b5:	83 ec 18             	sub    esp,0x18
c00103b8:	a1 80 da 02 c0       	mov    eax,ds:0xc002da80
c00103bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103c0:	50                   	push   eax
c00103c1:	a3 80 da 02 c0       	mov    ds:0xc002da80,eax
c00103c6:	e8 88 ff ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <VgaText::setCursorX(int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103de:	50                   	push   eax
c00103df:	e8 58 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103e4:	83 c4 1c             	add    esp,0x1c
c00103e7:	c3                   	ret    

c00103e8 <VgaText::setCursorY(int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103f6:	50                   	push   eax
c00103f7:	e8 40 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103fc:	83 c4 1c             	add    esp,0x1c
c00103ff:	c3                   	ret    

c0010400 <VgaText::incrementCursor(bool)>:
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	51                   	push   ecx
c0010403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001040b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001040e:	40                   	inc    eax
c001040f:	83 f8 50             	cmp    eax,0x50
c0010412:	74 05                	je     c0010419 <VgaText::incrementCursor(bool)+0x19>
c0010414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010417:	eb 24                	jmp    c001043d <VgaText::incrementCursor(bool)+0x3d>
c0010419:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001041c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010423:	8d 50 01             	lea    edx,[eax+0x1]
c0010426:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010429:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001042c:	75 0f                	jne    c001043d <VgaText::incrementCursor(bool)+0x3d>
c001042e:	83 ec 0c             	sub    esp,0xc
c0010431:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010434:	53                   	push   ebx
c0010435:	e8 f0 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	89 f0                	mov    eax,esi
c001043f:	84 c0                	test   al,al
c0010441:	74 0c                	je     c001044f <VgaText::incrementCursor(bool)+0x4f>
c0010443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010447:	5a                   	pop    edx
c0010448:	5b                   	pop    ebx
c0010449:	5e                   	pop    esi
c001044a:	e9 b9 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c001044f:	58                   	pop    eax
c0010450:	5b                   	pop    ebx
c0010451:	5e                   	pop    esi
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::decrementCursor(bool)>:
c0010454:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001045c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001045f:	85 c0                	test   eax,eax
c0010461:	74 04                	je     c0010467 <VgaText::decrementCursor(bool)+0x13>
c0010463:	48                   	dec    eax
c0010464:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010467:	84 c9                	test   cl,cl
c0010469:	74 09                	je     c0010474 <VgaText::decrementCursor(bool)+0x20>
c001046b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046f:	e9 94 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001047e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010482:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010486:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001048a:	3c 07                	cmp    al,0x7
c001048c:	75 2a                	jne    c00104b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001048e:	a1 38 db 02 c0       	mov    eax,ds:0xc002db38
c0010493:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001049b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 38 30 00 00       	jmp    c00134f0 <Buzzer::beep(int, int, bool)>
c00104b8:	3c 0d                	cmp    al,0xd
c00104ba:	75 09                	jne    c00104c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c3:	eb 2c                	jmp    c00104f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c5:	3c 0a                	cmp    al,0xa
c00104c7:	75 31                	jne    c00104fa <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d3:	8d 50 01             	lea    edx,[eax+0x1]
c00104d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104dc:	75 0f                	jne    c00104ed <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 40 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104f1:	83 c4 08             	add    esp,0x8
c00104f4:	5b                   	pop    ebx
c00104f5:	e9 0e fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c00104fa:	3c 08                	cmp    al,0x8
c00104fc:	75 25                	jne    c0010523 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104fe:	50                   	push   eax
c00104ff:	50                   	push   eax
c0010500:	6a 01                	push   0x1
c0010502:	53                   	push   ebx
c0010503:	e8 4c ff ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010508:	5a                   	pop    edx
c0010509:	59                   	pop    ecx
c001050a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010510:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010513:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010516:	6a 20                	push   0x20
c0010518:	53                   	push   ebx
c0010519:	e8 b2 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051e:	83 c4 28             	add    esp,0x28
c0010521:	5b                   	pop    ebx
c0010522:	c3                   	ret    
c0010523:	83 ec 08             	sub    esp,0x8
c0010526:	0f be c0             	movsx  eax,al
c0010529:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001052c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001052f:	51                   	push   ecx
c0010530:	52                   	push   edx
c0010531:	50                   	push   eax
c0010532:	53                   	push   ebx
c0010533:	e8 98 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010538:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001053c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010544:	83 c4 28             	add    esp,0x28
c0010547:	5b                   	pop    ebx
c0010548:	e9 b3 fe ff ff       	jmp    c0010400 <VgaText::incrementCursor(bool)>
c001054d:	90                   	nop

c001054e <VgaText::doUpdate()>:
c001054e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010552:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010555:	85 c0                	test   eax,eax
c0010557:	74 02                	je     c001055b <VgaText::doUpdate()+0xd>
c0010559:	ff e0                	jmp    eax
c001055b:	c3                   	ret    

c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055c:	55                   	push   ebp
c001055d:	31 ed                	xor    ebp,ebp
c001055f:	57                   	push   edi
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	83 ec 1c             	sub    esp,0x1c
c0010565:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010575:	50                   	push   eax
c0010576:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057b:	50                   	push   eax
c001057c:	e8 97 fc ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010581:	59                   	pop    ecx
c0010582:	0f b6 c0             	movzx  eax,al
c0010585:	5e                   	pop    esi
c0010586:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001058b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010596:	0f b7 f6             	movzx  esi,si
c0010599:	01 f6                	add    esi,esi
c001059b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001059e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105a1:	84 c0                	test   al,al
c00105a3:	0f 84 fd 00 00 00    	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105a9:	3c 0d                	cmp    al,0xd
c00105ab:	75 0c                	jne    c00105b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b4:	e9 e7 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b9:	3c 0a                	cmp    al,0xa
c00105bb:	75 47                	jne    c0010604 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ca:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105cd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105d0:	75 0f                	jne    c00105e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105d8:	53                   	push   ebx
c00105d9:	e8 4c fc ff ff       	call   c001022a <VgaText::scrollScreen()>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	31 ed                	xor    ebp,ebp
c00105e6:	53                   	push   ebx
c00105e7:	e8 1c fb ff ff       	call   c0010108 <VgaText::updateCursor()>
c00105ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105f7:	0f b7 f6             	movzx  esi,si
c00105fa:	01 f6                	add    esi,esi
c00105fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105ff:	e9 9c 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010604:	3c 08                	cmp    al,0x8
c0010606:	75 35                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010608:	56                   	push   esi
c0010609:	56                   	push   esi
c001060a:	6a 01                	push   0x1
c001060c:	53                   	push   ebx
c001060d:	e8 42 fe ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010612:	58                   	pop    eax
c0010613:	5a                   	pop    edx
c0010614:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010617:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001061a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001061d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010620:	6a 20                	push   0x20
c0010622:	53                   	push   ebx
c0010623:	e8 a8 fc ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010628:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062d:	83 c4 20             	add    esp,0x20
c0010630:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010633:	0f b7 f6             	movzx  esi,si
c0010636:	01 f6                	add    esi,esi
c0010638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063b:	eb 63                	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010643:	50                   	push   eax
c0010644:	e8 75 fc ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	66 89 06             	mov    WORD PTR [esi],ax
c001064f:	39 1d 84 da 02 c0    	cmp    DWORD PTR ds:0xc002da84,ebx
c0010655:	75 21                	jne    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010657:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 1a                	je     c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065e:	52                   	push   edx
c001065f:	52                   	push   edx
c0010660:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010663:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010671:	51                   	push   ecx
c0010672:	53                   	push   ebx
c0010673:	ff d0                	call   eax
c0010675:	83 c4 20             	add    esp,0x20
c0010678:	83 c6 02             	add    esi,0x2
c001067b:	50                   	push   eax
c001067c:	50                   	push   eax
c001067d:	6a 00                	push   0x0
c001067f:	53                   	push   ebx
c0010680:	e8 7b fd ff ff       	call   c0010400 <VgaText::incrementCursor(bool)>
c0010685:	83 c4 10             	add    esp,0x10
c0010688:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001068c:	75 0d                	jne    c001069b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001068e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010693:	0f b7 f6             	movzx  esi,si
c0010696:	01 f6                	add    esi,esi
c0010698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069b:	bd 01 00 00 00       	mov    ebp,0x1
c00106a0:	47                   	inc    edi
c00106a1:	e9 f8 fe ff ff       	jmp    c001059e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	53                   	push   ebx
c00106aa:	e8 59 fa ff ff       	call   c0010108 <VgaText::updateCursor()>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	89 e8                	mov    eax,ebp
c00106b4:	84 c0                	test   al,al
c00106b6:	74 0c                	je     c00106c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	53                   	push   ebx
c00106bc:	e8 8d fe ff ff       	call   c001054e <VgaText::doUpdate()>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cb:	83 c4 1c             	add    esp,0x1c
c00106ce:	5b                   	pop    ebx
c00106cf:	5e                   	pop    esi
c00106d0:	5f                   	pop    edi
c00106d1:	5d                   	pop    ebp
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::clearScreen()>:
c00106d4:	57                   	push   edi
c00106d5:	56                   	push   esi
c00106d6:	31 f6                	xor    esi,esi
c00106d8:	53                   	push   ebx
c00106d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106dd:	52                   	push   edx
c00106de:	6a 00                	push   0x0
c00106e0:	6a 00                	push   0x0
c00106e2:	53                   	push   ebx
c00106e3:	e8 54 fc ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00106e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f5:	7e 20                	jle    c0010717 <VgaText::clearScreen()+0x43>
c00106f7:	31 ff                	xor    edi,edi
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	56                   	push   esi
c00106fc:	57                   	push   edi
c00106fd:	47                   	inc    edi
c00106fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010701:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010704:	6a 20                	push   0x20
c0010706:	53                   	push   ebx
c0010707:	e8 c4 fb ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001070c:	83 c4 20             	add    esp,0x20
c001070f:	83 ff 50             	cmp    edi,0x50
c0010712:	75 e5                	jne    c00106f9 <VgaText::clearScreen()+0x25>
c0010714:	46                   	inc    esi
c0010715:	eb db                	jmp    c00106f2 <VgaText::clearScreen()+0x1e>
c0010717:	83 ec 0c             	sub    esp,0xc
c001071a:	53                   	push   ebx
c001071b:	e8 2e fe ff ff       	call   c001054e <VgaText::doUpdate()>
c0010720:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	5f                   	pop    edi
c001072d:	c3                   	ret    

c001072e <VgaText::putchar(char)>:
c001072e:	56                   	push   esi
c001072f:	53                   	push   ebx
c0010730:	83 ec 14             	sub    esp,0x14
c0010733:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010737:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073b:	3c 5b                	cmp    al,0x5b
c001073d:	75 18                	jne    c0010757 <VgaText::putchar(char)+0x29>
c001073f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010743:	74 1f                	je     c0010764 <VgaText::putchar(char)+0x36>
c0010745:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001074b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010752:	e9 bd 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010757:	3c 1b                	cmp    al,0x1b
c0010759:	75 09                	jne    c0010764 <VgaText::putchar(char)+0x36>
c001075b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001075f:	e9 b0 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010764:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010767:	84 c9                	test   cl,cl
c0010769:	0f 84 92 00 00 00    	je     c0010801 <VgaText::putchar(char)+0xd3>
c001076f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010772:	80 fa 3e             	cmp    dl,0x3e
c0010775:	77 76                	ja     c00107ed <VgaText::putchar(char)+0xbf>
c0010777:	3c 6d                	cmp    al,0x6d
c0010779:	75 47                	jne    c00107c2 <VgaText::putchar(char)+0x94>
c001077b:	31 f6                	xor    esi,esi
c001077d:	31 d2                	xor    edx,edx
c001077f:	31 c0                	xor    eax,eax
c0010781:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010784:	7e 2d                	jle    c00107b3 <VgaText::putchar(char)+0x85>
c0010786:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001078b:	80 fa 3b             	cmp    dl,0x3b
c001078e:	75 17                	jne    c00107a7 <VgaText::putchar(char)+0x79>
c0010790:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010794:	50                   	push   eax
c0010795:	53                   	push   ebx
c0010796:	e8 83 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c001079b:	59                   	pop    ecx
c001079c:	31 d2                	xor    edx,edx
c001079e:	58                   	pop    eax
c001079f:	31 c0                	xor    eax,eax
c00107a1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a5:	eb 09                	jmp    c00107b0 <VgaText::putchar(char)+0x82>
c00107a7:	6b c0 0a             	imul   eax,eax,0xa
c00107aa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ae:	88 ca                	mov    dl,cl
c00107b0:	46                   	inc    esi
c00107b1:	eb ce                	jmp    c0010781 <VgaText::putchar(char)+0x53>
c00107b3:	84 d2                	test   dl,dl
c00107b5:	74 2e                	je     c00107e5 <VgaText::putchar(char)+0xb7>
c00107b7:	50                   	push   eax
c00107b8:	53                   	push   ebx
c00107b9:	e8 60 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c00107be:	58                   	pop    eax
c00107bf:	5a                   	pop    edx
c00107c0:	eb 23                	jmp    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c2:	3c 4a                	cmp    al,0x4a
c00107c4:	75 1f                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ca:	75 19                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	53                   	push   ebx
c00107d0:	e8 ff fe ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00107d5:	83 c4 0c             	add    esp,0xc
c00107d8:	6a 00                	push   0x0
c00107da:	6a 00                	push   0x0
c00107dc:	53                   	push   ebx
c00107dd:	e8 5a fb ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107eb:	eb 27                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c00107ed:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107f0:	83 fa 0e             	cmp    edx,0xe
c00107f3:	7f 1f                	jg     c0010814 <VgaText::putchar(char)+0xe6>
c00107f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107f8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107fb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107ff:	eb 13                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010804:	0f be c0             	movsx  eax,al
c0010807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001080a:	50                   	push   eax
c001080b:	53                   	push   ebx
c001080c:	e8 65 fc ff ff       	call   c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	83 c4 14             	add    esp,0x14
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    

c001081a <VgaText::putx(unsigned int)>:
c001081a:	57                   	push   edi
c001081b:	b9 11 00 00 00       	mov    ecx,0x11
c0010820:	56                   	push   esi
c0010821:	be 9a a1 02 c0       	mov    esi,0xc002a19a
c0010826:	53                   	push   ebx
c0010827:	83 ec 20             	sub    esp,0x20
c001082a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001082e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010832:	fc                   	cld    
c0010833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010835:	be 08 00 00 00       	mov    esi,0x8
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	89 d8                	mov    eax,ebx
c001083e:	c1 e3 04             	shl    ebx,0x4
c0010841:	c1 e8 1c             	shr    eax,0x1c
c0010844:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010849:	50                   	push   eax
c001084a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001084e:	e8 db fe ff ff       	call   c001072e <VgaText::putchar(char)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	4e                   	dec    esi
c0010857:	75 e1                	jne    c001083a <VgaText::putx(unsigned int)+0x20>
c0010859:	83 c4 20             	add    esp,0x20
c001085c:	5b                   	pop    ebx
c001085d:	5e                   	pop    esi
c001085e:	5f                   	pop    edi
c001085f:	c3                   	ret    

c0010860 <VgaText::puts(char const*)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010868:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001086b:	84 c0                	test   al,al
c001086d:	74 12                	je     c0010881 <VgaText::puts(char const*)+0x21>
c001086f:	43                   	inc    ebx
c0010870:	51                   	push   ecx
c0010871:	51                   	push   ecx
c0010872:	50                   	push   eax
c0010873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010877:	e8 b2 fe ff ff       	call   c001072e <VgaText::putchar(char)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	eb e7                	jmp    c0010868 <VgaText::puts(char const*)+0x8>
c0010881:	83 c4 08             	add    esp,0x8
c0010884:	5b                   	pop    ebx
c0010885:	c3                   	ret    

c0010886 <VgaText::VgaText(char const*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	6a 00                	push   0x0
c0010892:	50                   	push   eax
c0010893:	e8 44 05 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	ba 00 a2 02 c0       	mov    edx,0xc002a200
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	8d 50 60             	lea    edx,[eax+0x60]
c00108ff:	bb 60 da 02 c0       	mov    ebx,0xc002da60
c0010904:	b8 08 00 00 00       	mov    eax,0x8
c0010909:	fc                   	cld    
c001090a:	89 d7                	mov    edi,edx
c001090c:	89 de                	mov    esi,ebx
c001090e:	89 c1                	mov    ecx,eax
c0010910:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	05 82 00 00 00       	add    eax,0x82
c001091b:	83 ec 08             	sub    esp,0x8
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	50                   	push   eax
c0010923:	e8 e4 fe fe ff       	call   c000080c <strcpy>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	6a 01                	push   0x1
c001093b:	e8 df 08 00 00       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	89 c2                	mov    edx,eax
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094c:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010959:	89 c6                	mov    esi,eax
c001095b:	e8 35 f0 ff ff       	call   c000f995 <Phys::allocatePage()>
c0010960:	68 05 0c 00 00       	push   0xc05
c0010965:	56                   	push   esi
c0010966:	50                   	push   eax
c0010967:	53                   	push   ebx
c0010968:	e8 6f 10 00 00       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c001096d:	83 c4 10             	add    esp,0x10
c0010970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010974:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010977:	83 ec 04             	sub    esp,0x4
c001097a:	68 00 0f 00 00       	push   0xf00
c001097f:	6a 00                	push   0x0
c0010981:	50                   	push   eax
c0010982:	e8 c9 fd fe ff       	call   c0000750 <memset>
c0010987:	83 c4 10             	add    esp,0x10
c001098a:	83 ec 04             	sub    esp,0x4
c001098d:	6a 00                	push   0x0
c001098f:	6a 07                	push   0x7
c0010991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010995:	e8 18 f8 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001099a:	83 c4 10             	add    esp,0x10
c001099d:	83 ec 04             	sub    esp,0x4
c00109a0:	6a 00                	push   0x0
c00109a2:	6a 00                	push   0x0
c00109a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a8:	e8 8f f9 ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	83 ec 0c             	sub    esp,0xc
c00109b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b7:	e8 18 fd ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00109bc:	83 c4 10             	add    esp,0x10
c00109bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c3:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cb:	05 02 01 00 00       	add    eax,0x102
c00109d0:	83 ec 04             	sub    esp,0x4
c00109d3:	68 96 00 00 00       	push   0x96
c00109d8:	6a 00                	push   0x0
c00109da:	50                   	push   eax
c00109db:	e8 70 fd fe ff       	call   c0000750 <memset>
c00109e0:	83 c4 10             	add    esp,0x10
c00109e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e7:	05 98 01 00 00       	add    eax,0x198
c00109ec:	83 ec 04             	sub    esp,0x4
c00109ef:	68 2c 01 00 00       	push   0x12c
c00109f4:	6a 00                	push   0x0
c00109f6:	50                   	push   eax
c00109f7:	e8 54 fd fe ff       	call   c0000750 <memset>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	90                   	nop
c0010a00:	5b                   	pop    ebx
c0010a01:	5e                   	pop    esi
c0010a02:	5f                   	pop    edi
c0010a03:	c3                   	ret    

c0010a04 <VgaText::receiveKey(unsigned char)>:
c0010a04:	55                   	push   ebp
c0010a05:	57                   	push   edi
c0010a06:	56                   	push   esi
c0010a07:	53                   	push   ebx
c0010a08:	83 ec 1c             	sub    esp,0x1c
c0010a0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a13:	84 db                	test   bl,bl
c0010a15:	0f 84 c9 00 00 00    	je     c0010ae4 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a1b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a21:	80 fb 08             	cmp    bl,0x8
c0010a24:	75 2c                	jne    c0010a52 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a26:	83 ec 0c             	sub    esp,0xc
c0010a29:	57                   	push   edi
c0010a2a:	e8 3d fd fe ff       	call   c000076c <strlen>
c0010a2f:	83 c4 10             	add    esp,0x10
c0010a32:	85 c0                	test   eax,eax
c0010a34:	74 41                	je     c0010a77 <VgaText::receiveKey(unsigned char)+0x73>
c0010a36:	50                   	push   eax
c0010a37:	50                   	push   eax
c0010a38:	6a 08                	push   0x8
c0010a3a:	56                   	push   esi
c0010a3b:	e8 ee fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a43:	e8 24 fd fe ff       	call   c000076c <strlen>
c0010a48:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a50:	eb 22                	jmp    c0010a74 <VgaText::receiveKey(unsigned char)+0x70>
c0010a52:	0f be c3             	movsx  eax,bl
c0010a55:	52                   	push   edx
c0010a56:	52                   	push   edx
c0010a57:	50                   	push   eax
c0010a58:	56                   	push   esi
c0010a59:	e8 d0 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a5e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a62:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a67:	59                   	pop    ecx
c0010a68:	5d                   	pop    ebp
c0010a69:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a6d:	50                   	push   eax
c0010a6e:	57                   	push   edi
c0010a6f:	e8 d8 fe fe ff       	call   c000094c <strcat>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a7e:	75 05                	jne    c0010a85 <VgaText::receiveKey(unsigned char)+0x81>
c0010a80:	80 fb 0a             	cmp    bl,0xa
c0010a83:	75 53                	jne    c0010ad8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a8e:	53                   	push   ebx
c0010a8f:	e8 d8 fc fe ff       	call   c000076c <strlen>
c0010a94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a97:	89 c5                	mov    ebp,eax
c0010a99:	e8 ce fc fe ff       	call   c000076c <strlen>
c0010a9e:	83 c4 10             	add    esp,0x10
c0010aa1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa5:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aaa:	76 10                	jbe    c0010abc <VgaText::receiveKey(unsigned char)+0xb8>
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	68 ab a1 02 c0       	push   0xc002a1ab
c0010ab4:	e8 96 93 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0010ab9:	83 c4 10             	add    esp,0x10
c0010abc:	50                   	push   eax
c0010abd:	50                   	push   eax
c0010abe:	57                   	push   edi
c0010abf:	53                   	push   ebx
c0010ac0:	e8 87 fe fe ff       	call   c000094c <strcat>
c0010ac5:	83 c4 0c             	add    esp,0xc
c0010ac8:	68 96 00 00 00       	push   0x96
c0010acd:	6a 00                	push   0x0
c0010acf:	57                   	push   edi
c0010ad0:	e8 7b fc fe ff       	call   c0000750 <memset>
c0010ad5:	83 c4 10             	add    esp,0x10
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	56                   	push   esi
c0010adc:	e8 6d fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010ae1:	83 c4 10             	add    esp,0x10
c0010ae4:	83 c4 1c             	add    esp,0x1c
c0010ae7:	5b                   	pop    ebx
c0010ae8:	5e                   	pop    esi
c0010ae9:	5f                   	pop    edi
c0010aea:	5d                   	pop    ebp
c0010aeb:	c3                   	ret    

c0010aec <VgaText::write(unsigned long long, void*, int*)>:
c0010aec:	55                   	push   ebp
c0010aed:	57                   	push   edi
c0010aee:	56                   	push   esi
c0010aef:	53                   	push   ebx
c0010af0:	83 ec 0c             	sub    esp,0xc
c0010af3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010afb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010aff:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b06:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b09:	39 eb                	cmp    ebx,ebp
c0010b0b:	74 13                	je     c0010b20 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b0d:	43                   	inc    ebx
c0010b0e:	50                   	push   eax
c0010b0f:	50                   	push   eax
c0010b10:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b14:	50                   	push   eax
c0010b15:	56                   	push   esi
c0010b16:	e8 13 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010b1b:	83 c4 10             	add    esp,0x10
c0010b1e:	eb e9                	jmp    c0010b09 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b2a:	56                   	push   esi
c0010b2b:	e8 1e fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010b30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b34:	89 38                	mov    DWORD PTR [eax],edi
c0010b36:	83 c4 1c             	add    esp,0x1c
c0010b39:	31 c0                	xor    eax,eax
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	5f                   	pop    edi
c0010b3e:	5d                   	pop    ebp
c0010b3f:	c3                   	ret    

c0010b40 <newTerminal(char*)>:
c0010b40:	83 ec 28             	sub    esp,0x28
c0010b43:	68 c4 02 00 00       	push   0x2c4
c0010b48:	e8 4c ea ff ff       	call   c000f599 <malloc>
c0010b4d:	5a                   	pop    edx
c0010b4e:	59                   	pop    ecx
c0010b4f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b53:	50                   	push   eax
c0010b54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b58:	e8 29 fd ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c0010b5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b61:	83 c4 2c             	add    esp,0x2c
c0010b64:	c3                   	ret    
c0010b65:	90                   	nop

c0010b66 <TSS::TSS()>:
c0010b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b71:	90                   	nop
c0010b72:	c3                   	ret    
c0010b73:	90                   	nop

c0010b74 <TSS::setESP(unsigned long)>:
c0010b74:	55                   	push   ebp
c0010b75:	89 e5                	mov    ebp,esp
c0010b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b83:	90                   	nop
c0010b84:	5d                   	pop    ebp
c0010b85:	c3                   	ret    

c0010b86 <TSS::flush()>:
c0010b86:	55                   	push   ebp
c0010b87:	89 e5                	mov    ebp,esp
c0010b89:	83 ec 10             	sub    esp,0x10
c0010b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b91:	83 c8 03             	or     eax,0x3
c0010b94:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b98:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b9c:	66 89 d0             	mov    ax,dx
c0010b9f:	0f 00 d8             	ltr    ax
c0010ba2:	90                   	nop
c0010ba3:	c9                   	leave  
c0010ba4:	c3                   	ret    
c0010ba5:	90                   	nop

c0010ba6 <TSS::setup(unsigned long, unsigned long)>:
c0010ba6:	55                   	push   ebp
c0010ba7:	89 e5                	mov    ebp,esp
c0010ba9:	83 ec 18             	sub    esp,0x18
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	6a 68                	push   0x68
c0010bb1:	e8 e3 e9 ff ff       	call   c000f599 <malloc>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	89 c2                	mov    edx,eax
c0010bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc7:	83 ec 04             	sub    esp,0x4
c0010bca:	6a 68                	push   0x68
c0010bcc:	6a 00                	push   0x0
c0010bce:	50                   	push   eax
c0010bcf:	e8 7c fb fe ff       	call   c0000750 <memset>
c0010bd4:	83 c4 10             	add    esp,0x10
c0010bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdd:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c01:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c19:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c25:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c31:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c49:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c61:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6e:	0f 20 da             	mov    edx,cr3
c0010c71:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c74:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c77:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c80:	83 ec 08             	sub    esp,0x8
c0010c83:	50                   	push   eax
c0010c84:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c87:	50                   	push   eax
c0010c88:	e8 05 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c8d:	83 c4 10             	add    esp,0x10
c0010c90:	83 ec 08             	sub    esp,0x8
c0010c93:	6a 68                	push   0x68
c0010c95:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c98:	50                   	push   eax
c0010c99:	e8 10 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca5:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ca8:	83 e0 0f             	and    eax,0xf
c0010cab:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cae:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010cb1:	83 c8 40             	or     eax,0x40
c0010cb4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb7:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0010cbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc2:	05 78 01 00 00       	add    eax,0x178
c0010cc7:	83 ec 04             	sub    esp,0x4
c0010cca:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ccd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cd0:	50                   	push   eax
c0010cd1:	e8 0c e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd6:	83 c4 10             	add    esp,0x10
c0010cd9:	89 c2                	mov    edx,eax
c0010cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cde:	89 10                	mov    DWORD PTR [eax],edx
c0010ce0:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0010ce5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ceb:	05 78 01 00 00       	add    eax,0x178
c0010cf0:	83 ec 0c             	sub    esp,0xc
c0010cf3:	50                   	push   eax
c0010cf4:	e8 13 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d01:	c9                   	leave  
c0010d02:	c3                   	ret    
c0010d03:	90                   	nop

c0010d04 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d14:	75 08                	jne    c0010d1e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d16:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1c:	eb 38                	jmp    c0010d56 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d1e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d23:	75 17                	jne    c0010d3c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d33:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d39:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d3c:	89 c1                	mov    ecx,eax
c0010d3e:	83 e1 fd             	and    ecx,0xfffffffd
c0010d41:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d47:	74 cd                	je     c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d49:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4e:	83 e0 ef             	and    eax,0xffffffef
c0010d51:	83 f8 08             	cmp    eax,0x8
c0010d54:	76 c0                	jbe    c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d56:	31 c0                	xor    eax,eax
c0010d58:	c3                   	ret    
c0010d59:	90                   	nop

c0010d5a <ReservedFilename::isAtty()>:
c0010d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d61:	31 c0                	xor    eax,eax
c0010d63:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d69:	74 09                	je     c0010d74 <ReservedFilename::isAtty()+0x1a>
c0010d6b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d71:	0f 94 c0             	sete   al
c0010d74:	c3                   	ret    
c0010d75:	90                   	nop

c0010d76 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d8a:	75 08                	jne    c0010d94 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d92:	eb 3d                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d99:	75 17                	jne    c0010db2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010da0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010da3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010da9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010daf:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010db2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db7:	75 04                	jne    c0010dbd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010db9:	89 0a                	mov    DWORD PTR [edx],ecx
c0010dbb:	eb 14                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dbd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dc2:	74 c8                	je     c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dc9:	83 e0 ef             	and    eax,0xffffffef
c0010dcc:	83 f8 08             	cmp    eax,0x8
c0010dcf:	76 bb                	jbe    c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dd1:	31 c0                	xor    eax,eax
c0010dd3:	c3                   	ret    

c0010dd4 <UnixFile::getFileDescriptor()>:
c0010dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ddb:	c3                   	ret    

c0010ddc <UnixFile::UnixFile(int)>:
c0010ddc:	53                   	push   ebx
c0010ddd:	83 ec 28             	sub    esp,0x28
c0010de0:	ba c8 a2 02 c0       	mov    edx,0xc002a2c8
c0010de5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010de9:	89 10                	mov    DWORD PTR [eax],edx
c0010deb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010df3:	0f 8f 8c 01 00 00    	jg     c0010f85 <UnixFile::UnixFile(int)+0x1a9>
c0010df9:	a1 60 c9 02 c0       	mov    eax,ds:0xc002c960
c0010dfe:	8d 50 01             	lea    edx,[eax+0x1]
c0010e01:	89 15 60 c9 02 c0    	mov    DWORD PTR ds:0xc002c960,edx
c0010e07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e0b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e0e:	83 ec 08             	sub    esp,0x8
c0010e11:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e15:	68 18 db 02 c0       	push   0xc002db18
c0010e1a:	e8 77 76 01 00       	call   c0028496 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e1f:	83 c4 10             	add    esp,0x10
c0010e22:	a0 14 db 02 c0       	mov    al,ds:0xc002db14
c0010e27:	83 f0 01             	xor    eax,0x1
c0010e2a:	84 c0                	test   al,al
c0010e2c:	0f 84 54 01 00 00    	je     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010e32:	c6 05 14 db 02 c0 01 	mov    BYTE PTR ds:0xc002db14,0x1
c0010e39:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e48:	e8 4c e7 ff ff       	call   c000f599 <malloc>
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	89 c3                	mov    ebx,eax
c0010e52:	83 ec 08             	sub    esp,0x8
c0010e55:	68 03 ff ff 0f       	push   0xfffff03
c0010e5a:	53                   	push   ebx
c0010e5b:	e8 2c 01 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e60:	83 c4 10             	add    esp,0x10
c0010e63:	89 1d 0c db 02 c0    	mov    DWORD PTR ds:0xc002db0c,ebx
c0010e69:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e71:	83 ec 0c             	sub    esp,0xc
c0010e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e78:	e8 1c e7 ff ff       	call   c000f599 <malloc>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	89 c3                	mov    ebx,eax
c0010e82:	83 ec 08             	sub    esp,0x8
c0010e85:	68 01 ff ff 0f       	push   0xfffff01
c0010e8a:	53                   	push   ebx
c0010e8b:	e8 fc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e90:	83 c4 10             	add    esp,0x10
c0010e93:	89 1d 10 db 02 c0    	mov    DWORD PTR ds:0xc002db10,ebx
c0010e99:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010ea1:	83 ec 0c             	sub    esp,0xc
c0010ea4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ea8:	e8 ec e6 ff ff       	call   c000f599 <malloc>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	89 c3                	mov    ebx,eax
c0010eb2:	83 ec 08             	sub    esp,0x8
c0010eb5:	68 00 ff ff 0f       	push   0xfffff00
c0010eba:	53                   	push   ebx
c0010ebb:	e8 cc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ec0:	83 c4 10             	add    esp,0x10
c0010ec3:	89 1d 04 db 02 c0    	mov    DWORD PTR ds:0xc002db04,ebx
c0010ec9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed8:	e8 bc e6 ff ff       	call   c000f599 <malloc>
c0010edd:	83 c4 10             	add    esp,0x10
c0010ee0:	89 c3                	mov    ebx,eax
c0010ee2:	83 ec 08             	sub    esp,0x8
c0010ee5:	68 02 ff ff 0f       	push   0xfffff02
c0010eea:	53                   	push   ebx
c0010eeb:	e8 9c 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	89 1d 08 db 02 c0    	mov    DWORD PTR ds:0xc002db08,ebx
c0010ef9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010f01:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f06:	7f 7e                	jg     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010f08:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f10:	83 ec 0c             	sub    esp,0xc
c0010f13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f17:	e8 7d e6 ff ff       	call   c000f599 <malloc>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	89 c3                	mov    ebx,eax
c0010f21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f25:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f2a:	83 ec 08             	sub    esp,0x8
c0010f2d:	50                   	push   eax
c0010f2e:	53                   	push   ebx
c0010f2f:	e8 58 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3b:	89 1c 85 e0 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2520],ebx
c0010f42:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f4a:	83 ec 0c             	sub    esp,0xc
c0010f4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f51:	e8 43 e6 ff ff       	call   c000f599 <malloc>
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	89 c3                	mov    ebx,eax
c0010f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f64:	83 ec 08             	sub    esp,0x8
c0010f67:	50                   	push   eax
c0010f68:	53                   	push   ebx
c0010f69:	e8 1e 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f75:	89 1c 85 a0 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2560],ebx
c0010f7c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f80:	e9 7c ff ff ff       	jmp    c0010f01 <UnixFile::UnixFile(int)+0x125>
c0010f85:	90                   	nop
c0010f86:	83 c4 28             	add    esp,0x28
c0010f89:	5b                   	pop    ebx
c0010f8a:	c3                   	ret    
c0010f8b:	90                   	nop

c0010f8c <ReservedFilename::ReservedFilename(int)>:
c0010f8c:	83 ec 0c             	sub    esp,0xc
c0010f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f93:	83 ec 08             	sub    esp,0x8
c0010f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9a:	50                   	push   eax
c0010f9b:	e8 3c fe ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010fa0:	83 c4 10             	add    esp,0x10
c0010fa3:	ba e4 a2 02 c0       	mov    edx,0xc002a2e4
c0010fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fac:	89 10                	mov    DWORD PTR [eax],edx
c0010fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fb9:	90                   	nop
c0010fba:	83 c4 0c             	add    esp,0xc
c0010fbd:	c3                   	ret    

c0010fbe <UnixFile::~UnixFile()>:
c0010fbe:	83 ec 1c             	sub    esp,0x1c
c0010fc1:	ba c8 a2 02 c0       	mov    edx,0xc002a2c8
c0010fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fca:	89 10                	mov    DWORD PTR [eax],edx
c0010fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fd8:	7f 73                	jg     c001104d <UnixFile::~UnixFile()+0x8f>
c0010fda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	68 18 db 02 c0       	push   0xc002db18
c0010fea:	e8 7b 75 01 00       	call   c002856a <LinkedList<UnixFile>::getFirstElement()>
c0010fef:	83 c4 10             	add    esp,0x10
c0010ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff6:	83 ec 0c             	sub    esp,0xc
c0010ff9:	68 18 db 02 c0       	push   0xc002db18
c0010ffe:	e8 6f 75 01 00       	call   c0028572 <LinkedList<UnixFile>::removeFirst()>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001100a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001100e:	74 40                	je     c0011050 <UnixFile::~UnixFile()+0x92>
c0011010:	83 ec 08             	sub    esp,0x8
c0011013:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011017:	68 18 db 02 c0       	push   0xc002db18
c001101c:	e8 75 74 01 00       	call   c0028496 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011021:	83 c4 10             	add    esp,0x10
c0011024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011028:	8d 50 01             	lea    edx,[eax+0x1]
c001102b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001102f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011034:	0f 94 c0             	sete   al
c0011037:	84 c0                	test   al,al
c0011039:	74 a7                	je     c0010fe2 <UnixFile::~UnixFile()+0x24>
c001103b:	83 ec 0c             	sub    esp,0xc
c001103e:	68 a0 a2 02 c0       	push   0xc002a2a0
c0011043:	e8 07 8e 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0011048:	83 c4 10             	add    esp,0x10
c001104b:	eb 95                	jmp    c0010fe2 <UnixFile::~UnixFile()+0x24>
c001104d:	90                   	nop
c001104e:	eb 01                	jmp    c0011051 <UnixFile::~UnixFile()+0x93>
c0011050:	90                   	nop
c0011051:	90                   	nop
c0011052:	83 c4 1c             	add    esp,0x1c
c0011055:	c3                   	ret    

c0011056 <UnixFile::~UnixFile()>:
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	83 ec 0c             	sub    esp,0xc
c001105c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011060:	e8 59 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	83 ec 08             	sub    esp,0x8
c001106b:	6a 0c                	push   0xc
c001106d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011071:	e8 95 15 00 00       	call   c001260b <operator delete(void*, unsigned long)>
c0011076:	83 c4 10             	add    esp,0x10
c0011079:	83 c4 0c             	add    esp,0xc
c001107c:	c3                   	ret    
c001107d:	90                   	nop

c001107e <ReservedFilename::~ReservedFilename()>:
c001107e:	83 ec 0c             	sub    esp,0xc
c0011081:	ba e4 a2 02 c0       	mov    edx,0xc002a2e4
c0011086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108a:	89 10                	mov    DWORD PTR [eax],edx
c001108c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	50                   	push   eax
c0011094:	e8 25 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	90                   	nop
c001109d:	83 c4 0c             	add    esp,0xc
c00110a0:	c3                   	ret    
c00110a1:	90                   	nop

c00110a2 <ReservedFilename::~ReservedFilename()>:
c00110a2:	83 ec 0c             	sub    esp,0xc
c00110a5:	83 ec 0c             	sub    esp,0xc
c00110a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ac:	e8 cd ff ff ff       	call   c001107e <ReservedFilename::~ReservedFilename()>
c00110b1:	83 c4 10             	add    esp,0x10
c00110b4:	83 ec 08             	sub    esp,0x8
c00110b7:	6a 0c                	push   0xc
c00110b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bd:	e8 49 15 00 00       	call   c001260b <operator delete(void*, unsigned long)>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	c3                   	ret    

c00110c9 <getFromFileDescriptor(int)>:
c00110c9:	53                   	push   ebx
c00110ca:	83 ec 08             	sub    esp,0x8
c00110cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110dd:	7f 2c                	jg     c001110b <getFromFileDescriptor(int)+0x42>
c00110df:	83 ec 0c             	sub    esp,0xc
c00110e2:	68 18 db 02 c0       	push   0xc002db18
c00110e7:	e8 7e 74 01 00       	call   c002856a <LinkedList<UnixFile>::getFirstElement()>
c00110ec:	83 c4 10             	add    esp,0x10
c00110ef:	85 c0                	test   eax,eax
c00110f1:	75 04                	jne    c00110f7 <getFromFileDescriptor(int)+0x2e>
c00110f3:	31 c0                	xor    eax,eax
c00110f5:	eb 6e                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c00110f7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110fa:	74 69                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c00110fc:	52                   	push   edx
c00110fd:	52                   	push   edx
c00110fe:	50                   	push   eax
c00110ff:	68 18 db 02 c0       	push   0xc002db18
c0011104:	e8 0b 75 01 00       	call   c0028614 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011109:	eb e1                	jmp    c00110ec <getFromFileDescriptor(int)+0x23>
c001110b:	a1 0c db 02 c0       	mov    eax,ds:0xc002db0c
c0011110:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011116:	74 4d                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011118:	a1 10 db 02 c0       	mov    eax,ds:0xc002db10
c001111d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011123:	74 40                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011125:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001112a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011130:	74 33                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011132:	a1 04 db 02 c0       	mov    eax,ds:0xc002db04
c0011137:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001113d:	74 26                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c001113f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011145:	83 f8 08             	cmp    eax,0x8
c0011148:	77 09                	ja     c0011153 <getFromFileDescriptor(int)+0x8a>
c001114a:	8b 04 85 e0 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2520]
c0011151:	eb 12                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c0011153:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011159:	83 fb 08             	cmp    ebx,0x8
c001115c:	77 95                	ja     c00110f3 <getFromFileDescriptor(int)+0x2a>
c001115e:	8b 04 9d a0 da 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2560]
c0011165:	83 c4 08             	add    esp,0x8
c0011168:	5b                   	pop    ebx
c0011169:	c3                   	ret    

c001116a <__static_initialization_and_destruction_0(int, int)>:
c001116a:	83 ec 0c             	sub    esp,0xc
c001116d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011172:	75 34                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011174:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001117c:	75 2a                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001117e:	83 ec 0c             	sub    esp,0xc
c0011181:	68 18 db 02 c0       	push   0xc002db18
c0011186:	e8 c9 72 01 00       	call   c0028454 <LinkedList<UnixFile>::LinkedList()>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	83 ec 04             	sub    esp,0x4
c0011191:	68 98 c7 02 c0       	push   0xc002c798
c0011196:	68 18 db 02 c0       	push   0xc002db18
c001119b:	68 52 84 02 c0       	push   0xc0028452
c00111a0:	e8 e0 13 00 00       	call   c0012585 <__cxa_atexit>
c00111a5:	83 c4 10             	add    esp,0x10
c00111a8:	90                   	nop
c00111a9:	83 c4 0c             	add    esp,0xc
c00111ac:	c3                   	ret    

c00111ad <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111ad:	83 ec 0c             	sub    esp,0xc
c00111b0:	83 ec 08             	sub    esp,0x8
c00111b3:	68 ff ff 00 00       	push   0xffff
c00111b8:	6a 01                	push   0x1
c00111ba:	e8 ab ff ff ff       	call   c001116a <__static_initialization_and_destruction_0(int, int)>
c00111bf:	83 c4 10             	add    esp,0x10
c00111c2:	83 c4 0c             	add    esp,0xc
c00111c5:	c3                   	ret    

c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c6:	53                   	push   ebx
c00111c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111cf:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d5:	89 c8                	mov    eax,ecx
c00111d7:	d1 e8                	shr    eax,1
c00111d9:	03 05 68 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c968
c00111df:	83 e1 01             	and    ecx,0x1
c00111e2:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e4:	75 09                	jne    c00111ef <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e6:	83 e2 f0             	and    edx,0xfffffff0
c00111e9:	09 da                	or     edx,ebx
c00111eb:	88 10                	mov    BYTE PTR [eax],dl
c00111ed:	5b                   	pop    ebx
c00111ee:	c3                   	ret    
c00111ef:	c1 e3 04             	shl    ebx,0x4
c00111f2:	83 e2 0f             	and    edx,0xf
c00111f5:	09 da                	or     edx,ebx
c00111f7:	88 10                	mov    BYTE PTR [eax],dl
c00111f9:	5b                   	pop    ebx
c00111fa:	c3                   	ret    

c00111fb <Virt::getPageState(unsigned long)>:
c00111fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ff:	8b 0d 68 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c968
c0011205:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001120b:	89 d0                	mov    eax,edx
c001120d:	d1 e8                	shr    eax,1
c001120f:	83 e2 01             	and    edx,0x1
c0011212:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011215:	75 04                	jne    c001121b <Virt::getPageState(unsigned long)+0x20>
c0011217:	83 e0 0f             	and    eax,0xf
c001121a:	c3                   	ret    
c001121b:	c0 e8 04             	shr    al,0x4
c001121e:	c3                   	ret    

c001121f <Virt::allocateKernelVirtualPages(int)>:
c001121f:	55                   	push   ebp
c0011220:	31 ed                	xor    ebp,ebp
c0011222:	57                   	push   edi
c0011223:	56                   	push   esi
c0011224:	53                   	push   ebx
c0011225:	31 db                	xor    ebx,ebx
c0011227:	83 ec 1c             	sub    esp,0x1c
c001122a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122e:	8b 3d 64 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c964
c0011234:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011239:	57                   	push   edi
c001123a:	e8 bc ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c001123f:	5a                   	pop    edx
c0011240:	84 c0                	test   al,al
c0011242:	75 3a                	jne    c001127e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011244:	85 db                	test   ebx,ebx
c0011246:	75 02                	jne    c001124a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011248:	89 fd                	mov    ebp,edi
c001124a:	43                   	inc    ebx
c001124b:	39 f3                	cmp    ebx,esi
c001124d:	74 5a                	je     c00112a9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001124f:	47                   	inc    edi
c0011250:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011256:	76 31                	jbe    c0011289 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011258:	c7 05 64 c9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c964,0xc8000
c0011262:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011267:	75 28                	jne    c0011291 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011269:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001126e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011273:	57                   	push   edi
c0011274:	e8 82 ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c0011279:	5a                   	pop    edx
c001127a:	84 c0                	test   al,al
c001127c:	74 c6                	je     c0011244 <Virt::allocateKernelVirtualPages(int)+0x25>
c001127e:	31 db                	xor    ebx,ebx
c0011280:	47                   	inc    edi
c0011281:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011287:	77 cf                	ja     c0011258 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011289:	89 3d 64 c9 02 c0    	mov    DWORD PTR ds:0xc002c964,edi
c001128f:	eb a8                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	68 f8 a2 02 c0       	push   0xc002a2f8
c0011299:	e8 b1 8b 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c001129e:	8b 3d 64 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c964
c00112a4:	83 c4 10             	add    esp,0x10
c00112a7:	eb 90                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112a9:	89 2d 64 c9 02 c0    	mov    DWORD PTR ds:0xc002c964,ebp
c00112af:	4b                   	dec    ebx
c00112b0:	74 5f                	je     c0011311 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112b2:	85 f6                	test   esi,esi
c00112b4:	74 3d                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b6:	89 e8                	mov    eax,ebp
c00112b8:	31 db                	xor    ebx,ebx
c00112ba:	8d 7e ff             	lea    edi,[esi-0x1]
c00112bd:	eb 14                	jmp    c00112d3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112bf:	6a 01                	push   0x1
c00112c1:	43                   	inc    ebx
c00112c2:	50                   	push   eax
c00112c3:	e8 fe fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c8:	58                   	pop    eax
c00112c9:	39 f3                	cmp    ebx,esi
c00112cb:	5a                   	pop    edx
c00112cc:	74 25                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112ce:	a1 64 c9 02 c0       	mov    eax,ds:0xc002c964
c00112d3:	8d 50 01             	lea    edx,[eax+0x1]
c00112d6:	85 db                	test   ebx,ebx
c00112d8:	89 15 64 c9 02 c0    	mov    DWORD PTR ds:0xc002c964,edx
c00112de:	74 20                	je     c0011300 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112e0:	39 df                	cmp    edi,ebx
c00112e2:	75 db                	jne    c00112bf <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e4:	6a 03                	push   0x3
c00112e6:	43                   	inc    ebx
c00112e7:	50                   	push   eax
c00112e8:	e8 d9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112ed:	59                   	pop    ecx
c00112ee:	39 f3                	cmp    ebx,esi
c00112f0:	58                   	pop    eax
c00112f1:	75 db                	jne    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f3:	83 c4 1c             	add    esp,0x1c
c00112f6:	89 e8                	mov    eax,ebp
c00112f8:	5b                   	pop    ebx
c00112f9:	c1 e0 0c             	shl    eax,0xc
c00112fc:	5e                   	pop    esi
c00112fd:	5f                   	pop    edi
c00112fe:	5d                   	pop    ebp
c00112ff:	c3                   	ret    
c0011300:	6a 02                	push   0x2
c0011302:	bb 01 00 00 00       	mov    ebx,0x1
c0011307:	50                   	push   eax
c0011308:	e8 b9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130d:	58                   	pop    eax
c001130e:	5a                   	pop    edx
c001130f:	eb bd                	jmp    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011311:	6a 04                	push   0x4
c0011313:	8d 45 01             	lea    eax,[ebp+0x1]
c0011316:	55                   	push   ebp
c0011317:	a3 64 c9 02 c0       	mov    ds:0xc002c964,eax
c001131c:	e8 a5 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011321:	59                   	pop    ecx
c0011322:	89 e8                	mov    eax,ebp
c0011324:	5b                   	pop    ebx
c0011325:	c1 e0 0c             	shl    eax,0xc
c0011328:	83 c4 1c             	add    esp,0x1c
c001132b:	5b                   	pop    ebx
c001132c:	5e                   	pop    esi
c001132d:	5f                   	pop    edi
c001132e:	5d                   	pop    ebp
c001132f:	c3                   	ret    

c0011330 <Virt::freeSwapfilePage(unsigned long)>:
c0011330:	53                   	push   ebx
c0011331:	8b 15 2c db 02 c0    	mov    edx,DWORD PTR ds:0xc002db2c
c0011337:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001133b:	b8 01 00 00 00       	mov    eax,0x1
c0011340:	89 cb                	mov    ebx,ecx
c0011342:	d3 e0                	shl    eax,cl
c0011344:	c1 eb 05             	shr    ebx,0x5
c0011347:	f7 d0                	not    eax
c0011349:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001134c:	5b                   	pop    ebx
c001134d:	c3                   	ret    

c001134e <Virt::swapIDToSector(unsigned long)>:
c001134e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011352:	0f af 05 6c c9 02 c0 	imul   eax,DWORD PTR ds:0xc002c96c
c0011359:	03 05 74 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c974
c001135f:	c3                   	ret    

c0011360 <Virt::allocateSwapfilePage()>:
c0011360:	55                   	push   ebp
c0011361:	31 d2                	xor    edx,edx
c0011363:	57                   	push   edi
c0011364:	56                   	push   esi
c0011365:	53                   	push   ebx
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	8b 0d 6c c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c96c
c001136f:	a1 70 c9 02 c0       	mov    eax,ds:0xc002c970
c0011374:	f7 f1                	div    ecx
c0011376:	39 0d 70 c9 02 c0    	cmp    DWORD PTR ds:0xc002c970,ecx
c001137c:	72 2d                	jb     c00113ab <Virt::allocateSwapfilePage()+0x4b>
c001137e:	8b 35 2c db 02 c0    	mov    esi,DWORD PTR ds:0xc002db2c
c0011384:	8b 16                	mov    edx,DWORD PTR [esi]
c0011386:	f6 c2 01             	test   dl,0x1
c0011389:	74 3c                	je     c00113c7 <Virt::allocateSwapfilePage()+0x67>
c001138b:	31 c9                	xor    ecx,ecx
c001138d:	bf 01 00 00 00       	mov    edi,0x1
c0011392:	eb 12                	jmp    c00113a6 <Virt::allocateSwapfilePage()+0x46>
c0011394:	89 fd                	mov    ebp,edi
c0011396:	89 ca                	mov    edx,ecx
c0011398:	d3 e5                	shl    ebp,cl
c001139a:	c1 ea 05             	shr    edx,0x5
c001139d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00113a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113a2:	85 ea                	test   edx,ebp
c00113a4:	74 2a                	je     c00113d0 <Virt::allocateSwapfilePage()+0x70>
c00113a6:	41                   	inc    ecx
c00113a7:	39 c8                	cmp    eax,ecx
c00113a9:	77 e9                	ja     c0011394 <Virt::allocateSwapfilePage()+0x34>
c00113ab:	83 ec 0c             	sub    esp,0xc
c00113ae:	68 d8 a4 02 c0       	push   0xc002a4d8
c00113b3:	e8 97 8a 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c00113b8:	83 c4 10             	add    esp,0x10
c00113bb:	31 c9                	xor    ecx,ecx
c00113bd:	83 c4 0c             	add    esp,0xc
c00113c0:	89 c8                	mov    eax,ecx
c00113c2:	5b                   	pop    ebx
c00113c3:	5e                   	pop    esi
c00113c4:	5f                   	pop    edi
c00113c5:	5d                   	pop    ebp
c00113c6:	c3                   	ret    
c00113c7:	89 f3                	mov    ebx,esi
c00113c9:	bd 01 00 00 00       	mov    ebp,0x1
c00113ce:	31 c9                	xor    ecx,ecx
c00113d0:	09 ea                	or     edx,ebp
c00113d2:	89 c8                	mov    eax,ecx
c00113d4:	89 13                	mov    DWORD PTR [ebx],edx
c00113d6:	83 c4 0c             	add    esp,0xc
c00113d9:	5b                   	pop    ebx
c00113da:	5e                   	pop    esi
c00113db:	5f                   	pop    edi
c00113dc:	5d                   	pop    ebp
c00113dd:	c3                   	ret    

c00113de <Virt::virtualMemorySetup()>:
c00113de:	53                   	push   ebx
c00113df:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e4:	6a 0f                	push   0xf
c00113e6:	53                   	push   ebx
c00113e7:	43                   	inc    ebx
c00113e8:	e8 d9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ed:	58                   	pop    eax
c00113ee:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f4:	5a                   	pop    edx
c00113f5:	75 ed                	jne    c00113e4 <Virt::virtualMemorySetup()+0x6>
c00113f7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113fc:	6a 00                	push   0x0
c00113fe:	53                   	push   ebx
c00113ff:	43                   	inc    ebx
c0011400:	e8 c1 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011405:	59                   	pop    ecx
c0011406:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001140c:	58                   	pop    eax
c001140d:	75 ed                	jne    c00113fc <Virt::virtualMemorySetup()+0x1e>
c001140f:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011414:	6a 0f                	push   0xf
c0011416:	53                   	push   ebx
c0011417:	43                   	inc    ebx
c0011418:	e8 a9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001141d:	58                   	pop    eax
c001141e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011424:	5a                   	pop    edx
c0011425:	75 ed                	jne    c0011414 <Virt::virtualMemorySetup()+0x36>
c0011427:	5b                   	pop    ebx
c0011428:	c3                   	ret    

c0011429 <Virt::setupPageSwapping(int)>:
c0011429:	57                   	push   edi
c001142a:	56                   	push   esi
c001142b:	53                   	push   ebx
c001142c:	83 ec 1c             	sub    esp,0x1c
c001142f:	68 14 01 00 00       	push   0x114
c0011434:	e8 60 e1 ff ff       	call   c000f599 <malloc>
c0011439:	83 c4 0c             	add    esp,0xc
c001143c:	89 c6                	mov    esi,eax
c001143e:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c0011444:	68 ef a4 02 c0       	push   0xc002a4ef
c0011449:	50                   	push   eax
c001144a:	e8 f3 17 00 00       	call   c0012c42 <File::File(char const*, Process*)>
c001144f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011452:	e8 c7 19 00 00       	call   c0012e1e <File::unlink()>
c0011457:	58                   	pop    eax
c0011458:	5a                   	pop    edx
c0011459:	6a 12                	push   0x12
c001145b:	56                   	push   esi
c001145c:	e8 45 18 00 00       	call   c0012ca6 <File::open(FileOpenMode)>
c0011461:	83 c4 10             	add    esp,0x10
c0011464:	85 c0                	test   eax,eax
c0011466:	0f 85 2f 01 00 00    	jne    c001159b <Virt::setupPageSwapping(int)+0x172>
c001146c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011470:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011478:	c1 e3 08             	shl    ebx,0x8
c001147b:	83 ec 0c             	sub    esp,0xc
c001147e:	68 00 00 01 00       	push   0x10000
c0011483:	e8 11 e1 ff ff       	call   c000f599 <malloc>
c0011488:	83 c4 0c             	add    esp,0xc
c001148b:	89 c7                	mov    edi,eax
c001148d:	68 00 00 01 00       	push   0x10000
c0011492:	68 ee 00 00 00       	push   0xee
c0011497:	50                   	push   eax
c0011498:	e8 b3 f2 fe ff       	call   c0000750 <memset>
c001149d:	83 c4 10             	add    esp,0x10
c00114a0:	85 db                	test   ebx,ebx
c00114a2:	79 03                	jns    c00114a7 <Virt::setupPageSwapping(int)+0x7e>
c00114a4:	83 c3 0f             	add    ebx,0xf
c00114a7:	c1 fb 04             	sar    ebx,0x4
c00114aa:	4b                   	dec    ebx
c00114ab:	83 fb ff             	cmp    ebx,0xffffffff
c00114ae:	74 41                	je     c00114f1 <Virt::setupPageSwapping(int)+0xc8>
c00114b0:	83 ec 0c             	sub    esp,0xc
c00114b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114b9:	52                   	push   edx
c00114ba:	57                   	push   edi
c00114bb:	6a 00                	push   0x0
c00114bd:	68 00 00 01 00       	push   0x10000
c00114c2:	56                   	push   esi
c00114c3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114c6:	83 c4 20             	add    esp,0x20
c00114c9:	85 c0                	test   eax,eax
c00114cb:	0f 85 b5 00 00 00    	jne    c0011586 <Virt::setupPageSwapping(int)+0x15d>
c00114d1:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c00114d9:	74 cf                	je     c00114aa <Virt::setupPageSwapping(int)+0x81>
c00114db:	83 ec 0c             	sub    esp,0xc
c00114de:	4b                   	dec    ebx
c00114df:	68 21 a5 02 c0       	push   0xc002a521
c00114e4:	e8 66 89 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c00114e9:	83 c4 10             	add    esp,0x10
c00114ec:	83 fb ff             	cmp    ebx,0xffffffff
c00114ef:	75 bf                	jne    c00114b0 <Virt::setupPageSwapping(int)+0x87>
c00114f1:	83 ec 0c             	sub    esp,0xc
c00114f4:	56                   	push   esi
c00114f5:	e8 0a 18 00 00       	call   c0012d04 <File::close()>
c00114fa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114fd:	e8 b7 e0 ff ff       	call   c000f5b9 <rfree>
c0011502:	83 c4 10             	add    esp,0x10
c0011505:	85 f6                	test   esi,esi
c0011507:	74 0c                	je     c0011515 <Virt::setupPageSwapping(int)+0xec>
c0011509:	83 ec 0c             	sub    esp,0xc
c001150c:	8b 06                	mov    eax,DWORD PTR [esi]
c001150e:	56                   	push   esi
c001150f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011512:	83 c4 10             	add    esp,0x10
c0011515:	83 ec 08             	sub    esp,0x8
c0011518:	a1 c8 df 02 c0       	mov    eax,ds:0xc002dfc8
c001151d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011523:	8b 10                	mov    edx,DWORD PTR [eax]
c0011525:	68 ef a4 02 c0       	push   0xc002a4ef
c001152a:	50                   	push   eax
c001152b:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001152e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011532:	c6 05 78 c9 02 c0 43 	mov    BYTE PTR ds:0xc002c978,0x43
c0011539:	c1 e2 0b             	shl    edx,0xb
c001153c:	a3 74 c9 02 c0       	mov    ds:0xc002c974,eax
c0011541:	89 15 70 c9 02 c0    	mov    DWORD PTR ds:0xc002c970,edx
c0011547:	c7 05 6c c9 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c96c,0x8
c0011551:	c1 ea 08             	shr    edx,0x8
c0011554:	89 14 24             	mov    DWORD PTR [esp],edx
c0011557:	e8 3d e0 ff ff       	call   c000f599 <malloc>
c001155c:	83 c4 0c             	add    esp,0xc
c001155f:	89 c1                	mov    ecx,eax
c0011561:	a3 2c db 02 c0       	mov    ds:0xc002db2c,eax
c0011566:	31 d2                	xor    edx,edx
c0011568:	a1 70 c9 02 c0       	mov    eax,ds:0xc002c970
c001156d:	f7 35 6c c9 02 c0    	div    DWORD PTR ds:0xc002c96c
c0011573:	c1 e8 05             	shr    eax,0x5
c0011576:	50                   	push   eax
c0011577:	6a 00                	push   0x0
c0011579:	51                   	push   ecx
c001157a:	e8 d1 f1 fe ff       	call   c0000750 <memset>
c001157f:	83 c4 20             	add    esp,0x20
c0011582:	5b                   	pop    ebx
c0011583:	5e                   	pop    esi
c0011584:	5f                   	pop    edi
c0011585:	c3                   	ret    
c0011586:	83 ec 0c             	sub    esp,0xc
c0011589:	68 21 a5 02 c0       	push   0xc002a521
c001158e:	e8 bc 88 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0011593:	83 c4 10             	add    esp,0x10
c0011596:	e9 36 ff ff ff       	jmp    c00114d1 <Virt::setupPageSwapping(int)+0xa8>
c001159b:	83 ec 0c             	sub    esp,0xc
c001159e:	68 06 a5 02 c0       	push   0xc002a506
c00115a3:	e8 a7 88 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c00115a8:	83 c4 10             	add    esp,0x10
c00115ab:	e9 bc fe ff ff       	jmp    c001146c <Virt::setupPageSwapping(int)+0x43>

c00115b0 <VAS::VAS()>:
c00115b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115ca:	a3 30 db 02 c0       	mov    ds:0xc002db30,eax
c00115cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115db:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115e2:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00115e9:	90                   	nop
c00115ea:	c3                   	ret    
c00115eb:	90                   	nop

c00115ec <VAS::VAS(VAS*)>:
c00115ec:	83 ec 0c             	sub    esp,0xc
c00115ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011605:	83 ec 0c             	sub    esp,0xc
c0011608:	68 18 a3 02 c0       	push   0xc002a318
c001160d:	e8 3d 88 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0011612:	83 c4 10             	add    esp,0x10
c0011615:	90                   	nop
c0011616:	83 c4 0c             	add    esp,0xc
c0011619:	c3                   	ret    

c001161a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001161a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001161e:	89 c2                	mov    edx,eax
c0011620:	c1 e8 0a             	shr    eax,0xa
c0011623:	c1 ea 16             	shr    edx,0x16
c0011626:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001162b:	19 c9                	sbb    ecx,ecx
c001162d:	c1 e2 0c             	shl    edx,0xc
c0011630:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011636:	25 fc 0f 00 00       	and    eax,0xffc
c001163b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011642:	01 d0                	add    eax,edx
c0011644:	c3                   	ret    
c0011645:	90                   	nop

c0011646 <VAS::getPageTableEntry(unsigned long)>:
c0011646:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001164a:	89 ca                	mov    edx,ecx
c001164c:	c1 e9 0a             	shr    ecx,0xa
c001164f:	c1 ea 16             	shr    edx,0x16
c0011652:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011658:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001165e:	c1 e0 0c             	shl    eax,0xc
c0011661:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011664:	c3                   	ret    

c0011665 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011665:	57                   	push   edi
c0011666:	56                   	push   esi
c0011667:	be 01 00 00 00       	mov    esi,0x1
c001166c:	53                   	push   ebx
c001166d:	83 ec 10             	sub    esp,0x10
c0011670:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011674:	c1 eb 0c             	shr    ebx,0xc
c0011677:	eb 3f                	jmp    c00116b8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011679:	83 ec 08             	sub    esp,0x8
c001167c:	57                   	push   edi
c001167d:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c0011683:	e8 be ff ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c0011688:	83 c4 10             	add    esp,0x10
c001168b:	8b 00                	mov    eax,DWORD PTR [eax]
c001168d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011691:	f6 c4 04             	test   ah,0x4
c0011694:	75 5f                	jne    c00116f5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011696:	80 fa 04             	cmp    dl,0x4
c0011699:	74 78                	je     c0011713 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001169b:	80 fa 02             	cmp    dl,0x2
c001169e:	0f 84 88 00 00 00    	je     c001172c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00116a4:	80 fa 03             	cmp    dl,0x3
c00116a7:	0f 84 ad 00 00 00    	je     c001175a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00116ad:	fe ca                	dec    dl
c00116af:	0f 84 92 00 00 00    	je     c0011747 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b5:	43                   	inc    ebx
c00116b6:	31 f6                	xor    esi,esi
c00116b8:	53                   	push   ebx
c00116b9:	89 df                	mov    edi,ebx
c00116bb:	e8 3b fb ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c00116c0:	c1 e7 0c             	shl    edi,0xc
c00116c3:	59                   	pop    ecx
c00116c4:	84 c0                	test   al,al
c00116c6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116ca:	75 ad                	jne    c0011679 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116cc:	83 ec 0c             	sub    esp,0xc
c00116cf:	68 27 a5 02 c0       	push   0xc002a527
c00116d4:	e8 76 87 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c00116d9:	58                   	pop    eax
c00116da:	5a                   	pop    edx
c00116db:	57                   	push   edi
c00116dc:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c00116e2:	e8 5f ff ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00116ec:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116f0:	f6 c4 04             	test   ah,0x4
c00116f3:	74 c0                	je     c00116b5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116f5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116fe:	83 ec 0c             	sub    esp,0xc
c0011701:	50                   	push   eax
c0011702:	e8 1d e2 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011707:	83 c4 10             	add    esp,0x10
c001170a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001170e:	80 fa 04             	cmp    dl,0x4
c0011711:	75 88                	jne    c001169b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011713:	89 f0                	mov    eax,esi
c0011715:	84 c0                	test   al,al
c0011717:	75 47                	jne    c0011760 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011719:	c7 44 24 20 3c a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a33c
c0011721:	83 c4 10             	add    esp,0x10
c0011724:	5b                   	pop    ebx
c0011725:	5e                   	pop    esi
c0011726:	5f                   	pop    edi
c0011727:	e9 23 87 00 00       	jmp    c0019e4f <Krnl::panic(char const*)>
c001172c:	89 f0                	mov    eax,esi
c001172e:	84 c0                	test   al,al
c0011730:	75 15                	jne    c0011747 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011732:	83 ec 0c             	sub    esp,0xc
c0011735:	68 43 a5 02 c0       	push   0xc002a543
c001173a:	e8 10 87 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c001173f:	83 c4 10             	add    esp,0x10
c0011742:	e9 6e ff ff ff       	jmp    c00116b5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011747:	83 ec 08             	sub    esp,0x8
c001174a:	6a 00                	push   0x0
c001174c:	53                   	push   ebx
c001174d:	e8 74 fa ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011752:	83 c4 10             	add    esp,0x10
c0011755:	e9 5b ff ff ff       	jmp    c00116b5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001175a:	89 f0                	mov    eax,esi
c001175c:	84 c0                	test   al,al
c001175e:	75 15                	jne    c0011775 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011760:	83 ec 08             	sub    esp,0x8
c0011763:	6a 00                	push   0x0
c0011765:	53                   	push   ebx
c0011766:	e8 5b fa ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001176b:	83 c4 10             	add    esp,0x10
c001176e:	83 c4 10             	add    esp,0x10
c0011771:	5b                   	pop    ebx
c0011772:	5e                   	pop    esi
c0011773:	5f                   	pop    edi
c0011774:	c3                   	ret    
c0011775:	c7 44 24 20 5f a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a55f
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	5b                   	pop    ebx
c0011781:	5e                   	pop    esi
c0011782:	5f                   	pop    edi
c0011783:	e9 c7 86 00 00       	jmp    c0019e4f <Krnl::panic(char const*)>

c0011788 <VAS::freeAllocatedPages(unsigned long)>:
c0011788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001178c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011790:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011794:	74 09                	je     c001179f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011796:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001179a:	e9 c6 fe ff ff       	jmp    c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c001179f:	c7 44 24 04 60 a3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a360
c00117a7:	e9 37 0f 00 00       	jmp    c00126e3 <Dbg::kprintf(char const*, ...)>

c00117ac <VAS::virtualToPhysical(unsigned long)>:
c00117ac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117b0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117b4:	e8 8d fe ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c00117b9:	5a                   	pop    edx
c00117ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00117bc:	59                   	pop    ecx
c00117bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117c2:	c3                   	ret    
c00117c3:	90                   	nop

c00117c4 <VAS::reflagRange(unsigned long, int, int, int)>:
c00117c4:	55                   	push   ebp
c00117c5:	57                   	push   edi
c00117c6:	56                   	push   esi
c00117c7:	53                   	push   ebx
c00117c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00117cc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00117d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117d4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00117d8:	85 db                	test   ebx,ebx
c00117da:	7e 22                	jle    c00117fe <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00117dc:	c1 e3 0c             	shl    ebx,0xc
c00117df:	01 f3                	add    ebx,esi
c00117e1:	56                   	push   esi
c00117e2:	81 c6 00 10 00 00    	add    esi,0x1000
c00117e8:	55                   	push   ebp
c00117e9:	e8 58 fe ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c00117ee:	5a                   	pop    edx
c00117ef:	59                   	pop    ecx
c00117f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117f2:	21 f9                	and    ecx,edi
c00117f4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00117f8:	39 f3                	cmp    ebx,esi
c00117fa:	89 08                	mov    DWORD PTR [eax],ecx
c00117fc:	75 e3                	jne    c00117e1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117fe:	5b                   	pop    ebx
c00117ff:	5e                   	pop    esi
c0011800:	5f                   	pop    edi
c0011801:	5d                   	pop    ebp
c0011802:	c3                   	ret    
c0011803:	90                   	nop

c0011804 <VAS::setToWriteCombining(unsigned long, int)>:
c0011804:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011809:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001180f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011816:	75 01                	jne    c0011819 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011818:	c3                   	ret    
c0011819:	68 80 00 00 00       	push   0x80
c001181e:	6a ff                	push   0xffffffff
c0011820:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011824:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011828:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001182c:	e8 93 ff ff ff       	call   c00117c4 <VAS::reflagRange(unsigned long, int, int, int)>
c0011831:	83 c4 14             	add    esp,0x14
c0011834:	c3                   	ret    
c0011835:	90                   	nop

c0011836 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011836:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001183b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001183f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011846:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011849:	19 c0                	sbb    eax,eax
c001184b:	83 ca 03             	or     edx,0x3
c001184e:	83 e0 fc             	and    eax,0xfffffffc
c0011851:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011858:	0f 20 d8             	mov    eax,cr3
c001185b:	0f 22 d8             	mov    cr3,eax
c001185e:	c3                   	ret    
c001185f:	90                   	nop

c0011860 <VAS::~VAS()>:
c0011860:	83 ec 2c             	sub    esp,0x2c
c0011863:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001186b:	fa                   	cli    
c001186c:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0011871:	40                   	inc    eax
c0011872:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0011877:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187c:	8b 00                	mov    eax,DWORD PTR [eax]
c001187e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011881:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011887:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001188b:	6a 01                	push   0x1
c001188d:	50                   	push   eax
c001188e:	e8 a3 ff ff ff       	call   c0011836 <VAS::mapOtherVASIn(bool, VAS*)>
c0011893:	83 c4 0c             	add    esp,0xc
c0011896:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001189e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00118a6:	0f 8f d4 00 00 00    	jg     c0011980 <VAS::~VAS()+0x120>
c00118ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00118b7:	c1 e2 02             	shl    edx,0x2
c00118ba:	01 d0                	add    eax,edx
c00118bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00118be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c6:	83 e0 01             	and    eax,0x1
c00118c9:	0f 84 a8 00 00 00    	je     c0011977 <VAS::~VAS()+0x117>
c00118cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118d7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00118df:	7f 72                	jg     c0011953 <VAS::~VAS()+0xf3>
c00118e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118e5:	c1 e0 0a             	shl    eax,0xa
c00118e8:	89 c2                	mov    edx,eax
c00118ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118ee:	01 d0                	add    eax,edx
c00118f0:	c1 e0 0c             	shl    eax,0xc
c00118f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00118fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011901:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011907:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001190b:	6a 01                	push   0x1
c001190d:	50                   	push   eax
c001190e:	e8 07 fd ff ff       	call   c001161a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011913:	83 c4 0c             	add    esp,0xc
c0011916:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001191a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001191e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011920:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011928:	25 01 04 00 00       	and    eax,0x401
c001192d:	3d 01 04 00 00       	cmp    eax,0x401
c0011932:	75 19                	jne    c001194d <VAS::~VAS()+0xed>
c0011934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011938:	25 00 f0 ff ff       	and    eax,0xfffff000
c001193d:	83 ec 0c             	sub    esp,0xc
c0011940:	50                   	push   eax
c0011941:	e8 de df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011946:	83 c4 10             	add    esp,0x10
c0011949:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001194d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011951:	eb 84                	jmp    c00118d7 <VAS::~VAS()+0x77>
c0011953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011957:	25 00 04 00 00       	and    eax,0x400
c001195c:	74 19                	je     c0011977 <VAS::~VAS()+0x117>
c001195e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011962:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011967:	83 ec 0c             	sub    esp,0xc
c001196a:	50                   	push   eax
c001196b:	e8 b4 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011970:	83 c4 10             	add    esp,0x10
c0011973:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011977:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001197b:	e9 1e ff ff ff       	jmp    c001189e <VAS::~VAS()+0x3e>
c0011980:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011984:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011987:	83 ec 0c             	sub    esp,0xc
c001198a:	50                   	push   eax
c001198b:	e8 d5 fc ff ff       	call   c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c0011990:	83 c4 10             	add    esp,0x10
c0011993:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011997:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001199a:	83 ec 0c             	sub    esp,0xc
c001199d:	50                   	push   eax
c001199e:	e8 81 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119a3:	83 c4 10             	add    esp,0x10
c00119a6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119ae:	c1 e0 02             	shl    eax,0x2
c00119b1:	83 ec 08             	sub    esp,0x8
c00119b4:	50                   	push   eax
c00119b5:	68 84 a3 02 c0       	push   0xc002a384
c00119ba:	e8 24 0d 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00119bf:	83 c4 10             	add    esp,0x10
c00119c2:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00119c7:	48                   	dec    eax
c00119c8:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c00119cd:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00119d2:	85 c0                	test   eax,eax
c00119d4:	75 01                	jne    c00119d7 <VAS::~VAS()+0x177>
c00119d6:	fb                   	sti    
c00119d7:	90                   	nop
c00119d8:	83 c4 2c             	add    esp,0x2c
c00119db:	c3                   	ret    

c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>:
c00119dc:	55                   	push   ebp
c00119dd:	57                   	push   edi
c00119de:	56                   	push   esi
c00119df:	53                   	push   ebx
c00119e0:	83 ec 1c             	sub    esp,0x1c
c00119e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00119e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119eb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119f1:	77 08                	ja     c00119fb <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00119f3:	0f 20 d8             	mov    eax,cr3
c00119f6:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119f9:	75 47                	jne    c0011a42 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119ff:	09 d8                	or     eax,ebx
c0011a01:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a06:	75 57                	jne    c0011a5f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a08:	89 de                	mov    esi,ebx
c0011a0a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a0d:	c1 ee 16             	shr    esi,0x16
c0011a10:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011a17:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011a1b:	74 54                	je     c0011a71 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011a1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a21:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a27:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a2b:	c1 e6 0c             	shl    esi,0xc
c0011a2e:	c1 eb 0a             	shr    ebx,0xa
c0011a31:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a37:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a3a:	83 c4 1c             	add    esp,0x1c
c0011a3d:	5b                   	pop    ebx
c0011a3e:	5e                   	pop    esi
c0011a3f:	5f                   	pop    edi
c0011a40:	5d                   	pop    ebp
c0011a41:	c3                   	ret    
c0011a42:	83 ec 0c             	sub    esp,0xc
c0011a45:	68 a4 a3 02 c0       	push   0xc002a3a4
c0011a4a:	e8 94 0c 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0011a4f:	83 c4 10             	add    esp,0x10
c0011a52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a56:	09 d8                	or     eax,ebx
c0011a58:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a5d:	74 a9                	je     c0011a08 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a5f:	83 ec 0c             	sub    esp,0xc
c0011a62:	68 0c a4 02 c0       	push   0xc002a40c
c0011a67:	e8 e3 83 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0011a6c:	83 c4 10             	add    esp,0x10
c0011a6f:	eb 97                	jmp    c0011a08 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a75:	e8 1b df ff ff       	call   c000f995 <Phys::allocatePage()>
c0011a7a:	83 ec 0c             	sub    esp,0xc
c0011a7d:	89 c5                	mov    ebp,eax
c0011a7f:	8b 0d 30 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db30
c0011a85:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a89:	6a 01                	push   0x1
c0011a8b:	e8 8f f7 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011a90:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a97:	6a 01                	push   0x1
c0011a99:	50                   	push   eax
c0011a9a:	55                   	push   ebp
c0011a9b:	81 cd 07 04 00 00    	or     ebp,0x407
c0011aa1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011aa5:	51                   	push   ecx
c0011aa6:	e8 27 02 00 00       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011aab:	83 c4 1c             	add    esp,0x1c
c0011aae:	68 00 10 00 00       	push   0x1000
c0011ab3:	6a 00                	push   0x0
c0011ab5:	50                   	push   eax
c0011ab6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011aba:	e8 91 ec fe ff       	call   c0000750 <memset>
c0011abf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ac3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ac6:	e8 9a fb ff ff       	call   c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c0011acb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011acf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ad2:	83 c4 10             	add    esp,0x10
c0011ad5:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011ad8:	e9 40 ff ff ff       	jmp    c0011a1d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011add:	90                   	nop

c0011ade <VAS::allocatePages(int, int)>:
c0011ade:	55                   	push   ebp
c0011adf:	57                   	push   edi
c0011ae0:	56                   	push   esi
c0011ae1:	53                   	push   ebx
c0011ae2:	83 ec 1c             	sub    esp,0x1c
c0011ae5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ae9:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011aee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011af4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011afa:	83 e0 01             	and    eax,0x1
c0011afd:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011b01:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b05:	0f 85 cc 00 00 00    	jne    c0011bd7 <VAS::allocatePages(int, int)+0xf9>
c0011b0b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b12:	85 c0                	test   eax,eax
c0011b14:	0f 84 a1 00 00 00    	je     c0011bbb <VAS::allocatePages(int, int)+0xdd>
c0011b1a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011b1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b22:	c1 e6 0c             	shl    esi,0xc
c0011b25:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b29:	85 c0                	test   eax,eax
c0011b2b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b2e:	7e 33                	jle    c0011b63 <VAS::allocatePages(int, int)+0x85>
c0011b30:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b34:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b38:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b3e:	e8 52 de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011b43:	55                   	push   ebp
c0011b44:	53                   	push   ebx
c0011b45:	50                   	push   eax
c0011b46:	57                   	push   edi
c0011b47:	e8 90 fe ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b4c:	83 c4 10             	add    esp,0x10
c0011b4f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b54:	74 03                	je     c0011b59 <VAS::allocatePages(int, int)+0x7b>
c0011b56:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b59:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b5f:	39 de                	cmp    esi,ebx
c0011b61:	75 db                	jne    c0011b3e <VAS::allocatePages(int, int)+0x60>
c0011b63:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b68:	75 12                	jne    c0011b7c <VAS::allocatePages(int, int)+0x9e>
c0011b6a:	0f 20 d8             	mov    eax,cr3
c0011b6d:	0f 22 d8             	mov    cr3,eax
c0011b70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b74:	83 c4 1c             	add    esp,0x1c
c0011b77:	5b                   	pop    ebx
c0011b78:	5e                   	pop    esi
c0011b79:	5f                   	pop    edi
c0011b7a:	5d                   	pop    ebp
c0011b7b:	c3                   	ret    
c0011b7c:	c1 ee 0a             	shr    esi,0xa
c0011b7f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b83:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b89:	c1 eb 0a             	shr    ebx,0xa
c0011b8c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b92:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b98:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b9e:	39 c3                	cmp    ebx,eax
c0011ba0:	77 ce                	ja     c0011b70 <VAS::allocatePages(int, int)+0x92>
c0011ba2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ba5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bab:	39 d8                	cmp    eax,ebx
c0011bad:	73 f3                	jae    c0011ba2 <VAS::allocatePages(int, int)+0xc4>
c0011baf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bb3:	83 c4 1c             	add    esp,0x1c
c0011bb6:	5b                   	pop    ebx
c0011bb7:	5e                   	pop    esi
c0011bb8:	5f                   	pop    edi
c0011bb9:	5d                   	pop    ebp
c0011bba:	c3                   	ret    
c0011bbb:	83 ec 0c             	sub    esp,0xc
c0011bbe:	68 30 a4 02 c0       	push   0xc002a430
c0011bc3:	e8 87 82 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0011bc8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011bcb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bcf:	83 c4 10             	add    esp,0x10
c0011bd2:	e9 43 ff ff ff       	jmp    c0011b1a <VAS::allocatePages(int, int)+0x3c>
c0011bd7:	83 ec 0c             	sub    esp,0xc
c0011bda:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011bde:	e8 3c f6 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011be3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011be7:	83 c4 10             	add    esp,0x10
c0011bea:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011bef:	0f 87 9b 00 00 00    	ja     c0011c90 <VAS::allocatePages(int, int)+0x1b2>
c0011bf5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011bf9:	85 d2                	test   edx,edx
c0011bfb:	7e 3c                	jle    c0011c39 <VAS::allocatePages(int, int)+0x15b>
c0011bfd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c01:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c05:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c09:	c1 e5 0c             	shl    ebp,0xc
c0011c0c:	81 ce 00 04 00 00    	or     esi,0x400
c0011c12:	01 dd                	add    ebp,ebx
c0011c14:	e8 7c dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011c19:	56                   	push   esi
c0011c1a:	53                   	push   ebx
c0011c1b:	50                   	push   eax
c0011c1c:	57                   	push   edi
c0011c1d:	e8 ba fd ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c22:	83 c4 10             	add    esp,0x10
c0011c25:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c2a:	74 03                	je     c0011c2f <VAS::allocatePages(int, int)+0x151>
c0011c2c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c2f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c35:	39 dd                	cmp    ebp,ebx
c0011c37:	75 db                	jne    c0011c14 <VAS::allocatePages(int, int)+0x136>
c0011c39:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c3e:	0f 84 26 ff ff ff    	je     c0011b6a <VAS::allocatePages(int, int)+0x8c>
c0011c44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c4c:	89 d3                	mov    ebx,edx
c0011c4e:	c1 e0 0c             	shl    eax,0xc
c0011c51:	c1 eb 0a             	shr    ebx,0xa
c0011c54:	01 d0                	add    eax,edx
c0011c56:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c5c:	c1 e8 0a             	shr    eax,0xa
c0011c5f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c65:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c6a:	2d 00 00 40 00       	sub    eax,0x400000
c0011c6f:	39 c3                	cmp    ebx,eax
c0011c71:	0f 87 f9 fe ff ff    	ja     c0011b70 <VAS::allocatePages(int, int)+0x92>
c0011c77:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c7a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c80:	39 d8                	cmp    eax,ebx
c0011c82:	73 f3                	jae    c0011c77 <VAS::allocatePages(int, int)+0x199>
c0011c84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c88:	83 c4 1c             	add    esp,0x1c
c0011c8b:	5b                   	pop    ebx
c0011c8c:	5e                   	pop    esi
c0011c8d:	5f                   	pop    edi
c0011c8e:	5d                   	pop    ebp
c0011c8f:	c3                   	ret    
c0011c90:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011c95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c9b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011ca2:	0f 84 4d ff ff ff    	je     c0011bf5 <VAS::allocatePages(int, int)+0x117>
c0011ca8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011cb0:	e9 40 ff ff ff       	jmp    c0011bf5 <VAS::allocatePages(int, int)+0x117>
c0011cb5:	90                   	nop

c0011cb6 <VAS::setCPUSpecific(unsigned long)>:
c0011cb6:	83 ec 0c             	sub    esp,0xc
c0011cb9:	6a 05                	push   0x5
c0011cbb:	68 00 00 40 c2       	push   0xc2400000
c0011cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc8:	e8 0f fd ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ccd:	83 c4 1c             	add    esp,0x1c
c0011cd0:	c3                   	ret    
c0011cd1:	90                   	nop

c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011cd2:	55                   	push   ebp
c0011cd3:	57                   	push   edi
c0011cd4:	56                   	push   esi
c0011cd5:	53                   	push   ebx
c0011cd6:	83 ec 1c             	sub    esp,0x1c
c0011cd9:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011cde:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ce2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ce8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011cec:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011cf2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011cf6:	83 e0 01             	and    eax,0x1
c0011cf9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011cfd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d01:	85 c0                	test   eax,eax
c0011d03:	7e 39                	jle    c0011d3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d05:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d09:	89 f3                	mov    ebx,esi
c0011d0b:	c1 e0 0c             	shl    eax,0xc
c0011d0e:	01 f0                	add    eax,esi
c0011d10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d14:	55                   	push   ebp
c0011d15:	53                   	push   ebx
c0011d16:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d1a:	29 f0                	sub    eax,esi
c0011d1c:	01 d8                	add    eax,ebx
c0011d1e:	50                   	push   eax
c0011d1f:	57                   	push   edi
c0011d20:	e8 b7 fc ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d25:	83 c4 10             	add    esp,0x10
c0011d28:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d2d:	74 03                	je     c0011d32 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d2f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d32:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d38:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d3c:	75 d6                	jne    c0011d14 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d3e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d43:	75 10                	jne    c0011d55 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d45:	0f 20 d8             	mov    eax,cr3
c0011d48:	0f 22 d8             	mov    cr3,eax
c0011d4b:	83 c4 1c             	add    esp,0x1c
c0011d4e:	89 f0                	mov    eax,esi
c0011d50:	5b                   	pop    ebx
c0011d51:	5e                   	pop    esi
c0011d52:	5f                   	pop    edi
c0011d53:	5d                   	pop    ebp
c0011d54:	c3                   	ret    
c0011d55:	89 f3                	mov    ebx,esi
c0011d57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d5b:	c1 eb 0a             	shr    ebx,0xa
c0011d5e:	c1 e0 0c             	shl    eax,0xc
c0011d61:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d67:	01 f0                	add    eax,esi
c0011d69:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d6f:	c1 e8 0a             	shr    eax,0xa
c0011d72:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d77:	2d 00 00 40 00       	sub    eax,0x400000
c0011d7c:	39 c3                	cmp    ebx,eax
c0011d7e:	77 cb                	ja     c0011d4b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d80:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d83:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d89:	39 d8                	cmp    eax,ebx
c0011d8b:	73 f3                	jae    c0011d80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d8d:	83 c4 1c             	add    esp,0x1c
c0011d90:	89 f0                	mov    eax,esi
c0011d92:	5b                   	pop    ebx
c0011d93:	5e                   	pop    esi
c0011d94:	5f                   	pop    edi
c0011d95:	5d                   	pop    ebp
c0011d96:	c3                   	ret    
c0011d97:	90                   	nop

c0011d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d98:	55                   	push   ebp
c0011d99:	57                   	push   edi
c0011d9a:	56                   	push   esi
c0011d9b:	53                   	push   ebx
c0011d9c:	83 ec 1c             	sub    esp,0x1c
c0011d9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011da3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011da7:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011dab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011daf:	a9 ff 0f 00 00       	test   eax,0xfff
c0011db4:	75 4a                	jne    c0011e00 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011db6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011dba:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011dbd:	c1 eb 16             	shr    ebx,0x16
c0011dc0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011dc7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011dcb:	74 4d                	je     c0011e1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011dcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011dd1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011dd5:	c1 e8 0a             	shr    eax,0xa
c0011dd8:	80 fa 01             	cmp    dl,0x1
c0011ddb:	19 d2                	sbb    edx,edx
c0011ddd:	c1 e3 0c             	shl    ebx,0xc
c0011de0:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011de4:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011dea:	25 fc 0f 00 00       	and    eax,0xffc
c0011def:	01 d8                	add    eax,ebx
c0011df1:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011df8:	83 c4 1c             	add    esp,0x1c
c0011dfb:	5b                   	pop    ebx
c0011dfc:	5e                   	pop    esi
c0011dfd:	5f                   	pop    edi
c0011dfe:	5d                   	pop    ebp
c0011dff:	c3                   	ret    
c0011e00:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e04:	83 ec 0c             	sub    esp,0xc
c0011e07:	68 5c a4 02 c0       	push   0xc002a45c
c0011e0c:	e8 3e 80 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0011e11:	83 c4 10             	add    esp,0x10
c0011e14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e18:	eb 9c                	jmp    c0011db6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011e1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e1e:	e8 72 db ff ff       	call   c000f995 <Phys::allocatePage()>
c0011e23:	83 ec 0c             	sub    esp,0xc
c0011e26:	89 c5                	mov    ebp,eax
c0011e28:	8b 0d 30 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db30
c0011e2e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e32:	6a 01                	push   0x1
c0011e34:	e8 e6 f3 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011e39:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e40:	6a 01                	push   0x1
c0011e42:	50                   	push   eax
c0011e43:	55                   	push   ebp
c0011e44:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e4a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e4e:	51                   	push   ecx
c0011e4f:	e8 7e fe ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e54:	83 c4 1c             	add    esp,0x1c
c0011e57:	68 00 10 00 00       	push   0x1000
c0011e5c:	6a 00                	push   0x0
c0011e5e:	50                   	push   eax
c0011e5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e63:	e8 e8 e8 fe ff       	call   c0000750 <memset>
c0011e68:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e6c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e6f:	e8 f1 f7 ff ff       	call   c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e74:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e77:	83 c4 10             	add    esp,0x10
c0011e7a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e81:	e9 47 ff ff ff       	jmp    c0011dcd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e86 <VAS::VAS(bool)>:
c0011e86:	53                   	push   ebx
c0011e87:	83 ec 28             	sub    esp,0x28
c0011e8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e8e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ea1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ea8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eac:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011eb0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011eb3:	e8 dd da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011eb8:	89 c2                	mov    edx,eax
c0011eba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ebe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011ec1:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c0011ec7:	83 ec 0c             	sub    esp,0xc
c0011eca:	6a 01                	push   0x1
c0011ecc:	e8 4e f3 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011ed1:	83 c4 10             	add    esp,0x10
c0011ed4:	89 c2                	mov    edx,eax
c0011ed6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eda:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011edd:	83 ec 0c             	sub    esp,0xc
c0011ee0:	6a 03                	push   0x3
c0011ee2:	6a 01                	push   0x1
c0011ee4:	52                   	push   edx
c0011ee5:	50                   	push   eax
c0011ee6:	53                   	push   ebx
c0011ee7:	e8 e6 fd ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011eec:	83 c4 20             	add    esp,0x20
c0011eef:	89 c2                	mov    edx,eax
c0011ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ef8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f00:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f08:	7f 1c                	jg     c0011f26 <VAS::VAS(bool)+0xa0>
c0011f0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f0e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f15:	c1 e2 02             	shl    edx,0x2
c0011f18:	01 d0                	add    eax,edx
c0011f1a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f20:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f24:	eb da                	jmp    c0011f00 <VAS::VAS(bool)+0x7a>
c0011f26:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f2e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f36:	7f 7a                	jg     c0011fb2 <VAS::VAS(bool)+0x12c>
c0011f38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f3c:	2d 00 02 00 00       	sub    eax,0x200
c0011f41:	c1 e0 0c             	shl    eax,0xc
c0011f44:	83 c8 03             	or     eax,0x3
c0011f47:	89 c2                	mov    edx,eax
c0011f49:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011f4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f54:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f5a:	83 e0 10             	and    eax,0x10
c0011f5d:	84 c0                	test   al,al
c0011f5f:	74 07                	je     c0011f68 <VAS::VAS(bool)+0xe2>
c0011f61:	b8 00 01 00 00       	mov    eax,0x100
c0011f66:	eb 05                	jmp    c0011f6d <VAS::VAS(bool)+0xe7>
c0011f68:	b8 00 00 00 00       	mov    eax,0x0
c0011f6d:	09 d0                	or     eax,edx
c0011f6f:	89 c1                	mov    ecx,eax
c0011f71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f75:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f7c:	c1 e2 02             	shl    edx,0x2
c0011f7f:	01 d0                	add    eax,edx
c0011f81:	89 ca                	mov    edx,ecx
c0011f83:	89 10                	mov    DWORD PTR [eax],edx
c0011f85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f89:	2d 40 03 00 00       	sub    eax,0x340
c0011f8e:	83 f8 7f             	cmp    eax,0x7f
c0011f91:	77 16                	ja     c0011fa9 <VAS::VAS(bool)+0x123>
c0011f93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f9e:	c1 e2 02             	shl    edx,0x2
c0011fa1:	01 d0                	add    eax,edx
c0011fa3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fa9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011fad:	e9 7c ff ff ff       	jmp    c0011f2e <VAS::VAS(bool)+0xa8>
c0011fb2:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011fb7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fbd:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fc3:	83 e0 10             	and    eax,0x10
c0011fc6:	84 c0                	test   al,al
c0011fc8:	74 07                	je     c0011fd1 <VAS::VAS(bool)+0x14b>
c0011fca:	b8 03 41 00 00       	mov    eax,0x4103
c0011fcf:	eb 05                	jmp    c0011fd6 <VAS::VAS(bool)+0x150>
c0011fd1:	b8 03 40 00 00       	mov    eax,0x4003
c0011fd6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fda:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011fdd:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011fe3:	89 02                	mov    DWORD PTR [edx],eax
c0011fe5:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011fea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ff0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011ff6:	83 ec 08             	sub    esp,0x8
c0011ff9:	50                   	push   eax
c0011ffa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ffe:	e8 b3 fc ff ff       	call   c0011cb6 <VAS::setCPUSpecific(unsigned long)>
c0012003:	83 c4 10             	add    esp,0x10
c0012006:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001200a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001200d:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0012012:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012018:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001201e:	83 e0 10             	and    eax,0x10
c0012021:	84 c0                	test   al,al
c0012023:	74 07                	je     c001202c <VAS::VAS(bool)+0x1a6>
c0012025:	b8 00 01 00 00       	mov    eax,0x100
c001202a:	eb 05                	jmp    c0012031 <VAS::VAS(bool)+0x1ab>
c001202c:	b8 00 00 00 00       	mov    eax,0x0
c0012031:	09 c2                	or     edx,eax
c0012033:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012037:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001203a:	05 fc 0f 00 00       	add    eax,0xffc
c001203f:	83 ca 03             	or     edx,0x3
c0012042:	89 10                	mov    DWORD PTR [eax],edx
c0012044:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0012049:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001204f:	83 ec 0c             	sub    esp,0xc
c0012052:	50                   	push   eax
c0012053:	e8 c4 1d 00 00       	call   c0013e1c <Device::getName()>
c0012058:	83 c4 10             	add    esp,0x10
c001205b:	83 ec 08             	sub    esp,0x8
c001205e:	68 79 a5 02 c0       	push   0xc002a579
c0012063:	50                   	push   eax
c0012064:	e8 2f e8 fe ff       	call   c0000898 <strcmp>
c0012069:	83 c4 10             	add    esp,0x10
c001206c:	85 c0                	test   eax,eax
c001206e:	0f 94 c0             	sete   al
c0012071:	84 c0                	test   al,al
c0012073:	0f 84 87 00 00 00    	je     c0012100 <VAS::VAS(bool)+0x27a>
c0012079:	fa                   	cli    
c001207a:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001207f:	40                   	inc    eax
c0012080:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0012085:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001208a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012090:	05 7c 09 00 00       	add    eax,0x97c
c0012095:	83 ec 0c             	sub    esp,0xc
c0012098:	50                   	push   eax
c0012099:	e8 80 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001209e:	83 c4 10             	add    esp,0x10
c00120a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a6:	89 c3                	mov    ebx,eax
c00120a8:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00120ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120b3:	05 7c 09 00 00       	add    eax,0x97c
c00120b8:	83 ec 0c             	sub    esp,0xc
c00120bb:	50                   	push   eax
c00120bc:	e8 5d cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120c1:	83 c4 10             	add    esp,0x10
c00120c4:	83 ec 08             	sub    esp,0x8
c00120c7:	50                   	push   eax
c00120c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120cc:	e8 75 f5 ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c00120d1:	83 c4 10             	add    esp,0x10
c00120d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00120d6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120db:	6a 11                	push   0x11
c00120dd:	53                   	push   ebx
c00120de:	50                   	push   eax
c00120df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120e3:	e8 f4 f8 ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c00120e8:	83 c4 10             	add    esp,0x10
c00120eb:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00120f0:	48                   	dec    eax
c00120f1:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c00120f6:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00120fb:	85 c0                	test   eax,eax
c00120fd:	75 01                	jne    c0012100 <VAS::VAS(bool)+0x27a>
c00120ff:	fb                   	sti    
c0012100:	90                   	nop
c0012101:	83 c4 28             	add    esp,0x28
c0012104:	5b                   	pop    ebx
c0012105:	c3                   	ret    

c0012106 <VAS::evict(unsigned long)>:
c0012106:	55                   	push   ebp
c0012107:	57                   	push   edi
c0012108:	56                   	push   esi
c0012109:	53                   	push   ebx
c001210a:	83 ec 1c             	sub    esp,0x1c
c001210d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012111:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012115:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012119:	e8 42 f2 ff ff       	call   c0011360 <Virt::allocateSwapfilePage()>
c001211e:	89 c7                	mov    edi,eax
c0012120:	a1 6c c9 02 c0       	mov    eax,ds:0xc002c96c
c0012125:	85 c0                	test   eax,eax
c0012127:	7e 3d                	jle    c0012166 <VAS::evict(unsigned long)+0x60>
c0012129:	89 ee                	mov    esi,ebp
c001212b:	31 db                	xor    ebx,ebx
c001212d:	83 ec 0c             	sub    esp,0xc
c0012130:	57                   	push   edi
c0012131:	e8 18 f2 ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c0012136:	89 34 24             	mov    DWORD PTR [esp],esi
c0012139:	01 d8                	add    eax,ebx
c001213b:	6a 01                	push   0x1
c001213d:	31 d2                	xor    edx,edx
c001213f:	43                   	inc    ebx
c0012140:	52                   	push   edx
c0012141:	81 c6 00 02 00 00    	add    esi,0x200
c0012147:	50                   	push   eax
c0012148:	0f be 05 78 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c978
c001214f:	ff 34 85 bc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2144]
c0012156:	e8 49 3f 00 00       	call   c00160a4 <LogicalDisk::write(unsigned long long, int, void*)>
c001215b:	83 c4 20             	add    esp,0x20
c001215e:	39 1d 6c c9 02 c0    	cmp    DWORD PTR ds:0xc002c96c,ebx
c0012164:	7f c7                	jg     c001212d <VAS::evict(unsigned long)+0x27>
c0012166:	83 ec 08             	sub    esp,0x8
c0012169:	c1 e7 0b             	shl    edi,0xb
c001216c:	55                   	push   ebp
c001216d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012171:	e8 d0 f4 ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c0012176:	5a                   	pop    edx
c0012177:	89 c6                	mov    esi,eax
c0012179:	59                   	pop    ecx
c001217a:	ff 30                	push   DWORD PTR [eax]
c001217c:	68 87 a5 02 c0       	push   0xc002a587
c0012181:	e8 5d 05 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0012186:	8b 16                	mov    edx,DWORD PTR [esi]
c0012188:	89 d3                	mov    ebx,edx
c001218a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012190:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012196:	09 d7                	or     edi,edx
c0012198:	89 3e                	mov    DWORD PTR [esi],edi
c001219a:	5e                   	pop    esi
c001219b:	58                   	pop    eax
c001219c:	57                   	push   edi
c001219d:	68 a0 a5 02 c0       	push   0xc002a5a0
c00121a2:	e8 3c 05 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00121a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121aa:	ff 05 28 db 02 c0    	inc    DWORD PTR ds:0xc002db28
c00121b0:	e8 6f d7 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00121b5:	0f 20 d8             	mov    eax,cr3
c00121b8:	0f 22 d8             	mov    cr3,eax
c00121bb:	ff 35 28 db 02 c0    	push   DWORD PTR ds:0xc002db28
c00121c1:	55                   	push   ebp
c00121c2:	53                   	push   ebx
c00121c3:	68 80 a4 02 c0       	push   0xc002a480
c00121c8:	e8 16 05 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00121cd:	a1 24 db 02 c0       	mov    eax,ds:0xc002db24
c00121d2:	c7 44 24 50 b9 a5 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a5b9
c00121da:	8d 50 01             	lea    edx,[eax+0x1]
c00121dd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00121e1:	89 15 24 db 02 c0    	mov    DWORD PTR ds:0xc002db24,edx
c00121e7:	83 c4 3c             	add    esp,0x3c
c00121ea:	5b                   	pop    ebx
c00121eb:	5e                   	pop    esi
c00121ec:	5f                   	pop    edi
c00121ed:	5d                   	pop    ebp
c00121ee:	e9 f0 04 00 00       	jmp    c00126e3 <Dbg::kprintf(char const*, ...)>
c00121f3:	90                   	nop

c00121f4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00121f4:	55                   	push   ebp
c00121f5:	57                   	push   edi
c00121f6:	56                   	push   esi
c00121f7:	53                   	push   ebx
c00121f8:	83 ec 24             	sub    esp,0x24
c00121fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012203:	68 ca a5 02 c0       	push   0xc002a5ca
c0012208:	e8 d6 04 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001220d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0012211:	58                   	pop    eax
c0012212:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012218:	5a                   	pop    edx
c0012219:	53                   	push   ebx
c001221a:	56                   	push   esi
c001221b:	e8 26 f4 ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c0012220:	59                   	pop    ecx
c0012221:	89 c5                	mov    ebp,eax
c0012223:	5f                   	pop    edi
c0012224:	ff 30                	push   DWORD PTR [eax]
c0012226:	68 dd a5 02 c0       	push   0xc002a5dd
c001222b:	e8 b3 04 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0012230:	83 c4 10             	add    esp,0x10
c0012233:	85 db                	test   ebx,ebx
c0012235:	74 1d                	je     c0012254 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0012237:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
c001223a:	31 c0                	xor    eax,eax
c001223c:	89 fa                	mov    edx,edi
c001223e:	81 e2 01 04 00 00    	and    edx,0x401
c0012244:	81 fa 00 04 00 00    	cmp    edx,0x400
c001224a:	74 12                	je     c001225e <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c001224c:	83 c4 1c             	add    esp,0x1c
c001224f:	5b                   	pop    ebx
c0012250:	5e                   	pop    esi
c0012251:	5f                   	pop    edi
c0012252:	5d                   	pop    ebp
c0012253:	c3                   	ret    
c0012254:	83 c4 1c             	add    esp,0x1c
c0012257:	31 c0                	xor    eax,eax
c0012259:	5b                   	pop    ebx
c001225a:	5e                   	pop    esi
c001225b:	5f                   	pop    edi
c001225c:	5d                   	pop    ebp
c001225d:	c3                   	ret    
c001225e:	83 ec 08             	sub    esp,0x8
c0012261:	c1 ef 0b             	shr    edi,0xb
c0012264:	57                   	push   edi
c0012265:	68 eb a5 02 c0       	push   0xc002a5eb
c001226a:	e8 74 04 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001226f:	e8 21 d7 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012274:	59                   	pop    ecx
c0012275:	5a                   	pop    edx
c0012276:	50                   	push   eax
c0012277:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001227b:	68 f6 a5 02 c0       	push   0xc002a5f6
c0012280:	e8 5e 04 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0012285:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012289:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001228c:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012292:	09 d0                	or     eax,edx
c0012294:	0d 01 08 00 00       	or     eax,0x801
c0012299:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001229c:	59                   	pop    ecx
c001229d:	5d                   	pop    ebp
c001229e:	50                   	push   eax
c001229f:	68 0b a6 02 c0       	push   0xc002a60b
c00122a4:	e8 3a 04 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00122a9:	0f 20 d8             	mov    eax,cr3
c00122ac:	83 c4 0c             	add    esp,0xc
c00122af:	56                   	push   esi
c00122b0:	50                   	push   eax
c00122b1:	68 23 a6 02 c0       	push   0xc002a623
c00122b6:	e8 28 04 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00122bb:	c7 04 24 3b a6 02 c0 	mov    DWORD PTR [esp],0xc002a63b
c00122c2:	e8 1c 04 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00122c7:	83 c4 10             	add    esp,0x10
c00122ca:	a1 6c c9 02 c0       	mov    eax,ds:0xc002c96c
c00122cf:	85 c0                	test   eax,eax
c00122d1:	7e 3d                	jle    c0012310 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c00122d3:	89 dd                	mov    ebp,ebx
c00122d5:	31 f6                	xor    esi,esi
c00122d7:	83 ec 0c             	sub    esp,0xc
c00122da:	57                   	push   edi
c00122db:	e8 6e f0 ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c00122e0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122e3:	01 f0                	add    eax,esi
c00122e5:	6a 01                	push   0x1
c00122e7:	31 d2                	xor    edx,edx
c00122e9:	46                   	inc    esi
c00122ea:	52                   	push   edx
c00122eb:	81 c5 00 02 00 00    	add    ebp,0x200
c00122f1:	50                   	push   eax
c00122f2:	0f be 05 78 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c978
c00122f9:	ff 34 85 bc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2144]
c0012300:	e8 33 3d 00 00       	call   c0016038 <LogicalDisk::read(unsigned long long, int, void*)>
c0012305:	83 c4 20             	add    esp,0x20
c0012308:	39 35 6c c9 02 c0    	cmp    DWORD PTR ds:0xc002c96c,esi
c001230e:	7f c7                	jg     c00122d7 <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c0012310:	a1 28 db 02 c0       	mov    eax,ds:0xc002db28
c0012315:	48                   	dec    eax
c0012316:	52                   	push   edx
c0012317:	a3 28 db 02 c0       	mov    ds:0xc002db28,eax
c001231c:	50                   	push   eax
c001231d:	53                   	push   ebx
c001231e:	68 4b a6 02 c0       	push   0xc002a64b
c0012323:	e8 bb 03 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0012328:	89 3c 24             	mov    DWORD PTR [esp],edi
c001232b:	e8 00 f0 ff ff       	call   c0011330 <Virt::freeSwapfilePage(unsigned long)>
c0012330:	c7 04 24 60 a6 02 c0 	mov    DWORD PTR [esp],0xc002a660
c0012337:	e8 a7 03 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001233c:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0012341:	83 c4 10             	add    esp,0x10
c0012344:	48                   	dec    eax
c0012345:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001234a:	85 c0                	test   eax,eax
c001234c:	74 2d                	je     c001237b <VAS::tryLoadBackOffDisk(unsigned long)+0x187>
c001234e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012352:	25 ff 0f 00 00       	and    eax,0xfff
c0012357:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001235c:	77 20                	ja     c001237e <VAS::tryLoadBackOffDisk(unsigned long)+0x18a>
c001235e:	0f 20 d8             	mov    eax,cr3
c0012361:	0f 22 d8             	mov    cr3,eax
c0012364:	83 ec 0c             	sub    esp,0xc
c0012367:	68 86 a6 02 c0       	push   0xc002a686
c001236c:	e8 72 03 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0012371:	83 c4 10             	add    esp,0x10
c0012374:	b0 01                	mov    al,0x1
c0012376:	e9 d1 fe ff ff       	jmp    c001224c <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c001237b:	fb                   	sti    
c001237c:	eb d0                	jmp    c001234e <VAS::tryLoadBackOffDisk(unsigned long)+0x15a>
c001237e:	83 ec 0c             	sub    esp,0xc
c0012381:	68 76 a6 02 c0       	push   0xc002a676
c0012386:	e8 58 03 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001238b:	83 c4 10             	add    esp,0x10
c001238e:	eb ce                	jmp    c001235e <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>

c0012390 <VAS::scanForEviction()>:
c0012390:	55                   	push   ebp
c0012391:	31 ed                	xor    ebp,ebp
c0012393:	57                   	push   edi
c0012394:	56                   	push   esi
c0012395:	53                   	push   ebx
c0012396:	83 ec 0c             	sub    esp,0xc
c0012399:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001239d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00123a0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123a6:	75 0e                	jne    c00123b6 <VAS::scanForEviction()+0x26>
c00123a8:	89 da                	mov    edx,ebx
c00123aa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123ad:	c1 ea 16             	shr    edx,0x16
c00123b0:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123b4:	74 4e                	je     c0012404 <VAS::scanForEviction()+0x74>
c00123b6:	53                   	push   ebx
c00123b7:	56                   	push   esi
c00123b8:	e8 89 f2 ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c00123bd:	5a                   	pop    edx
c00123be:	8b 38                	mov    edi,DWORD PTR [eax]
c00123c0:	59                   	pop    ecx
c00123c1:	89 fa                	mov    edx,edi
c00123c3:	81 e2 01 08 00 00    	and    edx,0x801
c00123c9:	81 fa 01 08 00 00    	cmp    edx,0x801
c00123cf:	74 3e                	je     c001240f <VAS::scanForEviction()+0x7f>
c00123d1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123d7:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c00123dd:	76 2b                	jbe    c001240a <VAS::scanForEviction()+0x7a>
c00123df:	45                   	inc    ebp
c00123e0:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00123e7:	83 fd 04             	cmp    ebp,0x4
c00123ea:	74 35                	je     c0012421 <VAS::scanForEviction()+0x91>
c00123ec:	31 db                	xor    ebx,ebx
c00123ee:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123f4:	75 c0                	jne    c00123b6 <VAS::scanForEviction()+0x26>
c00123f6:	89 da                	mov    edx,ebx
c00123f8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123fb:	c1 ea 16             	shr    edx,0x16
c00123fe:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012402:	75 b2                	jne    c00123b6 <VAS::scanForEviction()+0x26>
c0012404:	81 c3 00 00 40 00    	add    ebx,0x400000
c001240a:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001240d:	eb 91                	jmp    c00123a0 <VAS::scanForEviction()+0x10>
c001240f:	f7 c7 20 00 00 00    	test   edi,0x20
c0012415:	74 22                	je     c0012439 <VAS::scanForEviction()+0xa9>
c0012417:	83 e7 df             	and    edi,0xffffffdf
c001241a:	89 38                	mov    DWORD PTR [eax],edi
c001241c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001241f:	eb b0                	jmp    c00123d1 <VAS::scanForEviction()+0x41>
c0012421:	83 ec 0c             	sub    esp,0xc
c0012424:	68 b0 a4 02 c0       	push   0xc002a4b0
c0012429:	e8 21 7a 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c001242e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012431:	83 c4 10             	add    esp,0x10
c0012434:	e9 67 ff ff ff       	jmp    c00123a0 <VAS::scanForEviction()+0x10>
c0012439:	83 ec 08             	sub    esp,0x8
c001243c:	53                   	push   ebx
c001243d:	56                   	push   esi
c001243e:	e8 c3 fc ff ff       	call   c0012106 <VAS::evict(unsigned long)>
c0012443:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001244a:	89 f8                	mov    eax,edi
c001244c:	83 c4 1c             	add    esp,0x1c
c001244f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012454:	5b                   	pop    ebx
c0012455:	5e                   	pop    esi
c0012456:	5f                   	pop    edi
c0012457:	5d                   	pop    ebp
c0012458:	c3                   	ret    

c0012459 <mapVASFirstTime>:
c0012459:	55                   	push   ebp
c001245a:	57                   	push   edi
c001245b:	56                   	push   esi
c001245c:	53                   	push   ebx
c001245d:	83 ec 0c             	sub    esp,0xc
c0012460:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012465:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012468:	4a                   	dec    edx
c0012469:	0f 84 fe 00 00 00    	je     c001256d <mapVASFirstTime+0x114>
c001246f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012472:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012475:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001247a:	c1 e5 15             	shl    ebp,0x15
c001247d:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012482:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012488:	29 eb                	sub    ebx,ebp
c001248a:	29 ef                	sub    edi,ebp
c001248c:	83 ec 08             	sub    esp,0x8
c001248f:	53                   	push   ebx
c0012490:	68 ad a6 02 c0       	push   0xc002a6ad
c0012495:	e8 49 02 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001249a:	e8 f6 d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c001249f:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c00124a6:	6a 01                	push   0x1
c00124a8:	53                   	push   ebx
c00124a9:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00124af:	50                   	push   eax
c00124b0:	56                   	push   esi
c00124b1:	e8 1c f8 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124b6:	83 c4 20             	add    esp,0x20
c00124b9:	39 fb                	cmp    ebx,edi
c00124bb:	75 cf                	jne    c001248c <mapVASFirstTime+0x33>
c00124bd:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00124c2:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00124c7:	29 eb                	sub    ebx,ebp
c00124c9:	29 ef                	sub    edi,ebp
c00124cb:	83 ec 08             	sub    esp,0x8
c00124ce:	53                   	push   ebx
c00124cf:	68 c9 a6 02 c0       	push   0xc002a6c9
c00124d4:	e8 0a 02 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00124d9:	58                   	pop    eax
c00124da:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124de:	5a                   	pop    edx
c00124df:	19 c0                	sbb    eax,eax
c00124e1:	83 e0 04             	and    eax,0x4
c00124e4:	05 03 04 00 00       	add    eax,0x403
c00124e9:	50                   	push   eax
c00124ea:	68 15 a6 02 c0       	push   0xc002a615
c00124ef:	e8 ef 01 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00124f4:	e8 9c d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c00124f9:	59                   	pop    ecx
c00124fa:	89 c5                	mov    ebp,eax
c00124fc:	58                   	pop    eax
c00124fd:	55                   	push   ebp
c00124fe:	68 dd a6 02 c0       	push   0xc002a6dd
c0012503:	e8 db 01 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0012508:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001250c:	19 d2                	sbb    edx,edx
c001250e:	83 e2 04             	and    edx,0x4
c0012511:	81 c2 03 0c 00 00    	add    edx,0xc03
c0012517:	89 14 24             	mov    DWORD PTR [esp],edx
c001251a:	6a 01                	push   0x1
c001251c:	53                   	push   ebx
c001251d:	55                   	push   ebp
c001251e:	56                   	push   esi
c001251f:	e8 ae f7 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012524:	83 c4 18             	add    esp,0x18
c0012527:	53                   	push   ebx
c0012528:	56                   	push   esi
c0012529:	e8 18 f1 ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c001252e:	5a                   	pop    edx
c001252f:	59                   	pop    ecx
c0012530:	ff 30                	push   DWORD PTR [eax]
c0012532:	68 f9 a6 02 c0       	push   0xc002a6f9
c0012537:	e8 a7 01 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001253c:	0f 20 d8             	mov    eax,cr3
c001253f:	83 c4 0c             	add    esp,0xc
c0012542:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012548:	56                   	push   esi
c0012549:	50                   	push   eax
c001254a:	68 23 a6 02 c0       	push   0xc002a623
c001254f:	e8 8f 01 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0012554:	83 c4 10             	add    esp,0x10
c0012557:	39 df                	cmp    edi,ebx
c0012559:	0f 85 6c ff ff ff    	jne    c00124cb <mapVASFirstTime+0x72>
c001255f:	0f 20 d8             	mov    eax,cr3
c0012562:	0f 22 d8             	mov    cr3,eax
c0012565:	83 c4 0c             	add    esp,0xc
c0012568:	5b                   	pop    ebx
c0012569:	5e                   	pop    esi
c001256a:	5f                   	pop    edi
c001256b:	5d                   	pop    ebp
c001256c:	c3                   	ret    
c001256d:	83 ec 0c             	sub    esp,0xc
c0012570:	68 94 a6 02 c0       	push   0xc002a694
c0012575:	e8 69 01 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	83 c4 0c             	add    esp,0xc
c0012580:	5b                   	pop    ebx
c0012581:	5e                   	pop    esi
c0012582:	5f                   	pop    edi
c0012583:	5d                   	pop    ebp
c0012584:	c3                   	ret    

c0012585 <__cxa_atexit>:
c0012585:	31 c0                	xor    eax,eax
c0012587:	c3                   	ret    

c0012588 <__cxa_finalize>:
c0012588:	c3                   	ret    

c0012589 <__stack_chk_fail>:
c0012589:	55                   	push   ebp
c001258a:	89 e5                	mov    ebp,esp
c001258c:	83 ec 14             	sub    esp,0x14
c001258f:	68 04 a7 02 c0       	push   0xc002a704
c0012594:	e8 4a 01 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0012599:	58                   	pop    eax
c001259a:	5a                   	pop    edx
c001259b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001259e:	68 54 a7 02 c0       	push   0xc002a754
c00125a3:	e8 3b 01 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00125a8:	59                   	pop    ecx
c00125a9:	58                   	pop    eax
c00125aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125ad:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125b0:	68 54 a7 02 c0       	push   0xc002a754
c00125b5:	e8 29 01 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00125ba:	5a                   	pop    edx
c00125bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125be:	59                   	pop    ecx
c00125bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00125c1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125c4:	68 54 a7 02 c0       	push   0xc002a754
c00125c9:	e8 15 01 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00125ce:	5a                   	pop    edx
c00125cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125d2:	59                   	pop    ecx
c00125d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00125d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00125d7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125da:	68 54 a7 02 c0       	push   0xc002a754
c00125df:	e8 ff 00 00 00       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00125e4:	c7 04 24 5c a7 02 c0 	mov    DWORD PTR [esp],0xc002a75c
c00125eb:	e8 5f 78 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c00125f0:	83 c4 10             	add    esp,0x10
c00125f3:	c9                   	leave  
c00125f4:	c3                   	ret    

c00125f5 <__cxa_pure_virtual>:
c00125f5:	83 ec 18             	sub    esp,0x18
c00125f8:	68 74 a7 02 c0       	push   0xc002a774
c00125fd:	e8 4d 78 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0012602:	83 c4 1c             	add    esp,0x1c
c0012605:	c3                   	ret    

c0012606 <operator new[](unsigned long)>:
c0012606:	e9 8e cf ff ff       	jmp    c000f599 <malloc>

c001260b <operator delete(void*, unsigned long)>:
c001260b:	e9 a9 cf ff ff       	jmp    c000f5b9 <rfree>

c0012610 <operator delete[](void*)>:
c0012610:	e9 a4 cf ff ff       	jmp    c000f5b9 <rfree>

c0012615 <operator delete[](void*, unsigned long)>:
c0012615:	e9 9f cf ff ff       	jmp    c000f5b9 <rfree>

c001261a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001261a:	55                   	push   ebp
c001261b:	b9 11 00 00 00       	mov    ecx,0x11
c0012620:	57                   	push   edi
c0012621:	56                   	push   esi
c0012622:	be 9a a1 02 c0       	mov    esi,0xc002a19a
c0012627:	53                   	push   ebx
c0012628:	83 ec 20             	sub    esp,0x20
c001262b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001262f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012633:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012637:	fc                   	cld    
c0012638:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001263a:	89 ee                	mov    esi,ebp
c001263c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012640:	eb 02                	jmp    c0012644 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012642:	89 c6                	mov    esi,eax
c0012644:	31 d2                	xor    edx,edx
c0012646:	41                   	inc    ecx
c0012647:	89 f0                	mov    eax,esi
c0012649:	f7 f3                	div    ebx
c001264b:	39 de                	cmp    esi,ebx
c001264d:	73 f3                	jae    c0012642 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c001264f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012652:	eb 02                	jmp    c0012656 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012654:	89 c5                	mov    ebp,eax
c0012656:	31 d2                	xor    edx,edx
c0012658:	49                   	dec    ecx
c0012659:	89 e8                	mov    eax,ebp
c001265b:	f7 f3                	div    ebx
c001265d:	39 dd                	cmp    ebp,ebx
c001265f:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012663:	88 11                	mov    BYTE PTR [ecx],dl
c0012665:	73 ed                	jae    c0012654 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012667:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001266b:	83 c4 20             	add    esp,0x20
c001266e:	5b                   	pop    ebx
c001266f:	5e                   	pop    esi
c0012670:	5f                   	pop    edi
c0012671:	5d                   	pop    ebp
c0012672:	c3                   	ret    

c0012673 <Dbg::logc(char)>:
c0012673:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012677:	ba fd 03 00 00       	mov    edx,0x3fd
c001267c:	ec                   	in     al,dx
c001267d:	a8 20                	test   al,0x20
c001267f:	74 fb                	je     c001267c <Dbg::logc(char)+0x9>
c0012681:	ba f8 03 00 00       	mov    edx,0x3f8
c0012686:	88 c8                	mov    al,cl
c0012688:	ee                   	out    dx,al
c0012689:	c3                   	ret    

c001268a <Dbg::logs(char*)>:
c001268a:	53                   	push   ebx
c001268b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001268f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012692:	84 c0                	test   al,al
c0012694:	74 0f                	je     c00126a5 <Dbg::logs(char*)+0x1b>
c0012696:	50                   	push   eax
c0012697:	43                   	inc    ebx
c0012698:	e8 d6 ff ff ff       	call   c0012673 <Dbg::logc(char)>
c001269d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00126a0:	5a                   	pop    edx
c00126a1:	84 c0                	test   al,al
c00126a3:	75 f1                	jne    c0012696 <Dbg::logs(char*)+0xc>
c00126a5:	5b                   	pop    ebx
c00126a6:	c3                   	ret    

c00126a7 <Dbg::logWriteInt(unsigned int)>:
c00126a7:	83 ec 10             	sub    esp,0x10
c00126aa:	6a 0a                	push   0xa
c00126ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126b0:	50                   	push   eax
c00126b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126b5:	e8 60 ff ff ff       	call   c001261a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126ba:	50                   	push   eax
c00126bb:	e8 ca ff ff ff       	call   c001268a <Dbg::logs(char*)>
c00126c0:	83 c4 20             	add    esp,0x20
c00126c3:	c3                   	ret    

c00126c4 <Dbg::logWriteIntBase(unsigned int, int)>:
c00126c4:	83 ec 10             	sub    esp,0x10
c00126c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126cb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126cf:	50                   	push   eax
c00126d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126d4:	e8 41 ff ff ff       	call   c001261a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126d9:	50                   	push   eax
c00126da:	e8 ab ff ff ff       	call   c001268a <Dbg::logs(char*)>
c00126df:	83 c4 20             	add    esp,0x20
c00126e2:	c3                   	ret    

c00126e3 <Dbg::kprintf(char const*, ...)>:
c00126e3:	55                   	push   ebp
c00126e4:	57                   	push   edi
c00126e5:	56                   	push   esi
c00126e6:	53                   	push   ebx
c00126e7:	83 ec 0c             	sub    esp,0xc
c00126ea:	8d 44 24 24          	lea    eax,[esp+0x24]
c00126ee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126f6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126f9:	84 c0                	test   al,al
c00126fb:	74 4a                	je     c0012747 <Dbg::kprintf(char const*, ...)+0x64>
c00126fd:	31 db                	xor    ebx,ebx
c00126ff:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012702:	3c 25                	cmp    al,0x25
c0012704:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012707:	0f 85 e4 00 00 00    	jne    c00127f1 <Dbg::kprintf(char const*, ...)+0x10e>
c001270d:	83 c3 02             	add    ebx,0x2
c0012710:	8a 07                	mov    al,BYTE PTR [edi]
c0012712:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012715:	83 e8 25             	sub    eax,0x25
c0012718:	3c 53                	cmp    al,0x53
c001271a:	0f 87 ba 00 00 00    	ja     c00127da <Dbg::kprintf(char const*, ...)+0xf7>
c0012720:	0f b6 c0             	movzx  eax,al
c0012723:	ff 24 85 88 a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5878]
c001272a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001272e:	89 c8                	mov    eax,ecx
c0012730:	83 c1 04             	add    ecx,0x4
c0012733:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012737:	ff 30                	push   DWORD PTR [eax]
c0012739:	e8 69 ff ff ff       	call   c00126a7 <Dbg::logWriteInt(unsigned int)>
c001273e:	5f                   	pop    edi
c001273f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012743:	84 c0                	test   al,al
c0012745:	75 b8                	jne    c00126ff <Dbg::kprintf(char const*, ...)+0x1c>
c0012747:	83 c4 0c             	add    esp,0xc
c001274a:	5b                   	pop    ebx
c001274b:	5e                   	pop    esi
c001274c:	5f                   	pop    edi
c001274d:	5d                   	pop    ebp
c001274e:	c3                   	ret    
c001274f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012753:	89 c8                	mov    eax,ecx
c0012755:	83 c1 04             	add    ecx,0x4
c0012758:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001275c:	ff 30                	push   DWORD PTR [eax]
c001275e:	e8 27 ff ff ff       	call   c001268a <Dbg::logs(char*)>
c0012763:	58                   	pop    eax
c0012764:	eb d9                	jmp    c001273f <Dbg::kprintf(char const*, ...)+0x5c>
c0012766:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001276a:	89 d0                	mov    eax,edx
c001276c:	83 c2 04             	add    edx,0x4
c001276f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012773:	ff 30                	push   DWORD PTR [eax]
c0012775:	e8 2d ff ff ff       	call   c00126a7 <Dbg::logWriteInt(unsigned int)>
c001277a:	58                   	pop    eax
c001277b:	eb c2                	jmp    c001273f <Dbg::kprintf(char const*, ...)+0x5c>
c001277d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012781:	89 d0                	mov    eax,edx
c0012783:	83 c2 04             	add    edx,0x4
c0012786:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001278d:	50                   	push   eax
c001278e:	e8 e0 fe ff ff       	call   c0012673 <Dbg::logc(char)>
c0012793:	58                   	pop    eax
c0012794:	eb a9                	jmp    c001273f <Dbg::kprintf(char const*, ...)+0x5c>
c0012796:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001279a:	89 c8                	mov    eax,ecx
c001279c:	83 c1 04             	add    ecx,0x4
c001279f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127a3:	6a 10                	push   0x10
c00127a5:	ff 30                	push   DWORD PTR [eax]
c00127a7:	e8 18 ff ff ff       	call   c00126c4 <Dbg::logWriteIntBase(unsigned int, int)>
c00127ac:	59                   	pop    ecx
c00127ad:	5f                   	pop    edi
c00127ae:	eb 8f                	jmp    c001273f <Dbg::kprintf(char const*, ...)+0x5c>
c00127b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127b4:	89 d0                	mov    eax,edx
c00127b6:	83 c2 08             	add    edx,0x8
c00127b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127bd:	6a 10                	push   0x10
c00127bf:	ff 30                	push   DWORD PTR [eax]
c00127c1:	e8 fe fe ff ff       	call   c00126c4 <Dbg::logWriteIntBase(unsigned int, int)>
c00127c6:	58                   	pop    eax
c00127c7:	5a                   	pop    edx
c00127c8:	e9 72 ff ff ff       	jmp    c001273f <Dbg::kprintf(char const*, ...)+0x5c>
c00127cd:	6a 25                	push   0x25
c00127cf:	e8 9f fe ff ff       	call   c0012673 <Dbg::logc(char)>
c00127d4:	58                   	pop    eax
c00127d5:	e9 65 ff ff ff       	jmp    c001273f <Dbg::kprintf(char const*, ...)+0x5c>
c00127da:	6a 25                	push   0x25
c00127dc:	e8 92 fe ff ff       	call   c0012673 <Dbg::logc(char)>
c00127e1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00127e4:	50                   	push   eax
c00127e5:	e8 89 fe ff ff       	call   c0012673 <Dbg::logc(char)>
c00127ea:	5a                   	pop    edx
c00127eb:	59                   	pop    ecx
c00127ec:	e9 4e ff ff ff       	jmp    c001273f <Dbg::kprintf(char const*, ...)+0x5c>
c00127f1:	50                   	push   eax
c00127f2:	89 eb                	mov    ebx,ebp
c00127f4:	e8 7a fe ff ff       	call   c0012673 <Dbg::logc(char)>
c00127f9:	89 fd                	mov    ebp,edi
c00127fb:	58                   	pop    eax
c00127fc:	e9 3e ff ff ff       	jmp    c001273f <Dbg::kprintf(char const*, ...)+0x5c>
c0012801:	90                   	nop

c0012802 <File::read(unsigned long long, void*, int*)>:
c0012802:	53                   	push   ebx
c0012803:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012807:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001280b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012812:	3c 19                	cmp    al,0x19
c0012814:	77 35                	ja     c001284b <File::read(unsigned long long, void*, int*)+0x49>
c0012816:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c001281d:	85 c0                	test   eax,eax
c001281f:	74 2a                	je     c001284b <File::read(unsigned long long, void*, int*)+0x49>
c0012821:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012827:	85 c0                	test   eax,eax
c0012829:	74 20                	je     c001284b <File::read(unsigned long long, void*, int*)+0x49>
c001282b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001282f:	74 21                	je     c0012852 <File::read(unsigned long long, void*, int*)+0x50>
c0012831:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012833:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012837:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001283d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012841:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012845:	5b                   	pop    ebx
c0012846:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012849:	ff e0                	jmp    eax
c001284b:	b8 0b 00 00 00       	mov    eax,0xb
c0012850:	eb 05                	jmp    c0012857 <File::read(unsigned long long, void*, int*)+0x55>
c0012852:	b8 05 00 00 00       	mov    eax,0x5
c0012857:	5b                   	pop    ebx
c0012858:	c3                   	ret    
c0012859:	90                   	nop

c001285a <File::write(unsigned long long, void*, int*)>:
c001285a:	53                   	push   ebx
c001285b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001285f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012863:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001286a:	3c 19                	cmp    al,0x19
c001286c:	77 35                	ja     c00128a3 <File::write(unsigned long long, void*, int*)+0x49>
c001286e:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c0012875:	85 c0                	test   eax,eax
c0012877:	74 2a                	je     c00128a3 <File::write(unsigned long long, void*, int*)+0x49>
c0012879:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001287f:	85 c0                	test   eax,eax
c0012881:	74 20                	je     c00128a3 <File::write(unsigned long long, void*, int*)+0x49>
c0012883:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012887:	74 21                	je     c00128aa <File::write(unsigned long long, void*, int*)+0x50>
c0012889:	8b 08                	mov    ecx,DWORD PTR [eax]
c001288b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001288f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012895:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012899:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001289d:	5b                   	pop    ebx
c001289e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00128a1:	ff e0                	jmp    eax
c00128a3:	b8 0b 00 00 00       	mov    eax,0xb
c00128a8:	eb 05                	jmp    c00128af <File::write(unsigned long long, void*, int*)+0x55>
c00128aa:	b8 05 00 00 00       	mov    eax,0x5
c00128af:	5b                   	pop    ebx
c00128b0:	c3                   	ret    
c00128b1:	90                   	nop

c00128b2 <Directory::read(unsigned long long, void*, int*)>:
c00128b2:	53                   	push   ebx
c00128b3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128bb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128c2:	3c 19                	cmp    al,0x19
c00128c4:	77 35                	ja     c00128fb <Directory::read(unsigned long long, void*, int*)+0x49>
c00128c6:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c00128cd:	85 c0                	test   eax,eax
c00128cf:	74 2a                	je     c00128fb <Directory::read(unsigned long long, void*, int*)+0x49>
c00128d1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128d7:	85 c0                	test   eax,eax
c00128d9:	74 20                	je     c00128fb <Directory::read(unsigned long long, void*, int*)+0x49>
c00128db:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128df:	74 21                	je     c0012902 <Directory::read(unsigned long long, void*, int*)+0x50>
c00128e1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128e7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128f5:	5b                   	pop    ebx
c00128f6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128f9:	ff e0                	jmp    eax
c00128fb:	b8 0b 00 00 00       	mov    eax,0xb
c0012900:	eb 05                	jmp    c0012907 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012902:	b8 05 00 00 00       	mov    eax,0x5
c0012907:	5b                   	pop    ebx
c0012908:	c3                   	ret    
c0012909:	90                   	nop

c001290a <Directory::write(unsigned long long, void*, int*)>:
c001290a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001290e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012915:	b8 0b 00 00 00       	mov    eax,0xb
c001291a:	80 fa 19             	cmp    dl,0x19
c001291d:	77 18                	ja     c0012937 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001291f:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c0012926:	85 d2                	test   edx,edx
c0012928:	74 0d                	je     c0012937 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001292a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012931:	19 c0                	sbb    eax,eax
c0012933:	83 e0 0a             	and    eax,0xa
c0012936:	40                   	inc    eax
c0012937:	c3                   	ret    

c0012938 <File::isAtty()>:
c0012938:	31 c0                	xor    eax,eax
c001293a:	c3                   	ret    
c001293b:	90                   	nop

c001293c <Directory::isAtty()>:
c001293c:	31 c0                	xor    eax,eax
c001293e:	c3                   	ret    
c001293f:	90                   	nop

c0012940 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012940:	b8 0a 00 00 00       	mov    eax,0xa
c0012945:	c3                   	ret    

c0012946 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012946:	b8 0a 00 00 00       	mov    eax,0xa
c001294b:	c3                   	ret    

c001294c <Filesystem::getFileFirstSector(char const*)>:
c001294c:	31 c0                	xor    eax,eax
c001294e:	31 d2                	xor    edx,edx
c0012950:	c3                   	ret    
c0012951:	90                   	nop

c0012952 <File::~File()>:
c0012952:	83 ec 0c             	sub    esp,0xc
c0012955:	ba 48 a9 02 c0       	mov    edx,0xc002a948
c001295a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295e:	89 10                	mov    DWORD PTR [eax],edx
c0012960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012964:	83 ec 0c             	sub    esp,0xc
c0012967:	50                   	push   eax
c0012968:	e8 51 e6 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c001296d:	83 c4 10             	add    esp,0x10
c0012970:	90                   	nop
c0012971:	83 c4 0c             	add    esp,0xc
c0012974:	c3                   	ret    
c0012975:	90                   	nop

c0012976 <File::~File()>:
c0012976:	83 ec 0c             	sub    esp,0xc
c0012979:	83 ec 0c             	sub    esp,0xc
c001297c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012980:	e8 cd ff ff ff       	call   c0012952 <File::~File()>
c0012985:	83 c4 10             	add    esp,0x10
c0012988:	83 ec 08             	sub    esp,0x8
c001298b:	68 14 01 00 00       	push   0x114
c0012990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012994:	e8 72 fc ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0012999:	83 c4 10             	add    esp,0x10
c001299c:	83 c4 0c             	add    esp,0xc
c001299f:	c3                   	ret    

c00129a0 <Directory::~Directory()>:
c00129a0:	83 ec 0c             	sub    esp,0xc
c00129a3:	ba 64 a9 02 c0       	mov    edx,0xc002a964
c00129a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129ac:	89 10                	mov    DWORD PTR [eax],edx
c00129ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129b2:	83 ec 0c             	sub    esp,0xc
c00129b5:	50                   	push   eax
c00129b6:	e8 03 e6 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c00129bb:	83 c4 10             	add    esp,0x10
c00129be:	90                   	nop
c00129bf:	83 c4 0c             	add    esp,0xc
c00129c2:	c3                   	ret    
c00129c3:	90                   	nop

c00129c4 <Directory::~Directory()>:
c00129c4:	83 ec 0c             	sub    esp,0xc
c00129c7:	83 ec 0c             	sub    esp,0xc
c00129ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ce:	e8 cd ff ff ff       	call   c00129a0 <Directory::~Directory()>
c00129d3:	83 c4 10             	add    esp,0x10
c00129d6:	83 ec 08             	sub    esp,0x8
c00129d9:	68 14 01 00 00       	push   0x114
c00129de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129e2:	e8 24 fc ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c00129e7:	83 c4 10             	add    esp,0x10
c00129ea:	83 c4 0c             	add    esp,0xc
c00129ed:	c3                   	ret    

c00129ee <Filesystem::Filesystem()>:
c00129ee:	ba e0 a8 02 c0       	mov    edx,0xc002a8e0
c00129f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129f7:	89 10                	mov    DWORD PTR [eax],edx
c00129f9:	8b 15 34 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db34
c00129ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a03:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a0a:	a3 34 db 02 c0       	mov    ds:0xc002db34,eax
c0012a0f:	90                   	nop
c0012a10:	c3                   	ret    
c0012a11:	90                   	nop

c0012a12 <Filesystem::~Filesystem()>:
c0012a12:	ba e0 a8 02 c0       	mov    edx,0xc002a8e0
c0012a17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a1b:	89 10                	mov    DWORD PTR [eax],edx
c0012a1d:	90                   	nop
c0012a1e:	c3                   	ret    
c0012a1f:	90                   	nop

c0012a20 <Filesystem::~Filesystem()>:
c0012a20:	83 ec 0c             	sub    esp,0xc
c0012a23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012a27:	e8 e6 ff ff ff       	call   c0012a12 <Filesystem::~Filesystem()>
c0012a2c:	83 c4 04             	add    esp,0x4
c0012a2f:	83 ec 08             	sub    esp,0x8
c0012a32:	6a 08                	push   0x8
c0012a34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a38:	e8 ce fb ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0012a3d:	83 c4 10             	add    esp,0x10
c0012a40:	83 c4 0c             	add    esp,0xc
c0012a43:	c3                   	ret    

c0012a44 <Fs::getcwd(Process*, char*, int)>:
c0012a44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a48:	31 c0                	xor    eax,eax
c0012a4a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012a4d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012a51:	7d 15                	jge    c0012a68 <Fs::getcwd(Process*, char*, int)+0x24>
c0012a53:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a57:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012a5e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012a61:	84 c9                	test   cl,cl
c0012a63:	74 06                	je     c0012a6b <Fs::getcwd(Process*, char*, int)+0x27>
c0012a65:	40                   	inc    eax
c0012a66:	eb e2                	jmp    c0012a4a <Fs::getcwd(Process*, char*, int)+0x6>
c0012a68:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012a6b:	31 c0                	xor    eax,eax
c0012a6d:	c3                   	ret    

c0012a6e <Fs::initVFS()>:
c0012a6e:	83 ec 18             	sub    esp,0x18
c0012a71:	6a 08                	push   0x8
c0012a73:	e8 21 cb ff ff       	call   c000f599 <malloc>
c0012a78:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a7b:	e8 d4 de 00 00       	call   c0020954 <FAT::FAT()>
c0012a80:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a87:	e8 0d cb ff ff       	call   c000f599 <malloc>
c0012a8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a8f:	e8 cc f0 00 00       	call   c0021b60 <ISO9660::ISO9660()>
c0012a94:	83 c4 1c             	add    esp,0x1c
c0012a97:	c3                   	ret    

c0012a98 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012a98:	55                   	push   ebp
c0012a99:	57                   	push   edi
c0012a9a:	56                   	push   esi
c0012a9b:	53                   	push   ebx
c0012a9c:	81 ec 10 04 00 00    	sub    esp,0x410
c0012aa2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012aa9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012ab0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ab7:	68 00 04 00 00       	push   0x400
c0012abc:	6a 00                	push   0x0
c0012abe:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012ac2:	56                   	push   esi
c0012ac3:	e8 88 dc fe ff       	call   c0000750 <memset>
c0012ac8:	83 c4 10             	add    esp,0x10
c0012acb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012acf:	75 0b                	jne    c0012adc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012ad1:	50                   	push   eax
c0012ad2:	50                   	push   eax
c0012ad3:	57                   	push   edi
c0012ad4:	56                   	push   esi
c0012ad5:	e8 32 dd fe ff       	call   c000080c <strcpy>
c0012ada:	eb 41                	jmp    c0012b1d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012adc:	8a 07                	mov    al,BYTE PTR [edi]
c0012ade:	3c 5c                	cmp    al,0x5c
c0012ae0:	74 04                	je     c0012ae6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012ae2:	3c 2f                	cmp    al,0x2f
c0012ae4:	75 18                	jne    c0012afe <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012ae6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012ae9:	3c 60                	cmp    al,0x60
c0012aeb:	7e 03                	jle    c0012af0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012aed:	83 e8 20             	sub    eax,0x20
c0012af0:	88 04 24             	mov    BYTE PTR [esp],al
c0012af3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012afa:	50                   	push   eax
c0012afb:	50                   	push   eax
c0012afc:	eb 18                	jmp    c0012b16 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012afe:	50                   	push   eax
c0012aff:	50                   	push   eax
c0012b00:	55                   	push   ebp
c0012b01:	56                   	push   esi
c0012b02:	e8 05 dd fe ff       	call   c000080c <strcpy>
c0012b07:	5a                   	pop    edx
c0012b08:	59                   	pop    ecx
c0012b09:	68 ca bb 02 c0       	push   0xc002bbca
c0012b0e:	56                   	push   esi
c0012b0f:	e8 38 de fe ff       	call   c000094c <strcat>
c0012b14:	5d                   	pop    ebp
c0012b15:	58                   	pop    eax
c0012b16:	57                   	push   edi
c0012b17:	56                   	push   esi
c0012b18:	e8 2f de fe ff       	call   c000094c <strcat>
c0012b1d:	83 c4 10             	add    esp,0x10
c0012b20:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b23:	3c 60                	cmp    al,0x60
c0012b25:	7e 03                	jle    c0012b2a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012b27:	83 e8 20             	sub    eax,0x20
c0012b2a:	88 04 24             	mov    BYTE PTR [esp],al
c0012b2d:	88 03                	mov    BYTE PTR [ebx],al
c0012b2f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b36:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012b3c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012b40:	bf 03 00 00 00       	mov    edi,0x3
c0012b45:	b8 03 00 00 00       	mov    eax,0x3
c0012b4a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b4d:	84 d2                	test   dl,dl
c0012b4f:	0f 84 91 00 00 00    	je     c0012be6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b55:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b58:	80 fa 5c             	cmp    dl,0x5c
c0012b5b:	74 05                	je     c0012b62 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012b5d:	80 fa 2f             	cmp    dl,0x2f
c0012b60:	75 12                	jne    c0012b74 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b62:	89 c5                	mov    ebp,eax
c0012b64:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b69:	74 09                	je     c0012b74 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b6b:	40                   	inc    eax
c0012b6c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012b70:	89 cf                	mov    edi,ecx
c0012b72:	eb d6                	jmp    c0012b4a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012b74:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b79:	75 5b                	jne    c0012bd6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b7b:	80 fa 2e             	cmp    dl,0x2e
c0012b7e:	75 56                	jne    c0012bd6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b80:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b84:	74 19                	je     c0012b9f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012b86:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b8b:	74 53                	je     c0012be0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b8d:	89 f9                	mov    ecx,edi
c0012b8f:	41                   	inc    ecx
c0012b90:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b93:	80 fa 2f             	cmp    dl,0x2f
c0012b96:	74 f7                	je     c0012b8f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b98:	80 fa 5c             	cmp    dl,0x5c
c0012b9b:	74 f2                	je     c0012b8f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b9d:	eb d1                	jmp    c0012b70 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b9f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ba4:	74 3a                	je     c0012be0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012ba6:	83 f8 03             	cmp    eax,0x3
c0012ba9:	74 c5                	je     c0012b70 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bab:	41                   	inc    ecx
c0012bac:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012baf:	80 fa 2f             	cmp    dl,0x2f
c0012bb2:	74 f7                	je     c0012bab <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012bb4:	80 fa 5c             	cmp    dl,0x5c
c0012bb7:	74 f2                	je     c0012bab <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012bb9:	48                   	dec    eax
c0012bba:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012bbe:	75 06                	jne    c0012bc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012bc0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bc4:	eb f3                	jmp    c0012bb9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012bc6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012bca:	74 07                	je     c0012bd3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012bcc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bd0:	48                   	dec    eax
c0012bd1:	eb f3                	jmp    c0012bc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012bd3:	40                   	inc    eax
c0012bd4:	eb 9a                	jmp    c0012b70 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bd6:	80 fa 2f             	cmp    dl,0x2f
c0012bd9:	74 95                	je     c0012b70 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bdb:	80 fa 5c             	cmp    dl,0x5c
c0012bde:	74 90                	je     c0012b70 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012be0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012be3:	40                   	inc    eax
c0012be4:	eb 8a                	jmp    c0012b70 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012be6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bea:	83 ec 0c             	sub    esp,0xc
c0012bed:	53                   	push   ebx
c0012bee:	e8 79 db fe ff       	call   c000076c <strlen>
c0012bf3:	83 c4 10             	add    esp,0x10
c0012bf6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012bfb:	75 26                	jne    c0012c23 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012bfd:	83 ec 0c             	sub    esp,0xc
c0012c00:	53                   	push   ebx
c0012c01:	e8 66 db fe ff       	call   c000076c <strlen>
c0012c06:	83 c4 10             	add    esp,0x10
c0012c09:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012c0e:	74 26                	je     c0012c36 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012c10:	83 ec 0c             	sub    esp,0xc
c0012c13:	53                   	push   ebx
c0012c14:	e8 53 db fe ff       	call   c000076c <strlen>
c0012c19:	83 c4 10             	add    esp,0x10
c0012c1c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c21:	eb c7                	jmp    c0012bea <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012c23:	83 ec 0c             	sub    esp,0xc
c0012c26:	53                   	push   ebx
c0012c27:	e8 40 db fe ff       	call   c000076c <strlen>
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c34:	74 c7                	je     c0012bfd <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012c36:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012c3c:	5b                   	pop    ebx
c0012c3d:	5e                   	pop    esi
c0012c3e:	5f                   	pop    edi
c0012c3f:	5d                   	pop    ebp
c0012c40:	c3                   	ret    
c0012c41:	90                   	nop

c0012c42 <File::File(char const*, Process*)>:
c0012c42:	83 ec 0c             	sub    esp,0xc
c0012c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c49:	83 ec 08             	sub    esp,0x8
c0012c4c:	6a 00                	push   0x0
c0012c4e:	50                   	push   eax
c0012c4f:	e8 88 e1 ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0012c54:	83 c4 10             	add    esp,0x10
c0012c57:	ba 48 a9 02 c0       	mov    edx,0xc002a948
c0012c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c60:	89 10                	mov    DWORD PTR [eax],edx
c0012c62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c66:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c70:	83 c0 0d             	add    eax,0xd
c0012c73:	83 ec 04             	sub    esp,0x4
c0012c76:	52                   	push   edx
c0012c77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c7b:	50                   	push   eax
c0012c7c:	e8 17 fe ff ff       	call   c0012a98 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012c81:	83 c4 10             	add    esp,0x10
c0012c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c88:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c8b:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c92:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c9c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ca0:	90                   	nop
c0012ca1:	83 c4 0c             	add    esp,0xc
c0012ca4:	c3                   	ret    
c0012ca5:	90                   	nop

c0012ca6 <File::open(FileOpenMode)>:
c0012ca6:	53                   	push   ebx
c0012ca7:	b8 0b 00 00 00       	mov    eax,0xb
c0012cac:	83 ec 08             	sub    esp,0x8
c0012caf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cb3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cba:	80 fa 19             	cmp    dl,0x19
c0012cbd:	77 40                	ja     c0012cff <File::open(FileOpenMode)+0x59>
c0012cbf:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c0012cc6:	85 d2                	test   edx,edx
c0012cc8:	74 35                	je     c0012cff <File::open(FileOpenMode)+0x59>
c0012cca:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cd0:	85 d2                	test   edx,edx
c0012cd2:	74 2b                	je     c0012cff <File::open(FileOpenMode)+0x59>
c0012cd4:	b8 06 00 00 00       	mov    eax,0x6
c0012cd9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cdd:	75 20                	jne    c0012cff <File::open(FileOpenMode)+0x59>
c0012cdf:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ce1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ceb:	51                   	push   ecx
c0012cec:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cef:	51                   	push   ecx
c0012cf0:	52                   	push   edx
c0012cf1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012cf4:	83 c4 10             	add    esp,0x10
c0012cf7:	85 c0                	test   eax,eax
c0012cf9:	75 04                	jne    c0012cff <File::open(FileOpenMode)+0x59>
c0012cfb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012cff:	83 c4 08             	add    esp,0x8
c0012d02:	5b                   	pop    ebx
c0012d03:	c3                   	ret    

c0012d04 <File::close()>:
c0012d04:	53                   	push   ebx
c0012d05:	b8 0b 00 00 00       	mov    eax,0xb
c0012d0a:	83 ec 08             	sub    esp,0x8
c0012d0d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d11:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d18:	80 fa 19             	cmp    dl,0x19
c0012d1b:	77 41                	ja     c0012d5e <File::close()+0x5a>
c0012d1d:	8b 1c 95 c0 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2040]
c0012d24:	85 db                	test   ebx,ebx
c0012d26:	74 36                	je     c0012d5e <File::close()+0x5a>
c0012d28:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d2f:	74 2d                	je     c0012d5e <File::close()+0x5a>
c0012d31:	b8 05 00 00 00       	mov    eax,0x5
c0012d36:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d3a:	74 22                	je     c0012d5e <File::close()+0x5a>
c0012d3c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d40:	8b 04 95 c0 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2040]
c0012d47:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d4d:	53                   	push   ebx
c0012d4e:	53                   	push   ebx
c0012d4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d51:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d57:	50                   	push   eax
c0012d58:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d5b:	83 c4 10             	add    esp,0x10
c0012d5e:	83 c4 08             	add    esp,0x8
c0012d61:	5b                   	pop    ebx
c0012d62:	c3                   	ret    
c0012d63:	90                   	nop

c0012d64 <File::seek(unsigned long long)>:
c0012d64:	56                   	push   esi
c0012d65:	53                   	push   ebx
c0012d66:	b8 0b 00 00 00       	mov    eax,0xb
c0012d6b:	51                   	push   ecx
c0012d6c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d70:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d74:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d7b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d7f:	80 fa 19             	cmp    dl,0x19
c0012d82:	77 31                	ja     c0012db5 <File::seek(unsigned long long)+0x51>
c0012d84:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c0012d8b:	85 d2                	test   edx,edx
c0012d8d:	74 26                	je     c0012db5 <File::seek(unsigned long long)+0x51>
c0012d8f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d95:	85 d2                	test   edx,edx
c0012d97:	74 1c                	je     c0012db5 <File::seek(unsigned long long)+0x51>
c0012d99:	b8 05 00 00 00       	mov    eax,0x5
c0012d9e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012da2:	74 11                	je     c0012db5 <File::seek(unsigned long long)+0x51>
c0012da4:	8b 02                	mov    eax,DWORD PTR [edx]
c0012da6:	53                   	push   ebx
c0012da7:	51                   	push   ecx
c0012da8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012dae:	52                   	push   edx
c0012daf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012db2:	83 c4 10             	add    esp,0x10
c0012db5:	5a                   	pop    edx
c0012db6:	5b                   	pop    ebx
c0012db7:	5e                   	pop    esi
c0012db8:	c3                   	ret    
c0012db9:	90                   	nop

c0012dba <File::tell(unsigned long long*)>:
c0012dba:	83 ec 0c             	sub    esp,0xc
c0012dbd:	b8 0b 00 00 00       	mov    eax,0xb
c0012dc2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012dc6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012dcd:	80 fa 19             	cmp    dl,0x19
c0012dd0:	77 34                	ja     c0012e06 <File::tell(unsigned long long*)+0x4c>
c0012dd2:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c0012dd9:	85 d2                	test   edx,edx
c0012ddb:	74 29                	je     c0012e06 <File::tell(unsigned long long*)+0x4c>
c0012ddd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012de3:	85 d2                	test   edx,edx
c0012de5:	74 1f                	je     c0012e06 <File::tell(unsigned long long*)+0x4c>
c0012de7:	b8 05 00 00 00       	mov    eax,0x5
c0012dec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012df0:	74 14                	je     c0012e06 <File::tell(unsigned long long*)+0x4c>
c0012df2:	50                   	push   eax
c0012df3:	8b 02                	mov    eax,DWORD PTR [edx]
c0012df5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012df9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012dff:	52                   	push   edx
c0012e00:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	83 c4 0c             	add    esp,0xc
c0012e09:	c3                   	ret    

c0012e0a <File::rewind()>:
c0012e0a:	83 ec 10             	sub    esp,0x10
c0012e0d:	6a 00                	push   0x0
c0012e0f:	6a 00                	push   0x0
c0012e11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e15:	e8 4a ff ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c0012e1a:	83 c4 1c             	add    esp,0x1c
c0012e1d:	c3                   	ret    

c0012e1e <File::unlink()>:
c0012e1e:	83 ec 0c             	sub    esp,0xc
c0012e21:	b8 0b 00 00 00       	mov    eax,0xb
c0012e26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e2a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e31:	80 f9 19             	cmp    cl,0x19
c0012e34:	77 2f                	ja     c0012e65 <File::unlink()+0x47>
c0012e36:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0012e3d:	85 c9                	test   ecx,ecx
c0012e3f:	74 24                	je     c0012e65 <File::unlink()+0x47>
c0012e41:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e47:	85 c9                	test   ecx,ecx
c0012e49:	74 1a                	je     c0012e65 <File::unlink()+0x47>
c0012e4b:	b8 06 00 00 00       	mov    eax,0x6
c0012e50:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e54:	75 0f                	jne    c0012e65 <File::unlink()+0x47>
c0012e56:	83 c2 0d             	add    edx,0xd
c0012e59:	50                   	push   eax
c0012e5a:	50                   	push   eax
c0012e5b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e5d:	52                   	push   edx
c0012e5e:	51                   	push   ecx
c0012e5f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e62:	83 c4 10             	add    esp,0x10
c0012e65:	83 c4 0c             	add    esp,0xc
c0012e68:	c3                   	ret    
c0012e69:	90                   	nop

c0012e6a <File::rename(char const*)>:
c0012e6a:	83 ec 0c             	sub    esp,0xc
c0012e6d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e76:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e7d:	80 f9 19             	cmp    cl,0x19
c0012e80:	77 32                	ja     c0012eb4 <File::rename(char const*)+0x4a>
c0012e82:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0012e89:	85 c9                	test   ecx,ecx
c0012e8b:	74 27                	je     c0012eb4 <File::rename(char const*)+0x4a>
c0012e8d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e93:	85 c9                	test   ecx,ecx
c0012e95:	74 1d                	je     c0012eb4 <File::rename(char const*)+0x4a>
c0012e97:	b8 06 00 00 00       	mov    eax,0x6
c0012e9c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ea0:	75 12                	jne    c0012eb4 <File::rename(char const*)+0x4a>
c0012ea2:	83 c2 0d             	add    edx,0xd
c0012ea5:	50                   	push   eax
c0012ea6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ea8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eac:	52                   	push   edx
c0012ead:	51                   	push   ecx
c0012eae:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012eb1:	83 c4 10             	add    esp,0x10
c0012eb4:	83 c4 0c             	add    esp,0xc
c0012eb7:	c3                   	ret    

c0012eb8 <File::chfatattr(unsigned char, unsigned char)>:
c0012eb8:	57                   	push   edi
c0012eb9:	b8 0b 00 00 00       	mov    eax,0xb
c0012ebe:	56                   	push   esi
c0012ebf:	53                   	push   ebx
c0012ec0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ec4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ec8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ecf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012ed3:	80 f9 19             	cmp    cl,0x19
c0012ed6:	77 37                	ja     c0012f0f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ed8:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0012edf:	85 c9                	test   ecx,ecx
c0012ee1:	74 2c                	je     c0012f0f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ee3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ee9:	85 c9                	test   ecx,ecx
c0012eeb:	74 22                	je     c0012f0f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012eed:	b8 06 00 00 00       	mov    eax,0x6
c0012ef2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ef6:	75 17                	jne    c0012f0f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ef8:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012efa:	89 f0                	mov    eax,esi
c0012efc:	83 c2 0d             	add    edx,0xd
c0012eff:	0f b6 f0             	movzx  esi,al
c0012f02:	0f b6 db             	movzx  ebx,bl
c0012f05:	56                   	push   esi
c0012f06:	53                   	push   ebx
c0012f07:	52                   	push   edx
c0012f08:	51                   	push   ecx
c0012f09:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012f0c:	83 c4 10             	add    esp,0x10
c0012f0f:	5b                   	pop    ebx
c0012f10:	5e                   	pop    esi
c0012f11:	5f                   	pop    edi
c0012f12:	c3                   	ret    
c0012f13:	90                   	nop

c0012f14 <File::exists()>:
c0012f14:	83 ec 0c             	sub    esp,0xc
c0012f17:	31 c0                	xor    eax,eax
c0012f19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f1d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f24:	80 f9 19             	cmp    cl,0x19
c0012f27:	77 24                	ja     c0012f4d <File::exists()+0x39>
c0012f29:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0012f30:	85 c9                	test   ecx,ecx
c0012f32:	74 19                	je     c0012f4d <File::exists()+0x39>
c0012f34:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f3a:	85 c9                	test   ecx,ecx
c0012f3c:	74 0f                	je     c0012f4d <File::exists()+0x39>
c0012f3e:	83 c2 0d             	add    edx,0xd
c0012f41:	50                   	push   eax
c0012f42:	50                   	push   eax
c0012f43:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f45:	52                   	push   edx
c0012f46:	51                   	push   ecx
c0012f47:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f4a:	83 c4 10             	add    esp,0x10
c0012f4d:	83 c4 0c             	add    esp,0xc
c0012f50:	c3                   	ret    
c0012f51:	90                   	nop

c0012f52 <File::stat(unsigned long long*, bool*)>:
c0012f52:	56                   	push   esi
c0012f53:	53                   	push   ebx
c0012f54:	50                   	push   eax
c0012f55:	b8 0b 00 00 00       	mov    eax,0xb
c0012f5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f5e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f62:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f6d:	80 f9 19             	cmp    cl,0x19
c0012f70:	77 3d                	ja     c0012faf <File::stat(unsigned long long*, bool*)+0x5d>
c0012f72:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0012f79:	85 c9                	test   ecx,ecx
c0012f7b:	74 32                	je     c0012faf <File::stat(unsigned long long*, bool*)+0x5d>
c0012f7d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f83:	85 c9                	test   ecx,ecx
c0012f85:	74 28                	je     c0012faf <File::stat(unsigned long long*, bool*)+0x5d>
c0012f87:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f89:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f8d:	74 13                	je     c0012fa2 <File::stat(unsigned long long*, bool*)+0x50>
c0012f8f:	83 ec 04             	sub    esp,0x4
c0012f92:	56                   	push   esi
c0012f93:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f99:	51                   	push   ecx
c0012f9a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f9d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012fa0:	eb 0a                	jmp    c0012fac <File::stat(unsigned long long*, bool*)+0x5a>
c0012fa2:	53                   	push   ebx
c0012fa3:	83 c2 0d             	add    edx,0xd
c0012fa6:	56                   	push   esi
c0012fa7:	52                   	push   edx
c0012fa8:	51                   	push   ecx
c0012fa9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012fac:	83 c4 10             	add    esp,0x10
c0012faf:	5a                   	pop    edx
c0012fb0:	5b                   	pop    ebx
c0012fb1:	5e                   	pop    esi
c0012fb2:	c3                   	ret    

c0012fb3 <Fs::setcwd(Process*, char*)>:
c0012fb3:	55                   	push   ebp
c0012fb4:	57                   	push   edi
c0012fb5:	56                   	push   esi
c0012fb6:	53                   	push   ebx
c0012fb7:	81 ec 20 02 00 00    	sub    esp,0x220
c0012fbd:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012fc4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012fca:	57                   	push   edi
c0012fcb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012fd2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012fd6:	56                   	push   esi
c0012fd7:	e8 bc fa ff ff       	call   c0012a98 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012fdc:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fdf:	e8 88 d7 fe ff       	call   c000076c <strlen>
c0012fe4:	83 c4 10             	add    esp,0x10
c0012fe7:	83 f8 02             	cmp    eax,0x2
c0012fea:	77 17                	ja     c0013003 <Fs::setcwd(Process*, char*)+0x50>
c0012fec:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012ff1:	83 e8 41             	sub    eax,0x41
c0012ff4:	83 f8 19             	cmp    eax,0x19
c0012ff7:	76 24                	jbe    c001301d <Fs::setcwd(Process*, char*)+0x6a>
c0012ff9:	b8 03 00 00 00       	mov    eax,0x3
c0012ffe:	e9 e0 00 00 00       	jmp    c00130e3 <Fs::setcwd(Process*, char*)+0x130>
c0013003:	83 ec 0c             	sub    esp,0xc
c0013006:	56                   	push   esi
c0013007:	e8 60 d7 fe ff       	call   c000076c <strlen>
c001300c:	83 c4 10             	add    esp,0x10
c001300f:	83 f8 03             	cmp    eax,0x3
c0013012:	75 34                	jne    c0013048 <Fs::setcwd(Process*, char*)+0x95>
c0013014:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013019:	75 2d                	jne    c0013048 <Fs::setcwd(Process*, char*)+0x95>
c001301b:	eb cf                	jmp    c0012fec <Fs::setcwd(Process*, char*)+0x39>
c001301d:	8b 14 85 c0 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2040]
c0013024:	b8 05 00 00 00       	mov    eax,0x5
c0013029:	85 d2                	test   edx,edx
c001302b:	0f 84 b2 00 00 00    	je     c00130e3 <Fs::setcwd(Process*, char*)+0x130>
c0013031:	b8 06 00 00 00       	mov    eax,0x6
c0013036:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001303d:	0f 85 92 00 00 00    	jne    c00130d5 <Fs::setcwd(Process*, char*)+0x122>
c0013043:	e9 9b 00 00 00       	jmp    c00130e3 <Fs::setcwd(Process*, char*)+0x130>
c0013048:	83 ec 0c             	sub    esp,0xc
c001304b:	68 14 01 00 00       	push   0x114
c0013050:	e8 44 c5 ff ff       	call   c000f599 <malloc>
c0013055:	83 c4 0c             	add    esp,0xc
c0013058:	89 c3                	mov    ebx,eax
c001305a:	55                   	push   ebp
c001305b:	56                   	push   esi
c001305c:	50                   	push   eax
c001305d:	e8 e0 fb ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c0013062:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013067:	83 c4 0c             	add    esp,0xc
c001306a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001306e:	50                   	push   eax
c001306f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013073:	50                   	push   eax
c0013074:	53                   	push   ebx
c0013075:	e8 d8 fe ff ff       	call   c0012f52 <File::stat(unsigned long long*, bool*)>
c001307a:	83 c4 10             	add    esp,0x10
c001307d:	83 f8 02             	cmp    eax,0x2
c0013080:	74 04                	je     c0013086 <Fs::setcwd(Process*, char*)+0xd3>
c0013082:	85 c0                	test   eax,eax
c0013084:	74 1c                	je     c00130a2 <Fs::setcwd(Process*, char*)+0xef>
c0013086:	b8 01 00 00 00       	mov    eax,0x1
c001308b:	85 db                	test   ebx,ebx
c001308d:	74 54                	je     c00130e3 <Fs::setcwd(Process*, char*)+0x130>
c001308f:	83 ec 0c             	sub    esp,0xc
c0013092:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013094:	53                   	push   ebx
c0013095:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013098:	83 c4 10             	add    esp,0x10
c001309b:	b8 01 00 00 00       	mov    eax,0x1
c00130a0:	eb 41                	jmp    c00130e3 <Fs::setcwd(Process*, char*)+0x130>
c00130a2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00130a7:	75 1c                	jne    c00130c5 <Fs::setcwd(Process*, char*)+0x112>
c00130a9:	b8 02 00 00 00       	mov    eax,0x2
c00130ae:	85 db                	test   ebx,ebx
c00130b0:	74 31                	je     c00130e3 <Fs::setcwd(Process*, char*)+0x130>
c00130b2:	83 ec 0c             	sub    esp,0xc
c00130b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130b7:	53                   	push   ebx
c00130b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130bb:	83 c4 10             	add    esp,0x10
c00130be:	b8 02 00 00 00       	mov    eax,0x2
c00130c3:	eb 1e                	jmp    c00130e3 <Fs::setcwd(Process*, char*)+0x130>
c00130c5:	85 db                	test   ebx,ebx
c00130c7:	74 0c                	je     c00130d5 <Fs::setcwd(Process*, char*)+0x122>
c00130c9:	83 ec 0c             	sub    esp,0xc
c00130cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130ce:	53                   	push   ebx
c00130cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130d2:	83 c4 10             	add    esp,0x10
c00130d5:	50                   	push   eax
c00130d6:	50                   	push   eax
c00130d7:	56                   	push   esi
c00130d8:	57                   	push   edi
c00130d9:	e8 2e d7 fe ff       	call   c000080c <strcpy>
c00130de:	83 c4 10             	add    esp,0x10
c00130e1:	31 c0                	xor    eax,eax
c00130e3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00130e9:	5b                   	pop    ebx
c00130ea:	5e                   	pop    esi
c00130eb:	5f                   	pop    edi
c00130ec:	5d                   	pop    ebp
c00130ed:	c3                   	ret    

c00130ee <Directory::Directory(char const*, Process*)>:
c00130ee:	83 ec 0c             	sub    esp,0xc
c00130f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f5:	83 ec 08             	sub    esp,0x8
c00130f8:	6a 00                	push   0x0
c00130fa:	50                   	push   eax
c00130fb:	e8 dc dc ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0013100:	83 c4 10             	add    esp,0x10
c0013103:	ba 64 a9 02 c0       	mov    edx,0xc002a964
c0013108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310c:	89 10                	mov    DWORD PTR [eax],edx
c001310e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013112:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311c:	83 c0 0d             	add    eax,0xd
c001311f:	83 ec 04             	sub    esp,0x4
c0013122:	52                   	push   edx
c0013123:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013127:	50                   	push   eax
c0013128:	e8 6b f9 ff ff       	call   c0012a98 <Fs::standardiseFiles(char*, char const*, char const*)>
c001312d:	83 c4 10             	add    esp,0x10
c0013130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013134:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013137:	8d 50 bf             	lea    edx,[eax-0x41]
c001313a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001313e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013148:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001314c:	90                   	nop
c001314d:	83 c4 0c             	add    esp,0xc
c0013150:	c3                   	ret    
c0013151:	90                   	nop

c0013152 <Directory::open()>:
c0013152:	53                   	push   ebx
c0013153:	b8 0b 00 00 00       	mov    eax,0xb
c0013158:	83 ec 08             	sub    esp,0x8
c001315b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001315f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013166:	80 fa 19             	cmp    dl,0x19
c0013169:	77 3d                	ja     c00131a8 <Directory::open()+0x56>
c001316b:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c0013172:	85 d2                	test   edx,edx
c0013174:	74 32                	je     c00131a8 <Directory::open()+0x56>
c0013176:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001317c:	85 d2                	test   edx,edx
c001317e:	74 28                	je     c00131a8 <Directory::open()+0x56>
c0013180:	b8 06 00 00 00       	mov    eax,0x6
c0013185:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013189:	75 1d                	jne    c00131a8 <Directory::open()+0x56>
c001318b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013191:	50                   	push   eax
c0013192:	8b 02                	mov    eax,DWORD PTR [edx]
c0013194:	51                   	push   ecx
c0013195:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013198:	51                   	push   ecx
c0013199:	52                   	push   edx
c001319a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001319d:	83 c4 10             	add    esp,0x10
c00131a0:	85 c0                	test   eax,eax
c00131a2:	75 04                	jne    c00131a8 <Directory::open()+0x56>
c00131a4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00131a8:	83 c4 08             	add    esp,0x8
c00131ab:	5b                   	pop    ebx
c00131ac:	c3                   	ret    
c00131ad:	90                   	nop

c00131ae <Directory::close()>:
c00131ae:	53                   	push   ebx
c00131af:	b8 0b 00 00 00       	mov    eax,0xb
c00131b4:	83 ec 08             	sub    esp,0x8
c00131b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131bb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131c2:	80 fa 19             	cmp    dl,0x19
c00131c5:	77 41                	ja     c0013208 <Directory::close()+0x5a>
c00131c7:	8b 1c 95 c0 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2040]
c00131ce:	85 db                	test   ebx,ebx
c00131d0:	74 36                	je     c0013208 <Directory::close()+0x5a>
c00131d2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00131d9:	74 2d                	je     c0013208 <Directory::close()+0x5a>
c00131db:	b8 05 00 00 00       	mov    eax,0x5
c00131e0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131e4:	74 22                	je     c0013208 <Directory::close()+0x5a>
c00131e6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00131ea:	8b 04 95 c0 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2040]
c00131f1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131f7:	53                   	push   ebx
c00131f8:	53                   	push   ebx
c00131f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00131fb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013201:	50                   	push   eax
c0013202:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013205:	83 c4 10             	add    esp,0x10
c0013208:	83 c4 08             	add    esp,0x8
c001320b:	5b                   	pop    ebx
c001320c:	c3                   	ret    
c001320d:	90                   	nop

c001320e <Directory::unlink()>:
c001320e:	83 ec 0c             	sub    esp,0xc
c0013211:	b8 0b 00 00 00       	mov    eax,0xb
c0013216:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001321a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013221:	80 f9 19             	cmp    cl,0x19
c0013224:	77 2f                	ja     c0013255 <Directory::unlink()+0x47>
c0013226:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c001322d:	85 c9                	test   ecx,ecx
c001322f:	74 24                	je     c0013255 <Directory::unlink()+0x47>
c0013231:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013237:	85 c9                	test   ecx,ecx
c0013239:	74 1a                	je     c0013255 <Directory::unlink()+0x47>
c001323b:	b8 06 00 00 00       	mov    eax,0x6
c0013240:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013244:	75 0f                	jne    c0013255 <Directory::unlink()+0x47>
c0013246:	83 c2 0d             	add    edx,0xd
c0013249:	50                   	push   eax
c001324a:	50                   	push   eax
c001324b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001324d:	52                   	push   edx
c001324e:	51                   	push   ecx
c001324f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013252:	83 c4 10             	add    esp,0x10
c0013255:	83 c4 0c             	add    esp,0xc
c0013258:	c3                   	ret    
c0013259:	90                   	nop

c001325a <Directory::rename(char const*)>:
c001325a:	83 ec 0c             	sub    esp,0xc
c001325d:	b8 0b 00 00 00       	mov    eax,0xb
c0013262:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013266:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001326d:	80 f9 19             	cmp    cl,0x19
c0013270:	77 32                	ja     c00132a4 <Directory::rename(char const*)+0x4a>
c0013272:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0013279:	85 c9                	test   ecx,ecx
c001327b:	74 27                	je     c00132a4 <Directory::rename(char const*)+0x4a>
c001327d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013283:	85 c9                	test   ecx,ecx
c0013285:	74 1d                	je     c00132a4 <Directory::rename(char const*)+0x4a>
c0013287:	b8 06 00 00 00       	mov    eax,0x6
c001328c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013290:	75 12                	jne    c00132a4 <Directory::rename(char const*)+0x4a>
c0013292:	83 c2 0d             	add    edx,0xd
c0013295:	50                   	push   eax
c0013296:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013298:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001329c:	52                   	push   edx
c001329d:	51                   	push   ecx
c001329e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00132a1:	83 c4 10             	add    esp,0x10
c00132a4:	83 c4 0c             	add    esp,0xc
c00132a7:	c3                   	ret    

c00132a8 <Directory::exists()>:
c00132a8:	83 ec 0c             	sub    esp,0xc
c00132ab:	31 c0                	xor    eax,eax
c00132ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132b1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132b8:	80 f9 19             	cmp    cl,0x19
c00132bb:	77 24                	ja     c00132e1 <Directory::exists()+0x39>
c00132bd:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c00132c4:	85 c9                	test   ecx,ecx
c00132c6:	74 19                	je     c00132e1 <Directory::exists()+0x39>
c00132c8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132ce:	85 c9                	test   ecx,ecx
c00132d0:	74 0f                	je     c00132e1 <Directory::exists()+0x39>
c00132d2:	83 c2 0d             	add    edx,0xd
c00132d5:	50                   	push   eax
c00132d6:	50                   	push   eax
c00132d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132d9:	52                   	push   edx
c00132da:	51                   	push   ecx
c00132db:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00132de:	83 c4 10             	add    esp,0x10
c00132e1:	83 c4 0c             	add    esp,0xc
c00132e4:	c3                   	ret    
c00132e5:	90                   	nop

c00132e6 <Directory::read(dirent*)>:
c00132e6:	83 ec 1c             	sub    esp,0x1c
c00132e9:	b8 0b 00 00 00       	mov    eax,0xb
c00132ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132f2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00132f9:	80 fa 19             	cmp    dl,0x19
c00132fc:	77 30                	ja     c001332e <Directory::read(dirent*)+0x48>
c00132fe:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c0013305:	85 d2                	test   edx,edx
c0013307:	74 25                	je     c001332e <Directory::read(dirent*)+0x48>
c0013309:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013310:	74 1c                	je     c001332e <Directory::read(dirent*)+0x48>
c0013312:	83 ec 0c             	sub    esp,0xc
c0013315:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013317:	8d 54 24 18          	lea    edx,[esp+0x18]
c001331b:	52                   	push   edx
c001331c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013320:	6a 00                	push   0x0
c0013322:	68 10 01 00 00       	push   0x110
c0013327:	51                   	push   ecx
c0013328:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001332b:	83 c4 20             	add    esp,0x20
c001332e:	83 c4 1c             	add    esp,0x1c
c0013331:	c3                   	ret    

c0013332 <Directory::create()>:
c0013332:	83 ec 0c             	sub    esp,0xc
c0013335:	b8 0b 00 00 00       	mov    eax,0xb
c001333a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001333e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013345:	80 f9 19             	cmp    cl,0x19
c0013348:	77 2f                	ja     c0013379 <Directory::create()+0x47>
c001334a:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0013351:	85 c9                	test   ecx,ecx
c0013353:	74 24                	je     c0013379 <Directory::create()+0x47>
c0013355:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001335b:	85 c9                	test   ecx,ecx
c001335d:	74 1a                	je     c0013379 <Directory::create()+0x47>
c001335f:	b8 06 00 00 00       	mov    eax,0x6
c0013364:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013368:	75 0f                	jne    c0013379 <Directory::create()+0x47>
c001336a:	83 c2 0d             	add    edx,0xd
c001336d:	50                   	push   eax
c001336e:	50                   	push   eax
c001336f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013371:	52                   	push   edx
c0013372:	51                   	push   ecx
c0013373:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	83 c4 0c             	add    esp,0xc
c001337c:	c3                   	ret    
c001337d:	90                   	nop

c001337e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001337e:	b8 0a 00 00 00       	mov    eax,0xa
c0013383:	c3                   	ret    

c0013384 <Bus::Bus(char const*)>:
c0013384:	83 ec 0c             	sub    esp,0xc
c0013387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001338b:	83 ec 08             	sub    esp,0x8
c001338e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013392:	50                   	push   eax
c0013393:	e8 88 09 00 00       	call   c0013d20 <Device::Device(char const*)>
c0013398:	83 c4 10             	add    esp,0x10
c001339b:	ba 80 a9 02 c0       	mov    edx,0xc002a980
c00133a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a4:	89 10                	mov    DWORD PTR [eax],edx
c00133a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133aa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00133b4:	90                   	nop
c00133b5:	83 c4 0c             	add    esp,0xc
c00133b8:	c3                   	ret    
c00133b9:	90                   	nop

c00133ba <Bus::~Bus()>:
c00133ba:	83 ec 0c             	sub    esp,0xc
c00133bd:	ba 80 a9 02 c0       	mov    edx,0xc002a980
c00133c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c6:	89 10                	mov    DWORD PTR [eax],edx
c00133c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133cc:	83 ec 0c             	sub    esp,0xc
c00133cf:	50                   	push   eax
c00133d0:	e8 15 06 00 00       	call   c00139ea <Device::~Device()>
c00133d5:	83 c4 10             	add    esp,0x10
c00133d8:	90                   	nop
c00133d9:	83 c4 0c             	add    esp,0xc
c00133dc:	c3                   	ret    
c00133dd:	90                   	nop

c00133de <Bus::~Bus()>:
c00133de:	83 ec 0c             	sub    esp,0xc
c00133e1:	83 ec 0c             	sub    esp,0xc
c00133e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e8:	e8 cd ff ff ff       	call   c00133ba <Bus::~Bus()>
c00133ed:	83 c4 10             	add    esp,0x10
c00133f0:	83 ec 08             	sub    esp,0x8
c00133f3:	68 58 01 00 00       	push   0x158
c00133f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133fc:	e8 0a f2 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0013401:	83 c4 10             	add    esp,0x10
c0013404:	83 c4 0c             	add    esp,0xc
c0013407:	c3                   	ret    

c0013408 <Buzzer::Buzzer(char const*)>:
c0013408:	83 ec 0c             	sub    esp,0xc
c001340b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340f:	83 ec 08             	sub    esp,0x8
c0013412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013416:	50                   	push   eax
c0013417:	e8 04 09 00 00       	call   c0013d20 <Device::Device(char const*)>
c001341c:	83 c4 10             	add    esp,0x10
c001341f:	ba ac a9 02 c0       	mov    edx,0xc002a9ac
c0013424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013428:	89 10                	mov    DWORD PTR [eax],edx
c001342a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013446:	90                   	nop
c0013447:	83 c4 0c             	add    esp,0xc
c001344a:	c3                   	ret    
c001344b:	90                   	nop

c001344c <Buzzer::~Buzzer()>:
c001344c:	83 ec 0c             	sub    esp,0xc
c001344f:	ba ac a9 02 c0       	mov    edx,0xc002a9ac
c0013454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013458:	89 10                	mov    DWORD PTR [eax],edx
c001345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345e:	83 ec 0c             	sub    esp,0xc
c0013461:	50                   	push   eax
c0013462:	e8 83 05 00 00       	call   c00139ea <Device::~Device()>
c0013467:	83 c4 10             	add    esp,0x10
c001346a:	90                   	nop
c001346b:	83 c4 0c             	add    esp,0xc
c001346e:	c3                   	ret    
c001346f:	90                   	nop

c0013470 <Buzzer::~Buzzer()>:
c0013470:	83 ec 0c             	sub    esp,0xc
c0013473:	83 ec 0c             	sub    esp,0xc
c0013476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001347a:	e8 cd ff ff ff       	call   c001344c <Buzzer::~Buzzer()>
c001347f:	83 c4 10             	add    esp,0x10
c0013482:	83 ec 08             	sub    esp,0x8
c0013485:	68 5c 01 00 00       	push   0x15c
c001348a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001348e:	e8 78 f1 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0013493:	83 c4 10             	add    esp,0x10
c0013496:	83 c4 0c             	add    esp,0xc
c0013499:	c3                   	ret    

c001349a <Buzzer::stop()>:
c001349a:	83 ec 14             	sub    esp,0x14
c001349d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00134a3:	6a 00                	push   0x0
c00134a5:	50                   	push   eax
c00134a6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00134a9:	83 c4 1c             	add    esp,0x1c
c00134ac:	c3                   	ret    

c00134ad <beepThread(void*)>:
c00134ad:	53                   	push   ebx
c00134ae:	83 ec 08             	sub    esp,0x8
c00134b1:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00134b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134ba:	48                   	dec    eax
c00134bb:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c00134c0:	75 01                	jne    c00134c3 <beepThread(void*)+0x16>
c00134c2:	fb                   	sti    
c00134c3:	50                   	push   eax
c00134c4:	50                   	push   eax
c00134c5:	b8 40 42 0f 00       	mov    eax,0xf4240
c00134ca:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00134d0:	52                   	push   edx
c00134d1:	50                   	push   eax
c00134d2:	e8 e4 a7 00 00       	call   c001dcbb <nanoSleep(unsigned long long)>
c00134d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134da:	e8 bb ff ff ff       	call   c001349a <Buzzer::stop()>
c00134df:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00134e7:	83 c4 18             	add    esp,0x18
c00134ea:	5b                   	pop    ebx
c00134eb:	e9 c7 a6 00 00       	jmp    c001dbb7 <blockTask(TaskState)>

c00134f0 <Buzzer::beep(int, int, bool)>:
c00134f0:	57                   	push   edi
c00134f1:	56                   	push   esi
c00134f2:	53                   	push   ebx
c00134f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134f7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00134fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134ff:	52                   	push   edx
c0013500:	52                   	push   edx
c0013501:	8b 06                	mov    eax,DWORD PTR [esi]
c0013503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013507:	56                   	push   esi
c0013508:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001350b:	83 c4 10             	add    esp,0x10
c001350e:	89 f8                	mov    eax,edi
c0013510:	84 c0                	test   al,al
c0013512:	74 1f                	je     c0013533 <Buzzer::beep(int, int, bool)+0x43>
c0013514:	50                   	push   eax
c0013515:	50                   	push   eax
c0013516:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001351c:	99                   	cdq    
c001351d:	52                   	push   edx
c001351e:	50                   	push   eax
c001351f:	e8 97 a7 00 00       	call   c001dcbb <nanoSleep(unsigned long long)>
c0013524:	83 c4 10             	add    esp,0x10
c0013527:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001352b:	5b                   	pop    ebx
c001352c:	5e                   	pop    esi
c001352d:	5f                   	pop    edi
c001352e:	e9 67 ff ff ff       	jmp    c001349a <Buzzer::stop()>
c0013533:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013539:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001353e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013546:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001354a:	c7 44 24 14 ad 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc00134ad
c0013552:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013556:	5b                   	pop    ebx
c0013557:	5e                   	pop    esi
c0013558:	5f                   	pop    edi
c0013559:	e9 5e a2 00 00       	jmp    c001d7bc <Process::createThread(void (*)(void*), void*, int)>

c001355e <User::loadClockSettings(int)>:
c001355e:	53                   	push   ebx
c001355f:	83 ec 14             	sub    esp,0x14
c0013562:	68 14 01 00 00       	push   0x114
c0013567:	e8 2d c0 ff ff       	call   c000f599 <malloc>
c001356c:	83 c4 0c             	add    esp,0xc
c001356f:	89 c3                	mov    ebx,eax
c0013571:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c0013577:	68 d4 a9 02 c0       	push   0xc002a9d4
c001357c:	50                   	push   eax
c001357d:	e8 c0 f6 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c0013582:	58                   	pop    eax
c0013583:	5a                   	pop    edx
c0013584:	6a 01                	push   0x1
c0013586:	53                   	push   ebx
c0013587:	e8 1a f7 ff ff       	call   c0012ca6 <File::open(FileOpenMode)>
c001358c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001358f:	e8 70 f7 ff ff       	call   c0012d04 <File::close()>
c0013594:	83 c4 10             	add    esp,0x10
c0013597:	85 db                	test   ebx,ebx
c0013599:	74 0f                	je     c00135aa <User::loadClockSettings(int)+0x4c>
c001359b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001359d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00135a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00135a4:	83 c4 08             	add    esp,0x8
c00135a7:	5b                   	pop    ebx
c00135a8:	ff e0                	jmp    eax
c00135aa:	83 c4 08             	add    esp,0x8
c00135ad:	5b                   	pop    ebx
c00135ae:	c3                   	ret    
c00135af:	90                   	nop

c00135b0 <Clock::Clock(char const*)>:
c00135b0:	83 ec 0c             	sub    esp,0xc
c00135b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b7:	83 ec 08             	sub    esp,0x8
c00135ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135be:	50                   	push   eax
c00135bf:	e8 5c 07 00 00       	call   c0013d20 <Device::Device(char const*)>
c00135c4:	83 c4 10             	add    esp,0x10
c00135c7:	ba fc a9 02 c0       	mov    edx,0xc002a9fc
c00135cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d0:	89 10                	mov    DWORD PTR [eax],edx
c00135d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00135e0:	90                   	nop
c00135e1:	83 c4 0c             	add    esp,0xc
c00135e4:	c3                   	ret    
c00135e5:	90                   	nop

c00135e6 <Clock::~Clock()>:
c00135e6:	83 ec 0c             	sub    esp,0xc
c00135e9:	ba fc a9 02 c0       	mov    edx,0xc002a9fc
c00135ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f2:	89 10                	mov    DWORD PTR [eax],edx
c00135f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f8:	83 ec 0c             	sub    esp,0xc
c00135fb:	50                   	push   eax
c00135fc:	e8 e9 03 00 00       	call   c00139ea <Device::~Device()>
c0013601:	83 c4 10             	add    esp,0x10
c0013604:	90                   	nop
c0013605:	83 c4 0c             	add    esp,0xc
c0013608:	c3                   	ret    
c0013609:	90                   	nop

c001360a <Clock::~Clock()>:
c001360a:	83 ec 0c             	sub    esp,0xc
c001360d:	83 ec 0c             	sub    esp,0xc
c0013610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013614:	e8 cd ff ff ff       	call   c00135e6 <Clock::~Clock()>
c0013619:	83 c4 10             	add    esp,0x10
c001361c:	83 ec 08             	sub    esp,0x8
c001361f:	68 58 01 00 00       	push   0x158
c0013624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013628:	e8 de ef ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c001362d:	83 c4 10             	add    esp,0x10
c0013630:	83 c4 0c             	add    esp,0xc
c0013633:	c3                   	ret    

c0013634 <Clock::timeInSecondsLocal()>:
c0013634:	53                   	push   ebx
c0013635:	83 ec 14             	sub    esp,0x14
c0013638:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001363c:	8b 10                	mov    edx,DWORD PTR [eax]
c001363e:	50                   	push   eax
c001363f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013642:	0f b6 0d 3c db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002db3c
c0013649:	03 0d 40 db 02 c0    	add    ecx,DWORD PTR ds:0xc002db40
c001364f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013655:	89 cb                	mov    ebx,ecx
c0013657:	c1 fb 1f             	sar    ebx,0x1f
c001365a:	01 c8                	add    eax,ecx
c001365c:	11 da                	adc    edx,ebx
c001365e:	83 c4 10             	add    esp,0x10
c0013661:	31 c9                	xor    ecx,ecx
c0013663:	80 3d 3d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db3d,0x0
c001366a:	74 05                	je     c0013671 <Clock::timeInSecondsLocal()+0x3d>
c001366c:	b9 08 07 00 00       	mov    ecx,0x708
c0013671:	31 db                	xor    ebx,ebx
c0013673:	01 c8                	add    eax,ecx
c0013675:	11 da                	adc    edx,ebx
c0013677:	83 c4 08             	add    esp,0x8
c001367a:	5b                   	pop    ebx
c001367b:	c3                   	ret    

c001367c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001367c:	57                   	push   edi
c001367d:	56                   	push   esi
c001367e:	53                   	push   ebx
c001367f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013683:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013687:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013689:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001368d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013690:	0f b6 05 3c db 02 c0 	movzx  eax,BYTE PTR ds:0xc002db3c
c0013697:	03 05 40 db 02 c0    	add    eax,DWORD PTR ds:0xc002db40
c001369d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00136a3:	99                   	cdq    
c00136a4:	29 c6                	sub    esi,eax
c00136a6:	19 d7                	sbb    edi,edx
c00136a8:	89 f0                	mov    eax,esi
c00136aa:	89 fa                	mov    edx,edi
c00136ac:	31 f6                	xor    esi,esi
c00136ae:	80 3d 3d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db3d,0x0
c00136b5:	74 05                	je     c00136bc <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00136b7:	be 08 07 00 00       	mov    esi,0x708
c00136bc:	31 ff                	xor    edi,edi
c00136be:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00136c2:	29 f0                	sub    eax,esi
c00136c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136c8:	19 fa                	sbb    edx,edi
c00136ca:	89 d8                	mov    eax,ebx
c00136cc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00136d0:	5b                   	pop    ebx
c00136d1:	5e                   	pop    esi
c00136d2:	5f                   	pop    edi
c00136d3:	ff e0                	jmp    eax

c00136d5 <datetimeToSeconds(datetime_t)>:
c00136d5:	55                   	push   ebp
c00136d6:	57                   	push   edi
c00136d7:	56                   	push   esi
c00136d8:	53                   	push   ebx
c00136d9:	83 ec 14             	sub    esp,0x14
c00136dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00136e0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00136e4:	89 d3                	mov    ebx,edx
c00136e6:	0f b6 c6             	movzx  eax,dh
c00136e9:	c1 eb 10             	shr    ebx,0x10
c00136ec:	48                   	dec    eax
c00136ed:	66 81 eb 6c 07       	sub    bx,0x76c
c00136f2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00136f6:	0f b6 f5             	movzx  esi,ch
c00136f9:	89 cf                	mov    edi,ecx
c00136fb:	6b f6 3c             	imul   esi,esi,0x3c
c00136fe:	c1 ef 10             	shr    edi,0x10
c0013701:	0f b6 c9             	movzx  ecx,cl
c0013704:	89 f8                	mov    eax,edi
c0013706:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001370c:	0f b6 f8             	movzx  edi,al
c001370f:	0f b6 d2             	movzx  edx,dl
c0013712:	01 fe                	add    esi,edi
c0013714:	01 f1                	add    ecx,esi
c0013716:	0f b7 f3             	movzx  esi,bx
c0013719:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001371d:	c1 f9 1f             	sar    ecx,0x1f
c0013720:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013725:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013729:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001372e:	8b 0c 8d 40 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55c0]
c0013735:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013739:	76 29                	jbe    c0013764 <datetimeToSeconds(datetime_t)+0x8f>
c001373b:	f6 c3 03             	test   bl,0x3
c001373e:	75 24                	jne    c0013764 <datetimeToSeconds(datetime_t)+0x8f>
c0013740:	31 d2                	xor    edx,edx
c0013742:	bf 64 00 00 00       	mov    edi,0x64
c0013747:	89 d8                	mov    eax,ebx
c0013749:	66 f7 f7             	div    di
c001374c:	66 85 d2             	test   dx,dx
c001374f:	75 12                	jne    c0013763 <datetimeToSeconds(datetime_t)+0x8e>
c0013751:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013757:	bf 90 01 00 00       	mov    edi,0x190
c001375c:	99                   	cdq    
c001375d:	f7 ff                	idiv   edi
c001375f:	85 d2                	test   edx,edx
c0013761:	75 01                	jne    c0013764 <datetimeToSeconds(datetime_t)+0x8f>
c0013763:	41                   	inc    ecx
c0013764:	66 83 fb 46          	cmp    bx,0x46
c0013768:	76 45                	jbe    c00137af <datetimeToSeconds(datetime_t)+0xda>
c001376a:	bb 46 00 00 00       	mov    ebx,0x46
c001376f:	bf 64 00 00 00       	mov    edi,0x64
c0013774:	bd 90 01 00 00       	mov    ebp,0x190
c0013779:	b8 6d 01 00 00       	mov    eax,0x16d
c001377e:	f6 c3 03             	test   bl,0x3
c0013781:	75 23                	jne    c00137a6 <datetimeToSeconds(datetime_t)+0xd1>
c0013783:	89 d8                	mov    eax,ebx
c0013785:	99                   	cdq    
c0013786:	f7 ff                	idiv   edi
c0013788:	b8 6e 01 00 00       	mov    eax,0x16e
c001378d:	85 d2                	test   edx,edx
c001378f:	75 15                	jne    c00137a6 <datetimeToSeconds(datetime_t)+0xd1>
c0013791:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013797:	99                   	cdq    
c0013798:	f7 fd                	idiv   ebp
c001379a:	83 fa 01             	cmp    edx,0x1
c001379d:	19 c0                	sbb    eax,eax
c001379f:	f7 d0                	not    eax
c00137a1:	05 6e 01 00 00       	add    eax,0x16e
c00137a6:	01 c1                	add    ecx,eax
c00137a8:	43                   	inc    ebx
c00137a9:	39 f3                	cmp    ebx,esi
c00137ab:	7c cc                	jl     c0013779 <datetimeToSeconds(datetime_t)+0xa4>
c00137ad:	eb 35                	jmp    c00137e4 <datetimeToSeconds(datetime_t)+0x10f>
c00137af:	74 33                	je     c00137e4 <datetimeToSeconds(datetime_t)+0x10f>
c00137b1:	b8 45 00 00 00       	mov    eax,0x45
c00137b6:	89 c2                	mov    edx,eax
c00137b8:	83 e2 03             	and    edx,0x3
c00137bb:	39 f0                	cmp    eax,esi
c00137bd:	7e 0f                	jle    c00137ce <datetimeToSeconds(datetime_t)+0xf9>
c00137bf:	83 fa 01             	cmp    edx,0x1
c00137c2:	19 d2                	sbb    edx,edx
c00137c4:	48                   	dec    eax
c00137c5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00137cc:	eb e8                	jmp    c00137b6 <datetimeToSeconds(datetime_t)+0xe1>
c00137ce:	b8 6d 01 00 00       	mov    eax,0x16d
c00137d3:	85 d2                	test   edx,edx
c00137d5:	75 0b                	jne    c00137e2 <datetimeToSeconds(datetime_t)+0x10d>
c00137d7:	66 83 fb 01          	cmp    bx,0x1
c00137db:	19 c0                	sbb    eax,eax
c00137dd:	05 6e 01 00 00       	add    eax,0x16e
c00137e2:	29 c1                	sub    ecx,eax
c00137e4:	b8 80 51 01 00       	mov    eax,0x15180
c00137e9:	f7 e9                	imul   ecx
c00137eb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00137ef:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00137f3:	83 c4 14             	add    esp,0x14
c00137f6:	5b                   	pop    ebx
c00137f7:	5e                   	pop    esi
c00137f8:	5f                   	pop    edi
c00137f9:	5d                   	pop    ebp
c00137fa:	c3                   	ret    
c00137fb:	90                   	nop

c00137fc <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00137fc:	57                   	push   edi
c00137fd:	56                   	push   esi
c00137fe:	53                   	push   ebx
c00137ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013803:	8b 06                	mov    eax,DWORD PTR [esi]
c0013805:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001380c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013810:	e8 c0 fe ff ff       	call   c00136d5 <datetimeToSeconds(datetime_t)>
c0013815:	59                   	pop    ecx
c0013816:	0f b6 0d 3c db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002db3c
c001381d:	5b                   	pop    ebx
c001381e:	03 0d 40 db 02 c0    	add    ecx,DWORD PTR ds:0xc002db40
c0013824:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001382a:	89 cb                	mov    ebx,ecx
c001382c:	c1 fb 1f             	sar    ebx,0x1f
c001382f:	29 c8                	sub    eax,ecx
c0013831:	19 da                	sbb    edx,ebx
c0013833:	31 c9                	xor    ecx,ecx
c0013835:	80 3d 3d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db3d,0x0
c001383c:	74 05                	je     c0013843 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001383e:	b9 08 07 00 00       	mov    ecx,0x708
c0013843:	31 db                	xor    ebx,ebx
c0013845:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013849:	29 c8                	sub    eax,ecx
c001384b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001384f:	19 da                	sbb    edx,ebx
c0013851:	89 f8                	mov    eax,edi
c0013853:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013857:	5b                   	pop    ebx
c0013858:	5e                   	pop    esi
c0013859:	5f                   	pop    edi
c001385a:	ff e0                	jmp    eax

c001385c <secondsToDatetime(unsigned long long)>:
c001385c:	55                   	push   ebp
c001385d:	57                   	push   edi
c001385e:	56                   	push   esi
c001385f:	53                   	push   ebx
c0013860:	83 ec 1c             	sub    esp,0x1c
c0013863:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013867:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001386b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001386f:	6a 00                	push   0x0
c0013871:	68 80 51 01 00       	push   0x15180
c0013876:	55                   	push   ebp
c0013877:	57                   	push   edi
c0013878:	e8 a7 2e 01 00       	call   c0026724 <__udivdi3>
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013886:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001388a:	6a 00                	push   0x0
c001388c:	68 80 51 01 00       	push   0x15180
c0013891:	55                   	push   ebp
c0013892:	57                   	push   edi
c0013893:	bf 10 0e 00 00       	mov    edi,0xe10
c0013898:	e8 87 2f 01 00       	call   c0026824 <__umoddi3>
c001389d:	83 c4 10             	add    esp,0x10
c00138a0:	99                   	cdq    
c00138a1:	f7 ff                	idiv   edi
c00138a3:	bf 3c 00 00 00       	mov    edi,0x3c
c00138a8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00138ab:	89 d0                	mov    eax,edx
c00138ad:	99                   	cdq    
c00138ae:	f7 ff                	idiv   edi
c00138b0:	85 db                	test   ebx,ebx
c00138b2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00138b5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00138b8:	79 11                	jns    c00138cb <secondsToDatetime(unsigned long long)+0x6f>
c00138ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00138be:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00138c4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138c9:	eb 07                	jmp    c00138d2 <secondsToDatetime(unsigned long long)+0x76>
c00138cb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138d0:	89 d8                	mov    eax,ebx
c00138d2:	bf b4 05 00 00       	mov    edi,0x5b4
c00138d7:	99                   	cdq    
c00138d8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00138dd:	f7 f9                	idiv   ecx
c00138df:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00138e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138e8:	31 d2                	xor    edx,edx
c00138ea:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00138f2:	01 c3                	add    ebx,eax
c00138f4:	89 d8                	mov    eax,ebx
c00138f6:	f7 f1                	div    ecx
c00138f8:	31 d2                	xor    edx,edx
c00138fa:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00138fd:	89 d8                	mov    eax,ebx
c00138ff:	f7 f7                	div    edi
c0013901:	31 d2                	xor    edx,edx
c0013903:	29 c1                	sub    ecx,eax
c0013905:	89 d8                	mov    eax,ebx
c0013907:	f7 f5                	div    ebp
c0013909:	bd 6d 01 00 00       	mov    ebp,0x16d
c001390e:	29 c1                	sub    ecx,eax
c0013910:	31 d2                	xor    edx,edx
c0013912:	89 c8                	mov    eax,ecx
c0013914:	f7 f5                	div    ebp
c0013916:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001391b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001391f:	31 d2                	xor    edx,edx
c0013921:	89 c8                	mov    eax,ecx
c0013923:	f7 f5                	div    ebp
c0013925:	31 d2                	xor    edx,edx
c0013927:	01 c3                	add    ebx,eax
c0013929:	89 c8                	mov    eax,ecx
c001392b:	f7 f7                	div    edi
c001392d:	bf 99 00 00 00       	mov    edi,0x99
c0013932:	29 c3                	sub    ebx,eax
c0013934:	31 d2                	xor    edx,edx
c0013936:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001393e:	29 c3                	sub    ebx,eax
c0013940:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013943:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013946:	bb 05 00 00 00       	mov    ebx,0x5
c001394b:	83 c1 02             	add    ecx,0x2
c001394e:	89 c8                	mov    eax,ecx
c0013950:	f7 f7                	div    edi
c0013952:	31 d2                	xor    edx,edx
c0013954:	89 c7                	mov    edi,eax
c0013956:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001395c:	83 c0 02             	add    eax,0x2
c001395f:	f7 f3                	div    ebx
c0013961:	89 eb                	mov    ebx,ebp
c0013963:	29 c3                	sub    ebx,eax
c0013965:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001396b:	88 1e                	mov    BYTE PTR [esi],bl
c001396d:	19 c0                	sbb    eax,eax
c001396f:	31 d2                	xor    edx,edx
c0013971:	83 e0 0c             	and    eax,0xc
c0013974:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013978:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013980:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013984:	83 f9 01             	cmp    ecx,0x1
c0013987:	0f 96 c2             	setbe  dl
c001398a:	41                   	inc    ecx
c001398b:	01 d0                	add    eax,edx
c001398d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013990:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013994:	83 c4 1c             	add    esp,0x1c
c0013997:	89 f0                	mov    eax,esi
c0013999:	5b                   	pop    ebx
c001399a:	5e                   	pop    esi
c001399b:	5f                   	pop    edi
c001399c:	5d                   	pop    ebp
c001399d:	c2 04 00             	ret    0x4

c00139a0 <Clock::timeInDatetimeLocal()>:
c00139a0:	53                   	push   ebx
c00139a1:	83 ec 14             	sub    esp,0x14
c00139a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139ac:	e8 83 fc ff ff       	call   c0013634 <Clock::timeInSecondsLocal()>
c00139b1:	83 c4 0c             	add    esp,0xc
c00139b4:	52                   	push   edx
c00139b5:	50                   	push   eax
c00139b6:	53                   	push   ebx
c00139b7:	e8 a0 fe ff ff       	call   c001385c <secondsToDatetime(unsigned long long)>
c00139bc:	89 d8                	mov    eax,ebx
c00139be:	83 c4 14             	add    esp,0x14
c00139c1:	5b                   	pop    ebx
c00139c2:	c2 04 00             	ret    0x4
c00139c5:	90                   	nop

c00139c6 <Device::hibernate()>:
c00139c6:	c3                   	ret    
c00139c7:	90                   	nop

c00139c8 <Device::wake()>:
c00139c8:	c3                   	ret    
c00139c9:	90                   	nop

c00139ca <Device::detect()>:
c00139ca:	c3                   	ret    
c00139cb:	90                   	nop

c00139cc <Device::disableLegacy()>:
c00139cc:	c3                   	ret    
c00139cd:	90                   	nop

c00139ce <Device::powerSaving(PowerSavingLevel)>:
c00139ce:	c3                   	ret    
c00139cf:	90                   	nop

c00139d0 <DriverlessDevice::close(int, int, void*)>:
c00139d0:	31 c0                	xor    eax,eax
c00139d2:	c3                   	ret    
c00139d3:	90                   	nop

c00139d4 <DriverlessDevice::detect()>:
c00139d4:	c3                   	ret    
c00139d5:	90                   	nop

c00139d6 <DriverlessDevice::open(int, int, void*)>:
c00139d6:	83 ec 18             	sub    esp,0x18
c00139d9:	68 70 aa 02 c0       	push   0xc002aa70
c00139de:	e8 6c 64 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c00139e3:	83 c8 ff             	or     eax,0xffffffff
c00139e6:	83 c4 1c             	add    esp,0x1c
c00139e9:	c3                   	ret    

c00139ea <Device::~Device()>:
c00139ea:	ba d0 aa 02 c0       	mov    edx,0xc002aad0
c00139ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139f3:	89 10                	mov    DWORD PTR [eax],edx
c00139f5:	90                   	nop
c00139f6:	c3                   	ret    
c00139f7:	90                   	nop

c00139f8 <Device::~Device()>:
c00139f8:	83 ec 0c             	sub    esp,0xc
c00139fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139ff:	e8 e6 ff ff ff       	call   c00139ea <Device::~Device()>
c0013a04:	83 c4 04             	add    esp,0x4
c0013a07:	83 ec 08             	sub    esp,0x8
c0013a0a:	68 58 01 00 00       	push   0x158
c0013a0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a13:	e8 f3 eb ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0013a18:	83 c4 10             	add    esp,0x10
c0013a1b:	83 c4 0c             	add    esp,0xc
c0013a1e:	c3                   	ret    
c0013a1f:	90                   	nop

c0013a20 <Device::findAndLoadDriver()>:
c0013a20:	c7 44 24 04 8e aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aa8e
c0013a28:	e9 b6 ec ff ff       	jmp    c00126e3 <Dbg::kprintf(char const*, ...)>
c0013a2d:	90                   	nop

c0013a2e <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a2e:	57                   	push   edi
c0013a2f:	b9 09 00 00 00       	mov    ecx,0x9
c0013a34:	56                   	push   esi
c0013a35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a39:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a3d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a47:	81 c7 18 01 00 00    	add    edi,0x118
c0013a4d:	fc                   	cld    
c0013a4e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a50:	5e                   	pop    esi
c0013a51:	5f                   	pop    edi
c0013a52:	c3                   	ret    
c0013a53:	90                   	nop

c0013a54 <Device::preOpenACPI(void*, char*, char*)>:
c0013a54:	57                   	push   edi
c0013a55:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013a5a:	56                   	push   esi
c0013a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a63:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013a6d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013a73:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013a79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a7f:	b9 0e 00 00 00       	mov    ecx,0xe
c0013a84:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013a8a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013a8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a90:	5e                   	pop    esi
c0013a91:	5f                   	pop    edi
c0013a92:	c3                   	ret    
c0013a93:	90                   	nop

c0013a94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a98:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a9d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013aa4:	75 0b                	jne    c0013ab1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013aa8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013aac:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013aaf:	eb 1e                	jmp    c0013acf <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013ab1:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0013ab6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013abc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ac2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ac4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ac8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013acc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013acf:	ff e0                	jmp    eax
c0013ad1:	90                   	nop

c0013ad2 <Device::getParent()>:
c0013ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ad6:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013adc:	c3                   	ret    
c0013add:	90                   	nop

c0013ade <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ae2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ae7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013aee:	75 0b                	jne    c0013afb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013af2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013af6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013af9:	eb 1e                	jmp    c0013b19 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013afb:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0013b00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b06:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b0e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b16:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b19:	ff e0                	jmp    eax
c0013b1b:	90                   	nop

c0013b1c <Device::addChild(Device*)>:
c0013b1c:	53                   	push   ebx
c0013b1d:	83 ec 08             	sub    esp,0x8
c0013b20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b28:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b2e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b34:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b36:	85 d2                	test   edx,edx
c0013b38:	74 04                	je     c0013b3e <Device::addChild(Device*)+0x22>
c0013b3a:	89 d3                	mov    ebx,edx
c0013b3c:	eb f6                	jmp    c0013b34 <Device::addChild(Device*)+0x18>
c0013b3e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b41:	83 ec 0c             	sub    esp,0xc
c0013b44:	6a 08                	push   0x8
c0013b46:	e8 4e ba ff ff       	call   c000f599 <malloc>
c0013b4b:	89 03                	mov    DWORD PTR [ebx],eax
c0013b4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b5a:	83 c4 18             	add    esp,0x18
c0013b5d:	5b                   	pop    ebx
c0013b5e:	c3                   	ret    
c0013b5f:	90                   	nop

c0013b60 <Device::removeAllChildren()>:
c0013b60:	56                   	push   esi
c0013b61:	53                   	push   ebx
c0013b62:	52                   	push   edx
c0013b63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b67:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013b6d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b70:	74 17                	je     c0013b89 <Device::removeAllChildren()+0x29>
c0013b72:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013b75:	85 c0                	test   eax,eax
c0013b77:	74 0c                	je     c0013b85 <Device::removeAllChildren()+0x25>
c0013b79:	83 ec 0c             	sub    esp,0xc
c0013b7c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b7e:	50                   	push   eax
c0013b7f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013b82:	83 c4 10             	add    esp,0x10
c0013b85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b87:	eb e4                	jmp    c0013b6d <Device::removeAllChildren()+0xd>
c0013b89:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b95:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ba2:	58                   	pop    eax
c0013ba3:	5b                   	pop    ebx
c0013ba4:	5e                   	pop    esi
c0013ba5:	c3                   	ret    

c0013ba6 <Device::hibernateAll()>:
c0013ba6:	53                   	push   ebx
c0013ba7:	83 ec 14             	sub    esp,0x14
c0013baa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb0:	53                   	push   ebx
c0013bb1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013bb4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bba:	83 c4 10             	add    esp,0x10
c0013bbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bc0:	74 0f                	je     c0013bd1 <Device::hibernateAll()+0x2b>
c0013bc2:	83 ec 0c             	sub    esp,0xc
c0013bc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bc8:	e8 d9 ff ff ff       	call   c0013ba6 <Device::hibernateAll()>
c0013bcd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bcf:	eb e9                	jmp    c0013bba <Device::hibernateAll()+0x14>
c0013bd1:	83 c4 08             	add    esp,0x8
c0013bd4:	5b                   	pop    ebx
c0013bd5:	c3                   	ret    

c0013bd6 <Device::wakeAll()>:
c0013bd6:	53                   	push   ebx
c0013bd7:	83 ec 14             	sub    esp,0x14
c0013bda:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013be0:	53                   	push   ebx
c0013be1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013be4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bea:	83 c4 10             	add    esp,0x10
c0013bed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bf0:	74 0f                	je     c0013c01 <Device::wakeAll()+0x2b>
c0013bf2:	83 ec 0c             	sub    esp,0xc
c0013bf5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bf8:	e8 d9 ff ff ff       	call   c0013bd6 <Device::wakeAll()>
c0013bfd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bff:	eb e9                	jmp    c0013bea <Device::wakeAll()+0x14>
c0013c01:	83 c4 08             	add    esp,0x8
c0013c04:	5b                   	pop    ebx
c0013c05:	c3                   	ret    

c0013c06 <Device::detectAll()>:
c0013c06:	53                   	push   ebx
c0013c07:	83 ec 14             	sub    esp,0x14
c0013c0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c10:	53                   	push   ebx
c0013c11:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c14:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c1a:	83 c4 10             	add    esp,0x10
c0013c1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c20:	74 0f                	je     c0013c31 <Device::detectAll()+0x2b>
c0013c22:	83 ec 0c             	sub    esp,0xc
c0013c25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c28:	e8 d9 ff ff ff       	call   c0013c06 <Device::detectAll()>
c0013c2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c2f:	eb e9                	jmp    c0013c1a <Device::detectAll()+0x14>
c0013c31:	83 c4 08             	add    esp,0x8
c0013c34:	5b                   	pop    ebx
c0013c35:	c3                   	ret    

c0013c36 <Device::disableLegacyAll()>:
c0013c36:	53                   	push   ebx
c0013c37:	83 ec 14             	sub    esp,0x14
c0013c3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c40:	53                   	push   ebx
c0013c41:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c4a:	83 c4 10             	add    esp,0x10
c0013c4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c50:	74 0f                	je     c0013c61 <Device::disableLegacyAll()+0x2b>
c0013c52:	83 ec 0c             	sub    esp,0xc
c0013c55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c58:	e8 d9 ff ff ff       	call   c0013c36 <Device::disableLegacyAll()>
c0013c5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c5f:	eb e9                	jmp    c0013c4a <Device::disableLegacyAll()+0x14>
c0013c61:	83 c4 08             	add    esp,0x8
c0013c64:	5b                   	pop    ebx
c0013c65:	c3                   	ret    

c0013c66 <Device::loadDriversForAll()>:
c0013c66:	53                   	push   ebx
c0013c67:	83 ec 08             	sub    esp,0x8
c0013c6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c6e:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013c75:	75 0c                	jne    c0013c83 <Device::loadDriversForAll()+0x1d>
c0013c77:	83 ec 0c             	sub    esp,0xc
c0013c7a:	53                   	push   ebx
c0013c7b:	e8 a0 fd ff ff       	call   c0013a20 <Device::findAndLoadDriver()>
c0013c80:	83 c4 10             	add    esp,0x10
c0013c83:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c8c:	74 12                	je     c0013ca0 <Device::loadDriversForAll()+0x3a>
c0013c8e:	83 ec 0c             	sub    esp,0xc
c0013c91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c94:	e8 cd ff ff ff       	call   c0013c66 <Device::loadDriversForAll()>
c0013c99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c9b:	83 c4 10             	add    esp,0x10
c0013c9e:	eb e9                	jmp    c0013c89 <Device::loadDriversForAll()+0x23>
c0013ca0:	83 c4 08             	add    esp,0x8
c0013ca3:	5b                   	pop    ebx
c0013ca4:	c3                   	ret    
c0013ca5:	90                   	nop

c0013ca6 <Device::closeAll()>:
c0013ca6:	53                   	push   ebx
c0013ca7:	83 ec 08             	sub    esp,0x8
c0013caa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cb0:	6a 00                	push   0x0
c0013cb2:	6a 00                	push   0x0
c0013cb4:	6a 00                	push   0x0
c0013cb6:	53                   	push   ebx
c0013cb7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cc0:	83 c4 10             	add    esp,0x10
c0013cc3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cc6:	74 0f                	je     c0013cd7 <Device::closeAll()+0x31>
c0013cc8:	83 ec 0c             	sub    esp,0xc
c0013ccb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cce:	e8 d3 ff ff ff       	call   c0013ca6 <Device::closeAll()>
c0013cd3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cd5:	eb e9                	jmp    c0013cc0 <Device::closeAll()+0x1a>
c0013cd7:	83 c4 08             	add    esp,0x8
c0013cda:	5b                   	pop    ebx
c0013cdb:	c3                   	ret    

c0013cdc <Device::powerSavingAll(PowerSavingLevel)>:
c0013cdc:	56                   	push   esi
c0013cdd:	53                   	push   ebx
c0013cde:	83 ec 0c             	sub    esp,0xc
c0013ce1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ce5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ce9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ceb:	56                   	push   esi
c0013cec:	53                   	push   ebx
c0013ced:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013cf0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cf6:	83 c4 10             	add    esp,0x10
c0013cf9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cfc:	74 0f                	je     c0013d0d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013cfe:	52                   	push   edx
c0013cff:	52                   	push   edx
c0013d00:	56                   	push   esi
c0013d01:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d04:	e8 d3 ff ff ff       	call   c0013cdc <Device::powerSavingAll(PowerSavingLevel)>
c0013d09:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d0b:	eb e9                	jmp    c0013cf6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d0d:	58                   	pop    eax
c0013d0e:	5b                   	pop    ebx
c0013d0f:	5e                   	pop    esi
c0013d10:	c3                   	ret    
c0013d11:	90                   	nop

c0013d12 <Device::setName(char const*)>:
c0013d12:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d1a:	e9 ed ca fe ff       	jmp    c000080c <strcpy>
c0013d1f:	90                   	nop

c0013d20 <Device::Device(char const*)>:
c0013d20:	83 ec 1c             	sub    esp,0x1c
c0013d23:	ba d0 aa 02 c0       	mov    edx,0xc002aad0
c0013d28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d2c:	89 10                	mov    DWORD PTR [eax],edx
c0013d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d32:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d40:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d4e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d5c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d66:	83 ec 08             	sub    esp,0x8
c0013d69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d71:	e8 9c ff ff ff       	call   c0013d12 <Device::setName(char const*)>
c0013d76:	83 c4 10             	add    esp,0x10
c0013d79:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013d81:	83 ec 0c             	sub    esp,0xc
c0013d84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d88:	e8 0c b8 ff ff       	call   c000f599 <malloc>
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013da1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013da7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dab:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013db1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013db7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dbb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013dc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013dc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dcc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dd7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013df0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013dfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dfe:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e0c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013e16:	90                   	nop
c0013e17:	83 c4 1c             	add    esp,0x1c
c0013e1a:	c3                   	ret    
c0013e1b:	90                   	nop

c0013e1c <Device::getName()>:
c0013e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e20:	05 d0 00 00 00       	add    eax,0xd0
c0013e25:	c3                   	ret    

c0013e26 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e26:	83 ec 0c             	sub    esp,0xc
c0013e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2d:	83 ec 08             	sub    esp,0x8
c0013e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e34:	50                   	push   eax
c0013e35:	e8 e6 fe ff ff       	call   c0013d20 <Device::Device(char const*)>
c0013e3a:	83 c4 10             	add    esp,0x10
c0013e3d:	ba fc aa 02 c0       	mov    edx,0xc002aafc
c0013e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e46:	89 10                	mov    DWORD PTR [eax],edx
c0013e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e56:	90                   	nop
c0013e57:	83 c4 0c             	add    esp,0xc
c0013e5a:	c3                   	ret    
c0013e5b:	90                   	nop

c0013e5c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e5c:	57                   	push   edi
c0013e5d:	56                   	push   esi
c0013e5e:	53                   	push   ebx
c0013e5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e63:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e67:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e6b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e71:	75 0c                	jne    c0013e7f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e73:	52                   	push   edx
c0013e74:	52                   	push   edx
c0013e75:	53                   	push   ebx
c0013e76:	56                   	push   esi
c0013e77:	e8 e4 47 01 00       	call   c0028660 <LinkedList<Device>::addElement(Device*)>
c0013e7c:	83 c4 10             	add    esp,0x10
c0013e7f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e88:	74 12                	je     c0013e9c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013e8a:	50                   	push   eax
c0013e8b:	57                   	push   edi
c0013e8c:	56                   	push   esi
c0013e8d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e90:	e8 c7 ff ff ff       	call   c0013e5c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e95:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e97:	83 c4 10             	add    esp,0x10
c0013e9a:	eb e9                	jmp    c0013e85 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013e9c:	5b                   	pop    ebx
c0013e9d:	5e                   	pop    esi
c0013e9e:	5f                   	pop    edi
c0013e9f:	c3                   	ret    

c0013ea0 <getDevicesOfType(DeviceType)>:
c0013ea0:	53                   	push   ebx
c0013ea1:	83 ec 14             	sub    esp,0x14
c0013ea4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ea8:	53                   	push   ebx
c0013ea9:	e8 8e 48 01 00       	call   c002873c <LinkedList<Device>::LinkedList()>
c0013eae:	83 c4 0c             	add    esp,0xc
c0013eb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eb5:	53                   	push   ebx
c0013eb6:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c0013ebc:	e8 9b ff ff ff       	call   c0013e5c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ec1:	89 d8                	mov    eax,ebx
c0013ec3:	83 c4 18             	add    esp,0x18
c0013ec6:	5b                   	pop    ebx
c0013ec7:	c2 04 00             	ret    0x4

c0013eca <HardDiskController::HardDiskController(char const*)>:
c0013eca:	83 ec 0c             	sub    esp,0xc
c0013ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed1:	83 ec 08             	sub    esp,0x8
c0013ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ed8:	50                   	push   eax
c0013ed9:	e8 42 fe ff ff       	call   c0013d20 <Device::Device(char const*)>
c0013ede:	83 c4 10             	add    esp,0x10
c0013ee1:	ba 28 ab 02 c0       	mov    edx,0xc002ab28
c0013ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eea:	89 10                	mov    DWORD PTR [eax],edx
c0013eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013efa:	90                   	nop
c0013efb:	83 c4 0c             	add    esp,0xc
c0013efe:	c3                   	ret    
c0013eff:	90                   	nop

c0013f00 <HardDiskController::~HardDiskController()>:
c0013f00:	83 ec 0c             	sub    esp,0xc
c0013f03:	ba 28 ab 02 c0       	mov    edx,0xc002ab28
c0013f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f0c:	89 10                	mov    DWORD PTR [eax],edx
c0013f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f12:	83 ec 0c             	sub    esp,0xc
c0013f15:	50                   	push   eax
c0013f16:	e8 cf fa ff ff       	call   c00139ea <Device::~Device()>
c0013f1b:	83 c4 10             	add    esp,0x10
c0013f1e:	90                   	nop
c0013f1f:	83 c4 0c             	add    esp,0xc
c0013f22:	c3                   	ret    
c0013f23:	90                   	nop

c0013f24 <HardDiskController::~HardDiskController()>:
c0013f24:	83 ec 0c             	sub    esp,0xc
c0013f27:	83 ec 0c             	sub    esp,0xc
c0013f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f2e:	e8 cd ff ff ff       	call   c0013f00 <HardDiskController::~HardDiskController()>
c0013f33:	83 c4 10             	add    esp,0x10
c0013f36:	83 ec 08             	sub    esp,0x8
c0013f39:	68 58 01 00 00       	push   0x158
c0013f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f42:	e8 c4 e6 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0013f47:	83 c4 10             	add    esp,0x10
c0013f4a:	83 c4 0c             	add    esp,0xc
c0013f4d:	c3                   	ret    

c0013f4e <PhysicalDisk::eject()>:
c0013f4e:	83 c8 ff             	or     eax,0xffffffff
c0013f51:	c3                   	ret    

c0013f52 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f52:	83 ec 0c             	sub    esp,0xc
c0013f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f59:	83 ec 08             	sub    esp,0x8
c0013f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f60:	50                   	push   eax
c0013f61:	e8 ba fd ff ff       	call   c0013d20 <Device::Device(char const*)>
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	ba 54 ab 02 c0       	mov    edx,0xc002ab54
c0013f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f72:	89 10                	mov    DWORD PTR [eax],edx
c0013f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f78:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f83:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fa0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013faa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fb4:	90                   	nop
c0013fb5:	83 c4 0c             	add    esp,0xc
c0013fb8:	c3                   	ret    
c0013fb9:	90                   	nop

c0013fba <PhysicalDisk::startCache()>:
c0013fba:	56                   	push   esi
c0013fbb:	53                   	push   ebx
c0013fbc:	83 ec 10             	sub    esp,0x10
c0013fbf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fc3:	6a 44                	push   0x44
c0013fc5:	e8 cf b5 ff ff       	call   c000f599 <malloc>
c0013fca:	89 c6                	mov    esi,eax
c0013fcc:	58                   	pop    eax
c0013fcd:	5a                   	pop    edx
c0013fce:	53                   	push   ebx
c0013fcf:	56                   	push   esi
c0013fd0:	e8 71 28 00 00       	call   c0016846 <VCache::VCache(PhysicalDisk*)>
c0013fd5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013fdb:	83 c4 14             	add    esp,0x14
c0013fde:	5b                   	pop    ebx
c0013fdf:	5e                   	pop    esi
c0013fe0:	c3                   	ret    
c0013fe1:	90                   	nop

c0013fe2 <PhysicalDisk::~PhysicalDisk()>:
c0013fe2:	83 ec 0c             	sub    esp,0xc
c0013fe5:	ba 54 ab 02 c0       	mov    edx,0xc002ab54
c0013fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fee:	89 10                	mov    DWORD PTR [eax],edx
c0013ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff4:	83 ec 0c             	sub    esp,0xc
c0013ff7:	50                   	push   eax
c0013ff8:	e8 ed f9 ff ff       	call   c00139ea <Device::~Device()>
c0013ffd:	83 c4 10             	add    esp,0x10
c0014000:	90                   	nop
c0014001:	83 c4 0c             	add    esp,0xc
c0014004:	c3                   	ret    
c0014005:	90                   	nop

c0014006 <PhysicalDisk::~PhysicalDisk()>:
c0014006:	83 ec 0c             	sub    esp,0xc
c0014009:	83 ec 0c             	sub    esp,0xc
c001400c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014010:	e8 cd ff ff ff       	call   c0013fe2 <PhysicalDisk::~PhysicalDisk()>
c0014015:	83 c4 10             	add    esp,0x10
c0014018:	83 ec 08             	sub    esp,0x8
c001401b:	68 6c 01 00 00       	push   0x16c
c0014020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014024:	e8 e2 e5 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0014029:	83 c4 10             	add    esp,0x10
c001402c:	83 c4 0c             	add    esp,0xc
c001402f:	c3                   	ret    

c0014030 <FPU::FPU(char const*)>:
c0014030:	83 ec 0c             	sub    esp,0xc
c0014033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014037:	83 ec 08             	sub    esp,0x8
c001403a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001403e:	50                   	push   eax
c001403f:	e8 dc fc ff ff       	call   c0013d20 <Device::Device(char const*)>
c0014044:	83 c4 10             	add    esp,0x10
c0014047:	ba 98 ab 02 c0       	mov    edx,0xc002ab98
c001404c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014050:	89 10                	mov    DWORD PTR [eax],edx
c0014052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014056:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014060:	90                   	nop
c0014061:	83 c4 0c             	add    esp,0xc
c0014064:	c3                   	ret    
c0014065:	90                   	nop

c0014066 <FPU::~FPU()>:
c0014066:	83 ec 0c             	sub    esp,0xc
c0014069:	ba 98 ab 02 c0       	mov    edx,0xc002ab98
c001406e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014072:	89 10                	mov    DWORD PTR [eax],edx
c0014074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014078:	83 ec 0c             	sub    esp,0xc
c001407b:	50                   	push   eax
c001407c:	e8 69 f9 ff ff       	call   c00139ea <Device::~Device()>
c0014081:	83 c4 10             	add    esp,0x10
c0014084:	90                   	nop
c0014085:	83 c4 0c             	add    esp,0xc
c0014088:	c3                   	ret    
c0014089:	90                   	nop

c001408a <FPU::~FPU()>:
c001408a:	83 ec 0c             	sub    esp,0xc
c001408d:	83 ec 0c             	sub    esp,0xc
c0014090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014094:	e8 cd ff ff ff       	call   c0014066 <FPU::~FPU()>
c0014099:	83 c4 10             	add    esp,0x10
c001409c:	83 ec 08             	sub    esp,0x8
c001409f:	68 58 01 00 00       	push   0x158
c00140a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140a8:	e8 5e e5 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c00140ad:	83 c4 10             	add    esp,0x10
c00140b0:	83 c4 0c             	add    esp,0xc
c00140b3:	c3                   	ret    

c00140b4 <setupFPU()>:
c00140b4:	53                   	push   ebx
c00140b5:	83 ec 08             	sub    esp,0x8
c00140b8:	8b 15 c8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c8
c00140be:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00140c5:	74 19                	je     c00140e0 <setupFPU()+0x2c>
c00140c7:	83 ec 0c             	sub    esp,0xc
c00140ca:	68 58 01 00 00       	push   0x158
c00140cf:	e8 c5 b4 ff ff       	call   c000f599 <malloc>
c00140d4:	89 c3                	mov    ebx,eax
c00140d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00140d9:	e8 ce 11 01 00       	call   c00252ac <AVX::AVX()>
c00140de:	eb 5b                	jmp    c001413b <setupFPU()+0x87>
c00140e0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140e6:	84 c0                	test   al,al
c00140e8:	79 19                	jns    c0014103 <setupFPU()+0x4f>
c00140ea:	83 ec 0c             	sub    esp,0xc
c00140ed:	68 58 01 00 00       	push   0x158
c00140f2:	e8 a2 b4 ff ff       	call   c000f599 <malloc>
c00140f7:	89 c3                	mov    ebx,eax
c00140f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00140fc:	e8 d1 12 01 00       	call   c00253d2 <SSE::SSE()>
c0014101:	eb 38                	jmp    c001413b <setupFPU()+0x87>
c0014103:	a8 20                	test   al,0x20
c0014105:	74 19                	je     c0014120 <setupFPU()+0x6c>
c0014107:	83 ec 0c             	sub    esp,0xc
c001410a:	68 58 01 00 00       	push   0x158
c001410f:	e8 85 b4 ff ff       	call   c000f599 <malloc>
c0014114:	89 c3                	mov    ebx,eax
c0014116:	89 04 24             	mov    DWORD PTR [esp],eax
c0014119:	e8 1e 12 01 00       	call   c002533c <MMX::MMX()>
c001411e:	eb 1b                	jmp    c001413b <setupFPU()+0x87>
c0014120:	a8 10                	test   al,0x10
c0014122:	74 1c                	je     c0014140 <setupFPU()+0x8c>
c0014124:	83 ec 0c             	sub    esp,0xc
c0014127:	68 58 01 00 00       	push   0x158
c001412c:	e8 68 b4 ff ff       	call   c000f599 <malloc>
c0014131:	89 c3                	mov    ebx,eax
c0014133:	89 04 24             	mov    DWORD PTR [esp],eax
c0014136:	e8 25 13 01 00       	call   c0025460 <x87::x87()>
c001413b:	83 c4 10             	add    esp,0x10
c001413e:	eb 24                	jmp    c0014164 <setupFPU()+0xb0>
c0014140:	83 e0 ef             	and    eax,0xffffffef
c0014143:	83 ec 0c             	sub    esp,0xc
c0014146:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001414c:	68 84 ab 02 c0       	push   0xc002ab84
c0014151:	e8 8d e5 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014156:	0f 20 c0             	mov    eax,cr0
c0014159:	83 c8 04             	or     eax,0x4
c001415c:	0f 22 c0             	mov    cr0,eax
c001415f:	31 db                	xor    ebx,ebx
c0014161:	83 c4 10             	add    esp,0x10
c0014164:	89 d8                	mov    eax,ebx
c0014166:	83 c4 08             	add    esp,0x8
c0014169:	5b                   	pop    ebx
c001416a:	c3                   	ret    
c001416b:	90                   	nop

c001416c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001416c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014170:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014174:	c1 e0 04             	shl    eax,0x4
c0014177:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001417b:	8d 50 10             	lea    edx,[eax+0x10]
c001417e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014184:	74 08                	je     c001418e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014186:	83 c0 04             	add    eax,0x4
c0014189:	39 d0                	cmp    eax,edx
c001418b:	75 f1                	jne    c001417e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001418d:	c3                   	ret    
c001418e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014198:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141a2:	eb e2                	jmp    c0014186 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00141a4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00141a4:	57                   	push   edi
c00141a5:	31 c0                	xor    eax,eax
c00141a7:	56                   	push   esi
c00141a8:	53                   	push   ebx
c00141a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141b5:	89 da                	mov    edx,ebx
c00141b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141bb:	c1 e2 04             	shl    edx,0x4
c00141be:	01 ca                	add    edx,ecx
c00141c0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00141c8:	74 16                	je     c00141e0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00141ca:	40                   	inc    eax
c00141cb:	83 f8 04             	cmp    eax,0x4
c00141ce:	75 f0                	jne    c00141c0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00141d0:	c7 44 24 10 c8 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002abc8
c00141d8:	5b                   	pop    ebx
c00141d9:	5e                   	pop    esi
c00141da:	5f                   	pop    edi
c00141db:	e9 6f 5c 00 00       	jmp    c0019e4f <Krnl::panic(char const*)>
c00141e0:	8d 04 98             	lea    eax,[eax+ebx*4]
c00141e3:	8d 04 81             	lea    eax,[ecx+eax*4]
c00141e6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00141ec:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00141f2:	5b                   	pop    ebx
c00141f3:	5e                   	pop    esi
c00141f4:	5f                   	pop    edi
c00141f5:	c3                   	ret    

c00141f6 <doubleFault(regs*, void*)>:
c00141f6:	55                   	push   ebp
c00141f7:	89 e5                	mov    ebp,esp
c00141f9:	83 ec 08             	sub    esp,0x8
c00141fc:	83 ec 0c             	sub    esp,0xc
c00141ff:	68 d5 ab 02 c0       	push   0xc002abd5
c0014204:	e8 46 5c 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0014209:	83 c4 10             	add    esp,0x10
c001420c:	90                   	nop
c001420d:	c9                   	leave  
c001420e:	c3                   	ret    
c001420f:	90                   	nop

c0014210 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014210:	56                   	push   esi
c0014211:	53                   	push   ebx
c0014212:	50                   	push   eax
c0014213:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014217:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001421b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014220:	75 35                	jne    c0014257 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014222:	8d 43 20             	lea    eax,[ebx+0x20]
c0014225:	31 d2                	xor    edx,edx
c0014227:	89 c1                	mov    ecx,eax
c0014229:	c1 e1 04             	shl    ecx,0x4
c001422c:	01 f1                	add    ecx,esi
c001422e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014236:	74 3e                	je     c0014276 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014238:	42                   	inc    edx
c0014239:	83 fa 04             	cmp    edx,0x4
c001423c:	75 f0                	jne    c001422e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001423e:	83 ec 0c             	sub    esp,0xc
c0014241:	68 ef ab 02 c0       	push   0xc002abef
c0014246:	e8 04 5c 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c001424b:	83 c4 10             	add    esp,0x10
c001424e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014253:	5a                   	pop    edx
c0014254:	5b                   	pop    ebx
c0014255:	5e                   	pop    esi
c0014256:	c3                   	ret    
c0014257:	83 ec 0c             	sub    esp,0xc
c001425a:	56                   	push   esi
c001425b:	e8 bc fb ff ff       	call   c0013e1c <Device::getName()>
c0014260:	83 c4 10             	add    esp,0x10
c0014263:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014266:	75 ba                	jne    c0014222 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014268:	83 fb 0f             	cmp    ebx,0xf
c001426b:	7f 29                	jg     c0014296 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001426d:	0f b6 9b 20 cc 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd33e0]
c0014274:	eb ac                	jmp    c0014222 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014276:	8d 04 82             	lea    eax,[edx+eax*4]
c0014279:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001427d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014280:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014286:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001428a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014290:	89 d8                	mov    eax,ebx
c0014292:	5a                   	pop    edx
c0014293:	5b                   	pop    ebx
c0014294:	5e                   	pop    esi
c0014295:	c3                   	ret    
c0014296:	83 ec 0c             	sub    esp,0xc
c0014299:	68 e2 ab 02 c0       	push   0xc002abe2
c001429e:	e8 ac 5b 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c00142a3:	83 c4 10             	add    esp,0x10
c00142a6:	e9 77 ff ff ff       	jmp    c0014222 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142ab:	90                   	nop

c00142ac <InterruptController::clearAllHandlers(int, bool)>:
c00142ac:	56                   	push   esi
c00142ad:	53                   	push   ebx
c00142ae:	52                   	push   edx
c00142af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142b7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142bc:	75 61                	jne    c001431f <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142be:	8d 46 20             	lea    eax,[esi+0x20]
c00142c1:	c1 e6 04             	shl    esi,0x4
c00142c4:	c1 e0 04             	shl    eax,0x4
c00142c7:	01 de                	add    esi,ebx
c00142c9:	01 d8                	add    eax,ebx
c00142cb:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00142d5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00142df:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00142e9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00142f3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00142fd:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014307:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014311:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001431b:	58                   	pop    eax
c001431c:	5b                   	pop    ebx
c001431d:	5e                   	pop    esi
c001431e:	c3                   	ret    
c001431f:	83 ec 0c             	sub    esp,0xc
c0014322:	53                   	push   ebx
c0014323:	e8 f4 fa ff ff       	call   c0013e1c <Device::getName()>
c0014328:	83 c4 10             	add    esp,0x10
c001432b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001432e:	75 8e                	jne    c00142be <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014330:	83 fe 0f             	cmp    esi,0xf
c0014333:	7f 09                	jg     c001433e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014335:	0f b6 b6 20 cc 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd33e0]
c001433c:	eb 80                	jmp    c00142be <InterruptController::clearAllHandlers(int, bool)+0x12>
c001433e:	83 ec 0c             	sub    esp,0xc
c0014341:	68 fc ab 02 c0       	push   0xc002abfc
c0014346:	e8 04 5b 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c001434b:	83 c4 10             	add    esp,0x10
c001434e:	e9 6b ff ff ff       	jmp    c00142be <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014353:	90                   	nop

c0014354 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014354:	56                   	push   esi
c0014355:	53                   	push   ebx
c0014356:	52                   	push   edx
c0014357:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001435b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001435f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014364:	75 3a                	jne    c00143a0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014366:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001436a:	8d 50 20             	lea    edx,[eax+0x20]
c001436d:	c1 e2 04             	shl    edx,0x4
c0014370:	8d 04 16             	lea    eax,[esi+edx*1]
c0014373:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014377:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001437d:	74 0b                	je     c001438a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001437f:	83 c0 04             	add    eax,0x4
c0014382:	39 d0                	cmp    eax,edx
c0014384:	75 f1                	jne    c0014377 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014386:	58                   	pop    eax
c0014387:	5b                   	pop    ebx
c0014388:	5e                   	pop    esi
c0014389:	c3                   	ret    
c001438a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014394:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001439e:	eb df                	jmp    c001437f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00143a0:	83 ec 0c             	sub    esp,0xc
c00143a3:	56                   	push   esi
c00143a4:	e8 73 fa ff ff       	call   c0013e1c <Device::getName()>
c00143a9:	83 c4 10             	add    esp,0x10
c00143ac:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143af:	75 b5                	jne    c0014366 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143b1:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00143b6:	7f 11                	jg     c00143c9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00143b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143bc:	0f b6 80 20 cc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd33e0]
c00143c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143c7:	eb 9d                	jmp    c0014366 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143c9:	83 ec 0c             	sub    esp,0xc
c00143cc:	68 09 ac 02 c0       	push   0xc002ac09
c00143d1:	e8 79 5a 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c00143d6:	83 c4 10             	add    esp,0x10
c00143d9:	eb 8b                	jmp    c0014366 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00143db <nmiHandler(regs*, void*)>:
c00143db:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00143e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143e4:	e9 17 a9 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00143e9 <int_handler>:
c00143e9:	55                   	push   ebp
c00143ea:	57                   	push   edi
c00143eb:	56                   	push   esi
c00143ec:	53                   	push   ebx
c00143ed:	83 ec 0c             	sub    esp,0xc
c00143f0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00143f4:	80 3d 04 05 03 c0 00 	cmp    BYTE PTR ds:0xc0030504,0x0
c00143fb:	74 0b                	je     c0014408 <int_handler+0x1f>
c00143fd:	fa                   	cli    
c00143fe:	f4                   	hlt    
c00143ff:	80 3d 04 05 03 c0 00 	cmp    BYTE PTR ds:0xc0030504,0x0
c0014406:	75 f5                	jne    c00143fd <int_handler+0x14>
c0014408:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001440d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014410:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014416:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001441c:	8d 43 e0             	lea    eax,[ebx-0x20]
c001441f:	83 f8 17             	cmp    eax,0x17
c0014422:	77 13                	ja     c0014437 <int_handler+0x4e>
c0014424:	83 ec 08             	sub    esp,0x8
c0014427:	8b 17                	mov    edx,DWORD PTR [edi]
c0014429:	8d 43 e0             	lea    eax,[ebx-0x20]
c001442c:	0f b6 c0             	movzx  eax,al
c001442f:	50                   	push   eax
c0014430:	57                   	push   edi
c0014431:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014434:	83 c4 10             	add    esp,0x10
c0014437:	83 c3 15             	add    ebx,0x15
c001443a:	c1 e3 04             	shl    ebx,0x4
c001443d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014441:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014448:	31 db                	xor    ebx,ebx
c001444a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001444e:	85 c0                	test   eax,eax
c0014450:	74 13                	je     c0014465 <int_handler+0x7c>
c0014452:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014455:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014459:	74 1c                	je     c0014477 <int_handler+0x8e>
c001445b:	83 ec 08             	sub    esp,0x8
c001445e:	52                   	push   edx
c001445f:	56                   	push   esi
c0014460:	ff d0                	call   eax
c0014462:	83 c4 10             	add    esp,0x10
c0014465:	43                   	inc    ebx
c0014466:	83 fb 04             	cmp    ebx,0x4
c0014469:	75 df                	jne    c001444a <int_handler+0x61>
c001446b:	83 c4 0c             	add    esp,0xc
c001446e:	31 c0                	xor    eax,eax
c0014470:	5b                   	pop    ebx
c0014471:	31 d2                	xor    edx,edx
c0014473:	5e                   	pop    esi
c0014474:	5f                   	pop    edi
c0014475:	5d                   	pop    ebp
c0014476:	c3                   	ret    
c0014477:	83 ec 08             	sub    esp,0x8
c001447a:	52                   	push   edx
c001447b:	56                   	push   esi
c001447c:	ff d0                	call   eax
c001447e:	83 c4 10             	add    esp,0x10
c0014481:	83 c4 0c             	add    esp,0xc
c0014484:	5b                   	pop    ebx
c0014485:	5e                   	pop    esi
c0014486:	5f                   	pop    edi
c0014487:	5d                   	pop    ebp
c0014488:	c3                   	ret    
c0014489:	90                   	nop

c001448a <InterruptController::InterruptController(char const*)>:
c001448a:	83 ec 1c             	sub    esp,0x1c
c001448d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014491:	83 ec 08             	sub    esp,0x8
c0014494:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014498:	50                   	push   eax
c0014499:	e8 82 f8 ff ff       	call   c0013d20 <Device::Device(char const*)>
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	ba c4 ae 02 c0       	mov    edx,0xc002aec4
c00144a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144aa:	89 10                	mov    DWORD PTR [eax],edx
c00144ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144c2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00144ca:	7f 5e                	jg     c001452a <InterruptController::InterruptController(char const*)+0xa0>
c00144cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00144d9:	7f 49                	jg     c0014524 <InterruptController::InterruptController(char const*)+0x9a>
c00144db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144e3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144ee:	01 ca                	add    edx,ecx
c00144f0:	83 c2 54             	add    edx,0x54
c00144f3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014503:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001450a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001450e:	01 ca                	add    edx,ecx
c0014510:	81 c2 54 04 00 00    	add    edx,0x454
c0014516:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001451e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014522:	eb b0                	jmp    c00144d4 <InterruptController::InterruptController(char const*)+0x4a>
c0014524:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014528:	eb 98                	jmp    c00144c2 <InterruptController::InterruptController(char const*)+0x38>
c001452a:	90                   	nop
c001452b:	83 c4 1c             	add    esp,0x1c
c001452e:	c3                   	ret    
c001452f:	90                   	nop

c0014530 <InterruptController::~InterruptController()>:
c0014530:	83 ec 0c             	sub    esp,0xc
c0014533:	ba c4 ae 02 c0       	mov    edx,0xc002aec4
c0014538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001453c:	89 10                	mov    DWORD PTR [eax],edx
c001453e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014542:	83 ec 0c             	sub    esp,0xc
c0014545:	50                   	push   eax
c0014546:	e8 9f f4 ff ff       	call   c00139ea <Device::~Device()>
c001454b:	83 c4 10             	add    esp,0x10
c001454e:	90                   	nop
c001454f:	83 c4 0c             	add    esp,0xc
c0014552:	c3                   	ret    
c0014553:	90                   	nop

c0014554 <InterruptController::~InterruptController()>:
c0014554:	83 ec 0c             	sub    esp,0xc
c0014557:	83 ec 0c             	sub    esp,0xc
c001455a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001455e:	e8 cd ff ff ff       	call   c0014530 <InterruptController::~InterruptController()>
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	83 ec 08             	sub    esp,0x8
c0014569:	68 58 21 00 00       	push   0x2158
c001456e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014572:	e8 94 e0 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0014577:	83 c4 10             	add    esp,0x10
c001457a:	83 c4 0c             	add    esp,0xc
c001457d:	c3                   	ret    

c001457e <displayDebugInfo(regs*)>:
c001457e:	55                   	push   ebp
c001457f:	57                   	push   edi
c0014580:	56                   	push   esi
c0014581:	53                   	push   ebx
c0014582:	83 ec 24             	sub    esp,0x24
c0014585:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014589:	0f 20 c2             	mov    edx,cr0
c001458c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014590:	0f 20 d7             	mov    edi,cr2
c0014593:	0f 20 de             	mov    esi,cr3
c0014596:	0f 20 e5             	mov    ebp,cr4
c0014599:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001459c:	68 16 ac 02 c0       	push   0xc002ac16
c00145a1:	e8 3d e1 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00145a6:	59                   	pop    ecx
c00145a7:	58                   	pop    eax
c00145a8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145ab:	68 21 ac 02 c0       	push   0xc002ac21
c00145b0:	e8 2e e1 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00145b5:	58                   	pop    eax
c00145b6:	5a                   	pop    edx
c00145b7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145ba:	68 2c ac 02 c0       	push   0xc002ac2c
c00145bf:	e8 1f e1 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00145c4:	59                   	pop    ecx
c00145c5:	58                   	pop    eax
c00145c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145c9:	68 37 ac 02 c0       	push   0xc002ac37
c00145ce:	e8 10 e1 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00145d3:	58                   	pop    eax
c00145d4:	5a                   	pop    edx
c00145d5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00145d8:	68 42 ac 02 c0       	push   0xc002ac42
c00145dd:	e8 01 e1 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00145e2:	59                   	pop    ecx
c00145e3:	58                   	pop    eax
c00145e4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00145e7:	68 4d ac 02 c0       	push   0xc002ac4d
c00145ec:	e8 f2 e0 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00145f1:	58                   	pop    eax
c00145f2:	5a                   	pop    edx
c00145f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145f6:	68 58 ac 02 c0       	push   0xc002ac58
c00145fb:	e8 e3 e0 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014600:	59                   	pop    ecx
c0014601:	58                   	pop    eax
c0014602:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014605:	68 63 ac 02 c0       	push   0xc002ac63
c001460a:	e8 d4 e0 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001460f:	58                   	pop    eax
c0014610:	5a                   	pop    edx
c0014611:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014614:	68 6e ac 02 c0       	push   0xc002ac6e
c0014619:	e8 c5 e0 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001461e:	59                   	pop    ecx
c001461f:	58                   	pop    eax
c0014620:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014623:	68 7d ac 02 c0       	push   0xc002ac7d
c0014628:	e8 b6 e0 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001462d:	58                   	pop    eax
c001462e:	5a                   	pop    edx
c001462f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014632:	68 88 ac 02 c0       	push   0xc002ac88
c0014637:	e8 a7 e0 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001463c:	59                   	pop    ecx
c001463d:	58                   	pop    eax
c001463e:	57                   	push   edi
c001463f:	68 93 ac 02 c0       	push   0xc002ac93
c0014644:	e8 9a e0 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014649:	58                   	pop    eax
c001464a:	5a                   	pop    edx
c001464b:	56                   	push   esi
c001464c:	68 9e ac 02 c0       	push   0xc002ac9e
c0014651:	e8 8d e0 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014656:	59                   	pop    ecx
c0014657:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001465c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014662:	e8 ec bc ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0014667:	58                   	pop    eax
c0014668:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001466b:	5a                   	pop    edx
c001466c:	c1 e0 05             	shl    eax,0x5
c001466f:	05 80 c9 02 c0       	add    eax,0xc002c980
c0014674:	50                   	push   eax
c0014675:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001467a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014680:	e8 db c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014685:	59                   	pop    ecx
c0014686:	58                   	pop    eax
c0014687:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001468c:	68 a9 ac 02 c0       	push   0xc002aca9
c0014691:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014697:	e8 c4 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001469c:	58                   	pop    eax
c001469d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146a2:	5a                   	pop    edx
c00146a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146a6:	83 c0 0c             	add    eax,0xc
c00146a9:	50                   	push   eax
c00146aa:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00146af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b5:	e8 a6 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146ba:	59                   	pop    ecx
c00146bb:	58                   	pop    eax
c00146bc:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00146c1:	68 b2 ac 02 c0       	push   0xc002acb2
c00146c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146cc:	e8 8f c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146d1:	58                   	pop    eax
c00146d2:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00146d7:	5a                   	pop    edx
c00146d8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e1:	e8 34 c1 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00146e6:	59                   	pop    ecx
c00146e7:	58                   	pop    eax
c00146e8:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00146ed:	68 ba ac 02 c0       	push   0xc002acba
c00146f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f8:	e8 63 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146fd:	58                   	pop    eax
c00146fe:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014703:	5a                   	pop    edx
c0014704:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014707:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470d:	e8 08 c1 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014712:	59                   	pop    ecx
c0014713:	58                   	pop    eax
c0014714:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014719:	68 c2 ac 02 c0       	push   0xc002acc2
c001471e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014724:	e8 37 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014729:	58                   	pop    eax
c001472a:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001472f:	5a                   	pop    edx
c0014730:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014733:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014739:	e8 dc c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001473e:	59                   	pop    ecx
c001473f:	58                   	pop    eax
c0014740:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014745:	68 ca ac 02 c0       	push   0xc002acca
c001474a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014750:	e8 0b c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014755:	58                   	pop    eax
c0014756:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001475b:	5a                   	pop    edx
c001475c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001475f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014765:	e8 b0 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001476a:	59                   	pop    ecx
c001476b:	58                   	pop    eax
c001476c:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014771:	68 d2 ac 02 c0       	push   0xc002acd2
c0014776:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001477c:	e8 df c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014781:	58                   	pop    eax
c0014782:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014787:	5a                   	pop    edx
c0014788:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001478b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014791:	e8 84 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014796:	59                   	pop    ecx
c0014797:	58                   	pop    eax
c0014798:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001479d:	68 da ac 02 c0       	push   0xc002acda
c00147a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a8:	e8 b3 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147ad:	58                   	pop    eax
c00147ae:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00147b3:	5a                   	pop    edx
c00147b4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00147b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147bd:	e8 58 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147c2:	59                   	pop    ecx
c00147c3:	58                   	pop    eax
c00147c4:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00147c9:	68 e2 ac 02 c0       	push   0xc002ace2
c00147ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d4:	e8 87 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147d9:	58                   	pop    eax
c00147da:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00147df:	5a                   	pop    edx
c00147e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147e4:	52                   	push   edx
c00147e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147eb:	e8 2a c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147f0:	59                   	pop    ecx
c00147f1:	58                   	pop    eax
c00147f2:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00147f7:	68 eb ac 02 c0       	push   0xc002aceb
c00147fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014802:	e8 59 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014807:	58                   	pop    eax
c0014808:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001480d:	5a                   	pop    edx
c001480e:	57                   	push   edi
c001480f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014815:	e8 00 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001481a:	59                   	pop    ecx
c001481b:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014820:	5f                   	pop    edi
c0014821:	68 f3 ac 02 c0       	push   0xc002acf3
c0014826:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482c:	e8 2f c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014831:	58                   	pop    eax
c0014832:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014837:	5a                   	pop    edx
c0014838:	56                   	push   esi
c0014839:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483f:	e8 d6 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014844:	59                   	pop    ecx
c0014845:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001484a:	5e                   	pop    esi
c001484b:	68 fb ac 02 c0       	push   0xc002acfb
c0014850:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014856:	e8 05 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001485b:	5f                   	pop    edi
c001485c:	58                   	pop    eax
c001485d:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014862:	55                   	push   ebp
c0014863:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014869:	e8 ac bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001486e:	58                   	pop    eax
c001486f:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014874:	5a                   	pop    edx
c0014875:	68 03 ad 02 c0       	push   0xc002ad03
c001487a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014880:	e8 db bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014885:	0f 21 c0             	mov    eax,db0
c0014888:	59                   	pop    ecx
c0014889:	5e                   	pop    esi
c001488a:	50                   	push   eax
c001488b:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014890:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014896:	e8 7f bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001489b:	5f                   	pop    edi
c001489c:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00148a1:	5d                   	pop    ebp
c00148a2:	68 0c ad 02 c0       	push   0xc002ad0c
c00148a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ad:	e8 ae bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148b2:	0f 21 c8             	mov    eax,db1
c00148b5:	5a                   	pop    edx
c00148b6:	59                   	pop    ecx
c00148b7:	50                   	push   eax
c00148b8:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00148bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c3:	e8 52 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148c8:	5e                   	pop    esi
c00148c9:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00148ce:	5f                   	pop    edi
c00148cf:	68 14 ad 02 c0       	push   0xc002ad14
c00148d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148da:	e8 81 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148df:	0f 21 d0             	mov    eax,db2
c00148e2:	5d                   	pop    ebp
c00148e3:	5a                   	pop    edx
c00148e4:	50                   	push   eax
c00148e5:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00148ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f0:	e8 25 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148f5:	59                   	pop    ecx
c00148f6:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00148fb:	5e                   	pop    esi
c00148fc:	68 1c ad 02 c0       	push   0xc002ad1c
c0014901:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014907:	e8 54 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001490c:	0f 21 d8             	mov    eax,db3
c001490f:	5f                   	pop    edi
c0014910:	5d                   	pop    ebp
c0014911:	50                   	push   eax
c0014912:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014917:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491d:	e8 f8 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014922:	58                   	pop    eax
c0014923:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014928:	5a                   	pop    edx
c0014929:	68 24 ad 02 c0       	push   0xc002ad24
c001492e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014934:	e8 27 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014939:	0f 21 f0             	mov    eax,db6
c001493c:	59                   	pop    ecx
c001493d:	5e                   	pop    esi
c001493e:	50                   	push   eax
c001493f:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014944:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494a:	e8 cb be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001494f:	5f                   	pop    edi
c0014950:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014955:	5d                   	pop    ebp
c0014956:	68 2c ad 02 c0       	push   0xc002ad2c
c001495b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014961:	e8 fa be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014966:	0f 21 f8             	mov    eax,db7
c0014969:	5a                   	pop    edx
c001496a:	59                   	pop    ecx
c001496b:	50                   	push   eax
c001496c:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014971:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014977:	e8 9e be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001497c:	5e                   	pop    esi
c001497d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014980:	e8 43 86 00 00       	call   c001cfc8 <Thr::getDriverNameFromAddress(unsigned long)>
c0014985:	83 c4 10             	add    esp,0x10
c0014988:	85 c0                	test   eax,eax
c001498a:	74 7d                	je     c0014a09 <displayDebugInfo(regs*)+0x48b>
c001498c:	89 c6                	mov    esi,eax
c001498e:	50                   	push   eax
c001498f:	50                   	push   eax
c0014990:	56                   	push   esi
c0014991:	68 34 ad 02 c0       	push   0xc002ad34
c0014996:	e8 48 dd ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001499b:	5a                   	pop    edx
c001499c:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00149a1:	59                   	pop    ecx
c00149a2:	68 42 ad 02 c0       	push   0xc002ad42
c00149a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ad:	e8 ae be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149b2:	5f                   	pop    edi
c00149b3:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00149b8:	5d                   	pop    ebp
c00149b9:	56                   	push   esi
c00149ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c0:	e8 9b be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149c5:	58                   	pop    eax
c00149c6:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00149cb:	5a                   	pop    edx
c00149cc:	68 4e ad 02 c0       	push   0xc002ad4e
c00149d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d7:	e8 84 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149dc:	59                   	pop    ecx
c00149dd:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00149e2:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00149e8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149eb:	e8 0f 86 00 00       	call   c001cfff <Thr::getDriverOffsetFromAddress(unsigned long)>
c00149f0:	5b                   	pop    ebx
c00149f1:	5d                   	pop    ebp
c00149f2:	50                   	push   eax
c00149f3:	57                   	push   edi
c00149f4:	e8 21 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149f9:	58                   	pop    eax
c00149fa:	5a                   	pop    edx
c00149fb:	56                   	push   esi
c00149fc:	68 5a ad 02 c0       	push   0xc002ad5a
c0014a01:	e8 dd dc ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014a06:	83 c4 10             	add    esp,0x10
c0014a09:	fa                   	cli    
c0014a0a:	f4                   	hlt    
c0014a0b:	eb fe                	jmp    c0014a0b <displayDebugInfo(regs*)+0x48d>

c0014a0d <x87EmulHandler(regs*, void*)>:
c0014a0d:	83 ec 0c             	sub    esp,0xc
c0014a10:	0f 20 c2             	mov    edx,cr0
c0014a13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a18:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014a1c:	75 4b                	jne    c0014a69 <x87EmulHandler(regs*, void*)+0x5c>
c0014a1e:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0014a23:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014a29:	85 c0                	test   eax,eax
c0014a2b:	74 05                	je     c0014a32 <x87EmulHandler(regs*, void*)+0x25>
c0014a2d:	83 e2 08             	and    edx,0x8
c0014a30:	75 17                	jne    c0014a49 <x87EmulHandler(regs*, void*)+0x3c>
c0014a32:	83 ec 0c             	sub    esp,0xc
c0014a35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a39:	e8 63 a9 00 00       	call   c001f3a1 <Vm::x87Handler(regs*)>
c0014a3e:	83 c4 10             	add    esp,0x10
c0014a41:	84 c0                	test   al,al
c0014a43:	74 24                	je     c0014a69 <x87EmulHandler(regs*, void*)+0x5c>
c0014a45:	83 c4 0c             	add    esp,0xc
c0014a48:	c3                   	ret    
c0014a49:	83 ec 0c             	sub    esp,0xc
c0014a4c:	68 80 ad 02 c0       	push   0xc002ad80
c0014a51:	e8 8d dc ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014a56:	0f 06                	clts   
c0014a58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a5d:	83 c4 10             	add    esp,0x10
c0014a60:	a3 48 db 02 c0       	mov    ds:0xc002db48,eax
c0014a65:	83 c4 0c             	add    esp,0xc
c0014a68:	c3                   	ret    
c0014a69:	83 ec 0c             	sub    esp,0xc
c0014a6c:	68 6a ad 02 c0       	push   0xc002ad6a
c0014a71:	e8 6d dc ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014a76:	5a                   	pop    edx
c0014a77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a7b:	e8 fe fa ff ff       	call   c001457e <displayDebugInfo(regs*)>

c0014a80 <gpFault(regs*, void*)>:
c0014a80:	53                   	push   ebx
c0014a81:	83 ec 14             	sub    esp,0x14
c0014a84:	c7 05 44 db 02 c0 7a e8 01 c0 	mov    DWORD PTR ds:0xc002db44,0xc001e87a
c0014a8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a92:	53                   	push   ebx
c0014a93:	e8 e2 9d 00 00       	call   c001e87a <Vm::faultHandler(regs*)>
c0014a98:	83 c4 10             	add    esp,0x10
c0014a9b:	84 c0                	test   al,al
c0014a9d:	74 05                	je     c0014aa4 <gpFault(regs*, void*)+0x24>
c0014a9f:	83 c4 08             	add    esp,0x8
c0014aa2:	5b                   	pop    ebx
c0014aa3:	c3                   	ret    
c0014aa4:	83 ec 0c             	sub    esp,0xc
c0014aa7:	68 8d ad 02 c0       	push   0xc002ad8d
c0014aac:	e8 32 dc ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014ab1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ab4:	e8 c5 fa ff ff       	call   c001457e <displayDebugInfo(regs*)>

c0014ab9 <pgFault(regs*, void*)>:
c0014ab9:	83 ec 18             	sub    esp,0x18
c0014abc:	68 a8 ad 02 c0       	push   0xc002ada8
c0014ac1:	e8 1d dc ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014ac6:	0f 20 d0             	mov    eax,cr2
c0014ac9:	5a                   	pop    edx
c0014aca:	59                   	pop    ecx
c0014acb:	50                   	push   eax
c0014acc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ad1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ad4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014ada:	e8 15 d7 ff ff       	call   c00121f4 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014adf:	83 c4 10             	add    esp,0x10
c0014ae2:	84 c0                	test   al,al
c0014ae4:	74 04                	je     c0014aea <pgFault(regs*, void*)+0x31>
c0014ae6:	83 c4 0c             	add    esp,0xc
c0014ae9:	c3                   	ret    
c0014aea:	83 ec 0c             	sub    esp,0xc
c0014aed:	68 b2 ad 02 c0       	push   0xc002adb2
c0014af2:	e8 ec db ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014af7:	58                   	pop    eax
c0014af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014afc:	e8 7d fa ff ff       	call   c001457e <displayDebugInfo(regs*)>

c0014b01 <otherISRHandler(regs*, void*)>:
c0014b01:	53                   	push   ebx
c0014b02:	83 ec 0c             	sub    esp,0xc
c0014b05:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b09:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014b0c:	50                   	push   eax
c0014b0d:	50                   	push   eax
c0014b0e:	68 bf ad 02 c0       	push   0xc002adbf
c0014b13:	e8 cb db ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014b18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b1b:	e8 5e fa ff ff       	call   c001457e <displayDebugInfo(regs*)>

c0014b20 <opcodeFault(regs*, void*)>:
c0014b20:	55                   	push   ebp
c0014b21:	89 e5                	mov    ebp,esp
c0014b23:	56                   	push   esi
c0014b24:	53                   	push   ebx
c0014b25:	83 ec 40             	sub    esp,0x40
c0014b28:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0014b2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b33:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014b39:	84 c0                	test   al,al
c0014b3b:	74 24                	je     c0014b61 <opcodeFault(regs*, void*)+0x41>
c0014b3d:	83 ec 0c             	sub    esp,0xc
c0014b40:	68 dc ad 02 c0       	push   0xc002addc
c0014b45:	e8 99 db ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014b4a:	83 c4 10             	add    esp,0x10
c0014b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b50:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b53:	8d 50 19             	lea    edx,[eax+0x19]
c0014b56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b59:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b5c:	e9 d5 05 00 00       	jmp    c0015136 <opcodeFault(regs*, void*)+0x616>
c0014b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b64:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b67:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014b6a:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014b6e:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b75:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b78:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014b7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b7e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b80:	3c f0                	cmp    al,0xf0
c0014b82:	75 17                	jne    c0014b9b <opcodeFault(regs*, void*)+0x7b>
c0014b84:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b8a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b8d:	8d 50 01             	lea    edx,[eax+0x1]
c0014b90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b93:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b96:	e9 da 00 00 00       	jmp    c0014c75 <opcodeFault(regs*, void*)+0x155>
c0014b9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b9e:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba0:	3c f2                	cmp    al,0xf2
c0014ba2:	74 09                	je     c0014bad <opcodeFault(regs*, void*)+0x8d>
c0014ba4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ba7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba9:	3c f3                	cmp    al,0xf3
c0014bab:	75 1b                	jne    c0014bc8 <opcodeFault(regs*, void*)+0xa8>
c0014bad:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bb1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bba:	8d 50 01             	lea    edx,[eax+0x1]
c0014bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bc3:	e9 ad 00 00 00       	jmp    c0014c75 <opcodeFault(regs*, void*)+0x155>
c0014bc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bcb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bcd:	3c 66                	cmp    al,0x66
c0014bcf:	75 1f                	jne    c0014bf0 <opcodeFault(regs*, void*)+0xd0>
c0014bd1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bd5:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014bd9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bdf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014be2:	8d 50 01             	lea    edx,[eax+0x1]
c0014be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014beb:	e9 85 00 00 00       	jmp    c0014c75 <opcodeFault(regs*, void*)+0x155>
c0014bf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf3:	8a 00                	mov    al,BYTE PTR [eax]
c0014bf5:	3c 67                	cmp    al,0x67
c0014bf7:	75 18                	jne    c0014c11 <opcodeFault(regs*, void*)+0xf1>
c0014bf9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bfd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c03:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c06:	8d 50 01             	lea    edx,[eax+0x1]
c0014c09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c0c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c0f:	eb 64                	jmp    c0014c75 <opcodeFault(regs*, void*)+0x155>
c0014c11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c14:	8a 00                	mov    al,BYTE PTR [eax]
c0014c16:	3c 2e                	cmp    al,0x2e
c0014c18:	74 09                	je     c0014c23 <opcodeFault(regs*, void*)+0x103>
c0014c1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c1d:	8a 00                	mov    al,BYTE PTR [eax]
c0014c1f:	3c 3e                	cmp    al,0x3e
c0014c21:	75 18                	jne    c0014c3b <opcodeFault(regs*, void*)+0x11b>
c0014c23:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c27:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c2d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c30:	8d 50 01             	lea    edx,[eax+0x1]
c0014c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c36:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c39:	eb 3a                	jmp    c0014c75 <opcodeFault(regs*, void*)+0x155>
c0014c3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3e:	8a 00                	mov    al,BYTE PTR [eax]
c0014c40:	3c 36                	cmp    al,0x36
c0014c42:	74 1b                	je     c0014c5f <opcodeFault(regs*, void*)+0x13f>
c0014c44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c47:	8a 00                	mov    al,BYTE PTR [eax]
c0014c49:	3c 26                	cmp    al,0x26
c0014c4b:	74 12                	je     c0014c5f <opcodeFault(regs*, void*)+0x13f>
c0014c4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c50:	8a 00                	mov    al,BYTE PTR [eax]
c0014c52:	3c 64                	cmp    al,0x64
c0014c54:	74 09                	je     c0014c5f <opcodeFault(regs*, void*)+0x13f>
c0014c56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c59:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5b:	3c 65                	cmp    al,0x65
c0014c5d:	75 16                	jne    c0014c75 <opcodeFault(regs*, void*)+0x155>
c0014c5f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c63:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c6c:	8d 50 01             	lea    edx,[eax+0x1]
c0014c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c72:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c78:	8a 00                	mov    al,BYTE PTR [eax]
c0014c7a:	3c 0f                	cmp    al,0xf
c0014c7c:	0f 85 ad 00 00 00    	jne    c0014d2f <opcodeFault(regs*, void*)+0x20f>
c0014c82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c85:	40                   	inc    eax
c0014c86:	8a 00                	mov    al,BYTE PTR [eax]
c0014c88:	3c c2                	cmp    al,0xc2
c0014c8a:	74 0e                	je     c0014c9a <opcodeFault(regs*, void*)+0x17a>
c0014c8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c8f:	40                   	inc    eax
c0014c90:	8a 00                	mov    al,BYTE PTR [eax]
c0014c92:	3c c3                	cmp    al,0xc3
c0014c94:	0f 85 95 00 00 00    	jne    c0014d2f <opcodeFault(regs*, void*)+0x20f>
c0014c9a:	83 ec 0c             	sub    esp,0xc
c0014c9d:	68 ff ad 02 c0       	push   0xc002adff
c0014ca2:	e8 3c da ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0014ca7:	83 c4 10             	add    esp,0x10
c0014caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cb0:	8d 50 01             	lea    edx,[eax+0x1]
c0014cb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cb9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cbf:	8a 00                	mov    al,BYTE PTR [eax]
c0014cc1:	8d 50 fe             	lea    edx,[eax-0x2]
c0014cc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc7:	88 10                	mov    BYTE PTR [eax],dl
c0014cc9:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014ccc:	50                   	push   eax
c0014ccd:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014cd0:	50                   	push   eax
c0014cd1:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014cd4:	50                   	push   eax
c0014cd5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cd8:	e8 8b 48 00 00       	call   c0019568 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014cdd:	83 c4 10             	add    esp,0x10
c0014ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ce6:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ce9:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014cec:	01 d0                	add    eax,edx
c0014cee:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014cf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cf7:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014cfa:	48                   	dec    eax
c0014cfb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d01:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014d04:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0a:	83 ec 04             	sub    esp,0x4
c0014d0d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014d10:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014d13:	50                   	push   eax
c0014d14:	e8 9b b4 fe ff       	call   c00001b4 <voodooXADD>
c0014d19:	83 c4 10             	add    esp,0x10
c0014d1c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014d1f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014d22:	01 c2                	add    edx,eax
c0014d24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d27:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d2a:	e9 07 04 00 00       	jmp    c0015136 <opcodeFault(regs*, void*)+0x616>
c0014d2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d32:	8a 00                	mov    al,BYTE PTR [eax]
c0014d34:	3c 0f                	cmp    al,0xf
c0014d36:	0f 85 8b 01 00 00    	jne    c0014ec7 <opcodeFault(regs*, void*)+0x3a7>
c0014d3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3f:	40                   	inc    eax
c0014d40:	8a 00                	mov    al,BYTE PTR [eax]
c0014d42:	3c c7                	cmp    al,0xc7
c0014d44:	0f 86 7d 01 00 00    	jbe    c0014ec7 <opcodeFault(regs*, void*)+0x3a7>
c0014d4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d4d:	40                   	inc    eax
c0014d4e:	8a 00                	mov    al,BYTE PTR [eax]
c0014d50:	3c cf                	cmp    al,0xcf
c0014d52:	0f 87 6f 01 00 00    	ja     c0014ec7 <opcodeFault(regs*, void*)+0x3a7>
c0014d58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d5b:	40                   	inc    eax
c0014d5c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d5e:	83 c0 38             	add    eax,0x38
c0014d61:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014d64:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d68:	75 0b                	jne    c0014d75 <opcodeFault(regs*, void*)+0x255>
c0014d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d70:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d73:	eb 75                	jmp    c0014dea <opcodeFault(regs*, void*)+0x2ca>
c0014d75:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d79:	75 0b                	jne    c0014d86 <opcodeFault(regs*, void*)+0x266>
c0014d7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d81:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d84:	eb 64                	jmp    c0014dea <opcodeFault(regs*, void*)+0x2ca>
c0014d86:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d8a:	75 0b                	jne    c0014d97 <opcodeFault(regs*, void*)+0x277>
c0014d8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d92:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d95:	eb 53                	jmp    c0014dea <opcodeFault(regs*, void*)+0x2ca>
c0014d97:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d9b:	75 0b                	jne    c0014da8 <opcodeFault(regs*, void*)+0x288>
c0014d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014da3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014da6:	eb 42                	jmp    c0014dea <opcodeFault(regs*, void*)+0x2ca>
c0014da8:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014dac:	75 0b                	jne    c0014db9 <opcodeFault(regs*, void*)+0x299>
c0014dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014db4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014db7:	eb 31                	jmp    c0014dea <opcodeFault(regs*, void*)+0x2ca>
c0014db9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014dbd:	75 0b                	jne    c0014dca <opcodeFault(regs*, void*)+0x2aa>
c0014dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014dc5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dc8:	eb 20                	jmp    c0014dea <opcodeFault(regs*, void*)+0x2ca>
c0014dca:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014dce:	75 0b                	jne    c0014ddb <opcodeFault(regs*, void*)+0x2bb>
c0014dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014dd6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dd9:	eb 0f                	jmp    c0014dea <opcodeFault(regs*, void*)+0x2ca>
c0014ddb:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014ddf:	75 09                	jne    c0014dea <opcodeFault(regs*, void*)+0x2ca>
c0014de1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014de7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dea:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014dee:	74 10                	je     c0014e00 <opcodeFault(regs*, void*)+0x2e0>
c0014df0:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014df7:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014dfe:	eb 2d                	jmp    c0014e2d <opcodeFault(regs*, void*)+0x30d>
c0014e00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e03:	c1 e0 18             	shl    eax,0x18
c0014e06:	89 c2                	mov    edx,eax
c0014e08:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e0b:	c1 e0 08             	shl    eax,0x8
c0014e0e:	25 00 00 ff 00       	and    eax,0xff0000
c0014e13:	09 c2                	or     edx,eax
c0014e15:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e18:	c1 e8 08             	shr    eax,0x8
c0014e1b:	25 00 ff 00 00       	and    eax,0xff00
c0014e20:	09 c2                	or     edx,eax
c0014e22:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e25:	c1 e8 18             	shr    eax,0x18
c0014e28:	09 d0                	or     eax,edx
c0014e2a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e2d:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e31:	75 0b                	jne    c0014e3e <opcodeFault(regs*, void*)+0x31e>
c0014e33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e36:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e39:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e3c:	eb 75                	jmp    c0014eb3 <opcodeFault(regs*, void*)+0x393>
c0014e3e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e42:	75 0b                	jne    c0014e4f <opcodeFault(regs*, void*)+0x32f>
c0014e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e47:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e4a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014e4d:	eb 64                	jmp    c0014eb3 <opcodeFault(regs*, void*)+0x393>
c0014e4f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e53:	75 0b                	jne    c0014e60 <opcodeFault(regs*, void*)+0x340>
c0014e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e58:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e5b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e5e:	eb 53                	jmp    c0014eb3 <opcodeFault(regs*, void*)+0x393>
c0014e60:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e64:	75 0b                	jne    c0014e71 <opcodeFault(regs*, void*)+0x351>
c0014e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e69:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e6c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014e6f:	eb 42                	jmp    c0014eb3 <opcodeFault(regs*, void*)+0x393>
c0014e71:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e75:	75 0b                	jne    c0014e82 <opcodeFault(regs*, void*)+0x362>
c0014e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e7d:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014e80:	eb 31                	jmp    c0014eb3 <opcodeFault(regs*, void*)+0x393>
c0014e82:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e86:	75 0b                	jne    c0014e93 <opcodeFault(regs*, void*)+0x373>
c0014e88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e8e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014e91:	eb 20                	jmp    c0014eb3 <opcodeFault(regs*, void*)+0x393>
c0014e93:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e97:	75 0b                	jne    c0014ea4 <opcodeFault(regs*, void*)+0x384>
c0014e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e9f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014ea2:	eb 0f                	jmp    c0014eb3 <opcodeFault(regs*, void*)+0x393>
c0014ea4:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014ea8:	75 09                	jne    c0014eb3 <opcodeFault(regs*, void*)+0x393>
c0014eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ead:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014eb0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014eb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eb9:	8d 50 02             	lea    edx,[eax+0x2]
c0014ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ebf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ec2:	e9 6f 02 00 00       	jmp    c0015136 <opcodeFault(regs*, void*)+0x616>
c0014ec7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eca:	8a 00                	mov    al,BYTE PTR [eax]
c0014ecc:	3c 0f                	cmp    al,0xf
c0014ece:	0f 85 8d 01 00 00    	jne    c0015061 <opcodeFault(regs*, void*)+0x541>
c0014ed4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed7:	40                   	inc    eax
c0014ed8:	8a 00                	mov    al,BYTE PTR [eax]
c0014eda:	3c c7                	cmp    al,0xc7
c0014edc:	0f 85 7f 01 00 00    	jne    c0015061 <opcodeFault(regs*, void*)+0x541>
c0014ee2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eeb:	8d 50 01             	lea    edx,[eax+0x1]
c0014eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ef4:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014ef7:	50                   	push   eax
c0014ef8:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014efb:	50                   	push   eax
c0014efc:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014eff:	50                   	push   eax
c0014f00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f03:	e8 60 46 00 00       	call   c0019568 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014f08:	83 c4 10             	add    esp,0x10
c0014f0b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014f0e:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014f11:	83 f0 01             	xor    eax,0x1
c0014f14:	84 c0                	test   al,al
c0014f16:	0f 84 45 01 00 00    	je     c0015061 <opcodeFault(regs*, void*)+0x541>
c0014f1c:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014f1f:	3c 01                	cmp    al,0x1
c0014f21:	0f 85 3a 01 00 00    	jne    c0015061 <opcodeFault(regs*, void*)+0x541>
c0014f27:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014f2a:	83 f0 01             	xor    eax,0x1
c0014f2d:	84 c0                	test   al,al
c0014f2f:	0f 84 2c 01 00 00    	je     c0015061 <opcodeFault(regs*, void*)+0x541>
c0014f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f38:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f3b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f3e:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014f45:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f48:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f4b:	89 c2                	mov    edx,eax
c0014f4d:	b8 00 00 00 00       	mov    eax,0x0
c0014f52:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f55:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f5e:	ba 00 00 00 00       	mov    edx,0x0
c0014f63:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014f66:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f6f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f72:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014f79:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f7c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f7f:	89 c2                	mov    edx,eax
c0014f81:	b8 00 00 00 00       	mov    eax,0x0
c0014f86:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f89:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014f8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f92:	ba 00 00 00 00       	mov    edx,0x0
c0014f97:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014f9a:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014f9d:	fa                   	cli    
c0014f9e:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0014fa3:	40                   	inc    eax
c0014fa4:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0014fa9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014fac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014faf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fb1:	89 c1                	mov    ecx,eax
c0014fb3:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014fb6:	89 cb                	mov    ebx,ecx
c0014fb8:	89 d0                	mov    eax,edx
c0014fba:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014fbd:	89 c6                	mov    esi,eax
c0014fbf:	89 f0                	mov    eax,esi
c0014fc1:	09 d8                	or     eax,ebx
c0014fc3:	85 c0                	test   eax,eax
c0014fc5:	75 21                	jne    c0014fe8 <opcodeFault(regs*, void*)+0x4c8>
c0014fc7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014fca:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014fcd:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014fd0:	89 01                	mov    DWORD PTR [ecx],eax
c0014fd2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fdb:	83 c8 40             	or     eax,0x40
c0014fde:	89 c2                	mov    edx,eax
c0014fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe3:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014fe6:	eb 3e                	jmp    c0015026 <opcodeFault(regs*, void*)+0x506>
c0014fe8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014feb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014fee:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ff0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014ff3:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014ff6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fff:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015002:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015005:	89 d0                	mov    eax,edx
c0015007:	31 d2                	xor    edx,edx
c0015009:	89 c3                	mov    ebx,eax
c001500b:	89 d6                	mov    esi,edx
c001500d:	89 da                	mov    edx,ebx
c001500f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015012:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015018:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001501b:	83 e0 bf             	and    eax,0xffffffbf
c001501e:	89 c2                	mov    edx,eax
c0015020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015023:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015026:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001502b:	48                   	dec    eax
c001502c:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0015031:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015036:	85 c0                	test   eax,eax
c0015038:	75 01                	jne    c001503b <opcodeFault(regs*, void*)+0x51b>
c001503a:	fb                   	sti    
c001503b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015041:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015044:	01 c2                	add    edx,eax
c0015046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015049:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001504c:	83 ec 0c             	sub    esp,0xc
c001504f:	68 0e ae 02 c0       	push   0xc002ae0e
c0015054:	e8 8a d6 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0015059:	83 c4 10             	add    esp,0x10
c001505c:	e9 d5 00 00 00       	jmp    c0015136 <opcodeFault(regs*, void*)+0x616>
c0015061:	83 ec 0c             	sub    esp,0xc
c0015064:	68 21 ae 02 c0       	push   0xc002ae21
c0015069:	e8 75 d6 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001506e:	83 c4 10             	add    esp,0x10
c0015071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015074:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001507d:	c1 e0 04             	shl    eax,0x4
c0015080:	01 d0                	add    eax,edx
c0015082:	83 c0 03             	add    eax,0x3
c0015085:	8a 00                	mov    al,BYTE PTR [eax]
c0015087:	0f b6 d8             	movzx  ebx,al
c001508a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015093:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015096:	c1 e0 04             	shl    eax,0x4
c0015099:	01 d0                	add    eax,edx
c001509b:	83 c0 02             	add    eax,0x2
c001509e:	8a 00                	mov    al,BYTE PTR [eax]
c00150a0:	0f b6 c8             	movzx  ecx,al
c00150a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150af:	c1 e0 04             	shl    eax,0x4
c00150b2:	01 d0                	add    eax,edx
c00150b4:	40                   	inc    eax
c00150b5:	8a 00                	mov    al,BYTE PTR [eax]
c00150b7:	0f b6 d0             	movzx  edx,al
c00150ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150bd:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00150c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150c6:	c1 e0 04             	shl    eax,0x4
c00150c9:	01 f0                	add    eax,esi
c00150cb:	8a 00                	mov    al,BYTE PTR [eax]
c00150cd:	0f b6 c0             	movzx  eax,al
c00150d0:	83 ec 0c             	sub    esp,0xc
c00150d3:	53                   	push   ebx
c00150d4:	51                   	push   ecx
c00150d5:	52                   	push   edx
c00150d6:	50                   	push   eax
c00150d7:	68 34 ae 02 c0       	push   0xc002ae34
c00150dc:	e8 02 d6 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00150e1:	83 c4 20             	add    esp,0x20
c00150e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150ea:	83 c0 03             	add    eax,0x3
c00150ed:	8a 00                	mov    al,BYTE PTR [eax]
c00150ef:	0f b6 d8             	movzx  ebx,al
c00150f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150f8:	83 c0 02             	add    eax,0x2
c00150fb:	8a 00                	mov    al,BYTE PTR [eax]
c00150fd:	0f b6 c8             	movzx  ecx,al
c0015100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015103:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015106:	40                   	inc    eax
c0015107:	8a 00                	mov    al,BYTE PTR [eax]
c0015109:	0f b6 d0             	movzx  edx,al
c001510c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015112:	8a 00                	mov    al,BYTE PTR [eax]
c0015114:	0f b6 c0             	movzx  eax,al
c0015117:	83 ec 0c             	sub    esp,0xc
c001511a:	53                   	push   ebx
c001511b:	51                   	push   ecx
c001511c:	52                   	push   edx
c001511d:	50                   	push   eax
c001511e:	68 5c ae 02 c0       	push   0xc002ae5c
c0015123:	e8 bb d5 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0015128:	83 c4 20             	add    esp,0x20
c001512b:	83 ec 0c             	sub    esp,0xc
c001512e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015131:	e8 48 f4 ff ff       	call   c001457e <displayDebugInfo(regs*)>
c0015136:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015139:	5b                   	pop    ebx
c001513a:	5e                   	pop    esi
c001513b:	5d                   	pop    ebp
c001513c:	c3                   	ret    

c001513d <displayProgramFault(char const*)>:
c001513d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015142:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015145:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001514b:	85 c0                	test   eax,eax
c001514d:	74 15                	je     c0015164 <displayProgramFault(char const*)+0x27>
c001514f:	83 ec 0c             	sub    esp,0xc
c0015152:	6a 04                	push   0x4
c0015154:	6a 0f                	push   0xf
c0015156:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001515a:	50                   	push   eax
c001515b:	e8 fc b3 ff ff       	call   c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015160:	83 c4 1c             	add    esp,0x1c
c0015163:	c3                   	ret    
c0015164:	c3                   	ret    

c0015165 <setupInterruptController()>:
c0015165:	55                   	push   ebp
c0015166:	89 e5                	mov    ebp,esp
c0015168:	53                   	push   ebx
c0015169:	83 ec 24             	sub    esp,0x24
c001516c:	b8 00 00 00 00       	mov    eax,0x0
c0015171:	85 c0                	test   eax,eax
c0015173:	0f 95 c0             	setne  al
c0015176:	84 c0                	test   al,al
c0015178:	74 5b                	je     c00151d5 <setupInterruptController()+0x70>
c001517a:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015181:	83 ec 0c             	sub    esp,0xc
c0015184:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015187:	e8 0d a4 ff ff       	call   c000f599 <malloc>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	89 c3                	mov    ebx,eax
c0015191:	83 ec 0c             	sub    esp,0xc
c0015194:	53                   	push   ebx
c0015195:	e8 04 05 01 00       	call   c002569e <APIC::APIC()>
c001519a:	83 c4 10             	add    esp,0x10
c001519d:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00151a0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00151a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a8:	83 c0 08             	add    eax,0x8
c00151ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ad:	6a 00                	push   0x0
c00151af:	6a 00                	push   0x0
c00151b1:	6a 00                	push   0x0
c00151b3:	52                   	push   edx
c00151b4:	ff d0                	call   eax
c00151b6:	83 c4 10             	add    esp,0x10
c00151b9:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00151be:	83 ec 08             	sub    esp,0x8
c00151c1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00151c4:	50                   	push   eax
c00151c5:	e8 52 e9 ff ff       	call   c0013b1c <Device::addChild(Device*)>
c00151ca:	83 c4 10             	add    esp,0x10
c00151cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151d0:	e9 79 03 00 00       	jmp    c001554e <setupInterruptController()+0x3e9>
c00151d5:	a0 40 03 03 c0       	mov    al,ds:0xc0030340
c00151da:	84 c0                	test   al,al
c00151dc:	75 14                	jne    c00151f2 <setupInterruptController()+0x8d>
c00151de:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00151e3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00151e9:	83 e2 fe             	and    edx,0xfffffffe
c00151ec:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00151f2:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00151f7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00151fd:	83 e0 01             	and    eax,0x1
c0015200:	84 c0                	test   al,al
c0015202:	0f 95 c0             	setne  al
c0015205:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015208:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001520f:	83 ec 0c             	sub    esp,0xc
c0015212:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015215:	e8 7f a3 ff ff       	call   c000f599 <malloc>
c001521a:	83 c4 10             	add    esp,0x10
c001521d:	89 c3                	mov    ebx,eax
c001521f:	83 ec 0c             	sub    esp,0xc
c0015222:	53                   	push   ebx
c0015223:	e8 ce 09 01 00       	call   c0025bf6 <PIC::PIC()>
c0015228:	83 c4 10             	add    esp,0x10
c001522b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001522e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015231:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015234:	8b 00                	mov    eax,DWORD PTR [eax]
c0015236:	83 c0 08             	add    eax,0x8
c0015239:	8b 00                	mov    eax,DWORD PTR [eax]
c001523b:	6a 00                	push   0x0
c001523d:	6a 00                	push   0x0
c001523f:	6a 00                	push   0x0
c0015241:	52                   	push   edx
c0015242:	ff d0                	call   eax
c0015244:	83 c4 10             	add    esp,0x10
c0015247:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001524b:	74 73                	je     c00152c0 <setupInterruptController()+0x15b>
c001524d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015250:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015253:	8b 00                	mov    eax,DWORD PTR [eax]
c0015255:	83 c0 0c             	add    eax,0xc
c0015258:	8b 00                	mov    eax,DWORD PTR [eax]
c001525a:	6a 00                	push   0x0
c001525c:	6a 00                	push   0x0
c001525e:	6a 00                	push   0x0
c0015260:	52                   	push   edx
c0015261:	ff d0                	call   eax
c0015263:	83 c4 10             	add    esp,0x10
c0015266:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001526a:	74 15                	je     c0015281 <setupInterruptController()+0x11c>
c001526c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015271:	83 c0 04             	add    eax,0x4
c0015274:	8b 00                	mov    eax,DWORD PTR [eax]
c0015276:	83 ec 0c             	sub    esp,0xc
c0015279:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001527c:	ff d0                	call   eax
c001527e:	83 c4 10             	add    esp,0x10
c0015281:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015288:	83 ec 0c             	sub    esp,0xc
c001528b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001528e:	e8 06 a3 ff ff       	call   c000f599 <malloc>
c0015293:	83 c4 10             	add    esp,0x10
c0015296:	89 c3                	mov    ebx,eax
c0015298:	83 ec 0c             	sub    esp,0xc
c001529b:	53                   	push   ebx
c001529c:	e8 fd 03 01 00       	call   c002569e <APIC::APIC()>
c00152a1:	83 c4 10             	add    esp,0x10
c00152a4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152a7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00152af:	83 c0 08             	add    eax,0x8
c00152b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b4:	6a 00                	push   0x0
c00152b6:	6a 00                	push   0x0
c00152b8:	6a 00                	push   0x0
c00152ba:	52                   	push   edx
c00152bb:	ff d0                	call   eax
c00152bd:	83 c4 10             	add    esp,0x10
c00152c0:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00152c5:	83 ec 08             	sub    esp,0x8
c00152c8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152cb:	50                   	push   eax
c00152cc:	e8 4b e8 ff ff       	call   c0013b1c <Device::addChild(Device*)>
c00152d1:	83 c4 10             	add    esp,0x10
c00152d4:	c7 05 48 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db48,0x0
c00152de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e3:	83 c0 24             	add    eax,0x24
c00152e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e8:	6a 00                	push   0x0
c00152ea:	68 01 4b 01 c0       	push   0xc0014b01
c00152ef:	6a 00                	push   0x0
c00152f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f4:	ff d0                	call   eax
c00152f6:	83 c4 10             	add    esp,0x10
c00152f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fe:	83 c0 24             	add    eax,0x24
c0015301:	8b 00                	mov    eax,DWORD PTR [eax]
c0015303:	6a 00                	push   0x0
c0015305:	68 01 4b 01 c0       	push   0xc0014b01
c001530a:	6a 01                	push   0x1
c001530c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001530f:	ff d0                	call   eax
c0015311:	83 c4 10             	add    esp,0x10
c0015314:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015317:	8b 00                	mov    eax,DWORD PTR [eax]
c0015319:	83 c0 24             	add    eax,0x24
c001531c:	8b 00                	mov    eax,DWORD PTR [eax]
c001531e:	6a 00                	push   0x0
c0015320:	68 db 43 01 c0       	push   0xc00143db
c0015325:	6a 02                	push   0x2
c0015327:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001532a:	ff d0                	call   eax
c001532c:	83 c4 10             	add    esp,0x10
c001532f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015332:	8b 00                	mov    eax,DWORD PTR [eax]
c0015334:	83 c0 24             	add    eax,0x24
c0015337:	8b 00                	mov    eax,DWORD PTR [eax]
c0015339:	6a 00                	push   0x0
c001533b:	68 01 4b 01 c0       	push   0xc0014b01
c0015340:	6a 03                	push   0x3
c0015342:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015345:	ff d0                	call   eax
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534d:	8b 00                	mov    eax,DWORD PTR [eax]
c001534f:	83 c0 24             	add    eax,0x24
c0015352:	8b 00                	mov    eax,DWORD PTR [eax]
c0015354:	6a 00                	push   0x0
c0015356:	68 01 4b 01 c0       	push   0xc0014b01
c001535b:	6a 04                	push   0x4
c001535d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015360:	ff d0                	call   eax
c0015362:	83 c4 10             	add    esp,0x10
c0015365:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015368:	8b 00                	mov    eax,DWORD PTR [eax]
c001536a:	83 c0 24             	add    eax,0x24
c001536d:	8b 00                	mov    eax,DWORD PTR [eax]
c001536f:	6a 00                	push   0x0
c0015371:	68 01 4b 01 c0       	push   0xc0014b01
c0015376:	6a 05                	push   0x5
c0015378:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001537b:	ff d0                	call   eax
c001537d:	83 c4 10             	add    esp,0x10
c0015380:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015383:	8b 00                	mov    eax,DWORD PTR [eax]
c0015385:	83 c0 24             	add    eax,0x24
c0015388:	8b 00                	mov    eax,DWORD PTR [eax]
c001538a:	6a 00                	push   0x0
c001538c:	68 20 4b 01 c0       	push   0xc0014b20
c0015391:	6a 06                	push   0x6
c0015393:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015396:	ff d0                	call   eax
c0015398:	83 c4 10             	add    esp,0x10
c001539b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539e:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a0:	83 c0 24             	add    eax,0x24
c00153a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a5:	6a 00                	push   0x0
c00153a7:	68 0d 4a 01 c0       	push   0xc0014a0d
c00153ac:	6a 07                	push   0x7
c00153ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b1:	ff d0                	call   eax
c00153b3:	83 c4 10             	add    esp,0x10
c00153b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bb:	83 c0 24             	add    eax,0x24
c00153be:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c0:	6a 00                	push   0x0
c00153c2:	68 f6 41 01 c0       	push   0xc00141f6
c00153c7:	6a 08                	push   0x8
c00153c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153cc:	ff d0                	call   eax
c00153ce:	83 c4 10             	add    esp,0x10
c00153d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d6:	83 c0 24             	add    eax,0x24
c00153d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153db:	6a 00                	push   0x0
c00153dd:	68 01 4b 01 c0       	push   0xc0014b01
c00153e2:	6a 09                	push   0x9
c00153e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153e7:	ff d0                	call   eax
c00153e9:	83 c4 10             	add    esp,0x10
c00153ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f1:	83 c0 24             	add    eax,0x24
c00153f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f6:	6a 00                	push   0x0
c00153f8:	68 01 4b 01 c0       	push   0xc0014b01
c00153fd:	6a 0a                	push   0xa
c00153ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015402:	ff d0                	call   eax
c0015404:	83 c4 10             	add    esp,0x10
c0015407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540a:	8b 00                	mov    eax,DWORD PTR [eax]
c001540c:	83 c0 24             	add    eax,0x24
c001540f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015411:	6a 00                	push   0x0
c0015413:	68 01 4b 01 c0       	push   0xc0014b01
c0015418:	6a 0b                	push   0xb
c001541a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001541d:	ff d0                	call   eax
c001541f:	83 c4 10             	add    esp,0x10
c0015422:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015425:	8b 00                	mov    eax,DWORD PTR [eax]
c0015427:	83 c0 24             	add    eax,0x24
c001542a:	8b 00                	mov    eax,DWORD PTR [eax]
c001542c:	6a 00                	push   0x0
c001542e:	68 01 4b 01 c0       	push   0xc0014b01
c0015433:	6a 0c                	push   0xc
c0015435:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015438:	ff d0                	call   eax
c001543a:	83 c4 10             	add    esp,0x10
c001543d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015440:	8b 00                	mov    eax,DWORD PTR [eax]
c0015442:	83 c0 24             	add    eax,0x24
c0015445:	8b 00                	mov    eax,DWORD PTR [eax]
c0015447:	6a 00                	push   0x0
c0015449:	68 80 4a 01 c0       	push   0xc0014a80
c001544e:	6a 0d                	push   0xd
c0015450:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015453:	ff d0                	call   eax
c0015455:	83 c4 10             	add    esp,0x10
c0015458:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545b:	8b 00                	mov    eax,DWORD PTR [eax]
c001545d:	83 c0 24             	add    eax,0x24
c0015460:	8b 00                	mov    eax,DWORD PTR [eax]
c0015462:	6a 00                	push   0x0
c0015464:	68 b9 4a 01 c0       	push   0xc0014ab9
c0015469:	6a 0e                	push   0xe
c001546b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001546e:	ff d0                	call   eax
c0015470:	83 c4 10             	add    esp,0x10
c0015473:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015476:	8b 00                	mov    eax,DWORD PTR [eax]
c0015478:	83 c0 24             	add    eax,0x24
c001547b:	8b 00                	mov    eax,DWORD PTR [eax]
c001547d:	6a 00                	push   0x0
c001547f:	68 01 4b 01 c0       	push   0xc0014b01
c0015484:	6a 0f                	push   0xf
c0015486:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015489:	ff d0                	call   eax
c001548b:	83 c4 10             	add    esp,0x10
c001548e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015491:	8b 00                	mov    eax,DWORD PTR [eax]
c0015493:	83 c0 24             	add    eax,0x24
c0015496:	8b 00                	mov    eax,DWORD PTR [eax]
c0015498:	6a 00                	push   0x0
c001549a:	68 01 4b 01 c0       	push   0xc0014b01
c001549f:	6a 10                	push   0x10
c00154a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a4:	ff d0                	call   eax
c00154a6:	83 c4 10             	add    esp,0x10
c00154a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ae:	83 c0 24             	add    eax,0x24
c00154b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b3:	6a 00                	push   0x0
c00154b5:	68 01 4b 01 c0       	push   0xc0014b01
c00154ba:	6a 11                	push   0x11
c00154bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154bf:	ff d0                	call   eax
c00154c1:	83 c4 10             	add    esp,0x10
c00154c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c9:	83 c0 24             	add    eax,0x24
c00154cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ce:	6a 00                	push   0x0
c00154d0:	68 01 4b 01 c0       	push   0xc0014b01
c00154d5:	6a 12                	push   0x12
c00154d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154da:	ff d0                	call   eax
c00154dc:	83 c4 10             	add    esp,0x10
c00154df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e4:	83 c0 24             	add    eax,0x24
c00154e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e9:	6a 00                	push   0x0
c00154eb:	68 01 4b 01 c0       	push   0xc0014b01
c00154f0:	6a 13                	push   0x13
c00154f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f5:	ff d0                	call   eax
c00154f7:	83 c4 10             	add    esp,0x10
c00154fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ff:	83 c0 24             	add    eax,0x24
c0015502:	8b 00                	mov    eax,DWORD PTR [eax]
c0015504:	6a 00                	push   0x0
c0015506:	68 01 4b 01 c0       	push   0xc0014b01
c001550b:	6a 14                	push   0x14
c001550d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015510:	ff d0                	call   eax
c0015512:	83 c4 10             	add    esp,0x10
c0015515:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015518:	8b 00                	mov    eax,DWORD PTR [eax]
c001551a:	83 c0 24             	add    eax,0x24
c001551d:	8b 00                	mov    eax,DWORD PTR [eax]
c001551f:	6a 00                	push   0x0
c0015521:	68 01 4b 01 c0       	push   0xc0014b01
c0015526:	6a 1e                	push   0x1e
c0015528:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001552b:	ff d0                	call   eax
c001552d:	83 c4 10             	add    esp,0x10
c0015530:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015533:	8b 00                	mov    eax,DWORD PTR [eax]
c0015535:	83 c0 24             	add    eax,0x24
c0015538:	8b 00                	mov    eax,DWORD PTR [eax]
c001553a:	6a 00                	push   0x0
c001553c:	68 3e c0 01 c0       	push   0xc001c03e
c0015541:	6a 60                	push   0x60
c0015543:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015546:	ff d0                	call   eax
c0015548:	83 c4 10             	add    esp,0x10
c001554b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001554e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015551:	c9                   	leave  
c0015552:	c3                   	ret    
c0015553:	90                   	nop

c0015554 <InterruptController::convertLegacyIRQNumber(int)>:
c0015554:	55                   	push   ebp
c0015555:	89 e5                	mov    ebp,esp
c0015557:	83 ec 08             	sub    esp,0x8
c001555a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555d:	83 ec 0c             	sub    esp,0xc
c0015560:	50                   	push   eax
c0015561:	e8 b6 e8 ff ff       	call   c0013e1c <Device::getName()>
c0015566:	83 c4 10             	add    esp,0x10
c0015569:	8a 00                	mov    al,BYTE PTR [eax]
c001556b:	3c 41                	cmp    al,0x41
c001556d:	0f 94 c0             	sete   al
c0015570:	84 c0                	test   al,al
c0015572:	74 28                	je     c001559c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015574:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015578:	7f 12                	jg     c001558c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001557a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001557d:	05 20 cc 02 c0       	add    eax,0xc002cc20
c0015582:	8a 00                	mov    al,BYTE PTR [eax]
c0015584:	0f b6 c0             	movzx  eax,al
c0015587:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001558a:	eb 10                	jmp    c001559c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001558c:	83 ec 0c             	sub    esp,0xc
c001558f:	68 84 ae 02 c0       	push   0xc002ae84
c0015594:	e8 b6 48 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0015599:	83 c4 10             	add    esp,0x10
c001559c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001559f:	c9                   	leave  
c00155a0:	c3                   	ret    
c00155a1:	90                   	nop

c00155a2 <startGUI(void*)>:
c00155a2:	55                   	push   ebp
c00155a3:	89 e5                	mov    ebp,esp
c00155a5:	53                   	push   ebx
c00155a6:	83 ec 04             	sub    esp,0x4
c00155a9:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00155ae:	48                   	dec    eax
c00155af:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c00155b4:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00155b9:	85 c0                	test   eax,eax
c00155bb:	75 01                	jne    c00155be <startGUI(void*)+0x1c>
c00155bd:	fb                   	sti    
c00155be:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c00155c4:	83 ec 08             	sub    esp,0x8
c00155c7:	6a 01                	push   0x1
c00155c9:	68 04 af 02 c0       	push   0xc002af04
c00155ce:	e8 46 7a 00 00       	call   c001d019 <Thr::loadDLL(char const*, bool)>
c00155d3:	83 c4 10             	add    esp,0x10
c00155d6:	83 ec 08             	sub    esp,0x8
c00155d9:	53                   	push   ebx
c00155da:	50                   	push   eax
c00155db:	e8 6d 7c 00 00       	call   c001d24d <Thr::executeDLL(unsigned long, void*)>
c00155e0:	83 c4 10             	add    esp,0x10
c00155e3:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c00155e9:	83 ec 08             	sub    esp,0x8
c00155ec:	6a 01                	push   0x1
c00155ee:	68 1e af 02 c0       	push   0xc002af1e
c00155f3:	e8 21 7a 00 00       	call   c001d019 <Thr::loadDLL(char const*, bool)>
c00155f8:	83 c4 10             	add    esp,0x10
c00155fb:	83 ec 08             	sub    esp,0x8
c00155fe:	53                   	push   ebx
c00155ff:	50                   	push   eax
c0015600:	e8 48 7c 00 00       	call   c001d24d <Thr::executeDLL(unsigned long, void*)>
c0015605:	83 c4 10             	add    esp,0x10
c0015608:	90                   	nop
c0015609:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001560c:	c9                   	leave  
c001560d:	c3                   	ret    

c001560e <startGUIVESA(void*)>:
c001560e:	55                   	push   ebp
c001560f:	89 e5                	mov    ebp,esp
c0015611:	53                   	push   ebx
c0015612:	83 ec 04             	sub    esp,0x4
c0015615:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001561a:	48                   	dec    eax
c001561b:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0015620:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015625:	85 c0                	test   eax,eax
c0015627:	75 01                	jne    c001562a <startGUIVESA(void*)+0x1c>
c0015629:	fb                   	sti    
c001562a:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c0015630:	83 ec 08             	sub    esp,0x8
c0015633:	6a 01                	push   0x1
c0015635:	68 38 af 02 c0       	push   0xc002af38
c001563a:	e8 da 79 00 00       	call   c001d019 <Thr::loadDLL(char const*, bool)>
c001563f:	83 c4 10             	add    esp,0x10
c0015642:	83 ec 08             	sub    esp,0x8
c0015645:	53                   	push   ebx
c0015646:	50                   	push   eax
c0015647:	e8 01 7c 00 00       	call   c001d24d <Thr::executeDLL(unsigned long, void*)>
c001564c:	83 c4 10             	add    esp,0x10
c001564f:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c0015655:	83 ec 08             	sub    esp,0x8
c0015658:	6a 01                	push   0x1
c001565a:	68 1e af 02 c0       	push   0xc002af1e
c001565f:	e8 b5 79 00 00       	call   c001d019 <Thr::loadDLL(char const*, bool)>
c0015664:	83 c4 10             	add    esp,0x10
c0015667:	83 ec 08             	sub    esp,0x8
c001566a:	53                   	push   ebx
c001566b:	50                   	push   eax
c001566c:	e8 dc 7b 00 00       	call   c001d24d <Thr::executeDLL(unsigned long, void*)>
c0015671:	83 c4 10             	add    esp,0x10
c0015674:	90                   	nop
c0015675:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015678:	c9                   	leave  
c0015679:	c3                   	ret    

c001567a <sendKeyToTerminal(unsigned char)>:
c001567a:	55                   	push   ebp
c001567b:	89 e5                	mov    ebp,esp
c001567d:	83 ec 28             	sub    esp,0x28
c0015680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015683:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015686:	a1 84 da 02 c0       	mov    eax,ds:0xc002da84
c001568b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001568f:	83 ec 08             	sub    esp,0x8
c0015692:	52                   	push   edx
c0015693:	50                   	push   eax
c0015694:	e8 6b b3 ff ff       	call   c0010a04 <VgaText::receiveKey(unsigned char)>
c0015699:	83 c4 10             	add    esp,0x10
c001569c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00156a0:	0f 85 8f 00 00 00    	jne    c0015735 <sendKeyToTerminal(unsigned char)+0xbb>
c00156a6:	fa                   	cli    
c00156a7:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00156ac:	40                   	inc    eax
c00156ad:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c00156b2:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c00156b7:	40                   	inc    eax
c00156b8:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c00156bd:	a1 60 db 02 c0       	mov    eax,ds:0xc002db60
c00156c2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156c5:	c7 05 60 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db60,0x0
c00156cf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00156d3:	74 1f                	je     c00156f4 <sendKeyToTerminal(unsigned char)+0x7a>
c00156d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00156db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00156de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156e4:	83 ec 0c             	sub    esp,0xc
c00156e7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156ea:	e8 75 87 00 00       	call   c001de64 <unblockTask(ThreadControlBlock*)>
c00156ef:	83 c4 10             	add    esp,0x10
c00156f2:	eb db                	jmp    c00156cf <sendKeyToTerminal(unsigned char)+0x55>
c00156f4:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c00156f9:	48                   	dec    eax
c00156fa:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c00156ff:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c0015704:	85 c0                	test   eax,eax
c0015706:	75 18                	jne    c0015720 <sendKeyToTerminal(unsigned char)+0xa6>
c0015708:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001570d:	85 c0                	test   eax,eax
c001570f:	74 0f                	je     c0015720 <sendKeyToTerminal(unsigned char)+0xa6>
c0015711:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001571b:	e8 c1 82 00 00       	call   c001d9e1 <schedule()>
c0015720:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015725:	48                   	dec    eax
c0015726:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001572b:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015730:	85 c0                	test   eax,eax
c0015732:	75 01                	jne    c0015735 <sendKeyToTerminal(unsigned char)+0xbb>
c0015734:	fb                   	sti    
c0015735:	90                   	nop
c0015736:	c9                   	leave  
c0015737:	c3                   	ret    

c0015738 <sendKeyboardToken(KeyboardToken)>:
c0015738:	55                   	push   ebp
c0015739:	89 e5                	mov    ebp,esp
c001573b:	83 ec 18             	sub    esp,0x18
c001573e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015744:	0f b7 c0             	movzx  eax,ax
c0015747:	83 f2 01             	xor    edx,0x1
c001574a:	88 90 80 db 02 c0    	mov    BYTE PTR [eax-0x3ffd2480],dl
c0015750:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0015755:	85 c0                	test   eax,eax
c0015757:	74 24                	je     c001577d <sendKeyboardToken(KeyboardToken)+0x45>
c0015759:	8b 0d 68 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db68
c001575f:	83 ec 04             	sub    esp,0x4
c0015762:	68 80 db 02 c0       	push   0xc002db80
c0015767:	83 ec 08             	sub    esp,0x8
c001576a:	89 e2                	mov    edx,esp
c001576c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576f:	89 02                	mov    DWORD PTR [edx],eax
c0015771:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015774:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015778:	ff d1                	call   ecx
c001577a:	83 c4 10             	add    esp,0x10
c001577d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015780:	66 3d 03 02          	cmp    ax,0x203
c0015784:	75 07                	jne    c001578d <sendKeyboardToken(KeyboardToken)+0x55>
c0015786:	a0 80 dc 02 c0       	mov    al,ds:0xc002dc80
c001578b:	84 c0                	test   al,al
c001578d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015791:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015794:	a0 88 df 02 c0       	mov    al,ds:0xc002df88
c0015799:	38 c2                	cmp    dl,al
c001579b:	74 1c                	je     c00157b9 <sendKeyboardToken(KeyboardToken)+0x81>
c001579d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00157a0:	a2 88 df 02 c0       	mov    ds:0xc002df88,al
c00157a5:	a0 88 df 02 c0       	mov    al,ds:0xc002df88
c00157aa:	0f b6 c0             	movzx  eax,al
c00157ad:	83 ec 0c             	sub    esp,0xc
c00157b0:	50                   	push   eax
c00157b1:	e8 8e a8 ff ff       	call   c0010044 <setTerminalScrollLock(bool)>
c00157b6:	83 c4 10             	add    esp,0x10
c00157b9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00157bc:	84 c0                	test   al,al
c00157be:	0f 84 ae 00 00 00    	je     c0015872 <sendKeyboardToken(KeyboardToken)+0x13a>
c00157c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c7:	66 3d 10 03          	cmp    ax,0x310
c00157cb:	75 06                	jne    c00157d3 <sendKeyboardToken(KeyboardToken)+0x9b>
c00157cd:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00157d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d6:	66 3d 11 03          	cmp    ax,0x311
c00157da:	75 06                	jne    c00157e2 <sendKeyboardToken(KeyboardToken)+0xaa>
c00157dc:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00157e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e5:	66 3d 12 03          	cmp    ax,0x312
c00157e9:	75 06                	jne    c00157f1 <sendKeyboardToken(KeyboardToken)+0xb9>
c00157eb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00157f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f4:	66 3d 13 03          	cmp    ax,0x313
c00157f8:	75 06                	jne    c0015800 <sendKeyboardToken(KeyboardToken)+0xc8>
c00157fa:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015803:	66 3d 14 03          	cmp    ax,0x314
c0015807:	75 06                	jne    c001580f <sendKeyboardToken(KeyboardToken)+0xd7>
c0015809:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001580f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015812:	66 3d 15 03          	cmp    ax,0x315
c0015816:	75 06                	jne    c001581e <sendKeyboardToken(KeyboardToken)+0xe6>
c0015818:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001581e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015821:	66 3d 16 03          	cmp    ax,0x316
c0015825:	75 06                	jne    c001582d <sendKeyboardToken(KeyboardToken)+0xf5>
c0015827:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001582d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015830:	66 3d 17 03          	cmp    ax,0x317
c0015834:	75 06                	jne    c001583c <sendKeyboardToken(KeyboardToken)+0x104>
c0015836:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001583c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583f:	66 3d 18 03          	cmp    ax,0x318
c0015843:	75 06                	jne    c001584b <sendKeyboardToken(KeyboardToken)+0x113>
c0015845:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001584b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584e:	66 3d 19 03          	cmp    ax,0x319
c0015852:	75 06                	jne    c001585a <sendKeyboardToken(KeyboardToken)+0x122>
c0015854:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001585a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585d:	66 3d 1a 03          	cmp    ax,0x31a
c0015861:	0f 85 c9 00 00 00    	jne    c0015930 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015867:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001586d:	e9 be 00 00 00       	jmp    c0015930 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015875:	66 3d 10 03          	cmp    ax,0x310
c0015879:	75 0a                	jne    c0015885 <sendKeyboardToken(KeyboardToken)+0x14d>
c001587b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015881:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015888:	66 3d 11 03          	cmp    ax,0x311
c001588c:	75 0a                	jne    c0015898 <sendKeyboardToken(KeyboardToken)+0x160>
c001588e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015894:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589b:	66 3d 12 03          	cmp    ax,0x312
c001589f:	75 0a                	jne    c00158ab <sendKeyboardToken(KeyboardToken)+0x173>
c00158a1:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00158a7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ae:	66 3d 13 03          	cmp    ax,0x313
c00158b2:	75 0a                	jne    c00158be <sendKeyboardToken(KeyboardToken)+0x186>
c00158b4:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00158ba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c1:	66 3d 14 03          	cmp    ax,0x314
c00158c5:	75 0a                	jne    c00158d1 <sendKeyboardToken(KeyboardToken)+0x199>
c00158c7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00158cd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d4:	66 3d 15 03          	cmp    ax,0x315
c00158d8:	75 0a                	jne    c00158e4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00158da:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158e0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e7:	66 3d 16 03          	cmp    ax,0x316
c00158eb:	75 0a                	jne    c00158f7 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00158ed:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00158f3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fa:	66 3d 17 03          	cmp    ax,0x317
c00158fe:	75 0a                	jne    c001590a <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015900:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015906:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001590a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590d:	66 3d 18 03          	cmp    ax,0x318
c0015911:	75 0a                	jne    c001591d <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015913:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015919:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001591d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015920:	66 3d 19 03          	cmp    ax,0x319
c0015924:	75 0a                	jne    c0015930 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015926:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001592c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015933:	66 3d 00 02          	cmp    ax,0x200
c0015937:	75 2c                	jne    c0015965 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015939:	a0 80 df 02 c0       	mov    al,ds:0xc002df80
c001593e:	83 f0 01             	xor    eax,0x1
c0015941:	84 c0                	test   al,al
c0015943:	74 20                	je     c0015965 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015945:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001594a:	6a 01                	push   0x1
c001594c:	6a 00                	push   0x0
c001594e:	68 a2 55 01 c0       	push   0xc00155a2
c0015953:	50                   	push   eax
c0015954:	e8 63 7e 00 00       	call   c001d7bc <Process::createThread(void (*)(void*), void*, int)>
c0015959:	83 c4 10             	add    esp,0x10
c001595c:	c6 05 80 df 02 c0 01 	mov    BYTE PTR ds:0xc002df80,0x1
c0015963:	eb 33                	jmp    c0015998 <sendKeyboardToken(KeyboardToken)+0x260>
c0015965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015968:	66 3d 01 02          	cmp    ax,0x201
c001596c:	75 2a                	jne    c0015998 <sendKeyboardToken(KeyboardToken)+0x260>
c001596e:	a0 80 df 02 c0       	mov    al,ds:0xc002df80
c0015973:	83 f0 01             	xor    eax,0x1
c0015976:	84 c0                	test   al,al
c0015978:	74 1e                	je     c0015998 <sendKeyboardToken(KeyboardToken)+0x260>
c001597a:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001597f:	6a 01                	push   0x1
c0015981:	6a 00                	push   0x0
c0015983:	68 0e 56 01 c0       	push   0xc001560e
c0015988:	50                   	push   eax
c0015989:	e8 2e 7e 00 00       	call   c001d7bc <Process::createThread(void (*)(void*), void*, int)>
c001598e:	83 c4 10             	add    esp,0x10
c0015991:	c6 05 80 df 02 c0 01 	mov    BYTE PTR ds:0xc002df80,0x1
c0015998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599b:	66 3d 1d 03          	cmp    ax,0x31d
c001599f:	75 06                	jne    c00159a7 <sendKeyboardToken(KeyboardToken)+0x26f>
c00159a1:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00159a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159aa:	66 3d 1c 03          	cmp    ax,0x31c
c00159ae:	75 06                	jne    c00159b6 <sendKeyboardToken(KeyboardToken)+0x27e>
c00159b0:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00159b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b9:	66 3d 1b 03          	cmp    ax,0x31b
c00159bd:	75 06                	jne    c00159c5 <sendKeyboardToken(KeyboardToken)+0x28d>
c00159bf:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00159c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c8:	66 3d 1e 03          	cmp    ax,0x31e
c00159cc:	75 06                	jne    c00159d4 <sendKeyboardToken(KeyboardToken)+0x29c>
c00159ce:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00159d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d7:	66 3d 1f 03          	cmp    ax,0x31f
c00159db:	75 06                	jne    c00159e3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00159dd:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00159e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e6:	66 3d 1a 03          	cmp    ax,0x31a
c00159ea:	75 06                	jne    c00159f2 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00159ec:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00159f2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00159f6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159f9:	83 f0 01             	xor    eax,0x1
c00159fc:	84 c0                	test   al,al
c00159fe:	74 77                	je     c0015a77 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015a00:	a0 81 dc 02 c0       	mov    al,ds:0xc002dc81
c0015a05:	84 c0                	test   al,al
c0015a07:	74 41                	je     c0015a4a <sendKeyboardToken(KeyboardToken)+0x312>
c0015a09:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a0d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015a11:	74 2b                	je     c0015a3e <sendKeyboardToken(KeyboardToken)+0x306>
c0015a13:	8b 15 84 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df84
c0015a19:	89 d0                	mov    eax,edx
c0015a1b:	c1 e0 02             	shl    eax,0x2
c0015a1e:	01 d0                	add    eax,edx
c0015a20:	01 c0                	add    eax,eax
c0015a22:	a3 84 df 02 c0       	mov    ds:0xc002df84,eax
c0015a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a2a:	0f b7 c0             	movzx  eax,ax
c0015a2d:	8d 50 d0             	lea    edx,[eax-0x30]
c0015a30:	a1 84 df 02 c0       	mov    eax,ds:0xc002df84
c0015a35:	01 d0                	add    eax,edx
c0015a37:	a3 84 df 02 c0       	mov    ds:0xc002df84,eax
c0015a3c:	eb 6d                	jmp    c0015aab <sendKeyboardToken(KeyboardToken)+0x373>
c0015a3e:	c7 05 84 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df84,0x0
c0015a48:	eb 61                	jmp    c0015aab <sendKeyboardToken(KeyboardToken)+0x373>
c0015a4a:	a1 84 df 02 c0       	mov    eax,ds:0xc002df84
c0015a4f:	85 c0                	test   eax,eax
c0015a51:	74 18                	je     c0015a6b <sendKeyboardToken(KeyboardToken)+0x333>
c0015a53:	a1 84 df 02 c0       	mov    eax,ds:0xc002df84
c0015a58:	0f b6 c0             	movzx  eax,al
c0015a5b:	83 ec 0c             	sub    esp,0xc
c0015a5e:	50                   	push   eax
c0015a5f:	e8 16 fc ff ff       	call   c001567a <sendKeyToTerminal(unsigned char)>
c0015a64:	83 c4 10             	add    esp,0x10
c0015a67:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a6b:	c7 05 84 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df84,0x0
c0015a75:	eb 34                	jmp    c0015aab <sendKeyboardToken(KeyboardToken)+0x373>
c0015a77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7a:	66 3d 01 01          	cmp    ax,0x101
c0015a7e:	75 2b                	jne    c0015aab <sendKeyboardToken(KeyboardToken)+0x373>
c0015a80:	a1 84 df 02 c0       	mov    eax,ds:0xc002df84
c0015a85:	85 c0                	test   eax,eax
c0015a87:	74 18                	je     c0015aa1 <sendKeyboardToken(KeyboardToken)+0x369>
c0015a89:	a1 84 df 02 c0       	mov    eax,ds:0xc002df84
c0015a8e:	0f b6 c0             	movzx  eax,al
c0015a91:	83 ec 0c             	sub    esp,0xc
c0015a94:	50                   	push   eax
c0015a95:	e8 e0 fb ff ff       	call   c001567a <sendKeyToTerminal(unsigned char)>
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015aa1:	c7 05 84 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df84,0x0
c0015aab:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015aae:	83 f0 01             	xor    eax,0x1
c0015ab1:	84 c0                	test   al,al
c0015ab3:	74 4c                	je     c0015b01 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ab5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ab8:	83 f0 01             	xor    eax,0x1
c0015abb:	84 c0                	test   al,al
c0015abd:	74 42                	je     c0015b01 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015abf:	a0 80 dc 02 c0       	mov    al,ds:0xc002dc80
c0015ac4:	83 f0 01             	xor    eax,0x1
c0015ac7:	84 c0                	test   al,al
c0015ac9:	74 36                	je     c0015b01 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ace:	66 83 f8 1f          	cmp    ax,0x1f
c0015ad2:	76 09                	jbe    c0015add <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad7:	66 83 f8 7e          	cmp    ax,0x7e
c0015adb:	76 12                	jbe    c0015aef <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae0:	66 83 f8 0a          	cmp    ax,0xa
c0015ae4:	74 09                	je     c0015aef <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae9:	66 83 f8 08          	cmp    ax,0x8
c0015aed:	75 12                	jne    c0015b01 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015aef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af2:	0f b6 c0             	movzx  eax,al
c0015af5:	83 ec 0c             	sub    esp,0xc
c0015af8:	50                   	push   eax
c0015af9:	e8 7c fb ff ff       	call   c001567a <sendKeyToTerminal(unsigned char)>
c0015afe:	83 c4 10             	add    esp,0x10
c0015b01:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b04:	83 f0 01             	xor    eax,0x1
c0015b07:	84 c0                	test   al,al
c0015b09:	74 4f                	je     c0015b5a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b0b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b0e:	83 f0 01             	xor    eax,0x1
c0015b11:	84 c0                	test   al,al
c0015b13:	74 45                	je     c0015b5a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b15:	a0 80 dc 02 c0       	mov    al,ds:0xc002dc80
c0015b1a:	84 c0                	test   al,al
c0015b1c:	74 3c                	je     c0015b5a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b21:	66 83 f8 3f          	cmp    ax,0x3f
c0015b25:	76 33                	jbe    c0015b5a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b2a:	66 83 f8 7f          	cmp    ax,0x7f
c0015b2e:	77 2a                	ja     c0015b5a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b33:	88 c2                	mov    dl,al
c0015b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b38:	66 83 f8 5f          	cmp    ax,0x5f
c0015b3c:	76 04                	jbe    c0015b42 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015b3e:	b0 20                	mov    al,0x20
c0015b40:	eb 02                	jmp    c0015b44 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015b42:	b0 00                	mov    al,0x0
c0015b44:	29 c2                	sub    edx,eax
c0015b46:	88 d0                	mov    al,dl
c0015b48:	83 e8 40             	sub    eax,0x40
c0015b4b:	0f b6 c0             	movzx  eax,al
c0015b4e:	83 ec 0c             	sub    esp,0xc
c0015b51:	50                   	push   eax
c0015b52:	e8 23 fb ff ff       	call   c001567a <sendKeyToTerminal(unsigned char)>
c0015b57:	83 c4 10             	add    esp,0x10
c0015b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5d:	66 3d 00 03          	cmp    ax,0x300
c0015b61:	75 0f                	jne    c0015b72 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b63:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b66:	83 f0 01             	xor    eax,0x1
c0015b69:	84 c0                	test   al,al
c0015b6b:	74 05                	je     c0015b72 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b6d:	e8 43 a8 ff ff       	call   c00103b5 <doTerminalCycle()>
c0015b72:	90                   	nop
c0015b73:	c9                   	leave  
c0015b74:	c3                   	ret    

c0015b75 <clearInternalKeybuffer(VgaText*)>:
c0015b75:	55                   	push   ebp
c0015b76:	89 e5                	mov    ebp,esp
c0015b78:	83 ec 08             	sub    esp,0x8
c0015b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7e:	05 98 01 00 00       	add    eax,0x198
c0015b83:	83 ec 0c             	sub    esp,0xc
c0015b86:	50                   	push   eax
c0015b87:	e8 e0 ab fe ff       	call   c000076c <strlen>
c0015b8c:	83 c4 10             	add    esp,0x10
c0015b8f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b92:	81 c2 98 01 00 00    	add    edx,0x198
c0015b98:	83 ec 04             	sub    esp,0x4
c0015b9b:	50                   	push   eax
c0015b9c:	6a 00                	push   0x0
c0015b9e:	52                   	push   edx
c0015b9f:	e8 ac ab fe ff       	call   c0000750 <memset>
c0015ba4:	83 c4 10             	add    esp,0x10
c0015ba7:	90                   	nop
c0015ba8:	c9                   	leave  
c0015ba9:	c3                   	ret    

c0015baa <readKeyboard(VgaText*, char*, unsigned long)>:
c0015baa:	55                   	push   ebp
c0015bab:	89 e5                	mov    ebp,esp
c0015bad:	83 ec 18             	sub    esp,0x18
c0015bb0:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0015bb5:	85 c0                	test   eax,eax
c0015bb7:	74 2a                	je     c0015be3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015bb9:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015bbf:	8b 0d 68 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db68
c0015bc5:	83 ec 04             	sub    esp,0x4
c0015bc8:	68 80 db 02 c0       	push   0xc002db80
c0015bcd:	83 ec 08             	sub    esp,0x8
c0015bd0:	89 e2                	mov    edx,esp
c0015bd2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015bd5:	89 02                	mov    DWORD PTR [edx],eax
c0015bd7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015bda:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015bde:	ff d1                	call   ecx
c0015be0:	83 c4 10             	add    esp,0x10
c0015be3:	fb                   	sti    
c0015be4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015beb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015bef:	0f 84 a1 00 00 00    	je     c0015c96 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf8:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015bfe:	84 c0                	test   al,al
c0015c00:	75 28                	jne    c0015c2a <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015c02:	fa                   	cli    
c0015c03:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015c08:	40                   	inc    eax
c0015c09:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0015c0e:	e8 ce 7d 00 00       	call   c001d9e1 <schedule()>
c0015c13:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015c18:	48                   	dec    eax
c0015c19:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0015c1e:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015c23:	85 c0                	test   eax,eax
c0015c25:	75 ce                	jne    c0015bf5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c27:	fb                   	sti    
c0015c28:	eb cb                	jmp    c0015bf5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c2d:	8d 50 01             	lea    edx,[eax+0x1]
c0015c30:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c36:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015c3c:	88 10                	mov    BYTE PTR [eax],dl
c0015c3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c41:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c47:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c4d:	05 98 01 00 00       	add    eax,0x198
c0015c52:	83 ec 0c             	sub    esp,0xc
c0015c55:	50                   	push   eax
c0015c56:	e8 11 ab fe ff       	call   c000076c <strlen>
c0015c5b:	83 c4 10             	add    esp,0x10
c0015c5e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c61:	81 c2 98 01 00 00    	add    edx,0x198
c0015c67:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c6a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c6d:	81 c2 98 01 00 00    	add    edx,0x198
c0015c73:	83 ec 04             	sub    esp,0x4
c0015c76:	50                   	push   eax
c0015c77:	51                   	push   ecx
c0015c78:	52                   	push   edx
c0015c79:	e8 0a aa fe ff       	call   c0000688 <memmove>
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c84:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c87:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c8b:	0f 85 5a ff ff ff    	jne    c0015beb <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015c91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c94:	eb 03                	jmp    c0015c99 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015c96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c99:	c9                   	leave  
c0015c9a:	c3                   	ret    
c0015c9b:	90                   	nop

c0015c9c <Keyboard::Keyboard(char const*)>:
c0015c9c:	83 ec 0c             	sub    esp,0xc
c0015c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca3:	83 ec 08             	sub    esp,0x8
c0015ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015caa:	50                   	push   eax
c0015cab:	e8 70 e0 ff ff       	call   c0013d20 <Device::Device(char const*)>
c0015cb0:	83 c4 10             	add    esp,0x10
c0015cb3:	ba 5c af 02 c0       	mov    edx,0xc002af5c
c0015cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cbc:	89 10                	mov    DWORD PTR [eax],edx
c0015cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cc2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015ccc:	c6 05 64 db 02 c0 01 	mov    BYTE PTR ds:0xc002db64,0x1
c0015cd3:	90                   	nop
c0015cd4:	83 c4 0c             	add    esp,0xc
c0015cd7:	c3                   	ret    

c0015cd8 <Keyboard::~Keyboard()>:
c0015cd8:	83 ec 0c             	sub    esp,0xc
c0015cdb:	ba 5c af 02 c0       	mov    edx,0xc002af5c
c0015ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce4:	89 10                	mov    DWORD PTR [eax],edx
c0015ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cea:	83 ec 0c             	sub    esp,0xc
c0015ced:	50                   	push   eax
c0015cee:	e8 f7 dc ff ff       	call   c00139ea <Device::~Device()>
c0015cf3:	83 c4 10             	add    esp,0x10
c0015cf6:	90                   	nop
c0015cf7:	83 c4 0c             	add    esp,0xc
c0015cfa:	c3                   	ret    
c0015cfb:	90                   	nop

c0015cfc <Keyboard::~Keyboard()>:
c0015cfc:	83 ec 0c             	sub    esp,0xc
c0015cff:	83 ec 0c             	sub    esp,0xc
c0015d02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d06:	e8 cd ff ff ff       	call   c0015cd8 <Keyboard::~Keyboard()>
c0015d0b:	83 c4 10             	add    esp,0x10
c0015d0e:	83 ec 08             	sub    esp,0x8
c0015d11:	68 5c 01 00 00       	push   0x15c
c0015d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d1a:	e8 ec c8 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0015d1f:	83 c4 10             	add    esp,0x10
c0015d22:	83 c4 0c             	add    esp,0xc
c0015d25:	c3                   	ret    

c0015d26 <LogicalDisk::close(int, int, void*)>:
c0015d26:	83 c8 ff             	or     eax,0xffffffff
c0015d29:	c3                   	ret    

c0015d2a <LogicalDisk::~LogicalDisk()>:
c0015d2a:	83 ec 0c             	sub    esp,0xc
c0015d2d:	ba d4 af 02 c0       	mov    edx,0xc002afd4
c0015d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d36:	89 10                	mov    DWORD PTR [eax],edx
c0015d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	50                   	push   eax
c0015d40:	e8 a5 dc ff ff       	call   c00139ea <Device::~Device()>
c0015d45:	83 c4 10             	add    esp,0x10
c0015d48:	90                   	nop
c0015d49:	83 c4 0c             	add    esp,0xc
c0015d4c:	c3                   	ret    
c0015d4d:	90                   	nop

c0015d4e <LogicalDisk::~LogicalDisk()>:
c0015d4e:	83 ec 0c             	sub    esp,0xc
c0015d51:	83 ec 0c             	sub    esp,0xc
c0015d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d58:	e8 cd ff ff ff       	call   c0015d2a <LogicalDisk::~LogicalDisk()>
c0015d5d:	83 c4 10             	add    esp,0x10
c0015d60:	83 ec 08             	sub    esp,0x8
c0015d63:	68 74 01 00 00       	push   0x174
c0015d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d6c:	e8 9a c8 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0015d71:	83 c4 10             	add    esp,0x10
c0015d74:	83 c4 0c             	add    esp,0xc
c0015d77:	c3                   	ret    

c0015d78 <LogicalDisk::open(int, int, void*)>:
c0015d78:	83 ec 18             	sub    esp,0x18
c0015d7b:	68 88 af 02 c0       	push   0xc002af88
c0015d80:	e8 ca 40 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0015d85:	83 c8 ff             	or     eax,0xffffffff
c0015d88:	83 c4 1c             	add    esp,0x1c
c0015d8b:	c3                   	ret    

c0015d8c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d8c:	53                   	push   ebx
c0015d8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015d91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d95:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d99:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015d9f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015da5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015dab:	77 10                	ja     c0015dbd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015dad:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015db3:	89 d3                	mov    ebx,edx
c0015db5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015dbb:	72 05                	jb     c0015dc2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015dbd:	83 c8 ff             	or     eax,0xffffffff
c0015dc0:	89 c2                	mov    edx,eax
c0015dc2:	5b                   	pop    ebx
c0015dc3:	c3                   	ret    

c0015dc4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015dc4:	56                   	push   esi
c0015dc5:	83 c8 ff             	or     eax,0xffffffff
c0015dc8:	53                   	push   ebx
c0015dc9:	89 c2                	mov    edx,eax
c0015dcb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015dcf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015dd3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015dd7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ddd:	77 27                	ja     c0015e06 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ddf:	89 d8                	mov    eax,ebx
c0015de1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015de7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015ded:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015df2:	89 c2                	mov    edx,eax
c0015df4:	73 10                	jae    c0015e06 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015df6:	89 c8                	mov    eax,ecx
c0015df8:	89 da                	mov    edx,ebx
c0015dfa:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015e00:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015e06:	5b                   	pop    ebx
c0015e07:	5e                   	pop    esi
c0015e08:	c3                   	ret    
c0015e09:	90                   	nop

c0015e0a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e0a:	83 ec 1c             	sub    esp,0x1c
c0015e0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e21:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e30:	83 ec 08             	sub    esp,0x8
c0015e33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e37:	50                   	push   eax
c0015e38:	e8 e3 de ff ff       	call   c0013d20 <Device::Device(char const*)>
c0015e3d:	83 c4 10             	add    esp,0x10
c0015e40:	ba d4 af 02 c0       	mov    edx,0xc002afd4
c0015e45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e49:	89 10                	mov    DWORD PTR [eax],edx
c0015e4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e4f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e5a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e65:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e6f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e7b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e81:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e87:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e92:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015e98:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015e9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ea2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ea6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eb0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015eba:	90                   	nop
c0015ebb:	83 c4 1c             	add    esp,0x1c
c0015ebe:	c3                   	ret    
c0015ebf:	90                   	nop

c0015ec0 <LogicalDisk::assignDriveLetter()>:
c0015ec0:	55                   	push   ebp
c0015ec1:	57                   	push   edi
c0015ec2:	56                   	push   esi
c0015ec3:	53                   	push   ebx
c0015ec4:	83 ec 14             	sub    esp,0x14
c0015ec7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ecb:	8b 3d a0 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfa0
c0015ed1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ed7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015edb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ee1:	8b 3d a4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfa4
c0015ee7:	3c 01                	cmp    al,0x1
c0015ee9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015eed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015ef1:	19 c0                	sbb    eax,eax
c0015ef3:	83 e0 02             	and    eax,0x2
c0015ef6:	83 c0 41             	add    eax,0x41
c0015ef9:	0f be e8             	movsx  ebp,al
c0015efc:	3c 43                	cmp    al,0x43
c0015efe:	75 10                	jne    c0015f10 <LogicalDisk::assignDriveLetter()+0x50>
c0015f00:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015f07:	75 5d                	jne    c0015f66 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f09:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f0e:	75 56                	jne    c0015f66 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f10:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015f13:	ba 01 00 00 00       	mov    edx,0x1
c0015f18:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f1c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f20:	d3 e2                	shl    edx,cl
c0015f22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f26:	89 d7                	mov    edi,edx
c0015f28:	89 d6                	mov    esi,edx
c0015f2a:	c1 ff 1f             	sar    edi,0x1f
c0015f2d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f31:	21 f9                	and    ecx,edi
c0015f33:	09 d1                	or     ecx,edx
c0015f35:	75 2f                	jne    c0015f66 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f3f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f45:	09 f2                	or     edx,esi
c0015f47:	89 15 a0 df 02 c0    	mov    DWORD PTR ds:0xc002dfa0,edx
c0015f4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f51:	09 fa                	or     edx,edi
c0015f53:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f57:	89 15 a4 df 02 c0    	mov    DWORD PTR ds:0xc002dfa4,edx
c0015f5d:	89 1c bd c0 df 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2040],ebx
c0015f64:	eb 08                	jmp    c0015f6e <LogicalDisk::assignDriveLetter()+0xae>
c0015f66:	45                   	inc    ebp
c0015f67:	40                   	inc    eax
c0015f68:	3c 5b                	cmp    al,0x5b
c0015f6a:	75 90                	jne    c0015efc <LogicalDisk::assignDriveLetter()+0x3c>
c0015f6c:	31 c0                	xor    eax,eax
c0015f6e:	83 c4 14             	add    esp,0x14
c0015f71:	5b                   	pop    ebx
c0015f72:	5e                   	pop    esi
c0015f73:	5f                   	pop    edi
c0015f74:	5d                   	pop    ebp
c0015f75:	c3                   	ret    

c0015f76 <LogicalDisk::mount()>:
c0015f76:	56                   	push   esi
c0015f77:	53                   	push   ebx
c0015f78:	53                   	push   ebx
c0015f79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f7d:	8b 1d 34 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db34
c0015f83:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f8d:	85 db                	test   ebx,ebx
c0015f8f:	74 27                	je     c0015fb8 <LogicalDisk::mount()+0x42>
c0015f91:	51                   	push   ecx
c0015f92:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015f99:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f9b:	83 e8 41             	sub    eax,0x41
c0015f9e:	50                   	push   eax
c0015f9f:	56                   	push   esi
c0015fa0:	53                   	push   ebx
c0015fa1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015fa4:	83 c4 10             	add    esp,0x10
c0015fa7:	84 c0                	test   al,al
c0015fa9:	74 08                	je     c0015fb3 <LogicalDisk::mount()+0x3d>
c0015fab:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015fb1:	eb 07                	jmp    c0015fba <LogicalDisk::mount()+0x44>
c0015fb3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015fb6:	eb d5                	jmp    c0015f8d <LogicalDisk::mount()+0x17>
c0015fb8:	31 c0                	xor    eax,eax
c0015fba:	5a                   	pop    edx
c0015fbb:	5b                   	pop    ebx
c0015fbc:	5e                   	pop    esi
c0015fbd:	c3                   	ret    

c0015fbe <LogicalDisk::unmount()>:
c0015fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fc2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015fcc:	c3                   	ret    
c0015fcd:	90                   	nop

c0015fce <LogicalDisk::eject()>:
c0015fce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fd2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015fd8:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fde:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015fe1:	90                   	nop

c0015fe2 <LogicalDisk::unassignDriveLetter()>:
c0015fe2:	57                   	push   edi
c0015fe3:	56                   	push   esi
c0015fe4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fe8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015fef:	84 c9                	test   cl,cl
c0015ff1:	75 0f                	jne    c0016002 <LogicalDisk::unassignDriveLetter()+0x20>
c0015ff3:	c7 44 24 0c ac af 02 c0 	mov    DWORD PTR [esp+0xc],0xc002afac
c0015ffb:	5e                   	pop    esi
c0015ffc:	5f                   	pop    edi
c0015ffd:	e9 4d 3e 00 00       	jmp    c0019e4f <Krnl::panic(char const*)>
c0016002:	83 e9 41             	sub    ecx,0x41
c0016005:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001600c:	b8 01 00 00 00       	mov    eax,0x1
c0016011:	c7 04 8d c0 df 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2040],0x0
c001601c:	d3 e0                	shl    eax,cl
c001601e:	89 c7                	mov    edi,eax
c0016020:	f7 d0                	not    eax
c0016022:	c1 ff 1f             	sar    edi,0x1f
c0016025:	21 05 a0 df 02 c0    	and    DWORD PTR ds:0xc002dfa0,eax
c001602b:	89 fe                	mov    esi,edi
c001602d:	f7 d6                	not    esi
c001602f:	21 35 a4 df 02 c0    	and    DWORD PTR ds:0xc002dfa4,esi
c0016035:	5e                   	pop    esi
c0016036:	5f                   	pop    edi
c0016037:	c3                   	ret    

c0016038 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016038:	57                   	push   edi
c0016039:	56                   	push   esi
c001603a:	53                   	push   ebx
c001603b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001603f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016043:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016047:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001604b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016051:	77 41                	ja     c0016094 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016053:	99                   	cdq    
c0016054:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001605a:	01 c8                	add    eax,ecx
c001605c:	11 da                	adc    edx,ebx
c001605e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016064:	19 d7                	sbb    edi,edx
c0016066:	72 33                	jb     c001609b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016068:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001606e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016074:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016078:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001607c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016082:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016088:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001608c:	5b                   	pop    ebx
c001608d:	5e                   	pop    esi
c001608e:	5f                   	pop    edi
c001608f:	e9 cc 0a 00 00       	jmp    c0016b60 <VCache::read(unsigned long long, int, void*)>
c0016094:	b8 05 00 00 00       	mov    eax,0x5
c0016099:	eb 05                	jmp    c00160a0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001609b:	b8 07 00 00 00       	mov    eax,0x7
c00160a0:	5b                   	pop    ebx
c00160a1:	5e                   	pop    esi
c00160a2:	5f                   	pop    edi
c00160a3:	c3                   	ret    

c00160a4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00160a4:	57                   	push   edi
c00160a5:	56                   	push   esi
c00160a6:	53                   	push   ebx
c00160a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160af:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160b7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160bd:	77 41                	ja     c0016100 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00160bf:	99                   	cdq    
c00160c0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160c6:	01 c8                	add    eax,ecx
c00160c8:	11 da                	adc    edx,ebx
c00160ca:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160d0:	19 d7                	sbb    edi,edx
c00160d2:	72 33                	jb     c0016107 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00160d4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160da:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160e4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160e8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160f8:	5b                   	pop    ebx
c00160f9:	5e                   	pop    esi
c00160fa:	5f                   	pop    edi
c00160fb:	e9 76 09 00 00       	jmp    c0016a76 <VCache::write(unsigned long long, int, void*)>
c0016100:	b8 05 00 00 00       	mov    eax,0x5
c0016105:	eb 05                	jmp    c001610c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016107:	b8 07 00 00 00       	mov    eax,0x7
c001610c:	5b                   	pop    ebx
c001610d:	5e                   	pop    esi
c001610e:	5f                   	pop    edi
c001610f:	c3                   	ret    

c0016110 <Mouse::Mouse(char const*)>:
c0016110:	83 ec 0c             	sub    esp,0xc
c0016113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016117:	83 ec 08             	sub    esp,0x8
c001611a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001611e:	50                   	push   eax
c001611f:	e8 fc db ff ff       	call   c0013d20 <Device::Device(char const*)>
c0016124:	83 c4 10             	add    esp,0x10
c0016127:	ba 00 b0 02 c0       	mov    edx,0xc002b000
c001612c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016130:	89 10                	mov    DWORD PTR [eax],edx
c0016132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016136:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016140:	90                   	nop
c0016141:	83 c4 0c             	add    esp,0xc
c0016144:	c3                   	ret    
c0016145:	90                   	nop

c0016146 <Mouse::~Mouse()>:
c0016146:	83 ec 0c             	sub    esp,0xc
c0016149:	ba 00 b0 02 c0       	mov    edx,0xc002b000
c001614e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016152:	89 10                	mov    DWORD PTR [eax],edx
c0016154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016158:	83 ec 0c             	sub    esp,0xc
c001615b:	50                   	push   eax
c001615c:	e8 89 d8 ff ff       	call   c00139ea <Device::~Device()>
c0016161:	83 c4 10             	add    esp,0x10
c0016164:	90                   	nop
c0016165:	83 c4 0c             	add    esp,0xc
c0016168:	c3                   	ret    
c0016169:	90                   	nop

c001616a <Mouse::~Mouse()>:
c001616a:	83 ec 0c             	sub    esp,0xc
c001616d:	83 ec 0c             	sub    esp,0xc
c0016170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016174:	e8 cd ff ff ff       	call   c0016146 <Mouse::~Mouse()>
c0016179:	83 c4 10             	add    esp,0x10
c001617c:	83 ec 08             	sub    esp,0x8
c001617f:	68 58 01 00 00       	push   0x158
c0016184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016188:	e8 7e c4 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c001618d:	83 c4 10             	add    esp,0x10
c0016190:	83 c4 0c             	add    esp,0xc
c0016193:	c3                   	ret    

c0016194 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016194:	55                   	push   ebp
c0016195:	57                   	push   edi
c0016196:	56                   	push   esi
c0016197:	53                   	push   ebx
c0016198:	81 ec 28 01 00 00    	sub    esp,0x128
c001619e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00161a5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00161ac:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00161b3:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00161ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00161c2:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161c9:	e8 4e dc ff ff       	call   c0013e1c <Device::getName()>
c00161ce:	5a                   	pop    edx
c00161cf:	59                   	pop    ecx
c00161d0:	50                   	push   eax
c00161d1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00161d5:	55                   	push   ebp
c00161d6:	e8 31 a6 fe ff       	call   c000080c <strcpy>
c00161db:	5b                   	pop    ebx
c00161dc:	58                   	pop    eax
c00161dd:	68 24 b0 02 c0       	push   0xc002b024
c00161e2:	55                   	push   ebp
c00161e3:	e8 64 a7 fe ff       	call   c000094c <strcat>
c00161e8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00161ef:	e8 a5 93 ff ff       	call   c000f599 <malloc>
c00161f4:	83 c4 0c             	add    esp,0xc
c00161f7:	89 c3                	mov    ebx,eax
c00161f9:	57                   	push   edi
c00161fa:	56                   	push   esi
c00161fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016203:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001620a:	55                   	push   ebp
c001620b:	50                   	push   eax
c001620c:	e8 f9 fb ff ff       	call   c0015e0a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016211:	83 c4 14             	add    esp,0x14
c0016214:	53                   	push   ebx
c0016215:	e8 a6 fc ff ff       	call   c0015ec0 <LogicalDisk::assignDriveLetter()>
c001621a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001621d:	e8 54 fd ff ff       	call   c0015f76 <LogicalDisk::mount()>
c0016222:	58                   	pop    eax
c0016223:	5a                   	pop    edx
c0016224:	53                   	push   ebx
c0016225:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001622c:	e8 eb d8 ff ff       	call   c0013b1c <Device::addChild(Device*)>
c0016231:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016237:	5b                   	pop    ebx
c0016238:	5e                   	pop    esi
c0016239:	5f                   	pop    edi
c001623a:	5d                   	pop    ebp
c001623b:	c3                   	ret    

c001623c <createPartitionsForDisk(PhysicalDisk*)>:
c001623c:	55                   	push   ebp
c001623d:	57                   	push   edi
c001623e:	56                   	push   esi
c001623f:	53                   	push   ebx
c0016240:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016246:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001624d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016253:	3d 00 02 00 00       	cmp    eax,0x200
c0016258:	74 27                	je     c0016281 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001625a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016260:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016266:	83 ec 10             	sub    esp,0x10
c0016269:	0f a4 f7 0a          	shld   edi,esi,0xa
c001626d:	99                   	cdq    
c001626e:	c1 e6 0a             	shl    esi,0xa
c0016271:	52                   	push   edx
c0016272:	89 fd                	mov    ebp,edi
c0016274:	50                   	push   eax
c0016275:	55                   	push   ebp
c0016276:	56                   	push   esi
c0016277:	e8 a8 04 01 00       	call   c0026724 <__udivdi3>
c001627c:	e9 b1 00 00 00       	jmp    c0016332 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016281:	83 ec 0c             	sub    esp,0xc
c0016284:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016286:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001628a:	56                   	push   esi
c001628b:	6a 01                	push   0x1
c001628d:	6a 00                	push   0x0
c001628f:	6a 00                	push   0x0
c0016291:	53                   	push   ebx
c0016292:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016295:	83 c4 20             	add    esp,0x20
c0016298:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00162a0:	75 0a                	jne    c00162ac <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00162a2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00162aa:	74 2c                	je     c00162d8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00162ac:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162b2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162b8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162be:	83 ec 10             	sub    esp,0x10
c00162c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162c5:	89 f7                	mov    edi,esi
c00162c7:	c1 e0 0a             	shl    eax,0xa
c00162ca:	c1 ff 1f             	sar    edi,0x1f
c00162cd:	57                   	push   edi
c00162ce:	56                   	push   esi
c00162cf:	52                   	push   edx
c00162d0:	50                   	push   eax
c00162d1:	e8 4e 04 01 00       	call   c0026724 <__udivdi3>
c00162d6:	eb 5a                	jmp    c0016332 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162d8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00162df:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00162e6:	83 e1 7f             	and    ecx,0x7f
c00162e9:	83 e0 7f             	and    eax,0x7f
c00162ec:	01 c1                	add    ecx,eax
c00162ee:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00162f5:	83 e0 7f             	and    eax,0x7f
c00162f8:	01 c1                	add    ecx,eax
c00162fa:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016301:	83 e0 7f             	and    eax,0x7f
c0016304:	00 c1                	add    cl,al
c0016306:	74 41                	je     c0016349 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016308:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001630e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016314:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001631a:	83 ec 10             	sub    esp,0x10
c001631d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016321:	89 f7                	mov    edi,esi
c0016323:	c1 e0 0a             	shl    eax,0xa
c0016326:	c1 ff 1f             	sar    edi,0x1f
c0016329:	57                   	push   edi
c001632a:	56                   	push   esi
c001632b:	52                   	push   edx
c001632c:	50                   	push   eax
c001632d:	e8 f2 03 01 00       	call   c0026724 <__udivdi3>
c0016332:	83 c4 14             	add    esp,0x14
c0016335:	52                   	push   edx
c0016336:	50                   	push   eax
c0016337:	6a 00                	push   0x0
c0016339:	6a 00                	push   0x0
c001633b:	53                   	push   ebx
c001633c:	e8 53 fe ff ff       	call   c0016194 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016341:	83 c4 20             	add    esp,0x20
c0016344:	e9 79 01 00 00       	jmp    c00164c2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016349:	89 f0                	mov    eax,esi
c001634b:	31 f6                	xor    esi,esi
c001634d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016354:	75 02                	jne    c0016358 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016356:	89 f1                	mov    ecx,esi
c0016358:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001635f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016366:	c1 e2 08             	shl    edx,0x8
c0016369:	c1 e7 10             	shl    edi,0x10
c001636c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016374:	09 fa                	or     edx,edi
c0016376:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001637e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016385:	83 c0 10             	add    eax,0x10
c0016388:	09 fa                	or     edx,edi
c001638a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016391:	c1 e7 18             	shl    edi,0x18
c0016394:	09 fa                	or     edx,edi
c0016396:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001639d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00163a1:	c1 e7 10             	shl    edi,0x10
c00163a4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00163ab:	c1 e2 08             	shl    edx,0x8
c00163ae:	09 fa                	or     edx,edi
c00163b0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00163b7:	09 fa                	or     edx,edi
c00163b9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00163c0:	c1 e7 18             	shl    edi,0x18
c00163c3:	09 fa                	or     edx,edi
c00163c5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00163c9:	46                   	inc    esi
c00163ca:	83 fe 04             	cmp    esi,0x4
c00163cd:	0f 85 7a ff ff ff    	jne    c001634d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00163d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d7:	83 f0 01             	xor    eax,0x1
c00163da:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00163de:	75 57                	jne    c0016437 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163e4:	83 f0 01             	xor    eax,0x1
c00163e7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00163eb:	75 4a                	jne    c0016437 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163ed:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00163f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00163f9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016401:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016407:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001640d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016413:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016417:	89 f7                	mov    edi,esi
c0016419:	c1 e0 0a             	shl    eax,0xa
c001641c:	c1 ff 1f             	sar    edi,0x1f
c001641f:	57                   	push   edi
c0016420:	56                   	push   esi
c0016421:	52                   	push   edx
c0016422:	50                   	push   eax
c0016423:	e8 fc 02 01 00       	call   c0026724 <__udivdi3>
c0016428:	83 c4 10             	add    esp,0x10
c001642b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001642f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016433:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016437:	84 c9                	test   cl,cl
c0016439:	74 53                	je     c001648e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001643b:	0f b6 c9             	movzx  ecx,cl
c001643e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016442:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016446:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001644a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001644e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016452:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016456:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001645a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001645e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016462:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016466:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001646a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001646e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016472:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016476:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001647a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001647e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016482:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016486:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001648a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001648e:	31 ed                	xor    ebp,ebp
c0016490:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016494:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016498:	89 f8                	mov    eax,edi
c001649a:	09 f0                	or     eax,esi
c001649c:	74 1e                	je     c00164bc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001649e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00164a2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00164a6:	89 d1                	mov    ecx,edx
c00164a8:	09 c1                	or     ecx,eax
c00164aa:	74 10                	je     c00164bc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00164ac:	83 ec 0c             	sub    esp,0xc
c00164af:	57                   	push   edi
c00164b0:	56                   	push   esi
c00164b1:	52                   	push   edx
c00164b2:	50                   	push   eax
c00164b3:	53                   	push   ebx
c00164b4:	e8 db fc ff ff       	call   c0016194 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00164b9:	83 c4 20             	add    esp,0x20
c00164bc:	45                   	inc    ebp
c00164bd:	83 fd 04             	cmp    ebp,0x4
c00164c0:	75 ce                	jne    c0016490 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00164c2:	81 c4 5c 02 00 00    	add    esp,0x25c
c00164c8:	5b                   	pop    ebx
c00164c9:	5e                   	pop    esi
c00164ca:	5f                   	pop    edi
c00164cb:	5d                   	pop    ebp
c00164cc:	c3                   	ret    
c00164cd:	90                   	nop

c00164ce <Serial::Serial(char const*)>:
c00164ce:	83 ec 0c             	sub    esp,0xc
c00164d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d5:	83 ec 08             	sub    esp,0x8
c00164d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164dc:	50                   	push   eax
c00164dd:	e8 3e d8 ff ff       	call   c0013d20 <Device::Device(char const*)>
c00164e2:	83 c4 10             	add    esp,0x10
c00164e5:	ba 38 b0 02 c0       	mov    edx,0xc002b038
c00164ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ee:	89 10                	mov    DWORD PTR [eax],edx
c00164f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f4:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00164fe:	90                   	nop
c00164ff:	83 c4 0c             	add    esp,0xc
c0016502:	c3                   	ret    
c0016503:	90                   	nop

c0016504 <Serial::~Serial()>:
c0016504:	83 ec 0c             	sub    esp,0xc
c0016507:	ba 38 b0 02 c0       	mov    edx,0xc002b038
c001650c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016510:	89 10                	mov    DWORD PTR [eax],edx
c0016512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016516:	83 ec 0c             	sub    esp,0xc
c0016519:	50                   	push   eax
c001651a:	e8 cb d4 ff ff       	call   c00139ea <Device::~Device()>
c001651f:	83 c4 10             	add    esp,0x10
c0016522:	90                   	nop
c0016523:	83 c4 0c             	add    esp,0xc
c0016526:	c3                   	ret    
c0016527:	90                   	nop

c0016528 <Serial::~Serial()>:
c0016528:	83 ec 0c             	sub    esp,0xc
c001652b:	83 ec 0c             	sub    esp,0xc
c001652e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016532:	e8 cd ff ff ff       	call   c0016504 <Serial::~Serial()>
c0016537:	83 c4 10             	add    esp,0x10
c001653a:	83 ec 08             	sub    esp,0x8
c001653d:	68 58 01 00 00       	push   0x158
c0016542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016546:	e8 c0 c0 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c001654b:	83 c4 10             	add    esp,0x10
c001654e:	83 c4 0c             	add    esp,0xc
c0016551:	c3                   	ret    

c0016552 <Timer::Timer(char const*)>:
c0016552:	83 ec 0c             	sub    esp,0xc
c0016555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016559:	83 ec 08             	sub    esp,0x8
c001655c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016560:	50                   	push   eax
c0016561:	e8 ba d7 ff ff       	call   c0013d20 <Device::Device(char const*)>
c0016566:	83 c4 10             	add    esp,0x10
c0016569:	ba 7c b0 02 c0       	mov    edx,0xc002b07c
c001656e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016572:	89 10                	mov    DWORD PTR [eax],edx
c0016574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016578:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016582:	90                   	nop
c0016583:	83 c4 0c             	add    esp,0xc
c0016586:	c3                   	ret    
c0016587:	90                   	nop

c0016588 <Timer::~Timer()>:
c0016588:	83 ec 0c             	sub    esp,0xc
c001658b:	ba 7c b0 02 c0       	mov    edx,0xc002b07c
c0016590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016594:	89 10                	mov    DWORD PTR [eax],edx
c0016596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001659a:	83 ec 0c             	sub    esp,0xc
c001659d:	50                   	push   eax
c001659e:	e8 47 d4 ff ff       	call   c00139ea <Device::~Device()>
c00165a3:	83 c4 10             	add    esp,0x10
c00165a6:	90                   	nop
c00165a7:	83 c4 0c             	add    esp,0xc
c00165aa:	c3                   	ret    
c00165ab:	90                   	nop

c00165ac <Timer::~Timer()>:
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	83 ec 0c             	sub    esp,0xc
c00165b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165b6:	e8 cd ff ff ff       	call   c0016588 <Timer::~Timer()>
c00165bb:	83 c4 10             	add    esp,0x10
c00165be:	83 ec 08             	sub    esp,0x8
c00165c1:	68 5c 01 00 00       	push   0x15c
c00165c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ca:	e8 3c c0 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c00165cf:	83 c4 10             	add    esp,0x10
c00165d2:	83 c4 0c             	add    esp,0xc
c00165d5:	c3                   	ret    

c00165d6 <Timer::read()>:
c00165d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00165e0:	c3                   	ret    

c00165e1 <timerHandler(unsigned long long)>:
c00165e1:	55                   	push   ebp
c00165e2:	57                   	push   edi
c00165e3:	56                   	push   esi
c00165e4:	53                   	push   ebx
c00165e5:	83 ec 0c             	sub    esp,0xc
c00165e8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00165ec:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00165f0:	01 35 30 e0 02 c0    	add    DWORD PTR ds:0xc002e030,esi
c00165f6:	11 3d 34 e0 02 c0    	adc    DWORD PTR ds:0xc002e034,edi
c00165fc:	80 3d cd d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d9cd,0x0
c0016603:	0f 84 42 01 00 00    	je     c001674b <timerHandler(unsigned long long)+0x16a>
c0016609:	fa                   	cli    
c001660a:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c0016610:	83 ec 0c             	sub    esp,0xc
c0016613:	ff 05 e4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee4
c0016619:	68 f8 0e 03 c0       	push   0xc0030ef8
c001661e:	e8 5b 21 01 00       	call   c002877e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016623:	83 c4 10             	add    esp,0x10
c0016626:	84 c0                	test   al,al
c0016628:	0f 85 a2 00 00 00    	jne    c00166d0 <timerHandler(unsigned long long)+0xef>
c001662e:	83 ec 0c             	sub    esp,0xc
c0016631:	68 f8 0e 03 c0       	push   0xc0030ef8
c0016636:	e8 5f 21 01 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001663b:	83 c4 10             	add    esp,0x10
c001663e:	89 c3                	mov    ebx,eax
c0016640:	83 ec 0c             	sub    esp,0xc
c0016643:	68 f8 0e 03 c0       	push   0xc0030ef8
c0016648:	e8 4d 21 01 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001664d:	c7 04 24 f8 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ef8
c0016654:	89 c5                	mov    ebp,eax
c0016656:	e8 47 21 01 00       	call   c00287a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001665b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001665e:	83 c4 10             	add    esp,0x10
c0016661:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016664:	39 15 30 e0 02 c0    	cmp    DWORD PTR ds:0xc002e030,edx
c001666a:	a1 34 e0 02 c0       	mov    eax,ds:0xc002e034
c001666f:	19 c8                	sbb    eax,ecx
c0016671:	72 21                	jb     c0016694 <timerHandler(unsigned long long)+0xb3>
c0016673:	83 ec 0c             	sub    esp,0xc
c0016676:	55                   	push   ebp
c0016677:	e8 e8 77 00 00       	call   c001de64 <unblockTask(ThreadControlBlock*)>
c001667c:	83 c4 10             	add    esp,0x10
c001667f:	39 eb                	cmp    ebx,ebp
c0016681:	75 21                	jne    c00166a4 <timerHandler(unsigned long long)+0xc3>
c0016683:	83 ec 0c             	sub    esp,0xc
c0016686:	68 f8 0e 03 c0       	push   0xc0030ef8
c001668b:	e8 0a 21 01 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016690:	89 c3                	mov    ebx,eax
c0016692:	eb 0d                	jmp    c00166a1 <timerHandler(unsigned long long)+0xc0>
c0016694:	50                   	push   eax
c0016695:	50                   	push   eax
c0016696:	55                   	push   ebp
c0016697:	68 f8 0e 03 c0       	push   0xc0030ef8
c001669c:	e8 af 21 01 00       	call   c0028850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166a1:	83 c4 10             	add    esp,0x10
c00166a4:	83 ec 0c             	sub    esp,0xc
c00166a7:	68 f8 0e 03 c0       	push   0xc0030ef8
c00166ac:	e8 cd 20 01 00       	call   c002877e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166b1:	83 c4 10             	add    esp,0x10
c00166b4:	84 c0                	test   al,al
c00166b6:	75 18                	jne    c00166d0 <timerHandler(unsigned long long)+0xef>
c00166b8:	83 ec 0c             	sub    esp,0xc
c00166bb:	68 f8 0e 03 c0       	push   0xc0030ef8
c00166c0:	e8 d5 20 01 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166c5:	83 c4 10             	add    esp,0x10
c00166c8:	39 d8                	cmp    eax,ebx
c00166ca:	0f 85 70 ff ff ff    	jne    c0016640 <timerHandler(unsigned long long)+0x5f>
c00166d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d5:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00166d9:	74 3d                	je     c0016718 <timerHandler(unsigned long long)+0x137>
c00166db:	80 3d cc d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d9cc,0x0
c00166e2:	74 34                	je     c0016718 <timerHandler(unsigned long long)+0x137>
c00166e4:	fa                   	cli    
c00166e5:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c00166eb:	31 d2                	xor    edx,edx
c00166ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166f2:	89 f9                	mov    ecx,edi
c00166f4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00166f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00166ff:	39 c6                	cmp    esi,eax
c0016701:	19 d1                	sbb    ecx,edx
c0016703:	72 05                	jb     c001670a <timerHandler(unsigned long long)+0x129>
c0016705:	e8 d7 72 00 00       	call   c001d9e1 <schedule()>
c001670a:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001670f:	48                   	dec    eax
c0016710:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0016715:	75 01                	jne    c0016718 <timerHandler(unsigned long long)+0x137>
c0016717:	fb                   	sti    
c0016718:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001671d:	48                   	dec    eax
c001671e:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c0016723:	75 18                	jne    c001673d <timerHandler(unsigned long long)+0x15c>
c0016725:	83 3d e0 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030ee0,0x0
c001672c:	74 0f                	je     c001673d <timerHandler(unsigned long long)+0x15c>
c001672e:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c0016738:	e8 a4 72 00 00       	call   c001d9e1 <schedule()>
c001673d:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0016742:	48                   	dec    eax
c0016743:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0016748:	75 01                	jne    c001674b <timerHandler(unsigned long long)+0x16a>
c001674a:	fb                   	sti    
c001674b:	83 c4 0c             	add    esp,0xc
c001674e:	5b                   	pop    ebx
c001674f:	5e                   	pop    esi
c0016750:	5f                   	pop    edi
c0016751:	5d                   	pop    ebp
c0016752:	c3                   	ret    

c0016753 <setupTimer(int)>:
c0016753:	57                   	push   edi
c0016754:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0016759:	56                   	push   esi
c001675a:	53                   	push   ebx
c001675b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001675f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016765:	83 ec 0c             	sub    esp,0xc
c0016768:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001676e:	e8 a9 d6 ff ff       	call   c0013e1c <Device::getName()>
c0016773:	83 c4 10             	add    esp,0x10
c0016776:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016779:	0f 85 8d 00 00 00    	jne    c001680c <setupTimer(int)+0xb9>
c001677f:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0016784:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001678b:	74 7f                	je     c001680c <setupTimer(int)+0xb9>
c001678d:	83 ec 0c             	sub    esp,0xc
c0016790:	68 5c 01 00 00       	push   0x15c
c0016795:	e8 ff 8d ff ff       	call   c000f599 <malloc>
c001679a:	89 04 24             	mov    DWORD PTR [esp],eax
c001679d:	89 c3                	mov    ebx,eax
c001679f:	e8 5c fb 00 00       	call   c0026300 <PIT::PIT()>
c00167a4:	59                   	pop    ecx
c00167a5:	5f                   	pop    edi
c00167a6:	53                   	push   ebx
c00167a7:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c00167ad:	e8 6a d3 ff ff       	call   c0013b1c <Device::addChild(Device*)>
c00167b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167b4:	6a 00                	push   0x0
c00167b6:	6a 00                	push   0x0
c00167b8:	56                   	push   esi
c00167b9:	53                   	push   ebx
c00167ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167bd:	83 c4 14             	add    esp,0x14
c00167c0:	68 60 01 00 00       	push   0x160
c00167c5:	e8 cf 8d ff ff       	call   c000f599 <malloc>
c00167ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00167cd:	89 c7                	mov    edi,eax
c00167cf:	e8 dc f9 00 00       	call   c00261b0 <APICTimer::APICTimer()>
c00167d4:	6a 00                	push   0x0
c00167d6:	6a 00                	push   0x0
c00167d8:	56                   	push   esi
c00167d9:	57                   	push   edi
c00167da:	e8 d3 f8 00 00       	call   c00260b2 <APICTimer::open(int, int, void*)>
c00167df:	83 c4 20             	add    esp,0x20
c00167e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167e4:	6a 00                	push   0x0
c00167e6:	6a 00                	push   0x0
c00167e8:	6a 00                	push   0x0
c00167ea:	53                   	push   ebx
c00167eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00167ee:	58                   	pop    eax
c00167ef:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00167f4:	5a                   	pop    edx
c00167f5:	57                   	push   edi
c00167f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167fc:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016802:	e8 15 d3 ff ff       	call   c0013b1c <Device::addChild(Device*)>
c0016807:	83 c4 10             	add    esp,0x10
c001680a:	eb 33                	jmp    c001683f <setupTimer(int)+0xec>
c001680c:	83 ec 0c             	sub    esp,0xc
c001680f:	68 5c 01 00 00       	push   0x15c
c0016814:	e8 80 8d ff ff       	call   c000f599 <malloc>
c0016819:	89 04 24             	mov    DWORD PTR [esp],eax
c001681c:	89 c3                	mov    ebx,eax
c001681e:	e8 dd fa 00 00       	call   c0026300 <PIT::PIT()>
c0016823:	58                   	pop    eax
c0016824:	5a                   	pop    edx
c0016825:	53                   	push   ebx
c0016826:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c001682c:	e8 eb d2 ff ff       	call   c0013b1c <Device::addChild(Device*)>
c0016831:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016833:	6a 00                	push   0x0
c0016835:	6a 00                	push   0x0
c0016837:	56                   	push   esi
c0016838:	53                   	push   ebx
c0016839:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001683c:	83 c4 20             	add    esp,0x20
c001683f:	89 d8                	mov    eax,ebx
c0016841:	5b                   	pop    ebx
c0016842:	5e                   	pop    esi
c0016843:	5f                   	pop    edi
c0016844:	c3                   	ret    
c0016845:	90                   	nop

c0016846 <VCache::VCache(PhysicalDisk*)>:
c0016846:	53                   	push   ebx
c0016847:	83 ec 18             	sub    esp,0x18
c001684a:	ba ac b0 02 c0       	mov    edx,0xc002b0ac
c001684f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016853:	89 10                	mov    DWORD PTR [eax],edx
c0016855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016859:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016860:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016864:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001686b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016876:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001687d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016881:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016888:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001688f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016893:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001689a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001689e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00168a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a6:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00168ad:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00168b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b8:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00168bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c0:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00168c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00168cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d0:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00168d7:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00168df:	83 ec 0c             	sub    esp,0xc
c00168e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168e6:	e8 ae 8c ff ff       	call   c000f599 <malloc>
c00168eb:	83 c4 10             	add    esp,0x10
c00168ee:	89 c3                	mov    ebx,eax
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	53                   	push   ebx
c00168f4:	e8 b1 6e 00 00       	call   c001d7aa <Mutex::Mutex()>
c00168f9:	83 c4 10             	add    esp,0x10
c00168fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016900:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016907:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001690b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001690e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016912:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016919:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001691d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016927:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001692a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001692e:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016934:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001693a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001693e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016941:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016948:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001694c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016950:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016956:	05 00 01 00 00       	add    eax,0x100
c001695b:	c1 e0 04             	shl    eax,0x4
c001695e:	83 ec 0c             	sub    esp,0xc
c0016961:	50                   	push   eax
c0016962:	e8 32 8c ff ff       	call   c000f599 <malloc>
c0016967:	83 c4 10             	add    esp,0x10
c001696a:	89 c2                	mov    edx,eax
c001696c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016970:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016973:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016977:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001697e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016982:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016986:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001698a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016990:	c1 e0 07             	shl    eax,0x7
c0016993:	83 ec 0c             	sub    esp,0xc
c0016996:	50                   	push   eax
c0016997:	e8 fd 8b ff ff       	call   c000f599 <malloc>
c001699c:	83 c4 10             	add    esp,0x10
c001699f:	89 c2                	mov    edx,eax
c00169a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169a5:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00169a8:	90                   	nop
c00169a9:	83 c4 18             	add    esp,0x18
c00169ac:	5b                   	pop    ebx
c00169ad:	c3                   	ret    

c00169ae <VCache::invalidateReadBuffer()>:
c00169ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169b2:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00169b8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00169bc:	c3                   	ret    
c00169bd:	90                   	nop

c00169be <VCache::writeWriteBuffer()>:
c00169be:	53                   	push   ebx
c00169bf:	83 ec 14             	sub    esp,0x14
c00169c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00169c6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00169cb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169d1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00169d4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00169d7:	50                   	push   eax
c00169d8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00169db:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00169e2:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00169e9:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00169ed:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00169f4:	83 c4 28             	add    esp,0x28
c00169f7:	5b                   	pop    ebx
c00169f8:	c3                   	ret    
c00169f9:	90                   	nop

c00169fa <VCache::~VCache()>:
c00169fa:	83 ec 0c             	sub    esp,0xc
c00169fd:	ba ac b0 02 c0       	mov    edx,0xc002b0ac
c0016a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a06:	89 10                	mov    DWORD PTR [eax],edx
c0016a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a0c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016a0f:	84 c0                	test   al,al
c0016a11:	74 0f                	je     c0016a22 <VCache::~VCache()+0x28>
c0016a13:	83 ec 0c             	sub    esp,0xc
c0016a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a1a:	e8 9f ff ff ff       	call   c00169be <VCache::writeWriteBuffer()>
c0016a1f:	83 c4 10             	add    esp,0x10
c0016a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a26:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016a29:	83 ec 0c             	sub    esp,0xc
c0016a2c:	50                   	push   eax
c0016a2d:	e8 77 8b ff ff       	call   c000f5a9 <free>
c0016a32:	83 c4 10             	add    esp,0x10
c0016a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a3c:	83 ec 0c             	sub    esp,0xc
c0016a3f:	50                   	push   eax
c0016a40:	e8 64 8b ff ff       	call   c000f5a9 <free>
c0016a45:	83 c4 10             	add    esp,0x10
c0016a48:	90                   	nop
c0016a49:	83 c4 0c             	add    esp,0xc
c0016a4c:	c3                   	ret    
c0016a4d:	90                   	nop

c0016a4e <VCache::~VCache()>:
c0016a4e:	83 ec 0c             	sub    esp,0xc
c0016a51:	83 ec 0c             	sub    esp,0xc
c0016a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a58:	e8 9d ff ff ff       	call   c00169fa <VCache::~VCache()>
c0016a5d:	83 c4 10             	add    esp,0x10
c0016a60:	83 ec 08             	sub    esp,0x8
c0016a63:	6a 44                	push   0x44
c0016a65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a69:	e8 9d bb ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0016a6e:	83 c4 10             	add    esp,0x10
c0016a71:	83 c4 0c             	add    esp,0xc
c0016a74:	c3                   	ret    
c0016a75:	90                   	nop

c0016a76 <VCache::write(unsigned long long, int, void*)>:
c0016a76:	55                   	push   ebp
c0016a77:	57                   	push   edi
c0016a78:	56                   	push   esi
c0016a79:	53                   	push   ebx
c0016a7a:	83 ec 18             	sub    esp,0x18
c0016a7d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a85:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a89:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a8c:	e8 5f 72 00 00       	call   c001dcf0 <Semaphore::acquire()>
c0016a91:	83 c4 10             	add    esp,0x10
c0016a94:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016a98:	74 0c                	je     c0016aa6 <VCache::write(unsigned long long, int, void*)+0x30>
c0016a9a:	83 ec 0c             	sub    esp,0xc
c0016a9d:	53                   	push   ebx
c0016a9e:	e8 0b ff ff ff       	call   c00169ae <VCache::invalidateReadBuffer()>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016aaa:	74 5c                	je     c0016b08 <VCache::write(unsigned long long, int, void*)+0x92>
c0016aac:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016aaf:	89 e8                	mov    eax,ebp
c0016ab1:	99                   	cdq    
c0016ab2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016ab5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016ab8:	89 c1                	mov    ecx,eax
c0016aba:	89 d0                	mov    eax,edx
c0016abc:	31 f1                	xor    ecx,esi
c0016abe:	31 f8                	xor    eax,edi
c0016ac0:	09 c1                	or     ecx,eax
c0016ac2:	75 38                	jne    c0016afc <VCache::write(unsigned long long, int, void*)+0x86>
c0016ac4:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016ac9:	75 31                	jne    c0016afc <VCache::write(unsigned long long, int, void*)+0x86>
c0016acb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ace:	89 ef                	mov    edi,ebp
c0016ad0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016ad6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ada:	0f af f9             	imul   edi,ecx
c0016add:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016ae0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ae2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ae5:	40                   	inc    eax
c0016ae6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016ae9:	83 c0 80             	add    eax,0xffffff80
c0016aec:	75 5c                	jne    c0016b4a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016aee:	83 ec 0c             	sub    esp,0xc
c0016af1:	53                   	push   ebx
c0016af2:	e8 c7 fe ff ff       	call   c00169be <VCache::writeWriteBuffer()>
c0016af7:	83 c4 10             	add    esp,0x10
c0016afa:	eb 4e                	jmp    c0016b4a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016afc:	83 ec 0c             	sub    esp,0xc
c0016aff:	53                   	push   ebx
c0016b00:	e8 b9 fe ff ff       	call   c00169be <VCache::writeWriteBuffer()>
c0016b05:	83 c4 10             	add    esp,0x10
c0016b08:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b0b:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016b10:	7f 22                	jg     c0016b34 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016b12:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016b15:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016b18:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016b1c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b20:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016b23:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016b26:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b2c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b32:	eb 16                	jmp    c0016b4a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b34:	83 ec 0c             	sub    esp,0xc
c0016b37:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b41:	57                   	push   edi
c0016b42:	56                   	push   esi
c0016b43:	50                   	push   eax
c0016b44:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b47:	83 c4 20             	add    esp,0x20
c0016b4a:	83 ec 0c             	sub    esp,0xc
c0016b4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b50:	e8 f7 77 00 00       	call   c001e34c <Semaphore::release()>
c0016b55:	83 c4 1c             	add    esp,0x1c
c0016b58:	31 c0                	xor    eax,eax
c0016b5a:	5b                   	pop    ebx
c0016b5b:	5e                   	pop    esi
c0016b5c:	5f                   	pop    edi
c0016b5d:	5d                   	pop    ebp
c0016b5e:	c3                   	ret    
c0016b5f:	90                   	nop

c0016b60 <VCache::read(unsigned long long, int, void*)>:
c0016b60:	55                   	push   ebp
c0016b61:	57                   	push   edi
c0016b62:	56                   	push   esi
c0016b63:	53                   	push   ebx
c0016b64:	83 ec 28             	sub    esp,0x28
c0016b67:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b6b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b6f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b73:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016b77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b7a:	e8 71 71 00 00       	call   c001dcf0 <Semaphore::acquire()>
c0016b7f:	83 c4 10             	add    esp,0x10
c0016b82:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b86:	74 0c                	je     c0016b94 <VCache::read(unsigned long long, int, void*)+0x34>
c0016b88:	83 ec 0c             	sub    esp,0xc
c0016b8b:	53                   	push   ebx
c0016b8c:	e8 2d fe ff ff       	call   c00169be <VCache::writeWriteBuffer()>
c0016b91:	83 c4 10             	add    esp,0x10
c0016b94:	83 fd 01             	cmp    ebp,0x1
c0016b97:	0f 85 80 00 00 00    	jne    c0016c1d <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b9d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ba0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ba4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016bab:	75 70                	jne    c0016c1d <VCache::read(unsigned long long, int, void*)+0xbd>
c0016bad:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016bb0:	89 e9                	mov    ecx,ebp
c0016bb2:	f7 d9                	neg    ecx
c0016bb4:	89 c8                	mov    eax,ecx
c0016bb6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016bba:	c1 f8 1f             	sar    eax,0x1f
c0016bbd:	21 f1                	and    ecx,esi
c0016bbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bc3:	89 c8                	mov    eax,ecx
c0016bc5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bc9:	21 f9                	and    ecx,edi
c0016bcb:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016bcf:	89 ca                	mov    edx,ecx
c0016bd1:	74 0a                	je     c0016bdd <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bd3:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016bd6:	75 05                	jne    c0016bdd <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bd8:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016bdb:	74 23                	je     c0016c00 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016bdd:	83 ec 0c             	sub    esp,0xc
c0016be0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016be4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016be8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016beb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016bee:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016bf0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016bf3:	55                   	push   ebp
c0016bf4:	52                   	push   edx
c0016bf5:	50                   	push   eax
c0016bf6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bfa:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016bfd:	83 c4 20             	add    esp,0x20
c0016c00:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c03:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c07:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016c0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016c10:	48                   	dec    eax
c0016c11:	21 c6                	and    esi,eax
c0016c13:	0f af f1             	imul   esi,ecx
c0016c16:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016c19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c1b:	eb 1d                	jmp    c0016c3a <VCache::read(unsigned long long, int, void*)+0xda>
c0016c1d:	83 ec 0c             	sub    esp,0xc
c0016c20:	53                   	push   ebx
c0016c21:	e8 88 fd ff ff       	call   c00169ae <VCache::invalidateReadBuffer()>
c0016c26:	5a                   	pop    edx
c0016c27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c2c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016c30:	55                   	push   ebp
c0016c31:	57                   	push   edi
c0016c32:	56                   	push   esi
c0016c33:	50                   	push   eax
c0016c34:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c37:	83 c4 20             	add    esp,0x20
c0016c3a:	83 ec 0c             	sub    esp,0xc
c0016c3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c40:	e8 07 77 00 00       	call   c001e34c <Semaphore::release()>
c0016c45:	83 c4 2c             	add    esp,0x2c
c0016c48:	31 c0                	xor    eax,eax
c0016c4a:	5b                   	pop    ebx
c0016c4b:	5e                   	pop    esi
c0016c4c:	5f                   	pop    edi
c0016c4d:	5d                   	pop    ebp
c0016c4e:	c3                   	ret    
c0016c4f:	90                   	nop

c0016c50 <Video::putrect(int, int, int, int, unsigned int)>:
c0016c50:	55                   	push   ebp
c0016c51:	57                   	push   edi
c0016c52:	56                   	push   esi
c0016c53:	53                   	push   ebx
c0016c54:	83 ec 1c             	sub    esp,0x1c
c0016c57:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c5f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c63:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c6f:	01 df                	add    edi,ebx
c0016c71:	39 fb                	cmp    ebx,edi
c0016c73:	7d 1f                	jge    c0016c94 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016c75:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c79:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016c7d:	7d 12                	jge    c0016c91 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016c7f:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c81:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016c85:	53                   	push   ebx
c0016c86:	55                   	push   ebp
c0016c87:	45                   	inc    ebp
c0016c88:	56                   	push   esi
c0016c89:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016c8c:	83 c4 10             	add    esp,0x10
c0016c8f:	eb e8                	jmp    c0016c79 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016c91:	43                   	inc    ebx
c0016c92:	eb dd                	jmp    c0016c71 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016c94:	83 c4 1c             	add    esp,0x1c
c0016c97:	5b                   	pop    ebx
c0016c98:	5e                   	pop    esi
c0016c99:	5f                   	pop    edi
c0016c9a:	5d                   	pop    ebp
c0016c9b:	c3                   	ret    

c0016c9c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016c9c:	55                   	push   ebp
c0016c9d:	57                   	push   edi
c0016c9e:	31 ff                	xor    edi,edi
c0016ca0:	56                   	push   esi
c0016ca1:	53                   	push   ebx
c0016ca2:	83 ec 1c             	sub    esp,0x1c
c0016ca5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ca9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016cad:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016cb4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016cb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cbd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016cc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016cc5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016cc8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016ccc:	01 f9                	add    ecx,edi
c0016cce:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016cd2:	7d 2f                	jge    c0016d03 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016cd4:	31 f6                	xor    esi,esi
c0016cd6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016cda:	01 f2                	add    edx,esi
c0016cdc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016ce0:	7d 1a                	jge    c0016cfc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016ce2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ce5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016ce8:	46                   	inc    esi
c0016ce9:	51                   	push   ecx
c0016cea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016cee:	52                   	push   edx
c0016cef:	55                   	push   ebp
c0016cf0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016cf3:	83 c4 10             	add    esp,0x10
c0016cf6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cfa:	eb da                	jmp    c0016cd6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016cfc:	47                   	inc    edi
c0016cfd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016d01:	eb c5                	jmp    c0016cc8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016d03:	83 c4 1c             	add    esp,0x1c
c0016d06:	5b                   	pop    ebx
c0016d07:	5e                   	pop    esi
c0016d08:	5f                   	pop    edi
c0016d09:	5d                   	pop    ebp
c0016d0a:	c3                   	ret    
c0016d0b:	90                   	nop

c0016d0c <Video::blit(unsigned int*, int, int, int, int)>:
c0016d0c:	55                   	push   ebp
c0016d0d:	57                   	push   edi
c0016d0e:	56                   	push   esi
c0016d0f:	53                   	push   ebx
c0016d10:	83 ec 1c             	sub    esp,0x1c
c0016d13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d1b:	85 c0                	test   eax,eax
c0016d1d:	79 02                	jns    c0016d21 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016d1f:	31 c0                	xor    eax,eax
c0016d21:	c1 e0 02             	shl    eax,0x2
c0016d24:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d2c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d30:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016d34:	39 d8                	cmp    eax,ebx
c0016d36:	7e 49                	jle    c0016d81 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d38:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d3e:	7c 41                	jl     c0016d81 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d40:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016d44:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d48:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d4c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016d50:	39 f9                	cmp    ecx,edi
c0016d52:	7e 22                	jle    c0016d76 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016d54:	83 c5 04             	add    ebp,0x4
c0016d57:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d5d:	7c 14                	jl     c0016d73 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016d5f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d61:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016d64:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d68:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d6c:	56                   	push   esi
c0016d6d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016d70:	83 c4 10             	add    esp,0x10
c0016d73:	47                   	inc    edi
c0016d74:	eb d2                	jmp    c0016d48 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016d76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d7a:	43                   	inc    ebx
c0016d7b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016d7f:	eb ab                	jmp    c0016d2c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016d81:	83 c4 1c             	add    esp,0x1c
c0016d84:	5b                   	pop    ebx
c0016d85:	5e                   	pop    esi
c0016d86:	5f                   	pop    edi
c0016d87:	5d                   	pop    ebp
c0016d88:	c3                   	ret    
c0016d89:	90                   	nop

c0016d8a <Video::clearScreen(unsigned int)>:
c0016d8a:	57                   	push   edi
c0016d8b:	56                   	push   esi
c0016d8c:	53                   	push   ebx
c0016d8d:	31 db                	xor    ebx,ebx
c0016d8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d93:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d99:	7e 1f                	jle    c0016dba <Video::clearScreen(unsigned int)+0x30>
c0016d9b:	31 ff                	xor    edi,edi
c0016d9d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016da3:	7e 12                	jle    c0016db7 <Video::clearScreen(unsigned int)+0x2d>
c0016da5:	8b 06                	mov    eax,DWORD PTR [esi]
c0016da7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016dab:	53                   	push   ebx
c0016dac:	57                   	push   edi
c0016dad:	47                   	inc    edi
c0016dae:	56                   	push   esi
c0016daf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016db2:	83 c4 10             	add    esp,0x10
c0016db5:	eb e6                	jmp    c0016d9d <Video::clearScreen(unsigned int)+0x13>
c0016db7:	43                   	inc    ebx
c0016db8:	eb d9                	jmp    c0016d93 <Video::clearScreen(unsigned int)+0x9>
c0016dba:	5b                   	pop    ebx
c0016dbb:	5e                   	pop    esi
c0016dbc:	5f                   	pop    edi
c0016dbd:	c3                   	ret    

c0016dbe <Video::putpixel(int, int, unsigned int)>:
c0016dbe:	c7 44 24 04 b4 b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b0b4
c0016dc6:	e9 84 30 00 00       	jmp    c0019e4f <Krnl::panic(char const*)>
c0016dcb:	90                   	nop

c0016dcc <Video::Video(char const*)>:
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd3:	83 ec 08             	sub    esp,0x8
c0016dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dda:	50                   	push   eax
c0016ddb:	e8 40 cf ff ff       	call   c0013d20 <Device::Device(char const*)>
c0016de0:	83 c4 10             	add    esp,0x10
c0016de3:	ba 24 b1 02 c0       	mov    edx,0xc002b124
c0016de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dec:	89 10                	mov    DWORD PTR [eax],edx
c0016dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016df2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016dfc:	90                   	nop
c0016dfd:	83 c4 0c             	add    esp,0xc
c0016e00:	c3                   	ret    
c0016e01:	90                   	nop

c0016e02 <Video::~Video()>:
c0016e02:	83 ec 0c             	sub    esp,0xc
c0016e05:	ba 24 b1 02 c0       	mov    edx,0xc002b124
c0016e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e0e:	89 10                	mov    DWORD PTR [eax],edx
c0016e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e14:	83 ec 0c             	sub    esp,0xc
c0016e17:	50                   	push   eax
c0016e18:	e8 cd cb ff ff       	call   c00139ea <Device::~Device()>
c0016e1d:	83 c4 10             	add    esp,0x10
c0016e20:	90                   	nop
c0016e21:	83 c4 0c             	add    esp,0xc
c0016e24:	c3                   	ret    
c0016e25:	90                   	nop

c0016e26 <Video::~Video()>:
c0016e26:	83 ec 0c             	sub    esp,0xc
c0016e29:	83 ec 0c             	sub    esp,0xc
c0016e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e30:	e8 cd ff ff ff       	call   c0016e02 <Video::~Video()>
c0016e35:	83 c4 10             	add    esp,0x10
c0016e38:	83 ec 08             	sub    esp,0x8
c0016e3b:	68 64 01 00 00       	push   0x164
c0016e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e44:	e8 c2 b7 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0016e49:	83 c4 10             	add    esp,0x10
c0016e4c:	83 c4 0c             	add    esp,0xc
c0016e4f:	c3                   	ret    

c0016e50 <Video::isMonochrome()>:
c0016e50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e54:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016e5a:	c3                   	ret    
c0016e5b:	90                   	nop

c0016e5c <Video::getWidth()>:
c0016e5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e60:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e66:	c3                   	ret    
c0016e67:	90                   	nop

c0016e68 <Video::getHeight()>:
c0016e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e6c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e72:	c3                   	ret    
c0016e73:	90                   	nop

c0016e74 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016e74:	55                   	push   ebp
c0016e75:	57                   	push   edi
c0016e76:	56                   	push   esi
c0016e77:	53                   	push   ebx
c0016e78:	83 ec 2c             	sub    esp,0x2c
c0016e7b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e7f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e83:	83 f8 01             	cmp    eax,0x1
c0016e86:	19 c9                	sbb    ecx,ecx
c0016e88:	31 db                	xor    ebx,ebx
c0016e8a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016e8e:	89 cd                	mov    ebp,ecx
c0016e90:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016e98:	f7 d5                	not    ebp
c0016e9a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016ea0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016ea4:	01 d8                	add    eax,ebx
c0016ea6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eaa:	56                   	push   esi
c0016eab:	e8 b8 ff ff ff       	call   c0016e68 <Video::getHeight()>
c0016eb0:	59                   	pop    ecx
c0016eb1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016eb5:	7e 70                	jle    c0016f27 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016eb7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016ebb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ebf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016ec2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ec6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016eca:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016ed1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ed5:	89 f8                	mov    eax,edi
c0016ed7:	83 c0 20             	add    eax,0x20
c0016eda:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ede:	56                   	push   esi
c0016edf:	e8 78 ff ff ff       	call   c0016e5c <Video::getWidth()>
c0016ee4:	5a                   	pop    edx
c0016ee5:	39 c7                	cmp    edi,eax
c0016ee7:	7d 34                	jge    c0016f1d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016ee9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016eee:	74 05                	je     c0016ef5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016ef0:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ef2:	55                   	push   ebp
c0016ef3:	eb 0d                	jmp    c0016f02 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016ef5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016efa:	74 12                	je     c0016f0e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016efc:	8b 06                	mov    eax,DWORD PTR [esi]
c0016efe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f02:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f06:	57                   	push   edi
c0016f07:	56                   	push   esi
c0016f08:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f0b:	83 c4 10             	add    esp,0x10
c0016f0e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016f12:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016f16:	47                   	inc    edi
c0016f17:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016f1b:	75 c1                	jne    c0016ede <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016f1d:	43                   	inc    ebx
c0016f1e:	83 fb 20             	cmp    ebx,0x20
c0016f21:	0f 85 79 ff ff ff    	jne    c0016ea0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016f27:	83 c4 2c             	add    esp,0x2c
c0016f2a:	5b                   	pop    ebx
c0016f2b:	5e                   	pop    esi
c0016f2c:	5f                   	pop    edi
c0016f2d:	5d                   	pop    ebp
c0016f2e:	c3                   	ret    
c0016f2f:	90                   	nop

c0016f30 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016f30:	55                   	push   ebp
c0016f31:	57                   	push   edi
c0016f32:	56                   	push   esi
c0016f33:	53                   	push   ebx
c0016f34:	83 ec 28             	sub    esp,0x28
c0016f37:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016f3b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016f3f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016f43:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016f47:	c1 e6 08             	shl    esi,0x8
c0016f4a:	01 c6                	add    esi,eax
c0016f4c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016f50:	c1 e0 08             	shl    eax,0x8
c0016f53:	01 d0                	add    eax,edx
c0016f55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f5d:	0f af c6             	imul   eax,esi
c0016f60:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016f67:	50                   	push   eax
c0016f68:	e8 2c 86 ff ff       	call   c000f599 <malloc>
c0016f6d:	83 c4 10             	add    esp,0x10
c0016f70:	89 c7                	mov    edi,eax
c0016f72:	85 c0                	test   eax,eax
c0016f74:	75 10                	jne    c0016f86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016f76:	83 ec 0c             	sub    esp,0xc
c0016f79:	68 d5 b0 02 c0       	push   0xc002b0d5
c0016f7e:	e8 cc 2e 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0016f83:	83 c4 10             	add    esp,0x10
c0016f86:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016f89:	ba 12 00 00 00       	mov    edx,0x12
c0016f8e:	84 c0                	test   al,al
c0016f90:	74 11                	je     c0016fa3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016f92:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016f96:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016f9a:	c1 fa 03             	sar    edx,0x3
c0016f9d:	0f af d1             	imul   edx,ecx
c0016fa0:	83 c2 12             	add    edx,0x12
c0016fa3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016fa7:	74 04                	je     c0016fad <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016fa9:	85 f6                	test   esi,esi
c0016fab:	75 12                	jne    c0016fbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016fad:	83 ec 0c             	sub    esp,0xc
c0016fb0:	68 e5 b0 02 c0       	push   0xc002b0e5
c0016fb5:	e8 29 b7 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0016fba:	e9 b8 00 00 00       	jmp    c0017077 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016fbf:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016fc3:	80 f9 02             	cmp    cl,0x2
c0016fc6:	0f 85 96 00 00 00    	jne    c0017062 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016fcc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016fd1:	75 0e                	jne    c0016fe1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fd3:	84 c0                	test   al,al
c0016fd5:	75 0a                	jne    c0016fe1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fd7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016fda:	83 e8 18             	sub    eax,0x18
c0016fdd:	a8 f7                	test   al,0xf7
c0016fdf:	74 0a                	je     c0016feb <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016fe1:	83 ec 0c             	sub    esp,0xc
c0016fe4:	68 fa b0 02 c0       	push   0xc002b0fa
c0016fe9:	eb 7f                	jmp    c001706a <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016feb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016ff3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016ffb:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016fff:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017007:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001700b:	75 0c                	jne    c0017019 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001700d:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0017012:	c1 e0 18             	shl    eax,0x18
c0017015:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017019:	45                   	inc    ebp
c001701a:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001701f:	c1 e1 10             	shl    ecx,0x10
c0017022:	89 c8                	mov    eax,ecx
c0017024:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0017029:	c1 e1 08             	shl    ecx,0x8
c001702c:	09 c1                	or     ecx,eax
c001702e:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017032:	09 c1                	or     ecx,eax
c0017034:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017038:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001703c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017040:	c1 f8 03             	sar    eax,0x3
c0017043:	01 c2                	add    edx,eax
c0017045:	89 e8                	mov    eax,ebp
c0017047:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001704b:	39 c6                	cmp    esi,eax
c001704d:	7f b0                	jg     c0016fff <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001704f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017057:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001705a:	7e 22                	jle    c001707e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001705c:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0017060:	eb 99                	jmp    c0016ffb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017062:	50                   	push   eax
c0017063:	50                   	push   eax
c0017064:	51                   	push   ecx
c0017065:	68 08 b1 02 c0       	push   0xc002b108
c001706a:	e8 74 b6 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001706f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017072:	e8 32 85 ff ff       	call   c000f5a9 <free>
c0017077:	83 c4 10             	add    esp,0x10
c001707a:	31 ff                	xor    edi,edi
c001707c:	eb 0f                	jmp    c001708d <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001707e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017082:	89 30                	mov    DWORD PTR [eax],esi
c0017084:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017088:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001708b:	89 30                	mov    DWORD PTR [eax],esi
c001708d:	83 c4 1c             	add    esp,0x1c
c0017090:	89 f8                	mov    eax,edi
c0017092:	5b                   	pop    ebx
c0017093:	5e                   	pop    esi
c0017094:	5f                   	pop    edi
c0017095:	5d                   	pop    ebp
c0017096:	c3                   	ret    
c0017097:	90                   	nop

c0017098 <Video::putTGA(int, int, unsigned char*, int)>:
c0017098:	55                   	push   ebp
c0017099:	57                   	push   edi
c001709a:	56                   	push   esi
c001709b:	53                   	push   ebx
c001709c:	83 ec 28             	sub    esp,0x28
c001709f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00170a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170a7:	50                   	push   eax
c00170a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170ac:	50                   	push   eax
c00170ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00170b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00170b5:	56                   	push   esi
c00170b6:	e8 75 fe ff ff       	call   c0016f30 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00170bb:	83 c4 20             	add    esp,0x20
c00170be:	85 c0                	test   eax,eax
c00170c0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00170c4:	74 35                	je     c00170fb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170c6:	89 c7                	mov    edi,eax
c00170c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170cc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00170d0:	39 d8                	cmp    eax,ebx
c00170d2:	7e 27                	jle    c00170fb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170d4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170dc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00170e0:	39 e8                	cmp    eax,ebp
c00170e2:	7e 14                	jle    c00170f8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00170e4:	8b 06                	mov    eax,DWORD PTR [esi]
c00170e6:	83 c7 04             	add    edi,0x4
c00170e9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00170ec:	53                   	push   ebx
c00170ed:	55                   	push   ebp
c00170ee:	45                   	inc    ebp
c00170ef:	56                   	push   esi
c00170f0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170f3:	83 c4 10             	add    esp,0x10
c00170f6:	eb e0                	jmp    c00170d8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00170f8:	43                   	inc    ebx
c00170f9:	eb cd                	jmp    c00170c8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00170fb:	83 c4 1c             	add    esp,0x1c
c00170fe:	5b                   	pop    ebx
c00170ff:	5e                   	pop    esi
c0017100:	5f                   	pop    edi
c0017101:	5d                   	pop    ebp
c0017102:	c3                   	ret    
c0017103:	90                   	nop

c0017104 <ACPI::close(int, int, void*)>:
c0017104:	83 ec 1c             	sub    esp,0x1c
c0017107:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001710f:	74 0a                	je     c001711b <ACPI::close(int, int, void*)+0x17>
c0017111:	b8 00 00 00 00       	mov    eax,0x0
c0017116:	e9 8a 00 00 00       	jmp    c00171a5 <ACPI::close(int, int, void*)+0xa1>
c001711b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017120:	75 27                	jne    c0017149 <ACPI::close(int, int, void*)+0x45>
c0017122:	a1 68 00 03 c0       	mov    eax,ds:0xc0030068
c0017127:	85 c0                	test   eax,eax
c0017129:	74 07                	je     c0017132 <ACPI::close(int, int, void*)+0x2e>
c001712b:	a1 68 00 03 c0       	mov    eax,ds:0xc0030068
c0017130:	ff d0                	call   eax
c0017132:	83 ec 0c             	sub    esp,0xc
c0017135:	68 64 b1 02 c0       	push   0xc002b164
c001713a:	e8 10 2d 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c001713f:	83 c4 10             	add    esp,0x10
c0017142:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017147:	eb 5c                	jmp    c00171a5 <ACPI::close(int, int, void*)+0xa1>
c0017149:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001714e:	75 50                	jne    c00171a0 <ACPI::close(int, int, void*)+0x9c>
c0017150:	a1 64 00 03 c0       	mov    eax,ds:0xc0030064
c0017155:	85 c0                	test   eax,eax
c0017157:	74 07                	je     c0017160 <ACPI::close(int, int, void*)+0x5c>
c0017159:	a1 64 00 03 c0       	mov    eax,ds:0xc0030064
c001715e:	ff d0                	call   eax
c0017160:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017165:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001716a:	83 e0 02             	and    eax,0x2
c001716d:	74 1c                	je     c001718b <ACPI::close(int, int, void*)+0x87>
c001716f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017176:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001717a:	89 c2                	mov    edx,eax
c001717c:	ec                   	in     al,dx
c001717d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017181:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017185:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017189:	eb da                	jmp    c0017165 <ACPI::close(int, int, void*)+0x61>
c001718b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017192:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017197:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001719b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001719f:	ee                   	out    dx,al
c00171a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00171a5:	83 c4 1c             	add    esp,0x1c
c00171a8:	c3                   	ret    

c00171a9 <findRSDP()>:
c00171a9:	83 ec 1c             	sub    esp,0x1c
c00171ac:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00171b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171b7:	83 e0 04             	and    eax,0x4
c00171ba:	84 c0                	test   al,al
c00171bc:	75 07                	jne    c00171c5 <findRSDP()+0x1c>
c00171be:	b8 00 00 00 00       	mov    eax,0x0
c00171c3:	eb 6a                	jmp    c001722f <findRSDP()+0x86>
c00171c5:	a1 14 da 02 c0       	mov    eax,ds:0xc002da14
c00171ca:	3d ff 07 00 00       	cmp    eax,0x7ff
c00171cf:	7f 1b                	jg     c00171ec <findRSDP()+0x43>
c00171d1:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00171d6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171dc:	83 e2 fb             	and    edx,0xfffffffb
c00171df:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171e5:	b8 00 00 00 00       	mov    eax,0x0
c00171ea:	eb 43                	jmp    c001722f <findRSDP()+0x86>
c00171ec:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00171f4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00171fc:	77 2c                	ja     c001722a <findRSDP()+0x81>
c00171fe:	83 ec 04             	sub    esp,0x4
c0017201:	6a 08                	push   0x8
c0017203:	68 ff b1 02 c0       	push   0xc002b1ff
c0017208:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001720c:	e8 3b 94 fe ff       	call   c000064c <memcmp>
c0017211:	83 c4 10             	add    esp,0x10
c0017214:	85 c0                	test   eax,eax
c0017216:	0f 94 c0             	sete   al
c0017219:	84 c0                	test   al,al
c001721b:	74 06                	je     c0017223 <findRSDP()+0x7a>
c001721d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017221:	eb 0c                	jmp    c001722f <findRSDP()+0x86>
c0017223:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017228:	eb ca                	jmp    c00171f4 <findRSDP()+0x4b>
c001722a:	b8 00 00 00 00       	mov    eax,0x0
c001722f:	83 c4 1c             	add    esp,0x1c
c0017232:	c3                   	ret    

c0017233 <loadACPITables(unsigned char*)>:
c0017233:	57                   	push   edi
c0017234:	56                   	push   esi
c0017235:	53                   	push   ebx
c0017236:	83 ec 60             	sub    esp,0x60
c0017239:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001723e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017244:	83 e0 04             	and    eax,0x4
c0017247:	84 c0                	test   al,al
c0017249:	0f 84 33 02 00 00    	je     c0017482 <loadACPITables(unsigned char*)+0x24f>
c001724f:	a0 80 02 03 c0       	mov    al,ds:0xc0030280
c0017254:	84 c0                	test   al,al
c0017256:	74 75                	je     c00172cd <loadACPITables(unsigned char*)+0x9a>
c0017258:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001725c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017260:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017264:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017267:	83 e8 24             	sub    eax,0x24
c001726a:	c1 e8 03             	shr    eax,0x3
c001726d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017271:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017279:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001727d:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017281:	0f 8d b2 00 00 00    	jge    c0017339 <loadACPITables(unsigned char*)+0x106>
c0017287:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001728b:	83 c0 24             	add    eax,0x24
c001728e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017292:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017296:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001729a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001729e:	c1 e0 03             	shl    eax,0x3
c00172a1:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00172a5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00172a9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00172ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00172ae:	89 c1                	mov    ecx,eax
c00172b0:	a1 6c 00 03 c0       	mov    eax,ds:0xc003006c
c00172b5:	8d 50 01             	lea    edx,[eax+0x1]
c00172b8:	89 15 6c 00 03 c0    	mov    DWORD PTR ds:0xc003006c,edx
c00172be:	89 ca                	mov    edx,ecx
c00172c0:	89 14 c5 84 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff7c],edx
c00172c7:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00172cb:	eb ac                	jmp    c0017279 <loadACPITables(unsigned char*)+0x46>
c00172cd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172d1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00172d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172dc:	83 e8 24             	sub    eax,0x24
c00172df:	c1 e8 02             	shr    eax,0x2
c00172e2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172e6:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00172ee:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172f2:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00172f6:	7d 41                	jge    c0017339 <loadACPITables(unsigned char*)+0x106>
c00172f8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172fc:	83 c0 24             	add    eax,0x24
c00172ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017303:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017307:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001730b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001730f:	c1 e0 02             	shl    eax,0x2
c0017312:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017316:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001731a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001731c:	a1 6c 00 03 c0       	mov    eax,ds:0xc003006c
c0017321:	8d 50 01             	lea    edx,[eax+0x1]
c0017324:	89 15 6c 00 03 c0    	mov    DWORD PTR ds:0xc003006c,edx
c001732a:	89 ca                	mov    edx,ecx
c001732c:	89 14 c5 84 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff7c],edx
c0017333:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017337:	eb b5                	jmp    c00172ee <loadACPITables(unsigned char*)+0xbb>
c0017339:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017341:	a1 6c 00 03 c0       	mov    eax,ds:0xc003006c
c0017346:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001734a:	0f 8d 33 01 00 00    	jge    c0017483 <loadACPITables(unsigned char*)+0x250>
c0017350:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017354:	8b 04 c5 84 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcff7c]
c001735b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001735f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017363:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017367:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001736b:	25 ff 0f 00 00       	and    eax,0xfff
c0017370:	89 c6                	mov    esi,eax
c0017372:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c0017378:	83 ec 0c             	sub    esp,0xc
c001737b:	6a 01                	push   0x1
c001737d:	e8 9d 9e ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0017382:	83 c4 10             	add    esp,0x10
c0017385:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017389:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001738f:	83 ec 0c             	sub    esp,0xc
c0017392:	6a 01                	push   0x1
c0017394:	6a 01                	push   0x1
c0017396:	50                   	push   eax
c0017397:	52                   	push   edx
c0017398:	53                   	push   ebx
c0017399:	e8 34 a9 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001739e:	83 c4 20             	add    esp,0x20
c00173a1:	09 f0                	or     eax,esi
c00173a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00173ab:	c1 e0 03             	shl    eax,0x3
c00173ae:	05 80 00 03 c0       	add    eax,0xc0030080
c00173b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173bf:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00173c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00173cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00173db:	89 c6                	mov    esi,eax
c00173dd:	89 d7                	mov    edi,edx
c00173df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173e1:	89 c8                	mov    eax,ecx
c00173e3:	89 fa                	mov    edx,edi
c00173e5:	89 f3                	mov    ebx,esi
c00173e7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00173eb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00173ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017402:	05 00 10 00 00       	add    eax,0x1000
c0017407:	c1 e8 0c             	shr    eax,0xc
c001740a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001740e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017412:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017416:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001741a:	25 ff 0f 00 00       	and    eax,0xfff
c001741f:	89 c6                	mov    esi,eax
c0017421:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c0017427:	83 ec 0c             	sub    esp,0xc
c001742a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001742e:	e8 ec 9d ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0017433:	83 c4 10             	add    esp,0x10
c0017436:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001743a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017440:	83 ec 0c             	sub    esp,0xc
c0017443:	6a 01                	push   0x1
c0017445:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017449:	50                   	push   eax
c001744a:	52                   	push   edx
c001744b:	53                   	push   ebx
c001744c:	e8 81 a8 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017451:	83 c4 20             	add    esp,0x20
c0017454:	09 f0                	or     eax,esi
c0017456:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001745a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001745e:	83 ec 0c             	sub    esp,0xc
c0017461:	50                   	push   eax
c0017462:	e8 fe a1 ff ff       	call   c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c0017467:	83 c4 10             	add    esp,0x10
c001746a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001746e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017472:	89 14 c5 84 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff7c],edx
c0017479:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001747d:	e9 bf fe ff ff       	jmp    c0017341 <loadACPITables(unsigned char*)+0x10e>
c0017482:	90                   	nop
c0017483:	83 c4 60             	add    esp,0x60
c0017486:	5b                   	pop    ebx
c0017487:	5e                   	pop    esi
c0017488:	5f                   	pop    edi
c0017489:	c3                   	ret    

c001748a <findRSDT(unsigned char*)>:
c001748a:	57                   	push   edi
c001748b:	56                   	push   esi
c001748c:	53                   	push   ebx
c001748d:	83 ec 50             	sub    esp,0x50
c0017490:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0017495:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001749b:	83 e0 04             	and    eax,0x4
c001749e:	84 c0                	test   al,al
c00174a0:	75 0a                	jne    c00174ac <findRSDT(unsigned char*)+0x22>
c00174a2:	b8 00 00 00 00       	mov    eax,0x0
c00174a7:	e9 21 01 00 00       	jmp    c00175cd <findRSDT(unsigned char*)+0x143>
c00174ac:	89 e0                	mov    eax,esp
c00174ae:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00174b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00174b6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00174ba:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00174c2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00174ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174d2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00174d6:	89 c6                	mov    esi,eax
c00174d8:	89 d7                	mov    edi,edx
c00174da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00174dc:	89 c8                	mov    eax,ecx
c00174de:	89 fa                	mov    edx,edi
c00174e0:	89 f3                	mov    ebx,esi
c00174e2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00174e6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00174ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00174ee:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00174f2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00174f6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00174fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017502:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017506:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001750a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001750e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017512:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017516:	25 ff 0f 00 00       	and    eax,0xfff
c001751b:	89 c6                	mov    esi,eax
c001751d:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c0017523:	83 ec 0c             	sub    esp,0xc
c0017526:	6a 02                	push   0x2
c0017528:	e8 f2 9c ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001752d:	83 c4 10             	add    esp,0x10
c0017530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017534:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001753a:	83 ec 0c             	sub    esp,0xc
c001753d:	6a 01                	push   0x1
c001753f:	6a 02                	push   0x2
c0017541:	50                   	push   eax
c0017542:	52                   	push   edx
c0017543:	53                   	push   ebx
c0017544:	e8 89 a7 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017549:	83 c4 20             	add    esp,0x20
c001754c:	09 f0                	or     eax,esi
c001754e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017552:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017556:	25 ff 0f 00 00       	and    eax,0xfff
c001755b:	89 c6                	mov    esi,eax
c001755d:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c0017563:	83 ec 0c             	sub    esp,0xc
c0017566:	6a 02                	push   0x2
c0017568:	e8 b2 9c ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001756d:	83 c4 10             	add    esp,0x10
c0017570:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017574:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001757a:	83 ec 0c             	sub    esp,0xc
c001757d:	6a 01                	push   0x1
c001757f:	6a 02                	push   0x2
c0017581:	50                   	push   eax
c0017582:	52                   	push   edx
c0017583:	53                   	push   ebx
c0017584:	e8 49 a7 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017589:	83 c4 20             	add    esp,0x20
c001758c:	09 f0                	or     eax,esi
c001758e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017592:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017597:	75 11                	jne    c00175aa <findRSDT(unsigned char*)+0x120>
c0017599:	c6 05 80 02 03 c0 00 	mov    BYTE PTR ds:0xc0030280,0x0
c00175a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00175a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175a8:	eb 1f                	jmp    c00175c9 <findRSDT(unsigned char*)+0x13f>
c00175aa:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00175af:	75 11                	jne    c00175c2 <findRSDT(unsigned char*)+0x138>
c00175b1:	c6 05 80 02 03 c0 01 	mov    BYTE PTR ds:0xc0030280,0x1
c00175b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00175bc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175c0:	eb 07                	jmp    c00175c9 <findRSDT(unsigned char*)+0x13f>
c00175c2:	b8 00 00 00 00       	mov    eax,0x0
c00175c7:	eb 04                	jmp    c00175cd <findRSDT(unsigned char*)+0x143>
c00175c9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175cd:	83 c4 50             	add    esp,0x50
c00175d0:	5b                   	pop    ebx
c00175d1:	5e                   	pop    esi
c00175d2:	5f                   	pop    edi
c00175d3:	c3                   	ret    

c00175d4 <findDataTable(unsigned char*, char*)>:
c00175d4:	83 ec 1c             	sub    esp,0x1c
c00175d7:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00175dc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175e2:	83 e0 04             	and    eax,0x4
c00175e5:	84 c0                	test   al,al
c00175e7:	75 07                	jne    c00175f0 <findDataTable(unsigned char*, char*)+0x1c>
c00175e9:	b8 00 00 00 00       	mov    eax,0x0
c00175ee:	eb 52                	jmp    c0017642 <findDataTable(unsigned char*, char*)+0x6e>
c00175f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175f8:	a1 6c 00 03 c0       	mov    eax,ds:0xc003006c
c00175fd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017601:	7d 3a                	jge    c001763d <findDataTable(unsigned char*, char*)+0x69>
c0017603:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017607:	c1 e0 03             	shl    eax,0x3
c001760a:	05 80 00 03 c0       	add    eax,0xc0030080
c001760f:	83 ec 04             	sub    esp,0x4
c0017612:	6a 04                	push   0x4
c0017614:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017618:	50                   	push   eax
c0017619:	e8 2e 90 fe ff       	call   c000064c <memcmp>
c001761e:	83 c4 10             	add    esp,0x10
c0017621:	85 c0                	test   eax,eax
c0017623:	0f 94 c0             	sete   al
c0017626:	84 c0                	test   al,al
c0017628:	74 0d                	je     c0017637 <findDataTable(unsigned char*, char*)+0x63>
c001762a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001762e:	8b 04 c5 84 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcff7c]
c0017635:	eb 0b                	jmp    c0017642 <findDataTable(unsigned char*, char*)+0x6e>
c0017637:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001763b:	eb bb                	jmp    c00175f8 <findDataTable(unsigned char*, char*)+0x24>
c001763d:	b8 00 00 00 00       	mov    eax,0x0
c0017642:	83 c4 1c             	add    esp,0x1c
c0017645:	c3                   	ret    

c0017646 <scanMADT()>:
c0017646:	53                   	push   ebx
c0017647:	83 ec 38             	sub    esp,0x38
c001764a:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001764f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017655:	83 e0 04             	and    eax,0x4
c0017658:	84 c0                	test   al,al
c001765a:	0f 84 4a 04 00 00    	je     c0017aaa <scanMADT()+0x464>
c0017660:	e8 44 fb ff ff       	call   c00171a9 <findRSDP()>
c0017665:	a3 8c 02 03 c0       	mov    ds:0xc003028c,eax
c001766a:	a1 8c 02 03 c0       	mov    eax,ds:0xc003028c
c001766f:	85 c0                	test   eax,eax
c0017671:	75 19                	jne    c001768c <scanMADT()+0x46>
c0017673:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0017678:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001767e:	83 e2 fb             	and    edx,0xfffffffb
c0017681:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017687:	e9 22 04 00 00       	jmp    c0017aae <scanMADT()+0x468>
c001768c:	a1 8c 02 03 c0       	mov    eax,ds:0xc003028c
c0017691:	83 ec 0c             	sub    esp,0xc
c0017694:	50                   	push   eax
c0017695:	e8 f0 fd ff ff       	call   c001748a <findRSDT(unsigned char*)>
c001769a:	83 c4 10             	add    esp,0x10
c001769d:	a3 88 02 03 c0       	mov    ds:0xc0030288,eax
c00176a2:	a1 88 02 03 c0       	mov    eax,ds:0xc0030288
c00176a7:	85 c0                	test   eax,eax
c00176a9:	75 19                	jne    c00176c4 <scanMADT()+0x7e>
c00176ab:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00176b0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176b6:	83 e2 fb             	and    edx,0xfffffffb
c00176b9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176bf:	e9 ea 03 00 00       	jmp    c0017aae <scanMADT()+0x468>
c00176c4:	a1 88 02 03 c0       	mov    eax,ds:0xc0030288
c00176c9:	83 ec 0c             	sub    esp,0xc
c00176cc:	50                   	push   eax
c00176cd:	e8 61 fb ff ff       	call   c0017233 <loadACPITables(unsigned char*)>
c00176d2:	83 c4 10             	add    esp,0x10
c00176d5:	a1 88 02 03 c0       	mov    eax,ds:0xc0030288
c00176da:	83 ec 08             	sub    esp,0x8
c00176dd:	68 08 b2 02 c0       	push   0xc002b208
c00176e2:	50                   	push   eax
c00176e3:	e8 ec fe ff ff       	call   c00175d4 <findDataTable(unsigned char*, char*)>
c00176e8:	83 c4 10             	add    esp,0x10
c00176eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00176ef:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00176f4:	75 19                	jne    c001770f <scanMADT()+0xc9>
c00176f6:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00176fb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017701:	83 e2 fe             	and    edx,0xfffffffe
c0017704:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001770a:	e9 9f 03 00 00       	jmp    c0017aae <scanMADT()+0x468>
c001770f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017717:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001771b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001771e:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017722:	0f 87 86 03 00 00    	ja     c0017aae <scanMADT()+0x468>
c0017728:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017730:	0f 87 78 03 00 00    	ja     c0017aae <scanMADT()+0x468>
c0017736:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001773a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001773e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017742:	8d 50 01             	lea    edx,[eax+0x1]
c0017745:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017749:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001774d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017751:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017755:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017759:	8d 50 01             	lea    edx,[eax+0x1]
c001775c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017760:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017764:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017768:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001776c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017771:	0f 86 36 03 00 00    	jbe    c0017aad <scanMADT()+0x467>
c0017777:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001777c:	75 57                	jne    c00177d5 <scanMADT()+0x18f>
c001777e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017782:	8d 50 01             	lea    edx,[eax+0x1]
c0017785:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017789:	8a 15 80 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030480
c001778f:	0f b6 d2             	movzx  edx,dl
c0017792:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017796:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001779a:	88 82 c0 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb40],al
c00177a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177a4:	8d 50 01             	lea    edx,[eax+0x1]
c00177a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177ab:	8a 15 80 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030480
c00177b1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00177b4:	88 0d 80 04 03 c0    	mov    BYTE PTR ds:0xc0030480,cl
c00177ba:	0f b6 d2             	movzx  edx,dl
c00177bd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177c1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177c5:	88 82 a0 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb60],al
c00177cb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177d0:	e9 c1 02 00 00       	jmp    c0017a96 <scanMADT()+0x450>
c00177d5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00177da:	0f 85 14 01 00 00    	jne    c00178f4 <scanMADT()+0x2ae>
c00177e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177e4:	8d 50 01             	lea    edx,[eax+0x1]
c00177e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177eb:	8a 15 40 03 03 c0    	mov    dl,BYTE PTR ds:0xc0030340
c00177f1:	0f b6 d2             	movzx  edx,dl
c00177f4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177f8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177fc:	88 82 60 03 03 c0    	mov    BYTE PTR [edx-0x3ffcfca0],al
c0017802:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017806:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001780a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001780e:	01 d0                	add    eax,edx
c0017810:	83 c0 2c             	add    eax,0x2c
c0017813:	8a 00                	mov    al,BYTE PTR [eax]
c0017815:	0f b6 d0             	movzx  edx,al
c0017818:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001781c:	8d 48 01             	lea    ecx,[eax+0x1]
c001781f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017823:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017827:	0f b6 c0             	movzx  eax,al
c001782a:	c1 e0 08             	shl    eax,0x8
c001782d:	89 d1                	mov    ecx,edx
c001782f:	09 c1                	or     ecx,eax
c0017831:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017835:	8d 50 02             	lea    edx,[eax+0x2]
c0017838:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001783c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017840:	0f b6 c0             	movzx  eax,al
c0017843:	c1 e0 10             	shl    eax,0x10
c0017846:	09 c1                	or     ecx,eax
c0017848:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001784c:	8d 50 03             	lea    edx,[eax+0x3]
c001784f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017853:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017857:	0f b6 c0             	movzx  eax,al
c001785a:	c1 e0 18             	shl    eax,0x18
c001785d:	09 c1                	or     ecx,eax
c001785f:	89 ca                	mov    edx,ecx
c0017861:	a0 40 03 03 c0       	mov    al,ds:0xc0030340
c0017866:	0f b6 c0             	movzx  eax,al
c0017869:	89 14 85 80 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc80],edx
c0017870:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017875:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017879:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001787d:	01 d0                	add    eax,edx
c001787f:	83 c0 2c             	add    eax,0x2c
c0017882:	8a 00                	mov    al,BYTE PTR [eax]
c0017884:	0f b6 d0             	movzx  edx,al
c0017887:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001788b:	8d 48 01             	lea    ecx,[eax+0x1]
c001788e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017892:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017896:	0f b6 c0             	movzx  eax,al
c0017899:	c1 e0 08             	shl    eax,0x8
c001789c:	89 d1                	mov    ecx,edx
c001789e:	09 c1                	or     ecx,eax
c00178a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178a4:	8d 50 02             	lea    edx,[eax+0x2]
c00178a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ab:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178af:	0f b6 c0             	movzx  eax,al
c00178b2:	c1 e0 10             	shl    eax,0x10
c00178b5:	09 c1                	or     ecx,eax
c00178b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178bb:	8d 50 03             	lea    edx,[eax+0x3]
c00178be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178c2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178c6:	0f b6 c0             	movzx  eax,al
c00178c9:	c1 e0 18             	shl    eax,0x18
c00178cc:	09 c1                	or     ecx,eax
c00178ce:	89 ca                	mov    edx,ecx
c00178d0:	a0 40 03 03 c0       	mov    al,ds:0xc0030340
c00178d5:	0f b6 c0             	movzx  eax,al
c00178d8:	89 14 85 00 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc00],edx
c00178df:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178e4:	a0 40 03 03 c0       	mov    al,ds:0xc0030340
c00178e9:	40                   	inc    eax
c00178ea:	a2 40 03 03 c0       	mov    ds:0xc0030340,al
c00178ef:	e9 a2 01 00 00       	jmp    c0017a96 <scanMADT()+0x450>
c00178f4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00178f9:	0f 85 e9 00 00 00    	jne    c00179e8 <scanMADT()+0x3a2>
c00178ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017903:	8d 50 01             	lea    edx,[eax+0x1]
c0017906:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001790a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001790e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017912:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017916:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001791a:	8d 50 01             	lea    edx,[eax+0x1]
c001791d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017921:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017925:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017929:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001792d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017931:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017935:	01 d0                	add    eax,edx
c0017937:	83 c0 2c             	add    eax,0x2c
c001793a:	8a 00                	mov    al,BYTE PTR [eax]
c001793c:	0f b6 d0             	movzx  edx,al
c001793f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017943:	8d 48 01             	lea    ecx,[eax+0x1]
c0017946:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001794a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001794e:	0f b6 c0             	movzx  eax,al
c0017951:	c1 e0 08             	shl    eax,0x8
c0017954:	89 d1                	mov    ecx,edx
c0017956:	09 c1                	or     ecx,eax
c0017958:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001795c:	8d 50 02             	lea    edx,[eax+0x2]
c001795f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017963:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017967:	0f b6 c0             	movzx  eax,al
c001796a:	c1 e0 10             	shl    eax,0x10
c001796d:	09 c1                	or     ecx,eax
c001796f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017973:	8d 50 03             	lea    edx,[eax+0x3]
c0017976:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001797a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001797e:	0f b6 c0             	movzx  eax,al
c0017981:	c1 e0 18             	shl    eax,0x18
c0017984:	09 c8                	or     eax,ecx
c0017986:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001798a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001798f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017993:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017997:	01 d0                	add    eax,edx
c0017999:	83 c0 2c             	add    eax,0x2c
c001799c:	8a 00                	mov    al,BYTE PTR [eax]
c001799e:	0f b6 c0             	movzx  eax,al
c00179a1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00179a5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00179a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179ac:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00179b0:	0f b6 d2             	movzx  edx,dl
c00179b3:	c1 e2 08             	shl    edx,0x8
c00179b6:	09 d0                	or     eax,edx
c00179b8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00179bd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00179c2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00179c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00179cb:	88 90 20 cc 02 c0    	mov    BYTE PTR [eax-0x3ffd33e0],dl
c00179d1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00179d6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00179db:	66 89 84 12 20 03 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfce0],ax
c00179e3:	e9 ae 00 00 00       	jmp    c0017a96 <scanMADT()+0x450>
c00179e8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00179ed:	0f 85 97 00 00 00    	jne    c0017a8a <scanMADT()+0x444>
c00179f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179f7:	8d 50 01             	lea    edx,[eax+0x1]
c00179fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a02:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a06:	0f b6 c0             	movzx  eax,al
c0017a09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a15:	01 d0                	add    eax,edx
c0017a17:	83 c0 2c             	add    eax,0x2c
c0017a1a:	8a 00                	mov    al,BYTE PTR [eax]
c0017a1c:	0f b6 d0             	movzx  edx,al
c0017a1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a23:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a2a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a2e:	0f b6 c0             	movzx  eax,al
c0017a31:	c1 e0 08             	shl    eax,0x8
c0017a34:	09 d0                	or     eax,edx
c0017a36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a3a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a43:	8d 50 01             	lea    edx,[eax+0x1]
c0017a46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a4e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a52:	0f b6 c0             	movzx  eax,al
c0017a55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a5d:	c1 e0 08             	shl    eax,0x8
c0017a60:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017a64:	89 c1                	mov    ecx,eax
c0017a66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a6a:	c1 e0 18             	shl    eax,0x18
c0017a6d:	89 c3                	mov    ebx,eax
c0017a6f:	a1 90 02 03 c0       	mov    eax,ds:0xc0030290
c0017a74:	8d 50 01             	lea    edx,[eax+0x1]
c0017a77:	89 15 90 02 03 c0    	mov    DWORD PTR ds:0xc0030290,edx
c0017a7d:	09 d9                	or     ecx,ebx
c0017a7f:	89 ca                	mov    edx,ecx
c0017a81:	89 14 85 a0 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd60],edx
c0017a88:	eb 0c                	jmp    c0017a96 <scanMADT()+0x450>
c0017a8a:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017a8f:	75 05                	jne    c0017a96 <scanMADT()+0x450>
c0017a91:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017a96:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017a9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a9f:	01 d0                	add    eax,edx
c0017aa1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017aa5:	e9 6d fc ff ff       	jmp    c0017717 <scanMADT()+0xd1>
c0017aaa:	90                   	nop
c0017aab:	eb 01                	jmp    c0017aae <scanMADT()+0x468>
c0017aad:	90                   	nop
c0017aae:	83 c4 38             	add    esp,0x38
c0017ab1:	5b                   	pop    ebx
c0017ab2:	c3                   	ret    
c0017ab3:	90                   	nop

c0017ab4 <ACPI::ACPI()>:
c0017ab4:	83 ec 0c             	sub    esp,0xc
c0017ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017abb:	83 ec 08             	sub    esp,0x8
c0017abe:	68 0d b2 02 c0       	push   0xc002b20d
c0017ac3:	50                   	push   eax
c0017ac4:	e8 57 c2 ff ff       	call   c0013d20 <Device::Device(char const*)>
c0017ac9:	83 c4 10             	add    esp,0x10
c0017acc:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c0017ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ad5:	89 10                	mov    DWORD PTR [eax],edx
c0017ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017adb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ae6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017af4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017afe:	e8 43 fb ff ff       	call   c0017646 <scanMADT()>
c0017b03:	90                   	nop
c0017b04:	83 c4 0c             	add    esp,0xc
c0017b07:	c3                   	ret    

c0017b08 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017b08:	83 ec 2c             	sub    esp,0x2c
c0017b0b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017b0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b13:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017b17:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017b1b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017b20:	88 d0                	mov    al,dl
c0017b22:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b26:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017b2b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017b33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b37:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b3d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017b41:	0f 8d 97 00 00 00    	jge    c0017bde <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017b47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b4f:	83 c2 2a             	add    edx,0x2a
c0017b52:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017b56:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017b5b:	75 78                	jne    c0017bd5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b65:	83 c2 2a             	add    edx,0x2a
c0017b68:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017b6c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017b70:	75 63                	jne    c0017bd5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b72:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b77:	74 3a                	je     c0017bb3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017b79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b7d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b81:	83 c2 2a             	add    edx,0x2a
c0017b84:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017b88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b8f:	39 c2                	cmp    edx,eax
c0017b91:	74 10                	je     c0017ba3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017b93:	83 ec 0c             	sub    esp,0xc
c0017b96:	68 88 b1 02 c0       	push   0xc002b188
c0017b9b:	e8 af 22 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0017ba0:	83 c4 10             	add    esp,0x10
c0017ba3:	83 ec 0c             	sub    esp,0xc
c0017ba6:	68 12 b2 02 c0       	push   0xc002b212
c0017bab:	e8 9f 22 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0017bb0:	83 c4 10             	add    esp,0x10
c0017bb3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017bb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bbb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bbf:	83 c2 2a             	add    edx,0x2a
c0017bc2:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017bc6:	8b 02                	mov    eax,DWORD PTR [edx]
c0017bc8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017bcb:	89 01                	mov    DWORD PTR [ecx],eax
c0017bcd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017bd0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bd5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017bd9:	e9 55 ff ff ff       	jmp    c0017b33 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017bde:	90                   	nop
c0017bdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be3:	83 c4 2c             	add    esp,0x2c
c0017be6:	c2 04 00             	ret    0x4
c0017be9:	90                   	nop

c0017bea <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017bea:	83 ec 1c             	sub    esp,0x1c
c0017bed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bf1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017bf5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bf9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017bfe:	88 c8                	mov    al,cl
c0017c00:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017c04:	88 d0                	mov    al,dl
c0017c06:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017c0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c0e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c18:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c1b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017c1f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017c23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c27:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c31:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017c34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c38:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c41:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c47:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017c4b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c52:	83 c2 2a             	add    edx,0x2a
c0017c55:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017c59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c5d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c67:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c6e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017c72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c76:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c7c:	8d 50 01             	lea    edx,[eax+0x1]
c0017c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c83:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017c89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c8d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c93:	3d 00 02 00 00       	cmp    eax,0x200
c0017c98:	75 10                	jne    c0017caa <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017c9a:	83 ec 0c             	sub    esp,0xc
c0017c9d:	68 21 b2 02 c0       	push   0xc002b221
c0017ca2:	e8 a8 21 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0017ca7:	83 c4 10             	add    esp,0x10
c0017caa:	90                   	nop
c0017cab:	83 c4 1c             	add    esp,0x1c
c0017cae:	c3                   	ret    
c0017caf:	90                   	nop

c0017cb0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017cb0:	b8 00 00 00 00       	mov    eax,0x0
c0017cb5:	c3                   	ret    

c0017cb6 <ACPI::detectPCI()>:
c0017cb6:	53                   	push   ebx
c0017cb7:	83 ec 28             	sub    esp,0x28
c0017cba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017cbf:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017cc4:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0017cc9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ccf:	83 e0 04             	and    eax,0x4
c0017cd2:	84 c0                	test   al,al
c0017cd4:	74 2b                	je     c0017d01 <ACPI::detectPCI()+0x4b>
c0017cd6:	a1 88 02 03 c0       	mov    eax,ds:0xc0030288
c0017cdb:	83 ec 08             	sub    esp,0x8
c0017cde:	68 3e b2 02 c0       	push   0xc002b23e
c0017ce3:	50                   	push   eax
c0017ce4:	e8 eb f8 ff ff       	call   c00175d4 <findDataTable(unsigned char*, char*)>
c0017ce9:	83 c4 10             	add    esp,0x10
c0017cec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cf0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017cf5:	74 0a                	je     c0017d01 <ACPI::detectPCI()+0x4b>
c0017cf7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cfc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d01:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017d09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d0d:	8a 00                	mov    al,BYTE PTR [eax]
c0017d0f:	3c 01                	cmp    al,0x1
c0017d11:	75 0c                	jne    c0017d1f <ACPI::detectPCI()+0x69>
c0017d13:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d18:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d1d:	eb 26                	jmp    c0017d45 <ACPI::detectPCI()+0x8f>
c0017d1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d23:	8a 00                	mov    al,BYTE PTR [eax]
c0017d25:	3c 02                	cmp    al,0x2
c0017d27:	75 1c                	jne    c0017d45 <ACPI::detectPCI()+0x8f>
c0017d29:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d2e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d33:	74 10                	je     c0017d45 <ACPI::detectPCI()+0x8f>
c0017d35:	83 ec 0c             	sub    esp,0xc
c0017d38:	68 b8 b1 02 c0       	push   0xc002b1b8
c0017d3d:	e8 0d 21 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0017d42:	83 c4 10             	add    esp,0x10
c0017d45:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017d49:	83 f0 01             	xor    eax,0x1
c0017d4c:	84 c0                	test   al,al
c0017d4e:	74 3f                	je     c0017d8f <ACPI::detectPCI()+0xd9>
c0017d50:	e8 fb 83 fe ff       	call   c0000150 <manualPCIProbe>
c0017d55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d59:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d5e:	75 0c                	jne    c0017d6c <ACPI::detectPCI()+0xb6>
c0017d60:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d65:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d6a:	eb 23                	jmp    c0017d8f <ACPI::detectPCI()+0xd9>
c0017d6c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017d71:	75 1c                	jne    c0017d8f <ACPI::detectPCI()+0xd9>
c0017d73:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d78:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d7d:	74 10                	je     c0017d8f <ACPI::detectPCI()+0xd9>
c0017d7f:	83 ec 0c             	sub    esp,0xc
c0017d82:	68 b8 b1 02 c0       	push   0xc002b1b8
c0017d87:	e8 c3 20 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0017d8c:	83 c4 10             	add    esp,0x10
c0017d8f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017d94:	74 7e                	je     c0017e14 <ACPI::detectPCI()+0x15e>
c0017d96:	83 ec 0c             	sub    esp,0xc
c0017d99:	68 43 b2 02 c0       	push   0xc002b243
c0017d9e:	e8 50 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017da3:	83 c4 10             	add    esp,0x10
c0017da6:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017dae:	83 ec 0c             	sub    esp,0xc
c0017db1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017db5:	e8 df 77 ff ff       	call   c000f599 <malloc>
c0017dba:	83 c4 10             	add    esp,0x10
c0017dbd:	89 c3                	mov    ebx,eax
c0017dbf:	83 ec 0c             	sub    esp,0xc
c0017dc2:	53                   	push   ebx
c0017dc3:	e8 b2 a5 00 00       	call   c002237a <PCI::PCI()>
c0017dc8:	83 c4 10             	add    esp,0x10
c0017dcb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017dcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017dd3:	83 ec 08             	sub    esp,0x8
c0017dd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dda:	50                   	push   eax
c0017ddb:	e8 3c bd ff ff       	call   c0013b1c <Device::addChild(Device*)>
c0017de0:	83 c4 10             	add    esp,0x10
c0017de3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017de7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017de9:	83 c0 08             	add    eax,0x8
c0017dec:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dee:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017df3:	74 07                	je     c0017dfc <ACPI::detectPCI()+0x146>
c0017df5:	ba 01 00 00 00       	mov    edx,0x1
c0017dfa:	eb 05                	jmp    c0017e01 <ACPI::detectPCI()+0x14b>
c0017dfc:	ba 02 00 00 00       	mov    edx,0x2
c0017e01:	6a 00                	push   0x0
c0017e03:	6a 00                	push   0x0
c0017e05:	52                   	push   edx
c0017e06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e0a:	ff d0                	call   eax
c0017e0c:	83 c4 10             	add    esp,0x10
c0017e0f:	e9 9e 00 00 00       	jmp    c0017eb2 <ACPI::detectPCI()+0x1fc>
c0017e14:	83 ec 0c             	sub    esp,0xc
c0017e17:	68 5b b2 02 c0       	push   0xc002b25b
c0017e1c:	e8 c2 a8 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0017e21:	83 c4 10             	add    esp,0x10
c0017e24:	83 ec 0c             	sub    esp,0xc
c0017e27:	68 66 b2 02 c0       	push   0xc002b266
c0017e2c:	e8 c2 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e31:	83 c4 10             	add    esp,0x10
c0017e34:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017e3b:	83 ec 0c             	sub    esp,0xc
c0017e3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e42:	e8 52 77 ff ff       	call   c000f599 <malloc>
c0017e47:	83 c4 10             	add    esp,0x10
c0017e4a:	89 c3                	mov    ebx,eax
c0017e4c:	83 ec 0c             	sub    esp,0xc
c0017e4f:	53                   	push   ebx
c0017e50:	e8 8f b0 00 00       	call   c0022ee4 <IDE::IDE()>
c0017e55:	83 c4 10             	add    esp,0x10
c0017e58:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017e5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e60:	83 ec 08             	sub    esp,0x8
c0017e63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e67:	50                   	push   eax
c0017e68:	e8 af bc ff ff       	call   c0013b1c <Device::addChild(Device*)>
c0017e6d:	83 c4 10             	add    esp,0x10
c0017e70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e74:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017e7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e82:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017e8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e8f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017e98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e9e:	83 c0 08             	add    eax,0x8
c0017ea1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ea3:	6a 00                	push   0x0
c0017ea5:	6a 00                	push   0x0
c0017ea7:	6a 00                	push   0x0
c0017ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ead:	ff d0                	call   eax
c0017eaf:	83 c4 10             	add    esp,0x10
c0017eb2:	90                   	nop
c0017eb3:	83 c4 28             	add    esp,0x28
c0017eb6:	5b                   	pop    ebx
c0017eb7:	c3                   	ret    

c0017eb8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017eb8:	83 ec 1c             	sub    esp,0x1c
c0017ebb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ebf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017ec2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ec6:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0017ecb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ed0:	83 ec 08             	sub    esp,0x8
c0017ed3:	52                   	push   edx
c0017ed4:	50                   	push   eax
c0017ed5:	e8 d6 6c ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017eda:	83 c4 10             	add    esp,0x10
c0017edd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017ee1:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0017ee6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017eeb:	83 ec 04             	sub    esp,0x4
c0017eee:	6a 01                	push   0x1
c0017ef0:	52                   	push   edx
c0017ef1:	50                   	push   eax
c0017ef2:	e8 eb 6d ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ef7:	83 c4 10             	add    esp,0x10
c0017efa:	90                   	nop
c0017efb:	83 c4 1c             	add    esp,0x1c
c0017efe:	c3                   	ret    
c0017eff:	90                   	nop

c0017f00 <ACPI::sleep()>:
c0017f00:	83 ec 0c             	sub    esp,0xc
c0017f03:	a1 60 00 03 c0       	mov    eax,ds:0xc0030060
c0017f08:	85 c0                	test   eax,eax
c0017f0a:	74 07                	je     c0017f13 <ACPI::sleep()+0x13>
c0017f0c:	a1 60 00 03 c0       	mov    eax,ds:0xc0030060
c0017f11:	ff d0                	call   eax
c0017f13:	90                   	nop
c0017f14:	83 c4 0c             	add    esp,0xc
c0017f17:	c3                   	ret    

c0017f18 <ACPI::open(int, int, void*)>:
c0017f18:	57                   	push   edi
c0017f19:	56                   	push   esi
c0017f1a:	53                   	push   ebx
c0017f1b:	81 ec 60 01 00 00    	sub    esp,0x160
c0017f21:	83 ec 0c             	sub    esp,0xc
c0017f24:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017f2b:	e8 86 fd ff ff       	call   c0017cb6 <ACPI::detectPCI()>
c0017f30:	83 c4 10             	add    esp,0x10
c0017f33:	83 ec 0c             	sub    esp,0xc
c0017f36:	68 e0 b1 02 c0       	push   0xc002b1e0
c0017f3b:	e8 b3 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f40:	83 c4 10             	add    esp,0x10
c0017f43:	83 ec 0c             	sub    esp,0xc
c0017f46:	68 7b b2 02 c0       	push   0xc002b27b
c0017f4b:	e8 52 46 00 00       	call   c001c5a2 <Thr::loadKernelSymbolTable(char const*)>
c0017f50:	83 c4 10             	add    esp,0x10
c0017f53:	83 ec 0c             	sub    esp,0xc
c0017f56:	68 99 b2 02 c0       	push   0xc002b299
c0017f5b:	e8 93 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f60:	83 c4 10             	add    esp,0x10
c0017f63:	83 ec 04             	sub    esp,0x4
c0017f66:	6a 0c                	push   0xc
c0017f68:	68 b4 b2 02 c0       	push   0xc002b2b4
c0017f6d:	68 c5 b2 02 c0       	push   0xc002b2c5
c0017f72:	e8 94 2c 00 00       	call   c001ac0b <Reg::readIntWithDefault(char*, char*, int)>
c0017f77:	83 c4 10             	add    esp,0x10
c0017f7a:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017f81:	83 ec 0c             	sub    esp,0xc
c0017f84:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017f8b:	e8 99 94 ff ff       	call   c0011429 <Virt::setupPageSwapping(int)>
c0017f90:	83 c4 10             	add    esp,0x10
c0017f93:	83 ec 0c             	sub    esp,0xc
c0017f96:	68 15 9e 02 c0       	push   0xc0029e15
c0017f9b:	e8 53 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017fa0:	83 c4 10             	add    esp,0x10
c0017fa3:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c0017fa9:	83 ec 08             	sub    esp,0x8
c0017fac:	6a 01                	push   0x1
c0017fae:	68 cc b2 02 c0       	push   0xc002b2cc
c0017fb3:	e8 61 50 00 00       	call   c001d019 <Thr::loadDLL(char const*, bool)>
c0017fb8:	83 c4 10             	add    esp,0x10
c0017fbb:	83 ec 08             	sub    esp,0x8
c0017fbe:	53                   	push   ebx
c0017fbf:	50                   	push   eax
c0017fc0:	e8 88 52 00 00       	call   c001d24d <Thr::executeDLL(unsigned long, void*)>
c0017fc5:	83 c4 10             	add    esp,0x10
c0017fc8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017fcf:	83 ec 08             	sub    esp,0x8
c0017fd2:	6a 12                	push   0x12
c0017fd4:	50                   	push   eax
c0017fd5:	e8 c6 be ff ff       	call   c0013ea0 <getDevicesOfType(DeviceType)>
c0017fda:	83 c4 0c             	add    esp,0xc
c0017fdd:	83 ec 0c             	sub    esp,0xc
c0017fe0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fe7:	50                   	push   eax
c0017fe8:	e8 87 09 01 00       	call   c0028974 <LinkedList<Device>::isEmpty()>
c0017fed:	83 c4 10             	add    esp,0x10
c0017ff0:	83 f0 01             	xor    eax,0x1
c0017ff3:	84 c0                	test   al,al
c0017ff5:	0f 84 43 01 00 00    	je     c001813e <ACPI::open(int, int, void*)+0x226>
c0017ffb:	83 ec 0c             	sub    esp,0xc
c0017ffe:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018005:	50                   	push   eax
c0018006:	e8 85 09 01 00       	call   c0028990 <LinkedList<Device>::getFirstElement()>
c001800b:	83 c4 10             	add    esp,0x10
c001800e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018015:	83 ec 0c             	sub    esp,0xc
c0018018:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001801f:	50                   	push   eax
c0018020:	e8 73 09 01 00       	call   c0028998 <LinkedList<Device>::removeFirst()>
c0018025:	83 c4 10             	add    esp,0x10
c0018028:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c001802f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018036:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c001803d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018041:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018047:	ba 09 00 00 00       	mov    edx,0x9
c001804c:	fc                   	cld    
c001804d:	89 c7                	mov    edi,eax
c001804f:	89 de                	mov    esi,ebx
c0018051:	89 d1                	mov    ecx,edx
c0018053:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018055:	83 ec 08             	sub    esp,0x8
c0018058:	8d 44 24 38          	lea    eax,[esp+0x38]
c001805c:	50                   	push   eax
c001805d:	83 ec 24             	sub    esp,0x24
c0018060:	89 e0                	mov    eax,esp
c0018062:	89 c3                	mov    ebx,eax
c0018064:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018068:	ba 09 00 00 00       	mov    edx,0x9
c001806d:	89 df                	mov    edi,ebx
c001806f:	89 c6                	mov    esi,eax
c0018071:	89 d1                	mov    ecx,edx
c0018073:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018075:	e8 de a7 00 00       	call   c0022858 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001807a:	83 c4 30             	add    esp,0x30
c001807d:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018084:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001808c:	0f 84 4b ff ff ff    	je     c0017fdd <ACPI::open(int, int, void*)+0xc5>
c0018092:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001809d:	83 ec 0c             	sub    esp,0xc
c00180a0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00180a7:	e8 ed 74 ff ff       	call   c000f599 <malloc>
c00180ac:	83 c4 10             	add    esp,0x10
c00180af:	89 c3                	mov    ebx,eax
c00180b1:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00180b6:	83 ec 04             	sub    esp,0x4
c00180b9:	50                   	push   eax
c00180ba:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180c1:	53                   	push   ebx
c00180c2:	e8 7b ab ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c00180c7:	83 c4 10             	add    esp,0x10
c00180ca:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00180d1:	83 ec 0c             	sub    esp,0xc
c00180d4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180db:	e8 34 ae ff ff       	call   c0012f14 <File::exists()>
c00180e0:	83 c4 10             	add    esp,0x10
c00180e3:	84 c0                	test   al,al
c00180e5:	74 27                	je     c001810e <ACPI::open(int, int, void*)+0x1f6>
c00180e7:	83 ec 08             	sub    esp,0x8
c00180ea:	6a 01                	push   0x1
c00180ec:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180f3:	e8 21 4f 00 00       	call   c001d019 <Thr::loadDLL(char const*, bool)>
c00180f8:	83 c4 10             	add    esp,0x10
c00180fb:	83 ec 08             	sub    esp,0x8
c00180fe:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018105:	50                   	push   eax
c0018106:	e8 42 51 00 00       	call   c001d24d <Thr::executeDLL(unsigned long, void*)>
c001810b:	83 c4 10             	add    esp,0x10
c001810e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018116:	0f 84 c1 fe ff ff    	je     c0017fdd <ACPI::open(int, int, void*)+0xc5>
c001811c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018123:	8b 00                	mov    eax,DWORD PTR [eax]
c0018125:	83 c0 08             	add    eax,0x8
c0018128:	8b 00                	mov    eax,DWORD PTR [eax]
c001812a:	83 ec 0c             	sub    esp,0xc
c001812d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018134:	ff d0                	call   eax
c0018136:	83 c4 10             	add    esp,0x10
c0018139:	e9 9f fe ff ff       	jmp    c0017fdd <ACPI::open(int, int, void*)+0xc5>
c001813e:	83 ec 0c             	sub    esp,0xc
c0018141:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018148:	50                   	push   eax
c0018149:	e8 24 08 01 00       	call   c0028972 <LinkedList<Device>::~LinkedList()>
c001814e:	83 c4 10             	add    esp,0x10
c0018151:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c0018157:	83 ec 08             	sub    esp,0x8
c001815a:	6a 01                	push   0x1
c001815c:	68 e7 b2 02 c0       	push   0xc002b2e7
c0018161:	e8 b3 4e 00 00       	call   c001d019 <Thr::loadDLL(char const*, bool)>
c0018166:	83 c4 10             	add    esp,0x10
c0018169:	83 ec 08             	sub    esp,0x8
c001816c:	53                   	push   ebx
c001816d:	50                   	push   eax
c001816e:	e8 da 50 00 00       	call   c001d24d <Thr::executeDLL(unsigned long, void*)>
c0018173:	83 c4 10             	add    esp,0x10
c0018176:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c001817c:	83 ec 08             	sub    esp,0x8
c001817f:	6a 01                	push   0x1
c0018181:	68 04 b3 02 c0       	push   0xc002b304
c0018186:	e8 8e 4e 00 00       	call   c001d019 <Thr::loadDLL(char const*, bool)>
c001818b:	83 c4 10             	add    esp,0x10
c001818e:	83 ec 08             	sub    esp,0x8
c0018191:	53                   	push   ebx
c0018192:	50                   	push   eax
c0018193:	e8 b5 50 00 00       	call   c001d24d <Thr::executeDLL(unsigned long, void*)>
c0018198:	83 c4 10             	add    esp,0x10
c001819b:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00181a0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00181a6:	83 e0 04             	and    eax,0x4
c00181a9:	84 c0                	test   al,al
c00181ab:	0f 84 0d 01 00 00    	je     c00182be <ACPI::open(int, int, void*)+0x3a6>
c00181b1:	83 ec 0c             	sub    esp,0xc
c00181b4:	68 21 b3 02 c0       	push   0xc002b321
c00181b9:	e8 35 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00181be:	83 c4 10             	add    esp,0x10
c00181c1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00181cc:	83 ec 0c             	sub    esp,0xc
c00181cf:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00181d6:	e8 be 73 ff ff       	call   c000f599 <malloc>
c00181db:	83 c4 10             	add    esp,0x10
c00181de:	89 c3                	mov    ebx,eax
c00181e0:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00181e5:	83 ec 04             	sub    esp,0x4
c00181e8:	50                   	push   eax
c00181e9:	68 3e b3 02 c0       	push   0xc002b33e
c00181ee:	53                   	push   ebx
c00181ef:	e8 4e aa ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c00181f4:	83 c4 10             	add    esp,0x10
c00181f7:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00181fe:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018206:	74 1a                	je     c0018222 <ACPI::open(int, int, void*)+0x30a>
c0018208:	83 ec 0c             	sub    esp,0xc
c001820b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018212:	e8 fd ac ff ff       	call   c0012f14 <File::exists()>
c0018217:	83 c4 10             	add    esp,0x10
c001821a:	84 c0                	test   al,al
c001821c:	74 04                	je     c0018222 <ACPI::open(int, int, void*)+0x30a>
c001821e:	b0 01                	mov    al,0x1
c0018220:	eb 02                	jmp    c0018224 <ACPI::open(int, int, void*)+0x30c>
c0018222:	b0 00                	mov    al,0x0
c0018224:	84 c0                	test   al,al
c0018226:	74 25                	je     c001824d <ACPI::open(int, int, void*)+0x335>
c0018228:	83 ec 08             	sub    esp,0x8
c001822b:	6a 01                	push   0x1
c001822d:	68 3e b3 02 c0       	push   0xc002b33e
c0018232:	e8 e2 4d 00 00       	call   c001d019 <Thr::loadDLL(char const*, bool)>
c0018237:	83 c4 10             	add    esp,0x10
c001823a:	83 ec 08             	sub    esp,0x8
c001823d:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018244:	50                   	push   eax
c0018245:	e8 03 50 00 00       	call   c001d24d <Thr::executeDLL(unsigned long, void*)>
c001824a:	83 c4 10             	add    esp,0x10
c001824d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018255:	74 27                	je     c001827e <ACPI::open(int, int, void*)+0x366>
c0018257:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001825f:	74 1d                	je     c001827e <ACPI::open(int, int, void*)+0x366>
c0018261:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018268:	8b 00                	mov    eax,DWORD PTR [eax]
c001826a:	83 c0 08             	add    eax,0x8
c001826d:	8b 00                	mov    eax,DWORD PTR [eax]
c001826f:	83 ec 0c             	sub    esp,0xc
c0018272:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018279:	ff d0                	call   eax
c001827b:	83 c4 10             	add    esp,0x10
c001827e:	a1 88 02 03 c0       	mov    eax,ds:0xc0030288
c0018283:	83 ec 08             	sub    esp,0x8
c0018286:	68 5b b3 02 c0       	push   0xc002b35b
c001828b:	50                   	push   eax
c001828c:	e8 43 f3 ff ff       	call   c00175d4 <findDataTable(unsigned char*, char*)>
c0018291:	83 c4 10             	add    esp,0x10
c0018294:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001829b:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00182a3:	74 19                	je     c00182be <ACPI::open(int, int, void*)+0x3a6>
c00182a5:	83 ec 08             	sub    esp,0x8
c00182a8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00182af:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00182b6:	e8 fd fb ff ff       	call   c0017eb8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00182bb:	83 c4 10             	add    esp,0x10
c00182be:	b8 00 00 00 00       	mov    eax,0x0
c00182c3:	81 c4 60 01 00 00    	add    esp,0x160
c00182c9:	5b                   	pop    ebx
c00182ca:	5e                   	pop    esi
c00182cb:	5f                   	pop    edi
c00182cc:	c3                   	ret    
c00182cd:	90                   	nop

c00182ce <CPU::close(int, int, void*)>:
c00182ce:	31 c0                	xor    eax,eax
c00182d0:	c3                   	ret    
c00182d1:	90                   	nop

c00182d2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00182d2:	55                   	push   ebp
c00182d3:	57                   	push   edi
c00182d4:	56                   	push   esi
c00182d5:	53                   	push   ebx
c00182d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00182da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182de:	89 ce                	mov    esi,ecx
c00182e0:	89 d5                	mov    ebp,edx
c00182e2:	80 f9 04             	cmp    cl,0x4
c00182e5:	75 28                	jne    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00182e7:	8d 42 f9             	lea    eax,[edx-0x7]
c00182ea:	3c 03                	cmp    al,0x3
c00182ec:	0f 86 63 01 00 00    	jbe    c0018455 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182f2:	80 fa 03             	cmp    dl,0x3
c00182f5:	0f 84 5a 01 00 00    	je     c0018455 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182fb:	8d 7a f2             	lea    edi,[edx-0xe]
c00182fe:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c0018303:	89 fb                	mov    ebx,edi
c0018305:	80 fb 01             	cmp    bl,0x1
c0018308:	77 4e                	ja     c0018358 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001830a:	e9 52 01 00 00       	jmp    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001830f:	80 f9 05             	cmp    cl,0x5
c0018312:	75 4d                	jne    c0018361 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018314:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018319:	80 fa 03             	cmp    dl,0x3
c001831c:	0f 86 3f 01 00 00    	jbe    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018322:	8d 7a fa             	lea    edi,[edx-0x6]
c0018325:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c001832a:	89 fb                	mov    ebx,edi
c001832c:	80 fb 01             	cmp    bl,0x1
c001832f:	0f 86 2c 01 00 00    	jbe    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018335:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c001833a:	80 fa 08             	cmp    dl,0x8
c001833d:	0f 84 1e 01 00 00    	je     c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018343:	89 d7                	mov    edi,edx
c0018345:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c001834a:	83 e7 fb             	and    edi,0xfffffffb
c001834d:	89 fb                	mov    ebx,edi
c001834f:	80 fb 09             	cmp    bl,0x9
c0018352:	0f 84 09 01 00 00    	je     c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018358:	31 c0                	xor    eax,eax
c001835a:	89 eb                	mov    ebx,ebp
c001835c:	0f b6 fb             	movzx  edi,bl
c001835f:	eb 30                	jmp    c0018391 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018361:	31 c0                	xor    eax,eax
c0018363:	80 f9 06             	cmp    cl,0x6
c0018366:	75 f2                	jne    c001835a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018368:	80 fa 0a             	cmp    dl,0xa
c001836b:	77 ed                	ja     c001835a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001836d:	bf de 05 00 00       	mov    edi,0x5de
c0018372:	0f a3 d7             	bt     edi,edx
c0018375:	73 e3                	jae    c001835a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018377:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c001837c:	e9 e0 00 00 00       	jmp    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018381:	39 c7                	cmp    edi,eax
c0018383:	0f 84 d3 00 00 00    	je     c001845c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018389:	40                   	inc    eax
c001838a:	3d d0 00 00 00       	cmp    eax,0xd0
c001838f:	74 09                	je     c001839a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018391:	89 f3                	mov    ebx,esi
c0018393:	80 fb 0f             	cmp    bl,0xf
c0018396:	75 f1                	jne    c0018389 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018398:	eb e7                	jmp    c0018381 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001839a:	80 f9 10             	cmp    cl,0x10
c001839d:	75 14                	jne    c00183b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001839f:	8d 42 fc             	lea    eax,[edx-0x4]
c00183a2:	83 e0 fb             	and    eax,0xfffffffb
c00183a5:	3c 02                	cmp    al,0x2
c00183a7:	76 34                	jbe    c00183dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00183a9:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00183ae:	80 fa 02             	cmp    dl,0x2
c00183b1:	eb 24                	jmp    c00183d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00183b3:	80 f9 11             	cmp    cl,0x11
c00183b6:	75 13                	jne    c00183cb <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00183b8:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00183bd:	80 fa 03             	cmp    dl,0x3
c00183c0:	0f 85 9b 00 00 00    	jne    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c6:	e9 91 00 00 00       	jmp    c001845c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183cb:	80 f9 12             	cmp    cl,0x12
c00183ce:	75 14                	jne    c00183e4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00183d0:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00183d5:	fe ca                	dec    dl
c00183d7:	0f 85 84 00 00 00    	jne    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183dd:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c00183e2:	eb 7d                	jmp    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e4:	80 f9 14             	cmp    cl,0x14
c00183e7:	75 12                	jne    c00183fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00183e9:	4a                   	dec    edx
c00183ea:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00183ef:	80 fa 01             	cmp    dl,0x1
c00183f2:	77 6d                	ja     c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183f4:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c00183f9:	eb 66                	jmp    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183fb:	80 f9 15             	cmp    cl,0x15
c00183fe:	75 31                	jne    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018400:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c0018405:	80 fa 01             	cmp    dl,0x1
c0018408:	74 57                	je     c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001840a:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c001840f:	80 fa 13             	cmp    dl,0x13
c0018412:	76 0c                	jbe    c0018420 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018414:	80 fa 30             	cmp    dl,0x30
c0018417:	75 48                	jne    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018419:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c001841e:	eb 41                	jmp    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018420:	b9 04 00 09 00       	mov    ecx,0x90004
c0018425:	0f a3 d1             	bt     ecx,edx
c0018428:	73 37                	jae    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001842a:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c001842f:	eb 30                	jmp    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018431:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c0018436:	80 f9 16             	cmp    cl,0x16
c0018439:	75 26                	jne    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001843b:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c0018440:	84 d2                	test   dl,dl
c0018442:	74 1d                	je     c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018444:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c0018449:	80 fa 30             	cmp    dl,0x30
c001844c:	75 13                	jne    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001844e:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c0018453:	eb 0c                	jmp    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018455:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c001845a:	eb 05                	jmp    c0018461 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001845c:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c0018461:	5b                   	pop    ebx
c0018462:	5e                   	pop    esi
c0018463:	5f                   	pop    edi
c0018464:	5d                   	pop    ebp
c0018465:	c3                   	ret    

c0018466 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018466:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001846a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001846e:	80 f9 04             	cmp    cl,0x4
c0018471:	75 6b                	jne    c00184de <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018473:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c0018478:	80 fa 01             	cmp    dl,0x1
c001847b:	0f 86 92 02 00 00    	jbe    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018481:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c0018486:	80 fa 02             	cmp    dl,0x2
c0018489:	0f 84 84 02 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001848f:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c0018494:	80 fa 03             	cmp    dl,0x3
c0018497:	0f 84 76 02 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001849d:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c00184a2:	80 fa 04             	cmp    dl,0x4
c00184a5:	0f 84 68 02 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ab:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c00184b0:	80 fa 05             	cmp    dl,0x5
c00184b3:	0f 84 5a 02 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184b9:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c00184be:	80 fa 07             	cmp    dl,0x7
c00184c1:	0f 84 4c 02 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c7:	83 ea 08             	sub    edx,0x8
c00184ca:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00184cf:	80 fa 01             	cmp    dl,0x1
c00184d2:	0f 87 3b 02 00 00    	ja     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d8:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c00184dd:	c3                   	ret    
c00184de:	80 f9 05             	cmp    cl,0x5
c00184e1:	75 45                	jne    c0018528 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00184e3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00184e6:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00184eb:	80 f9 02             	cmp    cl,0x2
c00184ee:	0f 86 1f 02 00 00    	jbe    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f4:	80 fa 04             	cmp    dl,0x4
c00184f7:	0f 84 f3 01 00 00    	je     c00186f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00184fd:	80 fa 07             	cmp    dl,0x7
c0018500:	0f 84 0d 02 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018506:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c001850b:	80 fa 08             	cmp    dl,0x8
c001850e:	0f 84 ff 01 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018514:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c0018519:	80 fa 09             	cmp    dl,0x9
c001851c:	0f 85 f1 01 00 00    	jne    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018522:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c0018527:	c3                   	ret    
c0018528:	80 f9 06             	cmp    cl,0x6
c001852b:	0f 85 85 01 00 00    	jne    c00186b6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018531:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c0018536:	80 fa 01             	cmp    dl,0x1
c0018539:	0f 84 d4 01 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001853f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018542:	3c 01                	cmp    al,0x1
c0018544:	0f 86 ac 01 00 00    	jbe    c00186f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001854a:	80 fa 03             	cmp    dl,0x3
c001854d:	0f 84 a3 01 00 00    	je     c00186f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018553:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018556:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c001855b:	80 f9 01             	cmp    cl,0x1
c001855e:	0f 86 af 01 00 00    	jbe    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018564:	80 fa 09             	cmp    dl,0x9
c0018567:	0f 84 8f 01 00 00    	je     c00186fc <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001856d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018570:	80 f9 01             	cmp    cl,0x1
c0018573:	0f 86 9a 01 00 00    	jbe    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018579:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c001857e:	80 fa 0d             	cmp    dl,0xd
c0018581:	0f 84 8c 01 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018587:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c001858c:	80 fa 0e             	cmp    dl,0xe
c001858f:	0f 84 7e 01 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018595:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c001859a:	80 fa 0f             	cmp    dl,0xf
c001859d:	0f 84 70 01 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a3:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c00185a8:	80 fa 15             	cmp    dl,0x15
c00185ab:	0f 84 62 01 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b1:	8d 4a ea             	lea    ecx,[edx-0x16]
c00185b4:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c00185b9:	80 f9 01             	cmp    cl,0x1
c00185bc:	0f 86 51 01 00 00    	jbe    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c2:	80 fa 1a             	cmp    dl,0x1a
c00185c5:	0f 84 37 01 00 00    	je     c0018702 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00185cb:	80 fa 1c             	cmp    dl,0x1c
c00185ce:	0f 84 34 01 00 00    	je     c0018708 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00185d4:	80 fa 1d             	cmp    dl,0x1d
c00185d7:	0f 84 36 01 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185dd:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c00185e2:	80 fa 25             	cmp    dl,0x25
c00185e5:	0f 84 28 01 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185eb:	8d 4a da             	lea    ecx,[edx-0x26]
c00185ee:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00185f3:	80 f9 01             	cmp    cl,0x1
c00185f6:	0f 86 17 01 00 00    	jbe    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185fc:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c0018601:	80 fa 2a             	cmp    dl,0x2a
c0018604:	0f 84 09 01 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001860a:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c001860f:	80 fa 2c             	cmp    dl,0x2c
c0018612:	0f 84 fb 00 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018618:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c001861d:	80 fa 2d             	cmp    dl,0x2d
c0018620:	0f 84 ed 00 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018626:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c001862b:	80 fa 2e             	cmp    dl,0x2e
c001862e:	0f 84 df 00 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018634:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c0018639:	80 fa 2f             	cmp    dl,0x2f
c001863c:	0f 84 d1 00 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018642:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018645:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c001864a:	80 f9 01             	cmp    cl,0x1
c001864d:	0f 86 c0 00 00 00    	jbe    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018653:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018658:	80 fa 37             	cmp    dl,0x37
c001865b:	0f 84 b2 00 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018661:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018666:	80 fa 3a             	cmp    dl,0x3a
c0018669:	0f 84 a4 00 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001866f:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018674:	80 fa 3c             	cmp    dl,0x3c
c0018677:	0f 84 96 00 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001867d:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c0018682:	80 fa 3d             	cmp    dl,0x3d
c0018685:	0f 84 88 00 00 00    	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868b:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018690:	80 fa 3e             	cmp    dl,0x3e
c0018693:	74 7e                	je     c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018695:	8d 42 bb             	lea    eax,[edx-0x45]
c0018698:	3c 01                	cmp    al,0x1
c001869a:	76 72                	jbe    c001870e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001869c:	80 fa 3f             	cmp    dl,0x3f
c001869f:	74 6d                	je     c001870e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186a1:	80 fa 4a             	cmp    dl,0x4a
c00186a4:	74 0a                	je     c00186b0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00186a6:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00186ab:	80 fa 4d             	cmp    dl,0x4d
c00186ae:	75 63                	jne    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b0:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c00186b5:	c3                   	ret    
c00186b6:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00186bb:	80 f9 0b             	cmp    cl,0xb
c00186be:	75 0a                	jne    c00186ca <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00186c0:	fe ca                	dec    dl
c00186c2:	75 4f                	jne    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c4:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00186c9:	c3                   	ret    
c00186ca:	80 f9 0f             	cmp    cl,0xf
c00186cd:	75 44                	jne    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186cf:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00186d4:	80 fa 02             	cmp    dl,0x2
c00186d7:	76 3a                	jbe    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d9:	8d 42 fd             	lea    eax,[edx-0x3]
c00186dc:	3c 01                	cmp    al,0x1
c00186de:	76 0a                	jbe    c00186ea <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00186e0:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00186e5:	80 fa 06             	cmp    dl,0x6
c00186e8:	75 29                	jne    c0018713 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ea:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c00186ef:	c3                   	ret    
c00186f0:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c00186f5:	c3                   	ret    
c00186f6:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c00186fb:	c3                   	ret    
c00186fc:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c0018701:	c3                   	ret    
c0018702:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c0018707:	c3                   	ret    
c0018708:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c001870d:	c3                   	ret    
c001870e:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018713:	c3                   	ret    

c0018714 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018714:	60                   	pusha  
c0018715:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018719:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001871d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018721:	9c                   	pushf  
c0018722:	fa                   	cli    
c0018723:	0f 09                	wbinvd 
c0018725:	0f 30                	wrmsr  
c0018727:	9d                   	popf   
c0018728:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001872c:	89 02                	mov    DWORD PTR [edx],eax
c001872e:	61                   	popa   
c001872f:	c3                   	ret    

c0018730 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018730:	60                   	pusha  
c0018731:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018735:	9c                   	pushf  
c0018736:	fa                   	cli    
c0018737:	0f 09                	wbinvd 
c0018739:	31 c0                	xor    eax,eax
c001873b:	31 d2                	xor    edx,edx
c001873d:	0f 32                	rdmsr  
c001873f:	9d                   	popf   
c0018740:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018744:	89 02                	mov    DWORD PTR [edx],eax
c0018746:	61                   	popa   
c0018747:	c3                   	ret    

c0018748 <CPU::AMD_K6_writeback(int, int, int)>:
c0018748:	56                   	push   esi
c0018749:	53                   	push   ebx
c001874a:	83 ec 10             	sub    esp,0x10
c001874d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018751:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018756:	75 5d                	jne    c00187b5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018758:	83 f8 08             	cmp    eax,0x8
c001875b:	75 09                	jne    c0018766 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001875d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018762:	7e 13                	jle    c0018777 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018764:	eb 30                	jmp    c0018796 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018766:	83 f8 06             	cmp    eax,0x6
c0018769:	7c 4a                	jl     c00187b5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001876b:	83 f8 07             	cmp    eax,0x7
c001876e:	7e 07                	jle    c0018777 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018770:	83 f8 09             	cmp    eax,0x9
c0018773:	74 21                	je     c0018796 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018775:	eb 3e                	jmp    c00187b5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018777:	89 e6                	mov    esi,esp
c0018779:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c001877f:	56                   	push   esi
c0018780:	c1 eb 15             	shr    ebx,0x15
c0018783:	68 82 00 00 c0       	push   0xc0000082
c0018788:	83 e3 7e             	and    ebx,0x7e
c001878b:	e8 a0 ff ff ff       	call   c0018730 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018790:	56                   	push   esi
c0018791:	6a 00                	push   0x0
c0018793:	53                   	push   ebx
c0018794:	eb 12                	jmp    c00187a8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018796:	89 e3                	mov    ebx,esp
c0018798:	53                   	push   ebx
c0018799:	68 82 00 00 c0       	push   0xc0000082
c001879e:	e8 8d ff ff ff       	call   c0018730 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187a3:	53                   	push   ebx
c00187a4:	6a 00                	push   0x0
c00187a6:	6a 00                	push   0x0
c00187a8:	68 82 00 00 c0       	push   0xc0000082
c00187ad:	e8 62 ff ff ff       	call   c0018714 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00187b2:	83 c4 18             	add    esp,0x18
c00187b5:	83 c4 10             	add    esp,0x10
c00187b8:	5b                   	pop    ebx
c00187b9:	5e                   	pop    esi
c00187ba:	c3                   	ret    
c00187bb:	90                   	nop

c00187bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187bc:	55                   	push   ebp
c00187bd:	57                   	push   edi
c00187be:	56                   	push   esi
c00187bf:	53                   	push   ebx
c00187c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187c4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00187c8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00187cc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00187d0:	39 05 e0 ce 02 c0    	cmp    DWORD PTR ds:0xc002cee0,eax
c00187d6:	75 23                	jne    c00187fb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00187d8:	a1 ec 04 03 c0       	mov    eax,ds:0xc00304ec
c00187dd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00187e1:	89 06                	mov    DWORD PTR [esi],eax
c00187e3:	a1 e8 04 03 c0       	mov    eax,ds:0xc00304e8
c00187e8:	89 07                	mov    DWORD PTR [edi],eax
c00187ea:	a1 e4 04 03 c0       	mov    eax,ds:0xc00304e4
c00187ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00187f2:	a1 e0 04 03 c0       	mov    eax,ds:0xc00304e0
c00187f7:	89 02                	mov    DWORD PTR [edx],eax
c00187f9:	eb 3f                	jmp    c001883a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00187fb:	31 c9                	xor    ecx,ecx
c00187fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018801:	0f a2                	cpuid  
c0018803:	89 06                	mov    DWORD PTR [esi],eax
c0018805:	89 1f                	mov    DWORD PTR [edi],ebx
c0018807:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001880b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001880e:	89 10                	mov    DWORD PTR [eax],edx
c0018810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018814:	a3 e0 ce 02 c0       	mov    ds:0xc002cee0,eax
c0018819:	8b 06                	mov    eax,DWORD PTR [esi]
c001881b:	a3 ec 04 03 c0       	mov    ds:0xc00304ec,eax
c0018820:	8b 07                	mov    eax,DWORD PTR [edi]
c0018822:	a3 e8 04 03 c0       	mov    ds:0xc00304e8,eax
c0018827:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001882a:	a3 e4 04 03 c0       	mov    ds:0xc00304e4,eax
c001882f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018833:	8b 00                	mov    eax,DWORD PTR [eax]
c0018835:	a3 e0 04 03 c0       	mov    ds:0xc00304e0,eax
c001883a:	5b                   	pop    ebx
c001883b:	5e                   	pop    esi
c001883c:	5f                   	pop    edi
c001883d:	5d                   	pop    ebp
c001883e:	c3                   	ret    
c001883f:	90                   	nop

c0018840 <CPU::cpuidCheckEDX(unsigned int)>:
c0018840:	83 ec 10             	sub    esp,0x10
c0018843:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018847:	50                   	push   eax
c0018848:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001884c:	50                   	push   eax
c001884d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018851:	50                   	push   eax
c0018852:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018856:	50                   	push   eax
c0018857:	6a 01                	push   0x1
c0018859:	e8 5e ff ff ff       	call   c00187bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001885e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018862:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018866:	0f 95 c0             	setne  al
c0018869:	83 c4 24             	add    esp,0x24
c001886c:	c3                   	ret    
c001886d:	90                   	nop

c001886e <CPU::cpuidCheckECX(unsigned int)>:
c001886e:	83 ec 10             	sub    esp,0x10
c0018871:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018875:	50                   	push   eax
c0018876:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001887a:	50                   	push   eax
c001887b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001887f:	50                   	push   eax
c0018880:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018884:	50                   	push   eax
c0018885:	6a 01                	push   0x1
c0018887:	e8 30 ff ff ff       	call   c00187bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001888c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018890:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018894:	0f 95 c0             	setne  al
c0018897:	83 c4 24             	add    esp,0x24
c001889a:	c3                   	ret    
c001889b:	90                   	nop

c001889c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001889c:	83 ec 10             	sub    esp,0x10
c001889f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188a3:	50                   	push   eax
c00188a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188a8:	50                   	push   eax
c00188a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ad:	50                   	push   eax
c00188ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b2:	50                   	push   eax
c00188b3:	6a 07                	push   0x7
c00188b5:	e8 02 ff ff ff       	call   c00187bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188be:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00188c2:	0f 95 c0             	setne  al
c00188c5:	83 c4 24             	add    esp,0x24
c00188c8:	c3                   	ret    
c00188c9:	90                   	nop

c00188ca <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00188ca:	83 ec 10             	sub    esp,0x10
c00188cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188d1:	50                   	push   eax
c00188d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188d6:	50                   	push   eax
c00188d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188db:	50                   	push   eax
c00188dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e0:	50                   	push   eax
c00188e1:	6a 07                	push   0x7
c00188e3:	e8 d4 fe ff ff       	call   c00187bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188ec:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188f0:	0f 95 c0             	setne  al
c00188f3:	83 c4 24             	add    esp,0x24
c00188f6:	c3                   	ret    
c00188f7:	90                   	nop

c00188f8 <CPU::CPU()>:
c00188f8:	83 ec 0c             	sub    esp,0xc
c00188fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188ff:	83 ec 08             	sub    esp,0x8
c0018902:	68 e1 b4 02 c0       	push   0xc002b4e1
c0018907:	50                   	push   eax
c0018908:	e8 13 b4 ff ff       	call   c0013d20 <Device::Device(char const*)>
c001890d:	83 c4 10             	add    esp,0x10
c0018910:	ba b8 b5 02 c0       	mov    edx,0xc002b5b8
c0018915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018919:	89 10                	mov    DWORD PTR [eax],edx
c001891b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001891f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001892d:	05 78 01 00 00       	add    eax,0x178
c0018932:	83 ec 0c             	sub    esp,0xc
c0018935:	50                   	push   eax
c0018936:	e8 91 64 ff ff       	call   c000edcc <GDT::GDT()>
c001893b:	83 c4 10             	add    esp,0x10
c001893e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018942:	05 7c 09 00 00       	add    eax,0x97c
c0018947:	83 ec 0c             	sub    esp,0xc
c001894a:	50                   	push   eax
c001894b:	e8 cc 66 ff ff       	call   c000f01c <IDT::IDT()>
c0018950:	83 c4 10             	add    esp,0x10
c0018953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018957:	05 7c 11 00 00       	add    eax,0x117c
c001895c:	83 ec 0c             	sub    esp,0xc
c001895f:	50                   	push   eax
c0018960:	e8 01 82 ff ff       	call   c0010b66 <TSS::TSS()>
c0018965:	83 c4 10             	add    esp,0x10
c0018968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001896c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018977:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018981:	90                   	nop
c0018982:	83 c4 0c             	add    esp,0xc
c0018985:	c3                   	ret    

c0018986 <CPU::displayFeatures()>:
c0018986:	c3                   	ret    
c0018987:	90                   	nop

c0018988 <CPU::detectFeatures()>:
c0018988:	55                   	push   ebp
c0018989:	57                   	push   edi
c001898a:	56                   	push   esi
c001898b:	53                   	push   ebx
c001898c:	83 ec 50             	sub    esp,0x50
c001898f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018993:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001899d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00189a4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00189aa:	6a 0d                	push   0xd
c00189ac:	6a 00                	push   0x0
c00189ae:	55                   	push   ebp
c00189af:	e8 9c 7d fe ff       	call   c0000750 <memset>
c00189b4:	83 c4 10             	add    esp,0x10
c00189b7:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00189bc:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00189c3:	0f 84 22 09 00 00    	je     c00192eb <CPU::detectFeatures()+0x963>
c00189c9:	83 ec 0c             	sub    esp,0xc
c00189cc:	89 ef                	mov    edi,ebp
c00189ce:	6a 10                	push   0x10
c00189d0:	e8 6b fe ff ff       	call   c0018840 <CPU::cpuidCheckEDX(unsigned int)>
c00189d5:	83 e0 01             	and    eax,0x1
c00189d8:	8d 14 00             	lea    edx,[eax+eax*1]
c00189db:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189e1:	83 e0 fd             	and    eax,0xfffffffd
c00189e4:	09 d0                	or     eax,edx
c00189e6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189ec:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00189f3:	e8 48 fe ff ff       	call   c0018840 <CPU::cpuidCheckEDX(unsigned int)>
c00189f8:	83 e0 01             	and    eax,0x1
c00189fb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018a02:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a08:	83 e0 fb             	and    eax,0xfffffffb
c0018a0b:	09 d0                	or     eax,edx
c0018a0d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a13:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018a1a:	e8 21 fe ff ff       	call   c0018840 <CPU::cpuidCheckEDX(unsigned int)>
c0018a1f:	83 e0 01             	and    eax,0x1
c0018a22:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018a29:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a2f:	83 e0 f7             	and    eax,0xfffffff7
c0018a32:	09 d0                	or     eax,edx
c0018a34:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a3a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018a41:	e8 fa fd ff ff       	call   c0018840 <CPU::cpuidCheckEDX(unsigned int)>
c0018a46:	83 e0 01             	and    eax,0x1
c0018a49:	c1 e0 04             	shl    eax,0x4
c0018a4c:	88 c2                	mov    dl,al
c0018a4e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a54:	83 e0 ef             	and    eax,0xffffffef
c0018a57:	09 d0                	or     eax,edx
c0018a59:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a5f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018a66:	e8 d5 fd ff ff       	call   c0018840 <CPU::cpuidCheckEDX(unsigned int)>
c0018a6b:	83 e0 01             	and    eax,0x1
c0018a6e:	c1 e0 05             	shl    eax,0x5
c0018a71:	88 c2                	mov    dl,al
c0018a73:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a79:	83 e0 df             	and    eax,0xffffffdf
c0018a7c:	09 d0                	or     eax,edx
c0018a7e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a84:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018a8b:	e8 b0 fd ff ff       	call   c0018840 <CPU::cpuidCheckEDX(unsigned int)>
c0018a90:	83 e0 01             	and    eax,0x1
c0018a93:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a96:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018a9c:	83 e0 fd             	and    eax,0xfffffffd
c0018a9f:	09 d0                	or     eax,edx
c0018aa1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018aa7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018aae:	e8 8d fd ff ff       	call   c0018840 <CPU::cpuidCheckEDX(unsigned int)>
c0018ab3:	83 e0 01             	and    eax,0x1
c0018ab6:	c1 e0 06             	shl    eax,0x6
c0018ab9:	88 c2                	mov    dl,al
c0018abb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018ac1:	83 e0 bf             	and    eax,0xffffffbf
c0018ac4:	09 d0                	or     eax,edx
c0018ac6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018acc:	58                   	pop    eax
c0018acd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ad1:	50                   	push   eax
c0018ad2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ad6:	50                   	push   eax
c0018ad7:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018adb:	56                   	push   esi
c0018adc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ae0:	50                   	push   eax
c0018ae1:	6a 00                	push   0x0
c0018ae3:	e8 d4 fc ff ff       	call   c00187bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ae8:	b8 04 00 00 00       	mov    eax,0x4
c0018aed:	89 c1                	mov    ecx,eax
c0018aef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018af1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018af7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018afb:	89 c1                	mov    ecx,eax
c0018afd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018aff:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018b05:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018b09:	89 c1                	mov    ecx,eax
c0018b0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b0d:	83 c4 18             	add    esp,0x18
c0018b10:	68 8c b3 02 c0       	push   0xc002b38c
c0018b15:	55                   	push   ebp
c0018b16:	e8 7d 7d fe ff       	call   c0000898 <strcmp>
c0018b1b:	83 c4 10             	add    esp,0x10
c0018b1e:	85 c0                	test   eax,eax
c0018b20:	75 0f                	jne    c0018b31 <CPU::detectFeatures()+0x1a9>
c0018b22:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018b2c:	e9 22 02 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018b31:	50                   	push   eax
c0018b32:	50                   	push   eax
c0018b33:	68 99 b3 02 c0       	push   0xc002b399
c0018b38:	55                   	push   ebp
c0018b39:	e8 5a 7d fe ff       	call   c0000898 <strcmp>
c0018b3e:	83 c4 10             	add    esp,0x10
c0018b41:	85 c0                	test   eax,eax
c0018b43:	74 dd                	je     c0018b22 <CPU::detectFeatures()+0x19a>
c0018b45:	50                   	push   eax
c0018b46:	50                   	push   eax
c0018b47:	68 a6 b3 02 c0       	push   0xc002b3a6
c0018b4c:	55                   	push   ebp
c0018b4d:	e8 46 7d fe ff       	call   c0000898 <strcmp>
c0018b52:	83 c4 10             	add    esp,0x10
c0018b55:	85 c0                	test   eax,eax
c0018b57:	74 2a                	je     c0018b83 <CPU::detectFeatures()+0x1fb>
c0018b59:	50                   	push   eax
c0018b5a:	50                   	push   eax
c0018b5b:	68 b3 b3 02 c0       	push   0xc002b3b3
c0018b60:	55                   	push   ebp
c0018b61:	e8 32 7d fe ff       	call   c0000898 <strcmp>
c0018b66:	83 c4 10             	add    esp,0x10
c0018b69:	85 c0                	test   eax,eax
c0018b6b:	74 16                	je     c0018b83 <CPU::detectFeatures()+0x1fb>
c0018b6d:	50                   	push   eax
c0018b6e:	50                   	push   eax
c0018b6f:	68 c0 b3 02 c0       	push   0xc002b3c0
c0018b74:	55                   	push   ebp
c0018b75:	e8 1e 7d fe ff       	call   c0000898 <strcmp>
c0018b7a:	83 c4 10             	add    esp,0x10
c0018b7d:	85 c0                	test   eax,eax
c0018b7f:	74 48                	je     c0018bc9 <CPU::detectFeatures()+0x241>
c0018b81:	eb 0f                	jmp    c0018b92 <CPU::detectFeatures()+0x20a>
c0018b83:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018b8d:	e9 c1 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018b92:	50                   	push   eax
c0018b93:	50                   	push   eax
c0018b94:	68 cd b3 02 c0       	push   0xc002b3cd
c0018b99:	55                   	push   ebp
c0018b9a:	e8 f9 7c fe ff       	call   c0000898 <strcmp>
c0018b9f:	83 c4 10             	add    esp,0x10
c0018ba2:	85 c0                	test   eax,eax
c0018ba4:	74 23                	je     c0018bc9 <CPU::detectFeatures()+0x241>
c0018ba6:	57                   	push   edi
c0018ba7:	57                   	push   edi
c0018ba8:	68 da b3 02 c0       	push   0xc002b3da
c0018bad:	55                   	push   ebp
c0018bae:	e8 e5 7c fe ff       	call   c0000898 <strcmp>
c0018bb3:	83 c4 10             	add    esp,0x10
c0018bb6:	85 c0                	test   eax,eax
c0018bb8:	75 1e                	jne    c0018bd8 <CPU::detectFeatures()+0x250>
c0018bba:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018bc4:	e9 8a 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018bc9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018bd3:	e9 7b 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018bd8:	56                   	push   esi
c0018bd9:	56                   	push   esi
c0018bda:	68 e7 b3 02 c0       	push   0xc002b3e7
c0018bdf:	55                   	push   ebp
c0018be0:	e8 b3 7c fe ff       	call   c0000898 <strcmp>
c0018be5:	83 c4 10             	add    esp,0x10
c0018be8:	85 c0                	test   eax,eax
c0018bea:	75 0f                	jne    c0018bfb <CPU::detectFeatures()+0x273>
c0018bec:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018bf6:	e9 58 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018bfb:	51                   	push   ecx
c0018bfc:	51                   	push   ecx
c0018bfd:	68 a6 b3 02 c0       	push   0xc002b3a6
c0018c02:	55                   	push   ebp
c0018c03:	e8 90 7c fe ff       	call   c0000898 <strcmp>
c0018c08:	83 c4 10             	add    esp,0x10
c0018c0b:	85 c0                	test   eax,eax
c0018c0d:	75 0f                	jne    c0018c1e <CPU::detectFeatures()+0x296>
c0018c0f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018c19:	e9 35 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018c1e:	52                   	push   edx
c0018c1f:	52                   	push   edx
c0018c20:	68 f4 b3 02 c0       	push   0xc002b3f4
c0018c25:	55                   	push   ebp
c0018c26:	e8 6d 7c fe ff       	call   c0000898 <strcmp>
c0018c2b:	83 c4 10             	add    esp,0x10
c0018c2e:	85 c0                	test   eax,eax
c0018c30:	75 0f                	jne    c0018c41 <CPU::detectFeatures()+0x2b9>
c0018c32:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018c3c:	e9 12 01 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018c41:	50                   	push   eax
c0018c42:	50                   	push   eax
c0018c43:	68 01 b4 02 c0       	push   0xc002b401
c0018c48:	55                   	push   ebp
c0018c49:	e8 4a 7c fe ff       	call   c0000898 <strcmp>
c0018c4e:	83 c4 10             	add    esp,0x10
c0018c51:	85 c0                	test   eax,eax
c0018c53:	75 0f                	jne    c0018c64 <CPU::detectFeatures()+0x2dc>
c0018c55:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018c5f:	e9 ef 00 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018c64:	50                   	push   eax
c0018c65:	50                   	push   eax
c0018c66:	68 0e b4 02 c0       	push   0xc002b40e
c0018c6b:	55                   	push   ebp
c0018c6c:	e8 27 7c fe ff       	call   c0000898 <strcmp>
c0018c71:	83 c4 10             	add    esp,0x10
c0018c74:	85 c0                	test   eax,eax
c0018c76:	75 0f                	jne    c0018c87 <CPU::detectFeatures()+0x2ff>
c0018c78:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018c82:	e9 cc 00 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018c87:	50                   	push   eax
c0018c88:	50                   	push   eax
c0018c89:	68 1b b4 02 c0       	push   0xc002b41b
c0018c8e:	55                   	push   ebp
c0018c8f:	e8 04 7c fe ff       	call   c0000898 <strcmp>
c0018c94:	83 c4 10             	add    esp,0x10
c0018c97:	85 c0                	test   eax,eax
c0018c99:	75 0f                	jne    c0018caa <CPU::detectFeatures()+0x322>
c0018c9b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018ca5:	e9 a9 00 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018caa:	50                   	push   eax
c0018cab:	50                   	push   eax
c0018cac:	68 28 b4 02 c0       	push   0xc002b428
c0018cb1:	55                   	push   ebp
c0018cb2:	e8 e1 7b fe ff       	call   c0000898 <strcmp>
c0018cb7:	83 c4 10             	add    esp,0x10
c0018cba:	85 c0                	test   eax,eax
c0018cbc:	75 0f                	jne    c0018ccd <CPU::detectFeatures()+0x345>
c0018cbe:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018cc8:	e9 86 00 00 00       	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018ccd:	50                   	push   eax
c0018cce:	50                   	push   eax
c0018ccf:	68 35 b4 02 c0       	push   0xc002b435
c0018cd4:	55                   	push   ebp
c0018cd5:	e8 be 7b fe ff       	call   c0000898 <strcmp>
c0018cda:	83 c4 10             	add    esp,0x10
c0018cdd:	85 c0                	test   eax,eax
c0018cdf:	75 0c                	jne    c0018ced <CPU::detectFeatures()+0x365>
c0018ce1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018ceb:	eb 66                	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018ced:	50                   	push   eax
c0018cee:	50                   	push   eax
c0018cef:	68 42 b4 02 c0       	push   0xc002b442
c0018cf4:	55                   	push   ebp
c0018cf5:	e8 9e 7b fe ff       	call   c0000898 <strcmp>
c0018cfa:	83 c4 10             	add    esp,0x10
c0018cfd:	85 c0                	test   eax,eax
c0018cff:	75 0c                	jne    c0018d0d <CPU::detectFeatures()+0x385>
c0018d01:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018d0b:	eb 46                	jmp    c0018d53 <CPU::detectFeatures()+0x3cb>
c0018d0d:	57                   	push   edi
c0018d0e:	57                   	push   edi
c0018d0f:	68 4f b4 02 c0       	push   0xc002b44f
c0018d14:	55                   	push   ebp
c0018d15:	e8 7e 7b fe ff       	call   c0000898 <strcmp>
c0018d1a:	83 c4 10             	add    esp,0x10
c0018d1d:	85 c0                	test   eax,eax
c0018d1f:	74 e0                	je     c0018d01 <CPU::detectFeatures()+0x379>
c0018d21:	56                   	push   esi
c0018d22:	56                   	push   esi
c0018d23:	68 5c b4 02 c0       	push   0xc002b45c
c0018d28:	55                   	push   ebp
c0018d29:	e8 6a 7b fe ff       	call   c0000898 <strcmp>
c0018d2e:	83 c4 10             	add    esp,0x10
c0018d31:	85 c0                	test   eax,eax
c0018d33:	74 cc                	je     c0018d01 <CPU::detectFeatures()+0x379>
c0018d35:	51                   	push   ecx
c0018d36:	51                   	push   ecx
c0018d37:	68 69 b4 02 c0       	push   0xc002b469
c0018d3c:	55                   	push   ebp
c0018d3d:	e8 56 7b fe ff       	call   c0000898 <strcmp>
c0018d42:	83 c4 10             	add    esp,0x10
c0018d45:	85 c0                	test   eax,eax
c0018d47:	74 b8                	je     c0018d01 <CPU::detectFeatures()+0x379>
c0018d49:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018d53:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018d58:	0f 86 be 00 00 00    	jbe    c0018e1c <CPU::detectFeatures()+0x494>
c0018d5e:	83 ec 0c             	sub    esp,0xc
c0018d61:	68 80 00 00 00       	push   0x80
c0018d66:	e8 31 fb ff ff       	call   c001889c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d6b:	83 e0 01             	and    eax,0x1
c0018d6e:	c1 e0 06             	shl    eax,0x6
c0018d71:	88 c2                	mov    dl,al
c0018d73:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d79:	83 e0 bf             	and    eax,0xffffffbf
c0018d7c:	09 d0                	or     eax,edx
c0018d7e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d84:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018d8b:	e8 0c fb ff ff       	call   c001889c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d90:	83 e0 01             	and    eax,0x1
c0018d93:	c1 e0 04             	shl    eax,0x4
c0018d96:	88 c2                	mov    dl,al
c0018d98:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d9e:	83 e0 ef             	and    eax,0xffffffef
c0018da1:	09 d0                	or     eax,edx
c0018da3:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018da9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018db0:	e8 e7 fa ff ff       	call   c001889c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018db5:	c1 e0 07             	shl    eax,0x7
c0018db8:	88 c2                	mov    dl,al
c0018dba:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018dc0:	83 e0 7f             	and    eax,0x7f
c0018dc3:	09 d0                	or     eax,edx
c0018dc5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018dcb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018dd2:	e8 f3 fa ff ff       	call   c00188ca <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018dd7:	83 e0 01             	and    eax,0x1
c0018dda:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018de1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018de7:	83 e0 f7             	and    eax,0xfffffff7
c0018dea:	09 d0                	or     eax,edx
c0018dec:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018df2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018df9:	e8 cc fa ff ff       	call   c00188ca <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018dfe:	83 c4 10             	add    esp,0x10
c0018e01:	83 e0 01             	and    eax,0x1
c0018e04:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e0b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018e11:	83 e0 fb             	and    eax,0xfffffffb
c0018e14:	09 d0                	or     eax,edx
c0018e16:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e1c:	83 ec 0c             	sub    esp,0xc
c0018e1f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e23:	50                   	push   eax
c0018e24:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e28:	50                   	push   eax
c0018e29:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e2d:	56                   	push   esi
c0018e2e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e32:	50                   	push   eax
c0018e33:	6a 01                	push   0x1
c0018e35:	e8 82 f9 ff ff       	call   c00187bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e3a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018e3e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e44:	88 ca                	mov    dl,cl
c0018e46:	83 e0 f0             	and    eax,0xfffffff0
c0018e49:	83 e2 0f             	and    edx,0xf
c0018e4c:	09 d0                	or     eax,edx
c0018e4e:	88 ca                	mov    dl,cl
c0018e50:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018e56:	c0 ea 04             	shr    dl,0x4
c0018e59:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018e5d:	0f b6 c2             	movzx  eax,dl
c0018e60:	83 c4 20             	add    esp,0x20
c0018e63:	c1 e0 06             	shl    eax,0x6
c0018e66:	89 c7                	mov    edi,eax
c0018e68:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e6e:	66 25 3f c0          	and    ax,0xc03f
c0018e72:	09 f8                	or     eax,edi
c0018e74:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e7b:	89 c8                	mov    eax,ecx
c0018e7d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018e84:	c1 e8 08             	shr    eax,0x8
c0018e87:	83 e5 3f             	and    ebp,0x3f
c0018e8a:	83 e0 0f             	and    eax,0xf
c0018e8d:	89 c7                	mov    edi,eax
c0018e8f:	c1 e7 06             	shl    edi,0x6
c0018e92:	09 ef                	or     edi,ebp
c0018e94:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018e9b:	89 fa                	mov    edx,edi
c0018e9d:	83 e5 c0             	and    ebp,0xffffffc0
c0018ea0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018ea6:	88 c2                	mov    dl,al
c0018ea8:	c0 ea 02             	shr    dl,0x2
c0018eab:	89 d7                	mov    edi,edx
c0018ead:	09 ef                	or     edi,ebp
c0018eaf:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018eb5:	89 fa                	mov    edx,edi
c0018eb7:	83 e5 cf             	and    ebp,0xffffffcf
c0018eba:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018ec0:	89 cf                	mov    edi,ecx
c0018ec2:	c1 ef 0c             	shr    edi,0xc
c0018ec5:	83 e7 03             	and    edi,0x3
c0018ec8:	c1 e7 04             	shl    edi,0x4
c0018ecb:	09 ef                	or     edi,ebp
c0018ecd:	3c 06                	cmp    al,0x6
c0018ecf:	89 fa                	mov    edx,edi
c0018ed1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ed7:	74 04                	je     c0018edd <CPU::detectFeatures()+0x555>
c0018ed9:	3c 0f                	cmp    al,0xf
c0018edb:	75 5c                	jne    c0018f39 <CPU::detectFeatures()+0x5b1>
c0018edd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018ee1:	89 cf                	mov    edi,ecx
c0018ee3:	c1 ef 10             	shr    edi,0x10
c0018ee6:	c1 e7 04             	shl    edi,0x4
c0018ee9:	09 fa                	or     edx,edi
c0018eeb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018ef1:	0f b6 d2             	movzx  edx,dl
c0018ef4:	66 81 e7 3f c0       	and    di,0xc03f
c0018ef9:	c1 e2 06             	shl    edx,0x6
c0018efc:	09 fa                	or     edx,edi
c0018efe:	3c 0f                	cmp    al,0xf
c0018f00:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018f07:	75 30                	jne    c0018f39 <CPU::detectFeatures()+0x5b1>
c0018f09:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018f0f:	c1 e9 14             	shr    ecx,0x14
c0018f12:	83 e0 3f             	and    eax,0x3f
c0018f15:	83 c1 0f             	add    ecx,0xf
c0018f18:	88 ca                	mov    dl,cl
c0018f1a:	c0 e9 02             	shr    cl,0x2
c0018f1d:	c1 e2 06             	shl    edx,0x6
c0018f20:	09 d0                	or     eax,edx
c0018f22:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018f28:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018f2e:	83 e0 c0             	and    eax,0xffffffc0
c0018f31:	09 c1                	or     ecx,eax
c0018f33:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018f39:	83 ec 0c             	sub    esp,0xc
c0018f3c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018f43:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f47:	50                   	push   eax
c0018f48:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018f4c:	55                   	push   ebp
c0018f4d:	56                   	push   esi
c0018f4e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f52:	57                   	push   edi
c0018f53:	68 00 00 00 80       	push   0x80000000
c0018f58:	e8 5f f8 ff ff       	call   c00187bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f5d:	83 c4 20             	add    esp,0x20
c0018f60:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018f68:	76 22                	jbe    c0018f8c <CPU::detectFeatures()+0x604>
c0018f6a:	83 ec 0c             	sub    esp,0xc
c0018f6d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f71:	50                   	push   eax
c0018f72:	55                   	push   ebp
c0018f73:	56                   	push   esi
c0018f74:	57                   	push   edi
c0018f75:	68 01 00 00 80       	push   0x80000001
c0018f7a:	e8 3d f8 ff ff       	call   c00187bc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f7f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018f89:	83 c4 20             	add    esp,0x20
c0018f8c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018f92:	83 f8 01             	cmp    eax,0x1
c0018f95:	75 6f                	jne    c0019006 <CPU::detectFeatures()+0x67e>
c0018f97:	51                   	push   ecx
c0018f98:	51                   	push   ecx
c0018f99:	68 75 b4 02 c0       	push   0xc002b475
c0018f9e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018fa2:	56                   	push   esi
c0018fa3:	e8 64 78 fe ff       	call   c000080c <strcpy>
c0018fa8:	5f                   	pop    edi
c0018fa9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018faf:	5d                   	pop    ebp
c0018fb0:	66 c1 e8 06          	shr    ax,0x6
c0018fb4:	0f b6 c0             	movzx  eax,al
c0018fb7:	50                   	push   eax
c0018fb8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fbe:	c1 e8 0e             	shr    eax,0xe
c0018fc1:	0f b6 c0             	movzx  eax,al
c0018fc4:	50                   	push   eax
c0018fc5:	e8 9c f4 ff ff       	call   c0018466 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018fca:	5a                   	pop    edx
c0018fcb:	59                   	pop    ecx
c0018fcc:	50                   	push   eax
c0018fcd:	56                   	push   esi
c0018fce:	e8 79 79 fe ff       	call   c000094c <strcat>
c0018fd3:	5f                   	pop    edi
c0018fd4:	5d                   	pop    ebp
c0018fd5:	56                   	push   esi
c0018fd6:	53                   	push   ebx
c0018fd7:	e8 36 ad ff ff       	call   c0013d12 <Device::setName(char const*)>
c0018fdc:	58                   	pop    eax
c0018fdd:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018fe3:	5a                   	pop    edx
c0018fe4:	68 7c b4 02 c0       	push   0xc002b47c
c0018fe9:	50                   	push   eax
c0018fea:	e8 a9 78 fe ff       	call   c0000898 <strcmp>
c0018fef:	83 c4 10             	add    esp,0x10
c0018ff2:	85 c0                	test   eax,eax
c0018ff4:	0f 85 71 03 00 00    	jne    c001936b <CPU::detectFeatures()+0x9e3>
c0018ffa:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019001:	e9 65 03 00 00       	jmp    c001936b <CPU::detectFeatures()+0x9e3>
c0019006:	83 f8 02             	cmp    eax,0x2
c0019009:	0f 85 b5 00 00 00    	jne    c00190c4 <CPU::detectFeatures()+0x73c>
c001900f:	57                   	push   edi
c0019010:	57                   	push   edi
c0019011:	68 8e b4 02 c0       	push   0xc002b48e
c0019016:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001901a:	56                   	push   esi
c001901b:	e8 ec 77 fe ff       	call   c000080c <strcpy>
c0019020:	5d                   	pop    ebp
c0019021:	58                   	pop    eax
c0019022:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019028:	66 c1 e8 06          	shr    ax,0x6
c001902c:	0f b6 c0             	movzx  eax,al
c001902f:	50                   	push   eax
c0019030:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019036:	c1 e8 0e             	shr    eax,0xe
c0019039:	0f b6 c0             	movzx  eax,al
c001903c:	50                   	push   eax
c001903d:	e8 90 f2 ff ff       	call   c00182d2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019042:	5a                   	pop    edx
c0019043:	59                   	pop    ecx
c0019044:	50                   	push   eax
c0019045:	56                   	push   esi
c0019046:	e8 01 79 fe ff       	call   c000094c <strcat>
c001904b:	5f                   	pop    edi
c001904c:	5d                   	pop    ebp
c001904d:	56                   	push   esi
c001904e:	53                   	push   ebx
c001904f:	e8 be ac ff ff       	call   c0013d12 <Device::setName(char const*)>
c0019054:	58                   	pop    eax
c0019055:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001905b:	5a                   	pop    edx
c001905c:	68 93 b4 02 c0       	push   0xc002b493
c0019061:	50                   	push   eax
c0019062:	e8 31 78 fe ff       	call   c0000898 <strcmp>
c0019067:	83 c4 10             	add    esp,0x10
c001906a:	85 c0                	test   eax,eax
c001906c:	75 20                	jne    c001908e <CPU::detectFeatures()+0x706>
c001906e:	8b 15 c8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c8
c0019074:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001907a:	a8 01                	test   al,0x1
c001907c:	74 10                	je     c001908e <CPU::detectFeatures()+0x706>
c001907e:	83 e0 fe             	and    eax,0xfffffffe
c0019081:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019087:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001908e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019094:	c1 e8 0e             	shr    eax,0xe
c0019097:	3c 05                	cmp    al,0x5
c0019099:	0f 85 cc 02 00 00    	jne    c001936b <CPU::detectFeatures()+0x9e3>
c001909f:	56                   	push   esi
c00190a0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00190a6:	83 e0 0f             	and    eax,0xf
c00190a9:	50                   	push   eax
c00190aa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190b0:	66 c1 e8 06          	shr    ax,0x6
c00190b4:	0f b6 c0             	movzx  eax,al
c00190b7:	50                   	push   eax
c00190b8:	6a 05                	push   0x5
c00190ba:	e8 89 f6 ff ff       	call   c0018748 <CPU::AMD_K6_writeback(int, int, int)>
c00190bf:	e9 1f 02 00 00       	jmp    c00192e3 <CPU::detectFeatures()+0x95b>
c00190c4:	8d 50 fd             	lea    edx,[eax-0x3]
c00190c7:	83 fa 01             	cmp    edx,0x1
c00190ca:	76 09                	jbe    c00190d5 <CPU::detectFeatures()+0x74d>
c00190cc:	83 f8 06             	cmp    eax,0x6
c00190cf:	0f 85 91 01 00 00    	jne    c0019266 <CPU::detectFeatures()+0x8de>
c00190d5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190db:	c1 ea 0e             	shr    edx,0xe
c00190de:	80 fa 05             	cmp    dl,0x5
c00190e1:	75 7b                	jne    c001915e <CPU::detectFeatures()+0x7d6>
c00190e3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190e9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00190ee:	66 81 fa 00 01       	cmp    dx,0x100
c00190f3:	75 0c                	jne    c0019101 <CPU::detectFeatures()+0x779>
c00190f5:	51                   	push   ecx
c00190f6:	51                   	push   ecx
c00190f7:	68 9a b4 02 c0       	push   0xc002b49a
c00190fc:	e9 dc 01 00 00       	jmp    c00192dd <CPU::detectFeatures()+0x955>
c0019101:	66 81 fa 00 02       	cmp    dx,0x200
c0019106:	75 0c                	jne    c0019114 <CPU::detectFeatures()+0x78c>
c0019108:	52                   	push   edx
c0019109:	52                   	push   edx
c001910a:	68 ad b4 02 c0       	push   0xc002b4ad
c001910f:	e9 c9 01 00 00       	jmp    c00192dd <CPU::detectFeatures()+0x955>
c0019114:	66 81 fa 40 02       	cmp    dx,0x240
c0019119:	75 0c                	jne    c0019127 <CPU::detectFeatures()+0x79f>
c001911b:	50                   	push   eax
c001911c:	50                   	push   eax
c001911d:	68 bf b4 02 c0       	push   0xc002b4bf
c0019122:	e9 b6 01 00 00       	jmp    c00192dd <CPU::detectFeatures()+0x955>
c0019127:	83 f8 06             	cmp    eax,0x6
c001912a:	75 0c                	jne    c0019138 <CPU::detectFeatures()+0x7b0>
c001912c:	50                   	push   eax
c001912d:	50                   	push   eax
c001912e:	68 d1 b4 02 c0       	push   0xc002b4d1
c0019133:	e9 a5 01 00 00       	jmp    c00192dd <CPU::detectFeatures()+0x955>
c0019138:	83 f8 04             	cmp    eax,0x4
c001913b:	75 0c                	jne    c0019149 <CPU::detectFeatures()+0x7c1>
c001913d:	50                   	push   eax
c001913e:	50                   	push   eax
c001913f:	68 dd b4 02 c0       	push   0xc002b4dd
c0019144:	e9 94 01 00 00       	jmp    c00192dd <CPU::detectFeatures()+0x955>
c0019149:	83 f8 03             	cmp    eax,0x3
c001914c:	0f 85 19 02 00 00    	jne    c001936b <CPU::detectFeatures()+0x9e3>
c0019152:	50                   	push   eax
c0019153:	50                   	push   eax
c0019154:	68 e5 b4 02 c0       	push   0xc002b4e5
c0019159:	e9 7f 01 00 00       	jmp    c00192dd <CPU::detectFeatures()+0x955>
c001915e:	80 fa 06             	cmp    dl,0x6
c0019161:	0f 85 db 00 00 00    	jne    c0019242 <CPU::detectFeatures()+0x8ba>
c0019167:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001916d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019172:	66 81 fa 80 01       	cmp    dx,0x180
c0019177:	75 0c                	jne    c0019185 <CPU::detectFeatures()+0x7fd>
c0019179:	50                   	push   eax
c001917a:	50                   	push   eax
c001917b:	68 f0 b4 02 c0       	push   0xc002b4f0
c0019180:	e9 58 01 00 00       	jmp    c00192dd <CPU::detectFeatures()+0x955>
c0019185:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001918b:	66 f7 c1 80 ff       	test   cx,0xff80
c0019190:	75 0c                	jne    c001919e <CPU::detectFeatures()+0x816>
c0019192:	50                   	push   eax
c0019193:	50                   	push   eax
c0019194:	68 00 b5 02 c0       	push   0xc002b500
c0019199:	e9 3f 01 00 00       	jmp    c00192dd <CPU::detectFeatures()+0x955>
c001919e:	66 81 fa 40 02       	cmp    dx,0x240
c00191a3:	75 0c                	jne    c00191b1 <CPU::detectFeatures()+0x829>
c00191a5:	55                   	push   ebp
c00191a6:	55                   	push   ebp
c00191a7:	68 07 b5 02 c0       	push   0xc002b507
c00191ac:	e9 2c 01 00 00       	jmp    c00192dd <CPU::detectFeatures()+0x955>
c00191b1:	66 81 fa 80 02       	cmp    dx,0x280
c00191b6:	75 0c                	jne    c00191c4 <CPU::detectFeatures()+0x83c>
c00191b8:	57                   	push   edi
c00191b9:	57                   	push   edi
c00191ba:	68 10 b5 02 c0       	push   0xc002b510
c00191bf:	e9 19 01 00 00       	jmp    c00192dd <CPU::detectFeatures()+0x955>
c00191c4:	66 81 fa 40 03       	cmp    dx,0x340
c00191c9:	74 ed                	je     c00191b8 <CPU::detectFeatures()+0x830>
c00191cb:	66 81 fa c0 03       	cmp    dx,0x3c0
c00191d0:	75 0c                	jne    c00191de <CPU::detectFeatures()+0x856>
c00191d2:	56                   	push   esi
c00191d3:	56                   	push   esi
c00191d4:	68 17 b5 02 c0       	push   0xc002b517
c00191d9:	e9 ff 00 00 00       	jmp    c00192dd <CPU::detectFeatures()+0x955>
c00191de:	83 f8 06             	cmp    eax,0x6
c00191e1:	0f 84 45 ff ff ff    	je     c001912c <CPU::detectFeatures()+0x7a4>
c00191e7:	83 f8 04             	cmp    eax,0x4
c00191ea:	0f 84 4d ff ff ff    	je     c001913d <CPU::detectFeatures()+0x7b5>
c00191f0:	83 f8 03             	cmp    eax,0x3
c00191f3:	0f 85 72 01 00 00    	jne    c001936b <CPU::detectFeatures()+0x9e3>
c00191f9:	51                   	push   ecx
c00191fa:	51                   	push   ecx
c00191fb:	68 20 b5 02 c0       	push   0xc002b520
c0019200:	53                   	push   ebx
c0019201:	e8 0c ab ff ff       	call   c0013d12 <Device::setName(char const*)>
c0019206:	b1 c1                	mov    cl,0xc1
c0019208:	88 c8                	mov    al,cl
c001920a:	e6 22                	out    0x22,al
c001920c:	e4 23                	in     al,0x23
c001920e:	88 c2                	mov    dl,al
c0019210:	88 c8                	mov    al,cl
c0019212:	e6 22                	out    0x22,al
c0019214:	88 d0                	mov    al,dl
c0019216:	83 c8 10             	or     eax,0x10
c0019219:	e6 23                	out    0x23,al
c001921b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019222:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019225:	89 d0                	mov    eax,edx
c0019227:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001922d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019231:	40                   	inc    eax
c0019232:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019238:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001923d:	e9 a1 00 00 00       	jmp    c00192e3 <CPU::detectFeatures()+0x95b>
c0019242:	83 f8 06             	cmp    eax,0x6
c0019245:	0f 84 e1 fe ff ff    	je     c001912c <CPU::detectFeatures()+0x7a4>
c001924b:	83 f8 04             	cmp    eax,0x4
c001924e:	0f 84 e9 fe ff ff    	je     c001913d <CPU::detectFeatures()+0x7b5>
c0019254:	83 f8 03             	cmp    eax,0x3
c0019257:	0f 85 0e 01 00 00    	jne    c001936b <CPU::detectFeatures()+0x9e3>
c001925d:	52                   	push   edx
c001925e:	52                   	push   edx
c001925f:	68 2b b5 02 c0       	push   0xc002b52b
c0019264:	eb 77                	jmp    c00192dd <CPU::detectFeatures()+0x955>
c0019266:	83 f8 07             	cmp    eax,0x7
c0019269:	75 09                	jne    c0019274 <CPU::detectFeatures()+0x8ec>
c001926b:	50                   	push   eax
c001926c:	50                   	push   eax
c001926d:	68 35 b5 02 c0       	push   0xc002b535
c0019272:	eb 69                	jmp    c00192dd <CPU::detectFeatures()+0x955>
c0019274:	83 f8 0a             	cmp    eax,0xa
c0019277:	75 09                	jne    c0019282 <CPU::detectFeatures()+0x8fa>
c0019279:	50                   	push   eax
c001927a:	50                   	push   eax
c001927b:	68 40 b5 02 c0       	push   0xc002b540
c0019280:	eb 5b                	jmp    c00192dd <CPU::detectFeatures()+0x955>
c0019282:	83 f8 0b             	cmp    eax,0xb
c0019285:	75 09                	jne    c0019290 <CPU::detectFeatures()+0x908>
c0019287:	50                   	push   eax
c0019288:	50                   	push   eax
c0019289:	68 48 b5 02 c0       	push   0xc002b548
c001928e:	eb 4d                	jmp    c00192dd <CPU::detectFeatures()+0x955>
c0019290:	83 f8 08             	cmp    eax,0x8
c0019293:	75 09                	jne    c001929e <CPU::detectFeatures()+0x916>
c0019295:	50                   	push   eax
c0019296:	50                   	push   eax
c0019297:	68 51 b5 02 c0       	push   0xc002b551
c001929c:	eb 3f                	jmp    c00192dd <CPU::detectFeatures()+0x955>
c001929e:	83 f8 09             	cmp    eax,0x9
c00192a1:	75 09                	jne    c00192ac <CPU::detectFeatures()+0x924>
c00192a3:	50                   	push   eax
c00192a4:	50                   	push   eax
c00192a5:	68 59 b5 02 c0       	push   0xc002b559
c00192aa:	eb 31                	jmp    c00192dd <CPU::detectFeatures()+0x955>
c00192ac:	83 f8 05             	cmp    eax,0x5
c00192af:	75 09                	jne    c00192ba <CPU::detectFeatures()+0x932>
c00192b1:	50                   	push   eax
c00192b2:	50                   	push   eax
c00192b3:	68 61 b5 02 c0       	push   0xc002b561
c00192b8:	eb 23                	jmp    c00192dd <CPU::detectFeatures()+0x955>
c00192ba:	83 f8 0c             	cmp    eax,0xc
c00192bd:	75 09                	jne    c00192c8 <CPU::detectFeatures()+0x940>
c00192bf:	55                   	push   ebp
c00192c0:	55                   	push   ebp
c00192c1:	68 6f b5 02 c0       	push   0xc002b56f
c00192c6:	eb 15                	jmp    c00192dd <CPU::detectFeatures()+0x955>
c00192c8:	83 f8 0d             	cmp    eax,0xd
c00192cb:	75 09                	jne    c00192d6 <CPU::detectFeatures()+0x94e>
c00192cd:	57                   	push   edi
c00192ce:	57                   	push   edi
c00192cf:	68 7a b5 02 c0       	push   0xc002b57a
c00192d4:	eb 07                	jmp    c00192dd <CPU::detectFeatures()+0x955>
c00192d6:	56                   	push   esi
c00192d7:	56                   	push   esi
c00192d8:	68 8e b5 02 c0       	push   0xc002b58e
c00192dd:	53                   	push   ebx
c00192de:	e8 2f aa ff ff       	call   c0013d12 <Device::setName(char const*)>
c00192e3:	83 c4 10             	add    esp,0x10
c00192e6:	e9 80 00 00 00       	jmp    c001936b <CPU::detectFeatures()+0x9e3>
c00192eb:	51                   	push   ecx
c00192ec:	51                   	push   ecx
c00192ed:	68 da b3 02 c0       	push   0xc002b3da
c00192f2:	55                   	push   ebp
c00192f3:	e8 14 75 fe ff       	call   c000080c <strcpy>
c00192f8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019302:	e8 a7 6f fe ff       	call   c00002ae <is486>
c0019307:	83 c4 10             	add    esp,0x10
c001930a:	85 c0                	test   eax,eax
c001930c:	74 2b                	je     c0019339 <CPU::detectFeatures()+0x9b1>
c001930e:	52                   	push   edx
c001930f:	52                   	push   edx
c0019310:	68 9a b5 02 c0       	push   0xc002b59a
c0019315:	53                   	push   ebx
c0019316:	e8 f7 a9 ff ff       	call   c0013d12 <Device::setName(char const*)>
c001931b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019322:	0f 20 c0             	mov    eax,cr0
c0019325:	83 e0 14             	and    eax,0x14
c0019328:	83 c4 10             	add    esp,0x10
c001932b:	83 f8 04             	cmp    eax,0x4
c001932e:	75 1f                	jne    c001934f <CPU::detectFeatures()+0x9c7>
c0019330:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019337:	eb 32                	jmp    c001936b <CPU::detectFeatures()+0x9e3>
c0019339:	50                   	push   eax
c001933a:	50                   	push   eax
c001933b:	68 a5 b5 02 c0       	push   0xc002b5a5
c0019340:	53                   	push   ebx
c0019341:	e8 cc a9 ff ff       	call   c0013d12 <Device::setName(char const*)>
c0019346:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001934d:	eb d3                	jmp    c0019322 <CPU::detectFeatures()+0x99a>
c001934f:	e8 35 6f fe ff       	call   c0000289 <hasLegacyFPU>
c0019354:	83 e0 01             	and    eax,0x1
c0019357:	8d 14 00             	lea    edx,[eax+eax*1]
c001935a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019360:	83 e0 fd             	and    eax,0xfffffffd
c0019363:	09 d0                	or     eax,edx
c0019365:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001936b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019372:	83 c4 4c             	add    esp,0x4c
c0019375:	5b                   	pop    ebx
c0019376:	5e                   	pop    esi
c0019377:	5f                   	pop    edi
c0019378:	5d                   	pop    ebp
c0019379:	c3                   	ret    

c001937a <CPU::setupSMEP()>:
c001937a:	0f 20 e0             	mov    eax,cr4
c001937d:	0d 00 00 10 00       	or     eax,0x100000
c0019382:	0f 22 e0             	mov    cr4,eax
c0019385:	c3                   	ret    

c0019386 <CPU::setupUMIP()>:
c0019386:	0f 20 e0             	mov    eax,cr4
c0019389:	80 cc 08             	or     ah,0x8
c001938c:	0f 22 e0             	mov    cr4,eax
c001938f:	c3                   	ret    

c0019390 <CPU::setupTSC()>:
c0019390:	0f 20 e0             	mov    eax,cr4
c0019393:	83 c8 04             	or     eax,0x4
c0019396:	0f 22 e0             	mov    cr4,eax
c0019399:	c3                   	ret    

c001939a <CPU::setupLargePages()>:
c001939a:	0f 20 e0             	mov    eax,cr4
c001939d:	83 c8 10             	or     eax,0x10
c00193a0:	0f 22 e0             	mov    cr4,eax
c00193a3:	c3                   	ret    

c00193a4 <CPU::setupPAT()>:
c00193a4:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00193a9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00193b0:	74 2c                	je     c00193de <CPU::setupPAT()+0x3a>
c00193b2:	53                   	push   ebx
c00193b3:	83 ec 10             	sub    esp,0x10
c00193b6:	68 77 02 00 00       	push   0x277
c00193bb:	50                   	push   eax
c00193bc:	e8 7f 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00193c1:	83 e2 f8             	and    edx,0xfffffff8
c00193c4:	83 ca 01             	or     edx,0x1
c00193c7:	52                   	push   edx
c00193c8:	50                   	push   eax
c00193c9:	68 77 02 00 00       	push   0x277
c00193ce:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c00193d4:	e8 93 57 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00193d9:	83 c4 28             	add    esp,0x28
c00193dc:	5b                   	pop    ebx
c00193dd:	c3                   	ret    
c00193de:	c3                   	ret    
c00193df:	90                   	nop

c00193e0 <CPU::setupMTRR()>:
c00193e0:	c3                   	ret    
c00193e1:	90                   	nop

c00193e2 <CPU::setupGlobalPages()>:
c00193e2:	0f 20 e0             	mov    eax,cr4
c00193e5:	0c 80                	or     al,0x80
c00193e7:	0f 22 e0             	mov    cr4,eax
c00193ea:	c3                   	ret    
c00193eb:	90                   	nop

c00193ec <CPU::allowUsermodeDataAccess()>:
c00193ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193f0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193f7:	74 03                	je     c00193fc <CPU::allowUsermodeDataAccess()+0x10>
c00193f9:	0f 01 cb             	stac   
c00193fc:	c3                   	ret    
c00193fd:	90                   	nop

c00193fe <CPU::prohibitUsermodeDataAccess()>:
c00193fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019402:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019409:	74 03                	je     c001940e <CPU::prohibitUsermodeDataAccess()+0x10>
c001940b:	0f 01 ca             	clac   
c001940e:	c3                   	ret    
c001940f:	90                   	nop

c0019410 <CPU::setupSMAP()>:
c0019410:	0f 20 e0             	mov    eax,cr4
c0019413:	0d 00 00 20 00       	or     eax,0x200000
c0019418:	0f 22 e0             	mov    cr4,eax
c001941b:	eb e1                	jmp    c00193fe <CPU::prohibitUsermodeDataAccess()>
c001941d:	90                   	nop

c001941e <CPU::setupFeatures()>:
c001941e:	83 ec 0c             	sub    esp,0xc
c0019421:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019425:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001942c:	74 07                	je     c0019435 <CPU::setupFeatures()+0x17>
c001942e:	52                   	push   edx
c001942f:	e8 46 ff ff ff       	call   c001937a <CPU::setupSMEP()>
c0019434:	58                   	pop    eax
c0019435:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001943c:	74 07                	je     c0019445 <CPU::setupFeatures()+0x27>
c001943e:	52                   	push   edx
c001943f:	e8 cc ff ff ff       	call   c0019410 <CPU::setupSMAP()>
c0019444:	58                   	pop    eax
c0019445:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001944c:	74 07                	je     c0019455 <CPU::setupFeatures()+0x37>
c001944e:	52                   	push   edx
c001944f:	e8 32 ff ff ff       	call   c0019386 <CPU::setupUMIP()>
c0019454:	58                   	pop    eax
c0019455:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001945c:	74 07                	je     c0019465 <CPU::setupFeatures()+0x47>
c001945e:	52                   	push   edx
c001945f:	e8 2c ff ff ff       	call   c0019390 <CPU::setupTSC()>
c0019464:	58                   	pop    eax
c0019465:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001946c:	74 07                	je     c0019475 <CPU::setupFeatures()+0x57>
c001946e:	52                   	push   edx
c001946f:	e8 26 ff ff ff       	call   c001939a <CPU::setupLargePages()>
c0019474:	59                   	pop    ecx
c0019475:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001947c:	74 07                	je     c0019485 <CPU::setupFeatures()+0x67>
c001947e:	52                   	push   edx
c001947f:	e8 5e ff ff ff       	call   c00193e2 <CPU::setupGlobalPages()>
c0019484:	58                   	pop    eax
c0019485:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001948c:	74 0c                	je     c001949a <CPU::setupFeatures()+0x7c>
c001948e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019492:	83 c4 0c             	add    esp,0xc
c0019495:	e9 0a ff ff ff       	jmp    c00193a4 <CPU::setupPAT()>
c001949a:	83 c4 0c             	add    esp,0xc
c001949d:	c3                   	ret    

c001949e <CPU::open(int, int, void*)>:
c001949e:	57                   	push   edi
c001949f:	56                   	push   esi
c00194a0:	53                   	push   ebx
c00194a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00194a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00194a9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00194af:	83 ec 0c             	sub    esp,0xc
c00194b2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00194b8:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00194be:	50                   	push   eax
c00194bf:	e8 6a 59 ff ff       	call   c000ee2e <GDT::setup()>
c00194c4:	83 c4 0c             	add    esp,0xc
c00194c7:	6a 00                	push   0x0
c00194c9:	68 ef be ad de       	push   0xdeadbeef
c00194ce:	57                   	push   edi
c00194cf:	e8 d2 76 ff ff       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c00194d4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00194d7:	e8 aa 76 ff ff       	call   c0010b86 <TSS::flush()>
c00194dc:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00194e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00194e5:	e8 a8 5b ff ff       	call   c000f092 <IDT::setup()>
c00194ea:	b8 00 04 00 00       	mov    eax,0x400
c00194ef:	0f 23 f8             	mov    db7,eax
c00194f2:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00194fc:	e8 94 64 ff ff       	call   c000f995 <Phys::allocatePage()>
c0019501:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019507:	89 30                	mov    DWORD PTR [eax],esi
c0019509:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001950f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019512:	58                   	pop    eax
c0019513:	5a                   	pop    edx
c0019514:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001951a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001951e:	e8 93 87 ff ff       	call   c0011cb6 <VAS::setCPUSpecific(unsigned long)>
c0019523:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019526:	e8 5d f4 ff ff       	call   c0018988 <CPU::detectFeatures()>
c001952b:	e8 35 bc ff ff       	call   c0015165 <setupInterruptController()>
c0019530:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019536:	a1 e0 d9 02 c0       	mov    eax,ds:0xc002d9e0
c001953b:	83 e0 10             	and    eax,0x10
c001953e:	83 f8 01             	cmp    eax,0x1
c0019541:	19 c0                	sbb    eax,eax
c0019543:	83 e0 46             	and    eax,0x46
c0019546:	83 c0 1e             	add    eax,0x1e
c0019549:	89 04 24             	mov    DWORD PTR [esp],eax
c001954c:	e8 02 d2 ff ff       	call   c0016753 <setupTimer(int)>
c0019551:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019557:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001955a:	e8 bf fe ff ff       	call   c001941e <CPU::setupFeatures()>
c001955f:	83 c4 10             	add    esp,0x10
c0019562:	31 c0                	xor    eax,eax
c0019564:	5b                   	pop    ebx
c0019565:	5e                   	pop    esi
c0019566:	5f                   	pop    edi
c0019567:	c3                   	ret    

c0019568 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019568:	57                   	push   edi
c0019569:	56                   	push   esi
c001956a:	53                   	push   ebx
c001956b:	51                   	push   ecx
c001956c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019570:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019573:	0f 02 c0             	lar    eax,ax
c0019576:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019579:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001957d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019580:	88 ca                	mov    dl,cl
c0019582:	c0 ea 06             	shr    dl,0x6
c0019585:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019589:	89 ca                	mov    edx,ecx
c001958b:	66 c1 ea 03          	shr    dx,0x3
c001958f:	83 e2 07             	and    edx,0x7
c0019592:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019597:	88 17                	mov    BYTE PTR [edi],dl
c0019599:	0f 84 a6 01 00 00    	je     c0019745 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001959f:	83 e1 07             	and    ecx,0x7
c00195a2:	80 f9 04             	cmp    cl,0x4
c00195a5:	0f 84 98 00 00 00    	je     c0019643 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00195ab:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00195b0:	0f 95 c0             	setne  al
c00195b3:	80 f9 05             	cmp    cl,0x5
c00195b6:	0f 95 c2             	setne  dl
c00195b9:	08 c2                	or     dl,al
c00195bb:	74 79                	je     c0019636 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00195bd:	84 c9                	test   cl,cl
c00195bf:	75 05                	jne    c00195c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00195c1:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00195c4:	eb 3c                	jmp    c0019602 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195c6:	80 f9 01             	cmp    cl,0x1
c00195c9:	75 05                	jne    c00195d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00195cb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00195ce:	eb 32                	jmp    c0019602 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195d0:	80 f9 02             	cmp    cl,0x2
c00195d3:	75 05                	jne    c00195da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00195d5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195d8:	eb 28                	jmp    c0019602 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195da:	31 c0                	xor    eax,eax
c00195dc:	80 f9 03             	cmp    cl,0x3
c00195df:	75 05                	jne    c00195e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00195e1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195e4:	eb 1c                	jmp    c0019602 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195e6:	80 f9 05             	cmp    cl,0x5
c00195e9:	75 05                	jne    c00195f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00195eb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195ee:	eb 12                	jmp    c0019602 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195f0:	80 f9 06             	cmp    cl,0x6
c00195f3:	75 05                	jne    c00195fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00195f5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00195f8:	eb 08                	jmp    c0019602 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195fa:	80 f9 07             	cmp    cl,0x7
c00195fd:	75 03                	jne    c0019602 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195ff:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019602:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019607:	75 10                	jne    c0019619 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019609:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001960d:	b9 03 00 00 00       	mov    ecx,0x3
c0019612:	01 d0                	add    eax,edx
c0019614:	e9 37 01 00 00       	jmp    c0019750 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019619:	b9 02 00 00 00       	mov    ecx,0x2
c001961e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019623:	0f 85 27 01 00 00    	jne    c0019750 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019629:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001962c:	b9 06 00 00 00       	mov    ecx,0x6
c0019631:	e9 1a 01 00 00       	jmp    c0019750 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019636:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019639:	b9 06 00 00 00       	mov    ecx,0x6
c001963e:	e9 0f 01 00 00       	jmp    c0019752 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019643:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019646:	88 ca                	mov    dl,cl
c0019648:	c0 ea 06             	shr    dl,0x6
c001964b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001964f:	89 ca                	mov    edx,ecx
c0019651:	66 c1 ea 03          	shr    dx,0x3
c0019655:	83 e2 07             	and    edx,0x7
c0019658:	80 e1 07             	and    cl,0x7
c001965b:	75 05                	jne    c0019662 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001965d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019660:	eb 4c                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019662:	80 f9 01             	cmp    cl,0x1
c0019665:	75 05                	jne    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019667:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001966a:	eb 42                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001966c:	80 f9 02             	cmp    cl,0x2
c001966f:	75 05                	jne    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019671:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019674:	eb 38                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019676:	80 f9 03             	cmp    cl,0x3
c0019679:	75 05                	jne    c0019680 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001967b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001967e:	eb 2e                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019680:	80 f9 04             	cmp    cl,0x4
c0019683:	75 12                	jne    c0019697 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019685:	f6 c4 60             	test   ah,0x60
c0019688:	75 08                	jne    c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001968a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001968d:	8d 78 14             	lea    edi,[eax+0x14]
c0019690:	eb 1c                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019692:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019695:	eb 17                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019697:	80 f9 05             	cmp    cl,0x5
c001969a:	75 05                	jne    c00196a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001969c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001969f:	eb 0d                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196a1:	80 f9 06             	cmp    cl,0x6
c00196a4:	75 05                	jne    c00196ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00196a6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00196a9:	eb 03                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196ab:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00196ae:	84 d2                	test   dl,dl
c00196b0:	75 05                	jne    c00196b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00196b2:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00196b5:	eb 3c                	jmp    c00196f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196b7:	80 fa 01             	cmp    dl,0x1
c00196ba:	75 05                	jne    c00196c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00196bc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00196bf:	eb 32                	jmp    c00196f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196c1:	80 fa 02             	cmp    dl,0x2
c00196c4:	75 05                	jne    c00196cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00196c6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00196c9:	eb 28                	jmp    c00196f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196cb:	80 fa 03             	cmp    dl,0x3
c00196ce:	75 05                	jne    c00196d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00196d0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00196d3:	eb 1e                	jmp    c00196f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196d5:	31 c0                	xor    eax,eax
c00196d7:	80 fa 04             	cmp    dl,0x4
c00196da:	74 17                	je     c00196f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196dc:	80 fa 05             	cmp    dl,0x5
c00196df:	75 05                	jne    c00196e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00196e1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00196e4:	eb 0d                	jmp    c00196f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196e6:	80 fa 06             	cmp    dl,0x6
c00196e9:	75 05                	jne    c00196f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00196eb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00196ee:	eb 03                	jmp    c00196f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196f0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00196f3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196f8:	0f 94 c2             	sete   dl
c00196fb:	80 f9 05             	cmp    cl,0x5
c00196fe:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019702:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019707:	d3 e0                	shl    eax,cl
c0019709:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001970d:	74 0a                	je     c0019719 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001970f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019712:	b9 07 00 00 00       	mov    ecx,0x7
c0019717:	eb 37                	jmp    c0019750 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019719:	01 f8                	add    eax,edi
c001971b:	b9 03 00 00 00       	mov    ecx,0x3
c0019720:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019725:	74 2b                	je     c0019752 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019727:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001972c:	75 0d                	jne    c001973b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001972e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019732:	01 c8                	add    eax,ecx
c0019734:	b9 04 00 00 00       	mov    ecx,0x4
c0019739:	eb 17                	jmp    c0019752 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001973b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001973e:	b9 07 00 00 00       	mov    ecx,0x7
c0019743:	eb 0d                	jmp    c0019752 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019745:	b9 02 00 00 00       	mov    ecx,0x2
c001974a:	b2 01                	mov    dl,0x1
c001974c:	31 c0                	xor    eax,eax
c001974e:	eb 02                	jmp    c0019752 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019750:	31 d2                	xor    edx,edx
c0019752:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019756:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019758:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001975c:	88 11                	mov    BYTE PTR [ecx],dl
c001975e:	5a                   	pop    edx
c001975f:	5b                   	pop    ebx
c0019760:	5e                   	pop    esi
c0019761:	5f                   	pop    edi
c0019762:	c3                   	ret    

c0019763 <Krnl::smpEntry()>:
c0019763:	eb fe                	jmp    c0019763 <Krnl::smpEntry()>

c0019765 <Krnl::startCPU(int)>:
c0019765:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001976a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019771:	0f 84 36 01 00 00    	je     c00198ad <Krnl::startCPU(int)+0x148>
c0019777:	53                   	push   ebx
c0019778:	83 ec 10             	sub    esp,0x10
c001977b:	fa                   	cli    
c001977c:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c0019782:	6a 1b                	push   0x1b
c0019784:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c001978a:	e8 b1 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001978f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019794:	89 c3                	mov    ebx,eax
c0019796:	58                   	pop    eax
c0019797:	5a                   	pop    edx
c0019798:	53                   	push   ebx
c0019799:	68 dc b5 02 c0       	push   0xc002b5dc
c001979e:	e8 40 8f ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00197a3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197b1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197bb:	c1 e0 18             	shl    eax,0x18
c00197be:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00197c4:	83 c4 10             	add    esp,0x10
c00197c7:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00197cd:	09 c2                	or     edx,eax
c00197cf:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00197d5:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00197db:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197e1:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197e7:	80 cd c5             	or     ch,0xc5
c00197ea:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197f0:	f3 90                	pause  
c00197f2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197f4:	0f ba e1 0c          	bt     ecx,0xc
c00197f8:	72 f6                	jb     c00197f0 <Krnl::startCPU(int)+0x8b>
c00197fa:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019800:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019806:	09 c1                	or     ecx,eax
c0019808:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001980e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019814:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001981a:	80 cd 85             	or     ch,0x85
c001981d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019823:	f3 90                	pause  
c0019825:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019827:	0f ba e1 0c          	bt     ecx,0xc
c001982b:	72 f6                	jb     c0019823 <Krnl::startCPU(int)+0xbe>
c001982d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019837:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001983d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019843:	09 c1                	or     ecx,eax
c0019845:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001984b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019851:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019857:	81 c9 02 06 00 00    	or     ecx,0x602
c001985d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019863:	f3 90                	pause  
c0019865:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019867:	0f ba e1 0c          	bt     ecx,0xc
c001986b:	72 f6                	jb     c0019863 <Krnl::startCPU(int)+0xfe>
c001986d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019877:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001987d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019883:	09 c8                	or     eax,ecx
c0019885:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001988b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019891:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019896:	0d 02 06 00 00       	or     eax,0x602
c001989b:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00198a1:	f3 90                	pause  
c00198a3:	8b 02                	mov    eax,DWORD PTR [edx]
c00198a5:	0f ba e0 0c          	bt     eax,0xc
c00198a9:	72 f6                	jb     c00198a1 <Krnl::startCPU(int)+0x13c>
c00198ab:	eb fe                	jmp    c00198ab <Krnl::startCPU(int)+0x146>
c00198ad:	c3                   	ret    

c00198ae <Krnl::startCPUs()>:
c00198ae:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00198b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00198b9:	88 c2                	mov    dl,al
c00198bb:	83 e2 0a             	and    edx,0xa
c00198be:	80 fa 0a             	cmp    dl,0xa
c00198c1:	75 09                	jne    c00198cc <Krnl::startCPUs()+0x1e>
c00198c3:	a8 01                	test   al,0x1
c00198c5:	74 05                	je     c00198cc <Krnl::startCPUs()+0x1e>
c00198c7:	e9 cf 68 fe ff       	jmp    c000019b <prepareTramp>
c00198cc:	c3                   	ret    
c00198cd:	90                   	nop

c00198ce <EnvVarContainer::getEnv(char const*)>:
c00198ce:	57                   	push   edi
c00198cf:	56                   	push   esi
c00198d0:	53                   	push   ebx
c00198d1:	31 db                	xor    ebx,ebx
c00198d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198d7:	39 1e                	cmp    DWORD PTR [esi],ebx
c00198d9:	7e 2b                	jle    c0019906 <EnvVarContainer::getEnv(char const*)+0x38>
c00198db:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00198e2:	50                   	push   eax
c00198e3:	50                   	push   eax
c00198e4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00198ee:	e8 a5 6f fe ff       	call   c0000898 <strcmp>
c00198f3:	83 c4 10             	add    esp,0x10
c00198f6:	85 c0                	test   eax,eax
c00198f8:	75 09                	jne    c0019903 <EnvVarContainer::getEnv(char const*)+0x35>
c00198fa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198fd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019901:	eb 05                	jmp    c0019908 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019903:	43                   	inc    ebx
c0019904:	eb d1                	jmp    c00198d7 <EnvVarContainer::getEnv(char const*)+0x9>
c0019906:	31 c0                	xor    eax,eax
c0019908:	5b                   	pop    ebx
c0019909:	5e                   	pop    esi
c001990a:	5f                   	pop    edi
c001990b:	c3                   	ret    

c001990c <EnvVarContainer::setEnv(char const*, char const*)>:
c001990c:	55                   	push   ebp
c001990d:	57                   	push   edi
c001990e:	56                   	push   esi
c001990f:	53                   	push   ebx
c0019910:	83 ec 28             	sub    esp,0x28
c0019913:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019917:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001991b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001991f:	56                   	push   esi
c0019920:	e8 47 6e fe ff       	call   c000076c <strlen>
c0019925:	40                   	inc    eax
c0019926:	89 04 24             	mov    DWORD PTR [esp],eax
c0019929:	e8 6b 5c ff ff       	call   c000f599 <malloc>
c001992e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019931:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019935:	e8 32 6e fe ff       	call   c000076c <strlen>
c001993a:	40                   	inc    eax
c001993b:	89 04 24             	mov    DWORD PTR [esp],eax
c001993e:	e8 56 5c ff ff       	call   c000f599 <malloc>
c0019943:	89 34 24             	mov    DWORD PTR [esp],esi
c0019946:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001994a:	e8 1d 6e fe ff       	call   c000076c <strlen>
c001994f:	83 c4 0c             	add    esp,0xc
c0019952:	40                   	inc    eax
c0019953:	50                   	push   eax
c0019954:	6a 00                	push   0x0
c0019956:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001995a:	e8 f1 6d fe ff       	call   c0000750 <memset>
c001995f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019962:	e8 05 6e fe ff       	call   c000076c <strlen>
c0019967:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001996b:	8d 48 01             	lea    ecx,[eax+0x1]
c001996e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019970:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019973:	89 de                	mov    esi,ebx
c0019975:	e8 f2 6d fe ff       	call   c000076c <strlen>
c001997a:	83 c4 0c             	add    esp,0xc
c001997d:	40                   	inc    eax
c001997e:	50                   	push   eax
c001997f:	6a 00                	push   0x0
c0019981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019985:	e8 c6 6d fe ff       	call   c0000750 <memset>
c001998a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001998d:	e8 da 6d fe ff       	call   c000076c <strlen>
c0019992:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019996:	8d 48 01             	lea    ecx,[eax+0x1]
c0019999:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001999b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001999e:	40                   	inc    eax
c001999f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00199a2:	c1 e0 03             	shl    eax,0x3
c00199a5:	5a                   	pop    edx
c00199a6:	59                   	pop    ecx
c00199a7:	50                   	push   eax
c00199a8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00199ab:	e8 d5 5b ff ff       	call   c000f585 <realloc>
c00199b0:	8d 74 24 18          	lea    esi,[esp+0x18]
c00199b4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00199b7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00199ba:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00199be:	b9 08 00 00 00       	mov    ecx,0x8
c00199c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199c5:	83 c4 2c             	add    esp,0x2c
c00199c8:	5b                   	pop    ebx
c00199c9:	5e                   	pop    esi
c00199ca:	5f                   	pop    edi
c00199cb:	5d                   	pop    ebp
c00199cc:	c3                   	ret    
c00199cd:	90                   	nop

c00199ce <EnvVarContainer::deleteEnv(char const*)>:
c00199ce:	c3                   	ret    
c00199cf:	90                   	nop

c00199d0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00199d0:	55                   	push   ebp
c00199d1:	57                   	push   edi
c00199d2:	56                   	push   esi
c00199d3:	53                   	push   ebx
c00199d4:	81 ec 38 01 00 00    	sub    esp,0x138
c00199da:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00199e1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00199e8:	68 14 01 00 00       	push   0x114
c00199ed:	e8 a7 5b ff ff       	call   c000f599 <malloc>
c00199f2:	83 c4 0c             	add    esp,0xc
c00199f5:	89 c3                	mov    ebx,eax
c00199f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00199fa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019a01:	50                   	push   eax
c0019a02:	e8 3b 92 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c0019a07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a0a:	e8 05 95 ff ff       	call   c0012f14 <File::exists()>
c0019a0f:	83 c4 10             	add    esp,0x10
c0019a12:	84 c0                	test   al,al
c0019a14:	75 31                	jne    c0019a47 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019a16:	50                   	push   eax
c0019a17:	50                   	push   eax
c0019a18:	6a 12                	push   0x12
c0019a1a:	53                   	push   ebx
c0019a1b:	e8 86 92 ff ff       	call   c0012ca6 <File::open(FileOpenMode)>
c0019a20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a22:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019a25:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a28:	e8 3f 6d fe ff       	call   c000076c <strlen>
c0019a2d:	5a                   	pop    edx
c0019a2e:	31 d2                	xor    edx,edx
c0019a30:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a34:	51                   	push   ecx
c0019a35:	56                   	push   esi
c0019a36:	52                   	push   edx
c0019a37:	50                   	push   eax
c0019a38:	53                   	push   ebx
c0019a39:	ff d7                	call   edi
c0019a3b:	83 c4 14             	add    esp,0x14
c0019a3e:	53                   	push   ebx
c0019a3f:	e8 c0 92 ff ff       	call   c0012d04 <File::close()>
c0019a44:	83 c4 10             	add    esp,0x10
c0019a47:	56                   	push   esi
c0019a48:	31 f6                	xor    esi,esi
c0019a4a:	68 00 01 00 00       	push   0x100
c0019a4f:	6a 00                	push   0x0
c0019a51:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a55:	50                   	push   eax
c0019a56:	e8 f5 6c fe ff       	call   c0000750 <memset>
c0019a5b:	5f                   	pop    edi
c0019a5c:	58                   	pop    eax
c0019a5d:	6a 01                	push   0x1
c0019a5f:	53                   	push   ebx
c0019a60:	e8 41 92 ff ff       	call   c0012ca6 <File::open(FileOpenMode)>
c0019a65:	83 c4 10             	add    esp,0x10
c0019a68:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a70:	83 ec 0c             	sub    esp,0xc
c0019a73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a75:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a79:	51                   	push   ecx
c0019a7a:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a7e:	52                   	push   edx
c0019a7f:	6a 00                	push   0x0
c0019a81:	6a 01                	push   0x1
c0019a83:	53                   	push   ebx
c0019a84:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a87:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a8b:	83 c4 20             	add    esp,0x20
c0019a8e:	3c 0d                	cmp    al,0xd
c0019a90:	0f 84 09 01 00 00    	je     c0019b9f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a96:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a9b:	0f 84 ef 00 00 00    	je     c0019b90 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019aa1:	3c 0a                	cmp    al,0xa
c0019aa3:	74 13                	je     c0019ab8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019aa5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019aaa:	74 0c                	je     c0019ab8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019aac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019ab2:	0f 8e d8 00 00 00    	jle    c0019b90 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019ab8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019abc:	83 ec 0c             	sub    esp,0xc
c0019abf:	8d 78 01             	lea    edi,[eax+0x1]
c0019ac2:	57                   	push   edi
c0019ac3:	e8 d1 5a ff ff       	call   c000f599 <malloc>
c0019ac8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019acc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019ad0:	8d 56 04             	lea    edx,[esi+0x4]
c0019ad3:	89 14 24             	mov    DWORD PTR [esp],edx
c0019ad6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019ada:	e8 ba 5a ff ff       	call   c000f599 <malloc>
c0019adf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019ae3:	83 c4 0c             	add    esp,0xc
c0019ae6:	57                   	push   edi
c0019ae7:	6a 00                	push   0x0
c0019ae9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019aed:	e8 5e 6c fe ff       	call   c0000750 <memset>
c0019af2:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019af6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019afa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019afe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b00:	83 c4 0c             	add    esp,0xc
c0019b03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b07:	52                   	push   edx
c0019b08:	6a 00                	push   0x0
c0019b0a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b0e:	e8 3d 6c fe ff       	call   c0000750 <memset>
c0019b13:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019b17:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019b1b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b1e:	e8 49 6c fe ff       	call   c000076c <strlen>
c0019b23:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019b27:	89 c1                	mov    ecx,eax
c0019b29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b2b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b2e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019b31:	40                   	inc    eax
c0019b32:	83 c4 10             	add    esp,0x10
c0019b35:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b38:	85 d2                	test   edx,edx
c0019b3a:	75 0c                	jne    c0019b48 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019b3c:	83 ec 0c             	sub    esp,0xc
c0019b3f:	6a 08                	push   0x8
c0019b41:	e8 53 5a ff ff       	call   c000f599 <malloc>
c0019b46:	eb 0c                	jmp    c0019b54 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019b48:	c1 e0 03             	shl    eax,0x3
c0019b4b:	51                   	push   ecx
c0019b4c:	51                   	push   ecx
c0019b4d:	50                   	push   eax
c0019b4e:	52                   	push   edx
c0019b4f:	e8 31 5a ff ff       	call   c000f585 <realloc>
c0019b54:	83 c4 10             	add    esp,0x10
c0019b57:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b5a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b5d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019b60:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b64:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019b68:	b9 08 00 00 00       	mov    ecx,0x8
c0019b6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b6f:	31 f6                	xor    esi,esi
c0019b71:	50                   	push   eax
c0019b72:	68 00 01 00 00       	push   0x100
c0019b77:	6a 00                	push   0x0
c0019b79:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b7d:	50                   	push   eax
c0019b7e:	e8 cd 6b fe ff       	call   c0000750 <memset>
c0019b83:	83 c4 10             	add    esp,0x10
c0019b86:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b8e:	eb 0f                	jmp    c0019b9f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b90:	3c 3d                	cmp    al,0x3d
c0019b92:	74 07                	je     c0019b9b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019b94:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019b98:	46                   	inc    esi
c0019b99:	eb 04                	jmp    c0019b9f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b9b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019b9f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019ba4:	0f 85 c6 fe ff ff    	jne    c0019a70 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019baa:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019bb0:	5b                   	pop    ebx
c0019bb1:	5e                   	pop    esi
c0019bb2:	5f                   	pop    edi
c0019bb3:	5d                   	pop    ebp
c0019bb4:	c3                   	ret    
c0019bb5:	90                   	nop

c0019bb6 <EnvVarContainer::__loadSystem()>:
c0019bb6:	83 ec 10             	sub    esp,0x10
c0019bb9:	68 00 cf 02 c0       	push   0xc002cf00
c0019bbe:	68 ed b5 02 c0       	push   0xc002b5ed
c0019bc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bc7:	e8 04 fe ff ff       	call   c00199d0 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019bcc:	83 c4 1c             	add    esp,0x1c
c0019bcf:	c3                   	ret    

c0019bd0 <EnvVarContainer::__loadUser()>:
c0019bd0:	c3                   	ret    
c0019bd1:	90                   	nop

c0019bd2 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019bd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bd6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019be4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019be7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019beb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bf2:	90                   	nop
c0019bf3:	c3                   	ret    

c0019bf4 <EnvVarContainer::~EnvVarContainer()>:
c0019bf4:	83 ec 0c             	sub    esp,0xc
c0019bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bfe:	85 c0                	test   eax,eax
c0019c00:	74 1d                	je     c0019c1f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c06:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c08:	85 c0                	test   eax,eax
c0019c0a:	74 13                	je     c0019c1f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019c13:	83 ec 0c             	sub    esp,0xc
c0019c16:	50                   	push   eax
c0019c17:	e8 8d 59 ff ff       	call   c000f5a9 <free>
c0019c1c:	83 c4 10             	add    esp,0x10
c0019c1f:	90                   	nop
c0019c20:	83 c4 0c             	add    esp,0xc
c0019c23:	c3                   	ret    

c0019c24 <Krnl::getEnv(Process*, char const*)>:
c0019c24:	53                   	push   ebx
c0019c25:	83 ec 08             	sub    esp,0x8
c0019c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c30:	39 05 10 0f 03 c0    	cmp    DWORD PTR ds:0xc0030f10,eax
c0019c36:	74 04                	je     c0019c3c <Krnl::getEnv(Process*, char const*)+0x18>
c0019c38:	85 c0                	test   eax,eax
c0019c3a:	75 0b                	jne    c0019c47 <Krnl::getEnv(Process*, char const*)+0x23>
c0019c3c:	a1 f4 04 03 c0       	mov    eax,ds:0xc00304f4
c0019c41:	85 c0                	test   eax,eax
c0019c43:	75 19                	jne    c0019c5e <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c45:	eb 27                	jmp    c0019c6e <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c47:	52                   	push   edx
c0019c48:	52                   	push   edx
c0019c49:	53                   	push   ebx
c0019c4a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c50:	e8 79 fc ff ff       	call   c00198ce <EnvVarContainer::getEnv(char const*)>
c0019c55:	83 c4 10             	add    esp,0x10
c0019c58:	85 c0                	test   eax,eax
c0019c5a:	75 28                	jne    c0019c84 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c5c:	eb de                	jmp    c0019c3c <Krnl::getEnv(Process*, char const*)+0x18>
c0019c5e:	52                   	push   edx
c0019c5f:	52                   	push   edx
c0019c60:	53                   	push   ebx
c0019c61:	50                   	push   eax
c0019c62:	e8 67 fc ff ff       	call   c00198ce <EnvVarContainer::getEnv(char const*)>
c0019c67:	83 c4 10             	add    esp,0x10
c0019c6a:	85 c0                	test   eax,eax
c0019c6c:	75 16                	jne    c0019c84 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c6e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c72:	a1 f8 04 03 c0       	mov    eax,ds:0xc00304f8
c0019c77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c7b:	83 c4 08             	add    esp,0x8
c0019c7e:	5b                   	pop    ebx
c0019c7f:	e9 4a fc ff ff       	jmp    c00198ce <EnvVarContainer::getEnv(char const*)>
c0019c84:	83 c4 08             	add    esp,0x8
c0019c87:	5b                   	pop    ebx
c0019c88:	c3                   	ret    

c0019c89 <Krnl::setEnvSystem(char const*, char const*)>:
c0019c89:	83 ec 10             	sub    esp,0x10
c0019c8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c94:	ff 35 f8 04 03 c0    	push   DWORD PTR ds:0xc00304f8
c0019c9a:	e8 6d fc ff ff       	call   c001990c <EnvVarContainer::setEnv(char const*, char const*)>
c0019c9f:	83 c4 1c             	add    esp,0x1c
c0019ca2:	c3                   	ret    

c0019ca3 <Krnl::setEnvUser(char const*, char const*)>:
c0019ca3:	a1 f4 04 03 c0       	mov    eax,ds:0xc00304f4
c0019ca8:	85 c0                	test   eax,eax
c0019caa:	74 15                	je     c0019cc1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019cac:	83 ec 10             	sub    esp,0x10
c0019caf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cb3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cb7:	50                   	push   eax
c0019cb8:	e8 4f fc ff ff       	call   c001990c <EnvVarContainer::setEnv(char const*, char const*)>
c0019cbd:	83 c4 1c             	add    esp,0x1c
c0019cc0:	c3                   	ret    
c0019cc1:	c3                   	ret    

c0019cc2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019cc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cc6:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019ccc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019cd0:	e9 37 fc ff ff       	jmp    c001990c <EnvVarContainer::setEnv(char const*, char const*)>

c0019cd5 <Krnl::deleteEnvSystem(char const*)>:
c0019cd5:	c3                   	ret    

c0019cd6 <Krnl::deleteEnvUser(char const*)>:
c0019cd6:	c3                   	ret    

c0019cd7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019cd7:	c3                   	ret    

c0019cd8 <Krnl::newProcessEnv(Process*)>:
c0019cd8:	83 ec 28             	sub    esp,0x28
c0019cdb:	6a 0c                	push   0xc
c0019cdd:	e8 b7 58 ff ff       	call   c000f599 <malloc>
c0019ce2:	5a                   	pop    edx
c0019ce3:	59                   	pop    ecx
c0019ce4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ce8:	50                   	push   eax
c0019ce9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ced:	e8 e0 fe ff ff       	call   c0019bd2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019cf2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cf6:	83 c4 2c             	add    esp,0x2c
c0019cf9:	c3                   	ret    

c0019cfa <Krnl::copyProcessEnv(Process*, Process*)>:
c0019cfa:	57                   	push   edi
c0019cfb:	56                   	push   esi
c0019cfc:	53                   	push   ebx
c0019cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d01:	83 ec 0c             	sub    esp,0xc
c0019d04:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019d0a:	6a 0c                	push   0xc
c0019d0c:	e8 88 58 ff ff       	call   c000f599 <malloc>
c0019d11:	89 c3                	mov    ebx,eax
c0019d13:	58                   	pop    eax
c0019d14:	5a                   	pop    edx
c0019d15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d19:	53                   	push   ebx
c0019d1a:	e8 b3 fe ff ff       	call   c0019bd2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d1f:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d21:	89 03                	mov    DWORD PTR [ebx],eax
c0019d23:	c1 e0 03             	shl    eax,0x3
c0019d26:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d29:	e8 6b 58 ff ff       	call   c000f599 <malloc>
c0019d2e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d31:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019d33:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019d36:	c1 e1 03             	shl    ecx,0x3
c0019d39:	89 c7                	mov    edi,eax
c0019d3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d3d:	83 c4 10             	add    esp,0x10
c0019d40:	89 d8                	mov    eax,ebx
c0019d42:	5b                   	pop    ebx
c0019d43:	5e                   	pop    esi
c0019d44:	5f                   	pop    edi
c0019d45:	c3                   	ret    

c0019d46 <Krnl::loadSystemEnv()>:
c0019d46:	53                   	push   ebx
c0019d47:	83 ec 14             	sub    esp,0x14
c0019d4a:	6a 0c                	push   0xc
c0019d4c:	e8 48 58 ff ff       	call   c000f599 <malloc>
c0019d51:	89 c3                	mov    ebx,eax
c0019d53:	58                   	pop    eax
c0019d54:	5a                   	pop    edx
c0019d55:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c0019d5b:	53                   	push   ebx
c0019d5c:	e8 71 fe ff ff       	call   c0019bd2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d64:	89 1d f8 04 03 c0    	mov    DWORD PTR ds:0xc00304f8,ebx
c0019d6a:	e8 47 fe ff ff       	call   c0019bb6 <EnvVarContainer::__loadSystem()>
c0019d6f:	83 c4 18             	add    esp,0x18
c0019d72:	5b                   	pop    ebx
c0019d73:	c3                   	ret    

c0019d74 <Krnl::loadUserEnv()>:
c0019d74:	53                   	push   ebx
c0019d75:	83 ec 14             	sub    esp,0x14
c0019d78:	6a 0c                	push   0xc
c0019d7a:	e8 1a 58 ff ff       	call   c000f599 <malloc>
c0019d7f:	89 c3                	mov    ebx,eax
c0019d81:	58                   	pop    eax
c0019d82:	5a                   	pop    edx
c0019d83:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c0019d89:	53                   	push   ebx
c0019d8a:	e8 43 fe ff ff       	call   c0019bd2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d8f:	89 1d f4 04 03 c0    	mov    DWORD PTR ds:0xc00304f4,ebx
c0019d95:	83 c4 18             	add    esp,0x18
c0019d98:	5b                   	pop    ebx
c0019d99:	c3                   	ret    

c0019d9a <Krnl::flushEnv()>:
c0019d9a:	c3                   	ret    

c0019d9b <Krnl::getProcessTotalEnvCount(Process*)>:
c0019d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d9f:	8b 15 f4 04 03 c0    	mov    edx,DWORD PTR ds:0xc00304f4
c0019da5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019dab:	a1 f8 04 03 c0       	mov    eax,ds:0xc00304f8
c0019db0:	8b 00                	mov    eax,DWORD PTR [eax]
c0019db2:	03 01                	add    eax,DWORD PTR [ecx]
c0019db4:	85 d2                	test   edx,edx
c0019db6:	74 02                	je     c0019dba <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019db8:	03 02                	add    eax,DWORD PTR [edx]
c0019dba:	c3                   	ret    

c0019dbb <Krnl::getProcessEnvPair(Process*, int)>:
c0019dbb:	57                   	push   edi
c0019dbc:	56                   	push   esi
c0019dbd:	8b 35 f4 04 03 c0    	mov    esi,DWORD PTR ds:0xc00304f4
c0019dc3:	53                   	push   ebx
c0019dc4:	85 f6                	test   esi,esi
c0019dc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019dca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019dce:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019dd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019dd8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019dda:	75 16                	jne    c0019df2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019ddc:	39 c2                	cmp    edx,eax
c0019dde:	7c 16                	jl     c0019df6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019de0:	8b 0d f8 04 03 c0    	mov    ecx,DWORD PTR ds:0xc00304f8
c0019de6:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019de8:	01 c6                	add    esi,eax
c0019dea:	39 d6                	cmp    esi,edx
c0019dec:	7e 3c                	jle    c0019e2a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019dee:	29 c2                	sub    edx,eax
c0019df0:	eb 04                	jmp    c0019df6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019df2:	39 c2                	cmp    edx,eax
c0019df4:	7d 05                	jge    c0019dfb <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019df6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019df9:	eb 20                	jmp    c0019e1b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019dfb:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019dfd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019e00:	39 d1                	cmp    ecx,edx
c0019e02:	7e 04                	jle    c0019e08 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019e04:	29 c2                	sub    edx,eax
c0019e06:	eb 10                	jmp    c0019e18 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019e08:	8b 35 f8 04 03 c0    	mov    esi,DWORD PTR ds:0xc00304f8
c0019e0e:	03 0e                	add    ecx,DWORD PTR [esi]
c0019e10:	39 d1                	cmp    ecx,edx
c0019e12:	7e 16                	jle    c0019e2a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019e14:	29 c2                	sub    edx,eax
c0019e16:	29 fa                	sub    edx,edi
c0019e18:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e1b:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019e1e:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e20:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019e23:	89 03                	mov    DWORD PTR [ebx],eax
c0019e25:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019e28:	eb 1d                	jmp    c0019e47 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019e2a:	83 ec 0c             	sub    esp,0xc
c0019e2d:	68 0f b6 02 c0       	push   0xc002b60f
c0019e32:	e8 18 00 00 00       	call   c0019e4f <Krnl::panic(char const*)>
c0019e37:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019e3d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019e44:	83 c4 10             	add    esp,0x10
c0019e47:	89 d8                	mov    eax,ebx
c0019e49:	5b                   	pop    ebx
c0019e4a:	5e                   	pop    esi
c0019e4b:	5f                   	pop    edi
c0019e4c:	c2 04 00             	ret    0x4

c0019e4f <Krnl::panic(char const*)>:
c0019e4f:	55                   	push   ebp
c0019e50:	89 e5                	mov    ebp,esp
c0019e52:	53                   	push   ebx
c0019e53:	83 ec 10             	sub    esp,0x10
c0019e56:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e59:	fa                   	cli    
c0019e5a:	c6 05 04 05 03 c0 01 	mov    BYTE PTR ds:0xc0030504,0x1
c0019e61:	53                   	push   ebx
c0019e62:	e8 8c 57 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019e67:	58                   	pop    eax
c0019e68:	c6 05 00 c9 02 c0 00 	mov    BYTE PTR ds:0xc002c900,0x0
c0019e6f:	5a                   	pop    edx
c0019e70:	53                   	push   ebx
c0019e71:	68 29 b6 02 c0       	push   0xc002b629
c0019e76:	e8 68 88 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0019e7b:	59                   	pop    ecx
c0019e7c:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019e81:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e87:	e8 c7 64 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0019e8c:	83 c4 0c             	add    esp,0xc
c0019e8f:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019e94:	6a 01                	push   0x1
c0019e96:	6a 0f                	push   0xf
c0019e98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e9e:	e8 0f 63 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019ea3:	58                   	pop    eax
c0019ea4:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019ea9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eaf:	e8 20 68 ff ff       	call   c00106d4 <VgaText::clearScreen()>
c0019eb4:	58                   	pop    eax
c0019eb5:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019eba:	5a                   	pop    edx
c0019ebb:	68 42 b6 02 c0       	push   0xc002b642
c0019ec0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec6:	e8 95 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ecb:	59                   	pop    ecx
c0019ecc:	58                   	pop    eax
c0019ecd:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019ed2:	68 e8 b6 02 c0       	push   0xc002b6e8
c0019ed7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019edd:	e8 7e 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ee2:	58                   	pop    eax
c0019ee3:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019ee8:	5a                   	pop    edx
c0019ee9:	68 5e b6 02 c0       	push   0xc002b65e
c0019eee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ef4:	e8 67 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ef9:	59                   	pop    ecx
c0019efa:	58                   	pop    eax
c0019efb:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019f00:	53                   	push   ebx
c0019f01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f07:	e8 54 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f0c:	58                   	pop    eax
c0019f0d:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019f12:	5a                   	pop    edx
c0019f13:	68 7e b6 02 c0       	push   0xc002b67e
c0019f18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f1e:	e8 3d 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f23:	a1 00 05 03 c0       	mov    eax,ds:0xc0030500
c0019f28:	83 c4 10             	add    esp,0x10
c0019f2b:	85 c0                	test   eax,eax
c0019f2d:	74 02                	je     c0019f31 <Krnl::panic(char const*)+0xe2>
c0019f2f:	ff d0                	call   eax
c0019f31:	83 ec 0c             	sub    esp,0xc
c0019f34:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f37:	e8 8c 30 00 00       	call   c001cfc8 <Thr::getDriverNameFromAddress(unsigned long)>
c0019f3c:	83 c4 10             	add    esp,0x10
c0019f3f:	89 c3                	mov    ebx,eax
c0019f41:	85 c0                	test   eax,eax
c0019f43:	0f 84 4e 02 00 00    	je     c001a197 <Krnl::panic(char const*)+0x348>
c0019f49:	83 ec 08             	sub    esp,0x8
c0019f4c:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019f51:	68 24 b7 02 c0       	push   0xc002b724
c0019f56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f5c:	e8 ff 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f61:	58                   	pop    eax
c0019f62:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019f67:	5a                   	pop    edx
c0019f68:	68 5e b6 02 c0       	push   0xc002b65e
c0019f6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f73:	e8 e8 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f78:	59                   	pop    ecx
c0019f79:	58                   	pop    eax
c0019f7a:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019f7f:	53                   	push   ebx
c0019f80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f86:	e8 d5 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f8b:	83 c4 10             	add    esp,0x10
c0019f8e:	83 ec 08             	sub    esp,0x8
c0019f91:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019f96:	68 7d b6 02 c0       	push   0xc002b67d
c0019f9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fa1:	e8 ba 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fa6:	58                   	pop    eax
c0019fa7:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019fac:	5a                   	pop    edx
c0019fad:	68 7c b7 02 c0       	push   0xc002b77c
c0019fb2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb8:	e8 a3 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fbd:	59                   	pop    ecx
c0019fbe:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019fc3:	5b                   	pop    ebx
c0019fc4:	68 bc b7 02 c0       	push   0xc002b7bc
c0019fc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fcf:	e8 8c 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fd4:	58                   	pop    eax
c0019fd5:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019fda:	5a                   	pop    edx
c0019fdb:	68 69 b6 02 c0       	push   0xc002b669
c0019fe0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fe6:	e8 75 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019feb:	59                   	pop    ecx
c0019fec:	5b                   	pop    ebx
c0019fed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ff0:	68 81 b6 02 c0       	push   0xc002b681
c0019ff5:	e8 e9 86 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0019ffa:	58                   	pop    eax
c0019ffb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ffe:	5a                   	pop    edx
c0019fff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a002:	68 8a b6 02 c0       	push   0xc002b68a
c001a007:	e8 d7 86 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001a00c:	59                   	pop    ecx
c001a00d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a010:	5b                   	pop    ebx
c001a011:	8b 00                	mov    eax,DWORD PTR [eax]
c001a013:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a016:	68 93 b6 02 c0       	push   0xc002b693
c001a01b:	e8 c3 86 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001a020:	58                   	pop    eax
c001a021:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a026:	5a                   	pop    edx
c001a027:	68 00 b8 02 c0       	push   0xc002b800
c001a02c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a032:	e8 29 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a037:	59                   	pop    ecx
c001a038:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a03d:	5b                   	pop    ebx
c001a03e:	68 9c b6 02 c0       	push   0xc002b69c
c001a043:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a049:	e8 12 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a04e:	0f 20 c0             	mov    eax,cr0
c001a051:	5a                   	pop    edx
c001a052:	59                   	pop    ecx
c001a053:	50                   	push   eax
c001a054:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a059:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a05f:	e8 b6 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a064:	5b                   	pop    ebx
c001a065:	58                   	pop    eax
c001a066:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a06b:	68 a6 b6 02 c0       	push   0xc002b6a6
c001a070:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a076:	e8 e5 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a07b:	0f 20 d0             	mov    eax,cr2
c001a07e:	5a                   	pop    edx
c001a07f:	59                   	pop    ecx
c001a080:	50                   	push   eax
c001a081:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a086:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a08c:	e8 89 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a091:	5b                   	pop    ebx
c001a092:	58                   	pop    eax
c001a093:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a098:	68 b0 b6 02 c0       	push   0xc002b6b0
c001a09d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0a3:	e8 b8 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0a8:	0f 20 d8             	mov    eax,cr3
c001a0ab:	5a                   	pop    edx
c001a0ac:	59                   	pop    ecx
c001a0ad:	50                   	push   eax
c001a0ae:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a0b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b9:	e8 5c 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0be:	5b                   	pop    ebx
c001a0bf:	58                   	pop    eax
c001a0c0:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a0c5:	68 c3 b6 02 c0       	push   0xc002b6c3
c001a0ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0d0:	e8 8b 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0d5:	0f 20 e0             	mov    eax,cr4
c001a0d8:	5a                   	pop    edx
c001a0d9:	59                   	pop    ecx
c001a0da:	50                   	push   eax
c001a0db:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a0e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e6:	e8 2f 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0eb:	5b                   	pop    ebx
c001a0ec:	58                   	pop    eax
c001a0ed:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a0f2:	68 cd b6 02 c0       	push   0xc002b6cd
c001a0f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0fd:	e8 5e 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a102:	5a                   	pop    edx
c001a103:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a108:	59                   	pop    ecx
c001a109:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a10f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a112:	50                   	push   eax
c001a113:	e8 02 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a118:	5b                   	pop    ebx
c001a119:	58                   	pop    eax
c001a11a:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a11f:	68 e4 b6 02 c0       	push   0xc002b6e4
c001a124:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a12a:	e8 31 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a12f:	5a                   	pop    edx
c001a130:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a135:	59                   	pop    ecx
c001a136:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a13c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a13f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a142:	50                   	push   eax
c001a143:	e8 d2 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a148:	5b                   	pop    ebx
c001a149:	58                   	pop    eax
c001a14a:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a14f:	68 e4 b6 02 c0       	push   0xc002b6e4
c001a154:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a15a:	e8 01 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a15f:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a164:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a167:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a16d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a16f:	59                   	pop    ecx
c001a170:	5b                   	pop    ebx
c001a171:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a174:	50                   	push   eax
c001a175:	e8 a0 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a17a:	83 c4 10             	add    esp,0x10
c001a17d:	b2 fe                	mov    dl,0xfe
c001a17f:	e4 60                	in     al,0x60
c001a181:	3c 1c                	cmp    al,0x1c
c001a183:	74 04                	je     c001a189 <Krnl::panic(char const*)+0x33a>
c001a185:	3c 5a                	cmp    al,0x5a
c001a187:	75 f6                	jne    c001a17f <Krnl::panic(char const*)+0x330>
c001a189:	e4 64                	in     al,0x64
c001a18b:	a8 02                	test   al,0x2
c001a18d:	75 fa                	jne    c001a189 <Krnl::panic(char const*)+0x33a>
c001a18f:	88 d0                	mov    al,dl
c001a191:	e6 64                	out    0x64,al
c001a193:	fa                   	cli    
c001a194:	f4                   	hlt    
c001a195:	eb e8                	jmp    c001a17f <Krnl::panic(char const*)+0x330>
c001a197:	50                   	push   eax
c001a198:	50                   	push   eax
c001a199:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a19e:	68 50 b7 02 c0       	push   0xc002b750
c001a1a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1a9:	e8 b2 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1ae:	58                   	pop    eax
c001a1af:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a1b4:	5a                   	pop    edx
c001a1b5:	68 5e b6 02 c0       	push   0xc002b65e
c001a1ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1c0:	e8 9b 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1c5:	59                   	pop    ecx
c001a1c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1cb:	5b                   	pop    ebx
c001a1cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a1cf:	83 c0 0c             	add    eax,0xc
c001a1d2:	50                   	push   eax
c001a1d3:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a1d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1de:	e8 7d 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1e3:	83 c4 10             	add    esp,0x10
c001a1e6:	e9 a3 fd ff ff       	jmp    c0019f8e <Krnl::panic(char const*)+0x13f>

c001a1eb <Net::switchEndian16(unsigned short)>:
c001a1eb:	83 ec 04             	sub    esp,0x4
c001a1ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1f2:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a1f6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1fa:	c1 f8 08             	sar    eax,0x8
c001a1fd:	89 c2                	mov    edx,eax
c001a1ff:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a203:	c1 e0 08             	shl    eax,0x8
c001a206:	09 d0                	or     eax,edx
c001a208:	83 c4 04             	add    esp,0x4
c001a20b:	c3                   	ret    

c001a20c <Net::switchEndian32(unsigned int)>:
c001a20c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a210:	c1 e8 18             	shr    eax,0x18
c001a213:	89 c2                	mov    edx,eax
c001a215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a219:	c1 e0 08             	shl    eax,0x8
c001a21c:	25 00 00 ff 00       	and    eax,0xff0000
c001a221:	09 c2                	or     edx,eax
c001a223:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a227:	c1 e8 08             	shr    eax,0x8
c001a22a:	25 00 ff 00 00       	and    eax,0xff00
c001a22f:	09 c2                	or     edx,eax
c001a231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a235:	c1 e0 18             	shl    eax,0x18
c001a238:	09 d0                	or     eax,edx
c001a23a:	c3                   	ret    

c001a23b <Net::crc32Calc(unsigned char*, int)>:
c001a23b:	83 ec 10             	sub    esp,0x10
c001a23e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a243:	75 07                	jne    c001a24c <Net::crc32Calc(unsigned char*, int)+0x11>
c001a245:	b8 00 00 00 00       	mov    eax,0x0
c001a24a:	eb 7c                	jmp    c001a2c8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a24c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a251:	7f 07                	jg     c001a25a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a253:	b8 00 00 00 00       	mov    eax,0x0
c001a258:	eb 6e                	jmp    c001a2c8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a25a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a262:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a26a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a26e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a272:	7d 4e                	jge    c001a2c2 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a274:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a278:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a27c:	01 d0                	add    eax,edx
c001a27e:	8a 00                	mov    al,BYTE PTR [eax]
c001a280:	0f b6 c0             	movzx  eax,al
c001a283:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a287:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a28f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a294:	7f 26                	jg     c001a2bc <Net::crc32Calc(unsigned char*, int)+0x81>
c001a296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a29a:	83 e0 01             	and    eax,0x1
c001a29d:	74 0d                	je     c001a2ac <Net::crc32Calc(unsigned char*, int)+0x71>
c001a29f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2a3:	d1 e8                	shr    eax,1
c001a2a5:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a2aa:	eb 06                	jmp    c001a2b2 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a2ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2b0:	d1 e8                	shr    eax,1
c001a2b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2b6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a2ba:	eb d3                	jmp    c001a28f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a2bc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a2c0:	eb a8                	jmp    c001a26a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c6:	f7 d0                	not    eax
c001a2c8:	83 c4 10             	add    esp,0x10
c001a2cb:	c3                   	ret    

c001a2cc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a2cc:	57                   	push   edi
c001a2cd:	56                   	push   esi
c001a2ce:	53                   	push   ebx
c001a2cf:	83 ec 60             	sub    esp,0x60
c001a2d2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2d9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a2dd:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a2e5:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a2ea:	7f 1a                	jg     c001a306 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a2ec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2f3:	8d 50 01             	lea    edx,[eax+0x1]
c001a2f6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2fd:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a300:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a304:	eb df                	jmp    c001a2e5 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a306:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a30d:	8d 50 01             	lea    edx,[eax+0x1]
c001a310:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a317:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a31a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a321:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a325:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a329:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a32d:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a335:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a339:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a33d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a341:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a345:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a349:	89 c6                	mov    esi,eax
c001a34b:	89 d7                	mov    edi,edx
c001a34d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a34f:	89 c8                	mov    eax,ecx
c001a351:	89 fa                	mov    edx,edi
c001a353:	89 f3                	mov    ebx,esi
c001a355:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a359:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a35d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a360:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a368:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a36f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a373:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a377:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a37b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a383:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a387:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a38b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a38f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a393:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a397:	89 c6                	mov    esi,eax
c001a399:	89 d7                	mov    edi,edx
c001a39b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a39d:	89 c8                	mov    eax,ecx
c001a39f:	89 fa                	mov    edx,edi
c001a3a1:	89 f3                	mov    ebx,esi
c001a3a3:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a3a7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a3ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3af:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a3b7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3be:	0f b7 c0             	movzx  eax,ax
c001a3c1:	c1 f8 08             	sar    eax,0x8
c001a3c4:	89 c1                	mov    ecx,eax
c001a3c6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3cd:	8d 50 01             	lea    edx,[eax+0x1]
c001a3d0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3d7:	88 ca                	mov    dl,cl
c001a3d9:	88 10                	mov    BYTE PTR [eax],dl
c001a3db:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a3e2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3e9:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3ec:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a3f3:	88 10                	mov    BYTE PTR [eax],dl
c001a3f5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3f9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a3fd:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a404:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a408:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a40c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a410:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a414:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a418:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a41c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a420:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a424:	89 c6                	mov    esi,eax
c001a426:	89 d7                	mov    edi,edx
c001a428:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a42a:	89 c8                	mov    eax,ecx
c001a42c:	89 fa                	mov    edx,edi
c001a42e:	89 f3                	mov    ebx,esi
c001a430:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a434:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a438:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a43c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a440:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a447:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a44e:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a452:	50                   	push   eax
c001a453:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a457:	e8 df fd ff ff       	call   c001a23b <Net::crc32Calc(unsigned char*, int)>
c001a45c:	83 c4 08             	add    esp,0x8
c001a45f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a463:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a467:	c1 e8 18             	shr    eax,0x18
c001a46a:	89 c1                	mov    ecx,eax
c001a46c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a473:	8d 50 01             	lea    edx,[eax+0x1]
c001a476:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a47d:	88 ca                	mov    dl,cl
c001a47f:	88 10                	mov    BYTE PTR [eax],dl
c001a481:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a485:	c1 e8 10             	shr    eax,0x10
c001a488:	89 c1                	mov    ecx,eax
c001a48a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a491:	8d 50 01             	lea    edx,[eax+0x1]
c001a494:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a49b:	88 ca                	mov    dl,cl
c001a49d:	88 10                	mov    BYTE PTR [eax],dl
c001a49f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a4a3:	c1 e8 08             	shr    eax,0x8
c001a4a6:	89 c1                	mov    ecx,eax
c001a4a8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4af:	8d 50 01             	lea    edx,[eax+0x1]
c001a4b2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4b9:	88 ca                	mov    dl,cl
c001a4bb:	88 10                	mov    BYTE PTR [eax],dl
c001a4bd:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4c4:	8d 50 01             	lea    edx,[eax+0x1]
c001a4c7:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4ce:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a4d2:	88 10                	mov    BYTE PTR [eax],dl
c001a4d4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4d8:	83 c4 60             	add    esp,0x60
c001a4db:	5b                   	pop    ebx
c001a4dc:	5e                   	pop    esi
c001a4dd:	5f                   	pop    edi
c001a4de:	c3                   	ret    

c001a4df <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a4df:	57                   	push   edi
c001a4e0:	56                   	push   esi
c001a4e1:	53                   	push   ebx
c001a4e2:	83 ec 70             	sub    esp,0x70
c001a4e5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4ec:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a4f0:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a4f8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4ff:	83 c0 0e             	add    eax,0xe
c001a502:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a506:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a50d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a511:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a519:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a51d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a521:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a525:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a529:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a52d:	89 c6                	mov    esi,eax
c001a52f:	89 d7                	mov    edi,edx
c001a531:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a533:	89 c8                	mov    eax,ecx
c001a535:	89 fa                	mov    edx,edi
c001a537:	89 f3                	mov    ebx,esi
c001a539:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a53d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a541:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a545:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a54d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a554:	83 c0 08             	add    eax,0x8
c001a557:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a55b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a562:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a566:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a56e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a572:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a576:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a57a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a57e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a582:	89 c6                	mov    esi,eax
c001a584:	89 d7                	mov    edi,edx
c001a586:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a588:	89 c8                	mov    eax,ecx
c001a58a:	89 fa                	mov    edx,edi
c001a58c:	89 f3                	mov    ebx,esi
c001a58e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a592:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a596:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a59a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a5a2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5a9:	8d 50 01             	lea    edx,[eax+0x1]
c001a5ac:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5b3:	8a 00                	mov    al,BYTE PTR [eax]
c001a5b5:	0f b6 c0             	movzx  eax,al
c001a5b8:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a5bd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5c4:	8d 50 01             	lea    edx,[eax+0x1]
c001a5c7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5ce:	8a 00                	mov    al,BYTE PTR [eax]
c001a5d0:	0f b6 c0             	movzx  eax,al
c001a5d3:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a5d8:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a5dd:	c1 e0 08             	shl    eax,0x8
c001a5e0:	89 c2                	mov    edx,eax
c001a5e2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5e6:	09 d0                	or     eax,edx
c001a5e8:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a5ef:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a5f3:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a5fb:	75 46                	jne    c001a643 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a5fd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a604:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a607:	66 3d dc 05          	cmp    ax,0x5dc
c001a60b:	77 16                	ja     c001a623 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a60d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a614:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a617:	0f b7 c0             	movzx  eax,ax
c001a61a:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a621:	eb 20                	jmp    c001a643 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a623:	83 ec 0c             	sub    esp,0xc
c001a626:	68 28 b8 02 c0       	push   0xc002b828
c001a62b:	e8 b3 80 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001a630:	83 c4 10             	add    esp,0x10
c001a633:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a63a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a63e:	e9 17 01 00 00       	jmp    c001a75a <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a643:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a64a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a651:	8b 12                	mov    edx,DWORD PTR [edx]
c001a653:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a657:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a65e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a662:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a666:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a66a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a66e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a672:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a676:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a67a:	89 c6                	mov    esi,eax
c001a67c:	89 d7                	mov    edi,edx
c001a67e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a680:	89 c8                	mov    eax,ecx
c001a682:	89 fa                	mov    edx,edi
c001a684:	89 f3                	mov    ebx,esi
c001a686:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a68a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a68e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a691:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a698:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a69f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6a6:	8d 50 01             	lea    edx,[eax+0x1]
c001a6a9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6b0:	8a 00                	mov    al,BYTE PTR [eax]
c001a6b2:	0f b6 c0             	movzx  eax,al
c001a6b5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a6b9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6c0:	8d 50 01             	lea    edx,[eax+0x1]
c001a6c3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6ca:	8a 00                	mov    al,BYTE PTR [eax]
c001a6cc:	0f b6 c0             	movzx  eax,al
c001a6cf:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a6d3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6da:	8d 50 01             	lea    edx,[eax+0x1]
c001a6dd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6e4:	8a 00                	mov    al,BYTE PTR [eax]
c001a6e6:	0f b6 c0             	movzx  eax,al
c001a6e9:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a6ed:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6f4:	8d 50 01             	lea    edx,[eax+0x1]
c001a6f7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6fe:	8a 00                	mov    al,BYTE PTR [eax]
c001a700:	0f b6 c0             	movzx  eax,al
c001a703:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a707:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a70b:	c1 e0 18             	shl    eax,0x18
c001a70e:	89 c2                	mov    edx,eax
c001a710:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a714:	c1 e0 10             	shl    eax,0x10
c001a717:	09 c2                	or     edx,eax
c001a719:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a71d:	c1 e0 08             	shl    eax,0x8
c001a720:	09 d0                	or     eax,edx
c001a722:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a726:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a72a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a731:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a735:	83 e8 04             	sub    eax,0x4
c001a738:	83 ec 08             	sub    esp,0x8
c001a73b:	50                   	push   eax
c001a73c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a740:	e8 f6 fa ff ff       	call   c001a23b <Net::crc32Calc(unsigned char*, int)>
c001a745:	83 c4 10             	add    esp,0x10
c001a748:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a74c:	0f 94 c2             	sete   dl
c001a74f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a756:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a759:	90                   	nop
c001a75a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a761:	83 c4 70             	add    esp,0x70
c001a764:	5b                   	pop    ebx
c001a765:	5e                   	pop    esi
c001a766:	5f                   	pop    edi
c001a767:	c2 04 00             	ret    0x4

c001a76a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a76a:	55                   	push   ebp
c001a76b:	57                   	push   edi
c001a76c:	56                   	push   esi
c001a76d:	53                   	push   ebx
c001a76e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a774:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a77b:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a77d:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a780:	80 fb 40             	cmp    bl,0x40
c001a783:	75 1b                	jne    c001a7a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a785:	8a 16                	mov    dl,BYTE PTR [esi]
c001a787:	84 d2                	test   dl,dl
c001a789:	0f 84 f1 00 00 00    	je     c001a880 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a78f:	8d 46 01             	lea    eax,[esi+0x1]
c001a792:	80 fa 3a             	cmp    dl,0x3a
c001a795:	74 04                	je     c001a79b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a797:	89 c6                	mov    esi,eax
c001a799:	eb ea                	jmp    c001a785 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a79b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a79e:	89 c6                	mov    esi,eax
c001a7a0:	50                   	push   eax
c001a7a1:	6a 40                	push   0x40
c001a7a3:	6a 00                	push   0x0
c001a7a5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7a9:	50                   	push   eax
c001a7aa:	e8 a1 5f fe ff       	call   c0000750 <memset>
c001a7af:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a7b6:	31 c0                	xor    eax,eax
c001a7b8:	83 c4 10             	add    esp,0x10
c001a7bb:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a7bd:	84 c9                	test   cl,cl
c001a7bf:	0f 84 bb 00 00 00    	je     c001a880 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7c5:	3d c7 00 00 00       	cmp    eax,0xc7
c001a7ca:	0f 8f b0 00 00 00    	jg     c001a880 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7d0:	80 f9 0a             	cmp    cl,0xa
c001a7d3:	0f 85 98 00 00 00    	jne    c001a871 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a7d9:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a7de:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a7e2:	a8 df                	test   al,0xdf
c001a7e4:	0f 94 c1             	sete   cl
c001a7e7:	3c 23                	cmp    al,0x23
c001a7e9:	0f 94 c2             	sete   dl
c001a7ec:	08 d1                	or     cl,dl
c001a7ee:	75 4a                	jne    c001a83a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7f0:	8d 50 f7             	lea    edx,[eax-0x9]
c001a7f3:	80 fa 01             	cmp    dl,0x1
c001a7f6:	76 42                	jbe    c001a83a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7f8:	3c 5b                	cmp    al,0x5b
c001a7fa:	75 42                	jne    c001a83e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a7fc:	80 fb 40             	cmp    bl,0x40
c001a7ff:	75 39                	jne    c001a83a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a801:	83 ec 0c             	sub    esp,0xc
c001a804:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a808:	52                   	push   edx
c001a809:	e8 5e 5f fe ff       	call   c000076c <strlen>
c001a80e:	83 c4 10             	add    esp,0x10
c001a811:	83 f8 3f             	cmp    eax,0x3f
c001a814:	77 6a                	ja     c001a880 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a816:	50                   	push   eax
c001a817:	50                   	push   eax
c001a818:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a81c:	52                   	push   edx
c001a81d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a821:	52                   	push   edx
c001a822:	e8 e5 5f fe ff       	call   c000080c <strcpy>
c001a827:	58                   	pop    eax
c001a828:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a82c:	52                   	push   edx
c001a82d:	e8 3a 5f fe ff       	call   c000076c <strlen>
c001a832:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a837:	83 c4 10             	add    esp,0x10
c001a83a:	31 d2                	xor    edx,edx
c001a83c:	eb 3a                	jmp    c001a878 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a83e:	80 fb 40             	cmp    bl,0x40
c001a841:	74 06                	je     c001a849 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a843:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a847:	eb 20                	jmp    c001a869 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a849:	50                   	push   eax
c001a84a:	50                   	push   eax
c001a84b:	55                   	push   ebp
c001a84c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a850:	50                   	push   eax
c001a851:	e8 42 60 fe ff       	call   c0000898 <strcmp>
c001a856:	83 c4 10             	add    esp,0x10
c001a859:	85 c0                	test   eax,eax
c001a85b:	75 dd                	jne    c001a83a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a85d:	eb e4                	jmp    c001a843 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a85f:	8d 50 01             	lea    edx,[eax+0x1]
c001a862:	80 f9 3d             	cmp    cl,0x3d
c001a865:	74 1d                	je     c001a884 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a867:	89 d0                	mov    eax,edx
c001a869:	8a 08                	mov    cl,BYTE PTR [eax]
c001a86b:	84 c9                	test   cl,cl
c001a86d:	75 f0                	jne    c001a85f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a86f:	eb 0f                	jmp    c001a880 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a871:	8d 50 01             	lea    edx,[eax+0x1]
c001a874:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a878:	47                   	inc    edi
c001a879:	89 d0                	mov    eax,edx
c001a87b:	e9 3b ff ff ff       	jmp    c001a7bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a880:	31 c0                	xor    eax,eax
c001a882:	eb 33                	jmp    c001a8b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a888:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a88b:	50                   	push   eax
c001a88c:	50                   	push   eax
c001a88d:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a891:	50                   	push   eax
c001a892:	56                   	push   esi
c001a893:	e8 00 60 fe ff       	call   c0000898 <strcmp>
c001a898:	83 c4 10             	add    esp,0x10
c001a89b:	85 c0                	test   eax,eax
c001a89d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8a1:	75 97                	jne    c001a83a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a8a3:	51                   	push   ecx
c001a8a4:	51                   	push   ecx
c001a8a5:	52                   	push   edx
c001a8a6:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a8ad:	e8 5a 5f fe ff       	call   c000080c <strcpy>
c001a8b2:	83 c4 10             	add    esp,0x10
c001a8b5:	b0 01                	mov    al,0x1
c001a8b7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a8bd:	5b                   	pop    ebx
c001a8be:	5e                   	pop    esi
c001a8bf:	5f                   	pop    edi
c001a8c0:	5d                   	pop    ebp
c001a8c1:	c3                   	ret    

c001a8c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a8c2:	57                   	push   edi
c001a8c3:	56                   	push   esi
c001a8c4:	53                   	push   ebx
c001a8c5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8cb:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a8d2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8d9:	53                   	push   ebx
c001a8da:	e8 8d 5e fe ff       	call   c000076c <strlen>
c001a8df:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8e2:	89 c7                	mov    edi,eax
c001a8e4:	e8 83 5e fe ff       	call   c000076c <strlen>
c001a8e9:	83 c4 10             	add    esp,0x10
c001a8ec:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a8f0:	3d ff 00 00 00       	cmp    eax,0xff
c001a8f5:	0f 87 d3 00 00 00    	ja     c001a9ce <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a8fb:	57                   	push   edi
c001a8fc:	57                   	push   edi
c001a8fd:	56                   	push   esi
c001a8fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a902:	56                   	push   esi
c001a903:	e8 04 5f fe ff       	call   c000080c <strcpy>
c001a908:	58                   	pop    eax
c001a909:	5a                   	pop    edx
c001a90a:	68 ca bb 02 c0       	push   0xc002bbca
c001a90f:	56                   	push   esi
c001a910:	e8 37 60 fe ff       	call   c000094c <strcat>
c001a915:	59                   	pop    ecx
c001a916:	5f                   	pop    edi
c001a917:	53                   	push   ebx
c001a918:	56                   	push   esi
c001a919:	e8 2e 60 fe ff       	call   c000094c <strcat>
c001a91e:	58                   	pop    eax
c001a91f:	5a                   	pop    edx
c001a920:	68 74 b8 02 c0       	push   0xc002b874
c001a925:	56                   	push   esi
c001a926:	e8 21 60 fe ff       	call   c000094c <strcat>
c001a92b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a932:	e8 62 4c ff ff       	call   c000f599 <malloc>
c001a937:	83 c4 0c             	add    esp,0xc
c001a93a:	89 c3                	mov    ebx,eax
c001a93c:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c001a942:	56                   	push   esi
c001a943:	50                   	push   eax
c001a944:	e8 f9 82 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c001a949:	83 c4 10             	add    esp,0x10
c001a94c:	85 db                	test   ebx,ebx
c001a94e:	74 7e                	je     c001a9ce <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a950:	51                   	push   ecx
c001a951:	51                   	push   ecx
c001a952:	6a 01                	push   0x1
c001a954:	53                   	push   ebx
c001a955:	e8 4c 83 ff ff       	call   c0012ca6 <File::open(FileOpenMode)>
c001a95a:	83 c4 10             	add    esp,0x10
c001a95d:	85 c0                	test   eax,eax
c001a95f:	74 08                	je     c001a969 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a961:	83 ec 0c             	sub    esp,0xc
c001a964:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a966:	53                   	push   ebx
c001a967:	eb 5f                	jmp    c001a9c8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a969:	52                   	push   edx
c001a96a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a96e:	50                   	push   eax
c001a96f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a973:	50                   	push   eax
c001a974:	53                   	push   ebx
c001a975:	e8 d8 85 ff ff       	call   c0012f52 <File::stat(unsigned long long*, bool*)>
c001a97a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a97e:	83 c4 10             	add    esp,0x10
c001a981:	89 c1                	mov    ecx,eax
c001a983:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a987:	74 31                	je     c001a9ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a989:	83 ec 0c             	sub    esp,0xc
c001a98c:	50                   	push   eax
c001a98d:	e8 07 4c ff ff       	call   c000f599 <malloc>
c001a992:	89 c6                	mov    esi,eax
c001a994:	58                   	pop    eax
c001a995:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a997:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a99b:	52                   	push   edx
c001a99c:	56                   	push   esi
c001a99d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a9a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a9a5:	53                   	push   ebx
c001a9a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9a9:	83 c4 20             	add    esp,0x20
c001a9ac:	85 c0                	test   eax,eax
c001a9ae:	75 0a                	jne    c001a9ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a9b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9b4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a9b8:	74 18                	je     c001a9d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a9ba:	83 ec 0c             	sub    esp,0xc
c001a9bd:	53                   	push   ebx
c001a9be:	e8 41 83 ff ff       	call   c0012d04 <File::close()>
c001a9c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9cb:	83 c4 10             	add    esp,0x10
c001a9ce:	31 c0                	xor    eax,eax
c001a9d0:	eb 3b                	jmp    c001aa0d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a9d2:	83 ec 0c             	sub    esp,0xc
c001a9d5:	53                   	push   ebx
c001a9d6:	e8 29 83 ff ff       	call   c0012d04 <File::close()>
c001a9db:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9e3:	83 c4 0c             	add    esp,0xc
c001a9e6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9ed:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9f4:	56                   	push   esi
c001a9f5:	e8 70 fd ff ff       	call   c001a76a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a9fa:	89 34 24             	mov    DWORD PTR [esp],esi
c001a9fd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aa01:	e8 a3 4b ff ff       	call   c000f5a9 <free>
c001aa06:	83 c4 10             	add    esp,0x10
c001aa09:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aa0d:	81 c4 20 01 00 00    	add    esp,0x120
c001aa13:	5b                   	pop    ebx
c001aa14:	5e                   	pop    esi
c001aa15:	5f                   	pop    edi
c001aa16:	c3                   	ret    

c001aa17 <Reg::getLine(char*, char*, char*)>:
c001aa17:	57                   	push   edi
c001aa18:	56                   	push   esi
c001aa19:	53                   	push   ebx
c001aa1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa1e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa22:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa26:	57                   	push   edi
c001aa27:	56                   	push   esi
c001aa28:	53                   	push   ebx
c001aa29:	68 79 b8 02 c0       	push   0xc002b879
c001aa2e:	e8 8f fe ff ff       	call   c001a8c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa33:	83 c4 10             	add    esp,0x10
c001aa36:	84 c0                	test   al,al
c001aa38:	75 10                	jne    c001aa4a <Reg::getLine(char*, char*, char*)+0x33>
c001aa3a:	57                   	push   edi
c001aa3b:	56                   	push   esi
c001aa3c:	53                   	push   ebx
c001aa3d:	68 9e b8 02 c0       	push   0xc002b89e
c001aa42:	e8 7b fe ff ff       	call   c001a8c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa47:	83 c4 10             	add    esp,0x10
c001aa4a:	5b                   	pop    ebx
c001aa4b:	5e                   	pop    esi
c001aa4c:	5f                   	pop    edi
c001aa4d:	c3                   	ret    

c001aa4e <Reg::readInt(char*, char*, int*)>:
c001aa4e:	55                   	push   ebp
c001aa4f:	57                   	push   edi
c001aa50:	56                   	push   esi
c001aa51:	53                   	push   ebx
c001aa52:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa58:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa5c:	57                   	push   edi
c001aa5d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa64:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa6b:	e8 a7 ff ff ff       	call   c001aa17 <Reg::getLine(char*, char*, char*)>
c001aa70:	83 c4 10             	add    esp,0x10
c001aa73:	84 c0                	test   al,al
c001aa75:	0f 84 b3 00 00 00    	je     c001ab2e <Reg::readInt(char*, char*, int*)+0xe0>
c001aa7b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa7f:	80 fa 2b             	cmp    dl,0x2b
c001aa82:	74 0c                	je     c001aa90 <Reg::readInt(char*, char*, int*)+0x42>
c001aa84:	80 fa 2d             	cmp    dl,0x2d
c001aa87:	75 0e                	jne    c001aa97 <Reg::readInt(char*, char*, int*)+0x49>
c001aa89:	ba 01 00 00 00       	mov    edx,0x1
c001aa8e:	eb 0b                	jmp    c001aa9b <Reg::readInt(char*, char*, int*)+0x4d>
c001aa90:	ba 01 00 00 00       	mov    edx,0x1
c001aa95:	eb 02                	jmp    c001aa99 <Reg::readInt(char*, char*, int*)+0x4b>
c001aa97:	31 d2                	xor    edx,edx
c001aa99:	31 c0                	xor    eax,eax
c001aa9b:	be 0a 00 00 00       	mov    esi,0xa
c001aaa0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aaa5:	75 20                	jne    c001aac7 <Reg::readInt(char*, char*, int*)+0x79>
c001aaa7:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aaab:	80 f9 78             	cmp    cl,0x78
c001aaae:	75 0a                	jne    c001aaba <Reg::readInt(char*, char*, int*)+0x6c>
c001aab0:	83 c2 02             	add    edx,0x2
c001aab3:	be 10 00 00 00       	mov    esi,0x10
c001aab8:	eb 0d                	jmp    c001aac7 <Reg::readInt(char*, char*, int*)+0x79>
c001aaba:	80 f9 62             	cmp    cl,0x62
c001aabd:	75 08                	jne    c001aac7 <Reg::readInt(char*, char*, int*)+0x79>
c001aabf:	83 c2 02             	add    edx,0x2
c001aac2:	be 02 00 00 00       	mov    esi,0x2
c001aac7:	01 d7                	add    edi,edx
c001aac9:	31 d2                	xor    edx,edx
c001aacb:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aacd:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aad1:	80 fb 0d             	cmp    bl,0xd
c001aad4:	0f 94 c3             	sete   bl
c001aad7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aadc:	0f 94 c1             	sete   cl
c001aadf:	08 cb                	or     bl,cl
c001aae1:	75 3a                	jne    c001ab1d <Reg::readInt(char*, char*, int*)+0xcf>
c001aae3:	0f af d6             	imul   edx,esi
c001aae6:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aaeb:	83 fe 10             	cmp    esi,0x10
c001aaee:	75 26                	jne    c001ab16 <Reg::readInt(char*, char*, int*)+0xc8>
c001aaf0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aaf4:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aaf7:	89 e9                	mov    ecx,ebp
c001aaf9:	80 f9 05             	cmp    cl,0x5
c001aafc:	77 06                	ja     c001ab04 <Reg::readInt(char*, char*, int*)+0xb6>
c001aafe:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ab02:	eb 16                	jmp    c001ab1a <Reg::readInt(char*, char*, int*)+0xcc>
c001ab04:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab08:	83 e9 61             	sub    ecx,0x61
c001ab0b:	80 f9 05             	cmp    cl,0x5
c001ab0e:	77 06                	ja     c001ab16 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab10:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ab14:	eb 04                	jmp    c001ab1a <Reg::readInt(char*, char*, int*)+0xcc>
c001ab16:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ab1a:	47                   	inc    edi
c001ab1b:	eb ae                	jmp    c001aacb <Reg::readInt(char*, char*, int*)+0x7d>
c001ab1d:	84 c0                	test   al,al
c001ab1f:	74 02                	je     c001ab23 <Reg::readInt(char*, char*, int*)+0xd5>
c001ab21:	f7 da                	neg    edx
c001ab23:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ab2a:	89 10                	mov    DWORD PTR [eax],edx
c001ab2c:	88 d8                	mov    al,bl
c001ab2e:	81 c4 ec 00 00 00    	add    esp,0xec
c001ab34:	5b                   	pop    ebx
c001ab35:	5e                   	pop    esi
c001ab36:	5f                   	pop    edi
c001ab37:	5d                   	pop    ebp
c001ab38:	c3                   	ret    

c001ab39 <Reg::readString(char*, char*, char*, int)>:
c001ab39:	57                   	push   edi
c001ab3a:	56                   	push   esi
c001ab3b:	53                   	push   ebx
c001ab3c:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab42:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab49:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab4d:	57                   	push   edi
c001ab4e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab55:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab5c:	e8 b6 fe ff ff       	call   c001aa17 <Reg::getLine(char*, char*, char*)>
c001ab61:	83 c4 10             	add    esp,0x10
c001ab64:	89 c6                	mov    esi,eax
c001ab66:	84 c0                	test   al,al
c001ab68:	74 44                	je     c001abae <Reg::readString(char*, char*, char*, int)+0x75>
c001ab6a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab71:	31 c0                	xor    eax,eax
c001ab73:	4a                   	dec    edx
c001ab74:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab77:	84 c9                	test   cl,cl
c001ab79:	74 0f                	je     c001ab8a <Reg::readString(char*, char*, char*, int)+0x51>
c001ab7b:	39 c2                	cmp    edx,eax
c001ab7d:	7e 0b                	jle    c001ab8a <Reg::readString(char*, char*, char*, int)+0x51>
c001ab7f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ab82:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ab87:	40                   	inc    eax
c001ab88:	eb ea                	jmp    c001ab74 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ab8a:	83 ec 0c             	sub    esp,0xc
c001ab8d:	53                   	push   ebx
c001ab8e:	e8 d9 5b fe ff       	call   c000076c <strlen>
c001ab93:	83 c4 10             	add    esp,0x10
c001ab96:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ab9b:	75 11                	jne    c001abae <Reg::readString(char*, char*, char*, int)+0x75>
c001ab9d:	83 ec 0c             	sub    esp,0xc
c001aba0:	53                   	push   ebx
c001aba1:	e8 c6 5b fe ff       	call   c000076c <strlen>
c001aba6:	83 c4 10             	add    esp,0x10
c001aba9:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001abae:	81 c4 d0 00 00 00    	add    esp,0xd0
c001abb4:	89 f0                	mov    eax,esi
c001abb6:	5b                   	pop    ebx
c001abb7:	5e                   	pop    esi
c001abb8:	5f                   	pop    edi
c001abb9:	c3                   	ret    

c001abba <Reg::readBool(char*, char*, bool*)>:
c001abba:	83 ec 20             	sub    esp,0x20
c001abbd:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abc1:	50                   	push   eax
c001abc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abca:	e8 7f fe ff ff       	call   c001aa4e <Reg::readInt(char*, char*, int*)>
c001abcf:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001abd4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abd8:	0f 95 02             	setne  BYTE PTR [edx]
c001abdb:	83 c4 2c             	add    esp,0x2c
c001abde:	c3                   	ret    

c001abdf <Reg::readBoolWithDefault(char*, char*, bool)>:
c001abdf:	53                   	push   ebx
c001abe0:	83 ec 1c             	sub    esp,0x1c
c001abe3:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001abe7:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abeb:	50                   	push   eax
c001abec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abf4:	e8 c1 ff ff ff       	call   c001abba <Reg::readBool(char*, char*, bool*)>
c001abf9:	83 c4 10             	add    esp,0x10
c001abfc:	84 c0                	test   al,al
c001abfe:	74 04                	je     c001ac04 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ac00:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ac04:	88 d8                	mov    al,bl
c001ac06:	83 c4 18             	add    esp,0x18
c001ac09:	5b                   	pop    ebx
c001ac0a:	c3                   	ret    

c001ac0b <Reg::readIntWithDefault(char*, char*, int)>:
c001ac0b:	53                   	push   ebx
c001ac0c:	83 ec 1c             	sub    esp,0x1c
c001ac0f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ac13:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac17:	50                   	push   eax
c001ac18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac20:	e8 29 fe ff ff       	call   c001aa4e <Reg::readInt(char*, char*, int*)>
c001ac25:	83 c4 10             	add    esp,0x10
c001ac28:	84 c0                	test   al,al
c001ac2a:	74 04                	je     c001ac30 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ac2c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ac30:	89 d8                	mov    eax,ebx
c001ac32:	83 c4 18             	add    esp,0x18
c001ac35:	5b                   	pop    ebx
c001ac36:	c3                   	ret    

c001ac37 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ac37:	57                   	push   edi
c001ac38:	56                   	push   esi
c001ac39:	56                   	push   esi
c001ac3a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac3e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac42:	56                   	push   esi
c001ac43:	57                   	push   edi
c001ac44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac4c:	e8 e8 fe ff ff       	call   c001ab39 <Reg::readString(char*, char*, char*, int)>
c001ac51:	83 c4 10             	add    esp,0x10
c001ac54:	84 c0                	test   al,al
c001ac56:	75 1a                	jne    c001ac72 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ac58:	51                   	push   ecx
c001ac59:	56                   	push   esi
c001ac5a:	6a 00                	push   0x0
c001ac5c:	57                   	push   edi
c001ac5d:	e8 ee 5a fe ff       	call   c0000750 <memset>
c001ac62:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ac65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac6b:	83 c4 10             	add    esp,0x10
c001ac6e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac72:	89 f8                	mov    eax,edi
c001ac74:	5a                   	pop    edx
c001ac75:	5e                   	pop    esi
c001ac76:	5f                   	pop    edi
c001ac77:	c3                   	ret    

c001ac78 <Sys::eject(regs*)>:
c001ac78:	83 ec 0c             	sub    esp,0xc
c001ac7b:	83 ca ff             	or     edx,0xffffffff
c001ac7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac82:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ac85:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac8a:	83 e9 41             	sub    ecx,0x41
c001ac8d:	83 f9 19             	cmp    ecx,0x19
c001ac90:	77 18                	ja     c001acaa <Sys::eject(regs*)+0x32>
c001ac92:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c001ac99:	85 c9                	test   ecx,ecx
c001ac9b:	74 0d                	je     c001acaa <Sys::eject(regs*)+0x32>
c001ac9d:	83 ec 0c             	sub    esp,0xc
c001aca0:	51                   	push   ecx
c001aca1:	e8 28 b3 ff ff       	call   c0015fce <LogicalDisk::eject()>
c001aca6:	83 c4 10             	add    esp,0x10
c001aca9:	99                   	cdq    
c001acaa:	83 c4 0c             	add    esp,0xc
c001acad:	c3                   	ret    

c001acae <Sys::exit(regs*)>:
c001acae:	83 ec 18             	sub    esp,0x18
c001acb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acb5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acb8:	e8 c4 35 00 00       	call   c001e281 <terminateTask(int)>
c001acbd:	83 c8 ff             	or     eax,0xffffffff
c001acc0:	83 c4 1c             	add    esp,0x1c
c001acc3:	89 c2                	mov    edx,eax
c001acc5:	c3                   	ret    

c001acc6 <Sys::getCwd(regs*)>:
c001acc6:	83 ec 10             	sub    esp,0x10
c001acc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001accd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001acd0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acd8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acdb:	e8 64 7d ff ff       	call   c0012a44 <Fs::getcwd(Process*, char*, int)>
c001ace0:	83 c4 1c             	add    esp,0x1c
c001ace3:	99                   	cdq    
c001ace4:	c3                   	ret    

c001ace5 <Sys::getPID(regs*)>:
c001ace5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aced:	8b 00                	mov    eax,DWORD PTR [eax]
c001acef:	99                   	cdq    
c001acf0:	c3                   	ret    

c001acf1 <Sys::getRAMData(regs*)>:
c001acf1:	8b 0d 14 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da14
c001acf7:	6b 05 10 da 02 c0 64 	imul   eax,DWORD PTR ds:0xc002da10,0x64
c001acfe:	99                   	cdq    
c001acff:	f7 f9                	idiv   ecx
c001ad01:	c1 e0 18             	shl    eax,0x18
c001ad04:	09 c8                	or     eax,ecx
c001ad06:	99                   	cdq    
c001ad07:	c3                   	ret    

c001ad08 <Sys::getVGAPtr(regs*)>:
c001ad08:	55                   	push   ebp
c001ad09:	57                   	push   edi
c001ad0a:	56                   	push   esi
c001ad0b:	53                   	push   ebx
c001ad0c:	83 ec 18             	sub    esp,0x18
c001ad0f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad13:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ad16:	e8 b2 30 00 00       	call   c001ddcd <Thr::processFromPID(int)>
c001ad1b:	83 c4 10             	add    esp,0x10
c001ad1e:	89 c1                	mov    ecx,eax
c001ad20:	b8 01 00 00 00       	mov    eax,0x1
c001ad25:	85 c9                	test   ecx,ecx
c001ad27:	74 59                	je     c001ad82 <Sys::getVGAPtr(regs*)+0x7a>
c001ad29:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ad2f:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ad33:	74 0c                	je     c001ad41 <Sys::getVGAPtr(regs*)+0x39>
c001ad35:	83 ec 0c             	sub    esp,0xc
c001ad38:	53                   	push   ebx
c001ad39:	e8 15 56 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001ad3e:	83 c4 10             	add    esp,0x10
c001ad41:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ad44:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ad47:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ad4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad4e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ad51:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad54:	81 c3 82 00 00 00    	add    ebx,0x82
c001ad5a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ad60:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad63:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ad66:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ad6c:	50                   	push   eax
c001ad6d:	50                   	push   eax
c001ad6e:	53                   	push   ebx
c001ad6f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad72:	05 a8 0f 00 00       	add    eax,0xfa8
c001ad77:	50                   	push   eax
c001ad78:	e8 8f 5a fe ff       	call   c000080c <strcpy>
c001ad7d:	83 c4 10             	add    esp,0x10
c001ad80:	31 c0                	xor    eax,eax
c001ad82:	83 c4 0c             	add    esp,0xc
c001ad85:	31 d2                	xor    edx,edx
c001ad87:	5b                   	pop    ebx
c001ad88:	5e                   	pop    esi
c001ad89:	5f                   	pop    edi
c001ad8a:	5d                   	pop    ebp
c001ad8b:	c3                   	ret    

c001ad8c <Sys::loadDLL(regs*)>:
c001ad8c:	56                   	push   esi
c001ad8d:	53                   	push   ebx
c001ad8e:	31 d2                	xor    edx,edx
c001ad90:	51                   	push   ecx
c001ad91:	b8 01 00 00 00       	mov    eax,0x1
c001ad96:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad9a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ad9e:	0f 84 8c 00 00 00    	je     c001ae30 <Sys::loadDLL(regs*)+0xa4>
c001ada4:	83 ec 0c             	sub    esp,0xc
c001ada7:	68 14 01 00 00       	push   0x114
c001adac:	e8 e8 47 ff ff       	call   c000f599 <malloc>
c001adb1:	83 c4 0c             	add    esp,0xc
c001adb4:	89 c3                	mov    ebx,eax
c001adb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adbb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001adbe:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001adc1:	53                   	push   ebx
c001adc2:	e8 7b 7e ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c001adc7:	83 c4 10             	add    esp,0x10
c001adca:	31 d2                	xor    edx,edx
c001adcc:	b8 02 00 00 00       	mov    eax,0x2
c001add1:	85 db                	test   ebx,ebx
c001add3:	74 5b                	je     c001ae30 <Sys::loadDLL(regs*)+0xa4>
c001add5:	83 ec 0c             	sub    esp,0xc
c001add8:	53                   	push   ebx
c001add9:	e8 36 81 ff ff       	call   c0012f14 <File::exists()>
c001adde:	83 c4 10             	add    esp,0x10
c001ade1:	84 c0                	test   al,al
c001ade3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ade5:	75 11                	jne    c001adf8 <Sys::loadDLL(regs*)+0x6c>
c001ade7:	83 ec 0c             	sub    esp,0xc
c001adea:	53                   	push   ebx
c001adeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adee:	83 c4 10             	add    esp,0x10
c001adf1:	b8 03 00 00 00       	mov    eax,0x3
c001adf6:	eb 36                	jmp    c001ae2e <Sys::loadDLL(regs*)+0xa2>
c001adf8:	83 ec 0c             	sub    esp,0xc
c001adfb:	53                   	push   ebx
c001adfc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adff:	58                   	pop    eax
c001ae00:	5a                   	pop    edx
c001ae01:	6a 00                	push   0x0
c001ae03:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ae06:	e8 0e 22 00 00       	call   c001d019 <Thr::loadDLL(char const*, bool)>
c001ae0b:	83 c4 10             	add    esp,0x10
c001ae0e:	89 c1                	mov    ecx,eax
c001ae10:	31 d2                	xor    edx,edx
c001ae12:	b8 04 00 00 00       	mov    eax,0x4
c001ae17:	85 c9                	test   ecx,ecx
c001ae19:	74 15                	je     c001ae30 <Sys::loadDLL(regs*)+0xa4>
c001ae1b:	53                   	push   ebx
c001ae1c:	53                   	push   ebx
c001ae1d:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c001ae23:	51                   	push   ecx
c001ae24:	e8 24 24 00 00       	call   c001d24d <Thr::executeDLL(unsigned long, void*)>
c001ae29:	83 c4 10             	add    esp,0x10
c001ae2c:	31 c0                	xor    eax,eax
c001ae2e:	31 d2                	xor    edx,edx
c001ae30:	59                   	pop    ecx
c001ae31:	5b                   	pop    ebx
c001ae32:	5e                   	pop    esi
c001ae33:	c3                   	ret    

c001ae34 <Sys::read(regs*)>:
c001ae34:	57                   	push   edi
c001ae35:	56                   	push   esi
c001ae36:	53                   	push   ebx
c001ae37:	83 ec 10             	sub    esp,0x10
c001ae3a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae3e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae41:	83 f8 02             	cmp    eax,0x2
c001ae44:	77 10                	ja     c001ae56 <Sys::read(regs*)+0x22>
c001ae46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae4b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae4e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae54:	eb 0e                	jmp    c001ae64 <Sys::read(regs*)+0x30>
c001ae56:	83 ec 0c             	sub    esp,0xc
c001ae59:	50                   	push   eax
c001ae5a:	e8 6a 62 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001ae5f:	83 c4 10             	add    esp,0x10
c001ae62:	89 c1                	mov    ecx,eax
c001ae64:	83 c8 ff             	or     eax,0xffffffff
c001ae67:	85 c9                	test   ecx,ecx
c001ae69:	89 c2                	mov    edx,eax
c001ae6b:	74 28                	je     c001ae95 <Sys::read(regs*)+0x61>
c001ae6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae75:	31 ff                	xor    edi,edi
c001ae77:	83 ec 0c             	sub    esp,0xc
c001ae7a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae7c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae80:	52                   	push   edx
c001ae81:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae84:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae87:	57                   	push   edi
c001ae88:	56                   	push   esi
c001ae89:	51                   	push   ecx
c001ae8a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae91:	83 c4 20             	add    esp,0x20
c001ae94:	99                   	cdq    
c001ae95:	83 c4 10             	add    esp,0x10
c001ae98:	5b                   	pop    ebx
c001ae99:	5e                   	pop    esi
c001ae9a:	5f                   	pop    edi
c001ae9b:	c3                   	ret    

c001ae9c <Sys::sbrk(regs*)>:
c001ae9c:	56                   	push   esi
c001ae9d:	53                   	push   ebx
c001ae9e:	50                   	push   eax
c001ae9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aea4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aea8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aeab:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001aeae:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001aeb4:	85 db                	test   ebx,ebx
c001aeb6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001aeb9:	74 02                	je     c001aebd <Sys::sbrk(regs*)+0x21>
c001aebb:	79 06                	jns    c001aec3 <Sys::sbrk(regs*)+0x27>
c001aebd:	89 f0                	mov    eax,esi
c001aebf:	31 d2                	xor    edx,edx
c001aec1:	eb 2a                	jmp    c001aeed <Sys::sbrk(regs*)+0x51>
c001aec3:	83 c8 ff             	or     eax,0xffffffff
c001aec6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001aecc:	89 c2                	mov    edx,eax
c001aece:	77 1d                	ja     c001aeed <Sys::sbrk(regs*)+0x51>
c001aed0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001aed6:	50                   	push   eax
c001aed7:	c1 ea 0c             	shr    edx,0xc
c001aeda:	68 07 0c 00 00       	push   0xc07
c001aedf:	52                   	push   edx
c001aee0:	51                   	push   ecx
c001aee1:	e8 f8 6b ff ff       	call   c0011ade <VAS::allocatePages(int, int)>
c001aee6:	89 f0                	mov    eax,esi
c001aee8:	31 d2                	xor    edx,edx
c001aeea:	83 c4 10             	add    esp,0x10
c001aeed:	59                   	pop    ecx
c001aeee:	5b                   	pop    ebx
c001aeef:	5e                   	pop    esi
c001aef0:	c3                   	ret    

c001aef1 <Sys::setCwd(regs*)>:
c001aef1:	83 ec 14             	sub    esp,0x14
c001aef4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aef8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aefb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af00:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af03:	e8 ab 80 ff ff       	call   c0012fb3 <Fs::setcwd(Process*, char*)>
c001af08:	83 c4 1c             	add    esp,0x1c
c001af0b:	99                   	cdq    
c001af0c:	c3                   	ret    

c001af0d <Sys::setTime(regs*)>:
c001af0d:	55                   	push   ebp
c001af0e:	31 c9                	xor    ecx,ecx
c001af10:	57                   	push   edi
c001af11:	bd 0c 00 00 00       	mov    ebp,0xc
c001af16:	56                   	push   esi
c001af17:	53                   	push   ebx
c001af18:	31 db                	xor    ebx,ebx
c001af1a:	83 ec 10             	sub    esp,0x10
c001af1d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af21:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001af24:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001af27:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001af2a:	89 c2                	mov    edx,eax
c001af2c:	66 81 ef 6c 07       	sub    di,0x76c
c001af31:	83 e2 1f             	and    edx,0x1f
c001af34:	c1 e7 10             	shl    edi,0x10
c001af37:	42                   	inc    edx
c001af38:	c1 e8 05             	shr    eax,0x5
c001af3b:	88 d1                	mov    cl,dl
c001af3d:	31 d2                	xor    edx,edx
c001af3f:	f7 f5                	div    ebp
c001af41:	89 dd                	mov    ebp,ebx
c001af43:	88 d5                	mov    ch,dl
c001af45:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001af4b:	0f b7 c1             	movzx  eax,cx
c001af4e:	31 d2                	xor    edx,edx
c001af50:	09 f8                	or     eax,edi
c001af52:	bf 3c 00 00 00       	mov    edi,0x3c
c001af57:	89 c1                	mov    ecx,eax
c001af59:	89 f0                	mov    eax,esi
c001af5b:	f7 f7                	div    edi
c001af5d:	c1 e2 10             	shl    edx,0x10
c001af60:	09 d5                	or     ebp,edx
c001af62:	31 d2                	xor    edx,edx
c001af64:	89 eb                	mov    ebx,ebp
c001af66:	f7 f7                	div    edi
c001af68:	bf 10 0e 00 00       	mov    edi,0xe10
c001af6d:	88 d7                	mov    bh,dl
c001af6f:	89 f0                	mov    eax,esi
c001af71:	31 d2                	xor    edx,edx
c001af73:	f7 f7                	div    edi
c001af75:	bf 18 00 00 00       	mov    edi,0x18
c001af7a:	31 d2                	xor    edx,edx
c001af7c:	f7 f7                	div    edi
c001af7e:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001af83:	88 d3                	mov    bl,dl
c001af85:	53                   	push   ebx
c001af86:	51                   	push   ecx
c001af87:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001af8d:	e8 6a 88 ff ff       	call   c00137fc <Clock::setTimeInDatetimeLocal(datetime_t)>
c001af92:	83 c4 1c             	add    esp,0x1c
c001af95:	83 f0 01             	xor    eax,0x1
c001af98:	5b                   	pop    ebx
c001af99:	0f b6 c0             	movzx  eax,al
c001af9c:	5e                   	pop    esi
c001af9d:	31 d2                	xor    edx,edx
c001af9f:	5f                   	pop    edi
c001afa0:	5d                   	pop    ebp
c001afa1:	c3                   	ret    

c001afa2 <Sys::timezone(regs*)>:
c001afa2:	53                   	push   ebx
c001afa3:	83 ec 08             	sub    esp,0x8
c001afa6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afaa:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001afae:	75 17                	jne    c001afc7 <Sys::timezone(regs*)+0x25>
c001afb0:	83 ec 0c             	sub    esp,0xc
c001afb3:	68 b9 b8 02 c0       	push   0xc002b8b9
c001afb8:	e8 26 77 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001afbd:	83 c8 ff             	or     eax,0xffffffff
c001afc0:	83 c4 10             	add    esp,0x10
c001afc3:	89 c2                	mov    edx,eax
c001afc5:	eb 20                	jmp    c001afe7 <Sys::timezone(regs*)+0x45>
c001afc7:	83 ec 0c             	sub    esp,0xc
c001afca:	68 ce b8 02 c0       	push   0xc002b8ce
c001afcf:	e8 0f 77 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001afd4:	58                   	pop    eax
c001afd5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001afd8:	e8 81 85 ff ff       	call   c001355e <User::loadClockSettings(int)>
c001afdd:	83 c4 10             	add    esp,0x10
c001afe0:	b8 01 00 00 00       	mov    eax,0x1
c001afe5:	31 d2                	xor    edx,edx
c001afe7:	83 c4 08             	add    esp,0x8
c001afea:	5b                   	pop    ebx
c001afeb:	c3                   	ret    

c001afec <Sys::write(regs*)>:
c001afec:	57                   	push   edi
c001afed:	56                   	push   esi
c001afee:	53                   	push   ebx
c001afef:	83 ec 10             	sub    esp,0x10
c001aff2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aff6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aff9:	83 f8 02             	cmp    eax,0x2
c001affc:	77 10                	ja     c001b00e <Sys::write(regs*)+0x22>
c001affe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b003:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b006:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b00c:	eb 0e                	jmp    c001b01c <Sys::write(regs*)+0x30>
c001b00e:	83 ec 0c             	sub    esp,0xc
c001b011:	50                   	push   eax
c001b012:	e8 b2 60 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b017:	83 c4 10             	add    esp,0x10
c001b01a:	89 c1                	mov    ecx,eax
c001b01c:	83 c8 ff             	or     eax,0xffffffff
c001b01f:	85 c9                	test   ecx,ecx
c001b021:	89 c2                	mov    edx,eax
c001b023:	74 28                	je     c001b04d <Sys::write(regs*)+0x61>
c001b025:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b02d:	31 ff                	xor    edi,edi
c001b02f:	83 ec 0c             	sub    esp,0xc
c001b032:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b034:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b038:	52                   	push   edx
c001b039:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b03c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b03f:	57                   	push   edi
c001b040:	56                   	push   esi
c001b041:	51                   	push   ecx
c001b042:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b049:	83 c4 20             	add    esp,0x20
c001b04c:	99                   	cdq    
c001b04d:	83 c4 10             	add    esp,0x10
c001b050:	5b                   	pop    ebx
c001b051:	5e                   	pop    esi
c001b052:	5f                   	pop    edi
c001b053:	c3                   	ret    

c001b054 <Sys::wsbe(regs*)>:
c001b054:	57                   	push   edi
c001b055:	b9 0b 00 00 00       	mov    ecx,0xb
c001b05a:	56                   	push   esi
c001b05b:	be 0d b9 02 c0       	mov    esi,0xc002b90d
c001b060:	53                   	push   ebx
c001b061:	83 ec 30             	sub    esp,0x30
c001b064:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b068:	fc                   	cld    
c001b069:	83 ec 0c             	sub    esp,0xc
c001b06c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b06e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b072:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b077:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b07a:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b080:	8b 06                	mov    eax,DWORD PTR [esi]
c001b082:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b085:	57                   	push   edi
c001b086:	e8 e1 56 fe ff       	call   c000076c <strlen>
c001b08b:	5a                   	pop    edx
c001b08c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b090:	52                   	push   edx
c001b091:	31 d2                	xor    edx,edx
c001b093:	57                   	push   edi
c001b094:	52                   	push   edx
c001b095:	50                   	push   eax
c001b096:	56                   	push   esi
c001b097:	ff d3                	call   ebx
c001b099:	83 c4 14             	add    esp,0x14
c001b09c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b0a0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b0a3:	e8 d9 31 00 00       	call   c001e281 <terminateTask(int)>
c001b0a8:	83 c4 40             	add    esp,0x40
c001b0ab:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b0b0:	5b                   	pop    ebx
c001b0b1:	31 d2                	xor    edx,edx
c001b0b3:	5e                   	pop    esi
c001b0b4:	5f                   	pop    edi
c001b0b5:	c3                   	ret    

c001b0b6 <Sys::yield(regs*)>:
c001b0b6:	57                   	push   edi
c001b0b7:	56                   	push   esi
c001b0b8:	53                   	push   ebx
c001b0b9:	fa                   	cli    
c001b0ba:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001b0c0:	e8 1c 29 00 00       	call   c001d9e1 <schedule()>
c001b0c5:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001b0ca:	48                   	dec    eax
c001b0cb:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001b0d0:	75 01                	jne    c001b0d3 <Sys::yield(regs*)+0x1d>
c001b0d2:	fb                   	sti    
c001b0d3:	8b 35 30 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e030
c001b0d9:	8b 3d 34 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e034
c001b0df:	89 f0                	mov    eax,esi
c001b0e1:	89 fb                	mov    ebx,edi
c001b0e3:	89 f1                	mov    ecx,esi
c001b0e5:	c1 e0 07             	shl    eax,0x7
c001b0e8:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b0ec:	25 80 30 0f 00       	and    eax,0xf3080
c001b0f1:	c1 eb 17             	shr    ebx,0x17
c001b0f4:	31 c8                	xor    eax,ecx
c001b0f6:	89 da                	mov    edx,ebx
c001b0f8:	5b                   	pop    ebx
c001b0f9:	5e                   	pop    esi
c001b0fa:	5f                   	pop    edi
c001b0fb:	c3                   	ret    

c001b0fc <sysCallSeekDir(regs*)>:
c001b0fc:	31 c0                	xor    eax,eax
c001b0fe:	31 d2                	xor    edx,edx
c001b100:	c3                   	ret    

c001b101 <sysCallTellDir(regs*)>:
c001b101:	31 c0                	xor    eax,eax
c001b103:	31 d2                	xor    edx,edx
c001b105:	c3                   	ret    

c001b106 <sysCallVerify(regs*)>:
c001b106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b10a:	31 d2                	xor    edx,edx
c001b10c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b10f:	c3                   	ret    

c001b110 <sysCallGetArgc(regs*)>:
c001b110:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b115:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b118:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b11e:	99                   	cdq    
c001b11f:	c3                   	ret    

c001b120 <sysFormatDisk(regs*)>:
c001b120:	56                   	push   esi
c001b121:	53                   	push   ebx
c001b122:	53                   	push   ebx
c001b123:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b127:	8b 1d 34 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db34
c001b12d:	eb 25                	jmp    c001b154 <sysFormatDisk(regs*)+0x34>
c001b12f:	83 ec 0c             	sub    esp,0xc
c001b132:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b135:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b137:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b13a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b13d:	50                   	push   eax
c001b13e:	ff 34 85 c0 df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2040]
c001b145:	53                   	push   ebx
c001b146:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b149:	83 c4 20             	add    esp,0x20
c001b14c:	83 f8 08             	cmp    eax,0x8
c001b14f:	75 12                	jne    c001b163 <sysFormatDisk(regs*)+0x43>
c001b151:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b154:	85 db                	test   ebx,ebx
c001b156:	75 d7                	jne    c001b12f <sysFormatDisk(regs*)+0xf>
c001b158:	59                   	pop    ecx
c001b159:	b8 03 00 00 00       	mov    eax,0x3
c001b15e:	31 d2                	xor    edx,edx
c001b160:	5b                   	pop    ebx
c001b161:	5e                   	pop    esi
c001b162:	c3                   	ret    
c001b163:	85 c0                	test   eax,eax
c001b165:	74 1b                	je     c001b182 <sysFormatDisk(regs*)+0x62>
c001b167:	83 f8 09             	cmp    eax,0x9
c001b16a:	74 0b                	je     c001b177 <sysFormatDisk(regs*)+0x57>
c001b16c:	59                   	pop    ecx
c001b16d:	b8 02 00 00 00       	mov    eax,0x2
c001b172:	31 d2                	xor    edx,edx
c001b174:	5b                   	pop    ebx
c001b175:	5e                   	pop    esi
c001b176:	c3                   	ret    
c001b177:	59                   	pop    ecx
c001b178:	b8 01 00 00 00       	mov    eax,0x1
c001b17d:	31 d2                	xor    edx,edx
c001b17f:	5b                   	pop    ebx
c001b180:	5e                   	pop    esi
c001b181:	c3                   	ret    
c001b182:	59                   	pop    ecx
c001b183:	31 c0                	xor    eax,eax
c001b185:	31 d2                	xor    edx,edx
c001b187:	5b                   	pop    ebx
c001b188:	5e                   	pop    esi
c001b189:	c3                   	ret    

c001b18a <sysSetDiskVolumeLabel(regs*)>:
c001b18a:	56                   	push   esi
c001b18b:	53                   	push   ebx
c001b18c:	53                   	push   ebx
c001b18d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b191:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b194:	83 f8 19             	cmp    eax,0x19
c001b197:	77 29                	ja     c001b1c2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b199:	8b 0c 85 c0 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2040]
c001b1a0:	85 c9                	test   ecx,ecx
c001b1a2:	74 1e                	je     c001b1c2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b1a4:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b1a7:	85 d2                	test   edx,edx
c001b1a9:	74 17                	je     c001b1c2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b1ab:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b1b1:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b1b3:	52                   	push   edx
c001b1b4:	50                   	push   eax
c001b1b5:	51                   	push   ecx
c001b1b6:	53                   	push   ebx
c001b1b7:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b1ba:	83 c4 10             	add    esp,0x10
c001b1bd:	99                   	cdq    
c001b1be:	59                   	pop    ecx
c001b1bf:	5b                   	pop    ebx
c001b1c0:	5e                   	pop    esi
c001b1c1:	c3                   	ret    
c001b1c2:	59                   	pop    ecx
c001b1c3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1cd:	5b                   	pop    ebx
c001b1ce:	5e                   	pop    esi
c001b1cf:	c3                   	ret    

c001b1d0 <sysGetDiskVolumeLabel(regs*)>:
c001b1d0:	57                   	push   edi
c001b1d1:	56                   	push   esi
c001b1d2:	53                   	push   ebx
c001b1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1d7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b1da:	83 fa 19             	cmp    edx,0x19
c001b1dd:	77 34                	ja     c001b213 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1df:	8b 0c 95 c0 df 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2040]
c001b1e6:	85 c9                	test   ecx,ecx
c001b1e8:	74 29                	je     c001b213 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1ea:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b1ed:	85 db                	test   ebx,ebx
c001b1ef:	74 22                	je     c001b213 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1f1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b1f4:	85 c0                	test   eax,eax
c001b1f6:	74 1b                	je     c001b213 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1f8:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b1fe:	83 ec 0c             	sub    esp,0xc
c001b201:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b203:	50                   	push   eax
c001b204:	53                   	push   ebx
c001b205:	52                   	push   edx
c001b206:	51                   	push   ecx
c001b207:	56                   	push   esi
c001b208:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b20b:	83 c4 20             	add    esp,0x20
c001b20e:	99                   	cdq    
c001b20f:	5b                   	pop    ebx
c001b210:	5e                   	pop    esi
c001b211:	5f                   	pop    edi
c001b212:	c3                   	ret    
c001b213:	5b                   	pop    ebx
c001b214:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b219:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b21e:	5e                   	pop    esi
c001b21f:	5f                   	pop    edi
c001b220:	c3                   	ret    

c001b221 <sysShutdown(regs*)>:
c001b221:	83 ec 0c             	sub    esp,0xc
c001b224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b228:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b22b:	85 c0                	test   eax,eax
c001b22d:	74 18                	je     c001b247 <sysShutdown(regs*)+0x26>
c001b22f:	83 f8 01             	cmp    eax,0x1
c001b232:	74 38                	je     c001b26c <sysShutdown(regs*)+0x4b>
c001b234:	83 f8 02             	cmp    eax,0x2
c001b237:	74 24                	je     c001b25d <sysShutdown(regs*)+0x3c>
c001b239:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b23e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b243:	83 c4 0c             	add    esp,0xc
c001b246:	c3                   	ret    
c001b247:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001b24c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b24e:	6a 00                	push   0x0
c001b250:	6a 00                	push   0x0
c001b252:	6a 00                	push   0x0
c001b254:	50                   	push   eax
c001b255:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b258:	83 c4 10             	add    esp,0x10
c001b25b:	eb dc                	jmp    c001b239 <sysShutdown(regs*)+0x18>
c001b25d:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001b262:	8b 10                	mov    edx,DWORD PTR [eax]
c001b264:	6a 00                	push   0x0
c001b266:	6a 00                	push   0x0
c001b268:	6a 01                	push   0x1
c001b26a:	eb e8                	jmp    c001b254 <sysShutdown(regs*)+0x33>
c001b26c:	a1 60 00 03 c0       	mov    eax,ds:0xc0030060
c001b271:	85 c0                	test   eax,eax
c001b273:	74 02                	je     c001b277 <sysShutdown(regs*)+0x56>
c001b275:	ff d0                	call   eax
c001b277:	31 c0                	xor    eax,eax
c001b279:	31 d2                	xor    edx,edx
c001b27b:	83 c4 0c             	add    esp,0xc
c001b27e:	c3                   	ret    

c001b27f <sysCallRealpath(regs*)>:
c001b27f:	83 ec 0c             	sub    esp,0xc
c001b282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b286:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b289:	85 d2                	test   edx,edx
c001b28b:	74 07                	je     c001b294 <sysCallRealpath(regs*)+0x15>
c001b28d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b290:	85 c0                	test   eax,eax
c001b292:	75 0b                	jne    c001b29f <sysCallRealpath(regs*)+0x20>
c001b294:	b8 01 00 00 00       	mov    eax,0x1
c001b299:	31 d2                	xor    edx,edx
c001b29b:	83 c4 0c             	add    esp,0xc
c001b29e:	c3                   	ret    
c001b29f:	51                   	push   ecx
c001b2a0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b2a6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b2a9:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b2af:	51                   	push   ecx
c001b2b0:	52                   	push   edx
c001b2b1:	50                   	push   eax
c001b2b2:	e8 e1 77 ff ff       	call   c0012a98 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b2b7:	83 c4 10             	add    esp,0x10
c001b2ba:	31 c0                	xor    eax,eax
c001b2bc:	31 d2                	xor    edx,edx
c001b2be:	83 c4 0c             	add    esp,0xc
c001b2c1:	c3                   	ret    

c001b2c2 <sysCallReadDir(regs*)>:
c001b2c2:	53                   	push   ebx
c001b2c3:	83 ec 18             	sub    esp,0x18
c001b2c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2ca:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2cd:	83 f8 02             	cmp    eax,0x2
c001b2d0:	76 60                	jbe    c001b332 <sysCallReadDir(regs*)+0x70>
c001b2d2:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b2d9:	77 48                	ja     c001b323 <sysCallReadDir(regs*)+0x61>
c001b2db:	83 ec 0c             	sub    esp,0xc
c001b2de:	50                   	push   eax
c001b2df:	e8 e5 5d ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b2e4:	83 c4 10             	add    esp,0x10
c001b2e7:	85 c0                	test   eax,eax
c001b2e9:	74 38                	je     c001b323 <sysCallReadDir(regs*)+0x61>
c001b2eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2f3:	83 ec 0c             	sub    esp,0xc
c001b2f6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2f8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b2fc:	51                   	push   ecx
c001b2fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b300:	6a 00                	push   0x0
c001b302:	68 10 01 00 00       	push   0x110
c001b307:	50                   	push   eax
c001b308:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b30b:	83 c4 20             	add    esp,0x20
c001b30e:	85 c0                	test   eax,eax
c001b310:	74 29                	je     c001b33b <sysCallReadDir(regs*)+0x79>
c001b312:	83 f8 07             	cmp    eax,0x7
c001b315:	74 1b                	je     c001b332 <sysCallReadDir(regs*)+0x70>
c001b317:	b8 02 00 00 00       	mov    eax,0x2
c001b31c:	31 d2                	xor    edx,edx
c001b31e:	83 c4 18             	add    esp,0x18
c001b321:	5b                   	pop    ebx
c001b322:	c3                   	ret    
c001b323:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b328:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b32d:	83 c4 18             	add    esp,0x18
c001b330:	5b                   	pop    ebx
c001b331:	c3                   	ret    
c001b332:	b8 01 00 00 00       	mov    eax,0x1
c001b337:	31 d2                	xor    edx,edx
c001b339:	eb e3                	jmp    c001b31e <sysCallReadDir(regs*)+0x5c>
c001b33b:	31 c0                	xor    eax,eax
c001b33d:	31 d2                	xor    edx,edx
c001b33f:	eb dd                	jmp    c001b31e <sysCallReadDir(regs*)+0x5c>

c001b341 <sysCallIsATTY(regs*)>:
c001b341:	83 ec 0c             	sub    esp,0xc
c001b344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b348:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b34b:	83 f8 02             	cmp    eax,0x2
c001b34e:	76 07                	jbe    c001b357 <sysCallIsATTY(regs*)+0x16>
c001b350:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b355:	75 26                	jne    c001b37d <sysCallIsATTY(regs*)+0x3c>
c001b357:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b35c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b35f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b365:	85 c0                	test   eax,eax
c001b367:	74 24                	je     c001b38d <sysCallIsATTY(regs*)+0x4c>
c001b369:	83 ec 0c             	sub    esp,0xc
c001b36c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b36e:	50                   	push   eax
c001b36f:	ff 12                	call   DWORD PTR [edx]
c001b371:	31 d2                	xor    edx,edx
c001b373:	0f b6 c0             	movzx  eax,al
c001b376:	83 c4 10             	add    esp,0x10
c001b379:	83 c4 0c             	add    esp,0xc
c001b37c:	c3                   	ret    
c001b37d:	83 ec 0c             	sub    esp,0xc
c001b380:	50                   	push   eax
c001b381:	e8 43 5d ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b386:	83 c4 10             	add    esp,0x10
c001b389:	85 c0                	test   eax,eax
c001b38b:	75 dc                	jne    c001b369 <sysCallIsATTY(regs*)+0x28>
c001b38d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b392:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b397:	83 c4 0c             	add    esp,0xc
c001b39a:	c3                   	ret    

c001b39b <sysCallSeek(regs*)>:
c001b39b:	53                   	push   ebx
c001b39c:	83 ec 08             	sub    esp,0x8
c001b39f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3a6:	8d 50 fd             	lea    edx,[eax-0x3]
c001b3a9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b3af:	77 32                	ja     c001b3e3 <sysCallSeek(regs*)+0x48>
c001b3b1:	83 ec 0c             	sub    esp,0xc
c001b3b4:	50                   	push   eax
c001b3b5:	e8 0f 5d ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b3ba:	83 c4 0c             	add    esp,0xc
c001b3bd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b3c0:	31 db                	xor    ebx,ebx
c001b3c2:	53                   	push   ebx
c001b3c3:	51                   	push   ecx
c001b3c4:	50                   	push   eax
c001b3c5:	e8 9a 79 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001b3ca:	83 c4 10             	add    esp,0x10
c001b3cd:	85 c0                	test   eax,eax
c001b3cf:	0f 95 c0             	setne  al
c001b3d2:	31 d2                	xor    edx,edx
c001b3d4:	0f b6 c0             	movzx  eax,al
c001b3d7:	f7 d8                	neg    eax
c001b3d9:	83 d2 00             	adc    edx,0x0
c001b3dc:	83 c4 08             	add    esp,0x8
c001b3df:	f7 da                	neg    edx
c001b3e1:	5b                   	pop    ebx
c001b3e2:	c3                   	ret    
c001b3e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3ed:	83 c4 08             	add    esp,0x8
c001b3f0:	5b                   	pop    ebx
c001b3f1:	c3                   	ret    

c001b3f2 <sysCallTell(regs*)>:
c001b3f2:	53                   	push   ebx
c001b3f3:	83 ec 08             	sub    esp,0x8
c001b3f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3fd:	83 f8 02             	cmp    eax,0x2
c001b400:	76 4d                	jbe    c001b44f <sysCallTell(regs*)+0x5d>
c001b402:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b407:	76 19                	jbe    c001b422 <sysCallTell(regs*)+0x30>
c001b409:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b40c:	31 d2                	xor    edx,edx
c001b40e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b414:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b41b:	31 c0                	xor    eax,eax
c001b41d:	83 c4 08             	add    esp,0x8
c001b420:	5b                   	pop    ebx
c001b421:	c3                   	ret    
c001b422:	83 ec 0c             	sub    esp,0xc
c001b425:	50                   	push   eax
c001b426:	e8 9e 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b42b:	5a                   	pop    edx
c001b42c:	59                   	pop    ecx
c001b42d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b430:	50                   	push   eax
c001b431:	e8 84 79 ff ff       	call   c0012dba <File::tell(unsigned long long*)>
c001b436:	83 c4 10             	add    esp,0x10
c001b439:	85 c0                	test   eax,eax
c001b43b:	0f 95 c0             	setne  al
c001b43e:	31 d2                	xor    edx,edx
c001b440:	0f b6 c0             	movzx  eax,al
c001b443:	f7 d8                	neg    eax
c001b445:	83 d2 00             	adc    edx,0x0
c001b448:	83 c4 08             	add    esp,0x8
c001b44b:	f7 da                	neg    edx
c001b44d:	5b                   	pop    ebx
c001b44e:	c3                   	ret    
c001b44f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b454:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b459:	83 c4 08             	add    esp,0x8
c001b45c:	5b                   	pop    ebx
c001b45d:	c3                   	ret    

c001b45e <sysCallSize(regs*)>:
c001b45e:	53                   	push   ebx
c001b45f:	83 ec 18             	sub    esp,0x18
c001b462:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b466:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b469:	83 f8 02             	cmp    eax,0x2
c001b46c:	76 53                	jbe    c001b4c1 <sysCallSize(regs*)+0x63>
c001b46e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b473:	76 19                	jbe    c001b48e <sysCallSize(regs*)+0x30>
c001b475:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b478:	31 d2                	xor    edx,edx
c001b47a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b480:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b487:	31 c0                	xor    eax,eax
c001b489:	83 c4 18             	add    esp,0x18
c001b48c:	5b                   	pop    ebx
c001b48d:	c3                   	ret    
c001b48e:	83 ec 0c             	sub    esp,0xc
c001b491:	50                   	push   eax
c001b492:	e8 32 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b497:	83 c4 0c             	add    esp,0xc
c001b49a:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b49e:	52                   	push   edx
c001b49f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b4a2:	50                   	push   eax
c001b4a3:	e8 aa 7a ff ff       	call   c0012f52 <File::stat(unsigned long long*, bool*)>
c001b4a8:	83 c4 10             	add    esp,0x10
c001b4ab:	85 c0                	test   eax,eax
c001b4ad:	0f 95 c0             	setne  al
c001b4b0:	31 d2                	xor    edx,edx
c001b4b2:	0f b6 c0             	movzx  eax,al
c001b4b5:	f7 d8                	neg    eax
c001b4b7:	83 d2 00             	adc    edx,0x0
c001b4ba:	83 c4 18             	add    esp,0x18
c001b4bd:	f7 da                	neg    edx
c001b4bf:	5b                   	pop    ebx
c001b4c0:	c3                   	ret    
c001b4c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4cb:	83 c4 18             	add    esp,0x18
c001b4ce:	5b                   	pop    ebx
c001b4cf:	c3                   	ret    

c001b4d0 <sysCallSizeFromFilename(regs*)>:
c001b4d0:	57                   	push   edi
c001b4d1:	56                   	push   esi
c001b4d2:	53                   	push   ebx
c001b4d3:	83 ec 20             	sub    esp,0x20
c001b4d6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b4da:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b4dd:	83 fb 02             	cmp    ebx,0x2
c001b4e0:	0f 86 88 00 00 00    	jbe    c001b56e <sysCallSizeFromFilename(regs*)+0x9e>
c001b4e6:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b4ec:	76 1b                	jbe    c001b509 <sysCallSizeFromFilename(regs*)+0x39>
c001b4ee:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b4f1:	31 d2                	xor    edx,edx
c001b4f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b500:	83 c4 20             	add    esp,0x20
c001b503:	31 c0                	xor    eax,eax
c001b505:	5b                   	pop    ebx
c001b506:	5e                   	pop    esi
c001b507:	5f                   	pop    edi
c001b508:	c3                   	ret    
c001b509:	83 ec 0c             	sub    esp,0xc
c001b50c:	68 14 01 00 00       	push   0x114
c001b511:	e8 83 40 ff ff       	call   c000f599 <malloc>
c001b516:	83 c4 0c             	add    esp,0xc
c001b519:	89 c7                	mov    edi,eax
c001b51b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b520:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b523:	53                   	push   ebx
c001b524:	57                   	push   edi
c001b525:	e8 18 77 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c001b52a:	83 c4 0c             	add    esp,0xc
c001b52d:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b531:	50                   	push   eax
c001b532:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b535:	57                   	push   edi
c001b536:	e8 17 7a ff ff       	call   c0012f52 <File::stat(unsigned long long*, bool*)>
c001b53b:	83 c4 10             	add    esp,0x10
c001b53e:	85 ff                	test   edi,edi
c001b540:	74 14                	je     c001b556 <sysCallSizeFromFilename(regs*)+0x86>
c001b542:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b546:	8b 17                	mov    edx,DWORD PTR [edi]
c001b548:	83 ec 0c             	sub    esp,0xc
c001b54b:	57                   	push   edi
c001b54c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b54f:	83 c4 10             	add    esp,0x10
c001b552:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b556:	85 c0                	test   eax,eax
c001b558:	0f 95 c0             	setne  al
c001b55b:	31 d2                	xor    edx,edx
c001b55d:	0f b6 c0             	movzx  eax,al
c001b560:	f7 d8                	neg    eax
c001b562:	83 d2 00             	adc    edx,0x0
c001b565:	83 c4 20             	add    esp,0x20
c001b568:	f7 da                	neg    edx
c001b56a:	5b                   	pop    ebx
c001b56b:	5e                   	pop    esi
c001b56c:	5f                   	pop    edi
c001b56d:	c3                   	ret    
c001b56e:	83 c4 20             	add    esp,0x20
c001b571:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b576:	5b                   	pop    ebx
c001b577:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b57c:	5e                   	pop    esi
c001b57d:	5f                   	pop    edi
c001b57e:	c3                   	ret    

c001b57f <sysCallClose(regs*)>:
c001b57f:	53                   	push   ebx
c001b580:	83 ec 08             	sub    esp,0x8
c001b583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b587:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b58a:	83 f8 02             	cmp    eax,0x2
c001b58d:	76 41                	jbe    c001b5d0 <sysCallClose(regs*)+0x51>
c001b58f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b595:	83 fa 01             	cmp    edx,0x1
c001b598:	76 2d                	jbe    c001b5c7 <sysCallClose(regs*)+0x48>
c001b59a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b59f:	77 2f                	ja     c001b5d0 <sysCallClose(regs*)+0x51>
c001b5a1:	83 ec 0c             	sub    esp,0xc
c001b5a4:	50                   	push   eax
c001b5a5:	e8 1f 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b5aa:	89 c3                	mov    ebx,eax
c001b5ac:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5af:	e8 50 77 ff ff       	call   c0012d04 <File::close()>
c001b5b4:	83 c4 10             	add    esp,0x10
c001b5b7:	85 db                	test   ebx,ebx
c001b5b9:	74 0c                	je     c001b5c7 <sysCallClose(regs*)+0x48>
c001b5bb:	83 ec 0c             	sub    esp,0xc
c001b5be:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5c0:	53                   	push   ebx
c001b5c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5c4:	83 c4 10             	add    esp,0x10
c001b5c7:	31 c0                	xor    eax,eax
c001b5c9:	31 d2                	xor    edx,edx
c001b5cb:	83 c4 08             	add    esp,0x8
c001b5ce:	5b                   	pop    ebx
c001b5cf:	c3                   	ret    
c001b5d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5da:	83 c4 08             	add    esp,0x8
c001b5dd:	5b                   	pop    ebx
c001b5de:	c3                   	ret    

c001b5df <sysCallOpenDir(regs*)>:
c001b5df:	56                   	push   esi
c001b5e0:	53                   	push   ebx
c001b5e1:	53                   	push   ebx
c001b5e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5e6:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b5e9:	85 f6                	test   esi,esi
c001b5eb:	74 59                	je     c001b646 <sysCallOpenDir(regs*)+0x67>
c001b5ed:	83 ec 0c             	sub    esp,0xc
c001b5f0:	68 14 01 00 00       	push   0x114
c001b5f5:	e8 9f 3f ff ff       	call   c000f599 <malloc>
c001b5fa:	83 c4 0c             	add    esp,0xc
c001b5fd:	89 c6                	mov    esi,eax
c001b5ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b604:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b607:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b60a:	56                   	push   esi
c001b60b:	e8 de 7a ff ff       	call   c00130ee <Directory::Directory(char const*, Process*)>
c001b610:	83 c4 10             	add    esp,0x10
c001b613:	85 f6                	test   esi,esi
c001b615:	74 2f                	je     c001b646 <sysCallOpenDir(regs*)+0x67>
c001b617:	83 ec 0c             	sub    esp,0xc
c001b61a:	56                   	push   esi
c001b61b:	e8 32 7b ff ff       	call   c0013152 <Directory::open()>
c001b620:	83 c4 10             	add    esp,0x10
c001b623:	85 c0                	test   eax,eax
c001b625:	75 1f                	jne    c001b646 <sysCallOpenDir(regs*)+0x67>
c001b627:	83 ec 0c             	sub    esp,0xc
c001b62a:	56                   	push   esi
c001b62b:	e8 a4 57 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001b630:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b633:	83 c4 10             	add    esp,0x10
c001b636:	89 02                	mov    DWORD PTR [edx],eax
c001b638:	c1 f8 1f             	sar    eax,0x1f
c001b63b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b63e:	31 c0                	xor    eax,eax
c001b640:	59                   	pop    ecx
c001b641:	31 d2                	xor    edx,edx
c001b643:	5b                   	pop    ebx
c001b644:	5e                   	pop    esi
c001b645:	c3                   	ret    
c001b646:	59                   	pop    ecx
c001b647:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b64c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b651:	5b                   	pop    ebx
c001b652:	5e                   	pop    esi
c001b653:	c3                   	ret    

c001b654 <sysCallCloseDir(regs*)>:
c001b654:	53                   	push   ebx
c001b655:	83 ec 08             	sub    esp,0x8
c001b658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b65c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b65f:	8d 50 fd             	lea    edx,[eax-0x3]
c001b662:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b668:	77 2f                	ja     c001b699 <sysCallCloseDir(regs*)+0x45>
c001b66a:	83 ec 0c             	sub    esp,0xc
c001b66d:	50                   	push   eax
c001b66e:	e8 56 5a ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b673:	89 c3                	mov    ebx,eax
c001b675:	89 04 24             	mov    DWORD PTR [esp],eax
c001b678:	e8 31 7b ff ff       	call   c00131ae <Directory::close()>
c001b67d:	83 c4 10             	add    esp,0x10
c001b680:	85 db                	test   ebx,ebx
c001b682:	74 0c                	je     c001b690 <sysCallCloseDir(regs*)+0x3c>
c001b684:	83 ec 0c             	sub    esp,0xc
c001b687:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b689:	53                   	push   ebx
c001b68a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b68d:	83 c4 10             	add    esp,0x10
c001b690:	31 c0                	xor    eax,eax
c001b692:	31 d2                	xor    edx,edx
c001b694:	83 c4 08             	add    esp,0x8
c001b697:	5b                   	pop    ebx
c001b698:	c3                   	ret    
c001b699:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b69e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6a3:	83 c4 08             	add    esp,0x8
c001b6a6:	5b                   	pop    ebx
c001b6a7:	c3                   	ret    

c001b6a8 <sysCallMakeDir(regs*)>:
c001b6a8:	56                   	push   esi
c001b6a9:	53                   	push   ebx
c001b6aa:	83 ec 10             	sub    esp,0x10
c001b6ad:	68 14 01 00 00       	push   0x114
c001b6b2:	e8 e2 3e ff ff       	call   c000f599 <malloc>
c001b6b7:	83 c4 0c             	add    esp,0xc
c001b6ba:	89 c3                	mov    ebx,eax
c001b6bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6c1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6c8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6cb:	53                   	push   ebx
c001b6cc:	e8 1d 7a ff ff       	call   c00130ee <Directory::Directory(char const*, Process*)>
c001b6d1:	83 c4 10             	add    esp,0x10
c001b6d4:	85 db                	test   ebx,ebx
c001b6d6:	74 32                	je     c001b70a <sysCallMakeDir(regs*)+0x62>
c001b6d8:	83 ec 0c             	sub    esp,0xc
c001b6db:	53                   	push   ebx
c001b6dc:	e8 51 7c ff ff       	call   c0013332 <Directory::create()>
c001b6e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6e4:	89 c6                	mov    esi,eax
c001b6e6:	e8 c3 7a ff ff       	call   c00131ae <Directory::close()>
c001b6eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6f3:	83 c4 10             	add    esp,0x10
c001b6f6:	31 c0                	xor    eax,eax
c001b6f8:	59                   	pop    ecx
c001b6f9:	85 f6                	test   esi,esi
c001b6fb:	5b                   	pop    ebx
c001b6fc:	0f 95 c0             	setne  al
c001b6ff:	5e                   	pop    esi
c001b700:	31 d2                	xor    edx,edx
c001b702:	f7 d8                	neg    eax
c001b704:	83 d2 00             	adc    edx,0x0
c001b707:	f7 da                	neg    edx
c001b709:	c3                   	ret    
c001b70a:	59                   	pop    ecx
c001b70b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b710:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b715:	5b                   	pop    ebx
c001b716:	5e                   	pop    esi
c001b717:	c3                   	ret    

c001b718 <sysCallWait(regs*)>:
c001b718:	83 ec 10             	sub    esp,0x10
c001b71b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b71f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b722:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b725:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b728:	e8 b7 24 00 00       	call   c001dbe4 <waitTask(int, int*, int)>
c001b72d:	83 c4 1c             	add    esp,0x1c
c001b730:	99                   	cdq    
c001b731:	c3                   	ret    

c001b732 <sysCallNotImpl(regs*)>:
c001b732:	83 ec 18             	sub    esp,0x18
c001b735:	68 39 b9 02 c0       	push   0xc002b939
c001b73a:	e8 10 e7 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001b73f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b744:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b749:	83 c4 1c             	add    esp,0x1c
c001b74c:	c3                   	ret    

c001b74d <sysPanic(regs*)>:
c001b74d:	83 ec 18             	sub    esp,0x18
c001b750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b754:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b757:	e8 f3 e6 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001b75c:	b8 01 00 00 00       	mov    eax,0x1
c001b761:	31 d2                	xor    edx,edx
c001b763:	83 c4 1c             	add    esp,0x1c
c001b766:	c3                   	ret    

c001b767 <sysCallRmdir(regs*)>:
c001b767:	56                   	push   esi
c001b768:	53                   	push   ebx
c001b769:	83 ec 20             	sub    esp,0x20
c001b76c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b770:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b773:	68 14 01 00 00       	push   0x114
c001b778:	e8 1c 3e ff ff       	call   c000f599 <malloc>
c001b77d:	83 c4 0c             	add    esp,0xc
c001b780:	89 c3                	mov    ebx,eax
c001b782:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b787:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b78a:	56                   	push   esi
c001b78b:	53                   	push   ebx
c001b78c:	e8 b1 74 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c001b791:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b794:	e8 85 76 ff ff       	call   c0012e1e <File::unlink()>
c001b799:	83 c4 10             	add    esp,0x10
c001b79c:	85 db                	test   ebx,ebx
c001b79e:	74 14                	je     c001b7b4 <sysCallRmdir(regs*)+0x4d>
c001b7a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7a4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7a6:	83 ec 0c             	sub    esp,0xc
c001b7a9:	53                   	push   ebx
c001b7aa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7ad:	83 c4 10             	add    esp,0x10
c001b7b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7b4:	85 c0                	test   eax,eax
c001b7b6:	0f 95 c0             	setne  al
c001b7b9:	31 d2                	xor    edx,edx
c001b7bb:	0f b6 c0             	movzx  eax,al
c001b7be:	f7 d8                	neg    eax
c001b7c0:	83 d2 00             	adc    edx,0x0
c001b7c3:	83 c4 14             	add    esp,0x14
c001b7c6:	f7 da                	neg    edx
c001b7c8:	5b                   	pop    ebx
c001b7c9:	5e                   	pop    esi
c001b7ca:	c3                   	ret    

c001b7cb <sysCallUnlink(regs*)>:
c001b7cb:	56                   	push   esi
c001b7cc:	53                   	push   ebx
c001b7cd:	83 ec 20             	sub    esp,0x20
c001b7d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7d4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7d7:	68 14 01 00 00       	push   0x114
c001b7dc:	e8 b8 3d ff ff       	call   c000f599 <malloc>
c001b7e1:	83 c4 0c             	add    esp,0xc
c001b7e4:	89 c3                	mov    ebx,eax
c001b7e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7eb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7ee:	56                   	push   esi
c001b7ef:	53                   	push   ebx
c001b7f0:	e8 4d 74 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c001b7f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7f8:	e8 21 76 ff ff       	call   c0012e1e <File::unlink()>
c001b7fd:	83 c4 10             	add    esp,0x10
c001b800:	85 db                	test   ebx,ebx
c001b802:	74 14                	je     c001b818 <sysCallUnlink(regs*)+0x4d>
c001b804:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b808:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b80a:	83 ec 0c             	sub    esp,0xc
c001b80d:	53                   	push   ebx
c001b80e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b811:	83 c4 10             	add    esp,0x10
c001b814:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b818:	85 c0                	test   eax,eax
c001b81a:	0f 95 c0             	setne  al
c001b81d:	31 d2                	xor    edx,edx
c001b81f:	0f b6 c0             	movzx  eax,al
c001b822:	f7 d8                	neg    eax
c001b824:	83 d2 00             	adc    edx,0x0
c001b827:	83 c4 14             	add    esp,0x14
c001b82a:	f7 da                	neg    edx
c001b82c:	5b                   	pop    ebx
c001b82d:	5e                   	pop    esi
c001b82e:	c3                   	ret    

c001b82f <sysCallGetArgv(regs*)>:
c001b82f:	83 ec 0c             	sub    esp,0xc
c001b832:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b836:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b839:	85 c0                	test   eax,eax
c001b83b:	78 2b                	js     c001b868 <sysCallGetArgv(regs*)+0x39>
c001b83d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b843:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b846:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b84c:	7d 1a                	jge    c001b868 <sysCallGetArgv(regs*)+0x39>
c001b84e:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b855:	85 c0                	test   eax,eax
c001b857:	74 17                	je     c001b870 <sysCallGetArgv(regs*)+0x41>
c001b859:	83 ec 08             	sub    esp,0x8
c001b85c:	50                   	push   eax
c001b85d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b860:	e8 a7 4f fe ff       	call   c000080c <strcpy>
c001b865:	83 c4 10             	add    esp,0x10
c001b868:	31 c0                	xor    eax,eax
c001b86a:	31 d2                	xor    edx,edx
c001b86c:	83 c4 0c             	add    esp,0xc
c001b86f:	c3                   	ret    
c001b870:	b8 01 00 00 00       	mov    eax,0x1
c001b875:	31 d2                	xor    edx,edx
c001b877:	83 c4 0c             	add    esp,0xc
c001b87a:	c3                   	ret    

c001b87b <sysCallTTYName(regs*)>:
c001b87b:	56                   	push   esi
c001b87c:	53                   	push   ebx
c001b87d:	53                   	push   ebx
c001b87e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b882:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b885:	85 c0                	test   eax,eax
c001b887:	74 5f                	je     c001b8e8 <sysCallTTYName(regs*)+0x6d>
c001b889:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b88c:	83 f8 02             	cmp    eax,0x2
c001b88f:	77 3e                	ja     c001b8cf <sysCallTTYName(regs*)+0x54>
c001b891:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b896:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b899:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b89f:	85 db                	test   ebx,ebx
c001b8a1:	74 45                	je     c001b8e8 <sysCallTTYName(regs*)+0x6d>
c001b8a3:	83 ec 0c             	sub    esp,0xc
c001b8a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8a8:	53                   	push   ebx
c001b8a9:	ff 10                	call   DWORD PTR [eax]
c001b8ab:	83 c4 10             	add    esp,0x10
c001b8ae:	84 c0                	test   al,al
c001b8b0:	74 41                	je     c001b8f3 <sysCallTTYName(regs*)+0x78>
c001b8b2:	83 ec 08             	sub    esp,0x8
c001b8b5:	81 c3 82 00 00 00    	add    ebx,0x82
c001b8bb:	53                   	push   ebx
c001b8bc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b8bf:	e8 48 4f fe ff       	call   c000080c <strcpy>
c001b8c4:	83 c4 10             	add    esp,0x10
c001b8c7:	31 c0                	xor    eax,eax
c001b8c9:	59                   	pop    ecx
c001b8ca:	31 d2                	xor    edx,edx
c001b8cc:	5b                   	pop    ebx
c001b8cd:	5e                   	pop    esi
c001b8ce:	c3                   	ret    
c001b8cf:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8d4:	74 bb                	je     c001b891 <sysCallTTYName(regs*)+0x16>
c001b8d6:	83 ec 0c             	sub    esp,0xc
c001b8d9:	50                   	push   eax
c001b8da:	e8 ea 57 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	89 c3                	mov    ebx,eax
c001b8e4:	85 db                	test   ebx,ebx
c001b8e6:	75 bb                	jne    c001b8a3 <sysCallTTYName(regs*)+0x28>
c001b8e8:	59                   	pop    ecx
c001b8e9:	b8 01 00 00 00       	mov    eax,0x1
c001b8ee:	31 d2                	xor    edx,edx
c001b8f0:	5b                   	pop    ebx
c001b8f1:	5e                   	pop    esi
c001b8f2:	c3                   	ret    
c001b8f3:	59                   	pop    ecx
c001b8f4:	b8 02 00 00 00       	mov    eax,0x2
c001b8f9:	31 d2                	xor    edx,edx
c001b8fb:	5b                   	pop    ebx
c001b8fc:	5e                   	pop    esi
c001b8fd:	c3                   	ret    

c001b8fe <sysCallUSleep(regs*)>:
c001b8fe:	83 ec 14             	sub    esp,0x14
c001b901:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b906:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b90a:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b911:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b914:	01 ca                	add    edx,ecx
c001b916:	52                   	push   edx
c001b917:	50                   	push   eax
c001b918:	e8 9e 23 00 00       	call   c001dcbb <nanoSleep(unsigned long long)>
c001b91d:	31 c0                	xor    eax,eax
c001b91f:	31 d2                	xor    edx,edx
c001b921:	83 c4 1c             	add    esp,0x1c
c001b924:	c3                   	ret    

c001b925 <sysCallSpawn(regs*)>:
c001b925:	56                   	push   esi
c001b926:	53                   	push   ebx
c001b927:	50                   	push   eax
c001b928:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b92c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b92f:	85 c0                	test   eax,eax
c001b931:	75 08                	jne    c001b93b <sysCallSpawn(regs*)+0x16>
c001b933:	59                   	pop    ecx
c001b934:	31 c0                	xor    eax,eax
c001b936:	31 d2                	xor    edx,edx
c001b938:	5b                   	pop    ebx
c001b939:	5e                   	pop    esi
c001b93a:	c3                   	ret    
c001b93b:	83 ec 0c             	sub    esp,0xc
c001b93e:	68 3f 07 00 00       	push   0x73f
c001b943:	e8 51 3c ff ff       	call   c000f599 <malloc>
c001b948:	83 c4 10             	add    esp,0x10
c001b94b:	89 c6                	mov    esi,eax
c001b94d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b950:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b953:	85 c0                	test   eax,eax
c001b955:	75 32                	jne    c001b989 <sysCallSpawn(regs*)+0x64>
c001b957:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b95c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b95f:	52                   	push   edx
c001b960:	50                   	push   eax
c001b961:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b964:	56                   	push   esi
c001b965:	e8 76 1a 00 00       	call   c001d3e0 <Process::Process(char const*, Process*, char**)>
c001b96a:	83 c4 10             	add    esp,0x10
c001b96d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b974:	75 bd                	jne    c001b933 <sysCallSpawn(regs*)+0xe>
c001b976:	83 ec 0c             	sub    esp,0xc
c001b979:	56                   	push   esi
c001b97a:	e8 43 1f 00 00       	call   c001d8c2 <Process::createUserThread()>
c001b97f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b981:	83 c4 10             	add    esp,0x10
c001b984:	99                   	cdq    
c001b985:	59                   	pop    ecx
c001b986:	5b                   	pop    ebx
c001b987:	5e                   	pop    esi
c001b988:	c3                   	ret    
c001b989:	31 c0                	xor    eax,eax
c001b98b:	eb d2                	jmp    c001b95f <sysCallSpawn(regs*)+0x3a>

c001b98d <sysCallGetEnv(regs*)>:
c001b98d:	57                   	push   edi
c001b98e:	56                   	push   esi
c001b98f:	53                   	push   ebx
c001b990:	83 ec 1c             	sub    esp,0x1c
c001b993:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b997:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b99c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b99f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b9a2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9a5:	e8 f1 e3 ff ff       	call   c0019d9b <Krnl::getProcessTotalEnvCount(Process*)>
c001b9aa:	83 c4 10             	add    esp,0x10
c001b9ad:	39 c7                	cmp    edi,eax
c001b9af:	7c 14                	jl     c001b9c5 <sysCallGetEnv(regs*)+0x38>
c001b9b1:	85 f6                	test   esi,esi
c001b9b3:	75 0b                	jne    c001b9c0 <sysCallGetEnv(regs*)+0x33>
c001b9b5:	83 c4 10             	add    esp,0x10
c001b9b8:	31 c0                	xor    eax,eax
c001b9ba:	5b                   	pop    ebx
c001b9bb:	31 d2                	xor    edx,edx
c001b9bd:	5e                   	pop    esi
c001b9be:	5f                   	pop    edi
c001b9bf:	c3                   	ret    
c001b9c0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9c3:	eb f0                	jmp    c001b9b5 <sysCallGetEnv(regs*)+0x28>
c001b9c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9c9:	52                   	push   edx
c001b9ca:	57                   	push   edi
c001b9cb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b9d1:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b9d4:	50                   	push   eax
c001b9d5:	e8 e1 e3 ff ff       	call   c0019dbb <Krnl::getProcessEnvPair(Process*, int)>
c001b9da:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9e1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b9e5:	83 c4 0c             	add    esp,0xc
c001b9e8:	85 c9                	test   ecx,ecx
c001b9ea:	75 23                	jne    c001ba0f <sysCallGetEnv(regs*)+0x82>
c001b9ec:	83 ec 0c             	sub    esp,0xc
c001b9ef:	50                   	push   eax
c001b9f0:	e8 77 4d fe ff       	call   c000076c <strlen>
c001b9f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9f8:	89 c3                	mov    ebx,eax
c001b9fa:	e8 6d 4d fe ff       	call   c000076c <strlen>
c001b9ff:	83 c4 10             	add    esp,0x10
c001ba02:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001ba06:	83 c4 10             	add    esp,0x10
c001ba09:	31 d2                	xor    edx,edx
c001ba0b:	5b                   	pop    ebx
c001ba0c:	5e                   	pop    esi
c001ba0d:	5f                   	pop    edi
c001ba0e:	c3                   	ret    
c001ba0f:	83 ec 08             	sub    esp,0x8
c001ba12:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba15:	50                   	push   eax
c001ba16:	56                   	push   esi
c001ba17:	e8 f0 4d fe ff       	call   c000080c <strcpy>
c001ba1c:	58                   	pop    eax
c001ba1d:	5a                   	pop    edx
c001ba1e:	68 53 b9 02 c0       	push   0xc002b953
c001ba23:	56                   	push   esi
c001ba24:	e8 23 4f fe ff       	call   c000094c <strcat>
c001ba29:	59                   	pop    ecx
c001ba2a:	5b                   	pop    ebx
c001ba2b:	57                   	push   edi
c001ba2c:	56                   	push   esi
c001ba2d:	e8 1a 4f fe ff       	call   c000094c <strcat>
c001ba32:	83 c4 10             	add    esp,0x10
c001ba35:	e9 7b ff ff ff       	jmp    c001b9b5 <sysCallGetEnv(regs*)+0x28>

c001ba3a <sysAppSettings(regs*)>:
c001ba3a:	57                   	push   edi
c001ba3b:	56                   	push   esi
c001ba3c:	56                   	push   esi
c001ba3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba41:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba44:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001ba4a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba4f:	66 3d c0 09          	cmp    ax,0x9c0
c001ba53:	75 2e                	jne    c001ba83 <sysAppSettings(regs*)+0x49>
c001ba55:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001ba5b:	83 e0 1f             	and    eax,0x1f
c001ba5e:	3c 01                	cmp    al,0x1
c001ba60:	74 2c                	je     c001ba8e <sysAppSettings(regs*)+0x54>
c001ba62:	3c 07                	cmp    al,0x7
c001ba64:	0f 84 b3 00 00 00    	je     c001bb1d <sysAppSettings(regs*)+0xe3>
c001ba6a:	84 c0                	test   al,al
c001ba6c:	0f 84 d2 00 00 00    	je     c001bb44 <sysAppSettings(regs*)+0x10a>
c001ba72:	3c 08                	cmp    al,0x8
c001ba74:	74 63                	je     c001bad9 <sysAppSettings(regs*)+0x9f>
c001ba76:	59                   	pop    ecx
c001ba77:	0f b6 c0             	movzx  eax,al
c001ba7a:	5e                   	pop    esi
c001ba7b:	05 e8 03 00 00       	add    eax,0x3e8
c001ba80:	5f                   	pop    edi
c001ba81:	99                   	cdq    
c001ba82:	c3                   	ret    
c001ba83:	b8 01 00 00 00       	mov    eax,0x1
c001ba88:	59                   	pop    ecx
c001ba89:	31 d2                	xor    edx,edx
c001ba8b:	5e                   	pop    esi
c001ba8c:	5f                   	pop    edi
c001ba8d:	c3                   	ret    
c001ba8e:	50                   	push   eax
c001ba8f:	68 00 01 00 00       	push   0x100
c001ba94:	6a 00                	push   0x0
c001ba96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba9b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba9e:	83 c0 0c             	add    eax,0xc
c001baa1:	50                   	push   eax
c001baa2:	e8 a9 4c fe ff       	call   c0000750 <memset>
c001baa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baac:	b9 ff 00 00 00       	mov    ecx,0xff
c001bab1:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bab4:	83 c7 0c             	add    edi,0xc
c001bab7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bab9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001babe:	5a                   	pop    edx
c001babf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bac2:	59                   	pop    ecx
c001bac3:	8d 50 0c             	lea    edx,[eax+0xc]
c001bac6:	52                   	push   edx
c001bac7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bacd:	e8 20 47 ff ff       	call   c00101f2 <VgaText::setTitle(char*)>
c001bad2:	83 c4 10             	add    esp,0x10
c001bad5:	31 c0                	xor    eax,eax
c001bad7:	eb af                	jmp    c001ba88 <sysAppSettings(regs*)+0x4e>
c001bad9:	83 ec 08             	sub    esp,0x8
c001badc:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bae2:	83 e0 0f             	and    eax,0xf
c001bae5:	50                   	push   eax
c001bae6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baeb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001baf4:	e8 e9 46 ff ff       	call   c00101e2 <VgaText::setTitleColour(VgaColour)>
c001baf9:	5f                   	pop    edi
c001bafa:	58                   	pop    eax
c001bafb:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bb01:	c1 e8 04             	shr    eax,0x4
c001bb04:	83 e0 0f             	and    eax,0xf
c001bb07:	50                   	push   eax
c001bb08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb0d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb16:	e8 b7 46 ff ff       	call   c00101d2 <VgaText::setTitleTextColour(VgaColour)>
c001bb1b:	eb b5                	jmp    c001bad2 <sysAppSettings(regs*)+0x98>
c001bb1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb25:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb2b:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bb31:	c0 e8 06             	shr    al,0x6
c001bb34:	83 e0 01             	and    eax,0x1
c001bb37:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bb3d:	31 c0                	xor    eax,eax
c001bb3f:	e9 44 ff ff ff       	jmp    c001ba88 <sysAppSettings(regs*)+0x4e>
c001bb44:	b8 02 00 00 00       	mov    eax,0x2
c001bb49:	e9 3a ff ff ff       	jmp    c001ba88 <sysAppSettings(regs*)+0x4e>

c001bb4e <sysSetFatAttrib(regs*)>:
c001bb4e:	57                   	push   edi
c001bb4f:	56                   	push   esi
c001bb50:	53                   	push   ebx
c001bb51:	83 ec 1c             	sub    esp,0x1c
c001bb54:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb58:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb5b:	68 14 01 00 00       	push   0x114
c001bb60:	e8 34 3a ff ff       	call   c000f599 <malloc>
c001bb65:	83 c4 0c             	add    esp,0xc
c001bb68:	89 c3                	mov    ebx,eax
c001bb6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb6f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb72:	57                   	push   edi
c001bb73:	53                   	push   ebx
c001bb74:	e8 c9 70 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c001bb79:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bb7c:	83 c4 0c             	add    esp,0xc
c001bb7f:	0f b6 d4             	movzx  edx,ah
c001bb82:	0f b6 c0             	movzx  eax,al
c001bb85:	52                   	push   edx
c001bb86:	50                   	push   eax
c001bb87:	53                   	push   ebx
c001bb88:	e8 2b 73 ff ff       	call   c0012eb8 <File::chfatattr(unsigned char, unsigned char)>
c001bb8d:	83 c4 10             	add    esp,0x10
c001bb90:	85 db                	test   ebx,ebx
c001bb92:	74 14                	je     c001bba8 <sysSetFatAttrib(regs*)+0x5a>
c001bb94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb98:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb9a:	83 ec 0c             	sub    esp,0xc
c001bb9d:	53                   	push   ebx
c001bb9e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bba1:	83 c4 10             	add    esp,0x10
c001bba4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bba8:	85 c0                	test   eax,eax
c001bbaa:	0f 95 c0             	setne  al
c001bbad:	31 d2                	xor    edx,edx
c001bbaf:	0f b6 c0             	movzx  eax,al
c001bbb2:	f7 d8                	neg    eax
c001bbb4:	83 d2 00             	adc    edx,0x0
c001bbb7:	83 c4 10             	add    esp,0x10
c001bbba:	f7 da                	neg    edx
c001bbbc:	5b                   	pop    ebx
c001bbbd:	5e                   	pop    esi
c001bbbe:	5f                   	pop    edi
c001bbbf:	c3                   	ret    

c001bbc0 <sysPipe(regs*)>:
c001bbc0:	57                   	push   edi
c001bbc1:	56                   	push   esi
c001bbc2:	53                   	push   ebx
c001bbc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc7:	83 ec 0c             	sub    esp,0xc
c001bbca:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bbcd:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bbd0:	6a 20                	push   0x20
c001bbd2:	e8 c2 39 ff ff       	call   c000f599 <malloc>
c001bbd7:	89 c3                	mov    ebx,eax
c001bbd9:	58                   	pop    eax
c001bbda:	5a                   	pop    edx
c001bbdb:	68 00 50 00 00       	push   0x5000
c001bbe0:	53                   	push   ebx
c001bbe1:	e8 84 43 ff ff       	call   c000ff6a <Pipe::Pipe(int)>
c001bbe6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbe9:	e8 e6 51 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bbee:	89 07                	mov    DWORD PTR [edi],eax
c001bbf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbf3:	e8 dc 51 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bbf8:	83 c4 10             	add    esp,0x10
c001bbfb:	89 06                	mov    DWORD PTR [esi],eax
c001bbfd:	31 d2                	xor    edx,edx
c001bbff:	5b                   	pop    ebx
c001bc00:	31 c0                	xor    eax,eax
c001bc02:	5e                   	pop    esi
c001bc03:	5f                   	pop    edi
c001bc04:	c3                   	ret    

c001bc05 <sysGetUnixTime(regs*)>:
c001bc05:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001bc0a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bc10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc14:	e9 1b 7a ff ff       	jmp    c0013634 <Clock::timeInSecondsLocal()>

c001bc19 <string_ends_with(char const*, char const*)>:
c001bc19:	57                   	push   edi
c001bc1a:	56                   	push   esi
c001bc1b:	53                   	push   ebx
c001bc1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc20:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bc24:	83 ec 0c             	sub    esp,0xc
c001bc27:	53                   	push   ebx
c001bc28:	e8 3f 4b fe ff       	call   c000076c <strlen>
c001bc2d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc30:	89 c6                	mov    esi,eax
c001bc32:	e8 35 4b fe ff       	call   c000076c <strlen>
c001bc37:	83 c4 10             	add    esp,0x10
c001bc3a:	39 c6                	cmp    esi,eax
c001bc3c:	7d 06                	jge    c001bc44 <string_ends_with(char const*, char const*)+0x2b>
c001bc3e:	5b                   	pop    ebx
c001bc3f:	31 c0                	xor    eax,eax
c001bc41:	5e                   	pop    esi
c001bc42:	5f                   	pop    edi
c001bc43:	c3                   	ret    
c001bc44:	83 ec 08             	sub    esp,0x8
c001bc47:	29 c6                	sub    esi,eax
c001bc49:	57                   	push   edi
c001bc4a:	01 f3                	add    ebx,esi
c001bc4c:	53                   	push   ebx
c001bc4d:	e8 46 4c fe ff       	call   c0000898 <strcmp>
c001bc52:	83 c4 10             	add    esp,0x10
c001bc55:	85 c0                	test   eax,eax
c001bc57:	5b                   	pop    ebx
c001bc58:	0f 94 c0             	sete   al
c001bc5b:	5e                   	pop    esi
c001bc5c:	0f b6 c0             	movzx  eax,al
c001bc5f:	5f                   	pop    edi
c001bc60:	c3                   	ret    

c001bc61 <sysCallOpen(regs*)>:
c001bc61:	56                   	push   esi
c001bc62:	53                   	push   ebx
c001bc63:	81 ec 04 01 00 00    	sub    esp,0x104
c001bc69:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bc70:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bc73:	85 c9                	test   ecx,ecx
c001bc75:	0f 84 ad 01 00 00    	je     c001be28 <sysCallOpen(regs*)+0x1c7>
c001bc7b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc7e:	85 c0                	test   eax,eax
c001bc80:	0f 84 a2 01 00 00    	je     c001be28 <sysCallOpen(regs*)+0x1c7>
c001bc86:	52                   	push   edx
c001bc87:	68 55 b9 02 c0       	push   0xc002b955
c001bc8c:	50                   	push   eax
c001bc8d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bc91:	56                   	push   esi
c001bc92:	e8 01 6e ff ff       	call   c0012a98 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bc97:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc9a:	e8 cd 4a fe ff       	call   c000076c <strlen>
c001bc9f:	83 c4 10             	add    esp,0x10
c001bca2:	48                   	dec    eax
c001bca3:	74 1d                	je     c001bcc2 <sysCallOpen(regs*)+0x61>
c001bca5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bca8:	eb 0f                	jmp    c001bcb9 <sysCallOpen(regs*)+0x58>
c001bcaa:	80 fa 3a             	cmp    dl,0x3a
c001bcad:	74 0f                	je     c001bcbe <sysCallOpen(regs*)+0x5d>
c001bcaf:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bcb3:	48                   	dec    eax
c001bcb4:	74 0c                	je     c001bcc2 <sysCallOpen(regs*)+0x61>
c001bcb6:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bcb9:	80 fa 2e             	cmp    dl,0x2e
c001bcbc:	75 ec                	jne    c001bcaa <sysCallOpen(regs*)+0x49>
c001bcbe:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bcc2:	83 ec 08             	sub    esp,0x8
c001bcc5:	68 59 b9 02 c0       	push   0xc002b959
c001bcca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bccd:	e8 47 ff ff ff       	call   c001bc19 <string_ends_with(char const*, char const*)>
c001bcd2:	83 c4 10             	add    esp,0x10
c001bcd5:	85 c0                	test   eax,eax
c001bcd7:	74 1d                	je     c001bcf6 <sysCallOpen(regs*)+0x95>
c001bcd9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcdc:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bce2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bce9:	81 c4 04 01 00 00    	add    esp,0x104
c001bcef:	31 c0                	xor    eax,eax
c001bcf1:	31 d2                	xor    edx,edx
c001bcf3:	5b                   	pop    ebx
c001bcf4:	5e                   	pop    esi
c001bcf5:	c3                   	ret    
c001bcf6:	83 ec 08             	sub    esp,0x8
c001bcf9:	68 5e b9 02 c0       	push   0xc002b95e
c001bcfe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd01:	e8 13 ff ff ff       	call   c001bc19 <string_ends_with(char const*, char const*)>
c001bd06:	83 c4 10             	add    esp,0x10
c001bd09:	85 c0                	test   eax,eax
c001bd0b:	75 cc                	jne    c001bcd9 <sysCallOpen(regs*)+0x78>
c001bd0d:	83 ec 08             	sub    esp,0x8
c001bd10:	68 5a b9 02 c0       	push   0xc002b95a
c001bd15:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd18:	e8 7b 4b fe ff       	call   c0000898 <strcmp>
c001bd1d:	83 c4 10             	add    esp,0x10
c001bd20:	85 c0                	test   eax,eax
c001bd22:	74 b5                	je     c001bcd9 <sysCallOpen(regs*)+0x78>
c001bd24:	83 ec 08             	sub    esp,0x8
c001bd27:	68 59 b9 02 c0       	push   0xc002b959
c001bd2c:	56                   	push   esi
c001bd2d:	e8 e7 fe ff ff       	call   c001bc19 <string_ends_with(char const*, char const*)>
c001bd32:	83 c4 10             	add    esp,0x10
c001bd35:	85 c0                	test   eax,eax
c001bd37:	75 a0                	jne    c001bcd9 <sysCallOpen(regs*)+0x78>
c001bd39:	83 ec 08             	sub    esp,0x8
c001bd3c:	68 63 b9 02 c0       	push   0xc002b963
c001bd41:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd44:	e8 d0 fe ff ff       	call   c001bc19 <string_ends_with(char const*, char const*)>
c001bd49:	83 c4 10             	add    esp,0x10
c001bd4c:	85 c0                	test   eax,eax
c001bd4e:	0f 85 e7 00 00 00    	jne    c001be3b <sysCallOpen(regs*)+0x1da>
c001bd54:	83 ec 08             	sub    esp,0x8
c001bd57:	68 68 b9 02 c0       	push   0xc002b968
c001bd5c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd5f:	e8 b5 fe ff ff       	call   c001bc19 <string_ends_with(char const*, char const*)>
c001bd64:	83 c4 10             	add    esp,0x10
c001bd67:	85 c0                	test   eax,eax
c001bd69:	0f 85 cc 00 00 00    	jne    c001be3b <sysCallOpen(regs*)+0x1da>
c001bd6f:	83 ec 08             	sub    esp,0x8
c001bd72:	68 64 b9 02 c0       	push   0xc002b964
c001bd77:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd7a:	e8 19 4b fe ff       	call   c0000898 <strcmp>
c001bd7f:	83 c4 10             	add    esp,0x10
c001bd82:	85 c0                	test   eax,eax
c001bd84:	0f 84 b1 00 00 00    	je     c001be3b <sysCallOpen(regs*)+0x1da>
c001bd8a:	83 ec 08             	sub    esp,0x8
c001bd8d:	68 63 b9 02 c0       	push   0xc002b963
c001bd92:	56                   	push   esi
c001bd93:	e8 81 fe ff ff       	call   c001bc19 <string_ends_with(char const*, char const*)>
c001bd98:	83 c4 10             	add    esp,0x10
c001bd9b:	85 c0                	test   eax,eax
c001bd9d:	0f 85 98 00 00 00    	jne    c001be3b <sysCallOpen(regs*)+0x1da>
c001bda3:	83 ec 0c             	sub    esp,0xc
c001bda6:	68 14 01 00 00       	push   0x114
c001bdab:	e8 e9 37 ff ff       	call   c000f599 <malloc>
c001bdb0:	83 c4 0c             	add    esp,0xc
c001bdb3:	89 c6                	mov    esi,eax
c001bdb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdba:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdbd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdc0:	56                   	push   esi
c001bdc1:	e8 7c 6e ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c001bdc6:	83 c4 10             	add    esp,0x10
c001bdc9:	85 f6                	test   esi,esi
c001bdcb:	74 5b                	je     c001be28 <sysCallOpen(regs*)+0x1c7>
c001bdcd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bdd0:	0f b6 c2             	movzx  eax,dl
c001bdd3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bdd6:	89 d0                	mov    eax,edx
c001bdd8:	83 e0 01             	and    eax,0x1
c001bddb:	f6 c2 02             	test   dl,0x2
c001bdde:	74 03                	je     c001bde3 <sysCallOpen(regs*)+0x182>
c001bde0:	83 c8 02             	or     eax,0x2
c001bde3:	f6 c2 04             	test   dl,0x4
c001bde6:	74 03                	je     c001bdeb <sysCallOpen(regs*)+0x18a>
c001bde8:	83 c8 04             	or     eax,0x4
c001bdeb:	f6 c2 08             	test   dl,0x8
c001bdee:	74 03                	je     c001bdf3 <sysCallOpen(regs*)+0x192>
c001bdf0:	83 c8 0a             	or     eax,0xa
c001bdf3:	83 e2 10             	and    edx,0x10
c001bdf6:	74 03                	je     c001bdfb <sysCallOpen(regs*)+0x19a>
c001bdf8:	83 c8 12             	or     eax,0x12
c001bdfb:	83 ec 08             	sub    esp,0x8
c001bdfe:	50                   	push   eax
c001bdff:	56                   	push   esi
c001be00:	e8 a1 6e ff ff       	call   c0012ca6 <File::open(FileOpenMode)>
c001be05:	83 c4 10             	add    esp,0x10
c001be08:	85 c0                	test   eax,eax
c001be0a:	75 1c                	jne    c001be28 <sysCallOpen(regs*)+0x1c7>
c001be0c:	83 ec 0c             	sub    esp,0xc
c001be0f:	56                   	push   esi
c001be10:	e8 bf 4f ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001be15:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be18:	83 c4 10             	add    esp,0x10
c001be1b:	89 02                	mov    DWORD PTR [edx],eax
c001be1d:	c1 f8 1f             	sar    eax,0x1f
c001be20:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001be23:	e9 c1 fe ff ff       	jmp    c001bce9 <sysCallOpen(regs*)+0x88>
c001be28:	81 c4 04 01 00 00    	add    esp,0x104
c001be2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be33:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be38:	5b                   	pop    ebx
c001be39:	5e                   	pop    esi
c001be3a:	c3                   	ret    
c001be3b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be3e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001be44:	e9 99 fe ff ff       	jmp    c001bce2 <sysCallOpen(regs*)+0x81>

c001be49 <Sys::loadSyscalls()>:
c001be49:	c7 05 20 05 03 c0 b6 b0 01 c0 	mov    DWORD PTR ds:0xc0030520,0xc001b0b6
c001be53:	c7 05 24 05 03 c0 ae ac 01 c0 	mov    DWORD PTR ds:0xc0030524,0xc001acae
c001be5d:	c7 05 28 05 03 c0 9c ae 01 c0 	mov    DWORD PTR ds:0xc0030528,0xc001ae9c
c001be67:	c7 05 2c 05 03 c0 ec af 01 c0 	mov    DWORD PTR ds:0xc003052c,0xc001afec
c001be71:	c7 05 30 05 03 c0 34 ae 01 c0 	mov    DWORD PTR ds:0xc0030530,0xc001ae34
c001be7b:	c7 05 34 05 03 c0 e5 ac 01 c0 	mov    DWORD PTR ds:0xc0030534,0xc001ace5
c001be85:	c7 05 38 05 03 c0 c6 ac 01 c0 	mov    DWORD PTR ds:0xc0030538,0xc001acc6
c001be8f:	c7 05 3c 05 03 c0 f1 ae 01 c0 	mov    DWORD PTR ds:0xc003053c,0xc001aef1
c001be99:	c7 05 44 05 03 c0 7f b5 01 c0 	mov    DWORD PTR ds:0xc0030544,0xc001b57f
c001bea3:	c7 05 40 05 03 c0 61 bc 01 c0 	mov    DWORD PTR ds:0xc0030540,0xc001bc61
c001bead:	c7 05 48 05 03 c0 df b5 01 c0 	mov    DWORD PTR ds:0xc0030548,0xc001b5df
c001beb7:	c7 05 4c 05 03 c0 c2 b2 01 c0 	mov    DWORD PTR ds:0xc003054c,0xc001b2c2
c001bec1:	c7 05 50 05 03 c0 fc b0 01 c0 	mov    DWORD PTR ds:0xc0030550,0xc001b0fc
c001becb:	c7 05 54 05 03 c0 01 b1 01 c0 	mov    DWORD PTR ds:0xc0030554,0xc001b101
c001bed5:	c7 05 58 05 03 c0 a8 b6 01 c0 	mov    DWORD PTR ds:0xc0030558,0xc001b6a8
c001bedf:	c7 05 5c 05 03 c0 54 b6 01 c0 	mov    DWORD PTR ds:0xc003055c,0xc001b654
c001bee9:	c7 05 60 05 03 c0 9b b3 01 c0 	mov    DWORD PTR ds:0xc0030560,0xc001b39b
c001bef3:	c7 05 64 05 03 c0 f2 b3 01 c0 	mov    DWORD PTR ds:0xc0030564,0xc001b3f2
c001befd:	c7 05 68 05 03 c0 5e b4 01 c0 	mov    DWORD PTR ds:0xc0030568,0xc001b45e
c001bf07:	c7 05 6c 05 03 c0 06 b1 01 c0 	mov    DWORD PTR ds:0xc003056c,0xc001b106
c001bf11:	c7 05 70 05 03 c0 18 b7 01 c0 	mov    DWORD PTR ds:0xc0030570,0xc001b718
c001bf1b:	c7 05 74 05 03 c0 32 b7 01 c0 	mov    DWORD PTR ds:0xc0030574,0xc001b732
c001bf25:	c7 05 78 05 03 c0 32 b7 01 c0 	mov    DWORD PTR ds:0xc0030578,0xc001b732
c001bf2f:	c7 05 7c 05 03 c0 67 b7 01 c0 	mov    DWORD PTR ds:0xc003057c,0xc001b767
c001bf39:	c7 05 80 05 03 c0 cb b7 01 c0 	mov    DWORD PTR ds:0xc0030580,0xc001b7cb
c001bf43:	c7 05 84 05 03 c0 10 b1 01 c0 	mov    DWORD PTR ds:0xc0030584,0xc001b110
c001bf4d:	c7 05 88 05 03 c0 2f b8 01 c0 	mov    DWORD PTR ds:0xc0030588,0xc001b82f
c001bf57:	c7 05 8c 05 03 c0 7f b2 01 c0 	mov    DWORD PTR ds:0xc003058c,0xc001b27f
c001bf61:	c7 05 90 05 03 c0 7b b8 01 c0 	mov    DWORD PTR ds:0xc0030590,0xc001b87b
c001bf6b:	c7 05 94 05 03 c0 41 b3 01 c0 	mov    DWORD PTR ds:0xc0030594,0xc001b341
c001bf75:	c7 05 98 05 03 c0 fe b8 01 c0 	mov    DWORD PTR ds:0xc0030598,0xc001b8fe
c001bf7f:	c7 05 9c 05 03 c0 d0 b4 01 c0 	mov    DWORD PTR ds:0xc003059c,0xc001b4d0
c001bf89:	c7 05 a0 05 03 c0 25 b9 01 c0 	mov    DWORD PTR ds:0xc00305a0,0xc001b925
c001bf93:	c7 05 a4 05 03 c0 8d b9 01 c0 	mov    DWORD PTR ds:0xc00305a4,0xc001b98d
c001bf9d:	c7 05 a8 05 03 c0 3a ba 01 c0 	mov    DWORD PTR ds:0xc00305a8,0xc001ba3a
c001bfa7:	c7 05 ac 05 03 c0 20 b1 01 c0 	mov    DWORD PTR ds:0xc00305ac,0xc001b120
c001bfb1:	c7 05 b0 05 03 c0 8a b1 01 c0 	mov    DWORD PTR ds:0xc00305b0,0xc001b18a
c001bfbb:	c7 05 b4 05 03 c0 d0 b1 01 c0 	mov    DWORD PTR ds:0xc00305b4,0xc001b1d0
c001bfc5:	c7 05 b8 05 03 c0 4e bb 01 c0 	mov    DWORD PTR ds:0xc00305b8,0xc001bb4e
c001bfcf:	c7 05 bc 05 03 c0 4d b7 01 c0 	mov    DWORD PTR ds:0xc00305bc,0xc001b74d
c001bfd9:	c7 05 c0 05 03 c0 21 b2 01 c0 	mov    DWORD PTR ds:0xc00305c0,0xc001b221
c001bfe3:	c7 05 c4 05 03 c0 c0 bb 01 c0 	mov    DWORD PTR ds:0xc00305c4,0xc001bbc0
c001bfed:	c7 05 c8 05 03 c0 05 bc 01 c0 	mov    DWORD PTR ds:0xc00305c8,0xc001bc05
c001bff7:	c7 05 cc 05 03 c0 8c ad 01 c0 	mov    DWORD PTR ds:0xc00305cc,0xc001ad8c
c001c001:	c7 05 d0 05 03 c0 0d af 01 c0 	mov    DWORD PTR ds:0xc00305d0,0xc001af0d
c001c00b:	c7 05 d4 05 03 c0 a2 af 01 c0 	mov    DWORD PTR ds:0xc00305d4,0xc001afa2
c001c015:	c7 05 d8 05 03 c0 78 ac 01 c0 	mov    DWORD PTR ds:0xc00305d8,0xc001ac78
c001c01f:	c7 05 dc 05 03 c0 54 b0 01 c0 	mov    DWORD PTR ds:0xc00305dc,0xc001b054
c001c029:	c7 05 e0 05 03 c0 f1 ac 01 c0 	mov    DWORD PTR ds:0xc00305e0,0xc001acf1
c001c033:	c7 05 e4 05 03 c0 08 ad 01 c0 	mov    DWORD PTR ds:0xc00305e4,0xc001ad08
c001c03d:	c3                   	ret    

c001c03e <Sys::systemCall(regs*, void*)>:
c001c03e:	53                   	push   ebx
c001c03f:	83 ec 08             	sub    esp,0x8
c001c042:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c046:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c049:	83 f8 7f             	cmp    eax,0x7f
c001c04c:	77 16                	ja     c001c064 <Sys::systemCall(regs*, void*)+0x26>
c001c04e:	8b 14 85 20 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfae0]
c001c055:	85 d2                	test   edx,edx
c001c057:	74 0b                	je     c001c064 <Sys::systemCall(regs*, void*)+0x26>
c001c059:	83 ec 0c             	sub    esp,0xc
c001c05c:	53                   	push   ebx
c001c05d:	ff d2                	call   edx
c001c05f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c062:	eb 0d                	jmp    c001c071 <Sys::systemCall(regs*, void*)+0x33>
c001c064:	52                   	push   edx
c001c065:	52                   	push   edx
c001c066:	50                   	push   eax
c001c067:	68 6d b9 02 c0       	push   0xc002b96d
c001c06c:	e8 72 66 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001c071:	83 c4 10             	add    esp,0x10
c001c074:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c079:	31 d2                	xor    edx,edx
c001c07b:	83 c4 08             	add    esp,0x8
c001c07e:	5b                   	pop    ebx
c001c07f:	c3                   	ret    

c001c080 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c080:	55                   	push   ebp
c001c081:	57                   	push   edi
c001c082:	56                   	push   esi
c001c083:	53                   	push   ebx
c001c084:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c08a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c091:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c098:	85 c0                	test   eax,eax
c001c09a:	0f 95 c1             	setne  cl
c001c09d:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c0a5:	0f 94 c2             	sete   dl
c001c0a8:	84 d1                	test   cl,dl
c001c0aa:	74 23                	je     c001c0cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c0ac:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c0b2:	74 1b                	je     c001c0cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c0b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c0ba:	89 da                	mov    edx,ebx
c001c0bc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c0c2:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c0c8:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c0cf:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c0d6:	05 ff 0f 00 00       	add    eax,0xfff
c001c0db:	83 ec 0c             	sub    esp,0xc
c001c0de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0e2:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c0e8:	c1 e8 0c             	shr    eax,0xc
c001c0eb:	89 fe                	mov    esi,edi
c001c0ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c0f1:	c1 ee 0c             	shr    esi,0xc
c001c0f4:	6a 01                	push   0x1
c001c0f6:	e8 24 51 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001c0fb:	89 c5                	mov    ebp,eax
c001c0fd:	58                   	pop    eax
c001c0fe:	5a                   	pop    edx
c001c0ff:	56                   	push   esi
c001c100:	68 81 b9 02 c0       	push   0xc002b981
c001c105:	e8 d9 65 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001c10a:	59                   	pop    ecx
c001c10b:	58                   	pop    eax
c001c10c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c110:	68 93 b9 02 c0       	push   0xc002b993
c001c115:	e8 c9 65 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001c11a:	83 c4 10             	add    esp,0x10
c001c11d:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c123:	0f 86 31 01 00 00    	jbe    c001c25a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c129:	c1 e6 0c             	shl    esi,0xc
c001c12c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c12f:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c132:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c136:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c13d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c140:	01 df                	add    edi,ebx
c001c142:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c145:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c149:	0f 84 08 01 00 00    	je     c001c257 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c14f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c155:	76 05                	jbe    c001c15c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c157:	bf 00 10 00 00       	mov    edi,0x1000
c001c15c:	83 ec 0c             	sub    esp,0xc
c001c15f:	31 d2                	xor    edx,edx
c001c161:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c168:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c16a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c16e:	50                   	push   eax
c001c16f:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c173:	56                   	push   esi
c001c174:	52                   	push   edx
c001c175:	57                   	push   edi
c001c176:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c17d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c180:	83 c4 20             	add    esp,0x20
c001c183:	85 c0                	test   eax,eax
c001c185:	74 0a                	je     c001c191 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c187:	53                   	push   ebx
c001c188:	53                   	push   ebx
c001c189:	50                   	push   eax
c001c18a:	68 a5 b9 02 c0       	push   0xc002b9a5
c001c18f:	eb 0f                	jmp    c001c1a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c191:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c195:	74 20                	je     c001c1b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c197:	51                   	push   ecx
c001c198:	51                   	push   ecx
c001c199:	6a 00                	push   0x0
c001c19b:	68 d0 b9 02 c0       	push   0xc002b9d0
c001c1a0:	e8 3e 65 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001c1a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1a8:	e8 b8 54 ff ff       	call   c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c001c1ad:	83 c4 10             	add    esp,0x10
c001c1b0:	31 c0                	xor    eax,eax
c001c1b2:	e9 68 01 00 00       	jmp    c001c31f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c1b7:	fa                   	cli    
c001c1b8:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001c1be:	e8 d2 37 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c1c3:	6a 07                	push   0x7
c001c1c5:	89 c7                	mov    edi,eax
c001c1c7:	55                   	push   ebp
c001c1c8:	50                   	push   eax
c001c1c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1d1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1d7:	e8 00 58 ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1dc:	83 c4 0c             	add    esp,0xc
c001c1df:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c1e6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1ec:	6a 00                	push   0x0
c001c1ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1f6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1fc:	e8 35 56 ff ff       	call   c0011836 <VAS::mapOtherVASIn(bool, VAS*)>
c001c201:	58                   	pop    eax
c001c202:	5a                   	pop    edx
c001c203:	68 07 0c 00 00       	push   0xc07
c001c208:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c20c:	57                   	push   edi
c001c20d:	89 ef                	mov    edi,ebp
c001c20f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c216:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c21c:	6a 00                	push   0x0
c001c21e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c223:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c226:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c22c:	e8 67 5b ff ff       	call   c0011d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c231:	b9 00 10 00 00       	mov    ecx,0x1000
c001c236:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c238:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001c23d:	83 c4 20             	add    esp,0x20
c001c240:	48                   	dec    eax
c001c241:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001c246:	85 c0                	test   eax,eax
c001c248:	75 01                	jne    c001c24b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c24a:	fb                   	sti    
c001c24b:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c252:	e9 df fe ff ff       	jmp    c001c136 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c257:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c25a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c262:	0f 86 a9 00 00 00    	jbe    c001c311 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c268:	fa                   	cli    
c001c269:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001c26f:	51                   	push   ecx
c001c270:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c277:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c27d:	6a 00                	push   0x0
c001c27f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c284:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c287:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c28d:	e8 a4 55 ff ff       	call   c0011836 <VAS::mapOtherVASIn(bool, VAS*)>
c001c292:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c296:	c1 e6 0c             	shl    esi,0xc
c001c299:	01 de                	add    esi,ebx
c001c29b:	83 c4 10             	add    esp,0x10
c001c29e:	39 de                	cmp    esi,ebx
c001c2a0:	74 61                	je     c001c303 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c2a2:	e8 ee 36 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c2a7:	6a 07                	push   0x7
c001c2a9:	89 c7                	mov    edi,eax
c001c2ab:	55                   	push   ebp
c001c2ac:	50                   	push   eax
c001c2ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2b5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2bb:	e8 1c 57 ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c2c0:	58                   	pop    eax
c001c2c1:	5a                   	pop    edx
c001c2c2:	68 07 0c 00 00       	push   0xc07
c001c2c7:	53                   	push   ebx
c001c2c8:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c2ce:	57                   	push   edi
c001c2cf:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c2d6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2dc:	6a 00                	push   0x0
c001c2de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2e6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2ec:	e8 a7 5a ff ff       	call   c0011d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c2f1:	83 c4 1c             	add    esp,0x1c
c001c2f4:	68 00 10 00 00       	push   0x1000
c001c2f9:	6a 00                	push   0x0
c001c2fb:	55                   	push   ebp
c001c2fc:	e8 4f 44 fe ff       	call   c0000750 <memset>
c001c301:	eb 98                	jmp    c001c29b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c303:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001c308:	48                   	dec    eax
c001c309:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001c30e:	75 01                	jne    c001c311 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c310:	fb                   	sti    
c001c311:	83 ec 0c             	sub    esp,0xc
c001c314:	55                   	push   ebp
c001c315:	e8 4b 53 ff ff       	call   c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c001c31a:	83 c4 10             	add    esp,0x10
c001c31d:	b0 01                	mov    al,0x1
c001c31f:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c325:	5b                   	pop    ebx
c001c326:	5e                   	pop    esi
c001c327:	5f                   	pop    edi
c001c328:	5d                   	pop    ebp
c001c329:	c3                   	ret    

c001c32a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c32a:	55                   	push   ebp
c001c32b:	57                   	push   edi
c001c32c:	56                   	push   esi
c001c32d:	53                   	push   ebx
c001c32e:	83 ec 48             	sub    esp,0x48
c001c331:	68 14 01 00 00       	push   0x114
c001c336:	e8 5e 32 ff ff       	call   c000f599 <malloc>
c001c33b:	83 c4 0c             	add    esp,0xc
c001c33e:	89 c6                	mov    esi,eax
c001c340:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c344:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c348:	50                   	push   eax
c001c349:	e8 f4 68 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c001c34e:	58                   	pop    eax
c001c34f:	5a                   	pop    edx
c001c350:	6a 01                	push   0x1
c001c352:	56                   	push   esi
c001c353:	e8 4e 69 ff ff       	call   c0012ca6 <File::open(FileOpenMode)>
c001c358:	83 c4 10             	add    esp,0x10
c001c35b:	85 c0                	test   eax,eax
c001c35d:	0f 85 47 01 00 00    	jne    c001c4aa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c363:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c36b:	83 ec 0c             	sub    esp,0xc
c001c36e:	6a 34                	push   0x34
c001c370:	e8 24 32 ff ff       	call   c000f599 <malloc>
c001c375:	89 c3                	mov    ebx,eax
c001c377:	58                   	pop    eax
c001c378:	8b 06                	mov    eax,DWORD PTR [esi]
c001c37a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c37e:	57                   	push   edi
c001c37f:	53                   	push   ebx
c001c380:	6a 00                	push   0x0
c001c382:	6a 34                	push   0x34
c001c384:	56                   	push   esi
c001c385:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c388:	83 c4 20             	add    esp,0x20
c001c38b:	85 c0                	test   eax,eax
c001c38d:	0f 85 17 01 00 00    	jne    c001c4aa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c393:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c399:	0f 85 0b 01 00 00    	jne    c001c4aa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c39f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3a2:	85 c0                	test   eax,eax
c001c3a4:	0f 84 00 01 00 00    	je     c001c4aa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3aa:	31 d2                	xor    edx,edx
c001c3ac:	55                   	push   ebp
c001c3ad:	52                   	push   edx
c001c3ae:	50                   	push   eax
c001c3af:	56                   	push   esi
c001c3b0:	e8 af 69 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001c3b5:	83 c4 10             	add    esp,0x10
c001c3b8:	85 c0                	test   eax,eax
c001c3ba:	0f 85 ea 00 00 00    	jne    c001c4aa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3c0:	83 ec 0c             	sub    esp,0xc
c001c3c3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c3c6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3ce:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3d2:	0f af c2             	imul   eax,edx
c001c3d5:	50                   	push   eax
c001c3d6:	e8 be 31 ff ff       	call   c000f599 <malloc>
c001c3db:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3dd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3e8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3ec:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3f0:	0f af c2             	imul   eax,edx
c001c3f3:	99                   	cdq    
c001c3f4:	52                   	push   edx
c001c3f5:	50                   	push   eax
c001c3f6:	56                   	push   esi
c001c3f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3fa:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c3fd:	83 c4 20             	add    esp,0x20
c001c400:	85 c0                	test   eax,eax
c001c402:	0f 84 a2 00 00 00    	je     c001c4aa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c408:	31 d2                	xor    edx,edx
c001c40a:	51                   	push   ecx
c001c40b:	52                   	push   edx
c001c40c:	50                   	push   eax
c001c40d:	56                   	push   esi
c001c40e:	e8 51 69 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001c413:	83 c4 10             	add    esp,0x10
c001c416:	85 c0                	test   eax,eax
c001c418:	0f 85 8c 00 00 00    	jne    c001c4aa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c41e:	83 ec 0c             	sub    esp,0xc
c001c421:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c425:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c429:	31 ed                	xor    ebp,ebp
c001c42b:	0f af c2             	imul   eax,edx
c001c42e:	50                   	push   eax
c001c42f:	e8 65 31 ff ff       	call   c000f599 <malloc>
c001c434:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c436:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c43a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c43d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c441:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c445:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c449:	0f af c2             	imul   eax,edx
c001c44c:	99                   	cdq    
c001c44d:	52                   	push   edx
c001c44e:	50                   	push   eax
c001c44f:	56                   	push   esi
c001c450:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c453:	83 c4 20             	add    esp,0x20
c001c456:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c45e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c462:	0f 86 80 00 00 00    	jbe    c001c4e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c468:	0f b7 fd             	movzx  edi,bp
c001c46b:	c1 e7 05             	shl    edi,0x5
c001c46e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c472:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c475:	75 6b                	jne    c001c4e2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c477:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c47a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c47e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c481:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c485:	52                   	push   edx
c001c486:	31 d2                	xor    edx,edx
c001c488:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c48b:	52                   	push   edx
c001c48c:	50                   	push   eax
c001c48d:	56                   	push   esi
c001c48e:	e8 d1 68 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001c493:	83 c4 10             	add    esp,0x10
c001c496:	85 c0                	test   eax,eax
c001c498:	74 17                	je     c001c4b1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c49a:	83 ec 0c             	sub    esp,0xc
c001c49d:	68 fc b9 02 c0       	push   0xc002b9fc
c001c4a2:	e8 3c 62 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001c4a7:	83 c4 10             	add    esp,0x10
c001c4aa:	31 c0                	xor    eax,eax
c001c4ac:	e9 87 00 00 00       	jmp    c001c538 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c4b1:	83 ec 0c             	sub    esp,0xc
c001c4b4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c4b7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c4ba:	50                   	push   eax
c001c4bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c4bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4c3:	56                   	push   esi
c001c4c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c4c8:	e8 b3 fb ff ff       	call   c001c080 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c4cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4d1:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c4d5:	83 c4 20             	add    esp,0x20
c001c4d8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c4dc:	73 04                	jae    c001c4e2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4e2:	45                   	inc    ebp
c001c4e3:	e9 76 ff ff ff       	jmp    c001c45e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c4e8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c4ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4f4:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c4fa:	83 ec 0c             	sub    esp,0xc
c001c4fd:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c503:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c508:	05 00 10 00 00       	add    eax,0x1000
c001c50d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c514:	e8 90 30 ff ff       	call   c000f5a9 <free>
c001c519:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c51c:	e8 88 30 ff ff       	call   c000f5a9 <free>
c001c521:	58                   	pop    eax
c001c522:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c526:	e8 7e 30 ff ff       	call   c000f5a9 <free>
c001c52b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c52e:	e8 d1 67 ff ff       	call   c0012d04 <File::close()>
c001c533:	83 c4 10             	add    esp,0x10
c001c536:	b0 01                	mov    al,0x1
c001c538:	83 c4 3c             	add    esp,0x3c
c001c53b:	5b                   	pop    ebx
c001c53c:	5e                   	pop    esi
c001c53d:	5f                   	pop    edi
c001c53e:	5d                   	pop    ebp
c001c53f:	c3                   	ret    

c001c540 <Thr::runtimeReferenceHelper()>:
c001c540:	83 ec 18             	sub    esp,0x18
c001c543:	68 04 ba 02 c0       	push   0xc002ba04
c001c548:	e8 96 61 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001c54d:	fa                   	cli    
c001c54e:	83 c4 10             	add    esp,0x10
c001c551:	eb fe                	jmp    c001c551 <Thr::runtimeReferenceHelper()+0x11>

c001c553 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c553:	57                   	push   edi
c001c554:	56                   	push   esi
c001c555:	53                   	push   ebx
c001c556:	31 db                	xor    ebx,ebx
c001c558:	39 1d c0 0e 03 c0    	cmp    DWORD PTR ds:0xc0030ec0,ebx
c001c55e:	7e 3c                	jle    c001c59c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c560:	8b 34 9d 40 0e 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf1c0]
c001c567:	31 ff                	xor    edi,edi
c001c569:	39 3c 9d 40 0d 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf2c0],edi
c001c570:	7e 27                	jle    c001c599 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c572:	50                   	push   eax
c001c573:	50                   	push   eax
c001c574:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c578:	8b 06                	mov    eax,DWORD PTR [esi]
c001c57a:	03 04 9d c0 0d 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf240]
c001c581:	50                   	push   eax
c001c582:	e8 11 43 fe ff       	call   c0000898 <strcmp>
c001c587:	83 c4 10             	add    esp,0x10
c001c58a:	85 c0                	test   eax,eax
c001c58c:	75 05                	jne    c001c593 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c58e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c591:	eb 0b                	jmp    c001c59e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c593:	83 c6 10             	add    esi,0x10
c001c596:	47                   	inc    edi
c001c597:	eb d0                	jmp    c001c569 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c599:	43                   	inc    ebx
c001c59a:	eb bc                	jmp    c001c558 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c59c:	31 c0                	xor    eax,eax
c001c59e:	5b                   	pop    ebx
c001c59f:	5e                   	pop    esi
c001c5a0:	5f                   	pop    edi
c001c5a1:	c3                   	ret    

c001c5a2 <Thr::loadKernelSymbolTable(char const*)>:
c001c5a2:	55                   	push   ebp
c001c5a3:	57                   	push   edi
c001c5a4:	56                   	push   esi
c001c5a5:	53                   	push   ebx
c001c5a6:	83 ec 68             	sub    esp,0x68
c001c5a9:	8b 35 10 0f 03 c0    	mov    esi,DWORD PTR ds:0xc0030f10
c001c5af:	68 14 01 00 00       	push   0x114
c001c5b4:	e8 e0 2f ff ff       	call   c000f599 <malloc>
c001c5b9:	83 c4 0c             	add    esp,0xc
c001c5bc:	89 c3                	mov    ebx,eax
c001c5be:	56                   	push   esi
c001c5bf:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c5c3:	50                   	push   eax
c001c5c4:	e8 79 66 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c001c5c9:	5e                   	pop    esi
c001c5ca:	5f                   	pop    edi
c001c5cb:	6a 01                	push   0x1
c001c5cd:	53                   	push   ebx
c001c5ce:	e8 d3 66 ff ff       	call   c0012ca6 <File::open(FileOpenMode)>
c001c5d3:	83 c4 10             	add    esp,0x10
c001c5d6:	85 c0                	test   eax,eax
c001c5d8:	74 0a                	je     c001c5e4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c5da:	83 ec 0c             	sub    esp,0xc
c001c5dd:	68 26 ba 02 c0       	push   0xc002ba26
c001c5e2:	eb 34                	jmp    c001c618 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c5e4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c5ec:	83 ec 0c             	sub    esp,0xc
c001c5ef:	6a 34                	push   0x34
c001c5f1:	e8 a3 2f ff ff       	call   c000f599 <malloc>
c001c5f6:	59                   	pop    ecx
c001c5f7:	89 c7                	mov    edi,eax
c001c5f9:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c5fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5ff:	56                   	push   esi
c001c600:	57                   	push   edi
c001c601:	6a 00                	push   0x0
c001c603:	6a 34                	push   0x34
c001c605:	53                   	push   ebx
c001c606:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c609:	83 c4 20             	add    esp,0x20
c001c60c:	85 c0                	test   eax,eax
c001c60e:	74 17                	je     c001c627 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c610:	83 ec 0c             	sub    esp,0xc
c001c613:	68 3d ba 02 c0       	push   0xc002ba3d
c001c618:	e8 32 d8 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001c61d:	83 c4 10             	add    esp,0x10
c001c620:	31 c0                	xor    eax,eax
c001c622:	e9 31 02 00 00       	jmp    c001c858 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c627:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c62d:	75 e1                	jne    c001c610 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c62f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c632:	85 c0                	test   eax,eax
c001c634:	74 da                	je     c001c610 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c636:	52                   	push   edx
c001c637:	31 d2                	xor    edx,edx
c001c639:	52                   	push   edx
c001c63a:	50                   	push   eax
c001c63b:	53                   	push   ebx
c001c63c:	e8 23 67 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001c641:	83 c4 10             	add    esp,0x10
c001c644:	85 c0                	test   eax,eax
c001c646:	75 c8                	jne    c001c610 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c648:	83 ec 0c             	sub    esp,0xc
c001c64b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c64f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c653:	31 ed                	xor    ebp,ebp
c001c655:	0f af c2             	imul   eax,edx
c001c658:	50                   	push   eax
c001c659:	e8 3b 2f ff ff       	call   c000f599 <malloc>
c001c65e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c660:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c664:	89 34 24             	mov    DWORD PTR [esp],esi
c001c667:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c66b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c66f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c673:	0f af c2             	imul   eax,edx
c001c676:	99                   	cdq    
c001c677:	52                   	push   edx
c001c678:	50                   	push   eax
c001c679:	53                   	push   ebx
c001c67a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c67d:	83 c4 20             	add    esp,0x20
c001c680:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c688:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c690:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c698:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c6a0:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c6a4:	0f 86 aa 00 00 00    	jbe    c001c754 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c6aa:	0f b7 f5             	movzx  esi,bp
c001c6ad:	6b f6 28             	imul   esi,esi,0x28
c001c6b0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c6b4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c6b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6bb:	50                   	push   eax
c001c6bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6c0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c6c4:	8b 16                	mov    edx,DWORD PTR [esi]
c001c6c6:	6b c0 28             	imul   eax,eax,0x28
c001c6c9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c6cd:	89 d0                	mov    eax,edx
c001c6cf:	31 d2                	xor    edx,edx
c001c6d1:	52                   	push   edx
c001c6d2:	50                   	push   eax
c001c6d3:	53                   	push   ebx
c001c6d4:	e8 8b 66 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001c6d9:	83 c4 0c             	add    esp,0xc
c001c6dc:	6a 20                	push   0x20
c001c6de:	6a 00                	push   0x0
c001c6e0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6e4:	52                   	push   edx
c001c6e5:	e8 66 40 fe ff       	call   c0000750 <memset>
c001c6ea:	58                   	pop    eax
c001c6eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6ed:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c6f1:	51                   	push   ecx
c001c6f2:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c6f6:	52                   	push   edx
c001c6f7:	6a 00                	push   0x0
c001c6f9:	6a 1f                	push   0x1f
c001c6fb:	53                   	push   ebx
c001c6fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6ff:	83 c4 18             	add    esp,0x18
c001c702:	68 54 ba 02 c0       	push   0xc002ba54
c001c707:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c70b:	52                   	push   edx
c001c70c:	e8 87 41 fe ff       	call   c0000898 <strcmp>
c001c711:	83 c4 10             	add    esp,0x10
c001c714:	85 c0                	test   eax,eax
c001c716:	75 0f                	jne    c001c727 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c718:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c71b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c71f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c723:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c727:	50                   	push   eax
c001c728:	50                   	push   eax
c001c729:	68 5c ba 02 c0       	push   0xc002ba5c
c001c72e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c732:	50                   	push   eax
c001c733:	e8 60 41 fe ff       	call   c0000898 <strcmp>
c001c738:	83 c4 10             	add    esp,0x10
c001c73b:	85 c0                	test   eax,eax
c001c73d:	75 0f                	jne    c001c74e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c73f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c742:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c746:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c74a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c74e:	45                   	inc    ebp
c001c74f:	e9 4c ff ff ff       	jmp    c001c6a0 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c754:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c759:	75 10                	jne    c001c76b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c75b:	83 ec 0c             	sub    esp,0xc
c001c75e:	68 64 ba 02 c0       	push   0xc002ba64
c001c763:	e8 e7 d6 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001c768:	83 c4 10             	add    esp,0x10
c001c76b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c770:	75 10                	jne    c001c782 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c772:	83 ec 0c             	sub    esp,0xc
c001c775:	68 64 ba 02 c0       	push   0xc002ba64
c001c77a:	e8 d0 d6 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001c77f:	83 c4 10             	add    esp,0x10
c001c782:	31 d2                	xor    edx,edx
c001c784:	50                   	push   eax
c001c785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c789:	52                   	push   edx
c001c78a:	50                   	push   eax
c001c78b:	53                   	push   ebx
c001c78c:	e8 d3 65 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001c791:	5a                   	pop    edx
c001c792:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c796:	e8 fe 2d ff ff       	call   c000f599 <malloc>
c001c79b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c79f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7a3:	31 c9                	xor    ecx,ecx
c001c7a5:	5e                   	pop    esi
c001c7a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7a8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c7ac:	55                   	push   ebp
c001c7ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7b1:	51                   	push   ecx
c001c7b2:	52                   	push   edx
c001c7b3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c7b7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c7bb:	53                   	push   ebx
c001c7bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7bf:	83 c4 14             	add    esp,0x14
c001c7c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7c6:	e8 ce 2d ff ff       	call   c000f599 <malloc>
c001c7cb:	89 c6                	mov    esi,eax
c001c7cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7cf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7d2:	56                   	push   esi
c001c7d3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c7d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c7db:	51                   	push   ecx
c001c7dc:	52                   	push   edx
c001c7dd:	53                   	push   ebx
c001c7de:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7e5:	8b 15 c0 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ec0
c001c7eb:	83 c4 1c             	add    esp,0x1c
c001c7ee:	c1 e8 04             	shr    eax,0x4
c001c7f1:	89 04 95 40 0d 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf2c0],eax
c001c7f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7fc:	31 d2                	xor    edx,edx
c001c7fe:	52                   	push   edx
c001c7ff:	50                   	push   eax
c001c800:	53                   	push   ebx
c001c801:	e8 5e 65 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001c806:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c808:	31 d2                	xor    edx,edx
c001c80a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c80d:	56                   	push   esi
c001c80e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c812:	52                   	push   edx
c001c813:	50                   	push   eax
c001c814:	53                   	push   ebx
c001c815:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c818:	83 c4 14             	add    esp,0x14
c001c81b:	53                   	push   ebx
c001c81c:	e8 e3 64 ff ff       	call   c0012d04 <File::close()>
c001c821:	5d                   	pop    ebp
c001c822:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c826:	e8 7e 2d ff ff       	call   c000f5a9 <free>
c001c82b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c82e:	e8 76 2d ff ff       	call   c000f5a9 <free>
c001c833:	a1 c0 0e 03 c0       	mov    eax,ds:0xc0030ec0
c001c838:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c83c:	8d 50 01             	lea    edx,[eax+0x1]
c001c83f:	89 0c 85 40 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1c0],ecx
c001c846:	89 34 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],esi
c001c84d:	89 15 c0 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec0,edx
c001c853:	83 c4 10             	add    esp,0x10
c001c856:	b0 01                	mov    al,0x1
c001c858:	83 c4 5c             	add    esp,0x5c
c001c85b:	5b                   	pop    ebx
c001c85c:	5e                   	pop    esi
c001c85d:	5f                   	pop    edi
c001c85e:	5d                   	pop    ebp
c001c85f:	c3                   	ret    

c001c860 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c860:	55                   	push   ebp
c001c861:	57                   	push   edi
c001c862:	56                   	push   esi
c001c863:	53                   	push   ebx
c001c864:	81 ec 68 03 00 00    	sub    esp,0x368
c001c86a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c871:	8b 1d 10 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f10
c001c877:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c87b:	68 14 01 00 00       	push   0x114
c001c880:	e8 14 2d ff ff       	call   c000f599 <malloc>
c001c885:	83 c4 0c             	add    esp,0xc
c001c888:	89 c5                	mov    ebp,eax
c001c88a:	53                   	push   ebx
c001c88b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c892:	50                   	push   eax
c001c893:	e8 aa 63 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c001c898:	5e                   	pop    esi
c001c899:	5f                   	pop    edi
c001c89a:	6a 01                	push   0x1
c001c89c:	55                   	push   ebp
c001c89d:	e8 04 64 ff ff       	call   c0012ca6 <File::open(FileOpenMode)>
c001c8a2:	83 c4 10             	add    esp,0x10
c001c8a5:	85 c0                	test   eax,eax
c001c8a7:	0f 85 a7 06 00 00    	jne    c001cf54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8ad:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c8b5:	83 ec 0c             	sub    esp,0xc
c001c8b8:	6a 34                	push   0x34
c001c8ba:	e8 da 2c ff ff       	call   c000f599 <malloc>
c001c8bf:	5b                   	pop    ebx
c001c8c0:	89 c7                	mov    edi,eax
c001c8c2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c8c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8c9:	53                   	push   ebx
c001c8ca:	57                   	push   edi
c001c8cb:	6a 00                	push   0x0
c001c8cd:	6a 34                	push   0x34
c001c8cf:	55                   	push   ebp
c001c8d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8d3:	83 c4 20             	add    esp,0x20
c001c8d6:	85 c0                	test   eax,eax
c001c8d8:	0f 85 76 06 00 00    	jne    c001cf54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8de:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c8e4:	0f 85 6a 06 00 00    	jne    c001cf54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8ea:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c8ed:	85 c0                	test   eax,eax
c001c8ef:	0f 84 5f 06 00 00    	je     c001cf54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8f5:	31 d2                	xor    edx,edx
c001c8f7:	51                   	push   ecx
c001c8f8:	52                   	push   edx
c001c8f9:	50                   	push   eax
c001c8fa:	55                   	push   ebp
c001c8fb:	e8 64 64 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001c900:	83 c4 10             	add    esp,0x10
c001c903:	85 c0                	test   eax,eax
c001c905:	0f 85 49 06 00 00    	jne    c001cf54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c90b:	83 ec 0c             	sub    esp,0xc
c001c90e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c911:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c915:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c919:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c91d:	0f af c2             	imul   eax,edx
c001c920:	50                   	push   eax
c001c921:	e8 73 2c ff ff       	call   c000f599 <malloc>
c001c926:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c92d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c930:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c934:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c938:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c93c:	0f af c2             	imul   eax,edx
c001c93f:	99                   	cdq    
c001c940:	52                   	push   edx
c001c941:	50                   	push   eax
c001c942:	55                   	push   ebp
c001c943:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c946:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c949:	83 c4 20             	add    esp,0x20
c001c94c:	85 c0                	test   eax,eax
c001c94e:	0f 84 00 06 00 00    	je     c001cf54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c954:	52                   	push   edx
c001c955:	31 d2                	xor    edx,edx
c001c957:	52                   	push   edx
c001c958:	50                   	push   eax
c001c959:	55                   	push   ebp
c001c95a:	e8 05 64 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001c95f:	83 c4 10             	add    esp,0x10
c001c962:	85 c0                	test   eax,eax
c001c964:	0f 85 ea 05 00 00    	jne    c001cf54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c96a:	83 ec 0c             	sub    esp,0xc
c001c96d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c971:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c975:	31 f6                	xor    esi,esi
c001c977:	0f af c2             	imul   eax,edx
c001c97a:	50                   	push   eax
c001c97b:	e8 19 2c ff ff       	call   c000f599 <malloc>
c001c980:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c983:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c987:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c98a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c98e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c992:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c996:	0f af c2             	imul   eax,edx
c001c999:	99                   	cdq    
c001c99a:	52                   	push   edx
c001c99b:	50                   	push   eax
c001c99c:	55                   	push   ebp
c001c99d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9a0:	83 c4 20             	add    esp,0x20
c001c9a3:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c9a7:	0f 86 8a 00 00 00    	jbe    c001ca37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c9ad:	0f b7 de             	movzx  ebx,si
c001c9b0:	c1 e3 05             	shl    ebx,0x5
c001c9b3:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c9b7:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c9ba:	75 75                	jne    c001ca31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c9bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9bf:	31 d2                	xor    edx,edx
c001c9c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9cc:	50                   	push   eax
c001c9cd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c9d0:	52                   	push   edx
c001c9d1:	50                   	push   eax
c001c9d2:	55                   	push   ebp
c001c9d3:	e8 8c 63 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001c9d8:	83 c4 10             	add    esp,0x10
c001c9db:	85 c0                	test   eax,eax
c001c9dd:	0f 85 71 05 00 00    	jne    c001cf54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9e3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c9ea:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9ed:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c9f1:	31 d2                	xor    edx,edx
c001c9f3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c9f7:	83 ec 0c             	sub    esp,0xc
c001c9fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9fe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca05:	50                   	push   eax
c001ca06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca0e:	52                   	push   edx
c001ca0f:	50                   	push   eax
c001ca10:	55                   	push   ebp
c001ca11:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca14:	83 c4 1c             	add    esp,0x1c
c001ca17:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca1a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ca1d:	50                   	push   eax
c001ca1e:	6a 00                	push   0x0
c001ca20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca24:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ca28:	50                   	push   eax
c001ca29:	e8 22 3d fe ff       	call   c0000750 <memset>
c001ca2e:	83 c4 10             	add    esp,0x10
c001ca31:	46                   	inc    esi
c001ca32:	e9 6c ff ff ff       	jmp    c001c9a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ca37:	53                   	push   ebx
c001ca38:	31 db                	xor    ebx,ebx
c001ca3a:	68 00 01 00 00       	push   0x100
c001ca3f:	6a 00                	push   0x0
c001ca41:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca45:	50                   	push   eax
c001ca46:	e8 05 3d fe ff       	call   c0000750 <memset>
c001ca4b:	83 c4 0c             	add    esp,0xc
c001ca4e:	68 00 01 00 00       	push   0x100
c001ca53:	6a 00                	push   0x0
c001ca55:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca5c:	50                   	push   eax
c001ca5d:	e8 ee 3c fe ff       	call   c0000750 <memset>
c001ca62:	83 c4 10             	add    esp,0x10
c001ca65:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca6d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca75:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca7d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca85:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ca8d:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ca91:	0f 86 30 01 00 00    	jbe    c001cbc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ca97:	0f b7 f3             	movzx  esi,bx
c001ca9a:	6b f6 28             	imul   esi,esi,0x28
c001ca9d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001caa1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001caa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001caa8:	52                   	push   edx
c001caa9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001caad:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cab1:	8b 06                	mov    eax,DWORD PTR [esi]
c001cab3:	6b d2 28             	imul   edx,edx,0x28
c001cab6:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001caba:	31 d2                	xor    edx,edx
c001cabc:	52                   	push   edx
c001cabd:	50                   	push   eax
c001cabe:	55                   	push   ebp
c001cabf:	e8 a0 62 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001cac4:	83 c4 0c             	add    esp,0xc
c001cac7:	6a 20                	push   0x20
c001cac9:	6a 00                	push   0x0
c001cacb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cad2:	51                   	push   ecx
c001cad3:	e8 78 3c fe ff       	call   c0000750 <memset>
c001cad8:	59                   	pop    ecx
c001cad9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cadc:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cae0:	52                   	push   edx
c001cae1:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cae8:	51                   	push   ecx
c001cae9:	6a 00                	push   0x0
c001caeb:	6a 1f                	push   0x1f
c001caed:	55                   	push   ebp
c001caee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001caf1:	83 c4 1c             	add    esp,0x1c
c001caf4:	6a 09                	push   0x9
c001caf6:	68 7e ba 02 c0       	push   0xc002ba7e
c001cafb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cb02:	51                   	push   ecx
c001cb03:	e8 44 3b fe ff       	call   c000064c <memcmp>
c001cb08:	83 c4 10             	add    esp,0x10
c001cb0b:	85 c0                	test   eax,eax
c001cb0d:	75 21                	jne    c001cb30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cb0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb17:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb1b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb1f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb22:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb29:	89 d0                	mov    eax,edx
c001cb2b:	40                   	inc    eax
c001cb2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb30:	50                   	push   eax
c001cb31:	6a 09                	push   0x9
c001cb33:	68 88 ba 02 c0       	push   0xc002ba88
c001cb38:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb3f:	50                   	push   eax
c001cb40:	e8 07 3b fe ff       	call   c000064c <memcmp>
c001cb45:	83 c4 10             	add    esp,0x10
c001cb48:	85 c0                	test   eax,eax
c001cb4a:	75 21                	jne    c001cb6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb54:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb5c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb5f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb66:	89 d0                	mov    eax,edx
c001cb68:	40                   	inc    eax
c001cb69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb6d:	50                   	push   eax
c001cb6e:	50                   	push   eax
c001cb6f:	68 54 ba 02 c0       	push   0xc002ba54
c001cb74:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb7b:	50                   	push   eax
c001cb7c:	e8 17 3d fe ff       	call   c0000898 <strcmp>
c001cb81:	83 c4 10             	add    esp,0x10
c001cb84:	85 c0                	test   eax,eax
c001cb86:	75 0f                	jne    c001cb97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cb88:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb8b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb97:	50                   	push   eax
c001cb98:	50                   	push   eax
c001cb99:	68 5c ba 02 c0       	push   0xc002ba5c
c001cb9e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cba5:	50                   	push   eax
c001cba6:	e8 ed 3c fe ff       	call   c0000898 <strcmp>
c001cbab:	83 c4 10             	add    esp,0x10
c001cbae:	85 c0                	test   eax,eax
c001cbb0:	75 0f                	jne    c001cbc1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cbb2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cbb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbbd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cbc1:	43                   	inc    ebx
c001cbc2:	e9 c6 fe ff ff       	jmp    c001ca8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cbc7:	31 d2                	xor    edx,edx
c001cbc9:	50                   	push   eax
c001cbca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbce:	52                   	push   edx
c001cbcf:	50                   	push   eax
c001cbd0:	55                   	push   ebp
c001cbd1:	e8 8e 61 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001cbd6:	58                   	pop    eax
c001cbd7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbdb:	e8 b9 29 ff ff       	call   c000f599 <malloc>
c001cbe0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbe3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cbe7:	31 d2                	xor    edx,edx
c001cbe9:	58                   	pop    eax
c001cbea:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cbee:	53                   	push   ebx
c001cbef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cbf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbf7:	52                   	push   edx
c001cbf8:	50                   	push   eax
c001cbf9:	55                   	push   ebp
c001cbfa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbfd:	83 c4 14             	add    esp,0x14
c001cc00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc04:	e8 90 29 ff ff       	call   c000f599 <malloc>
c001cc09:	31 d2                	xor    edx,edx
c001cc0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cc0f:	83 c4 0c             	add    esp,0xc
c001cc12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc16:	52                   	push   edx
c001cc17:	50                   	push   eax
c001cc18:	55                   	push   ebp
c001cc19:	e8 46 61 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001cc1e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc21:	31 d2                	xor    edx,edx
c001cc23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc2e:	52                   	push   edx
c001cc2f:	50                   	push   eax
c001cc30:	55                   	push   ebp
c001cc31:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc34:	83 c4 20             	add    esp,0x20
c001cc37:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc3f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc43:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc47:	0f 84 0b 03 00 00    	je     c001cf58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cc4d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc54:	31 d2                	xor    edx,edx
c001cc56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc5a:	c1 e8 03             	shr    eax,0x3
c001cc5d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc61:	51                   	push   ecx
c001cc62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc66:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc6a:	52                   	push   edx
c001cc6b:	50                   	push   eax
c001cc6c:	55                   	push   ebp
c001cc6d:	e8 f2 60 ff ff       	call   c0012d64 <File::seek(unsigned long long)>
c001cc72:	5b                   	pop    ebx
c001cc73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc77:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc7e:	e8 16 29 ff ff       	call   c000f599 <malloc>
c001cc83:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc8a:	31 d2                	xor    edx,edx
c001cc8c:	5e                   	pop    esi
c001cc8d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cc91:	50                   	push   eax
c001cc92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc9a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cca1:	52                   	push   edx
c001cca2:	50                   	push   eax
c001cca3:	55                   	push   ebp
c001cca4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cca7:	83 c4 20             	add    esp,0x20
c001ccaa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ccb2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ccb6:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001ccba:	0f 8d 7c 02 00 00    	jge    c001cf3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001ccc0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ccc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccc8:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cccd:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001ccd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ccd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccd8:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ccdc:	89 d8                	mov    eax,ebx
c001ccde:	c1 e8 08             	shr    eax,0x8
c001cce1:	89 c6                	mov    esi,eax
c001cce3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cce7:	c1 e6 04             	shl    esi,0x4
c001ccea:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ccee:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ccf1:	85 d2                	test   edx,edx
c001ccf3:	0f 85 bf 00 00 00    	jne    c001cdb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccf9:	83 ec 0c             	sub    esp,0xc
c001ccfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd00:	03 06                	add    eax,DWORD PTR [esi]
c001cd02:	50                   	push   eax
c001cd03:	e8 4b f8 ff ff       	call   c001c553 <Thr::getAddressOfKernelSymbol(char const*)>
c001cd08:	83 c4 10             	add    esp,0x10
c001cd0b:	89 c2                	mov    edx,eax
c001cd0d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cd12:	85 c0                	test   eax,eax
c001cd14:	0f 85 9e 00 00 00    	jne    c001cdb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd1a:	83 ec 0c             	sub    esp,0xc
c001cd1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd21:	03 06                	add    eax,DWORD PTR [esi]
c001cd23:	50                   	push   eax
c001cd24:	e8 16 18 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cd29:	83 c4 10             	add    esp,0x10
c001cd2c:	89 c2                	mov    edx,eax
c001cd2e:	85 c0                	test   eax,eax
c001cd30:	0f 85 82 00 00 00    	jne    c001cdb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd36:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd3a:	50                   	push   eax
c001cd3b:	50                   	push   eax
c001cd3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd40:	03 06                	add    eax,DWORD PTR [esi]
c001cd42:	50                   	push   eax
c001cd43:	68 92 ba 02 c0       	push   0xc002ba92
c001cd48:	e8 96 59 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001cd4d:	58                   	pop    eax
c001cd4e:	5a                   	pop    edx
c001cd4f:	68 ac ba 02 c0       	push   0xc002baac
c001cd54:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd5b:	50                   	push   eax
c001cd5c:	e8 ab 3a fe ff       	call   c000080c <strcpy>
c001cd61:	59                   	pop    ecx
c001cd62:	58                   	pop    eax
c001cd63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd67:	03 06                	add    eax,DWORD PTR [esi]
c001cd69:	50                   	push   eax
c001cd6a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd71:	50                   	push   eax
c001cd72:	e8 d5 3b fe ff       	call   c000094c <strcat>
c001cd77:	58                   	pop    eax
c001cd78:	5a                   	pop    edx
c001cd79:	68 42 bb 02 c0       	push   0xc002bb42
c001cd7e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd85:	50                   	push   eax
c001cd86:	e8 c1 3b fe ff       	call   c000094c <strcat>
c001cd8b:	83 c4 10             	add    esp,0x10
c001cd8e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd93:	0f 84 5d 01 00 00    	je     c001cef6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd99:	83 ec 0c             	sub    esp,0xc
c001cd9c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cda3:	50                   	push   eax
c001cda4:	e8 a6 d0 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001cda9:	83 c4 10             	add    esp,0x10
c001cdac:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cdb0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cdb4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cdb8:	80 fb 01             	cmp    bl,0x1
c001cdbb:	0f 85 88 00 00 00    	jne    c001ce49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cdc1:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cdc8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cdcc:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cdd0:	01 ce                	add    esi,ecx
c001cdd2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cdd8:	0f 94 c0             	sete   al
c001cddb:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cde1:	0f 94 c3             	sete   bl
c001cde4:	09 c3                	or     ebx,eax
c001cde6:	8b 06                	mov    eax,DWORD PTR [esi]
c001cde8:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cded:	74 41                	je     c001ce30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cdef:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cdf2:	84 db                	test   bl,bl
c001cdf4:	75 15                	jne    c001ce0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cdf6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdfa:	66 83 f8 0c          	cmp    ax,0xc
c001cdfe:	76 05                	jbe    c001ce05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001ce00:	b8 0c 00 00 00       	mov    eax,0xc
c001ce05:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce09:	76 37                	jbe    c001ce42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce0b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001ce0f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce14:	0f 84 dc 00 00 00    	je     c001cef6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce1a:	83 ec 0c             	sub    esp,0xc
c001ce1d:	68 c3 ba 02 c0       	push   0xc002bac3
c001ce22:	e8 28 d0 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001ce27:	83 c4 10             	add    esp,0x10
c001ce2a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ce2e:	eb 12                	jmp    c001ce42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce30:	01 c1                	add    ecx,eax
c001ce32:	84 db                	test   bl,bl
c001ce34:	75 0c                	jne    c001ce42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce36:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce3a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce3e:	77 02                	ja     c001ce42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce40:	01 d1                	add    ecx,edx
c001ce42:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce44:	e9 ea 00 00 00       	jmp    c001cf33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce49:	80 fb 02             	cmp    bl,0x2
c001ce4c:	75 7c                	jne    c001ceca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ce4e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce55:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce59:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce5d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce63:	74 20                	je     c001ce85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce65:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce6b:	74 18                	je     c001ce85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce6d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce71:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce76:	66 83 f8 0e          	cmp    ax,0xe
c001ce7a:	77 03                	ja     c001ce7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ce7c:	8d 48 fc             	lea    ecx,[eax-0x4]
c001ce7f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001ce83:	76 1f                	jbe    c001cea4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001ce85:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce89:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce8e:	74 66                	je     c001cef6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce90:	83 ec 0c             	sub    esp,0xc
c001ce93:	68 df ba 02 c0       	push   0xc002badf
c001ce98:	e8 b2 cf ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001ce9d:	83 c4 10             	add    esp,0x10
c001cea0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cea4:	8b 06                	mov    eax,DWORD PTR [esi]
c001cea6:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ceab:	74 13                	je     c001cec0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cead:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ceb1:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ceb8:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cebc:	01 c8                	add    eax,ecx
c001cebe:	eb 04                	jmp    c001cec4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cec0:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cec4:	01 c2                	add    edx,eax
c001cec6:	89 16                	mov    DWORD PTR [esi],edx
c001cec8:	eb 69                	jmp    c001cf33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ceca:	0f b6 db             	movzx  ebx,bl
c001cecd:	50                   	push   eax
c001cece:	50                   	push   eax
c001cecf:	53                   	push   ebx
c001ced0:	68 fb ba 02 c0       	push   0xc002bafb
c001ced5:	e8 09 58 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001ceda:	83 c4 10             	add    esp,0x10
c001cedd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cee2:	74 12                	je     c001cef6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cee4:	83 ec 0c             	sub    esp,0xc
c001cee7:	68 06 bb 02 c0       	push   0xc002bb06
c001ceec:	e8 5e cf ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001cef1:	83 c4 10             	add    esp,0x10
c001cef4:	eb 3d                	jmp    c001cf33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cef6:	83 ec 0c             	sub    esp,0xc
c001cef9:	55                   	push   ebp
c001cefa:	e8 05 5e ff ff       	call   c0012d04 <File::close()>
c001ceff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf02:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf05:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf08:	59                   	pop    ecx
c001cf09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf0d:	e8 97 26 ff ff       	call   c000f5a9 <free>
c001cf12:	5b                   	pop    ebx
c001cf13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf17:	e8 8d 26 ff ff       	call   c000f5a9 <free>
c001cf1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf1f:	e8 85 26 ff ff       	call   c000f5a9 <free>
c001cf24:	5e                   	pop    esi
c001cf25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf29:	e8 7b 26 ff ff       	call   c000f5a9 <free>
c001cf2e:	83 c4 10             	add    esp,0x10
c001cf31:	eb 21                	jmp    c001cf54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf33:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cf37:	e9 76 fd ff ff       	jmp    c001ccb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cf3c:	83 ec 0c             	sub    esp,0xc
c001cf3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf43:	e8 61 26 ff ff       	call   c000f5a9 <free>
c001cf48:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf4c:	83 c4 10             	add    esp,0x10
c001cf4f:	e9 eb fc ff ff       	jmp    c001cc3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf54:	31 c0                	xor    eax,eax
c001cf56:	eb 33                	jmp    c001cf8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cf58:	83 ec 0c             	sub    esp,0xc
c001cf5b:	55                   	push   ebp
c001cf5c:	e8 a3 5d ff ff       	call   c0012d04 <File::close()>
c001cf61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf64:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf6a:	58                   	pop    eax
c001cf6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf6f:	e8 35 26 ff ff       	call   c000f5a9 <free>
c001cf74:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf77:	e8 2d 26 ff ff       	call   c000f5a9 <free>
c001cf7c:	5a                   	pop    edx
c001cf7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf81:	e8 23 26 ff ff       	call   c000f5a9 <free>
c001cf86:	83 c4 10             	add    esp,0x10
c001cf89:	b0 01                	mov    al,0x1
c001cf8b:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cf91:	5b                   	pop    ebx
c001cf92:	5e                   	pop    esi
c001cf93:	5f                   	pop    edi
c001cf94:	5d                   	pop    ebp
c001cf95:	c3                   	ret    

c001cf96 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cf96:	56                   	push   esi
c001cf97:	31 d2                	xor    edx,edx
c001cf99:	53                   	push   ebx
c001cf9a:	8b 1d 20 07 03 c0    	mov    ebx,DWORD PTR ds:0xc0030720
c001cfa0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cfa4:	39 d3                	cmp    ebx,edx
c001cfa6:	7e 1b                	jle    c001cfc3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cfa8:	8b 04 95 40 09 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf6c0]
c001cfaf:	39 c8                	cmp    eax,ecx
c001cfb1:	77 0d                	ja     c001cfc0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cfb3:	8b 34 95 40 07 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf8c0]
c001cfba:	01 c6                	add    esi,eax
c001cfbc:	39 ce                	cmp    esi,ecx
c001cfbe:	77 05                	ja     c001cfc5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cfc0:	42                   	inc    edx
c001cfc1:	eb e1                	jmp    c001cfa4 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cfc3:	31 c0                	xor    eax,eax
c001cfc5:	5b                   	pop    ebx
c001cfc6:	5e                   	pop    esi
c001cfc7:	c3                   	ret    

c001cfc8 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cfc8:	53                   	push   ebx
c001cfc9:	31 c0                	xor    eax,eax
c001cfcb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cfcf:	8b 1d 20 07 03 c0    	mov    ebx,DWORD PTR ds:0xc0030720
c001cfd5:	39 c3                	cmp    ebx,eax
c001cfd7:	7e 22                	jle    c001cffb <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cfd9:	8b 14 85 40 09 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf6c0]
c001cfe0:	39 ca                	cmp    edx,ecx
c001cfe2:	77 14                	ja     c001cff8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfe4:	03 14 85 40 07 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf8c0]
c001cfeb:	39 ca                	cmp    edx,ecx
c001cfed:	76 09                	jbe    c001cff8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfef:	8b 04 85 40 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4c0]
c001cff6:	eb 05                	jmp    c001cffd <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cff8:	40                   	inc    eax
c001cff9:	eb da                	jmp    c001cfd5 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cffb:	31 c0                	xor    eax,eax
c001cffd:	5b                   	pop    ebx
c001cffe:	c3                   	ret    

c001cfff <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cfff:	53                   	push   ebx
c001d000:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d004:	53                   	push   ebx
c001d005:	e8 8c ff ff ff       	call   c001cf96 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d00a:	5a                   	pop    edx
c001d00b:	31 d2                	xor    edx,edx
c001d00d:	85 c0                	test   eax,eax
c001d00f:	74 04                	je     c001d015 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d011:	89 da                	mov    edx,ebx
c001d013:	29 c2                	sub    edx,eax
c001d015:	89 d0                	mov    eax,edx
c001d017:	5b                   	pop    ebx
c001d018:	c3                   	ret    

c001d019 <Thr::loadDLL(char const*, bool)>:
c001d019:	55                   	push   ebp
c001d01a:	57                   	push   edi
c001d01b:	56                   	push   esi
c001d01c:	53                   	push   ebx
c001d01d:	81 ec 34 01 00 00    	sub    esp,0x134
c001d023:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d02a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d031:	56                   	push   esi
c001d032:	68 1e bb 02 c0       	push   0xc002bb1e
c001d037:	e8 a7 56 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001d03c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d043:	e8 51 25 ff ff       	call   c000f599 <malloc>
c001d048:	83 c4 0c             	add    esp,0xc
c001d04b:	89 c3                	mov    ebx,eax
c001d04d:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c001d053:	56                   	push   esi
c001d054:	50                   	push   eax
c001d055:	e8 e8 5b ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c001d05a:	83 c4 10             	add    esp,0x10
c001d05d:	85 db                	test   ebx,ebx
c001d05f:	75 3c                	jne    c001d09d <Thr::loadDLL(char const*, bool)+0x84>
c001d061:	89 f8                	mov    eax,edi
c001d063:	84 c0                	test   al,al
c001d065:	0f 84 d5 01 00 00    	je     c001d240 <Thr::loadDLL(char const*, bool)+0x227>
c001d06b:	55                   	push   ebp
c001d06c:	55                   	push   ebp
c001d06d:	68 2f bb 02 c0       	push   0xc002bb2f
c001d072:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d076:	55                   	push   ebp
c001d077:	e8 90 37 fe ff       	call   c000080c <strcpy>
c001d07c:	58                   	pop    eax
c001d07d:	5a                   	pop    edx
c001d07e:	56                   	push   esi
c001d07f:	55                   	push   ebp
c001d080:	e8 c7 38 fe ff       	call   c000094c <strcat>
c001d085:	59                   	pop    ecx
c001d086:	58                   	pop    eax
c001d087:	68 42 bb 02 c0       	push   0xc002bb42
c001d08c:	55                   	push   ebp
c001d08d:	e8 ba 38 fe ff       	call   c000094c <strcat>
c001d092:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d095:	e8 b5 cd ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001d09a:	83 c4 10             	add    esp,0x10
c001d09d:	51                   	push   ecx
c001d09e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d0a2:	50                   	push   eax
c001d0a3:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d0a7:	50                   	push   eax
c001d0a8:	53                   	push   ebx
c001d0a9:	e8 a4 5e ff ff       	call   c0012f52 <File::stat(unsigned long long*, bool*)>
c001d0ae:	83 c4 10             	add    esp,0x10
c001d0b1:	85 db                	test   ebx,ebx
c001d0b3:	74 0c                	je     c001d0c1 <Thr::loadDLL(char const*, bool)+0xa8>
c001d0b5:	83 ec 0c             	sub    esp,0xc
c001d0b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0ba:	53                   	push   ebx
c001d0bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0be:	83 c4 10             	add    esp,0x10
c001d0c1:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d0c6:	75 0a                	jne    c001d0d2 <Thr::loadDLL(char const*, bool)+0xb9>
c001d0c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d0cc:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d0d0:	75 3c                	jne    c001d10e <Thr::loadDLL(char const*, bool)+0xf5>
c001d0d2:	89 f8                	mov    eax,edi
c001d0d4:	84 c0                	test   al,al
c001d0d6:	0f 84 4c 01 00 00    	je     c001d228 <Thr::loadDLL(char const*, bool)+0x20f>
c001d0dc:	51                   	push   ecx
c001d0dd:	51                   	push   ecx
c001d0de:	68 2f bb 02 c0       	push   0xc002bb2f
c001d0e3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d0e7:	53                   	push   ebx
c001d0e8:	e8 1f 37 fe ff       	call   c000080c <strcpy>
c001d0ed:	5d                   	pop    ebp
c001d0ee:	58                   	pop    eax
c001d0ef:	56                   	push   esi
c001d0f0:	53                   	push   ebx
c001d0f1:	e8 56 38 fe ff       	call   c000094c <strcat>
c001d0f6:	58                   	pop    eax
c001d0f7:	5a                   	pop    edx
c001d0f8:	68 42 bb 02 c0       	push   0xc002bb42
c001d0fd:	53                   	push   ebx
c001d0fe:	e8 49 38 fe ff       	call   c000094c <strcat>
c001d103:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d106:	e8 44 cd ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001d10b:	83 c4 10             	add    esp,0x10
c001d10e:	52                   	push   edx
c001d10f:	68 03 08 00 00       	push   0x803
c001d114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d118:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d11c:	05 ff 0f 00 00       	add    eax,0xfff
c001d121:	83 d2 00             	adc    edx,0x0
c001d124:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d128:	50                   	push   eax
c001d129:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c001d12f:	e8 aa 49 ff ff       	call   c0011ade <VAS::allocatePages(int, int)>
c001d134:	59                   	pop    ecx
c001d135:	89 c3                	mov    ebx,eax
c001d137:	5d                   	pop    ebp
c001d138:	50                   	push   eax
c001d139:	68 b1 a0 02 c0       	push   0xc002a0b1
c001d13e:	e8 a0 55 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001d143:	89 34 24             	mov    DWORD PTR [esp],esi
c001d146:	e8 21 36 fe ff       	call   c000076c <strlen>
c001d14b:	8b 2d 20 07 03 c0    	mov    ebp,DWORD PTR ds:0xc0030720
c001d151:	40                   	inc    eax
c001d152:	89 04 24             	mov    DWORD PTR [esp],eax
c001d155:	e8 3f 24 ff ff       	call   c000f599 <malloc>
c001d15a:	89 04 ad 40 0b 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf4c0],eax
c001d161:	58                   	pop    eax
c001d162:	a1 20 07 03 c0       	mov    eax,ds:0xc0030720
c001d167:	5a                   	pop    edx
c001d168:	56                   	push   esi
c001d169:	ff 34 85 40 0b 03 c0 	push   DWORD PTR [eax*4-0x3ffcf4c0]
c001d170:	e8 97 36 fe ff       	call   c000080c <strcpy>
c001d175:	a1 20 07 03 c0       	mov    eax,ds:0xc0030720
c001d17a:	8d 50 01             	lea    edx,[eax+0x1]
c001d17d:	89 1c 85 40 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf6c0],ebx
c001d184:	89 15 20 07 03 c0    	mov    DWORD PTR ds:0xc0030720,edx
c001d18a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d18e:	83 c4 0c             	add    esp,0xc
c001d191:	89 14 85 40 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf8c0],edx
c001d198:	6a 01                	push   0x1
c001d19a:	53                   	push   ebx
c001d19b:	56                   	push   esi
c001d19c:	e8 bf f6 ff ff       	call   c001c860 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d1a1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d1a5:	83 c4 10             	add    esp,0x10
c001d1a8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d1ad:	0f 85 89 00 00 00    	jne    c001d23c <Thr::loadDLL(char const*, bool)+0x223>
c001d1b3:	89 f8                	mov    eax,edi
c001d1b5:	84 c0                	test   al,al
c001d1b7:	74 73                	je     c001d22c <Thr::loadDLL(char const*, bool)+0x213>
c001d1b9:	83 ec 0c             	sub    esp,0xc
c001d1bc:	68 44 bb 02 c0       	push   0xc002bb44
c001d1c1:	e8 89 cc ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001d1c6:	83 c4 10             	add    esp,0x10
c001d1c9:	eb 61                	jmp    c001d22c <Thr::loadDLL(char const*, bool)+0x213>
c001d1cb:	50                   	push   eax
c001d1cc:	50                   	push   eax
c001d1cd:	89 e8                	mov    eax,ebp
c001d1cf:	c1 e0 0c             	shl    eax,0xc
c001d1d2:	01 d8                	add    eax,ebx
c001d1d4:	50                   	push   eax
c001d1d5:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c001d1db:	e8 66 44 ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c001d1e0:	83 c4 10             	add    esp,0x10
c001d1e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1e5:	a8 60                	test   al,0x60
c001d1e7:	75 11                	jne    c001d1fa <Thr::loadDLL(char const*, bool)+0x1e1>
c001d1e9:	83 ec 0c             	sub    esp,0xc
c001d1ec:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d1f1:	50                   	push   eax
c001d1f2:	e8 2d 27 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001d1f7:	83 c4 10             	add    esp,0x10
c001d1fa:	45                   	inc    ebp
c001d1fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d203:	05 ff 0f 00 00       	add    eax,0xfff
c001d208:	bf 00 00 00 00       	mov    edi,0x0
c001d20d:	83 d2 00             	adc    edx,0x0
c001d210:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d214:	c1 ea 0c             	shr    edx,0xc
c001d217:	39 c5                	cmp    ebp,eax
c001d219:	89 d1                	mov    ecx,edx
c001d21b:	89 f8                	mov    eax,edi
c001d21d:	19 c8                	sbb    eax,ecx
c001d21f:	72 aa                	jb     c001d1cb <Thr::loadDLL(char const*, bool)+0x1b2>
c001d221:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d226:	75 18                	jne    c001d240 <Thr::loadDLL(char const*, bool)+0x227>
c001d228:	31 db                	xor    ebx,ebx
c001d22a:	eb 14                	jmp    c001d240 <Thr::loadDLL(char const*, bool)+0x227>
c001d22c:	83 ec 0c             	sub    esp,0xc
c001d22f:	68 63 bb 02 c0       	push   0xc002bb63
c001d234:	e8 16 cc ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001d239:	83 c4 10             	add    esp,0x10
c001d23c:	31 ed                	xor    ebp,ebp
c001d23e:	eb bb                	jmp    c001d1fb <Thr::loadDLL(char const*, bool)+0x1e2>
c001d240:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d246:	89 d8                	mov    eax,ebx
c001d248:	5b                   	pop    ebx
c001d249:	5e                   	pop    esi
c001d24a:	5f                   	pop    edi
c001d24b:	5d                   	pop    ebp
c001d24c:	c3                   	ret    

c001d24d <Thr::executeDLL(unsigned long, void*)>:
c001d24d:	56                   	push   esi
c001d24e:	53                   	push   ebx
c001d24f:	52                   	push   edx
c001d250:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d254:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d258:	85 db                	test   ebx,ebx
c001d25a:	75 10                	jne    c001d26c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d25c:	83 ec 0c             	sub    esp,0xc
c001d25f:	68 7f bb 02 c0       	push   0xc002bb7f
c001d264:	e8 e6 cb ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001d269:	83 c4 10             	add    esp,0x10
c001d26c:	50                   	push   eax
c001d26d:	50                   	push   eax
c001d26e:	53                   	push   ebx
c001d26f:	68 a9 bb 02 c0       	push   0xc002bba9
c001d274:	e8 6a 54 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001d279:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d27d:	89 d8                	mov    eax,ebx
c001d27f:	83 c4 14             	add    esp,0x14
c001d282:	5b                   	pop    ebx
c001d283:	5e                   	pop    esi
c001d284:	ff e0                	jmp    eax

c001d286 <userModeEntryPoint(void*)>:
c001d286:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001d28b:	48                   	dec    eax
c001d28c:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001d291:	75 01                	jne    c001d294 <userModeEntryPoint(void*)+0xe>
c001d293:	fb                   	sti    
c001d294:	fb                   	sti    
c001d295:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d29a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d29d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d2a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2a7:	e9 7e 30 fe ff       	jmp    c000032a <goToUsermode>

c001d2ac <changeTSS>:
c001d2ac:	83 ec 14             	sub    esp,0x14
c001d2af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2b4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d2b7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d2bc:	c1 e2 15             	shl    edx,0x15
c001d2bf:	29 d0                	sub    eax,edx
c001d2c1:	50                   	push   eax
c001d2c2:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001d2c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2cd:	05 7c 11 00 00       	add    eax,0x117c
c001d2d2:	50                   	push   eax
c001d2d3:	e8 9c 38 ff ff       	call   c0010b74 <TSS::setESP(unsigned long)>
c001d2d8:	83 c4 1c             	add    esp,0x1c
c001d2db:	c3                   	ret    

c001d2dc <switchToThread(ThreadControlBlock*)>:
c001d2dc:	57                   	push   edi
c001d2dd:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001d2e2:	56                   	push   esi
c001d2e3:	85 c0                	test   eax,eax
c001d2e5:	53                   	push   ebx
c001d2e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2ea:	0f 85 88 00 00 00    	jne    c001d378 <switchToThread(ThreadControlBlock*)+0x9c>
c001d2f0:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d2f3:	3c ff                	cmp    al,0xff
c001d2f5:	74 7d                	je     c001d374 <switchToThread(ThreadControlBlock*)+0x98>
c001d2f7:	0f b6 d0             	movzx  edx,al
c001d2fa:	b8 84 03 00 00       	mov    eax,0x384
c001d2ff:	29 d0                	sub    eax,edx
c001d301:	c1 e0 10             	shl    eax,0x10
c001d304:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d307:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d30a:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001d30f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d315:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d31c:	74 4a                	je     c001d368 <switchToThread(ThreadControlBlock*)+0x8c>
c001d31e:	0f 31                	rdtsc  
c001d320:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001d325:	89 c6                	mov    esi,eax
c001d327:	89 d7                	mov    edi,edx
c001d329:	2b 35 18 0f 03 c0    	sub    esi,DWORD PTR ds:0xc0030f18
c001d32f:	89 15 2c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f2c,edx
c001d335:	1b 3d 1c 0f 03 c0    	sbb    edi,DWORD PTR ds:0xc0030f1c
c001d33b:	89 35 20 0f 03 c0    	mov    DWORD PTR ds:0xc0030f20,esi
c001d341:	a3 18 0f 03 c0       	mov    ds:0xc0030f18,eax
c001d346:	89 3d 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,edi
c001d34c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d352:	89 15 1c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f1c,edx
c001d358:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d35b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d35e:	01 c6                	add    esi,eax
c001d360:	11 d7                	adc    edi,edx
c001d362:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d365:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d368:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d36c:	5b                   	pop    ebx
c001d36d:	5e                   	pop    esi
c001d36e:	5f                   	pop    edi
c001d36f:	e9 ee 2f fe ff       	jmp    c0000362 <switchToThreadASM>
c001d374:	31 c0                	xor    eax,eax
c001d376:	eb 8f                	jmp    c001d307 <switchToThread(ThreadControlBlock*)+0x2b>
c001d378:	5b                   	pop    ebx
c001d379:	c7 05 e0 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x1
c001d383:	5e                   	pop    esi
c001d384:	5f                   	pop    edi
c001d385:	c3                   	ret    

c001d386 <Process::addArgs(char**)>:
c001d386:	57                   	push   edi
c001d387:	56                   	push   esi
c001d388:	53                   	push   ebx
c001d389:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d38d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d391:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d39b:	85 ff                	test   edi,edi
c001d39d:	74 3d                	je     c001d3dc <Process::addArgs(char**)+0x56>
c001d39f:	8b 07                	mov    eax,DWORD PTR [edi]
c001d3a1:	85 c0                	test   eax,eax
c001d3a3:	74 37                	je     c001d3dc <Process::addArgs(char**)+0x56>
c001d3a5:	31 db                	xor    ebx,ebx
c001d3a7:	83 ec 0c             	sub    esp,0xc
c001d3aa:	50                   	push   eax
c001d3ab:	e8 bc 33 fe ff       	call   c000076c <strlen>
c001d3b0:	40                   	inc    eax
c001d3b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3b4:	e8 e0 21 ff ff       	call   c000f599 <malloc>
c001d3b9:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d3c0:	5a                   	pop    edx
c001d3c1:	59                   	pop    ecx
c001d3c2:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d3c5:	43                   	inc    ebx
c001d3c6:	50                   	push   eax
c001d3c7:	e8 40 34 fe ff       	call   c000080c <strcpy>
c001d3cc:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d3d2:	83 c4 10             	add    esp,0x10
c001d3d5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d3d8:	85 c0                	test   eax,eax
c001d3da:	75 cb                	jne    c001d3a7 <Process::addArgs(char**)+0x21>
c001d3dc:	5b                   	pop    ebx
c001d3dd:	5e                   	pop    esi
c001d3de:	5f                   	pop    edi
c001d3df:	c3                   	ret    

c001d3e0 <Process::Process(char const*, Process*, char**)>:
c001d3e0:	56                   	push   esi
c001d3e1:	53                   	push   ebx
c001d3e2:	83 ec 14             	sub    esp,0x14
c001d3e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3e9:	05 0c 02 00 00       	add    eax,0x20c
c001d3ee:	bb 07 00 00 00       	mov    ebx,0x7
c001d3f3:	89 c6                	mov    esi,eax
c001d3f5:	85 db                	test   ebx,ebx
c001d3f7:	78 12                	js     c001d40b <Process::Process(char const*, Process*, char**)+0x2b>
c001d3f9:	83 ec 0c             	sub    esp,0xc
c001d3fc:	56                   	push   esi
c001d3fd:	e8 94 b6 00 00       	call   c0028a96 <ThreadControlBlock::ThreadControlBlock()>
c001d402:	83 c4 10             	add    esp,0x10
c001d405:	83 c6 63             	add    esi,0x63
c001d408:	4b                   	dec    ebx
c001d409:	eb ea                	jmp    c001d3f5 <Process::Process(char const*, Process*, char**)+0x15>
c001d40b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d40f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d416:	83 ec 0c             	sub    esp,0xc
c001d419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d41d:	e8 b6 c8 ff ff       	call   c0019cd8 <Krnl::newProcessEnv(Process*)>
c001d422:	83 c4 10             	add    esp,0x10
c001d425:	89 c2                	mov    edx,eax
c001d427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d42b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d435:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d43e:	a1 50 cf 02 c0       	mov    eax,ds:0xc002cf50
c001d443:	8d 50 01             	lea    edx,[eax+0x1]
c001d446:	89 15 50 cf 02 c0    	mov    DWORD PTR ds:0xc002cf50,edx
c001d44c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d450:	89 02                	mov    DWORD PTR [edx],eax
c001d452:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d45a:	83 ec 0c             	sub    esp,0xc
c001d45d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d461:	e8 33 21 ff ff       	call   c000f599 <malloc>
c001d466:	83 c4 10             	add    esp,0x10
c001d469:	89 c3                	mov    ebx,eax
c001d46b:	83 ec 08             	sub    esp,0x8
c001d46e:	6a 00                	push   0x0
c001d470:	53                   	push   ebx
c001d471:	e8 10 4a ff ff       	call   c0011e86 <VAS::VAS(bool)>
c001d476:	83 c4 10             	add    esp,0x10
c001d479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d47d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d483:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d487:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d495:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d499:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d49f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4a9:	85 c0                	test   eax,eax
c001d4ab:	74 42                	je     c001d4ef <Process::Process(char const*, Process*, char**)+0x10f>
c001d4ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4b7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d4bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4c1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d4c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4cb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4d1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d4d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4db:	05 0c 01 00 00       	add    eax,0x10c
c001d4e0:	83 ec 08             	sub    esp,0x8
c001d4e3:	52                   	push   edx
c001d4e4:	50                   	push   eax
c001d4e5:	e8 22 33 fe ff       	call   c000080c <strcpy>
c001d4ea:	83 c4 10             	add    esp,0x10
c001d4ed:	eb 63                	jmp    c001d552 <Process::Process(char const*, Process*, char**)+0x172>
c001d4ef:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d4f7:	83 ec 0c             	sub    esp,0xc
c001d4fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4fe:	e8 96 20 ff ff       	call   c000f599 <malloc>
c001d503:	83 c4 10             	add    esp,0x10
c001d506:	89 c3                	mov    ebx,eax
c001d508:	83 ec 08             	sub    esp,0x8
c001d50b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d50f:	53                   	push   ebx
c001d510:	e8 71 33 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d515:	83 c4 10             	add    esp,0x10
c001d518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d51c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d526:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d52c:	83 ec 0c             	sub    esp,0xc
c001d52f:	50                   	push   eax
c001d530:	e8 10 2b ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d535:	83 c4 10             	add    esp,0x10
c001d538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d53c:	05 0c 01 00 00       	add    eax,0x10c
c001d541:	83 ec 08             	sub    esp,0x8
c001d544:	68 c8 bb 02 c0       	push   0xc002bbc8
c001d549:	50                   	push   eax
c001d54a:	e8 bd 32 fe ff       	call   c000080c <strcpy>
c001d54f:	83 c4 10             	add    esp,0x10
c001d552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d556:	83 c0 0c             	add    eax,0xc
c001d559:	83 ec 08             	sub    esp,0x8
c001d55c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d560:	50                   	push   eax
c001d561:	e8 a6 32 fe ff       	call   c000080c <strcpy>
c001d566:	83 c4 10             	add    esp,0x10
c001d569:	83 ec 08             	sub    esp,0x8
c001d56c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d570:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d574:	e8 0d fe ff ff       	call   c001d386 <Process::addArgs(char**)>
c001d579:	83 c4 10             	add    esp,0x10
c001d57c:	83 ec 08             	sub    esp,0x8
c001d57f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d583:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d587:	e8 9e ed ff ff       	call   c001c32a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d58c:	83 c4 10             	add    esp,0x10
c001d58f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d593:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d597:	83 f0 01             	xor    eax,0x1
c001d59a:	88 c2                	mov    dl,al
c001d59c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5a0:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d5a6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d5ab:	83 ec 08             	sub    esp,0x8
c001d5ae:	50                   	push   eax
c001d5af:	68 20 bc 02 c0       	push   0xc002bc20
c001d5b4:	e8 2a 51 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001d5b9:	83 c4 10             	add    esp,0x10
c001d5bc:	90                   	nop
c001d5bd:	83 c4 14             	add    esp,0x14
c001d5c0:	5b                   	pop    ebx
c001d5c1:	5e                   	pop    esi
c001d5c2:	c3                   	ret    
c001d5c3:	90                   	nop

c001d5c4 <Process::Process(bool, char const*, Process*, char**)>:
c001d5c4:	56                   	push   esi
c001d5c5:	53                   	push   ebx
c001d5c6:	83 ec 24             	sub    esp,0x24
c001d5c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d5cd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d5d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5d5:	05 0c 02 00 00       	add    eax,0x20c
c001d5da:	bb 07 00 00 00       	mov    ebx,0x7
c001d5df:	89 c6                	mov    esi,eax
c001d5e1:	85 db                	test   ebx,ebx
c001d5e3:	78 12                	js     c001d5f7 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d5e5:	83 ec 0c             	sub    esp,0xc
c001d5e8:	56                   	push   esi
c001d5e9:	e8 a8 b4 00 00       	call   c0028a96 <ThreadControlBlock::ThreadControlBlock()>
c001d5ee:	83 c4 10             	add    esp,0x10
c001d5f1:	83 c6 63             	add    esi,0x63
c001d5f4:	4b                   	dec    ebx
c001d5f5:	eb ea                	jmp    c001d5e1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d5f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5fb:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d602:	83 ec 0c             	sub    esp,0xc
c001d605:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d609:	e8 ca c6 ff ff       	call   c0019cd8 <Krnl::newProcessEnv(Process*)>
c001d60e:	83 c4 10             	add    esp,0x10
c001d611:	89 c2                	mov    edx,eax
c001d613:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d617:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d61d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d621:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d62a:	a1 50 cf 02 c0       	mov    eax,ds:0xc002cf50
c001d62f:	8d 50 01             	lea    edx,[eax+0x1]
c001d632:	89 15 50 cf 02 c0    	mov    DWORD PTR ds:0xc002cf50,edx
c001d638:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d63c:	89 02                	mov    DWORD PTR [edx],eax
c001d63e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d646:	83 ec 0c             	sub    esp,0xc
c001d649:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d64d:	e8 47 1f ff ff       	call   c000f599 <malloc>
c001d652:	83 c4 10             	add    esp,0x10
c001d655:	89 c3                	mov    ebx,eax
c001d657:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d65c:	83 ec 08             	sub    esp,0x8
c001d65f:	50                   	push   eax
c001d660:	53                   	push   ebx
c001d661:	e8 20 48 ff ff       	call   c0011e86 <VAS::VAS(bool)>
c001d666:	83 c4 10             	add    esp,0x10
c001d669:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d66d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d673:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d677:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d681:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d685:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d689:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d68f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d693:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d699:	85 c0                	test   eax,eax
c001d69b:	74 42                	je     c001d6df <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d69d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6a1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6a7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d6ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6b1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d6b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6bb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6c1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d6c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6cb:	05 0c 01 00 00       	add    eax,0x10c
c001d6d0:	83 ec 08             	sub    esp,0x8
c001d6d3:	52                   	push   edx
c001d6d4:	50                   	push   eax
c001d6d5:	e8 32 31 fe ff       	call   c000080c <strcpy>
c001d6da:	83 c4 10             	add    esp,0x10
c001d6dd:	eb 63                	jmp    c001d742 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d6df:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d6e7:	83 ec 0c             	sub    esp,0xc
c001d6ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d6ee:	e8 a6 1e ff ff       	call   c000f599 <malloc>
c001d6f3:	83 c4 10             	add    esp,0x10
c001d6f6:	89 c3                	mov    ebx,eax
c001d6f8:	83 ec 08             	sub    esp,0x8
c001d6fb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d6ff:	53                   	push   ebx
c001d700:	e8 81 31 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d705:	83 c4 10             	add    esp,0x10
c001d708:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d70c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d712:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d716:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d71c:	83 ec 0c             	sub    esp,0xc
c001d71f:	50                   	push   eax
c001d720:	e8 20 29 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d725:	83 c4 10             	add    esp,0x10
c001d728:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d72c:	05 0c 01 00 00       	add    eax,0x10c
c001d731:	83 ec 08             	sub    esp,0x8
c001d734:	68 c8 bb 02 c0       	push   0xc002bbc8
c001d739:	50                   	push   eax
c001d73a:	e8 cd 30 fe ff       	call   c000080c <strcpy>
c001d73f:	83 c4 10             	add    esp,0x10
c001d742:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d746:	83 c0 0c             	add    eax,0xc
c001d749:	83 ec 08             	sub    esp,0x8
c001d74c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d750:	50                   	push   eax
c001d751:	e8 b6 30 fe ff       	call   c000080c <strcpy>
c001d756:	83 c4 10             	add    esp,0x10
c001d759:	83 ec 08             	sub    esp,0x8
c001d75c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d760:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d764:	e8 1d fc ff ff       	call   c001d386 <Process::addArgs(char**)>
c001d769:	83 c4 10             	add    esp,0x10
c001d76c:	90                   	nop
c001d76d:	83 c4 24             	add    esp,0x24
c001d770:	5b                   	pop    ebx
c001d771:	5e                   	pop    esi
c001d772:	c3                   	ret    

c001d773 <taskStartupFunction>:
c001d773:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d778:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d77b:	c3                   	ret    

c001d77c <Semaphore::Semaphore(int)>:
c001d77c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d780:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d784:	89 10                	mov    DWORD PTR [eax],edx
c001d786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d78a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d791:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d795:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d79c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d7a7:	90                   	nop
c001d7a8:	c3                   	ret    
c001d7a9:	90                   	nop

c001d7aa <Mutex::Mutex()>:
c001d7aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7ae:	6a 01                	push   0x1
c001d7b0:	50                   	push   eax
c001d7b1:	e8 c6 ff ff ff       	call   c001d77c <Semaphore::Semaphore(int)>
c001d7b6:	83 c4 08             	add    esp,0x8
c001d7b9:	90                   	nop
c001d7ba:	c3                   	ret    
c001d7bb:	90                   	nop

c001d7bc <Process::createThread(void (*)(void*), void*, int)>:
c001d7bc:	55                   	push   ebp
c001d7bd:	31 c9                	xor    ecx,ecx
c001d7bf:	57                   	push   edi
c001d7c0:	56                   	push   esi
c001d7c1:	53                   	push   ebx
c001d7c2:	83 ec 1c             	sub    esp,0x1c
c001d7c5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7c9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d7d0:	89 f2                	mov    edx,esi
c001d7d2:	0f b7 c2             	movzx  eax,dx
c001d7d5:	83 e2 01             	and    edx,0x1
c001d7d8:	74 16                	je     c001d7f0 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d7da:	d1 f8                	sar    eax,1
c001d7dc:	41                   	inc    ecx
c001d7dd:	89 c2                	mov    edx,eax
c001d7df:	83 f9 10             	cmp    ecx,0x10
c001d7e2:	75 ee                	jne    c001d7d2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d7e4:	83 c4 1c             	add    esp,0x1c
c001d7e7:	31 db                	xor    ebx,ebx
c001d7e9:	89 d8                	mov    eax,ebx
c001d7eb:	5b                   	pop    ebx
c001d7ec:	5e                   	pop    esi
c001d7ed:	5f                   	pop    edi
c001d7ee:	5d                   	pop    ebp
c001d7ef:	c3                   	ret    
c001d7f0:	b8 01 00 00 00       	mov    eax,0x1
c001d7f5:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d7f8:	d3 e0                	shl    eax,cl
c001d7fa:	09 c6                	or     esi,eax
c001d7fc:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d7ff:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d806:	89 c6                	mov    esi,eax
c001d808:	c1 e6 05             	shl    esi,0x5
c001d80b:	01 f0                	add    eax,esi
c001d80d:	01 d8                	add    eax,ebx
c001d80f:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d816:	75 0a                	jne    c001d822 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d818:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d822:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d828:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d82c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d82f:	01 ca                	add    edx,ecx
c001d831:	83 ec 08             	sub    esp,0x8
c001d834:	89 d0                	mov    eax,edx
c001d836:	c1 e0 05             	shl    eax,0x5
c001d839:	01 d0                	add    eax,edx
c001d83b:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d83f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d843:	01 d8                	add    eax,ebx
c001d845:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d84b:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d851:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d857:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d85d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d863:	89 cd                	mov    ebp,ecx
c001d865:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d869:	f7 dd                	neg    ebp
c001d86b:	c1 e5 15             	shl    ebp,0x15
c001d86e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d874:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d87a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d884:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d88a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d894:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d89e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8a2:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d8a9:	53                   	push   ebx
c001d8aa:	68 04 0f 03 c0       	push   0xc0030f04
c001d8af:	e8 9c af 00 00       	call   c0028850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d8b4:	89 d8                	mov    eax,ebx
c001d8b6:	83 c4 10             	add    esp,0x10
c001d8b9:	83 c4 1c             	add    esp,0x1c
c001d8bc:	5b                   	pop    ebx
c001d8bd:	5e                   	pop    esi
c001d8be:	5f                   	pop    edi
c001d8bf:	5d                   	pop    ebp
c001d8c0:	c3                   	ret    
c001d8c1:	90                   	nop

c001d8c2 <Process::createUserThread()>:
c001d8c2:	83 ec 0c             	sub    esp,0xc
c001d8c5:	68 80 00 00 00       	push   0x80
c001d8ca:	6a 00                	push   0x0
c001d8cc:	68 86 d2 01 c0       	push   0xc001d286
c001d8d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8d5:	e8 e2 fe ff ff       	call   c001d7bc <Process::createThread(void (*)(void*), void*, int)>
c001d8da:	83 c4 1c             	add    esp,0x1c
c001d8dd:	c3                   	ret    

c001d8de <setupMultitasking(void (*)())>:
c001d8de:	56                   	push   esi
c001d8df:	53                   	push   ebx
c001d8e0:	51                   	push   ecx
c001d8e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8e5:	eb 10                	jmp    c001d8f7 <setupMultitasking(void (*)())+0x19>
c001d8e7:	83 ec 0c             	sub    esp,0xc
c001d8ea:	68 04 0f 03 c0       	push   0xc0030f04
c001d8ef:	e8 ae ae 00 00       	call   c00287a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d8f4:	83 c4 10             	add    esp,0x10
c001d8f7:	83 ec 0c             	sub    esp,0xc
c001d8fa:	68 04 0f 03 c0       	push   0xc0030f04
c001d8ff:	e8 7a ae 00 00       	call   c002877e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d904:	83 c4 10             	add    esp,0x10
c001d907:	84 c0                	test   al,al
c001d909:	74 dc                	je     c001d8e7 <setupMultitasking(void (*)())+0x9>
c001d90b:	83 ec 0c             	sub    esp,0xc
c001d90e:	68 3f 07 00 00       	push   0x73f
c001d913:	e8 81 1c ff ff       	call   c000f599 <malloc>
c001d918:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d91f:	89 c3                	mov    ebx,eax
c001d921:	6a 00                	push   0x0
c001d923:	68 cc bb 02 c0       	push   0xc002bbcc
c001d928:	6a 01                	push   0x1
c001d92a:	50                   	push   eax
c001d92b:	e8 94 fc ff ff       	call   c001d5c4 <Process::Process(bool, char const*, Process*, char**)>
c001d930:	83 c4 14             	add    esp,0x14
c001d933:	89 1d 10 0f 03 c0    	mov    DWORD PTR ds:0xc0030f10,ebx
c001d939:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d93f:	e8 0f 2a ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001d944:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d94c:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d956:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d95c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d95f:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d969:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d96f:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d975:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d97f:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d989:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d993:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d999:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d9a3:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d9a9:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d9b3:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d9b9:	58                   	pop    eax
c001d9ba:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d9c0:	5a                   	pop    edx
c001d9c1:	68 c8 bb 02 c0       	push   0xc002bbc8
c001d9c6:	50                   	push   eax
c001d9c7:	e8 40 2e fe ff       	call   c000080c <strcpy>
c001d9cc:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d9d3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9d7:	83 c4 14             	add    esp,0x14
c001d9da:	5b                   	pop    ebx
c001d9db:	5e                   	pop    esi
c001d9dc:	e9 73 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d9e1 <schedule()>:
c001d9e1:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001d9e6:	85 c0                	test   eax,eax
c001d9e8:	74 0b                	je     c001d9f5 <schedule()+0x14>
c001d9ea:	c7 05 e0 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x1
c001d9f4:	c3                   	ret    
c001d9f5:	53                   	push   ebx
c001d9f6:	83 ec 14             	sub    esp,0x14
c001d9f9:	68 04 0f 03 c0       	push   0xc0030f04
c001d9fe:	e8 7b ad 00 00       	call   c002877e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da03:	83 c4 10             	add    esp,0x10
c001da06:	84 c0                	test   al,al
c001da08:	75 38                	jne    c001da42 <schedule()+0x61>
c001da0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da0f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001da12:	4a                   	dec    edx
c001da13:	74 32                	je     c001da47 <schedule()+0x66>
c001da15:	83 ec 0c             	sub    esp,0xc
c001da18:	68 04 0f 03 c0       	push   0xc0030f04
c001da1d:	e8 78 ad 00 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da22:	c7 04 24 04 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f04
c001da29:	89 c3                	mov    ebx,eax
c001da2b:	e8 72 ad 00 00       	call   c00287a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da30:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001da37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da3a:	e8 9d f8 ff ff       	call   c001d2dc <switchToThread(ThreadControlBlock*)>
c001da3f:	83 c4 10             	add    esp,0x10
c001da42:	83 c4 08             	add    esp,0x8
c001da45:	5b                   	pop    ebx
c001da46:	c3                   	ret    
c001da47:	83 ec 08             	sub    esp,0x8
c001da4a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da51:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da57:	68 04 0f 03 c0       	push   0xc0030f04
c001da5c:	e8 ef ad 00 00       	call   c0028850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da61:	83 c4 10             	add    esp,0x10
c001da64:	eb af                	jmp    c001da15 <schedule()+0x34>

c001da66 <Semaphore::tryAcquire()>:
c001da66:	53                   	push   ebx
c001da67:	83 ec 08             	sub    esp,0x8
c001da6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da6e:	fa                   	cli    
c001da6f:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001da74:	8d 50 01             	lea    edx,[eax+0x1]
c001da77:	89 15 e8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee8,edx
c001da7d:	8b 15 e4 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ee4
c001da83:	8d 5a 01             	lea    ebx,[edx+0x1]
c001da86:	89 1d e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,ebx
c001da8c:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001da8f:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001da91:	7c 2a                	jl     c001dabd <Semaphore::tryAcquire()+0x57>
c001da93:	89 15 e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,edx
c001da99:	85 d2                	test   edx,edx
c001da9b:	75 0a                	jne    c001daa7 <Semaphore::tryAcquire()+0x41>
c001da9d:	8b 15 e0 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ee0
c001daa3:	85 d2                	test   edx,edx
c001daa5:	75 5b                	jne    c001db02 <Semaphore::tryAcquire()+0x9c>
c001daa7:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001daac:	85 c0                	test   eax,eax
c001daae:	74 07                	je     c001dab7 <Semaphore::tryAcquire()+0x51>
c001dab0:	31 c0                	xor    eax,eax
c001dab2:	83 c4 08             	add    esp,0x8
c001dab5:	5b                   	pop    ebx
c001dab6:	c3                   	ret    
c001dab7:	fb                   	sti    
c001dab8:	83 c4 08             	add    esp,0x8
c001dabb:	5b                   	pop    ebx
c001dabc:	c3                   	ret    
c001dabd:	43                   	inc    ebx
c001dabe:	89 15 e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,edx
c001dac4:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001dac7:	85 d2                	test   edx,edx
c001dac9:	75 1f                	jne    c001daea <Semaphore::tryAcquire()+0x84>
c001dacb:	8b 0d e0 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ee0
c001dad1:	85 c9                	test   ecx,ecx
c001dad3:	74 15                	je     c001daea <Semaphore::tryAcquire()+0x84>
c001dad5:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001dadf:	e8 fd fe ff ff       	call   c001d9e1 <schedule()>
c001dae4:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001dae9:	48                   	dec    eax
c001daea:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001daef:	85 c0                	test   eax,eax
c001daf1:	75 08                	jne    c001dafb <Semaphore::tryAcquire()+0x95>
c001daf3:	fb                   	sti    
c001daf4:	b0 01                	mov    al,0x1
c001daf6:	83 c4 08             	add    esp,0x8
c001daf9:	5b                   	pop    ebx
c001dafa:	c3                   	ret    
c001dafb:	b0 01                	mov    al,0x1
c001dafd:	83 c4 08             	add    esp,0x8
c001db00:	5b                   	pop    ebx
c001db01:	c3                   	ret    
c001db02:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001db0c:	e8 d0 fe ff ff       	call   c001d9e1 <schedule()>
c001db11:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001db16:	48                   	dec    eax
c001db17:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001db1c:	85 c0                	test   eax,eax
c001db1e:	75 90                	jne    c001dab0 <Semaphore::tryAcquire()+0x4a>
c001db20:	eb 95                	jmp    c001dab7 <Semaphore::tryAcquire()+0x51>

c001db22 <Semaphore::assertLocked(char const*)>:
c001db22:	83 ec 0c             	sub    esp,0xc
c001db25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db29:	fa                   	cli    
c001db2a:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001db30:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001db35:	8d 48 01             	lea    ecx,[eax+0x1]
c001db38:	89 0d e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,ecx
c001db3e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001db40:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001db43:	7c 24                	jl     c001db69 <Semaphore::assertLocked(char const*)+0x47>
c001db45:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001db4a:	85 c0                	test   eax,eax
c001db4c:	75 09                	jne    c001db57 <Semaphore::assertLocked(char const*)+0x35>
c001db4e:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001db53:	85 c0                	test   eax,eax
c001db55:	75 29                	jne    c001db80 <Semaphore::assertLocked(char const*)+0x5e>
c001db57:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001db5c:	48                   	dec    eax
c001db5d:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001db62:	75 01                	jne    c001db65 <Semaphore::assertLocked(char const*)+0x43>
c001db64:	fb                   	sti    
c001db65:	83 c4 0c             	add    esp,0xc
c001db68:	c3                   	ret    
c001db69:	83 ec 0c             	sub    esp,0xc
c001db6c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001db70:	e8 da c2 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001db75:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001db7a:	83 c4 10             	add    esp,0x10
c001db7d:	48                   	dec    eax
c001db7e:	eb c5                	jmp    c001db45 <Semaphore::assertLocked(char const*)+0x23>
c001db80:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001db8a:	e8 52 fe ff ff       	call   c001d9e1 <schedule()>
c001db8f:	eb c6                	jmp    c001db57 <Semaphore::assertLocked(char const*)+0x35>

c001db91 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001db91:	83 ec 0c             	sub    esp,0xc
c001db94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db9d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dba0:	e8 3c fe ff ff       	call   c001d9e1 <schedule()>
c001dba5:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001dbaa:	48                   	dec    eax
c001dbab:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001dbb0:	75 01                	jne    c001dbb3 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dbb2:	fb                   	sti    
c001dbb3:	83 c4 0c             	add    esp,0xc
c001dbb6:	c3                   	ret    

c001dbb7 <blockTask(TaskState)>:
c001dbb7:	83 ec 0c             	sub    esp,0xc
c001dbba:	fa                   	cli    
c001dbbb:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001dbc1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbca:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dbcd:	e8 0f fe ff ff       	call   c001d9e1 <schedule()>
c001dbd2:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001dbd7:	48                   	dec    eax
c001dbd8:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001dbdd:	75 01                	jne    c001dbe0 <blockTask(TaskState)+0x29>
c001dbdf:	fb                   	sti    
c001dbe0:	83 c4 0c             	add    esp,0xc
c001dbe3:	c3                   	ret    

c001dbe4 <waitTask(int, int*, int)>:
c001dbe4:	83 ec 18             	sub    esp,0x18
c001dbe7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dbf0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dbf3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbfc:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dbff:	6a 07                	push   0x7
c001dc01:	e8 b1 ff ff ff       	call   c001dbb7 <blockTask(TaskState)>
c001dc06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc0b:	83 c4 10             	add    esp,0x10
c001dc0e:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dc11:	85 d2                	test   edx,edx
c001dc13:	74 0a                	je     c001dc1f <waitTask(int, int*, int)+0x3b>
c001dc15:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dc18:	89 02                	mov    DWORD PTR [edx],eax
c001dc1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc1f:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dc22:	83 c4 0c             	add    esp,0xc
c001dc25:	c3                   	ret    

c001dc26 <nanoSleepUntil(unsigned long long)>:
c001dc26:	83 ec 0c             	sub    esp,0xc
c001dc29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc31:	3b 05 30 e0 02 c0    	cmp    eax,DWORD PTR ds:0xc002e030
c001dc37:	89 d1                	mov    ecx,edx
c001dc39:	1b 0d 34 e0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e034
c001dc3f:	73 04                	jae    c001dc45 <nanoSleepUntil(unsigned long long)+0x1f>
c001dc41:	83 c4 0c             	add    esp,0xc
c001dc44:	c3                   	ret    
c001dc45:	fa                   	cli    
c001dc46:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001dc4c:	83 ec 08             	sub    esp,0x8
c001dc4f:	ff 05 e4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee4
c001dc55:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc5b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dc5e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dc61:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dc67:	68 f8 0e 03 c0       	push   0xc0030ef8
c001dc6c:	e8 df ab 00 00       	call   c0028850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc71:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dc78:	e8 3a ff ff ff       	call   c001dbb7 <blockTask(TaskState)>
c001dc7d:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001dc82:	83 c4 10             	add    esp,0x10
c001dc85:	48                   	dec    eax
c001dc86:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001dc8b:	85 c0                	test   eax,eax
c001dc8d:	75 09                	jne    c001dc98 <nanoSleepUntil(unsigned long long)+0x72>
c001dc8f:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001dc94:	85 c0                	test   eax,eax
c001dc96:	75 12                	jne    c001dcaa <nanoSleepUntil(unsigned long long)+0x84>
c001dc98:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001dc9d:	48                   	dec    eax
c001dc9e:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001dca3:	75 9c                	jne    c001dc41 <nanoSleepUntil(unsigned long long)+0x1b>
c001dca5:	fb                   	sti    
c001dca6:	83 c4 0c             	add    esp,0xc
c001dca9:	c3                   	ret    
c001dcaa:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001dcb4:	e8 28 fd ff ff       	call   c001d9e1 <schedule()>
c001dcb9:	eb dd                	jmp    c001dc98 <nanoSleepUntil(unsigned long long)+0x72>

c001dcbb <nanoSleep(unsigned long long)>:
c001dcbb:	a1 30 e0 02 c0       	mov    eax,ds:0xc002e030
c001dcc0:	8b 15 34 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e034
c001dcc6:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dcca:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dcce:	e9 53 ff ff ff       	jmp    c001dc26 <nanoSleepUntil(unsigned long long)>

c001dcd3 <sleep(unsigned long long)>:
c001dcd3:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dcdb:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dce0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dce4:	01 ca                	add    edx,ecx
c001dce6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dcea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dcee:	eb cb                	jmp    c001dcbb <nanoSleep(unsigned long long)>

c001dcf0 <Semaphore::acquire()>:
c001dcf0:	83 ec 0c             	sub    esp,0xc
c001dcf3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcf7:	fa                   	cli    
c001dcf8:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001dcfd:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001dd03:	8d 48 01             	lea    ecx,[eax+0x1]
c001dd06:	89 0d e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,ecx
c001dd0c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dd0f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dd11:	7d 28                	jge    c001dd3b <Semaphore::acquire()+0x4b>
c001dd13:	41                   	inc    ecx
c001dd14:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dd17:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001dd1c:	85 c0                	test   eax,eax
c001dd1e:	75 09                	jne    c001dd29 <Semaphore::acquire()+0x39>
c001dd20:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001dd25:	85 c0                	test   eax,eax
c001dd27:	75 4e                	jne    c001dd77 <Semaphore::acquire()+0x87>
c001dd29:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001dd2e:	48                   	dec    eax
c001dd2f:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001dd34:	75 01                	jne    c001dd37 <Semaphore::acquire()+0x47>
c001dd36:	fb                   	sti    
c001dd37:	83 c4 0c             	add    esp,0xc
c001dd3a:	c3                   	ret    
c001dd3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd40:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dd47:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dd4a:	85 c9                	test   ecx,ecx
c001dd4c:	74 3a                	je     c001dd88 <Semaphore::acquire()+0x98>
c001dd4e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dd51:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd57:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dd5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd5f:	83 ec 0c             	sub    esp,0xc
c001dd62:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dd65:	6a 05                	push   0x5
c001dd67:	e8 4b fe ff ff       	call   c001dbb7 <blockTask(TaskState)>
c001dd6c:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001dd71:	83 c4 10             	add    esp,0x10
c001dd74:	48                   	dec    eax
c001dd75:	eb a0                	jmp    c001dd17 <Semaphore::acquire()+0x27>
c001dd77:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001dd81:	e8 5b fc ff ff       	call   c001d9e1 <schedule()>
c001dd86:	eb a1                	jmp    c001dd29 <Semaphore::acquire()+0x39>
c001dd88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd8d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dd90:	eb c8                	jmp    c001dd5a <Semaphore::acquire()+0x6a>

c001dd92 <taskReturned>:
c001dd92:	83 ec 18             	sub    esp,0x18
c001dd95:	68 48 bc 02 c0       	push   0xc002bc48
c001dd9a:	e8 b0 c0 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001dd9f:	83 c4 10             	add    esp,0x10
c001dda2:	83 ec 0c             	sub    esp,0xc
c001dda5:	6a 02                	push   0x2
c001dda7:	e8 0b fe ff ff       	call   c001dbb7 <blockTask(TaskState)>
c001ddac:	fa                   	cli    
c001ddad:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001ddb3:	e8 29 fc ff ff       	call   c001d9e1 <schedule()>
c001ddb8:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001ddbd:	83 c4 10             	add    esp,0x10
c001ddc0:	48                   	dec    eax
c001ddc1:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001ddc6:	85 c0                	test   eax,eax
c001ddc8:	75 d8                	jne    c001dda2 <taskReturned+0x10>
c001ddca:	fb                   	sti    
c001ddcb:	eb d5                	jmp    c001dda2 <taskReturned+0x10>

c001ddcd <Thr::processFromPID(int)>:
c001ddcd:	57                   	push   edi
c001ddce:	56                   	push   esi
c001ddcf:	53                   	push   ebx
c001ddd0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ddd4:	fa                   	cli    
c001ddd5:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001dddb:	83 ec 0c             	sub    esp,0xc
c001ddde:	68 04 0f 03 c0       	push   0xc0030f04
c001dde3:	e8 b2 a9 00 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dde8:	83 c4 10             	add    esp,0x10
c001ddeb:	89 c7                	mov    edi,eax
c001dded:	eb 14                	jmp    c001de03 <Thr::processFromPID(int)+0x36>
c001ddef:	83 ec 0c             	sub    esp,0xc
c001ddf2:	68 04 0f 03 c0       	push   0xc0030f04
c001ddf7:	e8 9e a9 00 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddfc:	83 c4 10             	add    esp,0x10
c001ddff:	39 f8                	cmp    eax,edi
c001de01:	74 49                	je     c001de4c <Thr::processFromPID(int)+0x7f>
c001de03:	83 ec 0c             	sub    esp,0xc
c001de06:	68 04 0f 03 c0       	push   0xc0030f04
c001de0b:	e8 8a a9 00 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de10:	c7 04 24 04 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f04
c001de17:	89 c3                	mov    ebx,eax
c001de19:	e8 84 a9 00 00       	call   c00287a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de1e:	58                   	pop    eax
c001de1f:	5a                   	pop    edx
c001de20:	53                   	push   ebx
c001de21:	68 04 0f 03 c0       	push   0xc0030f04
c001de26:	e8 25 aa 00 00       	call   c0028850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de2e:	83 c4 10             	add    esp,0x10
c001de31:	39 30                	cmp    DWORD PTR [eax],esi
c001de33:	75 ba                	jne    c001ddef <Thr::processFromPID(int)+0x22>
c001de35:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001de3a:	48                   	dec    eax
c001de3b:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001de40:	74 07                	je     c001de49 <Thr::processFromPID(int)+0x7c>
c001de42:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de45:	5b                   	pop    ebx
c001de46:	5e                   	pop    esi
c001de47:	5f                   	pop    edi
c001de48:	c3                   	ret    
c001de49:	fb                   	sti    
c001de4a:	eb f6                	jmp    c001de42 <Thr::processFromPID(int)+0x75>
c001de4c:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001de51:	48                   	dec    eax
c001de52:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001de57:	75 05                	jne    c001de5e <Thr::processFromPID(int)+0x91>
c001de59:	fb                   	sti    
c001de5a:	5b                   	pop    ebx
c001de5b:	5e                   	pop    esi
c001de5c:	5f                   	pop    edi
c001de5d:	c3                   	ret    
c001de5e:	5b                   	pop    ebx
c001de5f:	31 c0                	xor    eax,eax
c001de61:	5e                   	pop    esi
c001de62:	5f                   	pop    edi
c001de63:	c3                   	ret    

c001de64 <unblockTask(ThreadControlBlock*)>:
c001de64:	53                   	push   ebx
c001de65:	83 ec 08             	sub    esp,0x8
c001de68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de6c:	fa                   	cli    
c001de6d:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001de73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de76:	85 c0                	test   eax,eax
c001de78:	74 5a                	je     c001ded4 <unblockTask(ThreadControlBlock*)+0x70>
c001de7a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de7d:	48                   	dec    eax
c001de7e:	74 31                	je     c001deb1 <unblockTask(ThreadControlBlock*)+0x4d>
c001de80:	83 ec 0c             	sub    esp,0xc
c001de83:	68 04 0f 03 c0       	push   0xc0030f04
c001de88:	e8 0d a9 00 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de8d:	83 c4 10             	add    esp,0x10
c001de90:	85 c0                	test   eax,eax
c001de92:	75 17                	jne    c001deab <unblockTask(ThreadControlBlock*)+0x47>
c001de94:	eb 50                	jmp    c001dee6 <unblockTask(ThreadControlBlock*)+0x82>
c001de96:	83 ec 08             	sub    esp,0x8
c001de99:	50                   	push   eax
c001de9a:	68 04 0f 03 c0       	push   0xc0030f04
c001de9f:	e8 7e ac 00 00       	call   c0028b22 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dea4:	83 c4 10             	add    esp,0x10
c001dea7:	85 c0                	test   eax,eax
c001dea9:	74 3b                	je     c001dee6 <unblockTask(ThreadControlBlock*)+0x82>
c001deab:	39 c3                	cmp    ebx,eax
c001dead:	75 e7                	jne    c001de96 <unblockTask(ThreadControlBlock*)+0x32>
c001deaf:	eb 10                	jmp    c001dec1 <unblockTask(ThreadControlBlock*)+0x5d>
c001deb1:	83 ec 0c             	sub    esp,0xc
c001deb4:	68 ea bb 02 c0       	push   0xc002bbea
c001deb9:	e8 25 48 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001debe:	83 c4 10             	add    esp,0x10
c001dec1:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001dec6:	48                   	dec    eax
c001dec7:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001decc:	75 01                	jne    c001decf <unblockTask(ThreadControlBlock*)+0x6b>
c001dece:	fb                   	sti    
c001decf:	83 c4 08             	add    esp,0x8
c001ded2:	5b                   	pop    ebx
c001ded3:	c3                   	ret    
c001ded4:	83 ec 0c             	sub    esp,0xc
c001ded7:	68 d3 bb 02 c0       	push   0xc002bbd3
c001dedc:	e8 02 48 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001dee1:	83 c4 10             	add    esp,0x10
c001dee4:	eb db                	jmp    c001dec1 <unblockTask(ThreadControlBlock*)+0x5d>
c001dee6:	83 ec 08             	sub    esp,0x8
c001dee9:	53                   	push   ebx
c001deea:	68 04 0f 03 c0       	push   0xc0030f04
c001deef:	e8 5c a9 00 00       	call   c0028850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001def4:	83 c4 10             	add    esp,0x10
c001def7:	eb c8                	jmp    c001dec1 <unblockTask(ThreadControlBlock*)+0x5d>

c001def9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001def9:	55                   	push   ebp
c001defa:	57                   	push   edi
c001defb:	56                   	push   esi
c001defc:	53                   	push   ebx
c001defd:	83 ec 1c             	sub    esp,0x1c
c001df00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df04:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df07:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001df0d:	85 ff                	test   edi,edi
c001df0f:	7e 20                	jle    c001df31 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001df11:	31 f6                	xor    esi,esi
c001df13:	83 ec 0c             	sub    esp,0xc
c001df16:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001df1d:	46                   	inc    esi
c001df1e:	e8 86 16 ff ff       	call   c000f5a9 <free>
c001df23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df26:	83 c4 10             	add    esp,0x10
c001df29:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001df2f:	7f e2                	jg     c001df13 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001df31:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df3b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001df40:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001df43:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001df46:	d3 c0                	rol    eax,cl
c001df48:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001df4f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df52:	89 f7                	mov    edi,esi
c001df54:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001df5c:	0f 85 64 01 00 00    	jne    c001e0c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df62:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001df68:	85 ed                	test   ebp,ebp
c001df6a:	74 1b                	je     c001df87 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001df6c:	83 ec 0c             	sub    esp,0xc
c001df6f:	55                   	push   ebp
c001df70:	e8 7f bc ff ff       	call   c0019bf4 <EnvVarContainer::~EnvVarContainer()>
c001df75:	59                   	pop    ecx
c001df76:	5e                   	pop    esi
c001df77:	6a 0c                	push   0xc
c001df79:	55                   	push   ebp
c001df7a:	e8 8c 46 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c001df7f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df82:	83 c4 10             	add    esp,0x10
c001df85:	89 f7                	mov    edi,esi
c001df87:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df8d:	85 c0                	test   eax,eax
c001df8f:	0f 84 aa 00 00 00    	je     c001e03f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df95:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001df98:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df9c:	31 c9                	xor    ecx,ecx
c001df9e:	eb 10                	jmp    c001dfb0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001dfa0:	41                   	inc    ecx
c001dfa1:	83 f9 10             	cmp    ecx,0x10
c001dfa4:	0f 84 95 00 00 00    	je     c001e03f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dfaa:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfb0:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dfb7:	d3 fa                	sar    edx,cl
c001dfb9:	83 e2 01             	and    edx,0x1
c001dfbc:	74 e2                	je     c001dfa0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfbe:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dfc1:	01 ca                	add    edx,ecx
c001dfc3:	89 d5                	mov    ebp,edx
c001dfc5:	c1 e5 05             	shl    ebp,0x5
c001dfc8:	01 ea                	add    edx,ebp
c001dfca:	01 d0                	add    eax,edx
c001dfcc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dfd2:	83 fd 07             	cmp    ebp,0x7
c001dfd5:	75 c9                	jne    c001dfa0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfd7:	05 40 02 00 00       	add    eax,0x240
c001dfdc:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dfdf:	83 fd ff             	cmp    ebp,0xffffffff
c001dfe2:	0f 8c e6 00 00 00    	jl     c001e0ce <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001dfe8:	0f 84 97 01 00 00    	je     c001e185 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dfee:	85 ed                	test   ebp,ebp
c001dff0:	0f 84 7e 01 00 00    	je     c001e174 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001dff6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dff8:	75 a6                	jne    c001dfa0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dffa:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e000:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e004:	01 d0                	add    eax,edx
c001e006:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e00a:	83 ec 0c             	sub    esp,0xc
c001e00d:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e013:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e016:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e01c:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e023:	50                   	push   eax
c001e024:	e8 3b fe ff ff       	call   c001de64 <unblockTask(ThreadControlBlock*)>
c001e029:	83 c4 10             	add    esp,0x10
c001e02c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e033:	89 f7                	mov    edi,esi
c001e035:	41                   	inc    ecx
c001e036:	83 f9 10             	cmp    ecx,0x10
c001e039:	0f 85 6b ff ff ff    	jne    c001dfaa <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e03f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e045:	85 c0                	test   eax,eax
c001e047:	74 5d                	je     c001e0a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e049:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e04f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e055:	74 4f                	je     c001e0a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e057:	83 ec 0c             	sub    esp,0xc
c001e05a:	68 04 0f 03 c0       	push   0xc0030f04
c001e05f:	e8 36 a7 00 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e064:	c7 04 24 04 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f04
c001e06b:	89 c7                	mov    edi,eax
c001e06d:	e8 0c a7 00 00       	call   c002877e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e072:	83 c4 10             	add    esp,0x10
c001e075:	84 c0                	test   al,al
c001e077:	0f 84 c2 00 00 00    	je     c001e13f <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e07d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e080:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e086:	85 d2                	test   edx,edx
c001e088:	74 0f                	je     c001e099 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e08a:	83 ec 0c             	sub    esp,0xc
c001e08d:	8b 02                	mov    eax,DWORD PTR [edx]
c001e08f:	52                   	push   edx
c001e090:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e093:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e096:	83 c4 10             	add    esp,0x10
c001e099:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e0a3:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e0a6:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e0ac:	85 db                	test   ebx,ebx
c001e0ae:	74 16                	je     c001e0c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e0b0:	83 ec 0c             	sub    esp,0xc
c001e0b3:	53                   	push   ebx
c001e0b4:	e8 a7 37 ff ff       	call   c0011860 <VAS::~VAS()>
c001e0b9:	58                   	pop    eax
c001e0ba:	5a                   	pop    edx
c001e0bb:	6a 14                	push   0x14
c001e0bd:	53                   	push   ebx
c001e0be:	e8 48 45 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c001e0c3:	83 c4 10             	add    esp,0x10
c001e0c6:	83 c4 1c             	add    esp,0x1c
c001e0c9:	5b                   	pop    ebx
c001e0ca:	5e                   	pop    esi
c001e0cb:	5f                   	pop    edi
c001e0cc:	5d                   	pop    ebp
c001e0cd:	c3                   	ret    
c001e0ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e0d2:	83 ec 0c             	sub    esp,0xc
c001e0d5:	68 7c bc 02 c0       	push   0xc002bc7c
c001e0da:	e8 70 bd ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001e0df:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0e2:	83 c4 10             	add    esp,0x10
c001e0e5:	89 f7                	mov    edi,esi
c001e0e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0eb:	e9 b0 fe ff ff       	jmp    c001dfa0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e0f0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e0f6:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e0fc:	75 1c                	jne    c001e11a <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e0fe:	83 ec 0c             	sub    esp,0xc
c001e101:	68 e4 bc 02 c0       	push   0xc002bce4
c001e106:	e8 d8 45 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001e10b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e112:	e8 a0 fa ff ff       	call   c001dbb7 <blockTask(TaskState)>
c001e117:	83 c4 10             	add    esp,0x10
c001e11a:	83 ec 08             	sub    esp,0x8
c001e11d:	56                   	push   esi
c001e11e:	68 04 0f 03 c0       	push   0xc0030f04
c001e123:	e8 28 a7 00 00       	call   c0028850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e128:	c7 04 24 04 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f04
c001e12f:	e8 66 a6 00 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e134:	83 c4 10             	add    esp,0x10
c001e137:	39 f8                	cmp    eax,edi
c001e139:	0f 84 3e ff ff ff    	je     c001e07d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e13f:	83 ec 0c             	sub    esp,0xc
c001e142:	68 04 0f 03 c0       	push   0xc0030f04
c001e147:	e8 4e a6 00 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e14c:	c7 04 24 04 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f04
c001e153:	89 c6                	mov    esi,eax
c001e155:	e8 48 a6 00 00       	call   c00287a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e15a:	83 c4 10             	add    esp,0x10
c001e15d:	39 f3                	cmp    ebx,esi
c001e15f:	74 b9                	je     c001e11a <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e161:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e164:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e167:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e16d:	75 ab                	jne    c001e11a <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e16f:	e9 7c ff ff ff       	jmp    c001e0f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e174:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e178:	83 ec 0c             	sub    esp,0xc
c001e17b:	68 b0 bc 02 c0       	push   0xc002bcb0
c001e180:	e9 55 ff ff ff       	jmp    c001e0da <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e185:	8b 36                	mov    esi,DWORD PTR [esi]
c001e187:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e18b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e18e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e191:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e197:	01 d7                	add    edi,edx
c001e199:	89 f8                	mov    eax,edi
c001e19b:	e9 66 fe ff ff       	jmp    c001e006 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e1a0 <cleanerTaskFunction(void*)>:
c001e1a0:	53                   	push   ebx
c001e1a1:	83 ec 08             	sub    esp,0x8
c001e1a4:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e1a9:	48                   	dec    eax
c001e1aa:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e1af:	75 01                	jne    c001e1b2 <cleanerTaskFunction(void*)+0x12>
c001e1b1:	fb                   	sti    
c001e1b2:	fa                   	cli    
c001e1b3:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e1b8:	80 3d cc 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ecc,0x0
c001e1bf:	8d 50 01             	lea    edx,[eax+0x1]
c001e1c2:	89 15 e8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee8,edx
c001e1c8:	0f 84 a1 00 00 00    	je     c001e26f <cleanerTaskFunction(void*)+0xcf>
c001e1ce:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e1d3:	85 c0                	test   eax,eax
c001e1d5:	75 01                	jne    c001e1d8 <cleanerTaskFunction(void*)+0x38>
c001e1d7:	fb                   	sti    
c001e1d8:	c6 05 cc 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ecc,0x0
c001e1df:	fa                   	cli    
c001e1e0:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e1e6:	ff 05 e4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee4
c001e1ec:	fa                   	cli    
c001e1ed:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e1f3:	eb 26                	jmp    c001e21b <cleanerTaskFunction(void*)+0x7b>
c001e1f5:	83 ec 0c             	sub    esp,0xc
c001e1f8:	68 ec 0e 03 c0       	push   0xc0030eec
c001e1fd:	e8 98 a5 00 00       	call   c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e202:	c7 04 24 ec 0e 03 c0 	mov    DWORD PTR [esp],0xc0030eec
c001e209:	89 c3                	mov    ebx,eax
c001e20b:	e8 92 a5 00 00       	call   c00287a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e210:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e213:	e8 e1 fc ff ff       	call   c001def9 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e218:	83 c4 10             	add    esp,0x10
c001e21b:	83 ec 0c             	sub    esp,0xc
c001e21e:	68 ec 0e 03 c0       	push   0xc0030eec
c001e223:	e8 56 a5 00 00       	call   c002877e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e228:	83 c4 10             	add    esp,0x10
c001e22b:	84 c0                	test   al,al
c001e22d:	74 c6                	je     c001e1f5 <cleanerTaskFunction(void*)+0x55>
c001e22f:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e234:	48                   	dec    eax
c001e235:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e23a:	75 01                	jne    c001e23d <cleanerTaskFunction(void*)+0x9d>
c001e23c:	fb                   	sti    
c001e23d:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001e242:	48                   	dec    eax
c001e243:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001e248:	0f 85 56 ff ff ff    	jne    c001e1a4 <cleanerTaskFunction(void*)+0x4>
c001e24e:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001e253:	85 c0                	test   eax,eax
c001e255:	0f 84 49 ff ff ff    	je     c001e1a4 <cleanerTaskFunction(void*)+0x4>
c001e25b:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001e265:	e8 77 f7 ff ff       	call   c001d9e1 <schedule()>
c001e26a:	e9 35 ff ff ff       	jmp    c001e1a4 <cleanerTaskFunction(void*)+0x4>
c001e26f:	83 ec 0c             	sub    esp,0xc
c001e272:	6a 02                	push   0x2
c001e274:	e8 18 f9 ff ff       	call   c001db91 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e279:	83 c4 10             	add    esp,0x10
c001e27c:	e9 57 ff ff ff       	jmp    c001e1d8 <cleanerTaskFunction(void*)+0x38>

c001e281 <terminateTask(int)>:
c001e281:	83 ec 14             	sub    esp,0x14
c001e284:	fa                   	cli    
c001e285:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e28b:	ff 05 e4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee4
c001e291:	fa                   	cli    
c001e292:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e298:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e29c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a1:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e2a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e2ac:	50                   	push   eax
c001e2ad:	68 ec 0e 03 c0       	push   0xc0030eec
c001e2b2:	e8 99 a5 00 00       	call   c0028850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2bc:	83 c4 10             	add    esp,0x10
c001e2bf:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e2c6:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e2cb:	85 c0                	test   eax,eax
c001e2cd:	74 53                	je     c001e322 <terminateTask(int)+0xa1>
c001e2cf:	83 ec 0c             	sub    esp,0xc
c001e2d2:	c6 05 cc 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ecc,0x1
c001e2d9:	50                   	push   eax
c001e2da:	e8 85 fb ff ff       	call   c001de64 <unblockTask(ThreadControlBlock*)>
c001e2df:	83 c4 10             	add    esp,0x10
c001e2e2:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e2e7:	48                   	dec    eax
c001e2e8:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e2ed:	75 01                	jne    c001e2f0 <terminateTask(int)+0x6f>
c001e2ef:	fb                   	sti    
c001e2f0:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001e2f5:	48                   	dec    eax
c001e2f6:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001e2fb:	75 09                	jne    c001e306 <terminateTask(int)+0x85>
c001e2fd:	83 3d e0 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030ee0,0x0
c001e304:	75 2e                	jne    c001e334 <terminateTask(int)+0xb3>
c001e306:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e30b:	48                   	dec    eax
c001e30c:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e311:	75 01                	jne    c001e314 <terminateTask(int)+0x93>
c001e313:	fb                   	sti    
c001e314:	fa                   	cli    
c001e315:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e31b:	e8 c1 f6 ff ff       	call   c001d9e1 <schedule()>
c001e320:	eb e4                	jmp    c001e306 <terminateTask(int)+0x85>
c001e322:	83 ec 0c             	sub    esp,0xc
c001e325:	68 01 bc 02 c0       	push   0xc002bc01
c001e32a:	e8 b4 43 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001e32f:	83 c4 10             	add    esp,0x10
c001e332:	eb ae                	jmp    c001e2e2 <terminateTask(int)+0x61>
c001e334:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001e33e:	eb db                	jmp    c001e31b <terminateTask(int)+0x9a>

c001e340 <Thr::terminateFromIRQ(int)>:
c001e340:	83 ec 18             	sub    esp,0x18
c001e343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e347:	e8 35 ff ff ff       	call   c001e281 <terminateTask(int)>

c001e34c <Semaphore::release()>:
c001e34c:	83 ec 0c             	sub    esp,0xc
c001e34f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e353:	fa                   	cli    
c001e354:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001e359:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e35f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e362:	89 0d e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,ecx
c001e368:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e36b:	85 c9                	test   ecx,ecx
c001e36d:	74 3c                	je     c001e3ab <Semaphore::release()+0x5f>
c001e36f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e372:	83 ec 0c             	sub    esp,0xc
c001e375:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e378:	51                   	push   ecx
c001e379:	e8 e6 fa ff ff       	call   c001de64 <unblockTask(ThreadControlBlock*)>
c001e37e:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001e383:	83 c4 10             	add    esp,0x10
c001e386:	48                   	dec    eax
c001e387:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001e38c:	85 c0                	test   eax,eax
c001e38e:	75 09                	jne    c001e399 <Semaphore::release()+0x4d>
c001e390:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001e395:	85 c0                	test   eax,eax
c001e397:	75 17                	jne    c001e3b0 <Semaphore::release()+0x64>
c001e399:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e39e:	48                   	dec    eax
c001e39f:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e3a4:	75 01                	jne    c001e3a7 <Semaphore::release()+0x5b>
c001e3a6:	fb                   	sti    
c001e3a7:	83 c4 0c             	add    esp,0xc
c001e3aa:	c3                   	ret    
c001e3ab:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e3ae:	eb d7                	jmp    c001e387 <Semaphore::release()+0x3b>
c001e3b0:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001e3ba:	e8 22 f6 ff ff       	call   c001d9e1 <schedule()>
c001e3bf:	eb d8                	jmp    c001e399 <Semaphore::release()+0x4d>

c001e3c1 <__static_initialization_and_destruction_0(int, int)>:
c001e3c1:	83 ec 0c             	sub    esp,0xc
c001e3c4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e3c9:	0f 85 88 00 00 00    	jne    c001e457 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3cf:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e3d7:	75 7e                	jne    c001e457 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3d9:	83 ec 0c             	sub    esp,0xc
c001e3dc:	68 04 0f 03 c0       	push   0xc0030f04
c001e3e1:	e8 fa a6 00 00       	call   c0028ae0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3e6:	83 c4 10             	add    esp,0x10
c001e3e9:	83 ec 04             	sub    esp,0x4
c001e3ec:	68 98 c7 02 c0       	push   0xc002c798
c001e3f1:	68 04 0f 03 c0       	push   0xc0030f04
c001e3f6:	68 94 8a 02 c0       	push   0xc0028a94
c001e3fb:	e8 85 41 ff ff       	call   c0012585 <__cxa_atexit>
c001e400:	83 c4 10             	add    esp,0x10
c001e403:	83 ec 0c             	sub    esp,0xc
c001e406:	68 f8 0e 03 c0       	push   0xc0030ef8
c001e40b:	e8 d0 a6 00 00       	call   c0028ae0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e410:	83 c4 10             	add    esp,0x10
c001e413:	83 ec 04             	sub    esp,0x4
c001e416:	68 98 c7 02 c0       	push   0xc002c798
c001e41b:	68 f8 0e 03 c0       	push   0xc0030ef8
c001e420:	68 94 8a 02 c0       	push   0xc0028a94
c001e425:	e8 5b 41 ff ff       	call   c0012585 <__cxa_atexit>
c001e42a:	83 c4 10             	add    esp,0x10
c001e42d:	83 ec 0c             	sub    esp,0xc
c001e430:	68 ec 0e 03 c0       	push   0xc0030eec
c001e435:	e8 a6 a6 00 00       	call   c0028ae0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e43a:	83 c4 10             	add    esp,0x10
c001e43d:	83 ec 04             	sub    esp,0x4
c001e440:	68 98 c7 02 c0       	push   0xc002c798
c001e445:	68 ec 0e 03 c0       	push   0xc0030eec
c001e44a:	68 94 8a 02 c0       	push   0xc0028a94
c001e44f:	e8 31 41 ff ff       	call   c0012585 <__cxa_atexit>
c001e454:	83 c4 10             	add    esp,0x10
c001e457:	90                   	nop
c001e458:	83 c4 0c             	add    esp,0xc
c001e45b:	c3                   	ret    

c001e45c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e45c:	83 ec 0c             	sub    esp,0xc
c001e45f:	83 ec 08             	sub    esp,0x8
c001e462:	68 ff ff 00 00       	push   0xffff
c001e467:	6a 01                	push   0x1
c001e469:	e8 53 ff ff ff       	call   c001e3c1 <__static_initialization_and_destruction_0(int, int)>
c001e46e:	83 c4 10             	add    esp,0x10
c001e471:	83 c4 0c             	add    esp,0xc
c001e474:	c3                   	ret    

c001e475 <Vm::inbv(unsigned short)>:
c001e475:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e479:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e47e:	75 06                	jne    c001e486 <Vm::inbv(unsigned short)+0x11>
c001e480:	a0 4c 0f 03 c0       	mov    al,ds:0xc0030f4c
c001e485:	c3                   	ret    
c001e486:	ec                   	in     al,dx
c001e487:	c3                   	ret    

c001e488 <Vm::outbv(unsigned short, unsigned char)>:
c001e488:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e48c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e490:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e495:	75 25                	jne    c001e4bc <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e497:	8b 0d 4c 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f4c
c001e49d:	8d 51 01             	lea    edx,[ecx+0x1]
c001e4a0:	88 81 60 0f 03 c0    	mov    BYTE PTR [ecx-0x3ffcf0a0],al
c001e4a6:	89 15 4c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f4c,edx
c001e4ac:	83 fa 20             	cmp    edx,0x20
c001e4af:	75 0c                	jne    c001e4bd <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e4b1:	c7 05 4c 0f 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030f4c,0x1f
c001e4bb:	c3                   	ret    
c001e4bc:	ee                   	out    dx,al
c001e4bd:	c3                   	ret    

c001e4be <Vm::realToLinear(unsigned short, unsigned short)>:
c001e4be:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4c3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4c8:	c1 e0 04             	shl    eax,0x4
c001e4cb:	01 d0                	add    eax,edx
c001e4cd:	c3                   	ret    

c001e4ce <Vm::getSegment(unsigned int)>:
c001e4ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4d2:	c1 e8 10             	shr    eax,0x10
c001e4d5:	c3                   	ret    

c001e4d6 <Vm::getOffset(unsigned int)>:
c001e4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4da:	c3                   	ret    

c001e4db <Vm::mainloop2()>:
c001e4db:	83 ec 18             	sub    esp,0x18
c001e4de:	fa                   	cli    
c001e4df:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e4e5:	6a 02                	push   0x2
c001e4e7:	c6 05 45 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f45,0x1
c001e4ee:	e8 9e f6 ff ff       	call   c001db91 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e4f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4f8:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e4fc:	52                   	push   edx
c001e4fd:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e501:	52                   	push   edx
c001e502:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e506:	52                   	push   edx
c001e507:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e50b:	50                   	push   eax
c001e50c:	e8 e9 1d fe ff       	call   c00002fa <goToVM86>
c001e511:	83 c4 2c             	add    esp,0x2c
c001e514:	c3                   	ret    

c001e515 <Vm::mainVm8086Loop(void*)>:
c001e515:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e51a:	48                   	dec    eax
c001e51b:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e520:	75 01                	jne    c001e523 <Vm::mainVm8086Loop(void*)+0xe>
c001e522:	fb                   	sti    
c001e523:	eb b6                	jmp    c001e4db <Vm::mainloop2()>

c001e525 <Vm::mainloop3(unsigned long)>:
c001e525:	83 ec 18             	sub    esp,0x18
c001e528:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e52c:	fa                   	cli    
c001e52d:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e533:	6a 02                	push   0x2
c001e535:	c6 05 44 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f44,0x1
c001e53c:	a3 40 0f 03 c0       	mov    ds:0xc0030f40,eax
c001e541:	e8 4b f6 ff ff       	call   c001db91 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e546:	83 c4 1c             	add    esp,0x1c
c001e549:	eb 90                	jmp    c001e4db <Vm::mainloop2()>

c001e54b <Vm::initialise8086()>:
c001e54b:	83 ec 0c             	sub    esp,0xc
c001e54e:	68 80 00 00 00       	push   0x80
c001e553:	6a 00                	push   0x0
c001e555:	68 15 e5 01 c0       	push   0xc001e515
c001e55a:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c001e560:	e8 57 f2 ff ff       	call   c001d7bc <Process::createThread(void (*)(void*), void*, int)>
c001e565:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e56c:	a3 48 0f 03 c0       	mov    ds:0xc0030f48,eax
c001e571:	68 00 01 00 00       	push   0x100
c001e576:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001e57b:	6a 00                	push   0x0
c001e57d:	6a 00                	push   0x0
c001e57f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e585:	e8 48 37 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e58a:	83 c4 2c             	add    esp,0x2c
c001e58d:	c3                   	ret    

c001e58e <Vm::finish8086()>:
c001e58e:	53                   	push   ebx
c001e58f:	83 ec 08             	sub    esp,0x8
c001e592:	fa                   	cli    
c001e593:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e599:	80 3d 44 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f44,0x0
c001e5a0:	75 15                	jne    c001e5b7 <Vm::finish8086()+0x29>
c001e5a2:	e8 3a f4 ff ff       	call   c001d9e1 <schedule()>
c001e5a7:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e5ac:	48                   	dec    eax
c001e5ad:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e5b2:	75 de                	jne    c001e592 <Vm::finish8086()+0x4>
c001e5b4:	fb                   	sti    
c001e5b5:	eb db                	jmp    c001e592 <Vm::finish8086()+0x4>
c001e5b7:	83 ec 0c             	sub    esp,0xc
c001e5ba:	8b 1d 40 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f40
c001e5c0:	ff 35 48 0f 03 c0    	push   DWORD PTR ds:0xc0030f48
c001e5c6:	c6 05 44 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f44,0x0
c001e5cd:	e8 92 f8 ff ff       	call   c001de64 <unblockTask(ThreadControlBlock*)>
c001e5d2:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e5d7:	83 c4 10             	add    esp,0x10
c001e5da:	8d 50 ff             	lea    edx,[eax-0x1]
c001e5dd:	89 15 e8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee8,edx
c001e5e3:	85 d2                	test   edx,edx
c001e5e5:	75 01                	jne    c001e5e8 <Vm::finish8086()+0x5a>
c001e5e7:	fb                   	sti    
c001e5e8:	89 d8                	mov    eax,ebx
c001e5ea:	83 c4 08             	add    esp,0x8
c001e5ed:	5b                   	pop    ebx
c001e5ee:	c3                   	ret    

c001e5ef <Vm::getOutput8086(unsigned char*)>:
c001e5ef:	57                   	push   edi
c001e5f0:	8b 0d 4c 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f4c
c001e5f6:	56                   	push   esi
c001e5f7:	be 60 0f 03 c0       	mov    esi,0xc0030f60
c001e5fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e600:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e602:	a1 4c 0f 03 c0       	mov    eax,ds:0xc0030f4c
c001e607:	5e                   	pop    esi
c001e608:	c7 05 4c 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f4c,0x0
c001e612:	5f                   	pop    edi
c001e613:	c3                   	ret    

c001e614 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e614:	55                   	push   ebp
c001e615:	57                   	push   edi
c001e616:	56                   	push   esi
c001e617:	53                   	push   ebx
c001e618:	83 ec 2c             	sub    esp,0x2c
c001e61b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e61f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e623:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e627:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e62b:	fa                   	cli    
c001e62c:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e632:	0f b6 35 45 0f 03 c0 	movzx  esi,BYTE PTR ds:0xc0030f45
c001e639:	89 f0                	mov    eax,esi
c001e63b:	84 c0                	test   al,al
c001e63d:	75 1d                	jne    c001e65c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e63f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e643:	e8 99 f3 ff ff       	call   c001d9e1 <schedule()>
c001e648:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e64d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e651:	48                   	dec    eax
c001e652:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e657:	75 d2                	jne    c001e62b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e659:	fb                   	sti    
c001e65a:	eb cf                	jmp    c001e62b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e65c:	a1 48 0f 03 c0       	mov    eax,ds:0xc0030f48
c001e661:	c7 05 4c 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f4c,0x0
c001e66b:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e66f:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e673:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e677:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e67b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e67f:	50                   	push   eax
c001e680:	6a 20                	push   0x20
c001e682:	6a 00                	push   0x0
c001e684:	68 60 0f 03 c0       	push   0xc0030f60
c001e689:	e8 c2 20 fe ff       	call   c0000750 <memset>
c001e68e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e695:	e8 ff 0e ff ff       	call   c000f599 <malloc>
c001e69a:	83 c4 0c             	add    esp,0xc
c001e69d:	89 c3                	mov    ebx,eax
c001e69f:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c001e6a5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e6a9:	50                   	push   eax
c001e6aa:	e8 93 45 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c001e6af:	83 c4 10             	add    esp,0x10
c001e6b2:	85 db                	test   ebx,ebx
c001e6b4:	75 0a                	jne    c001e6c0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e6b6:	83 ec 0c             	sub    esp,0xc
c001e6b9:	68 0c bd 02 c0       	push   0xc002bd0c
c001e6be:	eb 3e                	jmp    c001e6fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6c0:	50                   	push   eax
c001e6c1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e6c5:	50                   	push   eax
c001e6c6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e6ca:	50                   	push   eax
c001e6cb:	53                   	push   ebx
c001e6cc:	e8 81 48 ff ff       	call   c0012f52 <File::stat(unsigned long long*, bool*)>
c001e6d1:	83 c4 10             	add    esp,0x10
c001e6d4:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e6d9:	74 0a                	je     c001e6e5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e6db:	83 ec 0c             	sub    esp,0xc
c001e6de:	68 20 bd 02 c0       	push   0xc002bd20
c001e6e3:	eb 19                	jmp    c001e6fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6e5:	51                   	push   ecx
c001e6e6:	51                   	push   ecx
c001e6e7:	6a 01                	push   0x1
c001e6e9:	53                   	push   ebx
c001e6ea:	e8 b7 45 ff ff       	call   c0012ca6 <File::open(FileOpenMode)>
c001e6ef:	83 c4 10             	add    esp,0x10
c001e6f2:	85 c0                	test   eax,eax
c001e6f4:	74 24                	je     c001e71a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e6f6:	83 ec 0c             	sub    esp,0xc
c001e6f9:	68 39 bd 02 c0       	push   0xc002bd39
c001e6fe:	e8 4c b7 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001e703:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e708:	83 c4 10             	add    esp,0x10
c001e70b:	48                   	dec    eax
c001e70c:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e711:	85 c0                	test   eax,eax
c001e713:	75 01                	jne    c001e716 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e715:	fb                   	sti    
c001e716:	31 f6                	xor    esi,esi
c001e718:	eb 58                	jmp    c001e772 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e71a:	0f b7 ed             	movzx  ebp,bp
c001e71d:	50                   	push   eax
c001e71e:	0f b7 ff             	movzx  edi,di
c001e721:	50                   	push   eax
c001e722:	55                   	push   ebp
c001e723:	57                   	push   edi
c001e724:	e8 95 fd ff ff       	call   c001e4be <Vm::realToLinear(unsigned short, unsigned short)>
c001e729:	5a                   	pop    edx
c001e72a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e72c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e730:	51                   	push   ecx
c001e731:	50                   	push   eax
c001e732:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e736:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e73a:	53                   	push   ebx
c001e73b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e73e:	83 c4 14             	add    esp,0x14
c001e741:	53                   	push   ebx
c001e742:	e8 bd 45 ff ff       	call   c0012d04 <File::close()>
c001e747:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e74c:	83 c4 10             	add    esp,0x10
c001e74f:	48                   	dec    eax
c001e750:	c6 05 45 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f45,0x0
c001e757:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e75c:	85 c0                	test   eax,eax
c001e75e:	75 01                	jne    c001e761 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e760:	fb                   	sti    
c001e761:	83 ec 0c             	sub    esp,0xc
c001e764:	ff 35 48 0f 03 c0    	push   DWORD PTR ds:0xc0030f48
c001e76a:	e8 f5 f6 ff ff       	call   c001de64 <unblockTask(ThreadControlBlock*)>
c001e76f:	83 c4 10             	add    esp,0x10
c001e772:	83 c4 2c             	add    esp,0x2c
c001e775:	89 f0                	mov    eax,esi
c001e777:	5b                   	pop    ebx
c001e778:	5e                   	pop    esi
c001e779:	5f                   	pop    edi
c001e77a:	5d                   	pop    ebp
c001e77b:	c3                   	ret    

c001e77c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e77c:	57                   	push   edi
c001e77d:	56                   	push   esi
c001e77e:	53                   	push   ebx
c001e77f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e787:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e78b:	83 e8 06             	sub    eax,0x6
c001e78e:	0f b7 c0             	movzx  eax,ax
c001e791:	50                   	push   eax
c001e792:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e797:	50                   	push   eax
c001e798:	e8 21 fd ff ff       	call   c001e4be <Vm::realToLinear(unsigned short, unsigned short)>
c001e79d:	5a                   	pop    edx
c001e79e:	5e                   	pop    esi
c001e79f:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e7a2:	8d 56 fa             	lea    edx,[esi-0x6]
c001e7a5:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e7ab:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e7ae:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e7b1:	83 c2 02             	add    edx,0x2
c001e7b4:	66 89 10             	mov    WORD PTR [eax],dx
c001e7b7:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e7ba:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e7be:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e7c1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e7c5:	89 d6                	mov    esi,edx
c001e7c7:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e7cd:	66 81 e6 ff fd       	and    si,0xfdff
c001e7d2:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e7d6:	74 07                	je     c001e7df <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e7d8:	89 d6                	mov    esi,edx
c001e7da:	66 81 ce 00 02       	or     si,0x200
c001e7df:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e7e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7e8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e7ec:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e7f4:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e7f7:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e7ff:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e802:	5b                   	pop    ebx
c001e803:	5e                   	pop    esi
c001e804:	5f                   	pop    edi
c001e805:	c3                   	ret    

c001e806 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e806:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e80b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e810:	c1 e0 04             	shl    eax,0x4
c001e813:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e816:	c3                   	ret    

c001e817 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e817:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e81c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e821:	c1 e0 04             	shl    eax,0x4
c001e824:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e828:	c3                   	ret    

c001e829 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e829:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e82e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e833:	c1 e0 04             	shl    eax,0x4
c001e836:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e839:	c3                   	ret    

c001e83a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e83a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e83f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e844:	c1 e0 04             	shl    eax,0x4
c001e847:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e84b:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e84e:	c3                   	ret    

c001e84f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e84f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e854:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e859:	c1 e0 04             	shl    eax,0x4
c001e85c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e860:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e864:	c3                   	ret    

c001e865 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e865:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e86a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e86f:	c1 e0 04             	shl    eax,0x4
c001e872:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e876:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e879:	c3                   	ret    

c001e87a <Vm::faultHandler(regs*)>:
c001e87a:	55                   	push   ebp
c001e87b:	57                   	push   edi
c001e87c:	56                   	push   esi
c001e87d:	53                   	push   ebx
c001e87e:	83 ec 1c             	sub    esp,0x1c
c001e881:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e885:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e888:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e88c:	0f b7 f8             	movzx  edi,ax
c001e88f:	52                   	push   edx
c001e890:	0f b7 c0             	movzx  eax,ax
c001e893:	50                   	push   eax
c001e894:	e8 25 fc ff ff       	call   c001e4be <Vm::realToLinear(unsigned short, unsigned short)>
c001e899:	5a                   	pop    edx
c001e89a:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e89d:	59                   	pop    ecx
c001e89e:	89 c1                	mov    ecx,eax
c001e8a0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e8a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e8a7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8b0:	0f b7 c5             	movzx  eax,bp
c001e8b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8b7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e8bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8bf:	e8 fa fb ff ff       	call   c001e4be <Vm::realToLinear(unsigned short, unsigned short)>
c001e8c4:	5e                   	pop    esi
c001e8c5:	be 06 00 00 00       	mov    esi,0x6
c001e8ca:	5a                   	pop    edx
c001e8cb:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e8d0:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e8d5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e8d8:	80 fa 9d             	cmp    dl,0x9d
c001e8db:	0f 84 2c 02 00 00    	je     c001eb0d <Vm::faultHandler(regs*)+0x293>
c001e8e1:	0f 87 91 00 00 00    	ja     c001e978 <Vm::faultHandler(regs*)+0xfe>
c001e8e7:	80 fa 66             	cmp    dl,0x66
c001e8ea:	0f 84 98 01 00 00    	je     c001ea88 <Vm::faultHandler(regs*)+0x20e>
c001e8f0:	77 47                	ja     c001e939 <Vm::faultHandler(regs*)+0xbf>
c001e8f2:	80 fa 36             	cmp    dl,0x36
c001e8f5:	0f 84 80 01 00 00    	je     c001ea7b <Vm::faultHandler(regs*)+0x201>
c001e8fb:	77 1a                	ja     c001e917 <Vm::faultHandler(regs*)+0x9d>
c001e8fd:	80 fa 26             	cmp    dl,0x26
c001e900:	0f 84 4e 01 00 00    	je     c001ea54 <Vm::faultHandler(regs*)+0x1da>
c001e906:	80 fa 2e             	cmp    dl,0x2e
c001e909:	0f 85 e2 05 00 00    	jne    c001eef1 <Vm::faultHandler(regs*)+0x677>
c001e90f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e912:	31 f6                	xor    esi,esi
c001e914:	41                   	inc    ecx
c001e915:	eb be                	jmp    c001e8d5 <Vm::faultHandler(regs*)+0x5b>
c001e917:	80 fa 64             	cmp    dl,0x64
c001e91a:	0f 84 41 01 00 00    	je     c001ea61 <Vm::faultHandler(regs*)+0x1e7>
c001e920:	0f 87 48 01 00 00    	ja     c001ea6e <Vm::faultHandler(regs*)+0x1f4>
c001e926:	80 fa 3e             	cmp    dl,0x3e
c001e929:	0f 85 c2 05 00 00    	jne    c001eef1 <Vm::faultHandler(regs*)+0x677>
c001e92f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e932:	be 01 00 00 00       	mov    esi,0x1
c001e937:	eb db                	jmp    c001e914 <Vm::faultHandler(regs*)+0x9a>
c001e939:	80 fa 6d             	cmp    dl,0x6d
c001e93c:	0f 84 ec 02 00 00    	je     c001ec2e <Vm::faultHandler(regs*)+0x3b4>
c001e942:	77 17                	ja     c001e95b <Vm::faultHandler(regs*)+0xe1>
c001e944:	80 fa 67             	cmp    dl,0x67
c001e947:	0f 84 48 01 00 00    	je     c001ea95 <Vm::faultHandler(regs*)+0x21b>
c001e94d:	80 fa 6c             	cmp    dl,0x6c
c001e950:	0f 84 69 02 00 00    	je     c001ebbf <Vm::faultHandler(regs*)+0x345>
c001e956:	e9 96 05 00 00       	jmp    c001eef1 <Vm::faultHandler(regs*)+0x677>
c001e95b:	80 fa 6f             	cmp    dl,0x6f
c001e95e:	0f 84 f4 03 00 00    	je     c001ed58 <Vm::faultHandler(regs*)+0x4de>
c001e964:	0f 82 59 03 00 00    	jb     c001ecc3 <Vm::faultHandler(regs*)+0x449>
c001e96a:	80 fa 9c             	cmp    dl,0x9c
c001e96d:	0f 84 2f 01 00 00    	je     c001eaa2 <Vm::faultHandler(regs*)+0x228>
c001e973:	e9 79 05 00 00       	jmp    c001eef1 <Vm::faultHandler(regs*)+0x677>
c001e978:	80 fa ec             	cmp    dl,0xec
c001e97b:	0f 84 14 05 00 00    	je     c001ee95 <Vm::faultHandler(regs*)+0x61b>
c001e981:	77 7b                	ja     c001e9fe <Vm::faultHandler(regs*)+0x184>
c001e983:	80 fa e4             	cmp    dl,0xe4
c001e986:	0f 84 93 04 00 00    	je     c001ee1f <Vm::faultHandler(regs*)+0x5a5>
c001e98c:	77 53                	ja     c001e9e1 <Vm::faultHandler(regs*)+0x167>
c001e98e:	80 fa cd             	cmp    dl,0xcd
c001e991:	0f 84 d9 01 00 00    	je     c001eb70 <Vm::faultHandler(regs*)+0x2f6>
c001e997:	80 fa cf             	cmp    dl,0xcf
c001e99a:	0f 85 51 05 00 00    	jne    c001eef1 <Vm::faultHandler(regs*)+0x677>
c001e9a0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e9a3:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e9a6:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e9aa:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e9ad:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e9b1:	81 ca 00 02 02 00    	or     edx,0x20200
c001e9b7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e9ba:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e9be:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9c4:	66 c1 e8 09          	shr    ax,0x9
c001e9c8:	83 e0 01             	and    eax,0x1
c001e9cb:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e9ce:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e9d1:	83 c0 06             	add    eax,0x6
c001e9d4:	25 ff ff 00 00       	and    eax,0xffff
c001e9d9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e9dc:	e9 0c 05 00 00       	jmp    c001eeed <Vm::faultHandler(regs*)+0x673>
c001e9e1:	80 fa e6             	cmp    dl,0xe6
c001e9e4:	0f 84 7f 04 00 00    	je     c001ee69 <Vm::faultHandler(regs*)+0x5ef>
c001e9ea:	0f 82 4b 04 00 00    	jb     c001ee3b <Vm::faultHandler(regs*)+0x5c1>
c001e9f0:	80 fa e7             	cmp    dl,0xe7
c001e9f3:	0f 84 87 04 00 00    	je     c001ee80 <Vm::faultHandler(regs*)+0x606>
c001e9f9:	e9 f3 04 00 00       	jmp    c001eef1 <Vm::faultHandler(regs*)+0x677>
c001e9fe:	80 fa ef             	cmp    dl,0xef
c001ea01:	0f 84 d1 04 00 00    	je     c001eed8 <Vm::faultHandler(regs*)+0x65e>
c001ea07:	77 28                	ja     c001ea31 <Vm::faultHandler(regs*)+0x1b7>
c001ea09:	80 fa ed             	cmp    dl,0xed
c001ea0c:	0f 84 9f 04 00 00    	je     c001eeb1 <Vm::faultHandler(regs*)+0x637>
c001ea12:	80 fa ee             	cmp    dl,0xee
c001ea15:	0f 85 d6 04 00 00    	jne    c001eef1 <Vm::faultHandler(regs*)+0x677>
c001ea1b:	50                   	push   eax
c001ea1c:	50                   	push   eax
c001ea1d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ea21:	50                   	push   eax
c001ea22:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ea26:	50                   	push   eax
c001ea27:	e8 5c fa ff ff       	call   c001e488 <Vm::outbv(unsigned short, unsigned char)>
c001ea2c:	e9 9f 04 00 00       	jmp    c001eed0 <Vm::faultHandler(regs*)+0x656>
c001ea31:	80 fa fa             	cmp    dl,0xfa
c001ea34:	0f 84 69 01 00 00    	je     c001eba3 <Vm::faultHandler(regs*)+0x329>
c001ea3a:	80 fa fb             	cmp    dl,0xfb
c001ea3d:	0f 84 6e 01 00 00    	je     c001ebb1 <Vm::faultHandler(regs*)+0x337>
c001ea43:	80 fa f3             	cmp    dl,0xf3
c001ea46:	0f 85 a5 04 00 00    	jne    c001eef1 <Vm::faultHandler(regs*)+0x677>
c001ea4c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea4f:	e9 c0 fe ff ff       	jmp    c001e914 <Vm::faultHandler(regs*)+0x9a>
c001ea54:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea57:	be 02 00 00 00       	mov    esi,0x2
c001ea5c:	e9 b3 fe ff ff       	jmp    c001e914 <Vm::faultHandler(regs*)+0x9a>
c001ea61:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea64:	be 03 00 00 00       	mov    esi,0x3
c001ea69:	e9 a6 fe ff ff       	jmp    c001e914 <Vm::faultHandler(regs*)+0x9a>
c001ea6e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea71:	be 04 00 00 00       	mov    esi,0x4
c001ea76:	e9 99 fe ff ff       	jmp    c001e914 <Vm::faultHandler(regs*)+0x9a>
c001ea7b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea7e:	be 05 00 00 00       	mov    esi,0x5
c001ea83:	e9 8c fe ff ff       	jmp    c001e914 <Vm::faultHandler(regs*)+0x9a>
c001ea88:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea8b:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ea90:	e9 7f fe ff ff       	jmp    c001e914 <Vm::faultHandler(regs*)+0x9a>
c001ea95:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea98:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ea9d:	e9 72 fe ff ff       	jmp    c001e914 <Vm::faultHandler(regs*)+0x9a>
c001eaa2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eaa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001eaa9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eaae:	74 30                	je     c001eae0 <Vm::faultHandler(regs*)+0x266>
c001eab0:	83 e9 04             	sub    ecx,0x4
c001eab3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eab9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eabf:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eac2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eac5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eacb:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eacf:	0f 84 15 04 00 00    	je     c001eeea <Vm::faultHandler(regs*)+0x670>
c001ead5:	80 ce 02             	or     dh,0x2
c001ead8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eadb:	e9 0a 04 00 00       	jmp    c001eeea <Vm::faultHandler(regs*)+0x670>
c001eae0:	83 e9 02             	sub    ecx,0x2
c001eae3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eae9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eaec:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eaf0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eaf6:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eafa:	74 05                	je     c001eb01 <Vm::faultHandler(regs*)+0x287>
c001eafc:	80 ce 02             	or     dh,0x2
c001eaff:	eb 03                	jmp    c001eb04 <Vm::faultHandler(regs*)+0x28a>
c001eb01:	80 e6 fd             	and    dh,0xfd
c001eb04:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eb08:	e9 dd 03 00 00       	jmp    c001eeea <Vm::faultHandler(regs*)+0x670>
c001eb0d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eb12:	74 2a                	je     c001eb3e <Vm::faultHandler(regs*)+0x2c4>
c001eb14:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb16:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eb1c:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb22:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb25:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb27:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb2d:	c1 e8 09             	shr    eax,0x9
c001eb30:	83 e0 01             	and    eax,0x1
c001eb33:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb36:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb39:	83 c0 04             	add    eax,0x4
c001eb3c:	eb 25                	jmp    c001eb63 <Vm::faultHandler(regs*)+0x2e9>
c001eb3e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eb41:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb47:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb4a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eb4d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb53:	66 c1 e8 09          	shr    ax,0x9
c001eb57:	83 e0 01             	and    eax,0x1
c001eb5a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb5d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb60:	83 c0 02             	add    eax,0x2
c001eb63:	25 ff ff 00 00       	and    eax,0xffff
c001eb68:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb6b:	e9 7a 03 00 00       	jmp    c001eeea <Vm::faultHandler(regs*)+0x670>
c001eb70:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb74:	3c ee                	cmp    al,0xee
c001eb76:	75 10                	jne    c001eb88 <Vm::faultHandler(regs*)+0x30e>
c001eb78:	83 ec 0c             	sub    esp,0xc
c001eb7b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001eb7e:	e8 a2 f9 ff ff       	call   c001e525 <Vm::mainloop3(unsigned long)>
c001eb83:	e9 4b 03 00 00       	jmp    c001eed3 <Vm::faultHandler(regs*)+0x659>
c001eb88:	83 ec 0c             	sub    esp,0xc
c001eb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb93:	51                   	push   ecx
c001eb94:	50                   	push   eax
c001eb95:	53                   	push   ebx
c001eb96:	e8 e1 fb ff ff       	call   c001e77c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001eb9b:	83 c4 20             	add    esp,0x20
c001eb9e:	e9 4a 03 00 00       	jmp    c001eeed <Vm::faultHandler(regs*)+0x673>
c001eba3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eba8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ebac:	e9 39 03 00 00       	jmp    c001eeea <Vm::faultHandler(regs*)+0x670>
c001ebb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebb6:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ebba:	e9 2b 03 00 00       	jmp    c001eeea <Vm::faultHandler(regs*)+0x670>
c001ebbf:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ebc2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ebc7:	74 2b                	je     c001ebf4 <Vm::faultHandler(regs*)+0x37a>
c001ebc9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ebd0:	76 22                	jbe    c001ebf4 <Vm::faultHandler(regs*)+0x37a>
c001ebd2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebd6:	50                   	push   eax
c001ebd7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebdb:	50                   	push   eax
c001ebdc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebe0:	50                   	push   eax
c001ebe1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebe5:	50                   	push   eax
c001ebe6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebea:	50                   	push   eax
c001ebeb:	6a 6c                	push   0x6c
c001ebed:	6a 6c                	push   0x6c
c001ebef:	e9 b9 01 00 00       	jmp    c001edad <Vm::faultHandler(regs*)+0x533>
c001ebf4:	83 ec 0c             	sub    esp,0xc
c001ebf7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ebfb:	0f b7 f6             	movzx  esi,si
c001ebfe:	50                   	push   eax
c001ebff:	e8 71 f8 ff ff       	call   c001e475 <Vm::inbv(unsigned short)>
c001ec04:	83 c4 0c             	add    esp,0xc
c001ec07:	0f b6 c0             	movzx  eax,al
c001ec0a:	50                   	push   eax
c001ec0b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ec0f:	50                   	push   eax
c001ec10:	56                   	push   esi
c001ec11:	e8 24 fc ff ff       	call   c001e83a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ec16:	83 c4 10             	add    esp,0x10
c001ec19:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec1c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec20:	74 03                	je     c001ec25 <Vm::faultHandler(regs*)+0x3ab>
c001ec22:	48                   	dec    eax
c001ec23:	eb 01                	jmp    c001ec26 <Vm::faultHandler(regs*)+0x3ac>
c001ec25:	40                   	inc    eax
c001ec26:	0f b7 c0             	movzx  eax,ax
c001ec29:	e9 8d 00 00 00       	jmp    c001ecbb <Vm::faultHandler(regs*)+0x441>
c001ec2e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ec31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec34:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec39:	74 29                	je     c001ec64 <Vm::faultHandler(regs*)+0x3ea>
c001ec3b:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec40:	76 22                	jbe    c001ec64 <Vm::faultHandler(regs*)+0x3ea>
c001ec42:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec46:	50                   	push   eax
c001ec47:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec4b:	50                   	push   eax
c001ec4c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec50:	50                   	push   eax
c001ec51:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec55:	50                   	push   eax
c001ec56:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec5a:	50                   	push   eax
c001ec5b:	6a 6d                	push   0x6d
c001ec5d:	6a 6d                	push   0x6d
c001ec5f:	e9 49 01 00 00       	jmp    c001edad <Vm::faultHandler(regs*)+0x533>
c001ec64:	0f b7 c8             	movzx  ecx,ax
c001ec67:	0f b7 f6             	movzx  esi,si
c001ec6a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ec6d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec72:	74 20                	je     c001ec94 <Vm::faultHandler(regs*)+0x41a>
c001ec74:	ed                   	in     eax,dx
c001ec75:	55                   	push   ebp
c001ec76:	50                   	push   eax
c001ec77:	51                   	push   ecx
c001ec78:	56                   	push   esi
c001ec79:	e8 e7 fb ff ff       	call   c001e865 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ec7e:	83 c4 10             	add    esp,0x10
c001ec81:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec84:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec88:	74 05                	je     c001ec8f <Vm::faultHandler(regs*)+0x415>
c001ec8a:	83 e8 04             	sub    eax,0x4
c001ec8d:	eb 27                	jmp    c001ecb6 <Vm::faultHandler(regs*)+0x43c>
c001ec8f:	83 c0 04             	add    eax,0x4
c001ec92:	eb 22                	jmp    c001ecb6 <Vm::faultHandler(regs*)+0x43c>
c001ec94:	66 ed                	in     ax,dx
c001ec96:	0f b7 c0             	movzx  eax,ax
c001ec99:	57                   	push   edi
c001ec9a:	50                   	push   eax
c001ec9b:	51                   	push   ecx
c001ec9c:	56                   	push   esi
c001ec9d:	e8 ad fb ff ff       	call   c001e84f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001eca2:	83 c4 10             	add    esp,0x10
c001eca5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eca8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ecac:	74 05                	je     c001ecb3 <Vm::faultHandler(regs*)+0x439>
c001ecae:	83 e8 02             	sub    eax,0x2
c001ecb1:	eb 03                	jmp    c001ecb6 <Vm::faultHandler(regs*)+0x43c>
c001ecb3:	83 c0 02             	add    eax,0x2
c001ecb6:	25 ff ff 00 00       	and    eax,0xffff
c001ecbb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ecbe:	e9 27 02 00 00       	jmp    c001eeea <Vm::faultHandler(regs*)+0x670>
c001ecc3:	8d 46 ff             	lea    eax,[esi-0x1]
c001ecc6:	3c 05                	cmp    al,0x5
c001ecc8:	77 24                	ja     c001ecee <Vm::faultHandler(regs*)+0x474>
c001ecca:	0f b6 c0             	movzx  eax,al
c001eccd:	ff 24 85 ac bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4254]
c001ecd4:	0f b7 fd             	movzx  edi,bp
c001ecd7:	eb 15                	jmp    c001ecee <Vm::faultHandler(regs*)+0x474>
c001ecd9:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ecdd:	eb 0f                	jmp    c001ecee <Vm::faultHandler(regs*)+0x474>
c001ecdf:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ece3:	eb 09                	jmp    c001ecee <Vm::faultHandler(regs*)+0x474>
c001ece5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ece9:	eb 03                	jmp    c001ecee <Vm::faultHandler(regs*)+0x474>
c001eceb:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ecee:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ecf1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ecf6:	74 29                	je     c001ed21 <Vm::faultHandler(regs*)+0x4a7>
c001ecf8:	3d ff ff 00 00       	cmp    eax,0xffff
c001ecfd:	76 22                	jbe    c001ed21 <Vm::faultHandler(regs*)+0x4a7>
c001ecff:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed03:	50                   	push   eax
c001ed04:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed08:	50                   	push   eax
c001ed09:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed0d:	50                   	push   eax
c001ed0e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed12:	50                   	push   eax
c001ed13:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed17:	50                   	push   eax
c001ed18:	6a 6e                	push   0x6e
c001ed1a:	6a 6e                	push   0x6e
c001ed1c:	e9 8c 00 00 00       	jmp    c001edad <Vm::faultHandler(regs*)+0x533>
c001ed21:	0f b7 c0             	movzx  eax,ax
c001ed24:	52                   	push   edx
c001ed25:	52                   	push   edx
c001ed26:	50                   	push   eax
c001ed27:	57                   	push   edi
c001ed28:	e8 d9 fa ff ff       	call   c001e806 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ed2d:	59                   	pop    ecx
c001ed2e:	0f b6 c0             	movzx  eax,al
c001ed31:	5e                   	pop    esi
c001ed32:	50                   	push   eax
c001ed33:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed37:	50                   	push   eax
c001ed38:	e8 4b f7 ff ff       	call   c001e488 <Vm::outbv(unsigned short, unsigned char)>
c001ed3d:	83 c4 10             	add    esp,0x10
c001ed40:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed43:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed47:	74 03                	je     c001ed4c <Vm::faultHandler(regs*)+0x4d2>
c001ed49:	48                   	dec    eax
c001ed4a:	eb 01                	jmp    c001ed4d <Vm::faultHandler(regs*)+0x4d3>
c001ed4c:	40                   	inc    eax
c001ed4d:	0f b7 c0             	movzx  eax,ax
c001ed50:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ed53:	e9 92 01 00 00       	jmp    c001eeea <Vm::faultHandler(regs*)+0x670>
c001ed58:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed5b:	3c 05                	cmp    al,0x5
c001ed5d:	77 1f                	ja     c001ed7e <Vm::faultHandler(regs*)+0x504>
c001ed5f:	0f b6 c0             	movzx  eax,al
c001ed62:	ff 24 85 c4 bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd423c]
c001ed69:	89 ef                	mov    edi,ebp
c001ed6b:	eb 11                	jmp    c001ed7e <Vm::faultHandler(regs*)+0x504>
c001ed6d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ed70:	eb 0c                	jmp    c001ed7e <Vm::faultHandler(regs*)+0x504>
c001ed72:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ed75:	eb 07                	jmp    c001ed7e <Vm::faultHandler(regs*)+0x504>
c001ed77:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ed7a:	eb 02                	jmp    c001ed7e <Vm::faultHandler(regs*)+0x504>
c001ed7c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ed7e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ed81:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed86:	74 37                	je     c001edbf <Vm::faultHandler(regs*)+0x545>
c001ed88:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ed8e:	76 2f                	jbe    c001edbf <Vm::faultHandler(regs*)+0x545>
c001ed90:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed94:	50                   	push   eax
c001ed95:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed99:	50                   	push   eax
c001ed9a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed9e:	50                   	push   eax
c001ed9f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eda3:	50                   	push   eax
c001eda4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eda8:	50                   	push   eax
c001eda9:	6a 6f                	push   0x6f
c001edab:	6a 6f                	push   0x6f
c001edad:	68 52 bd 02 c0       	push   0xc002bd52
c001edb2:	e8 2c 39 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001edb7:	83 c4 20             	add    esp,0x20
c001edba:	e9 86 01 00 00       	jmp    c001ef45 <Vm::faultHandler(regs*)+0x6cb>
c001edbf:	0f b7 d7             	movzx  edx,di
c001edc2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001edc5:	0f b7 c6             	movzx  eax,si
c001edc8:	81 e1 00 04 00 00    	and    ecx,0x400
c001edce:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001edd1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edd6:	74 1d                	je     c001edf5 <Vm::faultHandler(regs*)+0x57b>
c001edd8:	55                   	push   ebp
c001edd9:	55                   	push   ebp
c001edda:	50                   	push   eax
c001eddb:	52                   	push   edx
c001eddc:	e8 48 fa ff ff       	call   c001e829 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ede1:	83 c4 10             	add    esp,0x10
c001ede4:	89 fa                	mov    edx,edi
c001ede6:	ef                   	out    dx,eax
c001ede7:	85 c9                	test   ecx,ecx
c001ede9:	74 05                	je     c001edf0 <Vm::faultHandler(regs*)+0x576>
c001edeb:	83 ee 04             	sub    esi,0x4
c001edee:	eb 21                	jmp    c001ee11 <Vm::faultHandler(regs*)+0x597>
c001edf0:	83 c6 04             	add    esi,0x4
c001edf3:	eb 1c                	jmp    c001ee11 <Vm::faultHandler(regs*)+0x597>
c001edf5:	55                   	push   ebp
c001edf6:	55                   	push   ebp
c001edf7:	50                   	push   eax
c001edf8:	52                   	push   edx
c001edf9:	e8 19 fa ff ff       	call   c001e817 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001edfe:	83 c4 10             	add    esp,0x10
c001ee01:	89 fa                	mov    edx,edi
c001ee03:	66 ef                	out    dx,ax
c001ee05:	85 c9                	test   ecx,ecx
c001ee07:	74 05                	je     c001ee0e <Vm::faultHandler(regs*)+0x594>
c001ee09:	83 ee 02             	sub    esi,0x2
c001ee0c:	eb 03                	jmp    c001ee11 <Vm::faultHandler(regs*)+0x597>
c001ee0e:	83 c6 02             	add    esi,0x2
c001ee11:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ee17:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ee1a:	e9 cb 00 00 00       	jmp    c001eeea <Vm::faultHandler(regs*)+0x670>
c001ee1f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee26:	83 ec 0c             	sub    esp,0xc
c001ee29:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee2d:	50                   	push   eax
c001ee2e:	e8 42 f6 ff ff       	call   c001e475 <Vm::inbv(unsigned short)>
c001ee33:	0f b6 c0             	movzx  eax,al
c001ee36:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee39:	eb 3f                	jmp    c001ee7a <Vm::faultHandler(regs*)+0x600>
c001ee3b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee40:	74 07                	je     c001ee49 <Vm::faultHandler(regs*)+0x5cf>
c001ee42:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee46:	ed                   	in     eax,dx
c001ee47:	eb 14                	jmp    c001ee5d <Vm::faultHandler(regs*)+0x5e3>
c001ee49:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ee4c:	66 31 f6             	xor    si,si
c001ee4f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ee52:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee56:	66 ed                	in     ax,dx
c001ee58:	0f b7 c0             	movzx  eax,ax
c001ee5b:	09 f0                	or     eax,esi
c001ee5d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee60:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee64:	e9 84 00 00 00       	jmp    c001eeed <Vm::faultHandler(regs*)+0x673>
c001ee69:	52                   	push   edx
c001ee6a:	52                   	push   edx
c001ee6b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ee6f:	50                   	push   eax
c001ee70:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee74:	50                   	push   eax
c001ee75:	e8 0e f6 ff ff       	call   c001e488 <Vm::outbv(unsigned short, unsigned char)>
c001ee7a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee7e:	eb 53                	jmp    c001eed3 <Vm::faultHandler(regs*)+0x659>
c001ee80:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee83:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee87:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee8c:	74 03                	je     c001ee91 <Vm::faultHandler(regs*)+0x617>
c001ee8e:	ef                   	out    dx,eax
c001ee8f:	eb cf                	jmp    c001ee60 <Vm::faultHandler(regs*)+0x5e6>
c001ee91:	66 ef                	out    dx,ax
c001ee93:	eb cb                	jmp    c001ee60 <Vm::faultHandler(regs*)+0x5e6>
c001ee95:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee9c:	83 ec 0c             	sub    esp,0xc
c001ee9f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eea3:	50                   	push   eax
c001eea4:	e8 cc f5 ff ff       	call   c001e475 <Vm::inbv(unsigned short)>
c001eea9:	0f b6 c0             	movzx  eax,al
c001eeac:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001eeaf:	eb 1f                	jmp    c001eed0 <Vm::faultHandler(regs*)+0x656>
c001eeb1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eeb4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eeb9:	74 03                	je     c001eebe <Vm::faultHandler(regs*)+0x644>
c001eebb:	ed                   	in     eax,dx
c001eebc:	eb 0d                	jmp    c001eecb <Vm::faultHandler(regs*)+0x651>
c001eebe:	66 ed                	in     ax,dx
c001eec0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001eec3:	0f b7 c0             	movzx  eax,ax
c001eec6:	66 31 d2             	xor    dx,dx
c001eec9:	09 d0                	or     eax,edx
c001eecb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001eece:	eb 1a                	jmp    c001eeea <Vm::faultHandler(regs*)+0x670>
c001eed0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eed3:	83 c4 10             	add    esp,0x10
c001eed6:	eb 15                	jmp    c001eeed <Vm::faultHandler(regs*)+0x673>
c001eed8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001eedb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eede:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eee3:	74 03                	je     c001eee8 <Vm::faultHandler(regs*)+0x66e>
c001eee5:	ef                   	out    dx,eax
c001eee6:	eb 02                	jmp    c001eeea <Vm::faultHandler(regs*)+0x670>
c001eee8:	66 ef                	out    dx,ax
c001eeea:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eeed:	b0 01                	mov    al,0x1
c001eeef:	eb 56                	jmp    c001ef47 <Vm::faultHandler(regs*)+0x6cd>
c001eef1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eef5:	50                   	push   eax
c001eef6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eefa:	50                   	push   eax
c001eefb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eeff:	50                   	push   eax
c001ef00:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ef04:	50                   	push   eax
c001ef05:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef09:	50                   	push   eax
c001ef0a:	52                   	push   edx
c001ef0b:	52                   	push   edx
c001ef0c:	68 7f bd 02 c0       	push   0xc002bd7f
c001ef11:	e8 cd 37 ff ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c001ef16:	83 c4 20             	add    esp,0x20
c001ef19:	83 ec 0c             	sub    esp,0xc
c001ef1c:	6a 60                	push   0x60
c001ef1e:	e8 52 f5 ff ff       	call   c001e475 <Vm::inbv(unsigned short)>
c001ef23:	83 c4 10             	add    esp,0x10
c001ef26:	3c 1c                	cmp    al,0x1c
c001ef28:	74 04                	je     c001ef2e <Vm::faultHandler(regs*)+0x6b4>
c001ef2a:	3c 5a                	cmp    al,0x5a
c001ef2c:	75 eb                	jne    c001ef19 <Vm::faultHandler(regs*)+0x69f>
c001ef2e:	3c 5a                	cmp    al,0x5a
c001ef30:	74 04                	je     c001ef36 <Vm::faultHandler(regs*)+0x6bc>
c001ef32:	3c 1c                	cmp    al,0x1c
c001ef34:	75 0f                	jne    c001ef45 <Vm::faultHandler(regs*)+0x6cb>
c001ef36:	83 ec 0c             	sub    esp,0xc
c001ef39:	6a 60                	push   0x60
c001ef3b:	e8 35 f5 ff ff       	call   c001e475 <Vm::inbv(unsigned short)>
c001ef40:	83 c4 10             	add    esp,0x10
c001ef43:	eb e9                	jmp    c001ef2e <Vm::faultHandler(regs*)+0x6b4>
c001ef45:	31 c0                	xor    eax,eax
c001ef47:	83 c4 1c             	add    esp,0x1c
c001ef4a:	5b                   	pop    ebx
c001ef4b:	5e                   	pop    esi
c001ef4c:	5f                   	pop    edi
c001ef4d:	5d                   	pop    ebp
c001ef4e:	c3                   	ret    

c001ef4f <Vm::fpuInternalTo32(unsigned long long)>:
c001ef4f:	57                   	push   edi
c001ef50:	56                   	push   esi
c001ef51:	53                   	push   ebx
c001ef52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5a:	89 d6                	mov    esi,edx
c001ef5c:	89 d7                	mov    edi,edx
c001ef5e:	89 c1                	mov    ecx,eax
c001ef60:	c1 ef 14             	shr    edi,0x14
c001ef63:	89 d3                	mov    ebx,edx
c001ef65:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ef6b:	31 d2                	xor    edx,edx
c001ef6d:	89 f8                	mov    eax,edi
c001ef6f:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ef75:	bf ff 00 00 00       	mov    edi,0xff
c001ef7a:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ef7f:	83 d2 ff             	adc    edx,0xffffffff
c001ef82:	39 c7                	cmp    edi,eax
c001ef84:	bf 00 00 00 00       	mov    edi,0x0
c001ef89:	19 d7                	sbb    edi,edx
c001ef8b:	72 15                	jb     c001efa2 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ef8d:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ef91:	c1 e0 17             	shl    eax,0x17
c001ef94:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ef9a:	09 f1                	or     ecx,esi
c001ef9c:	09 c1                	or     ecx,eax
c001ef9e:	89 cf                	mov    edi,ecx
c001efa0:	eb 02                	jmp    c001efa4 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001efa2:	31 ff                	xor    edi,edi
c001efa4:	89 f8                	mov    eax,edi
c001efa6:	5b                   	pop    ebx
c001efa7:	5e                   	pop    esi
c001efa8:	5f                   	pop    edi
c001efa9:	c3                   	ret    

c001efaa <Vm::fpuInternalTo64(unsigned long long)>:
c001efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efb2:	c3                   	ret    

c001efb3 <Vm::fpu32ToInternal(unsigned int)>:
c001efb3:	57                   	push   edi
c001efb4:	31 ff                	xor    edi,edi
c001efb6:	56                   	push   esi
c001efb7:	53                   	push   ebx
c001efb8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001efbc:	89 cb                	mov    ebx,ecx
c001efbe:	89 ce                	mov    esi,ecx
c001efc0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001efc6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001efcc:	c1 e9 17             	shr    ecx,0x17
c001efcf:	89 f0                	mov    eax,esi
c001efd1:	0f b6 d1             	movzx  edx,cl
c001efd4:	81 c2 80 03 00 00    	add    edx,0x380
c001efda:	89 d1                	mov    ecx,edx
c001efdc:	89 fa                	mov    edx,edi
c001efde:	c1 e1 14             	shl    ecx,0x14
c001efe1:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001efe5:	c1 e0 1d             	shl    eax,0x1d
c001efe8:	89 d7                	mov    edi,edx
c001efea:	89 c6                	mov    esi,eax
c001efec:	89 ca                	mov    edx,ecx
c001efee:	89 f0                	mov    eax,esi
c001eff0:	09 fa                	or     edx,edi
c001eff2:	09 da                	or     edx,ebx
c001eff4:	5b                   	pop    ebx
c001eff5:	5e                   	pop    esi
c001eff6:	5f                   	pop    edi
c001eff7:	c3                   	ret    

c001eff8 <Vm::fpu64ToInternal(unsigned long long)>:
c001eff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001effc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f000:	c3                   	ret    

c001f001 <Vm::fpuFloatToLong(unsigned long long)>:
c001f001:	57                   	push   edi
c001f002:	31 c0                	xor    eax,eax
c001f004:	56                   	push   esi
c001f005:	31 d2                	xor    edx,edx
c001f007:	53                   	push   ebx
c001f008:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f00c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f010:	89 d9                	mov    ecx,ebx
c001f012:	c1 e9 14             	shr    ecx,0x14
c001f015:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f01b:	89 cf                	mov    edi,ecx
c001f01d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f023:	78 33                	js     c001f058 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f025:	89 d9                	mov    ecx,ebx
c001f027:	89 f0                	mov    eax,esi
c001f029:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f02f:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f035:	89 ca                	mov    edx,ecx
c001f037:	b9 34 00 00 00       	mov    ecx,0x34
c001f03c:	29 f9                	sub    ecx,edi
c001f03e:	0f ad d0             	shrd   eax,edx,cl
c001f041:	d3 fa                	sar    edx,cl
c001f043:	f6 c1 20             	test   cl,0x20
c001f046:	74 05                	je     c001f04d <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f048:	89 d0                	mov    eax,edx
c001f04a:	c1 fa 1f             	sar    edx,0x1f
c001f04d:	85 db                	test   ebx,ebx
c001f04f:	79 07                	jns    c001f058 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f051:	f7 d8                	neg    eax
c001f053:	83 d2 00             	adc    edx,0x0
c001f056:	f7 da                	neg    edx
c001f058:	5b                   	pop    ebx
c001f059:	5e                   	pop    esi
c001f05a:	5f                   	pop    edi
c001f05b:	c3                   	ret    

c001f05c <Vm::fpuULongToFloat(unsigned long long)>:
c001f05c:	57                   	push   edi
c001f05d:	31 c9                	xor    ecx,ecx
c001f05f:	56                   	push   esi
c001f060:	53                   	push   ebx
c001f061:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f065:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f069:	0f ba e7 14          	bt     edi,0x14
c001f06d:	72 07                	jb     c001f076 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f06f:	01 f6                	add    esi,esi
c001f071:	11 ff                	adc    edi,edi
c001f073:	41                   	inc    ecx
c001f074:	eb f3                	jmp    c001f069 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f076:	89 fa                	mov    edx,edi
c001f078:	89 f0                	mov    eax,esi
c001f07a:	bb 33 04 00 00       	mov    ebx,0x433
c001f07f:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f085:	29 cb                	sub    ebx,ecx
c001f087:	89 d9                	mov    ecx,ebx
c001f089:	5b                   	pop    ebx
c001f08a:	c1 e1 14             	shl    ecx,0x14
c001f08d:	5e                   	pop    esi
c001f08e:	09 ca                	or     edx,ecx
c001f090:	5f                   	pop    edi
c001f091:	c3                   	ret    

c001f092 <Vm::fpuLongToFloat(long long)>:
c001f092:	56                   	push   esi
c001f093:	31 c0                	xor    eax,eax
c001f095:	53                   	push   ebx
c001f096:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f09a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f09e:	39 c8                	cmp    eax,ecx
c001f0a0:	19 d8                	sbb    eax,ebx
c001f0a2:	7d 04                	jge    c001f0a8 <Vm::fpuLongToFloat(long long)+0x16>
c001f0a4:	31 f6                	xor    esi,esi
c001f0a6:	eb 0c                	jmp    c001f0b4 <Vm::fpuLongToFloat(long long)+0x22>
c001f0a8:	f7 d9                	neg    ecx
c001f0aa:	be 01 00 00 00       	mov    esi,0x1
c001f0af:	83 d3 00             	adc    ebx,0x0
c001f0b2:	f7 db                	neg    ebx
c001f0b4:	31 c0                	xor    eax,eax
c001f0b6:	0f ba e3 14          	bt     ebx,0x14
c001f0ba:	72 07                	jb     c001f0c3 <Vm::fpuLongToFloat(long long)+0x31>
c001f0bc:	01 c9                	add    ecx,ecx
c001f0be:	11 db                	adc    ebx,ebx
c001f0c0:	40                   	inc    eax
c001f0c1:	eb f3                	jmp    c001f0b6 <Vm::fpuLongToFloat(long long)+0x24>
c001f0c3:	ba 33 04 00 00       	mov    edx,0x433
c001f0c8:	29 c2                	sub    edx,eax
c001f0ca:	89 c8                	mov    eax,ecx
c001f0cc:	c1 e2 14             	shl    edx,0x14
c001f0cf:	89 d9                	mov    ecx,ebx
c001f0d1:	89 f3                	mov    ebx,esi
c001f0d3:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f0d9:	09 ca                	or     edx,ecx
c001f0db:	84 db                	test   bl,bl
c001f0dd:	74 06                	je     c001f0e5 <Vm::fpuLongToFloat(long long)+0x53>
c001f0df:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f0e5:	5b                   	pop    ebx
c001f0e6:	5e                   	pop    esi
c001f0e7:	c3                   	ret    

c001f0e8 <Vm::fpuGet0()>:
c001f0e8:	31 c0                	xor    eax,eax
c001f0ea:	31 d2                	xor    edx,edx
c001f0ec:	c3                   	ret    

c001f0ed <Vm::fpuGet1()>:
c001f0ed:	b8 01 00 00 00       	mov    eax,0x1
c001f0f2:	31 d2                	xor    edx,edx
c001f0f4:	c3                   	ret    

c001f0f5 <Vm::fpuGetPi()>:
c001f0f5:	b8 03 00 00 00       	mov    eax,0x3
c001f0fa:	31 d2                	xor    edx,edx
c001f0fc:	c3                   	ret    

c001f0fd <Vm::fpuGetLog2E()>:
c001f0fd:	83 ec 18             	sub    esp,0x18
c001f100:	68 dc bd 02 c0       	push   0xc002bddc
c001f105:	e8 45 ad ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001f10a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f10f:	31 d2                	xor    edx,edx
c001f111:	83 c4 1c             	add    esp,0x1c
c001f114:	c3                   	ret    

c001f115 <Vm::fpuGetLogE2()>:
c001f115:	83 ec 18             	sub    esp,0x18
c001f118:	68 e8 bd 02 c0       	push   0xc002bde8
c001f11d:	e8 2d ad ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001f122:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f127:	31 d2                	xor    edx,edx
c001f129:	83 c4 1c             	add    esp,0x1c
c001f12c:	c3                   	ret    

c001f12d <Vm::fpuGetLog210()>:
c001f12d:	83 ec 18             	sub    esp,0x18
c001f130:	68 f4 bd 02 c0       	push   0xc002bdf4
c001f135:	e8 15 ad ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001f13a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f13f:	31 d2                	xor    edx,edx
c001f141:	83 c4 1c             	add    esp,0x1c
c001f144:	c3                   	ret    

c001f145 <Vm::fpuGetLog102()>:
c001f145:	83 ec 18             	sub    esp,0x18
c001f148:	68 01 be 02 c0       	push   0xc002be01
c001f14d:	e8 fd ac ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001f152:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f157:	31 d2                	xor    edx,edx
c001f159:	83 c4 1c             	add    esp,0x1c
c001f15c:	c3                   	ret    

c001f15d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f15d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f161:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f165:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f169:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f16d:	0f 92 c0             	setb   al
c001f170:	c3                   	ret    

c001f171 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f171:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f179:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f17d:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f181:	09 c2                	or     edx,eax
c001f183:	0f 94 c0             	sete   al
c001f186:	c3                   	ret    

c001f187 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f187:	57                   	push   edi
c001f188:	56                   	push   esi
c001f189:	53                   	push   ebx
c001f18a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f18e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f192:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f196:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f19a:	57                   	push   edi
c001f19b:	56                   	push   esi
c001f19c:	53                   	push   ebx
c001f19d:	51                   	push   ecx
c001f19e:	e8 ce ff ff ff       	call   c001f171 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f1a3:	83 c4 10             	add    esp,0x10
c001f1a6:	88 c2                	mov    dl,al
c001f1a8:	31 c0                	xor    eax,eax
c001f1aa:	84 d2                	test   dl,dl
c001f1ac:	75 0c                	jne    c001f1ba <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f1ae:	57                   	push   edi
c001f1af:	56                   	push   esi
c001f1b0:	53                   	push   ebx
c001f1b1:	51                   	push   ecx
c001f1b2:	e8 a6 ff ff ff       	call   c001f15d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f1b7:	83 c4 10             	add    esp,0x10
c001f1ba:	83 e0 01             	and    eax,0x1
c001f1bd:	5b                   	pop    ebx
c001f1be:	88 c1                	mov    cl,al
c001f1c0:	83 e2 01             	and    edx,0x1
c001f1c3:	a0 81 0f 03 c0       	mov    al,ds:0xc0030f81
c001f1c8:	c1 e2 06             	shl    edx,0x6
c001f1cb:	83 e0 ba             	and    eax,0xffffffba
c001f1ce:	5e                   	pop    esi
c001f1cf:	09 c8                	or     eax,ecx
c001f1d1:	5f                   	pop    edi
c001f1d2:	09 d0                	or     eax,edx
c001f1d4:	a2 81 0f 03 c0       	mov    ds:0xc0030f81,al
c001f1d9:	c3                   	ret    

c001f1da <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f1da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1e2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f1e6:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f1ea:	c3                   	ret    

c001f1eb <Vm::fpuAbs(unsigned long long)>:
c001f1eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1f3:	c3                   	ret    

c001f1f4 <Vm::fpuChs(unsigned long long)>:
c001f1f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1fc:	f7 d8                	neg    eax
c001f1fe:	83 d2 00             	adc    edx,0x0
c001f201:	f7 da                	neg    edx
c001f203:	c3                   	ret    

c001f204 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f204:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f208:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f20d:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f211:	eb c7                	jmp    c001f1da <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f213 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f213:	53                   	push   ebx
c001f214:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f218:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f21c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f220:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f224:	0f af ca             	imul   ecx,edx
c001f227:	0f af d8             	imul   ebx,eax
c001f22a:	f7 e2                	mul    edx
c001f22c:	01 d9                	add    ecx,ebx
c001f22e:	5b                   	pop    ebx
c001f22f:	01 ca                	add    edx,ecx
c001f231:	c3                   	ret    

c001f232 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f232:	83 ec 0c             	sub    esp,0xc
c001f235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f23d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f245:	e8 da 74 00 00       	call   c0026724 <__udivdi3>
c001f24a:	83 c4 1c             	add    esp,0x1c
c001f24d:	c3                   	ret    

c001f24e <Vm::fpuSquare(unsigned long long)>:
c001f24e:	50                   	push   eax
c001f24f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f253:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f257:	52                   	push   edx
c001f258:	50                   	push   eax
c001f259:	52                   	push   edx
c001f25a:	50                   	push   eax
c001f25b:	e8 b3 ff ff ff       	call   c001f213 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f260:	83 c4 14             	add    esp,0x14
c001f263:	c3                   	ret    

c001f264 <Vm::fpuGetReg(int)>:
c001f264:	83 ec 0c             	sub    esp,0xc
c001f267:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f26c:	76 10                	jbe    c001f27e <Vm::fpuGetReg(int)+0x1a>
c001f26e:	83 ec 0c             	sub    esp,0xc
c001f271:	68 0e be 02 c0       	push   0xc002be0e
c001f276:	e8 d4 ab ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001f27b:	83 c4 10             	add    esp,0x10
c001f27e:	a0 81 0f 03 c0       	mov    al,ds:0xc0030f81
c001f283:	b9 08 00 00 00       	mov    ecx,0x8
c001f288:	c0 e8 03             	shr    al,0x3
c001f28b:	83 e0 07             	and    eax,0x7
c001f28e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f292:	99                   	cdq    
c001f293:	f7 f9                	idiv   ecx
c001f295:	8b 04 d5 84 0f 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf07c]
c001f29c:	8b 14 d5 88 0f 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf078]
c001f2a3:	83 c4 0c             	add    esp,0xc
c001f2a6:	c3                   	ret    

c001f2a7 <Vm::fpuSetReg(int, unsigned long long)>:
c001f2a7:	57                   	push   edi
c001f2a8:	56                   	push   esi
c001f2a9:	52                   	push   edx
c001f2aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f2ae:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f2b2:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f2b7:	76 10                	jbe    c001f2c9 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f2b9:	83 ec 0c             	sub    esp,0xc
c001f2bc:	68 21 be 02 c0       	push   0xc002be21
c001f2c1:	e8 89 ab ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c001f2c6:	83 c4 10             	add    esp,0x10
c001f2c9:	a0 81 0f 03 c0       	mov    al,ds:0xc0030f81
c001f2ce:	b9 08 00 00 00       	mov    ecx,0x8
c001f2d3:	c0 e8 03             	shr    al,0x3
c001f2d6:	83 e0 07             	and    eax,0x7
c001f2d9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2dd:	99                   	cdq    
c001f2de:	f7 f9                	idiv   ecx
c001f2e0:	89 34 d5 84 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf07c],esi
c001f2e7:	89 3c d5 88 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf078],edi
c001f2ee:	58                   	pop    eax
c001f2ef:	5e                   	pop    esi
c001f2f0:	5f                   	pop    edi
c001f2f1:	c3                   	ret    

c001f2f2 <Vm::fpuPush(unsigned long long)>:
c001f2f2:	a0 81 0f 03 c0       	mov    al,ds:0xc0030f81
c001f2f7:	c0 e8 03             	shr    al,0x3
c001f2fa:	83 e0 07             	and    eax,0x7
c001f2fd:	83 c0 07             	add    eax,0x7
c001f300:	88 c2                	mov    dl,al
c001f302:	83 e0 07             	and    eax,0x7
c001f305:	83 e2 07             	and    edx,0x7
c001f308:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f30f:	8a 15 81 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f81
c001f315:	83 e2 c7             	and    edx,0xffffffc7
c001f318:	09 ca                	or     edx,ecx
c001f31a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f31e:	88 15 81 0f 03 c0    	mov    BYTE PTR ds:0xc0030f81,dl
c001f324:	89 0c c5 88 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf078],ecx
c001f32b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f32f:	89 14 c5 84 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf07c],edx
c001f336:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001f33b:	83 f8 08             	cmp    eax,0x8
c001f33e:	75 08                	jne    c001f348 <Vm::fpuPush(unsigned long long)+0x56>
c001f340:	80 0d 80 0f 03 c0 40 	or     BYTE PTR ds:0xc0030f80,0x40
c001f347:	c3                   	ret    
c001f348:	40                   	inc    eax
c001f349:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c001f34e:	c3                   	ret    

c001f34f <Vm::fpuPop()>:
c001f34f:	8a 0d 81 0f 03 c0    	mov    cl,BYTE PTR ds:0xc0030f81
c001f355:	53                   	push   ebx
c001f356:	c0 e9 03             	shr    cl,0x3
c001f359:	8a 1d 81 0f 03 c0    	mov    bl,BYTE PTR ds:0xc0030f81
c001f35f:	83 e1 07             	and    ecx,0x7
c001f362:	83 e3 c7             	and    ebx,0xffffffc7
c001f365:	8b 04 cd 84 0f 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf07c]
c001f36c:	8b 14 cd 88 0f 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf078]
c001f373:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f37a:	83 e1 38             	and    ecx,0x38
c001f37d:	09 d9                	or     ecx,ebx
c001f37f:	88 0d 81 0f 03 c0    	mov    BYTE PTR ds:0xc0030f81,cl
c001f385:	8b 0d c4 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fc4
c001f38b:	85 c9                	test   ecx,ecx
c001f38d:	74 09                	je     c001f398 <Vm::fpuPop()+0x49>
c001f38f:	49                   	dec    ecx
c001f390:	89 0d c4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc4,ecx
c001f396:	eb 07                	jmp    c001f39f <Vm::fpuPop()+0x50>
c001f398:	80 0d 80 0f 03 c0 40 	or     BYTE PTR ds:0xc0030f80,0x40
c001f39f:	5b                   	pop    ebx
c001f3a0:	c3                   	ret    

c001f3a1 <Vm::x87Handler(regs*)>:
c001f3a1:	55                   	push   ebp
c001f3a2:	57                   	push   edi
c001f3a3:	56                   	push   esi
c001f3a4:	53                   	push   ebx
c001f3a5:	83 ec 1c             	sub    esp,0x1c
c001f3a8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f3ac:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f3b1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f3b4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f3bc:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f3c0:	50                   	push   eax
c001f3c1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f3c5:	50                   	push   eax
c001f3c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f3ca:	50                   	push   eax
c001f3cb:	53                   	push   ebx
c001f3cc:	e8 97 a1 ff ff       	call   c0019568 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f3d1:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f3d4:	83 c4 10             	add    esp,0x10
c001f3d7:	89 c6                	mov    esi,eax
c001f3d9:	80 fa d9             	cmp    dl,0xd9
c001f3dc:	0f 85 52 01 00 00    	jne    c001f534 <Vm::x87Handler(regs*)+0x193>
c001f3e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3e6:	8d 50 20             	lea    edx,[eax+0x20]
c001f3e9:	80 fa 0e             	cmp    dl,0xe
c001f3ec:	0f 87 86 00 00 00    	ja     c001f478 <Vm::x87Handler(regs*)+0xd7>
c001f3f2:	0f b6 d2             	movzx  edx,dl
c001f3f5:	ff 24 95 34 be 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd41cc]
c001f3fc:	e8 e7 fc ff ff       	call   c001f0e8 <Vm::fpuGet0()>
c001f401:	eb 05                	jmp    c001f408 <Vm::x87Handler(regs*)+0x67>
c001f403:	e8 e5 fc ff ff       	call   c001f0ed <Vm::fpuGet1()>
c001f408:	57                   	push   edi
c001f409:	57                   	push   edi
c001f40a:	52                   	push   edx
c001f40b:	50                   	push   eax
c001f40c:	e8 e1 fe ff ff       	call   c001f2f2 <Vm::fpuPush(unsigned long long)>
c001f411:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f415:	83 c4 10             	add    esp,0x10
c001f418:	b0 01                	mov    al,0x1
c001f41a:	e9 e3 09 00 00       	jmp    c001fe02 <Vm::x87Handler(regs*)+0xa61>
c001f41f:	83 ec 0c             	sub    esp,0xc
c001f422:	6a 00                	push   0x0
c001f424:	e8 3b fe ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f429:	59                   	pop    ecx
c001f42a:	5e                   	pop    esi
c001f42b:	52                   	push   edx
c001f42c:	50                   	push   eax
c001f42d:	e8 c2 fd ff ff       	call   c001f1f4 <Vm::fpuChs(unsigned long long)>
c001f432:	eb 13                	jmp    c001f447 <Vm::x87Handler(regs*)+0xa6>
c001f434:	83 ec 0c             	sub    esp,0xc
c001f437:	6a 00                	push   0x0
c001f439:	e8 26 fe ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f43e:	5f                   	pop    edi
c001f43f:	5d                   	pop    ebp
c001f440:	52                   	push   edx
c001f441:	50                   	push   eax
c001f442:	e8 a4 fd ff ff       	call   c001f1eb <Vm::fpuAbs(unsigned long long)>
c001f447:	83 c4 0c             	add    esp,0xc
c001f44a:	52                   	push   edx
c001f44b:	50                   	push   eax
c001f44c:	6a 00                	push   0x0
c001f44e:	e8 54 fe ff ff       	call   c001f2a7 <Vm::fpuSetReg(int, unsigned long long)>
c001f453:	eb bc                	jmp    c001f411 <Vm::x87Handler(regs*)+0x70>
c001f455:	e8 d3 fc ff ff       	call   c001f12d <Vm::fpuGetLog210()>
c001f45a:	eb ac                	jmp    c001f408 <Vm::x87Handler(regs*)+0x67>
c001f45c:	e8 9c fc ff ff       	call   c001f0fd <Vm::fpuGetLog2E()>
c001f461:	eb a5                	jmp    c001f408 <Vm::x87Handler(regs*)+0x67>
c001f463:	e8 8d fc ff ff       	call   c001f0f5 <Vm::fpuGetPi()>
c001f468:	eb 9e                	jmp    c001f408 <Vm::x87Handler(regs*)+0x67>
c001f46a:	e8 d6 fc ff ff       	call   c001f145 <Vm::fpuGetLog102()>
c001f46f:	eb 97                	jmp    c001f408 <Vm::x87Handler(regs*)+0x67>
c001f471:	e8 9f fc ff ff       	call   c001f115 <Vm::fpuGetLogE2()>
c001f476:	eb 90                	jmp    c001f408 <Vm::x87Handler(regs*)+0x67>
c001f478:	8d 50 40             	lea    edx,[eax+0x40]
c001f47b:	80 fa 07             	cmp    dl,0x7
c001f47e:	77 15                	ja     c001f495 <Vm::x87Handler(regs*)+0xf4>
c001f480:	83 ec 0c             	sub    esp,0xc
c001f483:	2d c0 00 00 00       	sub    eax,0xc0
c001f488:	50                   	push   eax
c001f489:	e8 d6 fd ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f48e:	59                   	pop    ecx
c001f48f:	5e                   	pop    esi
c001f490:	e9 75 ff ff ff       	jmp    c001f40a <Vm::x87Handler(regs*)+0x69>
c001f495:	8d 50 38             	lea    edx,[eax+0x38]
c001f498:	80 fa 07             	cmp    dl,0x7
c001f49b:	77 3c                	ja     c001f4d9 <Vm::x87Handler(regs*)+0x138>
c001f49d:	83 ec 0c             	sub    esp,0xc
c001f4a0:	2d c8 00 00 00       	sub    eax,0xc8
c001f4a5:	50                   	push   eax
c001f4a6:	e8 b9 fd ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f4ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4b2:	89 c6                	mov    esi,eax
c001f4b4:	89 d7                	mov    edi,edx
c001f4b6:	e8 a9 fd ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f4bb:	83 c4 0c             	add    esp,0xc
c001f4be:	52                   	push   edx
c001f4bf:	50                   	push   eax
c001f4c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4c4:	2d c8 00 00 00       	sub    eax,0xc8
c001f4c9:	50                   	push   eax
c001f4ca:	e8 d8 fd ff ff       	call   c001f2a7 <Vm::fpuSetReg(int, unsigned long long)>
c001f4cf:	83 c4 0c             	add    esp,0xc
c001f4d2:	57                   	push   edi
c001f4d3:	56                   	push   esi
c001f4d4:	e9 73 ff ff ff       	jmp    c001f44c <Vm::x87Handler(regs*)+0xab>
c001f4d9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4dd:	84 d2                	test   dl,dl
c001f4df:	75 0f                	jne    c001f4f0 <Vm::x87Handler(regs*)+0x14f>
c001f4e1:	83 ec 0c             	sub    esp,0xc
c001f4e4:	ff 36                	push   DWORD PTR [esi]
c001f4e6:	e8 c8 fa ff ff       	call   c001efb3 <Vm::fpu32ToInternal(unsigned int)>
c001f4eb:	e9 bf 00 00 00       	jmp    c001f5af <Vm::x87Handler(regs*)+0x20e>
c001f4f0:	80 fa 03             	cmp    dl,0x3
c001f4f3:	75 13                	jne    c001f508 <Vm::x87Handler(regs*)+0x167>
c001f4f5:	e8 55 fe ff ff       	call   c001f34f <Vm::fpuPop()>
c001f4fa:	55                   	push   ebp
c001f4fb:	55                   	push   ebp
c001f4fc:	52                   	push   edx
c001f4fd:	50                   	push   eax
c001f4fe:	e8 4c fa ff ff       	call   c001ef4f <Vm::fpuInternalTo32(unsigned long long)>
c001f503:	e9 88 00 00 00       	jmp    c001f590 <Vm::x87Handler(regs*)+0x1ef>
c001f508:	80 fa 05             	cmp    dl,0x5
c001f50b:	75 0e                	jne    c001f51b <Vm::x87Handler(regs*)+0x17a>
c001f50d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f510:	66 a3 82 0f 03 c0    	mov    ds:0xc0030f82,ax
c001f516:	e9 df 00 00 00       	jmp    c001f5fa <Vm::x87Handler(regs*)+0x259>
c001f51b:	31 c0                	xor    eax,eax
c001f51d:	80 fa 07             	cmp    dl,0x7
c001f520:	0f 85 dc 08 00 00    	jne    c001fe02 <Vm::x87Handler(regs*)+0xa61>
c001f526:	66 a1 82 0f 03 c0    	mov    ax,ds:0xc0030f82
c001f52c:	66 89 06             	mov    WORD PTR [esi],ax
c001f52f:	e9 c6 00 00 00       	jmp    c001f5fa <Vm::x87Handler(regs*)+0x259>
c001f534:	80 fa d8             	cmp    dl,0xd8
c001f537:	0f 84 c9 00 00 00    	je     c001f606 <Vm::x87Handler(regs*)+0x265>
c001f53d:	80 fa dc             	cmp    dl,0xdc
c001f540:	0f 84 0d 02 00 00    	je     c001f753 <Vm::x87Handler(regs*)+0x3b2>
c001f546:	80 fa de             	cmp    dl,0xde
c001f549:	0f 84 cd 02 00 00    	je     c001f81c <Vm::x87Handler(regs*)+0x47b>
c001f54f:	80 fa dd             	cmp    dl,0xdd
c001f552:	0f 84 5f 04 00 00    	je     c001f9b7 <Vm::x87Handler(regs*)+0x616>
c001f558:	80 fa da             	cmp    dl,0xda
c001f55b:	0f 84 24 05 00 00    	je     c001fa85 <Vm::x87Handler(regs*)+0x6e4>
c001f561:	80 fa df             	cmp    dl,0xdf
c001f564:	0f 84 68 05 00 00    	je     c001fad2 <Vm::x87Handler(regs*)+0x731>
c001f56a:	31 c0                	xor    eax,eax
c001f56c:	80 fa db             	cmp    dl,0xdb
c001f56f:	0f 85 8d 08 00 00    	jne    c001fe02 <Vm::x87Handler(regs*)+0xa61>
c001f575:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f579:	80 fa 03             	cmp    dl,0x3
c001f57c:	0f 85 70 06 00 00    	jne    c001fbf2 <Vm::x87Handler(regs*)+0x851>
c001f582:	e8 c8 fd ff ff       	call   c001f34f <Vm::fpuPop()>
c001f587:	55                   	push   ebp
c001f588:	55                   	push   ebp
c001f589:	52                   	push   edx
c001f58a:	50                   	push   eax
c001f58b:	e8 71 fa ff ff       	call   c001f001 <Vm::fpuFloatToLong(unsigned long long)>
c001f590:	83 c4 10             	add    esp,0x10
c001f593:	89 06                	mov    DWORD PTR [esi],eax
c001f595:	eb 63                	jmp    c001f5fa <Vm::x87Handler(regs*)+0x259>
c001f597:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f59b:	84 d2                	test   dl,dl
c001f59d:	0f 85 e6 05 00 00    	jne    c001fb89 <Vm::x87Handler(regs*)+0x7e8>
c001f5a3:	57                   	push   edi
c001f5a4:	57                   	push   edi
c001f5a5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5a8:	ff 36                	push   DWORD PTR [esi]
c001f5aa:	e8 49 fa ff ff       	call   c001eff8 <Vm::fpu64ToInternal(unsigned long long)>
c001f5af:	5e                   	pop    esi
c001f5b0:	5f                   	pop    edi
c001f5b1:	52                   	push   edx
c001f5b2:	50                   	push   eax
c001f5b3:	e8 3a fd ff ff       	call   c001f2f2 <Vm::fpuPush(unsigned long long)>
c001f5b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5bc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5bf:	e9 51 fe ff ff       	jmp    c001f415 <Vm::x87Handler(regs*)+0x74>
c001f5c4:	80 fa 03             	cmp    dl,0x3
c001f5c7:	0f 85 d7 06 00 00    	jne    c001fca4 <Vm::x87Handler(regs*)+0x903>
c001f5cd:	57                   	push   edi
c001f5ce:	57                   	push   edi
c001f5cf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5d2:	ff 36                	push   DWORD PTR [esi]
c001f5d4:	e8 1f fa ff ff       	call   c001eff8 <Vm::fpu64ToInternal(unsigned long long)>
c001f5d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5e0:	89 c6                	mov    esi,eax
c001f5e2:	89 d7                	mov    edi,edx
c001f5e4:	e8 7b fc ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f5e9:	57                   	push   edi
c001f5ea:	56                   	push   esi
c001f5eb:	52                   	push   edx
c001f5ec:	50                   	push   eax
c001f5ed:	e8 95 fb ff ff       	call   c001f187 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5f2:	83 c4 20             	add    esp,0x20
c001f5f5:	e8 55 fd ff ff       	call   c001f34f <Vm::fpuPop()>
c001f5fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5fe:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f601:	e9 12 fe ff ff       	jmp    c001f418 <Vm::x87Handler(regs*)+0x77>
c001f606:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f60a:	8d 50 40             	lea    edx,[eax+0x40]
c001f60d:	80 fa 07             	cmp    dl,0x7
c001f610:	77 29                	ja     c001f63b <Vm::x87Handler(regs*)+0x29a>
c001f612:	83 ec 0c             	sub    esp,0xc
c001f615:	2d c0 00 00 00       	sub    eax,0xc0
c001f61a:	50                   	push   eax
c001f61b:	e8 44 fc ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f620:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f627:	89 c6                	mov    esi,eax
c001f629:	89 d7                	mov    edi,edx
c001f62b:	e8 34 fc ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f630:	57                   	push   edi
c001f631:	56                   	push   esi
c001f632:	52                   	push   edx
c001f633:	50                   	push   eax
c001f634:	e8 a1 fb ff ff       	call   c001f1da <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f639:	eb 2f                	jmp    c001f66a <Vm::x87Handler(regs*)+0x2c9>
c001f63b:	8d 50 38             	lea    edx,[eax+0x38]
c001f63e:	80 fa 07             	cmp    dl,0x7
c001f641:	77 2f                	ja     c001f672 <Vm::x87Handler(regs*)+0x2d1>
c001f643:	83 ec 0c             	sub    esp,0xc
c001f646:	2d c8 00 00 00       	sub    eax,0xc8
c001f64b:	50                   	push   eax
c001f64c:	e8 13 fc ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f651:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f658:	89 c6                	mov    esi,eax
c001f65a:	89 d7                	mov    edi,edx
c001f65c:	e8 03 fc ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f661:	57                   	push   edi
c001f662:	56                   	push   esi
c001f663:	52                   	push   edx
c001f664:	50                   	push   eax
c001f665:	e8 a9 fb ff ff       	call   c001f213 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f66a:	83 c4 1c             	add    esp,0x1c
c001f66d:	e9 d8 fd ff ff       	jmp    c001f44a <Vm::x87Handler(regs*)+0xa9>
c001f672:	8d 50 30             	lea    edx,[eax+0x30]
c001f675:	80 fa 07             	cmp    dl,0x7
c001f678:	77 0d                	ja     c001f687 <Vm::x87Handler(regs*)+0x2e6>
c001f67a:	83 ec 0c             	sub    esp,0xc
c001f67d:	2d d0 00 00 00       	sub    eax,0xd0
c001f682:	e9 99 03 00 00       	jmp    c001fa20 <Vm::x87Handler(regs*)+0x67f>
c001f687:	8d 50 28             	lea    edx,[eax+0x28]
c001f68a:	80 fa 07             	cmp    dl,0x7
c001f68d:	77 0d                	ja     c001f69c <Vm::x87Handler(regs*)+0x2fb>
c001f68f:	83 ec 0c             	sub    esp,0xc
c001f692:	2d d8 00 00 00       	sub    eax,0xd8
c001f697:	e9 c0 03 00 00       	jmp    c001fa5c <Vm::x87Handler(regs*)+0x6bb>
c001f69c:	8d 50 20             	lea    edx,[eax+0x20]
c001f69f:	80 fa 07             	cmp    dl,0x7
c001f6a2:	77 1b                	ja     c001f6bf <Vm::x87Handler(regs*)+0x31e>
c001f6a4:	83 ec 0c             	sub    esp,0xc
c001f6a7:	2d e0 00 00 00       	sub    eax,0xe0
c001f6ac:	50                   	push   eax
c001f6ad:	e8 b2 fb ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f6b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6b9:	89 c6                	mov    esi,eax
c001f6bb:	89 d7                	mov    edi,edx
c001f6bd:	eb 22                	jmp    c001f6e1 <Vm::x87Handler(regs*)+0x340>
c001f6bf:	8d 50 18             	lea    edx,[eax+0x18]
c001f6c2:	80 fa 07             	cmp    dl,0x7
c001f6c5:	77 2d                	ja     c001f6f4 <Vm::x87Handler(regs*)+0x353>
c001f6c7:	83 ec 0c             	sub    esp,0xc
c001f6ca:	6a 00                	push   0x0
c001f6cc:	e8 93 fb ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f6d1:	89 c6                	mov    esi,eax
c001f6d3:	89 d7                	mov    edi,edx
c001f6d5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6d9:	2d e8 00 00 00       	sub    eax,0xe8
c001f6de:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6e1:	e8 7e fb ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f6e6:	57                   	push   edi
c001f6e7:	56                   	push   esi
c001f6e8:	52                   	push   edx
c001f6e9:	50                   	push   eax
c001f6ea:	e8 15 fb ff ff       	call   c001f204 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6ef:	e9 76 ff ff ff       	jmp    c001f66a <Vm::x87Handler(regs*)+0x2c9>
c001f6f4:	8d 50 10             	lea    edx,[eax+0x10]
c001f6f7:	80 fa 07             	cmp    dl,0x7
c001f6fa:	77 1b                	ja     c001f717 <Vm::x87Handler(regs*)+0x376>
c001f6fc:	83 ec 0c             	sub    esp,0xc
c001f6ff:	2d f0 00 00 00       	sub    eax,0xf0
c001f704:	50                   	push   eax
c001f705:	e8 5a fb ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f70a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f711:	89 c6                	mov    esi,eax
c001f713:	89 d7                	mov    edi,edx
c001f715:	eb 22                	jmp    c001f739 <Vm::x87Handler(regs*)+0x398>
c001f717:	3c f7                	cmp    al,0xf7
c001f719:	0f 86 d1 03 00 00    	jbe    c001faf0 <Vm::x87Handler(regs*)+0x74f>
c001f71f:	83 ec 0c             	sub    esp,0xc
c001f722:	6a 00                	push   0x0
c001f724:	e8 3b fb ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f729:	89 c6                	mov    esi,eax
c001f72b:	89 d7                	mov    edi,edx
c001f72d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f731:	2d f8 00 00 00       	sub    eax,0xf8
c001f736:	89 04 24             	mov    DWORD PTR [esp],eax
c001f739:	e8 26 fb ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f73e:	57                   	push   edi
c001f73f:	56                   	push   esi
c001f740:	52                   	push   edx
c001f741:	50                   	push   eax
c001f742:	e8 eb fa ff ff       	call   c001f232 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f747:	83 c4 1c             	add    esp,0x1c
c001f74a:	52                   	push   edx
c001f74b:	50                   	push   eax
c001f74c:	6a 00                	push   0x0
c001f74e:	e9 51 02 00 00       	jmp    c001f9a4 <Vm::x87Handler(regs*)+0x603>
c001f753:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f757:	8d 50 40             	lea    edx,[eax+0x40]
c001f75a:	80 fa 07             	cmp    dl,0x7
c001f75d:	77 37                	ja     c001f796 <Vm::x87Handler(regs*)+0x3f5>
c001f75f:	83 ec 0c             	sub    esp,0xc
c001f762:	2d c0 00 00 00       	sub    eax,0xc0
c001f767:	50                   	push   eax
c001f768:	e8 f7 fa ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f76d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f774:	89 c6                	mov    esi,eax
c001f776:	89 d7                	mov    edi,edx
c001f778:	e8 e7 fa ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f77d:	57                   	push   edi
c001f77e:	56                   	push   esi
c001f77f:	52                   	push   edx
c001f780:	50                   	push   eax
c001f781:	e8 54 fa ff ff       	call   c001f1da <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f786:	83 c4 1c             	add    esp,0x1c
c001f789:	52                   	push   edx
c001f78a:	50                   	push   eax
c001f78b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f78f:	2d c0 00 00 00       	sub    eax,0xc0
c001f794:	eb 3d                	jmp    c001f7d3 <Vm::x87Handler(regs*)+0x432>
c001f796:	8d 50 38             	lea    edx,[eax+0x38]
c001f799:	80 fa 07             	cmp    dl,0x7
c001f79c:	77 3b                	ja     c001f7d9 <Vm::x87Handler(regs*)+0x438>
c001f79e:	83 ec 0c             	sub    esp,0xc
c001f7a1:	2d c8 00 00 00       	sub    eax,0xc8
c001f7a6:	50                   	push   eax
c001f7a7:	e8 b8 fa ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f7ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7b3:	89 c6                	mov    esi,eax
c001f7b5:	89 d7                	mov    edi,edx
c001f7b7:	e8 a8 fa ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f7bc:	57                   	push   edi
c001f7bd:	56                   	push   esi
c001f7be:	52                   	push   edx
c001f7bf:	50                   	push   eax
c001f7c0:	e8 4e fa ff ff       	call   c001f213 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7c5:	83 c4 1c             	add    esp,0x1c
c001f7c8:	52                   	push   edx
c001f7c9:	50                   	push   eax
c001f7ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7ce:	2d c8 00 00 00       	sub    eax,0xc8
c001f7d3:	50                   	push   eax
c001f7d4:	e9 75 fc ff ff       	jmp    c001f44e <Vm::x87Handler(regs*)+0xad>
c001f7d9:	83 c0 18             	add    eax,0x18
c001f7dc:	3c 07                	cmp    al,0x7
c001f7de:	0f 87 3b 04 00 00    	ja     c001fc1f <Vm::x87Handler(regs*)+0x87e>
c001f7e4:	83 ec 0c             	sub    esp,0xc
c001f7e7:	6a 00                	push   0x0
c001f7e9:	e8 76 fa ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f7ee:	89 c6                	mov    esi,eax
c001f7f0:	89 d7                	mov    edi,edx
c001f7f2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7f6:	2d e8 00 00 00       	sub    eax,0xe8
c001f7fb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7fe:	e8 61 fa ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f803:	57                   	push   edi
c001f804:	56                   	push   esi
c001f805:	52                   	push   edx
c001f806:	50                   	push   eax
c001f807:	e8 f8 f9 ff ff       	call   c001f204 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f80c:	83 c4 1c             	add    esp,0x1c
c001f80f:	52                   	push   edx
c001f810:	50                   	push   eax
c001f811:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f815:	2d e8 00 00 00       	sub    eax,0xe8
c001f81a:	eb b7                	jmp    c001f7d3 <Vm::x87Handler(regs*)+0x432>
c001f81c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f820:	8d 50 40             	lea    edx,[eax+0x40]
c001f823:	80 fa 07             	cmp    dl,0x7
c001f826:	77 3a                	ja     c001f862 <Vm::x87Handler(regs*)+0x4c1>
c001f828:	83 ec 0c             	sub    esp,0xc
c001f82b:	2d c0 00 00 00       	sub    eax,0xc0
c001f830:	50                   	push   eax
c001f831:	e8 2e fa ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f836:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f83d:	89 c6                	mov    esi,eax
c001f83f:	89 d7                	mov    edi,edx
c001f841:	e8 1e fa ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f846:	57                   	push   edi
c001f847:	56                   	push   esi
c001f848:	52                   	push   edx
c001f849:	50                   	push   eax
c001f84a:	e8 8b f9 ff ff       	call   c001f1da <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f84f:	83 c4 1c             	add    esp,0x1c
c001f852:	52                   	push   edx
c001f853:	50                   	push   eax
c001f854:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f858:	2d c0 00 00 00       	sub    eax,0xc0
c001f85d:	e9 9e 01 00 00       	jmp    c001fa00 <Vm::x87Handler(regs*)+0x65f>
c001f862:	8d 50 20             	lea    edx,[eax+0x20]
c001f865:	80 fa 07             	cmp    dl,0x7
c001f868:	77 3a                	ja     c001f8a4 <Vm::x87Handler(regs*)+0x503>
c001f86a:	83 ec 0c             	sub    esp,0xc
c001f86d:	2d e0 00 00 00       	sub    eax,0xe0
c001f872:	50                   	push   eax
c001f873:	e8 ec f9 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f878:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f87f:	89 c6                	mov    esi,eax
c001f881:	89 d7                	mov    edi,edx
c001f883:	e8 dc f9 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f888:	57                   	push   edi
c001f889:	56                   	push   esi
c001f88a:	52                   	push   edx
c001f88b:	50                   	push   eax
c001f88c:	e8 73 f9 ff ff       	call   c001f204 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f891:	83 c4 1c             	add    esp,0x1c
c001f894:	52                   	push   edx
c001f895:	50                   	push   eax
c001f896:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f89a:	2d e0 00 00 00       	sub    eax,0xe0
c001f89f:	e9 5c 01 00 00       	jmp    c001fa00 <Vm::x87Handler(regs*)+0x65f>
c001f8a4:	8d 50 18             	lea    edx,[eax+0x18]
c001f8a7:	80 fa 07             	cmp    dl,0x7
c001f8aa:	77 3b                	ja     c001f8e7 <Vm::x87Handler(regs*)+0x546>
c001f8ac:	83 ec 0c             	sub    esp,0xc
c001f8af:	6a 00                	push   0x0
c001f8b1:	e8 ae f9 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f8b6:	89 c6                	mov    esi,eax
c001f8b8:	89 d7                	mov    edi,edx
c001f8ba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8be:	2d e8 00 00 00       	sub    eax,0xe8
c001f8c3:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8c6:	e8 99 f9 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f8cb:	57                   	push   edi
c001f8cc:	56                   	push   esi
c001f8cd:	52                   	push   edx
c001f8ce:	50                   	push   eax
c001f8cf:	e8 30 f9 ff ff       	call   c001f204 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8d4:	83 c4 1c             	add    esp,0x1c
c001f8d7:	52                   	push   edx
c001f8d8:	50                   	push   eax
c001f8d9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8dd:	2d e8 00 00 00       	sub    eax,0xe8
c001f8e2:	e9 19 01 00 00       	jmp    c001fa00 <Vm::x87Handler(regs*)+0x65f>
c001f8e7:	8d 50 38             	lea    edx,[eax+0x38]
c001f8ea:	80 fa 07             	cmp    dl,0x7
c001f8ed:	77 37                	ja     c001f926 <Vm::x87Handler(regs*)+0x585>
c001f8ef:	83 ec 0c             	sub    esp,0xc
c001f8f2:	2d c8 00 00 00       	sub    eax,0xc8
c001f8f7:	50                   	push   eax
c001f8f8:	e8 67 f9 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f8fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f904:	89 c6                	mov    esi,eax
c001f906:	89 d7                	mov    edi,edx
c001f908:	e8 57 f9 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f90d:	57                   	push   edi
c001f90e:	56                   	push   esi
c001f90f:	52                   	push   edx
c001f910:	50                   	push   eax
c001f911:	e8 fd f8 ff ff       	call   c001f213 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f916:	83 c4 1c             	add    esp,0x1c
c001f919:	52                   	push   edx
c001f91a:	50                   	push   eax
c001f91b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f91f:	2d c8 00 00 00       	sub    eax,0xc8
c001f924:	eb 7d                	jmp    c001f9a3 <Vm::x87Handler(regs*)+0x602>
c001f926:	3c f7                	cmp    al,0xf7
c001f928:	76 38                	jbe    c001f962 <Vm::x87Handler(regs*)+0x5c1>
c001f92a:	83 ec 0c             	sub    esp,0xc
c001f92d:	6a 00                	push   0x0
c001f92f:	e8 30 f9 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f934:	89 c6                	mov    esi,eax
c001f936:	89 d7                	mov    edi,edx
c001f938:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f93c:	2d f8 00 00 00       	sub    eax,0xf8
c001f941:	89 04 24             	mov    DWORD PTR [esp],eax
c001f944:	e8 1b f9 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f949:	57                   	push   edi
c001f94a:	56                   	push   esi
c001f94b:	52                   	push   edx
c001f94c:	50                   	push   eax
c001f94d:	e8 e0 f8 ff ff       	call   c001f232 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f952:	83 c4 1c             	add    esp,0x1c
c001f955:	52                   	push   edx
c001f956:	50                   	push   eax
c001f957:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f95b:	2d f8 00 00 00       	sub    eax,0xf8
c001f960:	eb 41                	jmp    c001f9a3 <Vm::x87Handler(regs*)+0x602>
c001f962:	8d 50 10             	lea    edx,[eax+0x10]
c001f965:	80 fa 07             	cmp    dl,0x7
c001f968:	0f 87 5a 01 00 00    	ja     c001fac8 <Vm::x87Handler(regs*)+0x727>
c001f96e:	83 ec 0c             	sub    esp,0xc
c001f971:	2d f0 00 00 00       	sub    eax,0xf0
c001f976:	50                   	push   eax
c001f977:	e8 e8 f8 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f97c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f983:	89 c6                	mov    esi,eax
c001f985:	89 d7                	mov    edi,edx
c001f987:	e8 d8 f8 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f98c:	57                   	push   edi
c001f98d:	56                   	push   esi
c001f98e:	52                   	push   edx
c001f98f:	50                   	push   eax
c001f990:	e8 9d f8 ff ff       	call   c001f232 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f995:	83 c4 1c             	add    esp,0x1c
c001f998:	52                   	push   edx
c001f999:	50                   	push   eax
c001f99a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f99e:	2d f0 00 00 00       	sub    eax,0xf0
c001f9a3:	50                   	push   eax
c001f9a4:	e8 fe f8 ff ff       	call   c001f2a7 <Vm::fpuSetReg(int, unsigned long long)>
c001f9a9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9ad:	e8 9d f9 ff ff       	call   c001f34f <Vm::fpuPop()>
c001f9b2:	e9 5e fa ff ff       	jmp    c001f415 <Vm::x87Handler(regs*)+0x74>
c001f9b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9bb:	8d 50 30             	lea    edx,[eax+0x30]
c001f9be:	80 fa 07             	cmp    dl,0x7
c001f9c1:	77 1d                	ja     c001f9e0 <Vm::x87Handler(regs*)+0x63f>
c001f9c3:	83 ec 0c             	sub    esp,0xc
c001f9c6:	6a 00                	push   0x0
c001f9c8:	e8 97 f8 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f9cd:	83 c4 0c             	add    esp,0xc
c001f9d0:	52                   	push   edx
c001f9d1:	50                   	push   eax
c001f9d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9d6:	2d d0 00 00 00       	sub    eax,0xd0
c001f9db:	e9 f3 fd ff ff       	jmp    c001f7d3 <Vm::x87Handler(regs*)+0x432>
c001f9e0:	8d 50 28             	lea    edx,[eax+0x28]
c001f9e3:	80 fa 07             	cmp    dl,0x7
c001f9e6:	77 28                	ja     c001fa10 <Vm::x87Handler(regs*)+0x66f>
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	6a 00                	push   0x0
c001f9ed:	e8 72 f8 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001f9f2:	83 c4 0c             	add    esp,0xc
c001f9f5:	52                   	push   edx
c001f9f6:	50                   	push   eax
c001f9f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9fb:	2d d8 00 00 00       	sub    eax,0xd8
c001fa00:	50                   	push   eax
c001fa01:	e8 a1 f8 ff ff       	call   c001f2a7 <Vm::fpuSetReg(int, unsigned long long)>
c001fa06:	e8 44 f9 ff ff       	call   c001f34f <Vm::fpuPop()>
c001fa0b:	e9 01 fa ff ff       	jmp    c001f411 <Vm::x87Handler(regs*)+0x70>
c001fa10:	8d 50 20             	lea    edx,[eax+0x20]
c001fa13:	80 fa 07             	cmp    dl,0x7
c001fa16:	77 30                	ja     c001fa48 <Vm::x87Handler(regs*)+0x6a7>
c001fa18:	83 ec 0c             	sub    esp,0xc
c001fa1b:	2d e0 00 00 00       	sub    eax,0xe0
c001fa20:	50                   	push   eax
c001fa21:	e8 3e f8 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fa26:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa2d:	89 c6                	mov    esi,eax
c001fa2f:	89 d7                	mov    edi,edx
c001fa31:	e8 2e f8 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fa36:	57                   	push   edi
c001fa37:	56                   	push   esi
c001fa38:	52                   	push   edx
c001fa39:	50                   	push   eax
c001fa3a:	e8 48 f7 ff ff       	call   c001f187 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa3f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa43:	e9 54 02 00 00       	jmp    c001fc9c <Vm::x87Handler(regs*)+0x8fb>
c001fa48:	8d 50 18             	lea    edx,[eax+0x18]
c001fa4b:	80 fa 07             	cmp    dl,0x7
c001fa4e:	0f 87 43 fb ff ff    	ja     c001f597 <Vm::x87Handler(regs*)+0x1f6>
c001fa54:	83 ec 0c             	sub    esp,0xc
c001fa57:	2d e8 00 00 00       	sub    eax,0xe8
c001fa5c:	50                   	push   eax
c001fa5d:	e8 02 f8 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fa62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa69:	89 c6                	mov    esi,eax
c001fa6b:	89 d7                	mov    edi,edx
c001fa6d:	e8 f2 f7 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fa72:	57                   	push   edi
c001fa73:	56                   	push   esi
c001fa74:	52                   	push   edx
c001fa75:	50                   	push   eax
c001fa76:	e8 0c f7 ff ff       	call   c001f187 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa7b:	83 c4 20             	add    esp,0x20
c001fa7e:	e8 cc f8 ff ff       	call   c001f34f <Vm::fpuPop()>
c001fa83:	eb 62                	jmp    c001fae7 <Vm::x87Handler(regs*)+0x746>
c001fa85:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fa89:	0f 85 0f 01 00 00    	jne    c001fb9e <Vm::x87Handler(regs*)+0x7fd>
c001fa8f:	83 ec 0c             	sub    esp,0xc
c001fa92:	6a 01                	push   0x1
c001fa94:	e8 cb f7 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fa99:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001faa0:	89 c6                	mov    esi,eax
c001faa2:	89 d7                	mov    edi,edx
c001faa4:	e8 bb f7 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001faa9:	57                   	push   edi
c001faaa:	56                   	push   esi
c001faab:	52                   	push   edx
c001faac:	50                   	push   eax
c001faad:	e8 d5 f6 ff ff       	call   c001f187 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fab2:	83 c4 20             	add    esp,0x20
c001fab5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fab9:	e8 91 f8 ff ff       	call   c001f34f <Vm::fpuPop()>
c001fabe:	e8 8c f8 ff ff       	call   c001f34f <Vm::fpuPop()>
c001fac3:	e9 50 f9 ff ff       	jmp    c001f418 <Vm::x87Handler(regs*)+0x77>
c001fac8:	3c d9                	cmp    al,0xd9
c001faca:	0f 85 b5 02 00 00    	jne    c001fd85 <Vm::x87Handler(regs*)+0x9e4>
c001fad0:	eb bd                	jmp    c001fa8f <Vm::x87Handler(regs*)+0x6ee>
c001fad2:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fad6:	0f 85 ea 02 00 00    	jne    c001fdc6 <Vm::x87Handler(regs*)+0xa25>
c001fadc:	0f b7 05 80 0f 03 c0 	movzx  eax,WORD PTR ds:0xc0030f80
c001fae3:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fae7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faeb:	e9 28 f9 ff ff       	jmp    c001f418 <Vm::x87Handler(regs*)+0x77>
c001faf0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001faf4:	84 d2                	test   dl,dl
c001faf6:	75 0f                	jne    c001fb07 <Vm::x87Handler(regs*)+0x766>
c001faf8:	83 ec 0c             	sub    esp,0xc
c001fafb:	ff 36                	push   DWORD PTR [esi]
c001fafd:	e8 b1 f4 ff ff       	call   c001efb3 <Vm::fpu32ToInternal(unsigned int)>
c001fb02:	e9 2c 01 00 00       	jmp    c001fc33 <Vm::x87Handler(regs*)+0x892>
c001fb07:	80 fa 01             	cmp    dl,0x1
c001fb0a:	75 0f                	jne    c001fb1b <Vm::x87Handler(regs*)+0x77a>
c001fb0c:	83 ec 0c             	sub    esp,0xc
c001fb0f:	ff 36                	push   DWORD PTR [esi]
c001fb11:	e8 9d f4 ff ff       	call   c001efb3 <Vm::fpu32ToInternal(unsigned int)>
c001fb16:	e9 81 02 00 00       	jmp    c001fd9c <Vm::x87Handler(regs*)+0x9fb>
c001fb1b:	80 fa 04             	cmp    dl,0x4
c001fb1e:	75 0f                	jne    c001fb2f <Vm::x87Handler(regs*)+0x78e>
c001fb20:	83 ec 0c             	sub    esp,0xc
c001fb23:	ff 36                	push   DWORD PTR [esi]
c001fb25:	e8 89 f4 ff ff       	call   c001efb3 <Vm::fpu32ToInternal(unsigned int)>
c001fb2a:	e9 86 01 00 00       	jmp    c001fcb5 <Vm::x87Handler(regs*)+0x914>
c001fb2f:	80 fa 05             	cmp    dl,0x5
c001fb32:	75 1b                	jne    c001fb4f <Vm::x87Handler(regs*)+0x7ae>
c001fb34:	83 ec 0c             	sub    esp,0xc
c001fb37:	6a 00                	push   0x0
c001fb39:	e8 26 f7 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fb3e:	89 c7                	mov    edi,eax
c001fb40:	89 d5                	mov    ebp,edx
c001fb42:	58                   	pop    eax
c001fb43:	ff 36                	push   DWORD PTR [esi]
c001fb45:	e8 69 f4 ff ff       	call   c001efb3 <Vm::fpu32ToInternal(unsigned int)>
c001fb4a:	e9 a3 01 00 00       	jmp    c001fcf2 <Vm::x87Handler(regs*)+0x951>
c001fb4f:	80 fa 06             	cmp    dl,0x6
c001fb52:	75 0f                	jne    c001fb63 <Vm::x87Handler(regs*)+0x7c2>
c001fb54:	83 ec 0c             	sub    esp,0xc
c001fb57:	ff 36                	push   DWORD PTR [esi]
c001fb59:	e8 55 f4 ff ff       	call   c001efb3 <Vm::fpu32ToInternal(unsigned int)>
c001fb5e:	e9 ae 01 00 00       	jmp    c001fd11 <Vm::x87Handler(regs*)+0x970>
c001fb63:	31 c0                	xor    eax,eax
c001fb65:	80 fa 07             	cmp    dl,0x7
c001fb68:	0f 85 94 02 00 00    	jne    c001fe02 <Vm::x87Handler(regs*)+0xa61>
c001fb6e:	83 ec 0c             	sub    esp,0xc
c001fb71:	6a 00                	push   0x0
c001fb73:	e8 ec f6 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fb78:	89 c7                	mov    edi,eax
c001fb7a:	89 d5                	mov    ebp,edx
c001fb7c:	58                   	pop    eax
c001fb7d:	ff 36                	push   DWORD PTR [esi]
c001fb7f:	e8 2f f4 ff ff       	call   c001efb3 <Vm::fpu32ToInternal(unsigned int)>
c001fb84:	e9 cb 01 00 00       	jmp    c001fd54 <Vm::x87Handler(regs*)+0x9b3>
c001fb89:	80 fa 03             	cmp    dl,0x3
c001fb8c:	0f 85 d3 01 00 00    	jne    c001fd65 <Vm::x87Handler(regs*)+0x9c4>
c001fb92:	e8 b8 f7 ff ff       	call   c001f34f <Vm::fpuPop()>
c001fb97:	51                   	push   ecx
c001fb98:	51                   	push   ecx
c001fb99:	e9 de 01 00 00       	jmp    c001fd7c <Vm::x87Handler(regs*)+0x9db>
c001fb9e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fba2:	80 fa 01             	cmp    dl,0x1
c001fba5:	75 09                	jne    c001fbb0 <Vm::x87Handler(regs*)+0x80f>
c001fba7:	57                   	push   edi
c001fba8:	57                   	push   edi
c001fba9:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbab:	e9 e3 01 00 00       	jmp    c001fd93 <Vm::x87Handler(regs*)+0x9f2>
c001fbb0:	80 fa 04             	cmp    dl,0x4
c001fbb3:	75 12                	jne    c001fbc7 <Vm::x87Handler(regs*)+0x826>
c001fbb5:	31 d2                	xor    edx,edx
c001fbb7:	51                   	push   ecx
c001fbb8:	51                   	push   ecx
c001fbb9:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbbb:	52                   	push   edx
c001fbbc:	50                   	push   eax
c001fbbd:	e8 d0 f4 ff ff       	call   c001f092 <Vm::fpuLongToFloat(long long)>
c001fbc2:	e9 ee 00 00 00       	jmp    c001fcb5 <Vm::x87Handler(regs*)+0x914>
c001fbc7:	31 c0                	xor    eax,eax
c001fbc9:	80 fa 07             	cmp    dl,0x7
c001fbcc:	0f 85 30 02 00 00    	jne    c001fe02 <Vm::x87Handler(regs*)+0xa61>
c001fbd2:	83 ec 0c             	sub    esp,0xc
c001fbd5:	6a 00                	push   0x0
c001fbd7:	e8 88 f6 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fbdc:	89 c7                	mov    edi,eax
c001fbde:	89 d5                	mov    ebp,edx
c001fbe0:	58                   	pop    eax
c001fbe1:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbe3:	5a                   	pop    edx
c001fbe4:	31 d2                	xor    edx,edx
c001fbe6:	52                   	push   edx
c001fbe7:	50                   	push   eax
c001fbe8:	e8 a5 f4 ff ff       	call   c001f092 <Vm::fpuLongToFloat(long long)>
c001fbed:	e9 62 01 00 00       	jmp    c001fd54 <Vm::x87Handler(regs*)+0x9b3>
c001fbf2:	84 d2                	test   dl,dl
c001fbf4:	75 0d                	jne    c001fc03 <Vm::x87Handler(regs*)+0x862>
c001fbf6:	31 d2                	xor    edx,edx
c001fbf8:	55                   	push   ebp
c001fbf9:	55                   	push   ebp
c001fbfa:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbfc:	52                   	push   edx
c001fbfd:	50                   	push   eax
c001fbfe:	e9 d3 01 00 00       	jmp    c001fdd6 <Vm::x87Handler(regs*)+0xa35>
c001fc03:	31 c0                	xor    eax,eax
c001fc05:	80 fa 02             	cmp    dl,0x2
c001fc08:	0f 85 f4 01 00 00    	jne    c001fe02 <Vm::x87Handler(regs*)+0xa61>
c001fc0e:	83 ec 0c             	sub    esp,0xc
c001fc11:	6a 00                	push   0x0
c001fc13:	e8 4c f6 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fc18:	59                   	pop    ecx
c001fc19:	5f                   	pop    edi
c001fc1a:	e9 6a f9 ff ff       	jmp    c001f589 <Vm::x87Handler(regs*)+0x1e8>
c001fc1f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc23:	84 d2                	test   dl,dl
c001fc25:	75 2a                	jne    c001fc51 <Vm::x87Handler(regs*)+0x8b0>
c001fc27:	50                   	push   eax
c001fc28:	50                   	push   eax
c001fc29:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc2c:	ff 36                	push   DWORD PTR [esi]
c001fc2e:	e8 c5 f3 ff ff       	call   c001eff8 <Vm::fpu64ToInternal(unsigned long long)>
c001fc33:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc3a:	89 c6                	mov    esi,eax
c001fc3c:	89 d7                	mov    edi,edx
c001fc3e:	e8 21 f6 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fc43:	57                   	push   edi
c001fc44:	56                   	push   esi
c001fc45:	52                   	push   edx
c001fc46:	50                   	push   eax
c001fc47:	e8 8e f5 ff ff       	call   c001f1da <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc4c:	e9 64 01 00 00       	jmp    c001fdb5 <Vm::x87Handler(regs*)+0xa14>
c001fc51:	80 fa 01             	cmp    dl,0x1
c001fc54:	75 11                	jne    c001fc67 <Vm::x87Handler(regs*)+0x8c6>
c001fc56:	50                   	push   eax
c001fc57:	50                   	push   eax
c001fc58:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc5b:	ff 36                	push   DWORD PTR [esi]
c001fc5d:	e8 96 f3 ff ff       	call   c001eff8 <Vm::fpu64ToInternal(unsigned long long)>
c001fc62:	e9 35 01 00 00       	jmp    c001fd9c <Vm::x87Handler(regs*)+0x9fb>
c001fc67:	80 fa 02             	cmp    dl,0x2
c001fc6a:	0f 85 54 f9 ff ff    	jne    c001f5c4 <Vm::x87Handler(regs*)+0x223>
c001fc70:	55                   	push   ebp
c001fc71:	55                   	push   ebp
c001fc72:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc75:	ff 36                	push   DWORD PTR [esi]
c001fc77:	e8 7c f3 ff ff       	call   c001eff8 <Vm::fpu64ToInternal(unsigned long long)>
c001fc7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc83:	89 c6                	mov    esi,eax
c001fc85:	89 d7                	mov    edi,edx
c001fc87:	e8 d8 f5 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fc8c:	57                   	push   edi
c001fc8d:	56                   	push   esi
c001fc8e:	52                   	push   edx
c001fc8f:	50                   	push   eax
c001fc90:	e8 f2 f4 ff ff       	call   c001f187 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc99:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc9c:	83 c4 20             	add    esp,0x20
c001fc9f:	e9 74 f7 ff ff       	jmp    c001f418 <Vm::x87Handler(regs*)+0x77>
c001fca4:	80 fa 04             	cmp    dl,0x4
c001fca7:	75 2a                	jne    c001fcd3 <Vm::x87Handler(regs*)+0x932>
c001fca9:	51                   	push   ecx
c001fcaa:	51                   	push   ecx
c001fcab:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcae:	ff 36                	push   DWORD PTR [esi]
c001fcb0:	e8 43 f3 ff ff       	call   c001eff8 <Vm::fpu64ToInternal(unsigned long long)>
c001fcb5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcbc:	89 c6                	mov    esi,eax
c001fcbe:	89 d7                	mov    edi,edx
c001fcc0:	e8 9f f5 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fcc5:	57                   	push   edi
c001fcc6:	56                   	push   esi
c001fcc7:	52                   	push   edx
c001fcc8:	50                   	push   eax
c001fcc9:	e8 36 f5 ff ff       	call   c001f204 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcce:	e9 e2 00 00 00       	jmp    c001fdb5 <Vm::x87Handler(regs*)+0xa14>
c001fcd3:	80 fa 05             	cmp    dl,0x5
c001fcd6:	75 28                	jne    c001fd00 <Vm::x87Handler(regs*)+0x95f>
c001fcd8:	83 ec 0c             	sub    esp,0xc
c001fcdb:	6a 00                	push   0x0
c001fcdd:	e8 82 f5 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fce2:	89 c7                	mov    edi,eax
c001fce4:	89 d5                	mov    ebp,edx
c001fce6:	58                   	pop    eax
c001fce7:	5a                   	pop    edx
c001fce8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fceb:	ff 36                	push   DWORD PTR [esi]
c001fced:	e8 06 f3 ff ff       	call   c001eff8 <Vm::fpu64ToInternal(unsigned long long)>
c001fcf2:	83 c4 10             	add    esp,0x10
c001fcf5:	55                   	push   ebp
c001fcf6:	57                   	push   edi
c001fcf7:	52                   	push   edx
c001fcf8:	50                   	push   eax
c001fcf9:	e8 06 f5 ff ff       	call   c001f204 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcfe:	eb 60                	jmp    c001fd60 <Vm::x87Handler(regs*)+0x9bf>
c001fd00:	80 fa 06             	cmp    dl,0x6
c001fd03:	75 2a                	jne    c001fd2f <Vm::x87Handler(regs*)+0x98e>
c001fd05:	51                   	push   ecx
c001fd06:	51                   	push   ecx
c001fd07:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd0a:	ff 36                	push   DWORD PTR [esi]
c001fd0c:	e8 e7 f2 ff ff       	call   c001eff8 <Vm::fpu64ToInternal(unsigned long long)>
c001fd11:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd18:	89 c6                	mov    esi,eax
c001fd1a:	89 d7                	mov    edi,edx
c001fd1c:	e8 43 f5 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fd21:	57                   	push   edi
c001fd22:	56                   	push   esi
c001fd23:	52                   	push   edx
c001fd24:	50                   	push   eax
c001fd25:	e8 08 f5 ff ff       	call   c001f232 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd2a:	e9 86 00 00 00       	jmp    c001fdb5 <Vm::x87Handler(regs*)+0xa14>
c001fd2f:	31 c0                	xor    eax,eax
c001fd31:	80 fa 07             	cmp    dl,0x7
c001fd34:	0f 85 c8 00 00 00    	jne    c001fe02 <Vm::x87Handler(regs*)+0xa61>
c001fd3a:	83 ec 0c             	sub    esp,0xc
c001fd3d:	6a 00                	push   0x0
c001fd3f:	e8 20 f5 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fd44:	89 c7                	mov    edi,eax
c001fd46:	89 d5                	mov    ebp,edx
c001fd48:	58                   	pop    eax
c001fd49:	5a                   	pop    edx
c001fd4a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd4d:	ff 36                	push   DWORD PTR [esi]
c001fd4f:	e8 a4 f2 ff ff       	call   c001eff8 <Vm::fpu64ToInternal(unsigned long long)>
c001fd54:	83 c4 10             	add    esp,0x10
c001fd57:	55                   	push   ebp
c001fd58:	57                   	push   edi
c001fd59:	52                   	push   edx
c001fd5a:	50                   	push   eax
c001fd5b:	e8 d2 f4 ff ff       	call   c001f232 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd60:	83 c4 0c             	add    esp,0xc
c001fd63:	eb 53                	jmp    c001fdb8 <Vm::x87Handler(regs*)+0xa17>
c001fd65:	31 c0                	xor    eax,eax
c001fd67:	80 fa 02             	cmp    dl,0x2
c001fd6a:	0f 85 92 00 00 00    	jne    c001fe02 <Vm::x87Handler(regs*)+0xa61>
c001fd70:	83 ec 0c             	sub    esp,0xc
c001fd73:	6a 00                	push   0x0
c001fd75:	e8 ea f4 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fd7a:	59                   	pop    ecx
c001fd7b:	5f                   	pop    edi
c001fd7c:	52                   	push   edx
c001fd7d:	50                   	push   eax
c001fd7e:	e8 27 f2 ff ff       	call   c001efaa <Vm::fpuInternalTo64(unsigned long long)>
c001fd83:	eb 70                	jmp    c001fdf5 <Vm::x87Handler(regs*)+0xa54>
c001fd85:	31 c0                	xor    eax,eax
c001fd87:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fd8c:	75 74                	jne    c001fe02 <Vm::x87Handler(regs*)+0xa61>
c001fd8e:	50                   	push   eax
c001fd8f:	50                   	push   eax
c001fd90:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fd93:	31 d2                	xor    edx,edx
c001fd95:	52                   	push   edx
c001fd96:	50                   	push   eax
c001fd97:	e8 f6 f2 ff ff       	call   c001f092 <Vm::fpuLongToFloat(long long)>
c001fd9c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fda3:	89 c6                	mov    esi,eax
c001fda5:	89 d7                	mov    edi,edx
c001fda7:	e8 b8 f4 ff ff       	call   c001f264 <Vm::fpuGetReg(int)>
c001fdac:	57                   	push   edi
c001fdad:	56                   	push   esi
c001fdae:	52                   	push   edx
c001fdaf:	50                   	push   eax
c001fdb0:	e8 5e f4 ff ff       	call   c001f213 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdb5:	83 c4 1c             	add    esp,0x1c
c001fdb8:	52                   	push   edx
c001fdb9:	50                   	push   eax
c001fdba:	6a 00                	push   0x0
c001fdbc:	e8 e6 f4 ff ff       	call   c001f2a7 <Vm::fpuSetReg(int, unsigned long long)>
c001fdc1:	e9 f2 f7 ff ff       	jmp    c001f5b8 <Vm::x87Handler(regs*)+0x217>
c001fdc6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fdca:	80 fa 05             	cmp    dl,0x5
c001fdcd:	75 11                	jne    c001fde0 <Vm::x87Handler(regs*)+0xa3f>
c001fdcf:	55                   	push   ebp
c001fdd0:	55                   	push   ebp
c001fdd1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdd4:	ff 36                	push   DWORD PTR [esi]
c001fdd6:	e8 81 f2 ff ff       	call   c001f05c <Vm::fpuULongToFloat(unsigned long long)>
c001fddb:	e9 cf f7 ff ff       	jmp    c001f5af <Vm::x87Handler(regs*)+0x20e>
c001fde0:	31 c0                	xor    eax,eax
c001fde2:	80 fa 07             	cmp    dl,0x7
c001fde5:	75 1b                	jne    c001fe02 <Vm::x87Handler(regs*)+0xa61>
c001fde7:	e8 63 f5 ff ff       	call   c001f34f <Vm::fpuPop()>
c001fdec:	51                   	push   ecx
c001fded:	51                   	push   ecx
c001fdee:	52                   	push   edx
c001fdef:	50                   	push   eax
c001fdf0:	e8 0c f2 ff ff       	call   c001f001 <Vm::fpuFloatToLong(unsigned long long)>
c001fdf5:	83 c4 10             	add    esp,0x10
c001fdf8:	89 06                	mov    DWORD PTR [esi],eax
c001fdfa:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fdfd:	e9 f8 f7 ff ff       	jmp    c001f5fa <Vm::x87Handler(regs*)+0x259>
c001fe02:	83 c4 1c             	add    esp,0x1c
c001fe05:	5b                   	pop    ebx
c001fe06:	5e                   	pop    esi
c001fe07:	5f                   	pop    edi
c001fe08:	5d                   	pop    ebp
c001fe09:	c3                   	ret    

c001fe0a <__static_initialization_and_destruction_0(int, int)>:
c001fe0a:	83 ec 0c             	sub    esp,0xc
c001fe0d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fe12:	75 1a                	jne    c001fe2e <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe14:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fe1c:	75 10                	jne    c001fe2e <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe1e:	83 ec 0c             	sub    esp,0xc
c001fe21:	68 80 0f 03 c0       	push   0xc0030f80
c001fe26:	e8 ff 8c 00 00       	call   c0028b2a <Vm::_FPUState::_FPUState()>
c001fe2b:	83 c4 10             	add    esp,0x10
c001fe2e:	90                   	nop
c001fe2f:	83 c4 0c             	add    esp,0xc
c001fe32:	c3                   	ret    

c001fe33 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fe33:	83 ec 0c             	sub    esp,0xc
c001fe36:	83 ec 08             	sub    esp,0x8
c001fe39:	68 ff ff 00 00       	push   0xffff
c001fe3e:	6a 01                	push   0x1
c001fe40:	e8 c5 ff ff ff       	call   c001fe0a <__static_initialization_and_destruction_0(int, int)>
c001fe45:	83 c4 10             	add    esp,0x10
c001fe48:	83 c4 0c             	add    esp,0xc
c001fe4b:	c3                   	ret    

c001fe4c <FAT::getName()>:
c001fe4c:	b8 70 be 02 c0       	mov    eax,0xc002be70
c001fe51:	c3                   	ret    

c001fe52 <FAT::tell(void*, unsigned long long*)>:
c001fe52:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe57:	75 06                	jne    c001fe5f <FAT::tell(void*, unsigned long long*)+0xd>
c001fe59:	b8 04 00 00 00       	mov    eax,0x4
c001fe5e:	c3                   	ret    
c001fe5f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe64:	75 06                	jne    c001fe6c <FAT::tell(void*, unsigned long long*)+0x1a>
c001fe66:	b8 04 00 00 00       	mov    eax,0x4
c001fe6b:	c3                   	ret    
c001fe6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe70:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fe73:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fe76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe7a:	89 01                	mov    DWORD PTR [ecx],eax
c001fe7c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe7f:	b8 00 00 00 00       	mov    eax,0x0
c001fe84:	c3                   	ret    
c001fe85:	90                   	nop

c001fe86 <FAT::stat(void*, unsigned long long*)>:
c001fe86:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe8b:	75 06                	jne    c001fe93 <FAT::stat(void*, unsigned long long*)+0xd>
c001fe8d:	b8 04 00 00 00       	mov    eax,0x4
c001fe92:	c3                   	ret    
c001fe93:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe98:	75 06                	jne    c001fea0 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fe9a:	b8 04 00 00 00       	mov    eax,0x4
c001fe9f:	c3                   	ret    
c001fea0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fea4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fea7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001feaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001feae:	89 01                	mov    DWORD PTR [ecx],eax
c001feb0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001feb3:	b8 00 00 00 00       	mov    eax,0x0
c001feb8:	c3                   	ret    
c001feb9:	90                   	nop

c001feba <FAT::~FAT()>:
c001feba:	83 ec 0c             	sub    esp,0xc
c001febd:	ba bc be 02 c0       	mov    edx,0xc002bebc
c001fec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec6:	89 10                	mov    DWORD PTR [eax],edx
c001fec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fecc:	83 ec 0c             	sub    esp,0xc
c001fecf:	50                   	push   eax
c001fed0:	e8 3d 2b ff ff       	call   c0012a12 <Filesystem::~Filesystem()>
c001fed5:	83 c4 10             	add    esp,0x10
c001fed8:	90                   	nop
c001fed9:	83 c4 0c             	add    esp,0xc
c001fedc:	c3                   	ret    
c001fedd:	90                   	nop

c001fede <FAT::~FAT()>:
c001fede:	83 ec 0c             	sub    esp,0xc
c001fee1:	83 ec 0c             	sub    esp,0xc
c001fee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee8:	e8 cd ff ff ff       	call   c001feba <FAT::~FAT()>
c001feed:	83 c4 10             	add    esp,0x10
c001fef0:	83 ec 08             	sub    esp,0x8
c001fef3:	6a 08                	push   0x8
c001fef5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fef9:	e8 0d 27 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c001fefe:	83 c4 10             	add    esp,0x10
c001ff01:	83 c4 0c             	add    esp,0xc
c001ff04:	c3                   	ret    
c001ff05:	90                   	nop

c001ff06 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ff06:	83 ec 1c             	sub    esp,0x1c
c001ff09:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ff10:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ff15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff19:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c001ff20:	83 f8 ff             	cmp    eax,0xffffffff
c001ff23:	75 34                	jne    c001ff59 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ff25:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff29:	88 c2                	mov    dl,al
c001ff2b:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c001ff30:	01 d0                	add    eax,edx
c001ff32:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff36:	8b 15 e0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fe0
c001ff3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff40:	89 14 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],edx
c001ff47:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c001ff4c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff50:	89 14 85 80 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef80],edx
c001ff57:	eb 17                	jmp    c001ff70 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff59:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff5d:	88 c2                	mov    dl,al
c001ff5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff63:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c001ff6a:	01 d0                	add    eax,edx
c001ff6c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff70:	83 ec 04             	sub    esp,0x4
c001ff73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff7b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ff7f:	50                   	push   eax
c001ff80:	e8 79 6d fe ff       	call   c0006cfe <f_getlabel>
c001ff85:	83 c4 10             	add    esp,0x10
c001ff88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff8c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff91:	75 07                	jne    c001ff9a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ff93:	b8 00 00 00 00       	mov    eax,0x0
c001ff98:	eb 05                	jmp    c001ff9f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ff9a:	b8 01 00 00 00       	mov    eax,0x1
c001ff9f:	83 c4 1c             	add    esp,0x1c
c001ffa2:	c3                   	ret    
c001ffa3:	90                   	nop

c001ffa4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ffa4:	57                   	push   edi
c001ffa5:	83 ec 58             	sub    esp,0x58
c001ffa8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ffb0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ffb4:	b9 0f 00 00 00       	mov    ecx,0xf
c001ffb9:	b8 00 00 00 00       	mov    eax,0x0
c001ffbe:	fc                   	cld    
c001ffbf:	89 d7                	mov    edi,edx
c001ffc1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ffc3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffc7:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c001ffce:	83 f8 ff             	cmp    eax,0xffffffff
c001ffd1:	75 34                	jne    c0020007 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ffd3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffd7:	88 c2                	mov    dl,al
c001ffd9:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c001ffde:	01 d0                	add    eax,edx
c001ffe0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffe4:	8b 15 e0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fe0
c001ffea:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffee:	89 14 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],edx
c001fff5:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c001fffa:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fffe:	89 14 85 80 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef80],edx
c0020005:	eb 17                	jmp    c002001e <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020007:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002000b:	88 c2                	mov    dl,al
c002000d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020011:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c0020018:	01 d0                	add    eax,edx
c002001a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002001e:	83 ec 08             	sub    esp,0x8
c0020021:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020025:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020029:	50                   	push   eax
c002002a:	e8 1d 09 fe ff       	call   c000094c <strcat>
c002002f:	83 c4 10             	add    esp,0x10
c0020032:	83 ec 0c             	sub    esp,0xc
c0020035:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020039:	50                   	push   eax
c002003a:	e8 ad 6e fe ff       	call   c0006eec <f_setlabel>
c002003f:	83 c4 10             	add    esp,0x10
c0020042:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020046:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002004b:	75 07                	jne    c0020054 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002004d:	b8 00 00 00 00       	mov    eax,0x0
c0020052:	eb 05                	jmp    c0020059 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020054:	b8 01 00 00 00       	mov    eax,0x1
c0020059:	83 c4 58             	add    esp,0x58
c002005c:	5f                   	pop    edi
c002005d:	c3                   	ret    

c002005e <FAT::format(LogicalDisk*, int, char const*, int)>:
c002005e:	83 ec 2c             	sub    esp,0x2c
c0020061:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020069:	83 ec 08             	sub    esp,0x8
c002006c:	68 94 be 02 c0       	push   0xc002be94
c0020071:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020075:	e8 1e 08 fe ff       	call   c0000898 <strcmp>
c002007a:	83 c4 10             	add    esp,0x10
c002007d:	85 c0                	test   eax,eax
c002007f:	0f 94 c0             	sete   al
c0020082:	84 c0                	test   al,al
c0020084:	74 0d                	je     c0020093 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020086:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002008e:	e9 a6 00 00 00       	jmp    c0020139 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020093:	83 ec 08             	sub    esp,0x8
c0020096:	68 86 be 02 c0       	push   0xc002be86
c002009b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002009f:	e8 f4 07 fe ff       	call   c0000898 <strcmp>
c00200a4:	83 c4 10             	add    esp,0x10
c00200a7:	85 c0                	test   eax,eax
c00200a9:	0f 94 c0             	sete   al
c00200ac:	84 c0                	test   al,al
c00200ae:	74 0a                	je     c00200ba <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00200b0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200b8:	eb 7f                	jmp    c0020139 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200ba:	83 ec 08             	sub    esp,0x8
c00200bd:	68 8c be 02 c0       	push   0xc002be8c
c00200c2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200c6:	e8 cd 07 fe ff       	call   c0000898 <strcmp>
c00200cb:	83 c4 10             	add    esp,0x10
c00200ce:	85 c0                	test   eax,eax
c00200d0:	0f 94 c0             	sete   al
c00200d3:	84 c0                	test   al,al
c00200d5:	74 0a                	je     c00200e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00200d7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200df:	eb 58                	jmp    c0020139 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200e1:	83 ec 08             	sub    esp,0x8
c00200e4:	68 8c 92 02 c0       	push   0xc002928c
c00200e9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200ed:	e8 a6 07 fe ff       	call   c0000898 <strcmp>
c00200f2:	83 c4 10             	add    esp,0x10
c00200f5:	85 c0                	test   eax,eax
c00200f7:	0f 94 c0             	sete   al
c00200fa:	84 c0                	test   al,al
c00200fc:	74 0a                	je     c0020108 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00200fe:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020106:	eb 31                	jmp    c0020139 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020108:	83 ec 08             	sub    esp,0x8
c002010b:	68 92 be 02 c0       	push   0xc002be92
c0020110:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020114:	e8 7f 07 fe ff       	call   c0000898 <strcmp>
c0020119:	83 c4 10             	add    esp,0x10
c002011c:	85 c0                	test   eax,eax
c002011e:	0f 94 c0             	sete   al
c0020121:	84 c0                	test   al,al
c0020123:	74 0a                	je     c002012f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020125:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002012d:	eb 0a                	jmp    c0020139 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002012f:	b8 08 00 00 00       	mov    eax,0x8
c0020134:	e9 df 00 00 00       	jmp    c0020218 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020139:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020140:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020145:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020149:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c0020150:	83 f8 ff             	cmp    eax,0xffffffff
c0020153:	75 34                	jne    c0020189 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020155:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020159:	88 c2                	mov    dl,al
c002015b:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c0020160:	01 d0                	add    eax,edx
c0020162:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020166:	8b 15 e0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fe0
c002016c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020170:	89 14 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],edx
c0020177:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c002017c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020180:	89 14 85 80 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef80],edx
c0020187:	eb 17                	jmp    c00201a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020189:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002018d:	88 c2                	mov    dl,al
c002018f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020193:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c002019a:	01 d0                	add    eax,edx
c002019c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00201a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00201a4:	88 04 24             	mov    BYTE PTR [esp],al
c00201a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00201ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00201af:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00201b7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00201bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00201c4:	83 ec 0c             	sub    esp,0xc
c00201c7:	68 00 20 00 00       	push   0x2000
c00201cc:	e8 c8 f3 fe ff       	call   c000f599 <malloc>
c00201d1:	83 c4 10             	add    esp,0x10
c00201d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00201d8:	68 00 20 00 00       	push   0x2000
c00201dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00201e5:	50                   	push   eax
c00201e6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00201ea:	50                   	push   eax
c00201eb:	e8 47 71 fe ff       	call   c0007337 <f_mkfs>
c00201f0:	83 c4 10             	add    esp,0x10
c00201f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00201f7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201fc:	75 07                	jne    c0020205 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00201fe:	b8 00 00 00 00       	mov    eax,0x0
c0020203:	eb 13                	jmp    c0020218 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020205:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002020a:	75 07                	jne    c0020213 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c002020c:	b8 09 00 00 00       	mov    eax,0x9
c0020211:	eb 05                	jmp    c0020218 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020213:	b8 01 00 00 00       	mov    eax,0x1
c0020218:	83 c4 2c             	add    esp,0x2c
c002021b:	c3                   	ret    

c002021c <FAT::tryMount(LogicalDisk*, int)>:
c002021c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020222:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c0020227:	83 f8 14             	cmp    eax,0x14
c002022a:	75 17                	jne    c0020243 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002022c:	83 ec 0c             	sub    esp,0xc
c002022f:	68 98 be 02 c0       	push   0xc002be98
c0020234:	e8 16 9c ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0020239:	83 c4 10             	add    esp,0x10
c002023c:	b0 00                	mov    al,0x0
c002023e:	e9 d7 01 00 00       	jmp    c002041a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020243:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002024a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020250:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020256:	3d 00 02 00 00       	cmp    eax,0x200
c002025b:	74 07                	je     c0020264 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002025d:	b0 00                	mov    al,0x0
c002025f:	e9 b6 01 00 00       	jmp    c002041a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020264:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002026c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020273:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c002027a:	83 f8 ff             	cmp    eax,0xffffffff
c002027d:	74 07                	je     c0020286 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002027f:	b0 01                	mov    al,0x1
c0020281:	e9 94 01 00 00       	jmp    c002041a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020286:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020290:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020298:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002029f:	88 c2                	mov    dl,al
c00202a1:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c00202a6:	01 d0                	add    eax,edx
c00202a8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00202af:	8b 15 e0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fe0
c00202b5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00202bc:	89 14 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],edx
c00202c3:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c00202c8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00202cf:	89 14 85 80 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef80],edx
c00202d6:	83 ec 0c             	sub    esp,0xc
c00202d9:	68 54 02 00 00       	push   0x254
c00202de:	e8 b6 f2 fe ff       	call   c000f599 <malloc>
c00202e3:	83 c4 10             	add    esp,0x10
c00202e6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00202ed:	83 ec 04             	sub    esp,0x4
c00202f0:	6a 00                	push   0x0
c00202f2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202f9:	50                   	push   eax
c00202fa:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020301:	e8 ef 4b fe ff       	call   c0004ef5 <f_mount>
c0020306:	83 c4 10             	add    esp,0x10
c0020309:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020310:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020318:	74 19                	je     c0020333 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002031a:	83 ec 0c             	sub    esp,0xc
c002031d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020324:	e8 90 f2 fe ff       	call   c000f5b9 <rfree>
c0020329:	83 c4 10             	add    esp,0x10
c002032c:	b0 00                	mov    al,0x0
c002032e:	e9 e7 00 00 00       	jmp    c002041a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020333:	83 ec 04             	sub    esp,0x4
c0020336:	68 00 01 00 00       	push   0x100
c002033b:	6a 00                	push   0x0
c002033d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020344:	50                   	push   eax
c0020345:	e8 06 04 fe ff       	call   c0000750 <memset>
c002034a:	83 c4 10             	add    esp,0x10
c002034d:	83 ec 08             	sub    esp,0x8
c0020350:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020357:	50                   	push   eax
c0020358:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002035f:	50                   	push   eax
c0020360:	e8 e7 05 fe ff       	call   c000094c <strcat>
c0020365:	83 c4 10             	add    esp,0x10
c0020368:	83 ec 08             	sub    esp,0x8
c002036b:	68 a6 be 02 c0       	push   0xc002bea6
c0020370:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020377:	50                   	push   eax
c0020378:	e8 cf 05 fe ff       	call   c000094c <strcat>
c002037d:	83 c4 10             	add    esp,0x10
c0020380:	83 ec 04             	sub    esp,0x4
c0020383:	6a 01                	push   0x1
c0020385:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002038c:	50                   	push   eax
c002038d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020391:	50                   	push   eax
c0020392:	e8 c0 4b fe ff       	call   c0004f57 <f_open>
c0020397:	83 c4 10             	add    esp,0x10
c002039a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00203a1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00203a8:	85 c0                	test   eax,eax
c00203aa:	74 0a                	je     c00203b6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00203ac:	78 2d                	js     c00203db <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00203ae:	83 e8 04             	sub    eax,0x4
c00203b1:	83 f8 01             	cmp    eax,0x1
c00203b4:	77 25                	ja     c00203db <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00203b6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00203be:	83 ec 0c             	sub    esp,0xc
c00203c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00203c5:	50                   	push   eax
c00203c6:	e8 de 56 fe ff       	call   c0005aa9 <f_close>
c00203cb:	83 c4 10             	add    esp,0x10
c00203ce:	90                   	nop
c00203cf:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00203d7:	74 3a                	je     c0020413 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00203d9:	eb 2d                	jmp    c0020408 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00203db:	83 ec 0c             	sub    esp,0xc
c00203de:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203e5:	e8 cf f1 fe ff       	call   c000f5b9 <rfree>
c00203ea:	83 c4 10             	add    esp,0x10
c00203ed:	83 ec 04             	sub    esp,0x4
c00203f0:	6a 00                	push   0x0
c00203f2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203f9:	50                   	push   eax
c00203fa:	6a 00                	push   0x0
c00203fc:	e8 f4 4a fe ff       	call   c0004ef5 <f_mount>
c0020401:	83 c4 10             	add    esp,0x10
c0020404:	b0 00                	mov    al,0x0
c0020406:	eb 12                	jmp    c002041a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020408:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c002040d:	40                   	inc    eax
c002040e:	a3 e0 0f 03 c0       	mov    ds:0xc0030fe0,eax
c0020413:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002041a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020420:	c3                   	ret    
c0020421:	90                   	nop

c0020422 <FAT::getFileFirstSector(char const*)>:
c0020422:	53                   	push   ebx
c0020423:	83 ec 28             	sub    esp,0x28
c0020426:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002042e:	83 ec 0c             	sub    esp,0xc
c0020431:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020435:	e8 5f f1 fe ff       	call   c000f599 <malloc>
c002043a:	83 c4 10             	add    esp,0x10
c002043d:	89 c3                	mov    ebx,eax
c002043f:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0020444:	83 ec 04             	sub    esp,0x4
c0020447:	50                   	push   eax
c0020448:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002044c:	53                   	push   ebx
c002044d:	e8 f0 27 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c0020452:	83 c4 10             	add    esp,0x10
c0020455:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020459:	83 ec 08             	sub    esp,0x8
c002045c:	6a 01                	push   0x1
c002045e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020462:	e8 3f 28 ff ff       	call   c0012ca6 <File::open(FileOpenMode)>
c0020467:	83 c4 10             	add    esp,0x10
c002046a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002046e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020470:	83 c0 0c             	add    eax,0xc
c0020473:	8b 00                	mov    eax,DWORD PTR [eax]
c0020475:	83 ec 0c             	sub    esp,0xc
c0020478:	8d 54 24 14          	lea    edx,[esp+0x14]
c002047c:	52                   	push   edx
c002047d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020481:	52                   	push   edx
c0020482:	6a 00                	push   0x0
c0020484:	6a 04                	push   0x4
c0020486:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002048a:	ff d0                	call   eax
c002048c:	83 c4 20             	add    esp,0x20
c002048f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020493:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002049d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00204a1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00204a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00204a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00204ab:	83 ec 0c             	sub    esp,0xc
c00204ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00204b2:	e8 4d 28 ff ff       	call   c0012d04 <File::close()>
c00204b7:	83 c4 10             	add    esp,0x10
c00204ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00204be:	ba 00 00 00 00       	mov    edx,0x0
c00204c3:	83 c4 28             	add    esp,0x28
c00204c6:	5b                   	pop    ebx
c00204c7:	c3                   	ret    

c00204c8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00204c8:	57                   	push   edi
c00204c9:	56                   	push   esi
c00204ca:	53                   	push   ebx
c00204cb:	81 ec 50 02 00 00    	sub    esp,0x250
c00204d1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00204d9:	74 0a                	je     c00204e5 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00204db:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00204e3:	75 0a                	jne    c00204ef <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00204e5:	b8 04 00 00 00       	mov    eax,0x4
c00204ea:	e9 29 01 00 00       	jmp    c0020618 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204ef:	83 ec 08             	sub    esp,0x8
c00204f2:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00204f9:	50                   	push   eax
c00204fa:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020501:	e8 ad 5b fe ff       	call   c00060b3 <f_readdir>
c0020506:	83 c4 10             	add    esp,0x10
c0020509:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020510:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020517:	83 ec 0c             	sub    esp,0xc
c002051a:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020521:	83 c0 1a             	add    eax,0x1a
c0020524:	50                   	push   eax
c0020525:	e8 42 02 fe ff       	call   c000076c <strlen>
c002052a:	83 c4 10             	add    esp,0x10
c002052d:	ba 00 00 00 00       	mov    edx,0x0
c0020532:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020536:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002053a:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020541:	0f b6 c0             	movzx  eax,al
c0020544:	83 e0 10             	and    eax,0x10
c0020547:	74 07                	je     c0020550 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020549:	b8 02 00 00 00       	mov    eax,0x2
c002054e:	eb 05                	jmp    c0020555 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020550:	b8 01 00 00 00       	mov    eax,0x1
c0020555:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020559:	83 ec 08             	sub    esp,0x8
c002055c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020563:	83 c0 1a             	add    eax,0x1a
c0020566:	50                   	push   eax
c0020567:	8d 44 24 10          	lea    eax,[esp+0x10]
c002056b:	83 c0 10             	add    eax,0x10
c002056e:	50                   	push   eax
c002056f:	e8 98 02 fe ff       	call   c000080c <strcpy>
c0020574:	83 c4 10             	add    esp,0x10
c0020577:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c002057e:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020585:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020589:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020590:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020597:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002059e:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00205a5:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00205ac:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00205b3:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00205ba:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00205c1:	89 c6                	mov    esi,eax
c00205c3:	89 d7                	mov    edi,edx
c00205c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00205c7:	89 c8                	mov    eax,ecx
c00205c9:	89 fa                	mov    edx,edi
c00205cb:	89 f3                	mov    ebx,esi
c00205cd:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00205d4:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00205db:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00205e2:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00205e9:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00205ef:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00205f6:	84 c0                	test   al,al
c00205f8:	75 07                	jne    c0020601 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00205fa:	b8 07 00 00 00       	mov    eax,0x7
c00205ff:	eb 17                	jmp    c0020618 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020601:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020608:	85 c0                	test   eax,eax
c002060a:	75 07                	jne    c0020613 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c002060c:	b8 00 00 00 00       	mov    eax,0x0
c0020611:	eb 05                	jmp    c0020618 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020613:	b8 01 00 00 00       	mov    eax,0x1
c0020618:	81 c4 50 02 00 00    	add    esp,0x250
c002061e:	5b                   	pop    ebx
c002061f:	5e                   	pop    esi
c0020620:	5f                   	pop    edi
c0020621:	c3                   	ret    

c0020622 <FAT::read(void*, unsigned long, void*, int*)>:
c0020622:	83 ec 1c             	sub    esp,0x1c
c0020625:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002062a:	74 07                	je     c0020633 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002062c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020631:	75 07                	jne    c002063a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020633:	b8 04 00 00 00       	mov    eax,0x4
c0020638:	eb 3d                	jmp    c0020677 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002063a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002063e:	50                   	push   eax
c002063f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020643:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020647:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002064b:	e8 43 4d fe ff       	call   c0005393 <f_read>
c0020650:	83 c4 10             	add    esp,0x10
c0020653:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020657:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002065b:	89 c2                	mov    edx,eax
c002065d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020661:	89 10                	mov    DWORD PTR [eax],edx
c0020663:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020667:	85 c0                	test   eax,eax
c0020669:	75 07                	jne    c0020672 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002066b:	b8 00 00 00 00       	mov    eax,0x0
c0020670:	eb 05                	jmp    c0020677 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020672:	b8 01 00 00 00       	mov    eax,0x1
c0020677:	83 c4 1c             	add    esp,0x1c
c002067a:	c3                   	ret    
c002067b:	90                   	nop

c002067c <FAT::write(void*, unsigned long, void*, int*)>:
c002067c:	83 ec 1c             	sub    esp,0x1c
c002067f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020684:	74 07                	je     c002068d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020686:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002068b:	75 07                	jne    c0020694 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002068d:	b8 04 00 00 00       	mov    eax,0x4
c0020692:	eb 3d                	jmp    c00206d1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020694:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020698:	50                   	push   eax
c0020699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002069d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206a5:	e8 69 4f fe ff       	call   c0005613 <f_write>
c00206aa:	83 c4 10             	add    esp,0x10
c00206ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206b5:	89 c2                	mov    edx,eax
c00206b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00206bb:	89 10                	mov    DWORD PTR [eax],edx
c00206bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206c1:	85 c0                	test   eax,eax
c00206c3:	75 07                	jne    c00206cc <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00206c5:	b8 00 00 00 00       	mov    eax,0x0
c00206ca:	eb 05                	jmp    c00206d1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00206cc:	b8 01 00 00 00       	mov    eax,0x1
c00206d1:	83 c4 1c             	add    esp,0x1c
c00206d4:	c3                   	ret    
c00206d5:	90                   	nop

c00206d6 <FAT::close(void*)>:
c00206d6:	83 ec 1c             	sub    esp,0x1c
c00206d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206de:	75 07                	jne    c00206e7 <FAT::close(void*)+0x11>
c00206e0:	b8 04 00 00 00       	mov    eax,0x4
c00206e5:	eb 36                	jmp    c002071d <FAT::close(void*)+0x47>
c00206e7:	83 ec 0c             	sub    esp,0xc
c00206ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206ee:	e8 b6 53 fe ff       	call   c0005aa9 <f_close>
c00206f3:	83 c4 10             	add    esp,0x10
c00206f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206fa:	83 ec 0c             	sub    esp,0xc
c00206fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020701:	e8 a3 ee fe ff       	call   c000f5a9 <free>
c0020706:	83 c4 10             	add    esp,0x10
c0020709:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002070d:	85 c0                	test   eax,eax
c002070f:	75 07                	jne    c0020718 <FAT::close(void*)+0x42>
c0020711:	b8 00 00 00 00       	mov    eax,0x0
c0020716:	eb 05                	jmp    c002071d <FAT::close(void*)+0x47>
c0020718:	b8 01 00 00 00       	mov    eax,0x1
c002071d:	83 c4 1c             	add    esp,0x1c
c0020720:	c3                   	ret    
c0020721:	90                   	nop

c0020722 <FAT::closeDir(void*)>:
c0020722:	83 ec 1c             	sub    esp,0x1c
c0020725:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002072a:	75 07                	jne    c0020733 <FAT::closeDir(void*)+0x11>
c002072c:	b8 04 00 00 00       	mov    eax,0x4
c0020731:	eb 36                	jmp    c0020769 <FAT::closeDir(void*)+0x47>
c0020733:	83 ec 0c             	sub    esp,0xc
c0020736:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002073a:	e8 52 59 fe ff       	call   c0006091 <f_closedir>
c002073f:	83 c4 10             	add    esp,0x10
c0020742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020746:	83 ec 0c             	sub    esp,0xc
c0020749:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002074d:	e8 57 ee fe ff       	call   c000f5a9 <free>
c0020752:	83 c4 10             	add    esp,0x10
c0020755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020759:	85 c0                	test   eax,eax
c002075b:	75 07                	jne    c0020764 <FAT::closeDir(void*)+0x42>
c002075d:	b8 00 00 00 00       	mov    eax,0x0
c0020762:	eb 05                	jmp    c0020769 <FAT::closeDir(void*)+0x47>
c0020764:	b8 01 00 00 00       	mov    eax,0x1
c0020769:	83 c4 1c             	add    esp,0x1c
c002076c:	c3                   	ret    
c002076d:	90                   	nop

c002076e <FAT::seek(void*, unsigned long long)>:
c002076e:	83 ec 2c             	sub    esp,0x2c
c0020771:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020775:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020779:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002077d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020781:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020786:	75 07                	jne    c002078f <FAT::seek(void*, unsigned long long)+0x21>
c0020788:	b8 04 00 00 00       	mov    eax,0x4
c002078d:	eb 2f                	jmp    c00207be <FAT::seek(void*, unsigned long long)+0x50>
c002078f:	83 ec 04             	sub    esp,0x4
c0020792:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020796:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002079a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002079e:	e8 35 53 fe ff       	call   c0005ad8 <f_lseek>
c00207a3:	83 c4 10             	add    esp,0x10
c00207a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00207aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207ae:	85 c0                	test   eax,eax
c00207b0:	75 07                	jne    c00207b9 <FAT::seek(void*, unsigned long long)+0x4b>
c00207b2:	b8 00 00 00 00       	mov    eax,0x0
c00207b7:	eb 05                	jmp    c00207be <FAT::seek(void*, unsigned long long)+0x50>
c00207b9:	b8 01 00 00 00       	mov    eax,0x1
c00207be:	83 c4 2c             	add    esp,0x2c
c00207c1:	c3                   	ret    

c00207c2 <fatWrapperReadDisk>:
c00207c2:	83 ec 1c             	sub    esp,0x1c
c00207c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207c9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00207d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00207d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207e1:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c00207e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207ec:	83 ec 0c             	sub    esp,0xc
c00207ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207f3:	52                   	push   edx
c00207f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207fc:	50                   	push   eax
c00207fd:	e8 36 58 ff ff       	call   c0016038 <LogicalDisk::read(unsigned long long, int, void*)>
c0020802:	83 c4 20             	add    esp,0x20
c0020805:	83 c4 1c             	add    esp,0x1c
c0020808:	c3                   	ret    

c0020809 <fatWrapperWriteDisk>:
c0020809:	83 ec 1c             	sub    esp,0x1c
c002080c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020810:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020814:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020818:	89 04 24             	mov    DWORD PTR [esp],eax
c002081b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002081f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020823:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020828:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c002082f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020833:	83 ec 0c             	sub    esp,0xc
c0020836:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002083a:	52                   	push   edx
c002083b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002083f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020843:	50                   	push   eax
c0020844:	e8 5b 58 ff ff       	call   c00160a4 <LogicalDisk::write(unsigned long long, int, void*)>
c0020849:	83 c4 20             	add    esp,0x20
c002084c:	83 c4 1c             	add    esp,0x1c
c002084f:	c3                   	ret    

c0020850 <fatWrapperIoctl>:
c0020850:	53                   	push   ebx
c0020851:	83 ec 28             	sub    esp,0x28
c0020854:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020858:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002085c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020860:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020864:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020869:	75 31                	jne    c002089c <fatWrapperIoctl+0x4c>
c002086b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002086f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020873:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020878:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c002087f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020885:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002088b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002088f:	66 89 02             	mov    WORD PTR [edx],ax
c0020892:	b8 00 00 00 00       	mov    eax,0x0
c0020897:	e9 b2 00 00 00       	jmp    c002094e <fatWrapperIoctl+0xfe>
c002089c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00208a1:	75 6a                	jne    c002090d <fatWrapperIoctl+0xbd>
c00208a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208ab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00208b0:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c00208b7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208bd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00208c3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00208c9:	89 c8                	mov    eax,ecx
c00208cb:	89 da                	mov    edx,ebx
c00208cd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00208d1:	c1 e0 0a             	shl    eax,0xa
c00208d4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00208d9:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c00208e0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00208e6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00208ec:	89 cb                	mov    ebx,ecx
c00208ee:	c1 fb 1f             	sar    ebx,0x1f
c00208f1:	53                   	push   ebx
c00208f2:	51                   	push   ecx
c00208f3:	52                   	push   edx
c00208f4:	50                   	push   eax
c00208f5:	e8 2a 5e 00 00       	call   c0026724 <__udivdi3>
c00208fa:	83 c4 10             	add    esp,0x10
c00208fd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020901:	89 01                	mov    DWORD PTR [ecx],eax
c0020903:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020906:	b8 00 00 00 00       	mov    eax,0x0
c002090b:	eb 41                	jmp    c002094e <fatWrapperIoctl+0xfe>
c002090d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020912:	75 07                	jne    c002091b <fatWrapperIoctl+0xcb>
c0020914:	b8 00 00 00 00       	mov    eax,0x0
c0020919:	eb 33                	jmp    c002094e <fatWrapperIoctl+0xfe>
c002091b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020920:	75 19                	jne    c002093b <fatWrapperIoctl+0xeb>
c0020922:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020926:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002092a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002092e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020934:	b8 00 00 00 00       	mov    eax,0x0
c0020939:	eb 13                	jmp    c002094e <fatWrapperIoctl+0xfe>
c002093b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020940:	75 07                	jne    c0020949 <fatWrapperIoctl+0xf9>
c0020942:	b8 00 00 00 00       	mov    eax,0x0
c0020947:	eb 05                	jmp    c002094e <fatWrapperIoctl+0xfe>
c0020949:	b8 04 00 00 00       	mov    eax,0x4
c002094e:	83 c4 28             	add    esp,0x28
c0020951:	5b                   	pop    ebx
c0020952:	c3                   	ret    
c0020953:	90                   	nop

c0020954 <FAT::FAT()>:
c0020954:	83 ec 1c             	sub    esp,0x1c
c0020957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002095b:	83 ec 0c             	sub    esp,0xc
c002095e:	50                   	push   eax
c002095f:	e8 8a 20 ff ff       	call   c00129ee <Filesystem::Filesystem()>
c0020964:	83 c4 10             	add    esp,0x10
c0020967:	ba bc be 02 c0       	mov    edx,0xc002bebc
c002096c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020970:	89 10                	mov    DWORD PTR [eax],edx
c0020972:	c7 05 e0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fe0,0x0
c002097c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020984:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020989:	7f 15                	jg     c00209a0 <FAT::FAT()+0x4c>
c002098b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002098f:	c7 04 85 00 10 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf000],0xffffffff
c002099a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002099e:	eb e4                	jmp    c0020984 <FAT::FAT()+0x30>
c00209a0:	90                   	nop
c00209a1:	83 c4 1c             	add    esp,0x1c
c00209a4:	c3                   	ret    
c00209a5:	90                   	nop

c00209a6 <FAT::fixFilepath(char*)>:
c00209a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209aa:	8a 00                	mov    al,BYTE PTR [eax]
c00209ac:	3c 40                	cmp    al,0x40
c00209ae:	7e 2c                	jle    c00209dc <FAT::fixFilepath(char*)+0x36>
c00209b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209b4:	8a 00                	mov    al,BYTE PTR [eax]
c00209b6:	83 e8 41             	sub    eax,0x41
c00209b9:	88 c2                	mov    dl,al
c00209bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209bf:	88 10                	mov    BYTE PTR [eax],dl
c00209c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209c5:	8a 00                	mov    al,BYTE PTR [eax]
c00209c7:	0f be c0             	movsx  eax,al
c00209ca:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c00209d1:	83 c0 30             	add    eax,0x30
c00209d4:	88 c2                	mov    dl,al
c00209d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209da:	88 10                	mov    BYTE PTR [eax],dl
c00209dc:	90                   	nop
c00209dd:	c3                   	ret    

c00209de <FAT::open(char const*, void**, FileOpenMode)>:
c00209de:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209e4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209ec:	74 0a                	je     c00209f8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00209ee:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00209f6:	75 0a                	jne    c0020a02 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00209f8:	b8 04 00 00 00       	mov    eax,0x4
c00209fd:	e9 fd 00 00 00       	jmp    c0020aff <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020a02:	83 ec 08             	sub    esp,0x8
c0020a05:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a0c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a10:	50                   	push   eax
c0020a11:	e8 f6 fd fd ff       	call   c000080c <strcpy>
c0020a16:	83 c4 10             	add    esp,0x10
c0020a19:	83 ec 08             	sub    esp,0x8
c0020a1c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020a20:	50                   	push   eax
c0020a21:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a28:	e8 79 ff ff ff       	call   c00209a6 <FAT::fixFilepath(char*)>
c0020a2d:	83 c4 10             	add    esp,0x10
c0020a30:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020a38:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a3f:	83 e0 01             	and    eax,0x1
c0020a42:	74 08                	je     c0020a4c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020a44:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020a4c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a53:	83 e0 04             	and    eax,0x4
c0020a56:	74 10                	je     c0020a68 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020a58:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020a60:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a68:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a6f:	83 e0 02             	and    eax,0x2
c0020a72:	74 08                	je     c0020a7c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020a74:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a7c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a83:	83 e0 08             	and    eax,0x8
c0020a86:	74 08                	je     c0020a90 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020a88:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020a90:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a97:	83 e0 10             	and    eax,0x10
c0020a9a:	74 08                	je     c0020aa4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020a9c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020aa4:	83 ec 0c             	sub    esp,0xc
c0020aa7:	68 50 02 00 00       	push   0x250
c0020aac:	e8 e8 ea fe ff       	call   c000f599 <malloc>
c0020ab1:	83 c4 10             	add    esp,0x10
c0020ab4:	89 c2                	mov    edx,eax
c0020ab6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020abd:	89 10                	mov    DWORD PTR [eax],edx
c0020abf:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020ac7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ad0:	83 ec 04             	sub    esp,0x4
c0020ad3:	52                   	push   edx
c0020ad4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020ad8:	52                   	push   edx
c0020ad9:	50                   	push   eax
c0020ada:	e8 78 44 fe ff       	call   c0004f57 <f_open>
c0020adf:	83 c4 10             	add    esp,0x10
c0020ae2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020ae9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020af1:	74 07                	je     c0020afa <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020af3:	b8 01 00 00 00       	mov    eax,0x1
c0020af8:	eb 05                	jmp    c0020aff <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020afa:	b8 00 00 00 00       	mov    eax,0x0
c0020aff:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b05:	c3                   	ret    

c0020b06 <FAT::openDir(char const*, void**)>:
c0020b06:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b0c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b14:	74 0a                	je     c0020b20 <FAT::openDir(char const*, void**)+0x1a>
c0020b16:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b1e:	75 07                	jne    c0020b27 <FAT::openDir(char const*, void**)+0x21>
c0020b20:	b8 04 00 00 00       	mov    eax,0x4
c0020b25:	eb 7d                	jmp    c0020ba4 <FAT::openDir(char const*, void**)+0x9e>
c0020b27:	83 ec 08             	sub    esp,0x8
c0020b2a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b31:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b35:	50                   	push   eax
c0020b36:	e8 d1 fc fd ff       	call   c000080c <strcpy>
c0020b3b:	83 c4 10             	add    esp,0x10
c0020b3e:	83 ec 08             	sub    esp,0x8
c0020b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b45:	50                   	push   eax
c0020b46:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b4d:	e8 54 fe ff ff       	call   c00209a6 <FAT::fixFilepath(char*)>
c0020b52:	83 c4 10             	add    esp,0x10
c0020b55:	83 ec 0c             	sub    esp,0xc
c0020b58:	6a 4c                	push   0x4c
c0020b5a:	e8 3a ea fe ff       	call   c000f599 <malloc>
c0020b5f:	83 c4 10             	add    esp,0x10
c0020b62:	89 c2                	mov    edx,eax
c0020b64:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b6b:	89 10                	mov    DWORD PTR [eax],edx
c0020b6d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b76:	83 ec 08             	sub    esp,0x8
c0020b79:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020b7d:	52                   	push   edx
c0020b7e:	50                   	push   eax
c0020b7f:	e8 0b 54 fe ff       	call   c0005f8f <f_opendir>
c0020b84:	83 c4 10             	add    esp,0x10
c0020b87:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b8e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020b96:	74 07                	je     c0020b9f <FAT::openDir(char const*, void**)+0x99>
c0020b98:	b8 01 00 00 00       	mov    eax,0x1
c0020b9d:	eb 05                	jmp    c0020ba4 <FAT::openDir(char const*, void**)+0x9e>
c0020b9f:	b8 00 00 00 00       	mov    eax,0x0
c0020ba4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020baa:	c3                   	ret    
c0020bab:	90                   	nop

c0020bac <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020bac:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020bb2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020bba:	75 0a                	jne    c0020bc6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020bbc:	b8 04 00 00 00       	mov    eax,0x4
c0020bc1:	e9 c9 00 00 00       	jmp    c0020c8f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bc6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020bce:	75 0a                	jne    c0020bda <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020bd0:	b8 04 00 00 00       	mov    eax,0x4
c0020bd5:	e9 b5 00 00 00       	jmp    c0020c8f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bda:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020be2:	75 0a                	jne    c0020bee <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020be4:	b8 04 00 00 00       	mov    eax,0x4
c0020be9:	e9 a1 00 00 00       	jmp    c0020c8f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bee:	83 ec 08             	sub    esp,0x8
c0020bf1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020bf8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020bff:	50                   	push   eax
c0020c00:	e8 07 fc fd ff       	call   c000080c <strcpy>
c0020c05:	83 c4 10             	add    esp,0x10
c0020c08:	83 ec 08             	sub    esp,0x8
c0020c0b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020c12:	50                   	push   eax
c0020c13:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c1a:	e8 87 fd ff ff       	call   c00209a6 <FAT::fixFilepath(char*)>
c0020c1f:	83 c4 10             	add    esp,0x10
c0020c22:	83 ec 08             	sub    esp,0x8
c0020c25:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c29:	50                   	push   eax
c0020c2a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c31:	50                   	push   eax
c0020c32:	e8 17 55 fe ff       	call   c000614e <f_stat>
c0020c37:	83 c4 10             	add    esp,0x10
c0020c3a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020c41:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020c48:	85 c0                	test   eax,eax
c0020c4a:	74 07                	je     c0020c53 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020c4c:	83 f8 04             	cmp    eax,0x4
c0020c4f:	74 32                	je     c0020c83 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020c51:	eb 37                	jmp    c0020c8a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020c53:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020c57:	0f b6 c0             	movzx  eax,al
c0020c5a:	83 e0 10             	and    eax,0x10
c0020c5d:	0f 95 c2             	setne  dl
c0020c60:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020c67:	88 10                	mov    BYTE PTR [eax],dl
c0020c69:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c70:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020c77:	89 01                	mov    DWORD PTR [ecx],eax
c0020c79:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c7c:	b8 00 00 00 00       	mov    eax,0x0
c0020c81:	eb 0c                	jmp    c0020c8f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c83:	b8 02 00 00 00       	mov    eax,0x2
c0020c88:	eb 05                	jmp    c0020c8f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c8a:	b8 01 00 00 00       	mov    eax,0x1
c0020c8f:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020c95:	c3                   	ret    

c0020c96 <FAT::unlink(char const*)>:
c0020c96:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c9c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ca4:	75 07                	jne    c0020cad <FAT::unlink(char const*)+0x17>
c0020ca6:	b8 04 00 00 00       	mov    eax,0x4
c0020cab:	eb 5c                	jmp    c0020d09 <FAT::unlink(char const*)+0x73>
c0020cad:	83 ec 08             	sub    esp,0x8
c0020cb0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020cb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020cbb:	50                   	push   eax
c0020cbc:	e8 4b fb fd ff       	call   c000080c <strcpy>
c0020cc1:	83 c4 10             	add    esp,0x10
c0020cc4:	83 ec 08             	sub    esp,0x8
c0020cc7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ccb:	50                   	push   eax
c0020ccc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020cd3:	e8 ce fc ff ff       	call   c00209a6 <FAT::fixFilepath(char*)>
c0020cd8:	83 c4 10             	add    esp,0x10
c0020cdb:	83 ec 0c             	sub    esp,0xc
c0020cde:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ce2:	50                   	push   eax
c0020ce3:	e8 b8 57 fe ff       	call   c00064a0 <f_unlink>
c0020ce8:	83 c4 10             	add    esp,0x10
c0020ceb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020cf2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020cf9:	85 c0                	test   eax,eax
c0020cfb:	75 07                	jne    c0020d04 <FAT::unlink(char const*)+0x6e>
c0020cfd:	b8 00 00 00 00       	mov    eax,0x0
c0020d02:	eb 05                	jmp    c0020d09 <FAT::unlink(char const*)+0x73>
c0020d04:	b8 01 00 00 00       	mov    eax,0x1
c0020d09:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d0f:	c3                   	ret    

c0020d10 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020d10:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020d16:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020d1d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020d24:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d28:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d2c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020d34:	75 0a                	jne    c0020d40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020d36:	b8 04 00 00 00       	mov    eax,0x4
c0020d3b:	e9 1c 01 00 00       	jmp    c0020e5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d40:	83 ec 08             	sub    esp,0x8
c0020d43:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d4a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d4e:	50                   	push   eax
c0020d4f:	e8 b8 fa fd ff       	call   c000080c <strcpy>
c0020d54:	83 c4 10             	add    esp,0x10
c0020d57:	83 ec 08             	sub    esp,0x8
c0020d5a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020d5e:	50                   	push   eax
c0020d5f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d66:	e8 3b fc ff ff       	call   c00209a6 <FAT::fixFilepath(char*)>
c0020d6b:	83 c4 10             	add    esp,0x10
c0020d6e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020d76:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020d7e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d83:	83 e0 01             	and    eax,0x1
c0020d86:	74 08                	je     c0020d90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020d88:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020d90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d95:	83 e0 02             	and    eax,0x2
c0020d98:	74 08                	je     c0020da2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020d9a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020da2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020da7:	83 e0 04             	and    eax,0x4
c0020daa:	74 08                	je     c0020db4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020dac:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020db4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020db9:	83 e0 08             	and    eax,0x8
c0020dbc:	74 08                	je     c0020dc6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020dbe:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020dc6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dcb:	83 e0 01             	and    eax,0x1
c0020dce:	74 08                	je     c0020dd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020dd0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020dd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ddd:	83 e0 02             	and    eax,0x2
c0020de0:	74 08                	je     c0020dea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020de2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020dea:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020def:	83 e0 04             	and    eax,0x4
c0020df2:	74 08                	je     c0020dfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020df4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020dfc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e01:	83 e0 08             	and    eax,0x8
c0020e04:	74 08                	je     c0020e0e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020e06:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020e0e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020e15:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020e1c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020e24:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020e2c:	83 ec 04             	sub    esp,0x4
c0020e2f:	52                   	push   edx
c0020e30:	50                   	push   eax
c0020e31:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020e35:	50                   	push   eax
c0020e36:	e8 07 5d fe ff       	call   c0006b42 <f_chmod>
c0020e3b:	83 c4 10             	add    esp,0x10
c0020e3e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020e45:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020e4c:	85 c0                	test   eax,eax
c0020e4e:	75 07                	jne    c0020e57 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020e50:	b8 00 00 00 00       	mov    eax,0x0
c0020e55:	eb 05                	jmp    c0020e5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e57:	b8 01 00 00 00       	mov    eax,0x1
c0020e5c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020e62:	c3                   	ret    
c0020e63:	90                   	nop

c0020e64 <FAT::rename(char const*, char const*)>:
c0020e64:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020e6a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020e72:	74 0a                	je     c0020e7e <FAT::rename(char const*, char const*)+0x1a>
c0020e74:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020e7c:	75 0a                	jne    c0020e88 <FAT::rename(char const*, char const*)+0x24>
c0020e7e:	b8 04 00 00 00       	mov    eax,0x4
c0020e83:	e9 98 00 00 00       	jmp    c0020f20 <FAT::rename(char const*, char const*)+0xbc>
c0020e88:	83 ec 08             	sub    esp,0x8
c0020e8b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e92:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020e99:	50                   	push   eax
c0020e9a:	e8 6d f9 fd ff       	call   c000080c <strcpy>
c0020e9f:	83 c4 10             	add    esp,0x10
c0020ea2:	83 ec 08             	sub    esp,0x8
c0020ea5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020eac:	50                   	push   eax
c0020ead:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020eb4:	e8 ed fa ff ff       	call   c00209a6 <FAT::fixFilepath(char*)>
c0020eb9:	83 c4 10             	add    esp,0x10
c0020ebc:	83 ec 08             	sub    esp,0x8
c0020ebf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020ec6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020eca:	50                   	push   eax
c0020ecb:	e8 3c f9 fd ff       	call   c000080c <strcpy>
c0020ed0:	83 c4 10             	add    esp,0x10
c0020ed3:	83 ec 08             	sub    esp,0x8
c0020ed6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020eda:	50                   	push   eax
c0020edb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ee2:	e8 bf fa ff ff       	call   c00209a6 <FAT::fixFilepath(char*)>
c0020ee7:	83 c4 10             	add    esp,0x10
c0020eea:	83 ec 08             	sub    esp,0x8
c0020eed:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ef1:	50                   	push   eax
c0020ef2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020ef9:	50                   	push   eax
c0020efa:	e8 50 59 fe ff       	call   c000684f <f_rename>
c0020eff:	83 c4 10             	add    esp,0x10
c0020f02:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020f09:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020f10:	85 c0                	test   eax,eax
c0020f12:	75 07                	jne    c0020f1b <FAT::rename(char const*, char const*)+0xb7>
c0020f14:	b8 00 00 00 00       	mov    eax,0x0
c0020f19:	eb 05                	jmp    c0020f20 <FAT::rename(char const*, char const*)+0xbc>
c0020f1b:	b8 01 00 00 00       	mov    eax,0x1
c0020f20:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020f26:	c3                   	ret    
c0020f27:	90                   	nop

c0020f28 <FAT::mkdir(char const*)>:
c0020f28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f36:	75 07                	jne    c0020f3f <FAT::mkdir(char const*)+0x17>
c0020f38:	b8 04 00 00 00       	mov    eax,0x4
c0020f3d:	eb 5c                	jmp    c0020f9b <FAT::mkdir(char const*)+0x73>
c0020f3f:	83 ec 08             	sub    esp,0x8
c0020f42:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f49:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f4d:	50                   	push   eax
c0020f4e:	e8 b9 f8 fd ff       	call   c000080c <strcpy>
c0020f53:	83 c4 10             	add    esp,0x10
c0020f56:	83 ec 08             	sub    esp,0x8
c0020f59:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f5d:	50                   	push   eax
c0020f5e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f65:	e8 3c fa ff ff       	call   c00209a6 <FAT::fixFilepath(char*)>
c0020f6a:	83 c4 10             	add    esp,0x10
c0020f6d:	83 ec 0c             	sub    esp,0xc
c0020f70:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f74:	50                   	push   eax
c0020f75:	e8 a9 56 fe ff       	call   c0006623 <f_mkdir>
c0020f7a:	83 c4 10             	add    esp,0x10
c0020f7d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f84:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f8b:	85 c0                	test   eax,eax
c0020f8d:	75 07                	jne    c0020f96 <FAT::mkdir(char const*)+0x6e>
c0020f8f:	b8 00 00 00 00       	mov    eax,0x0
c0020f94:	eb 05                	jmp    c0020f9b <FAT::mkdir(char const*)+0x73>
c0020f96:	b8 01 00 00 00       	mov    eax,0x1
c0020f9b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020fa1:	c3                   	ret    

c0020fa2 <FAT::exists(char const*)>:
c0020fa2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020fa8:	83 ec 08             	sub    esp,0x8
c0020fab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020fb2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fb6:	50                   	push   eax
c0020fb7:	e8 50 f8 fd ff       	call   c000080c <strcpy>
c0020fbc:	83 c4 10             	add    esp,0x10
c0020fbf:	83 ec 08             	sub    esp,0x8
c0020fc2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020fc6:	50                   	push   eax
c0020fc7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020fce:	e8 d3 f9 ff ff       	call   c00209a6 <FAT::fixFilepath(char*)>
c0020fd3:	83 c4 10             	add    esp,0x10
c0020fd6:	83 ec 08             	sub    esp,0x8
c0020fd9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020fe0:	50                   	push   eax
c0020fe1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fe5:	50                   	push   eax
c0020fe6:	e8 63 51 fe ff       	call   c000614e <f_stat>
c0020feb:	83 c4 10             	add    esp,0x10
c0020fee:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020ff5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020ffc:	85 c0                	test   eax,eax
c0020ffe:	75 04                	jne    c0021004 <FAT::exists(char const*)+0x62>
c0021000:	b0 01                	mov    al,0x1
c0021002:	eb 02                	jmp    c0021006 <FAT::exists(char const*)+0x64>
c0021004:	b0 00                	mov    al,0x0
c0021006:	81 c4 2c 02 00 00    	add    esp,0x22c
c002100c:	c3                   	ret    
c002100d:	90                   	nop

c002100e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002100e:	b8 08 00 00 00       	mov    eax,0x8
c0021013:	c3                   	ret    

c0021014 <ISO9660::seek(void*, unsigned long long)>:
c0021014:	53                   	push   ebx
c0021015:	b8 04 00 00 00       	mov    eax,0x4
c002101a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002101e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021022:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021026:	85 d2                	test   edx,edx
c0021028:	74 17                	je     c0021041 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002102a:	89 c8                	mov    eax,ecx
c002102c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002102f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021032:	b8 01 00 00 00       	mov    eax,0x1
c0021037:	73 08                	jae    c0021041 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021039:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002103c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002103f:	31 c0                	xor    eax,eax
c0021041:	5b                   	pop    ebx
c0021042:	c3                   	ret    
c0021043:	90                   	nop

c0021044 <ISO9660::tell(void*, unsigned long long*)>:
c0021044:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021048:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002104c:	85 d2                	test   edx,edx
c002104e:	74 12                	je     c0021062 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021050:	85 c0                	test   eax,eax
c0021052:	74 0e                	je     c0021062 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021054:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021057:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002105a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002105d:	89 10                	mov    DWORD PTR [eax],edx
c002105f:	31 c0                	xor    eax,eax
c0021061:	c3                   	ret    
c0021062:	b8 04 00 00 00       	mov    eax,0x4
c0021067:	c3                   	ret    

c0021068 <ISO9660::getName()>:
c0021068:	b8 1c bf 02 c0       	mov    eax,0xc002bf1c
c002106d:	c3                   	ret    

c002106e <ISO9660::stat(void*, unsigned long long*)>:
c002106e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021072:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021076:	85 d2                	test   edx,edx
c0021078:	74 12                	je     c002108c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002107a:	85 c0                	test   eax,eax
c002107c:	74 0e                	je     c002108c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002107e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021081:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021084:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021087:	89 10                	mov    DWORD PTR [eax],edx
c0021089:	31 c0                	xor    eax,eax
c002108b:	c3                   	ret    
c002108c:	b8 04 00 00 00       	mov    eax,0x4
c0021091:	c3                   	ret    

c0021092 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021092:	b8 01 00 00 00       	mov    eax,0x1
c0021097:	c3                   	ret    

c0021098 <ISO9660::unlink(char const*)>:
c0021098:	b8 01 00 00 00       	mov    eax,0x1
c002109d:	c3                   	ret    

c002109e <ISO9660::write(void*, unsigned long, void*, int*)>:
c002109e:	b8 01 00 00 00       	mov    eax,0x1
c00210a3:	c3                   	ret    

c00210a4 <ISO9660::rename(char const*, char const*)>:
c00210a4:	b8 01 00 00 00       	mov    eax,0x1
c00210a9:	c3                   	ret    

c00210aa <ISO9660::mkdir(char const*)>:
c00210aa:	b8 01 00 00 00       	mov    eax,0x1
c00210af:	c3                   	ret    

c00210b0 <ISO9660::close(void*)>:
c00210b0:	83 ec 0c             	sub    esp,0xc
c00210b3:	b8 04 00 00 00       	mov    eax,0x4
c00210b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210bc:	85 d2                	test   edx,edx
c00210be:	74 0e                	je     c00210ce <ISO9660::close(void*)+0x1e>
c00210c0:	83 ec 0c             	sub    esp,0xc
c00210c3:	52                   	push   edx
c00210c4:	e8 e0 e4 fe ff       	call   c000f5a9 <free>
c00210c9:	83 c4 10             	add    esp,0x10
c00210cc:	31 c0                	xor    eax,eax
c00210ce:	83 c4 0c             	add    esp,0xc
c00210d1:	c3                   	ret    

c00210d2 <ISO9660::closeDir(void*)>:
c00210d2:	83 ec 0c             	sub    esp,0xc
c00210d5:	b8 04 00 00 00       	mov    eax,0x4
c00210da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210de:	85 d2                	test   edx,edx
c00210e0:	74 0e                	je     c00210f0 <ISO9660::closeDir(void*)+0x1e>
c00210e2:	83 ec 0c             	sub    esp,0xc
c00210e5:	52                   	push   edx
c00210e6:	e8 be e4 fe ff       	call   c000f5a9 <free>
c00210eb:	83 c4 10             	add    esp,0x10
c00210ee:	31 c0                	xor    eax,eax
c00210f0:	83 c4 0c             	add    esp,0xc
c00210f3:	c3                   	ret    

c00210f4 <ISO9660::~ISO9660()>:
c00210f4:	83 ec 0c             	sub    esp,0xc
c00210f7:	ba 40 bf 02 c0       	mov    edx,0xc002bf40
c00210fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021100:	89 10                	mov    DWORD PTR [eax],edx
c0021102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021106:	83 ec 0c             	sub    esp,0xc
c0021109:	50                   	push   eax
c002110a:	e8 03 19 ff ff       	call   c0012a12 <Filesystem::~Filesystem()>
c002110f:	83 c4 10             	add    esp,0x10
c0021112:	90                   	nop
c0021113:	83 c4 0c             	add    esp,0xc
c0021116:	c3                   	ret    
c0021117:	90                   	nop

c0021118 <ISO9660::~ISO9660()>:
c0021118:	83 ec 0c             	sub    esp,0xc
c002111b:	83 ec 0c             	sub    esp,0xc
c002111e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021122:	e8 cd ff ff ff       	call   c00210f4 <ISO9660::~ISO9660()>
c0021127:	83 c4 10             	add    esp,0x10
c002112a:	83 ec 08             	sub    esp,0x8
c002112d:	6a 08                	push   0x8
c002112f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021133:	e8 d3 14 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0021138:	83 c4 10             	add    esp,0x10
c002113b:	83 c4 0c             	add    esp,0xc
c002113e:	c3                   	ret    

c002113f <__memmem(unsigned char*, int, unsigned char*, int)>:
c002113f:	55                   	push   ebp
c0021140:	31 c9                	xor    ecx,ecx
c0021142:	57                   	push   edi
c0021143:	56                   	push   esi
c0021144:	53                   	push   ebx
c0021145:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021149:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002114d:	89 eb                	mov    ebx,ebp
c002114f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021153:	39 ce                	cmp    esi,ecx
c0021155:	7e 17                	jle    c002116e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021157:	31 d2                	xor    edx,edx
c0021159:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002115d:	7d 13                	jge    c0021172 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002115f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021163:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021166:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021169:	75 0d                	jne    c0021178 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002116b:	42                   	inc    edx
c002116c:	eb eb                	jmp    c0021159 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002116e:	31 c0                	xor    eax,eax
c0021170:	eb 0a                	jmp    c002117c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021172:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021176:	eb 04                	jmp    c002117c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021178:	41                   	inc    ecx
c0021179:	43                   	inc    ebx
c002117a:	eb d7                	jmp    c0021153 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002117c:	5b                   	pop    ebx
c002117d:	5e                   	pop    esi
c002117e:	5f                   	pop    edi
c002117f:	5d                   	pop    ebp
c0021180:	c3                   	ret    

c0021181 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021181:	57                   	push   edi
c0021182:	56                   	push   esi
c0021183:	53                   	push   ebx
c0021184:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021188:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002118c:	39 0d e0 10 03 c0    	cmp    DWORD PTR ds:0xc00310e0,ecx
c0021192:	75 08                	jne    c002119c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021194:	38 05 54 cf 02 c0    	cmp    BYTE PTR ds:0xc002cf54,al
c002119a:	74 2b                	je     c00211c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c002119c:	83 ec 0c             	sub    esp,0xc
c002119f:	a2 54 cf 02 c0       	mov    ds:0xc002cf54,al
c00211a4:	68 00 11 03 c0       	push   0xc0031100
c00211a9:	0f be c0             	movsx  eax,al
c00211ac:	6a 01                	push   0x1
c00211ae:	89 0d e0 10 03 c0    	mov    DWORD PTR ds:0xc00310e0,ecx
c00211b4:	31 db                	xor    ebx,ebx
c00211b6:	53                   	push   ebx
c00211b7:	51                   	push   ecx
c00211b8:	ff 34 85 bc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2144]
c00211bf:	e8 74 4e ff ff       	call   c0016038 <LogicalDisk::read(unsigned long long, int, void*)>
c00211c4:	83 c4 20             	add    esp,0x20
c00211c7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00211cb:	be 00 11 03 c0       	mov    esi,0xc0031100
c00211d0:	b9 00 08 00 00       	mov    ecx,0x800
c00211d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211d7:	5b                   	pop    ebx
c00211d8:	5e                   	pop    esi
c00211d9:	5f                   	pop    edi
c00211da:	c3                   	ret    
c00211db:	90                   	nop

c00211dc <ISO9660::tryMount(LogicalDisk*, int)>:
c00211dc:	81 ec 10 08 00 00    	sub    esp,0x810
c00211e2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00211e9:	83 c0 41             	add    eax,0x41
c00211ec:	0f be c0             	movsx  eax,al
c00211ef:	50                   	push   eax
c00211f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211f4:	50                   	push   eax
c00211f5:	6a 10                	push   0x10
c00211f7:	e8 85 ff ff ff       	call   c0021181 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211fc:	83 c4 10             	add    esp,0x10
c00211ff:	31 c0                	xor    eax,eax
c0021201:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021206:	75 1d                	jne    c0021225 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021208:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002120d:	75 16                	jne    c0021225 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002120f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021214:	75 0f                	jne    c0021225 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021216:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002121b:	75 08                	jne    c0021225 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002121d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021222:	0f 94 c0             	sete   al
c0021225:	81 c4 0c 08 00 00    	add    esp,0x80c
c002122b:	c3                   	ret    

c002122c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002122c:	55                   	push   ebp
c002122d:	57                   	push   edi
c002122e:	56                   	push   esi
c002122f:	53                   	push   ebx
c0021230:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021236:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002123d:	85 ed                	test   ebp,ebp
c002123f:	0f 84 da 01 00 00    	je     c002141f <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021245:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002124d:	0f 84 cc 01 00 00    	je     c002141f <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021253:	b8 01 00 00 00       	mov    eax,0x1
c0021258:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002125c:	0f 85 c2 01 00 00    	jne    c0021424 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021262:	31 d2                	xor    edx,edx
c0021264:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002126b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002126e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021271:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021274:	89 04 24             	mov    DWORD PTR [esp],eax
c0021277:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002127b:	01 c8                	add    eax,ecx
c002127d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021280:	11 da                	adc    edx,ebx
c0021282:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021286:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002128a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002128e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021292:	19 d7                	sbb    edi,edx
c0021294:	72 11                	jb     c00212a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021296:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021299:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002129d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00212a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00212a5:	eb 0c                	jmp    c00212b3 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00212a7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00212ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00212af:	29 ce                	sub    esi,ecx
c00212b1:	19 df                	sbb    edi,ebx
c00212b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00212b6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00212b9:	0f a4 c2 0b          	shld   edx,eax,0xb
c00212bd:	c1 e0 0b             	shl    eax,0xb
c00212c0:	01 c8                	add    eax,ecx
c00212c2:	11 da                	adc    edx,ebx
c00212c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00212c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212cb:	51                   	push   ecx
c00212cc:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212d0:	50                   	push   eax
c00212d1:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00212d5:	53                   	push   ebx
c00212d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00212da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212de:	0f ac d0 0b          	shrd   eax,edx,0xb
c00212e2:	50                   	push   eax
c00212e3:	e8 99 fe ff ff       	call   c0021181 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212e8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00212eb:	b8 00 08 00 00       	mov    eax,0x800
c00212f0:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00212f6:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00212fa:	29 d0                	sub    eax,edx
c00212fc:	83 c4 10             	add    esp,0x10
c00212ff:	89 f9                	mov    ecx,edi
c0021301:	39 c6                	cmp    esi,eax
c0021303:	83 d9 00             	sbb    ecx,0x0
c0021306:	7d 1b                	jge    c0021323 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021308:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002130d:	75 12                	jne    c0021321 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c002130f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021316:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002131c:	e9 fa 00 00 00       	jmp    c002141b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021321:	89 f0                	mov    eax,esi
c0021323:	01 d3                	add    ebx,edx
c0021325:	31 d2                	xor    edx,edx
c0021327:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c002132b:	39 c2                	cmp    edx,eax
c002132d:	7d 14                	jge    c0021343 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002132f:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021336:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002133a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002133d:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021340:	42                   	inc    edx
c0021341:	eb e8                	jmp    c002132b <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021343:	89 c2                	mov    edx,eax
c0021345:	85 c0                	test   eax,eax
c0021347:	79 02                	jns    c002134b <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021349:	31 d2                	xor    edx,edx
c002134b:	01 c2                	add    edx,eax
c002134d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021350:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021357:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002135b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002135f:	99                   	cdq    
c0021360:	01 c1                	add    ecx,eax
c0021362:	11 d3                	adc    ebx,edx
c0021364:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021368:	29 c6                	sub    esi,eax
c002136a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002136e:	19 d7                	sbb    edi,edx
c0021370:	89 34 24             	mov    DWORD PTR [esp],esi
c0021373:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021377:	b8 ff 07 00 00       	mov    eax,0x7ff
c002137c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002137f:	b8 00 00 00 00       	mov    eax,0x0
c0021384:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021388:	7d 43                	jge    c00213cd <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002138a:	52                   	push   edx
c002138b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002138f:	50                   	push   eax
c0021390:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021394:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021398:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002139c:	0f ac d0 0b          	shrd   eax,edx,0xb
c00213a0:	50                   	push   eax
c00213a1:	e8 db fd ff ff       	call   c0021181 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213a6:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00213ae:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00213b3:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00213bb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00213c3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00213c8:	83 c4 10             	add    esp,0x10
c00213cb:	eb aa                	jmp    c0021377 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00213cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213d1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00213d4:	74 2a                	je     c0021400 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00213d6:	50                   	push   eax
c00213d7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213db:	50                   	push   eax
c00213dc:	8d 74 24 28          	lea    esi,[esp+0x28]
c00213e0:	56                   	push   esi
c00213e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00213e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00213e9:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00213ed:	51                   	push   ecx
c00213ee:	e8 8e fd ff ff       	call   c0021181 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213f3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00213f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00213fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213fd:	83 c4 10             	add    esp,0x10
c0021400:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021407:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002140b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002140f:	89 18                	mov    DWORD PTR [eax],ebx
c0021411:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021415:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021418:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002141b:	31 c0                	xor    eax,eax
c002141d:	eb 05                	jmp    c0021424 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002141f:	b8 04 00 00 00       	mov    eax,0x4
c0021424:	81 c4 2c 08 00 00    	add    esp,0x82c
c002142a:	5b                   	pop    ebx
c002142b:	5e                   	pop    esi
c002142c:	5f                   	pop    edi
c002142d:	5d                   	pop    ebp
c002142e:	c3                   	ret    
c002142f:	90                   	nop

c0021430 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021430:	55                   	push   ebp
c0021431:	57                   	push   edi
c0021432:	56                   	push   esi
c0021433:	53                   	push   ebx
c0021434:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002143a:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021441:	85 ed                	test   ebp,ebp
c0021443:	0f 84 51 02 00 00    	je     c002169a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021449:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021451:	0f 84 43 02 00 00    	je     c002169a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021457:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002145a:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002145d:	75 0a                	jne    c0021469 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002145f:	b8 07 00 00 00       	mov    eax,0x7
c0021464:	e9 36 02 00 00       	jmp    c002169f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021469:	50                   	push   eax
c002146a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002146e:	50                   	push   eax
c002146f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021476:	53                   	push   ebx
c0021477:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002147a:	c1 e0 0b             	shl    eax,0xb
c002147d:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021480:	c1 e8 0b             	shr    eax,0xb
c0021483:	50                   	push   eax
c0021484:	e8 f8 fc ff ff       	call   c0021181 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021489:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002148c:	83 c4 10             	add    esp,0x10
c002148f:	89 c1                	mov    ecx,eax
c0021491:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021494:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002149a:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002149d:	84 db                	test   bl,bl
c002149f:	0f 85 8b 00 00 00    	jne    c0021530 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00214a5:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00214ab:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00214ae:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00214b4:	29 c6                	sub    esi,eax
c00214b6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00214ba:	89 f3                	mov    ebx,esi
c00214bc:	89 f1                	mov    ecx,esi
c00214be:	c1 fb 1f             	sar    ebx,0x1f
c00214c1:	01 f0                	add    eax,esi
c00214c3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00214c6:	11 da                	adc    edx,ebx
c00214c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00214cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00214cf:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00214d2:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00214d5:	89 d8                	mov    eax,ebx
c00214d7:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00214db:	ba 00 00 00 00       	mov    edx,0x0
c00214e0:	19 f8                	sbb    eax,edi
c00214e2:	b8 00 00 00 00       	mov    eax,0x0
c00214e7:	73 08                	jae    c00214f1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00214e9:	89 f0                	mov    eax,esi
c00214eb:	89 fa                	mov    edx,edi
c00214ed:	29 c8                	sub    eax,ecx
c00214ef:	19 da                	sbb    edx,ebx
c00214f1:	89 d7                	mov    edi,edx
c00214f3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00214f6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00214f9:	09 c7                	or     edi,eax
c00214fb:	0f 84 5e ff ff ff    	je     c002145f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021501:	57                   	push   edi
c0021502:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021506:	50                   	push   eax
c0021507:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002150e:	53                   	push   ebx
c002150f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021512:	c1 e0 0b             	shl    eax,0xb
c0021515:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021519:	c1 e8 0b             	shr    eax,0xb
c002151c:	50                   	push   eax
c002151d:	e8 5f fc ff ff       	call   c0021181 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021522:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021525:	83 c4 10             	add    esp,0x10
c0021528:	25 ff 07 00 00       	and    eax,0x7ff
c002152d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021530:	31 ff                	xor    edi,edi
c0021532:	56                   	push   esi
c0021533:	6a 28                	push   0x28
c0021535:	6a 00                	push   0x0
c0021537:	8d 44 24 24          	lea    eax,[esp+0x24]
c002153b:	50                   	push   eax
c002153c:	e8 0f f2 fd ff       	call   c0000750 <memset>
c0021541:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021544:	25 ff 07 00 00       	and    eax,0x7ff
c0021549:	89 c6                	mov    esi,eax
c002154b:	83 c6 21             	add    esi,0x21
c002154e:	83 d7 00             	adc    edi,0x0
c0021551:	83 c4 10             	add    esp,0x10
c0021554:	31 c9                	xor    ecx,ecx
c0021556:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002155d:	83 f9 28             	cmp    ecx,0x28
c0021560:	88 04 24             	mov    BYTE PTR [esp],al
c0021563:	0f 94 c2             	sete   dl
c0021566:	88 d0                	mov    al,dl
c0021568:	ba ff 07 00 00       	mov    edx,0x7ff
c002156d:	39 f2                	cmp    edx,esi
c002156f:	ba 00 00 00 00       	mov    edx,0x0
c0021574:	19 fa                	sbb    edx,edi
c0021576:	0f 92 c2             	setb   dl
c0021579:	09 c2                	or     edx,eax
c002157b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002157f:	0f 94 c0             	sete   al
c0021582:	08 d0                	or     al,dl
c0021584:	75 16                	jne    c002159c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021586:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002158a:	74 10                	je     c002159c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002158c:	8a 04 24             	mov    al,BYTE PTR [esp]
c002158f:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021593:	41                   	inc    ecx
c0021594:	83 c6 01             	add    esi,0x1
c0021597:	83 d7 00             	adc    edi,0x0
c002159a:	eb ba                	jmp    c0021556 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c002159c:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00215a3:	83 ec 0c             	sub    esp,0xc
c00215a6:	8d 74 24 24          	lea    esi,[esp+0x24]
c00215aa:	56                   	push   esi
c00215ab:	e8 bc f1 fd ff       	call   c000076c <strlen>
c00215b0:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00215b7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215bb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00215c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215c6:	5a                   	pop    edx
c00215c7:	25 ff 07 00 00       	and    eax,0x7ff
c00215cc:	59                   	pop    ecx
c00215cd:	01 f8                	add    eax,edi
c00215cf:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00215d5:	83 e0 02             	and    eax,0x2
c00215d8:	3c 01                	cmp    al,0x1
c00215da:	19 c0                	sbb    eax,eax
c00215dc:	83 c0 02             	add    eax,0x2
c00215df:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215e3:	56                   	push   esi
c00215e4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00215e8:	50                   	push   eax
c00215e9:	e8 1e f2 fd ff       	call   c000080c <strcpy>
c00215ee:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00215f2:	83 c4 10             	add    esp,0x10
c00215f5:	84 c0                	test   al,al
c00215f7:	75 21                	jne    c002161a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00215f9:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021601:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021609:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021611:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021618:	eb 28                	jmp    c0021642 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002161a:	fe c8                	dec    al
c002161c:	75 24                	jne    c0021642 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002161e:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021626:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002162e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021636:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002163d:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021642:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021646:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002164d:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021654:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021656:	0f b6 f3             	movzx  esi,bl
c0021659:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021660:	31 db                	xor    ebx,ebx
c0021662:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021668:	89 df                	mov    edi,ebx
c002166a:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002166d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021670:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021673:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021676:	39 c6                	cmp    esi,eax
c0021678:	19 d7                	sbb    edi,edx
c002167a:	72 10                	jb     c002168c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002167c:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021683:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002168a:	eb 0a                	jmp    c0021696 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002168c:	29 f0                	sub    eax,esi
c002168e:	19 da                	sbb    edx,ebx
c0021690:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021693:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021696:	31 c0                	xor    eax,eax
c0021698:	eb 05                	jmp    c002169f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002169a:	b8 04 00 00 00       	mov    eax,0x4
c002169f:	81 c4 5c 09 00 00    	add    esp,0x95c
c00216a5:	5b                   	pop    ebx
c00216a6:	5e                   	pop    esi
c00216a7:	5f                   	pop    edi
c00216a8:	5d                   	pop    ebp
c00216a9:	c3                   	ret    

c00216aa <readRoot(unsigned int*, unsigned int*, char)>:
c00216aa:	57                   	push   edi
c00216ab:	56                   	push   esi
c00216ac:	81 ec 38 08 00 00    	sub    esp,0x838
c00216b2:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00216ba:	50                   	push   eax
c00216bb:	8d 44 24 38          	lea    eax,[esp+0x38]
c00216bf:	50                   	push   eax
c00216c0:	6a 10                	push   0x10
c00216c2:	e8 ba fa ff ff       	call   c0021181 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216c7:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00216ce:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00216d2:	b9 22 00 00 00       	mov    ecx,0x22
c00216d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00216d9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00216e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00216e4:	89 10                	mov    DWORD PTR [eax],edx
c00216e6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00216ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00216f1:	89 10                	mov    DWORD PTR [eax],edx
c00216f3:	81 c4 44 08 00 00    	add    esp,0x844
c00216f9:	b0 01                	mov    al,0x1
c00216fb:	5e                   	pop    esi
c00216fc:	5f                   	pop    edi
c00216fd:	c3                   	ret    

c00216fe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00216fe:	55                   	push   ebp
c00216ff:	57                   	push   edi
c0021700:	56                   	push   esi
c0021701:	53                   	push   ebx
c0021702:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021708:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002170f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021716:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002171a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002171e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021722:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021726:	75 03                	jne    c002172b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021728:	83 c3 02             	add    ebx,0x2
c002172b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002172e:	75 03                	jne    c0021733 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021730:	43                   	inc    ebx
c0021731:	eb f8                	jmp    c002172b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021733:	51                   	push   ecx
c0021734:	68 00 01 00 00       	push   0x100
c0021739:	6a 00                	push   0x0
c002173b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002173f:	50                   	push   eax
c0021740:	e8 0b f0 fd ff       	call   c0000750 <memset>
c0021745:	83 c4 10             	add    esp,0x10
c0021748:	31 d2                	xor    edx,edx
c002174a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002174d:	84 c0                	test   al,al
c002174f:	74 21                	je     c0021772 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021751:	3c 2f                	cmp    al,0x2f
c0021753:	75 0b                	jne    c0021760 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021755:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021759:	bd 01 00 00 00       	mov    ebp,0x1
c002175e:	eb 14                	jmp    c0021774 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021760:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021763:	80 f9 19             	cmp    cl,0x19
c0021766:	77 03                	ja     c002176b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021768:	83 e8 20             	sub    eax,0x20
c002176b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002176f:	42                   	inc    edx
c0021770:	eb d8                	jmp    c002174a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021772:	31 ed                	xor    ebp,ebp
c0021774:	83 ec 0c             	sub    esp,0xc
c0021777:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002177e:	e8 16 de fe ff       	call   c000f599 <malloc>
c0021783:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002178a:	89 c6                	mov    esi,eax
c002178c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021792:	c1 ef 0b             	shr    edi,0xb
c0021795:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002179c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00217a0:	83 c4 10             	add    esp,0x10
c00217a3:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00217a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00217ac:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00217b3:	74 28                	je     c00217dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00217b5:	52                   	push   edx
c00217b6:	57                   	push   edi
c00217b7:	50                   	push   eax
c00217b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00217bc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00217c3:	e8 b9 f9 ff ff       	call   c0021181 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00217cc:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00217d3:	05 00 08 00 00       	add    eax,0x800
c00217d8:	83 c4 10             	add    esp,0x10
c00217db:	eb cb                	jmp    c00217a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00217dd:	83 ec 0c             	sub    esp,0xc
c00217e0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00217e4:	57                   	push   edi
c00217e5:	e8 82 ef fd ff       	call   c000076c <strlen>
c00217ea:	50                   	push   eax
c00217eb:	57                   	push   edi
c00217ec:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00217f3:	56                   	push   esi
c00217f4:	e8 46 f9 ff ff       	call   c002113f <__memmem(unsigned char*, int, unsigned char*, int)>
c00217f9:	83 c4 20             	add    esp,0x20
c00217fc:	85 c0                	test   eax,eax
c00217fe:	75 13                	jne    c0021813 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021800:	83 ec 0c             	sub    esp,0xc
c0021803:	56                   	push   esi
c0021804:	e8 a0 dd fe ff       	call   c000f5a9 <free>
c0021809:	83 c4 10             	add    esp,0x10
c002180c:	31 c0                	xor    eax,eax
c002180e:	e9 b3 00 00 00       	jmp    c00218c6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021813:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021817:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002181b:	c1 e7 08             	shl    edi,0x8
c002181e:	c1 e2 10             	shl    edx,0x10
c0021821:	09 d7                	or     edi,edx
c0021823:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021827:	09 d7                	or     edi,edx
c0021829:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002182d:	c1 e2 18             	shl    edx,0x18
c0021830:	09 d7                	or     edi,edx
c0021832:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021836:	89 d1                	mov    ecx,edx
c0021838:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002183c:	c1 e1 08             	shl    ecx,0x8
c002183f:	c1 e2 10             	shl    edx,0x10
c0021842:	09 ca                	or     edx,ecx
c0021844:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021848:	09 ca                	or     edx,ecx
c002184a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002184e:	c1 e1 18             	shl    ecx,0x18
c0021851:	09 ca                	or     edx,ecx
c0021853:	89 e9                	mov    ecx,ebp
c0021855:	84 c9                	test   cl,cl
c0021857:	74 3c                	je     c0021895 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021859:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002185d:	83 ec 0c             	sub    esp,0xc
c0021860:	56                   	push   esi
c0021861:	e8 43 dd fe ff       	call   c000f5a9 <free>
c0021866:	83 c4 0c             	add    esp,0xc
c0021869:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021870:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021875:	50                   	push   eax
c0021876:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002187d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021884:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021888:	52                   	push   edx
c0021889:	57                   	push   edi
c002188a:	53                   	push   ebx
c002188b:	e8 6e fe ff ff       	call   c00216fe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021890:	83 c4 20             	add    esp,0x20
c0021893:	eb 31                	jmp    c00218c6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021895:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021898:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002189f:	d0 e8                	shr    al,1
c00218a1:	89 3b                	mov    DWORD PTR [ebx],edi
c00218a3:	83 e0 01             	and    eax,0x1
c00218a6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00218ad:	83 ec 0c             	sub    esp,0xc
c00218b0:	89 13                	mov    DWORD PTR [ebx],edx
c00218b2:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00218b9:	89 03                	mov    DWORD PTR [ebx],eax
c00218bb:	56                   	push   esi
c00218bc:	e8 e8 dc fe ff       	call   c000f5a9 <free>
c00218c1:	83 c4 10             	add    esp,0x10
c00218c4:	b0 01                	mov    al,0x1
c00218c6:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218cc:	5b                   	pop    ebx
c00218cd:	5e                   	pop    esi
c00218ce:	5f                   	pop    edi
c00218cf:	5d                   	pop    ebp
c00218d0:	c3                   	ret    

c00218d1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00218d1:	55                   	push   ebp
c00218d2:	57                   	push   edi
c00218d3:	56                   	push   esi
c00218d4:	53                   	push   ebx
c00218d5:	83 ec 20             	sub    esp,0x20
c00218d8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00218dc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00218e0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00218e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218ec:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00218f4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00218f9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00218ff:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021905:	57                   	push   edi
c0021906:	8d 44 24 14          	lea    eax,[esp+0x14]
c002190a:	50                   	push   eax
c002190b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002190f:	50                   	push   eax
c0021910:	e8 95 fd ff ff       	call   c00216aa <readRoot(unsigned int*, unsigned int*, char)>
c0021915:	5a                   	pop    edx
c0021916:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002191a:	e8 4d ee fd ff       	call   c000076c <strlen>
c002191f:	83 c4 10             	add    esp,0x10
c0021922:	83 f8 03             	cmp    eax,0x3
c0021925:	77 17                	ja     c002193e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021927:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002192b:	89 03                	mov    DWORD PTR [ebx],eax
c002192d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021931:	89 06                	mov    DWORD PTR [esi],eax
c0021933:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002193a:	b0 01                	mov    al,0x1
c002193c:	eb 19                	jmp    c0021957 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002193e:	50                   	push   eax
c002193f:	55                   	push   ebp
c0021940:	57                   	push   edi
c0021941:	56                   	push   esi
c0021942:	53                   	push   ebx
c0021943:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021947:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002194b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002194f:	e8 aa fd ff ff       	call   c00216fe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021954:	83 c4 20             	add    esp,0x20
c0021957:	83 c4 1c             	add    esp,0x1c
c002195a:	5b                   	pop    ebx
c002195b:	5e                   	pop    esi
c002195c:	5f                   	pop    edi
c002195d:	5d                   	pop    ebp
c002195e:	c3                   	ret    
c002195f:	90                   	nop

c0021960 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021960:	57                   	push   edi
c0021961:	56                   	push   esi
c0021962:	53                   	push   ebx
c0021963:	83 ec 10             	sub    esp,0x10
c0021966:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002196a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002196e:	85 ff                	test   edi,edi
c0021970:	0f 84 8b 00 00 00    	je     c0021a01 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021976:	85 f6                	test   esi,esi
c0021978:	0f 84 83 00 00 00    	je     c0021a01 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002197e:	b8 03 00 00 00       	mov    eax,0x3
c0021983:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021988:	75 7c                	jne    c0021a06 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c002198a:	83 ec 0c             	sub    esp,0xc
c002198d:	6a 1c                	push   0x1c
c002198f:	e8 05 dc fe ff       	call   c000f599 <malloc>
c0021994:	89 07                	mov    DWORD PTR [edi],eax
c0021996:	89 c3                	mov    ebx,eax
c0021998:	58                   	pop    eax
c0021999:	8d 44 24 18          	lea    eax,[esp+0x18]
c002199d:	50                   	push   eax
c002199e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00219a1:	50                   	push   eax
c00219a2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219a6:	50                   	push   eax
c00219a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219ab:	50                   	push   eax
c00219ac:	56                   	push   esi
c00219ad:	e8 1f ff ff ff       	call   c00218d1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219b2:	83 c4 20             	add    esp,0x20
c00219b5:	84 c0                	test   al,al
c00219b7:	74 07                	je     c00219c0 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00219b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00219be:	74 0b                	je     c00219cb <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00219c0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00219c4:	b8 01 00 00 00       	mov    eax,0x1
c00219c9:	eb 3b                	jmp    c0021a06 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219cf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00219d3:	89 03                	mov    DWORD PTR [ebx],eax
c00219d5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00219dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00219e7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219ee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00219f1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00219f8:	8a 06                	mov    al,BYTE PTR [esi]
c00219fa:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00219fd:	31 c0                	xor    eax,eax
c00219ff:	eb 05                	jmp    c0021a06 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021a01:	b8 04 00 00 00       	mov    eax,0x4
c0021a06:	83 c4 10             	add    esp,0x10
c0021a09:	5b                   	pop    ebx
c0021a0a:	5e                   	pop    esi
c0021a0b:	5f                   	pop    edi
c0021a0c:	c3                   	ret    
c0021a0d:	90                   	nop

c0021a0e <ISO9660::exists(char const*)>:
c0021a0e:	83 ec 28             	sub    esp,0x28
c0021a11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021a15:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021a19:	52                   	push   edx
c0021a1a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021a1d:	52                   	push   edx
c0021a1e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a22:	52                   	push   edx
c0021a23:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a27:	52                   	push   edx
c0021a28:	50                   	push   eax
c0021a29:	e8 a3 fe ff ff       	call   c00218d1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a2e:	83 c4 3c             	add    esp,0x3c
c0021a31:	c3                   	ret    

c0021a32 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021a32:	56                   	push   esi
c0021a33:	53                   	push   ebx
c0021a34:	83 ec 14             	sub    esp,0x14
c0021a37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021a3b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021a3f:	85 db                	test   ebx,ebx
c0021a41:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021a45:	0f 94 c2             	sete   dl
c0021a48:	85 f6                	test   esi,esi
c0021a4a:	0f 94 c0             	sete   al
c0021a4d:	08 c2                	or     dl,al
c0021a4f:	75 68                	jne    c0021ab9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a51:	85 c9                	test   ecx,ecx
c0021a53:	74 64                	je     c0021ab9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a55:	83 ec 0c             	sub    esp,0xc
c0021a58:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a5b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a5f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a65:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a6c:	50                   	push   eax
c0021a6d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021a70:	50                   	push   eax
c0021a71:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a75:	50                   	push   eax
c0021a76:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a7a:	50                   	push   eax
c0021a7b:	51                   	push   ecx
c0021a7c:	e8 50 fe ff ff       	call   c00218d1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a81:	83 c4 20             	add    esp,0x20
c0021a84:	ba 01 00 00 00       	mov    edx,0x1
c0021a89:	84 c0                	test   al,al
c0021a8b:	74 31                	je     c0021abe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a91:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a98:	89 03                	mov    DWORD PTR [ebx],eax
c0021a9a:	ba 00 00 00 00       	mov    edx,0x0
c0021a9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021aa3:	85 c0                	test   eax,eax
c0021aa5:	0f 95 06             	setne  BYTE PTR [esi]
c0021aa8:	74 14                	je     c0021abe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021aaa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021ab0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ab7:	eb 05                	jmp    c0021abe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021ab9:	ba 04 00 00 00       	mov    edx,0x4
c0021abe:	83 c4 14             	add    esp,0x14
c0021ac1:	89 d0                	mov    eax,edx
c0021ac3:	5b                   	pop    ebx
c0021ac4:	5e                   	pop    esi
c0021ac5:	c3                   	ret    

c0021ac6 <ISO9660::openDir(char const*, void**)>:
c0021ac6:	57                   	push   edi
c0021ac7:	56                   	push   esi
c0021ac8:	53                   	push   ebx
c0021ac9:	83 ec 10             	sub    esp,0x10
c0021acc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021ad0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021ad4:	85 ff                	test   edi,edi
c0021ad6:	74 7b                	je     c0021b53 <ISO9660::openDir(char const*, void**)+0x8d>
c0021ad8:	85 f6                	test   esi,esi
c0021ada:	74 77                	je     c0021b53 <ISO9660::openDir(char const*, void**)+0x8d>
c0021adc:	83 ec 0c             	sub    esp,0xc
c0021adf:	6a 1c                	push   0x1c
c0021ae1:	e8 b3 da fe ff       	call   c000f599 <malloc>
c0021ae6:	89 07                	mov    DWORD PTR [edi],eax
c0021ae8:	89 c3                	mov    ebx,eax
c0021aea:	58                   	pop    eax
c0021aeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021aef:	50                   	push   eax
c0021af0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021af3:	50                   	push   eax
c0021af4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021af8:	50                   	push   eax
c0021af9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021afd:	50                   	push   eax
c0021afe:	56                   	push   esi
c0021aff:	e8 cd fd ff ff       	call   c00218d1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b04:	83 c4 20             	add    esp,0x20
c0021b07:	84 c0                	test   al,al
c0021b09:	74 07                	je     c0021b12 <ISO9660::openDir(char const*, void**)+0x4c>
c0021b0b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021b10:	75 0b                	jne    c0021b1d <ISO9660::openDir(char const*, void**)+0x57>
c0021b12:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021b16:	b8 01 00 00 00       	mov    eax,0x1
c0021b1b:	eb 3b                	jmp    c0021b58 <ISO9660::openDir(char const*, void**)+0x92>
c0021b1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b21:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b25:	89 03                	mov    DWORD PTR [ebx],eax
c0021b27:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b32:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b39:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b40:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b43:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b4a:	8a 06                	mov    al,BYTE PTR [esi]
c0021b4c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b4f:	31 c0                	xor    eax,eax
c0021b51:	eb 05                	jmp    c0021b58 <ISO9660::openDir(char const*, void**)+0x92>
c0021b53:	b8 04 00 00 00       	mov    eax,0x4
c0021b58:	83 c4 10             	add    esp,0x10
c0021b5b:	5b                   	pop    ebx
c0021b5c:	5e                   	pop    esi
c0021b5d:	5f                   	pop    edi
c0021b5e:	c3                   	ret    
c0021b5f:	90                   	nop

c0021b60 <ISO9660::ISO9660()>:
c0021b60:	83 ec 0c             	sub    esp,0xc
c0021b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b67:	83 ec 0c             	sub    esp,0xc
c0021b6a:	50                   	push   eax
c0021b6b:	e8 7e 0e ff ff       	call   c00129ee <Filesystem::Filesystem()>
c0021b70:	83 c4 10             	add    esp,0x10
c0021b73:	ba 40 bf 02 c0       	mov    edx,0xc002bf40
c0021b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b7c:	89 10                	mov    DWORD PTR [eax],edx
c0021b7e:	90                   	nop
c0021b7f:	83 c4 0c             	add    esp,0xc
c0021b82:	c3                   	ret    
c0021b83:	90                   	nop

c0021b84 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b84:	83 ec 1c             	sub    esp,0x1c
c0021b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b8b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021b8f:	89 10                	mov    DWORD PTR [eax],edx
c0021b91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b99:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ba0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021ba4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ba7:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021bac:	75 23                	jne    c0021bd1 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021bae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0021bb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bbb:	0f af c2             	imul   eax,edx
c0021bbe:	85 c0                	test   eax,eax
c0021bc0:	79 03                	jns    c0021bc5 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021bc2:	83 c0 03             	add    eax,0x3
c0021bc5:	c1 f8 02             	sar    eax,0x2
c0021bc8:	05 a0 0f 00 00       	add    eax,0xfa0
c0021bcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021bd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bd5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021bd9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021bdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021be0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021be7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021beb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021bf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021bf9:	c1 e0 02             	shl    eax,0x2
c0021bfc:	83 ec 0c             	sub    esp,0xc
c0021bff:	50                   	push   eax
c0021c00:	e8 94 d9 fe ff       	call   c000f599 <malloc>
c0021c05:	83 c4 10             	add    esp,0x10
c0021c08:	89 c2                	mov    edx,eax
c0021c0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021c11:	83 ec 04             	sub    esp,0x4
c0021c14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021c18:	50                   	push   eax
c0021c19:	6a 01                	push   0x1
c0021c1b:	6a 04                	push   0x4
c0021c1d:	e8 43 6f fe ff       	call   c0008b65 <src_new>
c0021c22:	83 c4 10             	add    esp,0x10
c0021c25:	89 c2                	mov    edx,eax
c0021c27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c2b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c32:	85 c0                	test   eax,eax
c0021c34:	74 10                	je     c0021c46 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021c36:	83 ec 0c             	sub    esp,0xc
c0021c39:	68 a0 bf 02 c0       	push   0xc002bfa0
c0021c3e:	e8 0c 82 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0021c43:	83 c4 10             	add    esp,0x10
c0021c46:	a0 00 1d 03 c0       	mov    al,ds:0xc0031d00
c0021c4b:	83 f0 01             	xor    eax,0x1
c0021c4e:	84 c0                	test   al,al
c0021c50:	74 57                	je     c0021ca9 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021c52:	a1 bc bf 02 c0       	mov    eax,ds:0xc002bfbc
c0021c57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c5b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c63:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021c6b:	7f 35                	jg     c0021ca2 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021c6d:	83 ec 0c             	sub    esp,0xc
c0021c70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c74:	e8 d6 53 00 00       	call   c002704f <__floatsisf>
c0021c79:	83 c4 10             	add    esp,0x10
c0021c7c:	8b 15 bc bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bfbc
c0021c82:	83 ec 08             	sub    esp,0x8
c0021c85:	52                   	push   edx
c0021c86:	50                   	push   eax
c0021c87:	e8 d5 4f 00 00       	call   c0026c61 <__mulsf3>
c0021c8c:	83 c4 10             	add    esp,0x10
c0021c8f:	89 c2                	mov    edx,eax
c0021c91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c95:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c0021c9c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021ca0:	eb c1                	jmp    c0021c63 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021ca2:	c6 05 00 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d00,0x1
c0021ca9:	90                   	nop
c0021caa:	83 c4 1c             	add    esp,0x1c
c0021cad:	c3                   	ret    

c0021cae <SoundChannel::~SoundChannel()>:
c0021cae:	83 ec 0c             	sub    esp,0xc
c0021cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021cb8:	83 ec 0c             	sub    esp,0xc
c0021cbb:	50                   	push   eax
c0021cbc:	e8 e8 d8 fe ff       	call   c000f5a9 <free>
c0021cc1:	83 c4 10             	add    esp,0x10
c0021cc4:	90                   	nop
c0021cc5:	83 c4 0c             	add    esp,0xc
c0021cc8:	c3                   	ret    
c0021cc9:	90                   	nop

c0021cca <SoundChannel::getSampleRate()>:
c0021cca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cd0:	c3                   	ret    
c0021cd1:	90                   	nop

c0021cd2 <SoundChannel::getBits()>:
c0021cd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cd9:	c3                   	ret    

c0021cda <SoundChannel::getBufferUsed()>:
c0021cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cde:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021ce1:	c3                   	ret    

c0021ce2 <SoundChannel::getBufferSize()>:
c0021ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ce6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ce9:	c3                   	ret    

c0021cea <SoundChannel::unbuffer(float*, int, int)>:
c0021cea:	56                   	push   esi
c0021ceb:	53                   	push   ebx
c0021cec:	83 ec 40             	sub    esp,0x40
c0021cef:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021cf3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021cf6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cfa:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021cfd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021d01:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021d05:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021d09:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021d0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021d11:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021d15:	e8 35 53 00 00       	call   c002704f <__floatsisf>
c0021d1a:	5a                   	pop    edx
c0021d1b:	89 c6                	mov    esi,eax
c0021d1d:	ff 33                	push   DWORD PTR [ebx]
c0021d1f:	e8 2b 53 00 00       	call   c002704f <__floatsisf>
c0021d24:	59                   	pop    ecx
c0021d25:	5a                   	pop    edx
c0021d26:	50                   	push   eax
c0021d27:	56                   	push   esi
c0021d28:	e8 f7 50 00 00       	call   c0026e24 <__divsf3>
c0021d2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d30:	e8 ea 65 00 00       	call   c002831f <__extendsfdf2>
c0021d35:	59                   	pop    ecx
c0021d36:	5e                   	pop    esi
c0021d37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021d3f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021d47:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d4b:	50                   	push   eax
c0021d4c:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d4f:	e8 06 6a fe ff       	call   c000875a <src_process>
c0021d54:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d58:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d5b:	83 c4 0c             	add    esp,0xc
c0021d5e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d61:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021d64:	29 d0                	sub    eax,edx
c0021d66:	c1 e0 02             	shl    eax,0x2
c0021d69:	50                   	push   eax
c0021d6a:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021d6d:	50                   	push   eax
c0021d6e:	51                   	push   ecx
c0021d6f:	e8 14 e9 fd ff       	call   c0000688 <memmove>
c0021d74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d78:	83 c4 44             	add    esp,0x44
c0021d7b:	5b                   	pop    ebx
c0021d7c:	5e                   	pop    esi
c0021d7d:	c3                   	ret    

c0021d7e <SoundChannel::buffer16(short*, int)>:
c0021d7e:	55                   	push   ebp
c0021d7f:	57                   	push   edi
c0021d80:	56                   	push   esi
c0021d81:	53                   	push   ebx
c0021d82:	83 ec 1c             	sub    esp,0x1c
c0021d85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021d89:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d8c:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d8f:	0f 84 d2 00 00 00    	je     c0021e67 <SoundChannel::buffer16(short*, int)+0xe9>
c0021d95:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021d99:	85 ed                	test   ebp,ebp
c0021d9b:	0f 8e c6 00 00 00    	jle    c0021e67 <SoundChannel::buffer16(short*, int)+0xe9>
c0021da1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021da5:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021daa:	83 ec 0c             	sub    esp,0xc
c0021dad:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021db0:	50                   	push   eax
c0021db1:	e8 99 52 00 00       	call   c002704f <__floatsisf>
c0021db6:	59                   	pop    ecx
c0021db7:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021dba:	5f                   	pop    edi
c0021dbb:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021dbe:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021dc1:	55                   	push   ebp
c0021dc2:	50                   	push   eax
c0021dc3:	e8 99 4e 00 00       	call   c0026c61 <__mulsf3>
c0021dc8:	83 c4 10             	add    esp,0x10
c0021dcb:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021dce:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021dd1:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021dd4:	0f 84 99 00 00 00    	je     c0021e73 <SoundChannel::buffer16(short*, int)+0xf5>
c0021dda:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021ddf:	74 78                	je     c0021e59 <SoundChannel::buffer16(short*, int)+0xdb>
c0021de1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021de5:	83 ec 0c             	sub    esp,0xc
c0021de8:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021dec:	50                   	push   eax
c0021ded:	e8 5d 52 00 00       	call   c002704f <__floatsisf>
c0021df2:	5f                   	pop    edi
c0021df3:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021df6:	5a                   	pop    edx
c0021df7:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021dfa:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021dfd:	55                   	push   ebp
c0021dfe:	50                   	push   eax
c0021dff:	e8 5d 4e 00 00       	call   c0026c61 <__mulsf3>
c0021e04:	83 c4 10             	add    esp,0x10
c0021e07:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021e0a:	be 02 00 00 00       	mov    esi,0x2
c0021e0f:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e12:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e15:	74 46                	je     c0021e5d <SoundChannel::buffer16(short*, int)+0xdf>
c0021e17:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021e1b:	eb 36                	jmp    c0021e53 <SoundChannel::buffer16(short*, int)+0xd5>
c0021e1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e21:	83 ec 0c             	sub    esp,0xc
c0021e24:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021e28:	46                   	inc    esi
c0021e29:	50                   	push   eax
c0021e2a:	e8 20 52 00 00       	call   c002704f <__floatsisf>
c0021e2f:	5a                   	pop    edx
c0021e30:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021e33:	59                   	pop    ecx
c0021e34:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021e37:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e3e:	50                   	push   eax
c0021e3f:	e8 1d 4e 00 00       	call   c0026c61 <__mulsf3>
c0021e44:	83 c4 10             	add    esp,0x10
c0021e47:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021e4b:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e4e:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e51:	74 0a                	je     c0021e5d <SoundChannel::buffer16(short*, int)+0xdf>
c0021e53:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021e57:	75 c4                	jne    c0021e1d <SoundChannel::buffer16(short*, int)+0x9f>
c0021e59:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021e5d:	83 c4 1c             	add    esp,0x1c
c0021e60:	89 f0                	mov    eax,esi
c0021e62:	5b                   	pop    ebx
c0021e63:	5e                   	pop    esi
c0021e64:	5f                   	pop    edi
c0021e65:	5d                   	pop    ebp
c0021e66:	c3                   	ret    
c0021e67:	83 c4 1c             	add    esp,0x1c
c0021e6a:	31 f6                	xor    esi,esi
c0021e6c:	5b                   	pop    ebx
c0021e6d:	89 f0                	mov    eax,esi
c0021e6f:	5e                   	pop    esi
c0021e70:	5f                   	pop    edi
c0021e71:	5d                   	pop    ebp
c0021e72:	c3                   	ret    
c0021e73:	be 01 00 00 00       	mov    esi,0x1
c0021e78:	eb e3                	jmp    c0021e5d <SoundChannel::buffer16(short*, int)+0xdf>

c0021e7a <SoundChannel::buffer8(unsigned char*, int)>:
c0021e7a:	55                   	push   ebp
c0021e7b:	57                   	push   edi
c0021e7c:	56                   	push   esi
c0021e7d:	53                   	push   ebx
c0021e7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e82:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021e86:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e89:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e8d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e90:	74 7a                	je     c0021f0c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e92:	85 ff                	test   edi,edi
c0021e94:	7e 76                	jle    c0021f0c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e96:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021e9a:	8d 70 01             	lea    esi,[eax+0x1]
c0021e9d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021ea0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ea3:	8b 1c 9d 00 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce700]
c0021eaa:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021ead:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021eb0:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021eb3:	74 5e                	je     c0021f13 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021eb5:	83 ff 01             	cmp    edi,0x1
c0021eb8:	74 4b                	je     c0021f05 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021eba:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021ebe:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021ec1:	8d 70 01             	lea    esi,[eax+0x1]
c0021ec4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ec7:	8b 1c 9d 00 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce700]
c0021ece:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021ed1:	b8 02 00 00 00       	mov    eax,0x2
c0021ed6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ed9:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021edc:	75 23                	jne    c0021f01 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021ede:	eb 27                	jmp    c0021f07 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ee0:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021ee5:	8d 71 01             	lea    esi,[ecx+0x1]
c0021ee8:	40                   	inc    eax
c0021ee9:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021eec:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021eef:	8b 1c 9d 00 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce700]
c0021ef6:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021ef9:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021efc:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021eff:	74 06                	je     c0021f07 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021f01:	39 c7                	cmp    edi,eax
c0021f03:	75 db                	jne    c0021ee0 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021f05:	89 f8                	mov    eax,edi
c0021f07:	5b                   	pop    ebx
c0021f08:	5e                   	pop    esi
c0021f09:	5f                   	pop    edi
c0021f0a:	5d                   	pop    ebp
c0021f0b:	c3                   	ret    
c0021f0c:	5b                   	pop    ebx
c0021f0d:	31 c0                	xor    eax,eax
c0021f0f:	5e                   	pop    esi
c0021f10:	5f                   	pop    edi
c0021f11:	5d                   	pop    ebp
c0021f12:	c3                   	ret    
c0021f13:	b8 01 00 00 00       	mov    eax,0x1
c0021f18:	eb ed                	jmp    c0021f07 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021f1a <SoundDevice::SoundDevice(char const*)>:
c0021f1a:	83 ec 1c             	sub    esp,0x1c
c0021f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f21:	83 ec 08             	sub    esp,0x8
c0021f24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021f28:	50                   	push   eax
c0021f29:	e8 f2 1d ff ff       	call   c0013d20 <Device::Device(char const*)>
c0021f2e:	83 c4 10             	add    esp,0x10
c0021f31:	ba c8 bf 02 c0       	mov    edx,0xc002bfc8
c0021f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f3a:	89 10                	mov    DWORD PTR [eax],edx
c0021f3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f40:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f4e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021f58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f60:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f65:	7f 19                	jg     c0021f80 <SoundDevice::SoundDevice(char const*)+0x66>
c0021f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f6f:	83 c2 54             	add    edx,0x54
c0021f72:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021f7a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021f7e:	eb e0                	jmp    c0021f60 <SoundDevice::SoundDevice(char const*)+0x46>
c0021f80:	90                   	nop
c0021f81:	83 c4 1c             	add    esp,0x1c
c0021f84:	c3                   	ret    
c0021f85:	90                   	nop

c0021f86 <SoundDevice::~SoundDevice()>:
c0021f86:	53                   	push   ebx
c0021f87:	83 ec 18             	sub    esp,0x18
c0021f8a:	ba c8 bf 02 c0       	mov    edx,0xc002bfc8
c0021f8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f93:	89 10                	mov    DWORD PTR [eax],edx
c0021f95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f9d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021fa2:	7f 46                	jg     c0021fea <SoundDevice::~SoundDevice()+0x64>
c0021fa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fa8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fac:	83 c2 54             	add    edx,0x54
c0021faf:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021fb3:	85 c0                	test   eax,eax
c0021fb5:	74 2d                	je     c0021fe4 <SoundDevice::~SoundDevice()+0x5e>
c0021fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fbf:	83 c2 54             	add    edx,0x54
c0021fc2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021fc6:	85 db                	test   ebx,ebx
c0021fc8:	74 1a                	je     c0021fe4 <SoundDevice::~SoundDevice()+0x5e>
c0021fca:	83 ec 0c             	sub    esp,0xc
c0021fcd:	53                   	push   ebx
c0021fce:	e8 db fc ff ff       	call   c0021cae <SoundChannel::~SoundChannel()>
c0021fd3:	83 c4 10             	add    esp,0x10
c0021fd6:	83 ec 08             	sub    esp,0x8
c0021fd9:	6a 2c                	push   0x2c
c0021fdb:	53                   	push   ebx
c0021fdc:	e8 2a 06 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0021fe1:	83 c4 10             	add    esp,0x10
c0021fe4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021fe8:	eb b3                	jmp    c0021f9d <SoundDevice::~SoundDevice()+0x17>
c0021fea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fee:	83 ec 0c             	sub    esp,0xc
c0021ff1:	50                   	push   eax
c0021ff2:	e8 f3 19 ff ff       	call   c00139ea <Device::~Device()>
c0021ff7:	83 c4 10             	add    esp,0x10
c0021ffa:	90                   	nop
c0021ffb:	83 c4 18             	add    esp,0x18
c0021ffe:	5b                   	pop    ebx
c0021fff:	c3                   	ret    

c0022000 <SoundDevice::~SoundDevice()>:
c0022000:	83 ec 0c             	sub    esp,0xc
c0022003:	83 ec 0c             	sub    esp,0xc
c0022006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002200a:	e8 77 ff ff ff       	call   c0021f86 <SoundDevice::~SoundDevice()>
c002200f:	83 c4 10             	add    esp,0x10
c0022012:	83 ec 08             	sub    esp,0x8
c0022015:	68 e4 01 00 00       	push   0x1e4
c002201a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002201e:	e8 e8 05 ff ff       	call   c001260b <operator delete(void*, unsigned long)>
c0022023:	83 c4 10             	add    esp,0x10
c0022026:	83 c4 0c             	add    esp,0xc
c0022029:	c3                   	ret    

c002202a <SoundDevice::getFreeChannelNum()>:
c002202a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002202e:	31 c0                	xor    eax,eax
c0022030:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022038:	74 09                	je     c0022043 <SoundDevice::getFreeChannelNum()+0x19>
c002203a:	40                   	inc    eax
c002203b:	83 f8 20             	cmp    eax,0x20
c002203e:	75 f0                	jne    c0022030 <SoundDevice::getFreeChannelNum()+0x6>
c0022040:	83 c8 ff             	or     eax,0xffffffff
c0022043:	c3                   	ret    

c0022044 <SoundDevice::addChannel(SoundChannel*)>:
c0022044:	56                   	push   esi
c0022045:	53                   	push   ebx
c0022046:	51                   	push   ecx
c0022047:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002204b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002204f:	53                   	push   ebx
c0022050:	e8 d5 ff ff ff       	call   c002202a <SoundDevice::getFreeChannelNum()>
c0022055:	5a                   	pop    edx
c0022056:	83 f8 ff             	cmp    eax,0xffffffff
c0022059:	74 51                	je     c00220ac <SoundDevice::addChannel(SoundChannel*)+0x68>
c002205b:	85 f6                	test   esi,esi
c002205d:	74 4d                	je     c00220ac <SoundDevice::addChannel(SoundChannel*)+0x68>
c002205f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022066:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002206d:	75 30                	jne    c002209f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002206f:	83 ec 0c             	sub    esp,0xc
c0022072:	56                   	push   esi
c0022073:	e8 52 fc ff ff       	call   c0021cca <SoundChannel::getSampleRate()>
c0022078:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002207e:	89 34 24             	mov    DWORD PTR [esp],esi
c0022081:	e8 4c fc ff ff       	call   c0021cd2 <SoundChannel::getBits()>
c0022086:	83 c4 0c             	add    esp,0xc
c0022089:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002208f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022091:	50                   	push   eax
c0022092:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022098:	53                   	push   ebx
c0022099:	ff 52 24             	call   DWORD PTR [edx+0x24]
c002209c:	83 c4 10             	add    esp,0x10
c002209f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00220a5:	b8 01 00 00 00       	mov    eax,0x1
c00220aa:	eb 03                	jmp    c00220af <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00220ac:	83 c8 ff             	or     eax,0xffffffff
c00220af:	5a                   	pop    edx
c00220b0:	5b                   	pop    ebx
c00220b1:	5e                   	pop    esi
c00220b2:	c3                   	ret    
c00220b3:	90                   	nop

c00220b4 <SoundDevice::removeChannel(int)>:
c00220b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220bc:	83 fa 1f             	cmp    edx,0x1f
c00220bf:	77 23                	ja     c00220e4 <SoundDevice::removeChannel(int)+0x30>
c00220c1:	8d 14 90             	lea    edx,[eax+edx*4]
c00220c4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00220cb:	74 17                	je     c00220e4 <SoundDevice::removeChannel(int)+0x30>
c00220cd:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00220d7:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00220dd:	75 05                	jne    c00220e4 <SoundDevice::removeChannel(int)+0x30>
c00220df:	8b 00                	mov    eax,DWORD PTR [eax]
c00220e1:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00220e4:	c3                   	ret    
c00220e5:	90                   	nop

c00220e6 <SoundDevice::floatTo16(float*, short*, int)>:
c00220e6:	57                   	push   edi
c00220e7:	56                   	push   esi
c00220e8:	53                   	push   ebx
c00220e9:	31 db                	xor    ebx,ebx
c00220eb:	83 ec 10             	sub    esp,0x10
c00220ee:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00220f2:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00220f6:	0f 8d d0 00 00 00    	jge    c00221cc <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00220fc:	83 ec 0c             	sub    esp,0xc
c00220ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022103:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022106:	e8 14 62 00 00       	call   c002831f <__extendsfdf2>
c002210b:	83 c4 10             	add    esp,0x10
c002210e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022112:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022116:	68 00 00 f0 3f       	push   0x3ff00000
c002211b:	6a 00                	push   0x0
c002211d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022121:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022125:	e8 81 51 00 00       	call   c00272ab <__adddf3>
c002212a:	83 c4 10             	add    esp,0x10
c002212d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022131:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022135:	68 00 00 e0 3f       	push   0x3fe00000
c002213a:	6a 00                	push   0x0
c002213c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022140:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022144:	e8 df 57 00 00       	call   c0027928 <__muldf3>
c0022149:	83 c4 10             	add    esp,0x10
c002214c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022150:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022154:	68 c0 ff df 40       	push   0x40dfffc0
c0022159:	6a 00                	push   0x0
c002215b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002215f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022163:	e8 c0 57 00 00       	call   c0027928 <__muldf3>
c0022168:	59                   	pop    ecx
c0022169:	5f                   	pop    edi
c002216a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002216e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022172:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022176:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002217a:	e8 7c 60 00 00       	call   c00281fb <__truncdfsf2>
c002217f:	5a                   	pop    edx
c0022180:	89 c7                	mov    edi,eax
c0022182:	59                   	pop    ecx
c0022183:	68 00 fe ff 46       	push   0x46fffe00
c0022188:	50                   	push   eax
c0022189:	e8 17 51 00 00       	call   c00272a5 <__gesf2>
c002218e:	83 c4 10             	add    esp,0x10
c0022191:	85 c0                	test   eax,eax
c0022193:	78 08                	js     c002219d <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022195:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c002219b:	eb 29                	jmp    c00221c6 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002219d:	50                   	push   eax
c002219e:	50                   	push   eax
c002219f:	6a 00                	push   0x0
c00221a1:	57                   	push   edi
c00221a2:	e8 02 51 00 00       	call   c00272a9 <__lesf2>
c00221a7:	83 c4 10             	add    esp,0x10
c00221aa:	85 c0                	test   eax,eax
c00221ac:	7f 08                	jg     c00221b6 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c00221ae:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00221b4:	eb 10                	jmp    c00221c6 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00221b6:	83 ec 0c             	sub    esp,0xc
c00221b9:	57                   	push   edi
c00221ba:	e8 fd 61 00 00       	call   c00283bc <lrintf>
c00221bf:	83 c4 10             	add    esp,0x10
c00221c2:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00221c6:	43                   	inc    ebx
c00221c7:	e9 26 ff ff ff       	jmp    c00220f2 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00221cc:	83 c4 10             	add    esp,0x10
c00221cf:	5b                   	pop    ebx
c00221d0:	5e                   	pop    esi
c00221d1:	5f                   	pop    edi
c00221d2:	c3                   	ret    
c00221d3:	90                   	nop

c00221d4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00221d4:	57                   	push   edi
c00221d5:	56                   	push   esi
c00221d6:	53                   	push   ebx
c00221d7:	31 db                	xor    ebx,ebx
c00221d9:	83 ec 10             	sub    esp,0x10
c00221dc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00221e0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00221e4:	0f 8d cb 00 00 00    	jge    c00222b5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00221ea:	83 ec 0c             	sub    esp,0xc
c00221ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221f1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00221f4:	e8 26 61 00 00       	call   c002831f <__extendsfdf2>
c00221f9:	83 c4 10             	add    esp,0x10
c00221fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022200:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022204:	68 00 00 f0 3f       	push   0x3ff00000
c0022209:	6a 00                	push   0x0
c002220b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002220f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022213:	e8 93 50 00 00       	call   c00272ab <__adddf3>
c0022218:	83 c4 10             	add    esp,0x10
c002221b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002221f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022223:	68 00 00 e0 3f       	push   0x3fe00000
c0022228:	6a 00                	push   0x0
c002222a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002222e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022232:	e8 f1 56 00 00       	call   c0027928 <__muldf3>
c0022237:	83 c4 10             	add    esp,0x10
c002223a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002223e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022242:	68 00 00 60 40       	push   0x40600000
c0022247:	6a 00                	push   0x0
c0022249:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002224d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022251:	e8 d2 56 00 00       	call   c0027928 <__muldf3>
c0022256:	59                   	pop    ecx
c0022257:	5f                   	pop    edi
c0022258:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002225c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022260:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022264:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022268:	e8 8e 5f 00 00       	call   c00281fb <__truncdfsf2>
c002226d:	5a                   	pop    edx
c002226e:	89 c7                	mov    edi,eax
c0022270:	59                   	pop    ecx
c0022271:	68 00 00 fe 42       	push   0x42fe0000
c0022276:	50                   	push   eax
c0022277:	e8 29 50 00 00       	call   c00272a5 <__gesf2>
c002227c:	83 c4 10             	add    esp,0x10
c002227f:	85 c0                	test   eax,eax
c0022281:	78 06                	js     c0022289 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022283:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022287:	eb 26                	jmp    c00222af <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022289:	50                   	push   eax
c002228a:	50                   	push   eax
c002228b:	6a 00                	push   0x0
c002228d:	57                   	push   edi
c002228e:	e8 16 50 00 00       	call   c00272a9 <__lesf2>
c0022293:	83 c4 10             	add    esp,0x10
c0022296:	85 c0                	test   eax,eax
c0022298:	7f 06                	jg     c00222a0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002229a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002229e:	eb 0f                	jmp    c00222af <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00222a0:	83 ec 0c             	sub    esp,0xc
c00222a3:	57                   	push   edi
c00222a4:	e8 13 61 00 00       	call   c00283bc <lrintf>
c00222a9:	83 c4 10             	add    esp,0x10
c00222ac:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00222af:	43                   	inc    ebx
c00222b0:	e9 2b ff ff ff       	jmp    c00221e0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00222b5:	83 c4 10             	add    esp,0x10
c00222b8:	5b                   	pop    ebx
c00222b9:	5e                   	pop    esi
c00222ba:	5f                   	pop    edi
c00222bb:	c3                   	ret    

c00222bc <SoundDevice::getAudio(int, float*, float*)>:
c00222bc:	55                   	push   ebp
c00222bd:	31 ed                	xor    ebp,ebp
c00222bf:	57                   	push   edi
c00222c0:	56                   	push   esi
c00222c1:	31 f6                	xor    esi,esi
c00222c3:	53                   	push   ebx
c00222c4:	83 ec 20             	sub    esp,0x20
c00222c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00222cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00222cf:	c1 e0 02             	shl    eax,0x2
c00222d2:	50                   	push   eax
c00222d3:	6a 00                	push   0x0
c00222d5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00222d9:	e8 72 e4 fd ff       	call   c0000750 <memset>
c00222de:	83 c4 10             	add    esp,0x10
c00222e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222e9:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00222f0:	85 c9                	test   ecx,ecx
c00222f2:	74 52                	je     c0022346 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00222f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00222f8:	99                   	cdq    
c00222f9:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00222ff:	50                   	push   eax
c0022300:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022306:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002230a:	51                   	push   ecx
c002230b:	e8 da f9 ff ff       	call   c0021cea <SoundChannel::unbuffer(float*, int, int)>
c0022310:	31 d2                	xor    edx,edx
c0022312:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022316:	83 c4 10             	add    esp,0x10
c0022319:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002231d:	7d 1e                	jge    c002233d <SoundDevice::getAudio(int, float*, float*)+0x81>
c002231f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022323:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022327:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c002232a:	89 cf                	mov    edi,ecx
c002232c:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022332:	0f af ca             	imul   ecx,edx
c0022335:	42                   	inc    edx
c0022336:	01 e9                	add    ecx,ebp
c0022338:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c002233b:	eb dc                	jmp    c0022319 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c002233d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022341:	45                   	inc    ebp
c0022342:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022346:	46                   	inc    esi
c0022347:	83 fe 20             	cmp    esi,0x20
c002234a:	75 9d                	jne    c00222e9 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c002234c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022350:	83 c4 1c             	add    esp,0x1c
c0022353:	5b                   	pop    ebx
c0022354:	5e                   	pop    esi
c0022355:	5f                   	pop    edi
c0022356:	5d                   	pop    ebp
c0022357:	c3                   	ret    

c0022358 <PCI::open(int, int, void*)>:
c0022358:	83 ec 18             	sub    esp,0x18
c002235b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002235f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022363:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022369:	8b 10                	mov    edx,DWORD PTR [eax]
c002236b:	50                   	push   eax
c002236c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002236f:	31 c0                	xor    eax,eax
c0022371:	83 c4 1c             	add    esp,0x1c
c0022374:	c3                   	ret    
c0022375:	90                   	nop

c0022376 <PCI::close(int, int, void*)>:
c0022376:	31 c0                	xor    eax,eax
c0022378:	c3                   	ret    
c0022379:	90                   	nop

c002237a <PCI::PCI()>:
c002237a:	83 ec 0c             	sub    esp,0xc
c002237d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022381:	83 ec 08             	sub    esp,0x8
c0022384:	68 f8 bf 02 c0       	push   0xc002bff8
c0022389:	50                   	push   eax
c002238a:	e8 f5 0f ff ff       	call   c0013384 <Bus::Bus(char const*)>
c002238f:	83 c4 10             	add    esp,0x10
c0022392:	ba e4 c0 02 c0       	mov    edx,0xc002c0e4
c0022397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239b:	89 10                	mov    DWORD PTR [eax],edx
c002239d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00223ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223af:	a3 04 1d 03 c0       	mov    ds:0xc0031d04,eax
c00223b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223be:	0f b6 d0             	movzx  edx,al
c00223c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00223cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223d6:	0f b6 d0             	movzx  edx,al
c00223d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223dd:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00223e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223ec:	8d 50 01             	lea    edx,[eax+0x1]
c00223ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223f3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00223f9:	0f b6 d0             	movzx  edx,al
c00223fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022400:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022404:	83 c9 c0             	or     ecx,0xffffffc0
c0022407:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002240b:	90                   	nop
c002240c:	83 c4 0c             	add    esp,0xc
c002240f:	c3                   	ret    

c0022410 <PCI::readBAR8(unsigned int, int)>:
c0022410:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022414:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022418:	f6 c2 01             	test   dl,0x1
c002241b:	74 07                	je     c0022424 <PCI::readBAR8(unsigned int, int)+0x14>
c002241d:	83 e2 fc             	and    edx,0xfffffffc
c0022420:	01 c2                	add    edx,eax
c0022422:	ec                   	in     al,dx
c0022423:	c3                   	ret    
c0022424:	83 e2 f0             	and    edx,0xfffffff0
c0022427:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002242a:	c3                   	ret    
c002242b:	90                   	nop

c002242c <PCI::readBAR16(unsigned int, int)>:
c002242c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022434:	f6 c2 01             	test   dl,0x1
c0022437:	74 08                	je     c0022441 <PCI::readBAR16(unsigned int, int)+0x15>
c0022439:	83 e2 fc             	and    edx,0xfffffffc
c002243c:	01 c2                	add    edx,eax
c002243e:	66 ed                	in     ax,dx
c0022440:	c3                   	ret    
c0022441:	83 e2 f0             	and    edx,0xfffffff0
c0022444:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022448:	c3                   	ret    
c0022449:	90                   	nop

c002244a <PCI::readBAR32(unsigned int, int)>:
c002244a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002244e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022452:	f6 c2 01             	test   dl,0x1
c0022455:	74 07                	je     c002245e <PCI::readBAR32(unsigned int, int)+0x14>
c0022457:	83 e2 fc             	and    edx,0xfffffffc
c002245a:	01 c2                	add    edx,eax
c002245c:	ed                   	in     eax,dx
c002245d:	c3                   	ret    
c002245e:	83 e2 f0             	and    edx,0xfffffff0
c0022461:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022464:	c3                   	ret    
c0022465:	90                   	nop

c0022466 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002246a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002246e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022472:	f6 c2 01             	test   dl,0x1
c0022475:	74 07                	je     c002247e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022477:	83 e2 fc             	and    edx,0xfffffffc
c002247a:	01 ca                	add    edx,ecx
c002247c:	ee                   	out    dx,al
c002247d:	c3                   	ret    
c002247e:	83 e2 f0             	and    edx,0xfffffff0
c0022481:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022484:	c3                   	ret    
c0022485:	90                   	nop

c0022486 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022486:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002248a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002248e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022492:	f6 c2 01             	test   dl,0x1
c0022495:	74 08                	je     c002249f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022497:	83 e2 fc             	and    edx,0xfffffffc
c002249a:	01 ca                	add    edx,ecx
c002249c:	66 ef                	out    dx,ax
c002249e:	c3                   	ret    
c002249f:	83 e2 f0             	and    edx,0xfffffff0
c00224a2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00224a6:	c3                   	ret    
c00224a7:	90                   	nop

c00224a8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00224a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224b4:	f6 c2 01             	test   dl,0x1
c00224b7:	74 07                	je     c00224c0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00224b9:	83 e2 fc             	and    edx,0xfffffffc
c00224bc:	01 ca                	add    edx,ecx
c00224be:	ef                   	out    dx,eax
c00224bf:	c3                   	ret    
c00224c0:	83 e2 f0             	and    edx,0xfffffff0
c00224c3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00224c6:	c3                   	ret    
c00224c7:	90                   	nop

c00224c8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00224c8:	55                   	push   ebp
c00224c9:	57                   	push   edi
c00224ca:	56                   	push   esi
c00224cb:	53                   	push   ebx
c00224cc:	83 ec 0c             	sub    esp,0xc
c00224cf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00224d3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00224d7:	89 f0                	mov    eax,esi
c00224d9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00224dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00224e1:	3c 07                	cmp    al,0x7
c00224e3:	76 10                	jbe    c00224f5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00224e5:	83 ec 0c             	sub    esp,0xc
c00224e8:	68 00 c0 02 c0       	push   0xc002c000
c00224ed:	e8 5d 79 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c00224f2:	83 c4 10             	add    esp,0x10
c00224f5:	80 fb 0f             	cmp    bl,0xf
c00224f8:	76 10                	jbe    c002250a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00224fa:	83 ec 0c             	sub    esp,0xc
c00224fd:	68 30 c0 02 c0       	push   0xc002c030
c0022502:	e8 48 79 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0022507:	83 c4 10             	add    esp,0x10
c002250a:	8d 04 36             	lea    eax,[esi+esi*1]
c002250d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022512:	83 c8 f0             	or     eax,0xfffffff0
c0022515:	ee                   	out    dx,al
c0022516:	ba fa 0c 00 00       	mov    edx,0xcfa
c002251b:	89 e8                	mov    eax,ebp
c002251d:	ee                   	out    dx,al
c002251e:	83 c4 0c             	add    esp,0xc
c0022521:	89 d8                	mov    eax,ebx
c0022523:	66 81 e7 fc 00       	and    di,0xfc
c0022528:	5b                   	pop    ebx
c0022529:	c1 e0 08             	shl    eax,0x8
c002252c:	5e                   	pop    esi
c002252d:	09 f8                	or     eax,edi
c002252f:	5f                   	pop    edi
c0022530:	66 0d 00 c0          	or     ax,0xc000
c0022534:	5d                   	pop    ebp
c0022535:	c3                   	ret    

c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022536:	57                   	push   edi
c0022537:	56                   	push   esi
c0022538:	53                   	push   ebx
c0022539:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002253d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022541:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022547:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002254b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002254f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022553:	83 ff 01             	cmp    edi,0x1
c0022556:	75 3e                	jne    c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022558:	89 de                	mov    esi,ebx
c002255a:	0f b6 c0             	movzx  eax,al
c002255d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022563:	c1 e0 10             	shl    eax,0x10
c0022566:	0f b6 c9             	movzx  ecx,cl
c0022569:	09 f0                	or     eax,esi
c002256b:	c1 e1 08             	shl    ecx,0x8
c002256e:	0f b6 d2             	movzx  edx,dl
c0022571:	09 c8                	or     eax,ecx
c0022573:	c1 e2 0b             	shl    edx,0xb
c0022576:	09 d0                	or     eax,edx
c0022578:	ba f8 0c 00 00       	mov    edx,0xcf8
c002257d:	0d 00 00 00 80       	or     eax,0x80000000
c0022582:	ef                   	out    dx,eax
c0022583:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022588:	ed                   	in     eax,dx
c0022589:	83 e3 02             	and    ebx,0x2
c002258c:	0f b6 cb             	movzx  ecx,bl
c002258f:	c1 e1 03             	shl    ecx,0x3
c0022592:	d3 e8                	shr    eax,cl
c0022594:	eb 43                	jmp    c00225d9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022596:	83 ff 02             	cmp    edi,0x2
c0022599:	75 2c                	jne    c00225c7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c002259b:	83 ec 0c             	sub    esp,0xc
c002259e:	0f b6 c9             	movzx  ecx,cl
c00225a1:	0f b6 d2             	movzx  edx,dl
c00225a4:	0f b6 fb             	movzx  edi,bl
c00225a7:	0f b6 c0             	movzx  eax,al
c00225aa:	57                   	push   edi
c00225ab:	51                   	push   ecx
c00225ac:	52                   	push   edx
c00225ad:	50                   	push   eax
c00225ae:	56                   	push   esi
c00225af:	e8 14 ff ff ff       	call   c00224c8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225b4:	89 c2                	mov    edx,eax
c00225b6:	ed                   	in     eax,dx
c00225b7:	83 e3 02             	and    ebx,0x2
c00225ba:	83 c4 20             	add    esp,0x20
c00225bd:	0f b6 cb             	movzx  ecx,bl
c00225c0:	c1 e1 03             	shl    ecx,0x3
c00225c3:	d3 e8                	shr    eax,cl
c00225c5:	eb 12                	jmp    c00225d9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00225c7:	83 ec 0c             	sub    esp,0xc
c00225ca:	68 60 c0 02 c0       	push   0xc002c060
c00225cf:	e8 7b 78 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c00225d4:	83 c4 10             	add    esp,0x10
c00225d7:	31 c0                	xor    eax,eax
c00225d9:	5b                   	pop    ebx
c00225da:	5e                   	pop    esi
c00225db:	5f                   	pop    edi
c00225dc:	c3                   	ret    
c00225dd:	90                   	nop

c00225de <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00225de:	83 ec 18             	sub    esp,0x18
c00225e1:	6a 00                	push   0x0
c00225e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225e8:	50                   	push   eax
c00225e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225ee:	50                   	push   eax
c00225ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225f4:	50                   	push   eax
c00225f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225f9:	e8 38 ff ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225fe:	83 c4 2c             	add    esp,0x2c
c0022601:	c3                   	ret    

c0022602 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022602:	83 ec 18             	sub    esp,0x18
c0022605:	6a 0e                	push   0xe
c0022607:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002260c:	50                   	push   eax
c002260d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022612:	50                   	push   eax
c0022613:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022618:	50                   	push   eax
c0022619:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002261d:	e8 14 ff ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022622:	83 c4 2c             	add    esp,0x2c
c0022625:	0f b6 c0             	movzx  eax,al
c0022628:	c3                   	ret    
c0022629:	90                   	nop

c002262a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002262a:	55                   	push   ebp
c002262b:	57                   	push   edi
c002262c:	56                   	push   esi
c002262d:	53                   	push   ebx
c002262e:	83 ec 18             	sub    esp,0x18
c0022631:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022636:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002263b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022640:	6a 0a                	push   0xa
c0022642:	56                   	push   esi
c0022643:	55                   	push   ebp
c0022644:	57                   	push   edi
c0022645:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022649:	e8 e8 fe ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002264e:	83 c4 14             	add    esp,0x14
c0022651:	89 c3                	mov    ebx,eax
c0022653:	6a 0a                	push   0xa
c0022655:	0f b6 db             	movzx  ebx,bl
c0022658:	56                   	push   esi
c0022659:	55                   	push   ebp
c002265a:	57                   	push   edi
c002265b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002265f:	e8 d2 fe ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022664:	83 c4 2c             	add    esp,0x2c
c0022667:	25 00 ff 00 00       	and    eax,0xff00
c002266c:	09 d8                	or     eax,ebx
c002266e:	5b                   	pop    ebx
c002266f:	5e                   	pop    esi
c0022670:	5f                   	pop    edi
c0022671:	5d                   	pop    ebp
c0022672:	c3                   	ret    
c0022673:	90                   	nop

c0022674 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022674:	83 ec 18             	sub    esp,0x18
c0022677:	6a 08                	push   0x8
c0022679:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002267e:	50                   	push   eax
c002267f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022684:	50                   	push   eax
c0022685:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002268a:	50                   	push   eax
c002268b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002268f:	e8 a2 fe ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022694:	83 c4 2c             	add    esp,0x2c
c0022697:	0f b6 c4             	movzx  eax,ah
c002269a:	c3                   	ret    
c002269b:	90                   	nop

c002269c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002269c:	83 ec 18             	sub    esp,0x18
c002269f:	6a 08                	push   0x8
c00226a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226a6:	50                   	push   eax
c00226a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ac:	50                   	push   eax
c00226ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226b2:	50                   	push   eax
c00226b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226b7:	e8 7a fe ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226bc:	83 c4 2c             	add    esp,0x2c
c00226bf:	c3                   	ret    

c00226c0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00226c0:	83 ec 18             	sub    esp,0x18
c00226c3:	6a 3c                	push   0x3c
c00226c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ca:	50                   	push   eax
c00226cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226d0:	50                   	push   eax
c00226d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226d6:	50                   	push   eax
c00226d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226db:	e8 56 fe ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226e0:	83 c4 2c             	add    esp,0x2c
c00226e3:	c3                   	ret    

c00226e4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00226e4:	83 ec 18             	sub    esp,0x18
c00226e7:	6a 18                	push   0x18
c00226e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ee:	50                   	push   eax
c00226ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226f4:	50                   	push   eax
c00226f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226fa:	50                   	push   eax
c00226fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226ff:	e8 32 fe ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022704:	83 c4 2c             	add    esp,0x2c
c0022707:	0f b6 c4             	movzx  eax,ah
c002270a:	c3                   	ret    
c002270b:	90                   	nop

c002270c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002270c:	55                   	push   ebp
c002270d:	57                   	push   edi
c002270e:	56                   	push   esi
c002270f:	53                   	push   ebx
c0022710:	83 ec 28             	sub    esp,0x28
c0022713:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022717:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002271c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022721:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022726:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002272d:	8d 43 12             	lea    eax,[ebx+0x12]
c0022730:	83 c3 10             	add    ebx,0x10
c0022733:	0f b6 c0             	movzx  eax,al
c0022736:	0f b6 db             	movzx  ebx,bl
c0022739:	50                   	push   eax
c002273a:	51                   	push   ecx
c002273b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002273f:	57                   	push   edi
c0022740:	55                   	push   ebp
c0022741:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022745:	e8 ec fd ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002274a:	83 c4 14             	add    esp,0x14
c002274d:	89 c6                	mov    esi,eax
c002274f:	53                   	push   ebx
c0022750:	c1 e6 10             	shl    esi,0x10
c0022753:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022757:	51                   	push   ecx
c0022758:	57                   	push   edi
c0022759:	55                   	push   ebp
c002275a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002275e:	e8 d3 fd ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022763:	83 c4 3c             	add    esp,0x3c
c0022766:	0f b7 c0             	movzx  eax,ax
c0022769:	5b                   	pop    ebx
c002276a:	09 f0                	or     eax,esi
c002276c:	5e                   	pop    esi
c002276d:	5f                   	pop    edi
c002276e:	5d                   	pop    ebp
c002276f:	c3                   	ret    

c0022770 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022770:	55                   	push   ebp
c0022771:	57                   	push   edi
c0022772:	56                   	push   esi
c0022773:	53                   	push   ebx
c0022774:	83 ec 0c             	sub    esp,0xc
c0022777:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002277b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002277f:	89 f5                	mov    ebp,esi
c0022781:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022787:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002278b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002278f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022793:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022797:	83 f9 01             	cmp    ecx,0x1
c002279a:	75 5d                	jne    c00227f9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002279c:	0f b6 c8             	movzx  ecx,al
c002279f:	0f b6 d2             	movzx  edx,dl
c00227a2:	c1 e1 10             	shl    ecx,0x10
c00227a5:	c1 e2 0b             	shl    edx,0xb
c00227a8:	89 f0                	mov    eax,esi
c00227aa:	25 fc 00 00 00       	and    eax,0xfc
c00227af:	09 c1                	or     ecx,eax
c00227b1:	89 e8                	mov    eax,ebp
c00227b3:	0f b6 c0             	movzx  eax,al
c00227b6:	c1 e0 08             	shl    eax,0x8
c00227b9:	09 c1                	or     ecx,eax
c00227bb:	09 d1                	or     ecx,edx
c00227bd:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227c2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00227c8:	89 c8                	mov    eax,ecx
c00227ca:	ef                   	out    dx,eax
c00227cb:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227d0:	ed                   	in     eax,dx
c00227d1:	0f b7 db             	movzx  ebx,bx
c00227d4:	83 e6 02             	and    esi,0x2
c00227d7:	74 0a                	je     c00227e3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00227d9:	0f b7 d0             	movzx  edx,ax
c00227dc:	c1 e3 10             	shl    ebx,0x10
c00227df:	09 d3                	or     ebx,edx
c00227e1:	eb 05                	jmp    c00227e8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00227e3:	66 31 c0             	xor    ax,ax
c00227e6:	09 c3                	or     ebx,eax
c00227e8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227ed:	89 c8                	mov    eax,ecx
c00227ef:	ef                   	out    dx,eax
c00227f0:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227f5:	89 d8                	mov    eax,ebx
c00227f7:	eb 41                	jmp    c002283a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00227f9:	83 f9 02             	cmp    ecx,0x2
c00227fc:	75 45                	jne    c0022843 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00227fe:	83 ec 0c             	sub    esp,0xc
c0022801:	0f b6 d2             	movzx  edx,dl
c0022804:	89 f1                	mov    ecx,esi
c0022806:	0f b6 c0             	movzx  eax,al
c0022809:	0f b6 f1             	movzx  esi,cl
c002280c:	89 e9                	mov    ecx,ebp
c002280e:	56                   	push   esi
c002280f:	0f b6 c9             	movzx  ecx,cl
c0022812:	51                   	push   ecx
c0022813:	52                   	push   edx
c0022814:	50                   	push   eax
c0022815:	57                   	push   edi
c0022816:	e8 ad fc ff ff       	call   c00224c8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002281b:	89 c2                	mov    edx,eax
c002281d:	ed                   	in     eax,dx
c002281e:	83 c4 20             	add    esp,0x20
c0022821:	0f b7 db             	movzx  ebx,bx
c0022824:	f6 c2 02             	test   dl,0x2
c0022827:	74 0c                	je     c0022835 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022829:	0f b7 c8             	movzx  ecx,ax
c002282c:	89 d8                	mov    eax,ebx
c002282e:	c1 e0 10             	shl    eax,0x10
c0022831:	09 c8                	or     eax,ecx
c0022833:	eb 05                	jmp    c002283a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022835:	66 31 c0             	xor    ax,ax
c0022838:	09 d8                	or     eax,ebx
c002283a:	ef                   	out    dx,eax
c002283b:	83 c4 0c             	add    esp,0xc
c002283e:	5b                   	pop    ebx
c002283f:	5e                   	pop    esi
c0022840:	5f                   	pop    edi
c0022841:	5d                   	pop    ebp
c0022842:	c3                   	ret    
c0022843:	c7 44 24 20 60 c0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c060
c002284b:	83 c4 0c             	add    esp,0xc
c002284e:	5b                   	pop    ebx
c002284f:	5e                   	pop    esi
c0022850:	5f                   	pop    edi
c0022851:	5d                   	pop    ebp
c0022852:	e9 f8 75 ff ff       	jmp    c0019e4f <Krnl::panic(char const*)>
c0022857:	90                   	nop

c0022858 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022858:	55                   	push   ebp
c0022859:	57                   	push   edi
c002285a:	56                   	push   esi
c002285b:	53                   	push   ebx
c002285c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022862:	80 3d 10 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031d10,0x0
c0022869:	0f 85 84 00 00 00    	jne    c00228f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c002286f:	83 ec 0c             	sub    esp,0xc
c0022872:	68 14 01 00 00       	push   0x114
c0022877:	e8 1d cd fe ff       	call   c000f599 <malloc>
c002287c:	83 c4 0c             	add    esp,0xc
c002287f:	89 c3                	mov    ebx,eax
c0022881:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c0022887:	68 66 c0 02 c0       	push   0xc002c066
c002288c:	50                   	push   eax
c002288d:	e8 b0 03 ff ff       	call   c0012c42 <File::File(char const*, Process*)>
c0022892:	5a                   	pop    edx
c0022893:	59                   	pop    ecx
c0022894:	6a 01                	push   0x1
c0022896:	53                   	push   ebx
c0022897:	e8 0a 04 ff ff       	call   c0012ca6 <File::open(FileOpenMode)>
c002289c:	83 c4 0c             	add    esp,0xc
c002289f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00228a3:	50                   	push   eax
c00228a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00228a8:	50                   	push   eax
c00228a9:	53                   	push   ebx
c00228aa:	e8 a3 06 ff ff       	call   c0012f52 <File::stat(unsigned long long*, bool*)>
c00228af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228b3:	40                   	inc    eax
c00228b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00228b7:	e8 dd cc fe ff       	call   c000f599 <malloc>
c00228bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00228c0:	a3 0c 1d 03 c0       	mov    ds:0xc0031d0c,eax
c00228c5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00228c9:	5e                   	pop    esi
c00228ca:	8b 13                	mov    edx,DWORD PTR [ebx]
c00228cc:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00228d0:	51                   	push   ecx
c00228d1:	50                   	push   eax
c00228d2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228d6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228da:	53                   	push   ebx
c00228db:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00228de:	83 c4 14             	add    esp,0x14
c00228e1:	53                   	push   ebx
c00228e2:	e8 1d 04 ff ff       	call   c0012d04 <File::close()>
c00228e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228eb:	83 c4 10             	add    esp,0x10
c00228ee:	a3 08 1d 03 c0       	mov    ds:0xc0031d08,eax
c00228f3:	a1 08 1d 03 c0       	mov    eax,ds:0xc0031d08
c00228f8:	8b 15 0c 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d0c
c00228fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0022901:	31 ff                	xor    edi,edi
c0022903:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c002290b:	31 f6                	xor    esi,esi
c002290d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022912:	31 db                	xor    ebx,ebx
c0022914:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002291c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022921:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022928:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002292c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022933:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022937:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002293a:	0f 8e 6b 01 00 00    	jle    c0022aab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022940:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022943:	d4 40                	aam    0x40
c0022945:	d5 39                	aad    0x39
c0022947:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002294b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c002294f:	d4 40                	aam    0x40
c0022951:	d5 39                	aad    0x39
c0022953:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022957:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c002295b:	d4 40                	aam    0x40
c002295d:	d5 39                	aad    0x39
c002295f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022963:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022967:	d4 40                	aam    0x40
c0022969:	d5 39                	aad    0x39
c002296b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002296f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022973:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022977:	3c 56                	cmp    al,0x56
c0022979:	74 45                	je     c00229c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c002297b:	d4 40                	aam    0x40
c002297d:	d5 39                	aad    0x39
c002297f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022982:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022986:	0f b6 c9             	movzx  ecx,cl
c0022989:	c1 e1 04             	shl    ecx,0x4
c002298c:	d4 40                	aam    0x40
c002298e:	d5 39                	aad    0x39
c0022990:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022993:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022997:	0f b6 db             	movzx  ebx,bl
c002299a:	09 cb                	or     ebx,ecx
c002299c:	c1 e3 04             	shl    ebx,0x4
c002299f:	d4 40                	aam    0x40
c00229a1:	d5 39                	aad    0x39
c00229a3:	8d 48 d0             	lea    ecx,[eax-0x30]
c00229a6:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00229aa:	0f b6 c9             	movzx  ecx,cl
c00229ad:	09 cb                	or     ebx,ecx
c00229af:	c1 e3 04             	shl    ebx,0x4
c00229b2:	89 d9                	mov    ecx,ebx
c00229b4:	d4 40                	aam    0x40
c00229b6:	d5 39                	aad    0x39
c00229b8:	8d 58 d0             	lea    ebx,[eax-0x30]
c00229bb:	0f b6 db             	movzx  ebx,bl
c00229be:	09 cb                	or     ebx,ecx
c00229c0:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00229c4:	80 f9 44             	cmp    cl,0x44
c00229c7:	74 47                	je     c0022a10 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00229c9:	88 c8                	mov    al,cl
c00229cb:	d4 40                	aam    0x40
c00229cd:	d5 39                	aad    0x39
c00229cf:	83 e8 30             	sub    eax,0x30
c00229d2:	0f b6 e8             	movzx  ebp,al
c00229d5:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00229d9:	c1 e5 04             	shl    ebp,0x4
c00229dc:	d4 40                	aam    0x40
c00229de:	d5 39                	aad    0x39
c00229e0:	83 e8 30             	sub    eax,0x30
c00229e3:	0f b6 f0             	movzx  esi,al
c00229e6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00229ea:	09 ee                	or     esi,ebp
c00229ec:	c1 e6 04             	shl    esi,0x4
c00229ef:	d4 40                	aam    0x40
c00229f1:	d5 39                	aad    0x39
c00229f3:	83 e8 30             	sub    eax,0x30
c00229f6:	0f b6 e8             	movzx  ebp,al
c00229f9:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00229fd:	09 ee                	or     esi,ebp
c00229ff:	c1 e6 04             	shl    esi,0x4
c0022a02:	89 f5                	mov    ebp,esi
c0022a04:	d4 40                	aam    0x40
c0022a06:	d5 39                	aad    0x39
c0022a08:	83 e8 30             	sub    eax,0x30
c0022a0b:	0f b6 f0             	movzx  esi,al
c0022a0e:	09 ee                	or     esi,ebp
c0022a10:	83 c7 10             	add    edi,0x10
c0022a13:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022a17:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022a1a:	3c 0a                	cmp    al,0xa
c0022a1c:	74 09                	je     c0022a27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022a1e:	45                   	inc    ebp
c0022a1f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022a22:	75 16                	jne    c0022a3a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022a24:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022a27:	3c 0a                	cmp    al,0xa
c0022a29:	0f 94 c0             	sete   al
c0022a2c:	0f b6 c0             	movzx  eax,al
c0022a2f:	01 c7                	add    edi,eax
c0022a31:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022a36:	75 0c                	jne    c0022a44 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022a38:	eb 15                	jmp    c0022a4f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022a3a:	47                   	inc    edi
c0022a3b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022a3e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022a42:	eb d3                	jmp    c0022a17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022a44:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022a49:	0f 85 e8 fe ff ff    	jne    c0022937 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a4f:	80 f9 44             	cmp    cl,0x44
c0022a52:	74 0b                	je     c0022a5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022a54:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022a59:	0f 85 d8 fe ff ff    	jne    c0022937 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a5f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022a63:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022a67:	c1 e1 04             	shl    ecx,0x4
c0022a6a:	83 e8 30             	sub    eax,0x30
c0022a6d:	09 c8                	or     eax,ecx
c0022a6f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022a73:	0f 85 be fe ff ff    	jne    c0022937 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a79:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022a7d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022a81:	c1 e1 04             	shl    ecx,0x4
c0022a84:	83 e8 30             	sub    eax,0x30
c0022a87:	09 c8                	or     eax,ecx
c0022a89:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022a8d:	0f 85 a4 fe ff ff    	jne    c0022937 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a93:	50                   	push   eax
c0022a94:	50                   	push   eax
c0022a95:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022a99:	50                   	push   eax
c0022a9a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022aa1:	e8 66 dd fd ff       	call   c000080c <strcpy>
c0022aa6:	83 c4 10             	add    esp,0x10
c0022aa9:	eb 15                	jmp    c0022ac0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022aab:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022ab2:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022abd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022ac0:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022ac7:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022acd:	5b                   	pop    ebx
c0022ace:	5e                   	pop    esi
c0022acf:	5f                   	pop    edi
c0022ad0:	5d                   	pop    ebp
c0022ad1:	c3                   	ret    

c0022ad2 <PCI::checkBus(unsigned char)>:
c0022ad2:	56                   	push   esi
c0022ad3:	53                   	push   ebx
c0022ad4:	31 db                	xor    ebx,ebx
c0022ad6:	51                   	push   ecx
c0022ad7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022adc:	52                   	push   edx
c0022add:	53                   	push   ebx
c0022ade:	43                   	inc    ebx
c0022adf:	56                   	push   esi
c0022ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ae4:	e8 37 03 00 00       	call   c0022e20 <PCI::checkDevice(unsigned char, unsigned char)>
c0022ae9:	83 c4 10             	add    esp,0x10
c0022aec:	83 fb 20             	cmp    ebx,0x20
c0022aef:	75 eb                	jne    c0022adc <PCI::checkBus(unsigned char)+0xa>
c0022af1:	58                   	pop    eax
c0022af2:	5b                   	pop    ebx
c0022af3:	5e                   	pop    esi
c0022af4:	c3                   	ret    
c0022af5:	90                   	nop

c0022af6 <PCI::foundDevice(PCIDeviceInfo)>:
c0022af6:	55                   	push   ebp
c0022af7:	57                   	push   edi
c0022af8:	56                   	push   esi
c0022af9:	53                   	push   ebx
c0022afa:	83 ec 1c             	sub    esp,0x1c
c0022afd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b01:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b07:	0f 84 52 01 00 00    	je     c0022c5f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b0d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022b11:	66 81 f9 06 04       	cmp    cx,0x406
c0022b16:	75 2c                	jne    c0022b44 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b18:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b1d:	50                   	push   eax
c0022b1e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b23:	50                   	push   eax
c0022b24:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b29:	50                   	push   eax
c0022b2a:	56                   	push   esi
c0022b2b:	e8 b4 fb ff ff       	call   c00226e4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022b30:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b34:	0f b6 c0             	movzx  eax,al
c0022b37:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022b3b:	83 c4 2c             	add    esp,0x2c
c0022b3e:	5b                   	pop    ebx
c0022b3f:	5e                   	pop    esi
c0022b40:	5f                   	pop    edi
c0022b41:	5d                   	pop    ebp
c0022b42:	eb 8e                	jmp    c0022ad2 <PCI::checkBus(unsigned char)>
c0022b44:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b48:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b52:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b56:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b5a:	88 d3                	mov    bl,dl
c0022b5c:	85 c0                	test   eax,eax
c0022b5e:	74 33                	je     c0022b93 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b60:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022b63:	85 d2                	test   edx,edx
c0022b65:	74 28                	je     c0022b8f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b67:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b6d:	31 ef                	xor    edi,ebp
c0022b6f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b75:	75 18                	jne    c0022b8f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b77:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b7b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b81:	75 0c                	jne    c0022b8f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b83:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b89:	0f 84 d0 00 00 00    	je     c0022c5f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b91:	eb c9                	jmp    c0022b5c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b93:	66 81 f9 01 06       	cmp    cx,0x601
c0022b98:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b9c:	75 19                	jne    c0022bb7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b9e:	83 ec 0c             	sub    esp,0xc
c0022ba1:	68 64 01 00 00       	push   0x164
c0022ba6:	e8 ee c9 fe ff       	call   c000f599 <malloc>
c0022bab:	89 c5                	mov    ebp,eax
c0022bad:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bb0:	e8 85 0e 00 00       	call   c0023a3a <SATABus::SATABus()>
c0022bb5:	eb 1e                	jmp    c0022bd5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022bb7:	66 81 f9 01 01       	cmp    cx,0x101
c0022bbc:	75 60                	jne    c0022c1e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022bbe:	83 ec 0c             	sub    esp,0xc
c0022bc1:	68 70 02 00 00       	push   0x270
c0022bc6:	e8 ce c9 fe ff       	call   c000f599 <malloc>
c0022bcb:	89 c5                	mov    ebp,eax
c0022bcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bd0:	e8 0f 03 00 00       	call   c0022ee4 <IDE::IDE()>
c0022bd5:	58                   	pop    eax
c0022bd6:	5a                   	pop    edx
c0022bd7:	55                   	push   ebp
c0022bd8:	56                   	push   esi
c0022bd9:	e8 3e 0f ff ff       	call   c0013b1c <Device::addChild(Device*)>
c0022bde:	83 ec 1c             	sub    esp,0x1c
c0022be1:	b9 09 00 00 00       	mov    ecx,0x9
c0022be6:	fc                   	cld    
c0022be7:	89 e7                	mov    edi,esp
c0022be9:	89 de                	mov    esi,ebx
c0022beb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bed:	55                   	push   ebp
c0022bee:	e8 3b 0e ff ff       	call   c0013a2e <Device::preOpenPCI(PCIDeviceInfo)>
c0022bf3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022bf6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022bfa:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022c02:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c0a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022c12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c15:	83 c4 4c             	add    esp,0x4c
c0022c18:	5b                   	pop    ebx
c0022c19:	5e                   	pop    esi
c0022c1a:	5f                   	pop    edi
c0022c1b:	5d                   	pop    ebp
c0022c1c:	ff e0                	jmp    eax
c0022c1e:	83 ec 0c             	sub    esp,0xc
c0022c21:	68 58 01 00 00       	push   0x158
c0022c26:	e8 6e c9 fe ff       	call   c000f599 <malloc>
c0022c2b:	89 c5                	mov    ebp,eax
c0022c2d:	58                   	pop    eax
c0022c2e:	5a                   	pop    edx
c0022c2f:	68 7f c0 02 c0       	push   0xc002c07f
c0022c34:	55                   	push   ebp
c0022c35:	e8 ec 11 ff ff       	call   c0013e26 <DriverlessDevice::DriverlessDevice(char const*)>
c0022c3a:	59                   	pop    ecx
c0022c3b:	5f                   	pop    edi
c0022c3c:	55                   	push   ebp
c0022c3d:	56                   	push   esi
c0022c3e:	e8 d9 0e ff ff       	call   c0013b1c <Device::addChild(Device*)>
c0022c43:	b9 09 00 00 00       	mov    ecx,0x9
c0022c48:	fc                   	cld    
c0022c49:	89 df                	mov    edi,ebx
c0022c4b:	89 de                	mov    esi,ebx
c0022c4d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c4f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c53:	83 c4 2c             	add    esp,0x2c
c0022c56:	5b                   	pop    ebx
c0022c57:	5e                   	pop    esi
c0022c58:	5f                   	pop    edi
c0022c59:	5d                   	pop    ebp
c0022c5a:	e9 cf 0d ff ff       	jmp    c0013a2e <Device::preOpenPCI(PCIDeviceInfo)>
c0022c5f:	83 c4 1c             	add    esp,0x1c
c0022c62:	5b                   	pop    ebx
c0022c63:	5e                   	pop    esi
c0022c64:	5f                   	pop    edi
c0022c65:	5d                   	pop    ebp
c0022c66:	c3                   	ret    
c0022c67:	90                   	nop

c0022c68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c68:	55                   	push   ebp
c0022c69:	57                   	push   edi
c0022c6a:	56                   	push   esi
c0022c6b:	53                   	push   ebx
c0022c6c:	83 ec 68             	sub    esp,0x68
c0022c6f:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022c73:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022c7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c7e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022c85:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022c8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c8e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022c95:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022c9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022c9e:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022ca3:	6a 0c                	push   0xc
c0022ca5:	57                   	push   edi
c0022ca6:	53                   	push   ebx
c0022ca7:	56                   	push   esi
c0022ca8:	55                   	push   ebp
c0022ca9:	e8 88 f8 ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cae:	83 c4 20             	add    esp,0x20
c0022cb1:	57                   	push   edi
c0022cb2:	53                   	push   ebx
c0022cb3:	56                   	push   esi
c0022cb4:	55                   	push   ebp
c0022cb5:	e8 70 f9 ff ff       	call   c002262a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022cba:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022cbf:	57                   	push   edi
c0022cc0:	53                   	push   ebx
c0022cc1:	56                   	push   esi
c0022cc2:	55                   	push   ebp
c0022cc3:	e8 f8 f9 ff ff       	call   c00226c0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022cc8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022ccc:	83 c4 14             	add    esp,0x14
c0022ccf:	6a 3c                	push   0x3c
c0022cd1:	57                   	push   edi
c0022cd2:	53                   	push   ebx
c0022cd3:	56                   	push   esi
c0022cd4:	55                   	push   ebp
c0022cd5:	e8 5c f8 ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cda:	0f b6 c4             	movzx  eax,ah
c0022cdd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022ce1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022ce5:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022ce9:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0022cee:	83 c4 20             	add    esp,0x20
c0022cf1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022cf7:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022cfe:	74 7c                	je     c0022d7c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022d00:	31 c0                	xor    eax,eax
c0022d02:	8b 15 c8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c8
c0022d08:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d0e:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022d14:	7e 66                	jle    c0022d7c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022d16:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022d19:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d20:	39 cb                	cmp    ebx,ecx
c0022d22:	75 55                	jne    c0022d79 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d24:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022d2b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022d2f:	75 48                	jne    c0022d79 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022d35:	83 ec 0c             	sub    esp,0xc
c0022d38:	68 99 c0 02 c0       	push   0xc002c099
c0022d3d:	e8 a1 f9 fe ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0022d42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d46:	8b 15 c8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c8
c0022d4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022d50:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d56:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022d5e:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022d62:	52                   	push   edx
c0022d63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d67:	53                   	push   ebx
c0022d68:	68 be c0 02 c0       	push   0xc002c0be
c0022d6d:	e8 71 f9 fe ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0022d72:	83 c4 20             	add    esp,0x20
c0022d75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d79:	40                   	inc    eax
c0022d7a:	eb 86                	jmp    c0022d02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022d7c:	31 d2                	xor    edx,edx
c0022d7e:	83 ec 0c             	sub    esp,0xc
c0022d81:	57                   	push   edi
c0022d82:	53                   	push   ebx
c0022d83:	56                   	push   esi
c0022d84:	52                   	push   edx
c0022d85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022d89:	55                   	push   ebp
c0022d8a:	e8 7d f9 ff ff       	call   c002270c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d8f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022d93:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d97:	42                   	inc    edx
c0022d98:	83 c4 20             	add    esp,0x20
c0022d9b:	83 fa 06             	cmp    edx,0x6
c0022d9e:	75 de                	jne    c0022d7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022da0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022da5:	83 ec 0c             	sub    esp,0xc
c0022da8:	86 e0                	xchg   al,ah
c0022daa:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022daf:	6a 02                	push   0x2
c0022db1:	57                   	push   edi
c0022db2:	53                   	push   ebx
c0022db3:	56                   	push   esi
c0022db4:	55                   	push   ebp
c0022db5:	e8 7c f7 ff ff       	call   c0022536 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dba:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022dbf:	83 c4 20             	add    esp,0x20
c0022dc2:	57                   	push   edi
c0022dc3:	53                   	push   ebx
c0022dc4:	56                   	push   esi
c0022dc5:	55                   	push   ebp
c0022dc6:	e8 a9 f8 ff ff       	call   c0022674 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022dcb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022dcf:	57                   	push   edi
c0022dd0:	53                   	push   ebx
c0022dd1:	56                   	push   esi
c0022dd2:	55                   	push   ebp
c0022dd3:	e8 06 f8 ff ff       	call   c00225de <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dd8:	b9 09 00 00 00       	mov    ecx,0x9
c0022ddd:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022de2:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022de6:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022dea:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022dee:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022df2:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022df6:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022dfa:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022dfe:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022e02:	83 ec 0c             	sub    esp,0xc
c0022e05:	fc                   	cld    
c0022e06:	89 e7                	mov    edi,esp
c0022e08:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022e0c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e0e:	55                   	push   ebp
c0022e0f:	e8 e2 fc ff ff       	call   c0022af6 <PCI::foundDevice(PCIDeviceInfo)>
c0022e14:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e1a:	5b                   	pop    ebx
c0022e1b:	5e                   	pop    esi
c0022e1c:	5f                   	pop    edi
c0022e1d:	5d                   	pop    ebp
c0022e1e:	c3                   	ret    
c0022e1f:	90                   	nop

c0022e20 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e20:	55                   	push   ebp
c0022e21:	57                   	push   edi
c0022e22:	56                   	push   esi
c0022e23:	53                   	push   ebx
c0022e24:	83 ec 0c             	sub    esp,0xc
c0022e27:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e2b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e30:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e35:	6a 00                	push   0x0
c0022e37:	56                   	push   esi
c0022e38:	57                   	push   edi
c0022e39:	55                   	push   ebp
c0022e3a:	e8 9f f7 ff ff       	call   c00225de <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e3f:	6a 00                	push   0x0
c0022e41:	56                   	push   esi
c0022e42:	57                   	push   edi
c0022e43:	55                   	push   ebp
c0022e44:	e8 1f fe ff ff       	call   c0022c68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e49:	83 c4 20             	add    esp,0x20
c0022e4c:	6a 00                	push   0x0
c0022e4e:	56                   	push   esi
c0022e4f:	57                   	push   edi
c0022e50:	55                   	push   ebp
c0022e51:	e8 ac f7 ff ff       	call   c0022602 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e56:	83 c4 10             	add    esp,0x10
c0022e59:	84 c0                	test   al,al
c0022e5b:	79 27                	jns    c0022e84 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e5d:	bb 01 00 00 00       	mov    ebx,0x1
c0022e62:	53                   	push   ebx
c0022e63:	56                   	push   esi
c0022e64:	57                   	push   edi
c0022e65:	55                   	push   ebp
c0022e66:	e8 73 f7 ff ff       	call   c00225de <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e6b:	83 c4 10             	add    esp,0x10
c0022e6e:	66 40                	inc    ax
c0022e70:	74 0c                	je     c0022e7e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022e72:	53                   	push   ebx
c0022e73:	56                   	push   esi
c0022e74:	57                   	push   edi
c0022e75:	55                   	push   ebp
c0022e76:	e8 ed fd ff ff       	call   c0022c68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e7b:	83 c4 10             	add    esp,0x10
c0022e7e:	43                   	inc    ebx
c0022e7f:	83 fb 08             	cmp    ebx,0x8
c0022e82:	75 de                	jne    c0022e62 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e84:	83 c4 0c             	add    esp,0xc
c0022e87:	5b                   	pop    ebx
c0022e88:	5e                   	pop    esi
c0022e89:	5f                   	pop    edi
c0022e8a:	5d                   	pop    ebp
c0022e8b:	c3                   	ret    

c0022e8c <PCI::detect()>:
c0022e8c:	56                   	push   esi
c0022e8d:	53                   	push   ebx
c0022e8e:	53                   	push   ebx
c0022e8f:	31 db                	xor    ebx,ebx
c0022e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e95:	6a 00                	push   0x0
c0022e97:	6a 00                	push   0x0
c0022e99:	6a 00                	push   0x0
c0022e9b:	56                   	push   esi
c0022e9c:	e8 61 f7 ff ff       	call   c0022602 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022ea1:	83 c4 10             	add    esp,0x10
c0022ea4:	a8 80                	test   al,0x80
c0022ea6:	75 21                	jne    c0022ec9 <PCI::detect()+0x3d>
c0022ea8:	51                   	push   ecx
c0022ea9:	51                   	push   ecx
c0022eaa:	6a 00                	push   0x0
c0022eac:	56                   	push   esi
c0022ead:	e8 20 fc ff ff       	call   c0022ad2 <PCI::checkBus(unsigned char)>
c0022eb2:	83 c4 10             	add    esp,0x10
c0022eb5:	eb 24                	jmp    c0022edb <PCI::detect()+0x4f>
c0022eb7:	52                   	push   edx
c0022eb8:	52                   	push   edx
c0022eb9:	53                   	push   ebx
c0022eba:	43                   	inc    ebx
c0022ebb:	56                   	push   esi
c0022ebc:	e8 11 fc ff ff       	call   c0022ad2 <PCI::checkBus(unsigned char)>
c0022ec1:	83 c4 10             	add    esp,0x10
c0022ec4:	83 fb 08             	cmp    ebx,0x8
c0022ec7:	74 12                	je     c0022edb <PCI::detect()+0x4f>
c0022ec9:	53                   	push   ebx
c0022eca:	6a 00                	push   0x0
c0022ecc:	6a 00                	push   0x0
c0022ece:	56                   	push   esi
c0022ecf:	e8 0a f7 ff ff       	call   c00225de <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ed4:	83 c4 10             	add    esp,0x10
c0022ed7:	66 40                	inc    ax
c0022ed9:	74 dc                	je     c0022eb7 <PCI::detect()+0x2b>
c0022edb:	58                   	pop    eax
c0022edc:	5b                   	pop    ebx
c0022edd:	5e                   	pop    esi
c0022ede:	c3                   	ret    
c0022edf:	90                   	nop

c0022ee0 <IDE::close(int, int, void*)>:
c0022ee0:	83 c8 ff             	or     eax,0xffffffff
c0022ee3:	c3                   	ret    

c0022ee4 <IDE::IDE()>:
c0022ee4:	83 ec 0c             	sub    esp,0xc
c0022ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eeb:	83 ec 08             	sub    esp,0x8
c0022eee:	68 08 c1 02 c0       	push   0xc002c108
c0022ef3:	50                   	push   eax
c0022ef4:	e8 d1 0f ff ff       	call   c0013eca <HardDiskController::HardDiskController(char const*)>
c0022ef9:	83 c4 10             	add    esp,0x10
c0022efc:	ba 98 c1 02 c0       	mov    edx,0xc002c198
c0022f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f05:	89 10                	mov    DWORD PTR [eax],edx
c0022f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f12:	90                   	nop
c0022f13:	83 c4 0c             	add    esp,0xc
c0022f16:	c3                   	ret    
c0022f17:	90                   	nop

c0022f18 <IDE::prepareInterrupt(unsigned char)>:
c0022f18:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f21:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f29:	c3                   	ret    

c0022f2a <selectDrive(unsigned char, unsigned char)>:
c0022f2a:	c3                   	ret    
c0022f2b:	90                   	nop

c0022f2c <IDE::getBase(unsigned char)>:
c0022f2c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f35:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f3d:	c3                   	ret    

c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022f3e:	55                   	push   ebp
c0022f3f:	57                   	push   edi
c0022f40:	56                   	push   esi
c0022f41:	53                   	push   ebx
c0022f42:	83 ec 1c             	sub    esp,0x1c
c0022f45:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f49:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f4d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f50:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f54:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f58:	80 f9 03             	cmp    cl,0x3
c0022f5b:	77 51                	ja     c0022fae <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f61:	0f b6 f2             	movzx  esi,dl
c0022f64:	0f b6 db             	movzx  ebx,bl
c0022f67:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f6a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022f6e:	83 ca 80             	or     edx,0xffffff80
c0022f71:	0f b6 d2             	movzx  edx,dl
c0022f74:	52                   	push   edx
c0022f75:	6a 0c                	push   0xc
c0022f77:	56                   	push   esi
c0022f78:	57                   	push   edi
c0022f79:	e8 c0 ff ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f7e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f87:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f8b:	ee                   	out    dx,al
c0022f8c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f91:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f95:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f99:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f9d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022fa5:	83 c4 2c             	add    esp,0x2c
c0022fa8:	5b                   	pop    ebx
c0022fa9:	5e                   	pop    esi
c0022faa:	5f                   	pop    edi
c0022fab:	5d                   	pop    ebp
c0022fac:	eb 90                	jmp    c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fae:	80 fb 07             	cmp    bl,0x7
c0022fb1:	77 12                	ja     c0022fc5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022fb3:	0f b6 d2             	movzx  edx,dl
c0022fb6:	0f b6 db             	movzx  ebx,bl
c0022fb9:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022fc1:	89 da                	mov    edx,ebx
c0022fc3:	eb 2f                	jmp    c0022ff4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fc5:	80 fb 0d             	cmp    bl,0xd
c0022fc8:	77 13                	ja     c0022fdd <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022fca:	0f b6 d2             	movzx  edx,dl
c0022fcd:	0f b6 db             	movzx  ebx,bl
c0022fd0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022fd7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022fdb:	eb 17                	jmp    c0022ff4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fdd:	80 fb 15             	cmp    bl,0x15
c0022fe0:	77 13                	ja     c0022ff5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022fe2:	0f b6 d2             	movzx  edx,dl
c0022fe5:	0f b6 db             	movzx  ebx,bl
c0022fe8:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022ff0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022ff4:	ee                   	out    dx,al
c0022ff5:	83 c4 1c             	add    esp,0x1c
c0022ff8:	5b                   	pop    ebx
c0022ff9:	5e                   	pop    esi
c0022ffa:	5f                   	pop    edi
c0022ffb:	5d                   	pop    ebp
c0022ffc:	c3                   	ret    
c0022ffd:	90                   	nop

c0022ffe <IDE::read(unsigned char, unsigned char)>:
c0022ffe:	55                   	push   ebp
c0022fff:	57                   	push   edi
c0023000:	56                   	push   esi
c0023001:	53                   	push   ebx
c0023002:	83 ec 1c             	sub    esp,0x1c
c0023005:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023009:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002300d:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023010:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023014:	3c 03                	cmp    al,0x3
c0023016:	77 43                	ja     c002305b <IDE::read(unsigned char, unsigned char)+0x5d>
c0023018:	0f b6 f2             	movzx  esi,dl
c002301b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002301e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023022:	83 c8 80             	or     eax,0xffffff80
c0023025:	0f b6 c0             	movzx  eax,al
c0023028:	50                   	push   eax
c0023029:	6a 0c                	push   0xc
c002302b:	56                   	push   esi
c002302c:	57                   	push   edi
c002302d:	e8 0c ff ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023032:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023037:	0f b6 c3             	movzx  eax,bl
c002303a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002303e:	ec                   	in     al,dx
c002303f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023043:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023048:	52                   	push   edx
c0023049:	6a 0c                	push   0xc
c002304b:	56                   	push   esi
c002304c:	57                   	push   edi
c002304d:	e8 ec fe ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023052:	83 c4 20             	add    esp,0x20
c0023055:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023059:	eb 49                	jmp    c00230a4 <IDE::read(unsigned char, unsigned char)+0xa6>
c002305b:	80 fb 07             	cmp    bl,0x7
c002305e:	77 12                	ja     c0023072 <IDE::read(unsigned char, unsigned char)+0x74>
c0023060:	0f b6 d2             	movzx  edx,dl
c0023063:	0f b6 c3             	movzx  eax,bl
c0023066:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002306e:	89 c2                	mov    edx,eax
c0023070:	eb 31                	jmp    c00230a3 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023072:	80 fb 0d             	cmp    bl,0xd
c0023075:	77 13                	ja     c002308a <IDE::read(unsigned char, unsigned char)+0x8c>
c0023077:	0f b6 d2             	movzx  edx,dl
c002307a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023081:	0f b6 d3             	movzx  edx,bl
c0023084:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023088:	eb 19                	jmp    c00230a3 <IDE::read(unsigned char, unsigned char)+0xa5>
c002308a:	31 c0                	xor    eax,eax
c002308c:	80 fb 15             	cmp    bl,0x15
c002308f:	77 13                	ja     c00230a4 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023091:	0f b6 d2             	movzx  edx,dl
c0023094:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002309c:	0f b6 d3             	movzx  edx,bl
c002309f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00230a3:	ec                   	in     al,dx
c00230a4:	83 c4 1c             	add    esp,0x1c
c00230a7:	5b                   	pop    ebx
c00230a8:	5e                   	pop    esi
c00230a9:	5f                   	pop    edi
c00230aa:	5d                   	pop    ebp
c00230ab:	c3                   	ret    

c00230ac <IDE::waitInterrupt(unsigned char)>:
c00230ac:	55                   	push   ebp
c00230ad:	57                   	push   edi
c00230ae:	56                   	push   esi
c00230af:	53                   	push   ebx
c00230b0:	31 db                	xor    ebx,ebx
c00230b2:	83 ec 0c             	sub    esp,0xc
c00230b5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00230b9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00230be:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00230c6:	89 e8                	mov    eax,ebp
c00230c8:	84 c0                	test   al,al
c00230ca:	75 34                	jne    c0023100 <IDE::waitInterrupt(unsigned char)+0x54>
c00230cc:	52                   	push   edx
c00230cd:	6a 0c                	push   0xc
c00230cf:	56                   	push   esi
c00230d0:	57                   	push   edi
c00230d1:	e8 28 ff ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c00230d6:	83 c4 10             	add    esp,0x10
c00230d9:	a8 01                	test   al,0x1
c00230db:	75 2b                	jne    c0023108 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230dd:	f6 c3 04             	test   bl,0x4
c00230e0:	75 16                	jne    c00230f8 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230e2:	83 fb 32             	cmp    ebx,0x32
c00230e5:	7e 11                	jle    c00230f8 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230e7:	50                   	push   eax
c00230e8:	50                   	push   eax
c00230e9:	6a 00                	push   0x0
c00230eb:	68 80 96 98 00       	push   0x989680
c00230f0:	e8 c6 ab ff ff       	call   c001dcbb <nanoSleep(unsigned long long)>
c00230f5:	83 c4 10             	add    esp,0x10
c00230f8:	83 fb 3c             	cmp    ebx,0x3c
c00230fb:	74 0b                	je     c0023108 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230fd:	43                   	inc    ebx
c00230fe:	eb be                	jmp    c00230be <IDE::waitInterrupt(unsigned char)+0x12>
c0023100:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023108:	83 c4 0c             	add    esp,0xc
c002310b:	89 e8                	mov    eax,ebp
c002310d:	5b                   	pop    ebx
c002310e:	5e                   	pop    esi
c002310f:	5f                   	pop    edi
c0023110:	5d                   	pop    ebp
c0023111:	c3                   	ret    

c0023112 <ideChannel0IRQHandler(regs*, void*)>:
c0023112:	83 ec 10             	sub    esp,0x10
c0023115:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023119:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023120:	6a 07                	push   0x7
c0023122:	6a 00                	push   0x0
c0023124:	50                   	push   eax
c0023125:	e8 d4 fe ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c002312a:	83 c4 1c             	add    esp,0x1c
c002312d:	c3                   	ret    

c002312e <ideChannel1IRQHandler(regs*, void*)>:
c002312e:	83 ec 10             	sub    esp,0x10
c0023131:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023135:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002313c:	6a 07                	push   0x7
c002313e:	6a 01                	push   0x1
c0023140:	50                   	push   eax
c0023141:	e8 b8 fe ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c0023146:	83 c4 1c             	add    esp,0x1c
c0023149:	c3                   	ret    

c002314a <IDE::enableIRQs(unsigned char, bool)>:
c002314a:	57                   	push   edi
c002314b:	56                   	push   esi
c002314c:	be 04 00 00 00       	mov    esi,0x4
c0023151:	53                   	push   ebx
c0023152:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023157:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002315b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023160:	0f 94 c0             	sete   al
c0023163:	d1 e0                	shl    eax,1
c0023165:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002316c:	0f b6 c0             	movzx  eax,al
c002316f:	50                   	push   eax
c0023170:	6a 0c                	push   0xc
c0023172:	57                   	push   edi
c0023173:	53                   	push   ebx
c0023174:	e8 c5 fd ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023179:	83 c4 10             	add    esp,0x10
c002317c:	50                   	push   eax
c002317d:	6a 0c                	push   0xc
c002317f:	57                   	push   edi
c0023180:	53                   	push   ebx
c0023181:	e8 78 fe ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c0023186:	83 c4 10             	add    esp,0x10
c0023189:	4e                   	dec    esi
c002318a:	75 f0                	jne    c002317c <IDE::enableIRQs(unsigned char, bool)+0x32>
c002318c:	5b                   	pop    ebx
c002318d:	5e                   	pop    esi
c002318e:	5f                   	pop    edi
c002318f:	c3                   	ret    

c0023190 <IDE::open(int, int, void*)>:
c0023190:	55                   	push   ebp
c0023191:	57                   	push   edi
c0023192:	56                   	push   esi
c0023193:	53                   	push   ebx
c0023194:	83 ec 1c             	sub    esp,0x1c
c0023197:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002319b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00231a4:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00231ad:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00231b4:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00231bb:	0f 85 b0 02 00 00    	jne    c0023471 <IDE::open(int, int, void*)+0x2e1>
c00231c1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00231c7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00231cb:	83 e0 7f             	and    eax,0x7f
c00231ce:	3c 05                	cmp    al,0x5
c00231d0:	74 04                	je     c00231d6 <IDE::open(int, int, void*)+0x46>
c00231d2:	3c 0f                	cmp    al,0xf
c00231d4:	75 32                	jne    c0023208 <IDE::open(int, int, void*)+0x78>
c00231d6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00231dc:	83 e0 fc             	and    eax,0xfffffffc
c00231df:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00231e6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00231ec:	83 e0 fc             	and    eax,0xfffffffc
c00231ef:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00231f6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00231fc:	83 e0 fc             	and    eax,0xfffffffc
c00231ff:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023206:	eb 14                	jmp    c002321c <IDE::open(int, int, void*)+0x8c>
c0023208:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023212:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002321c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023223:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002322a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002322e:	89 c6                	mov    esi,eax
c0023230:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023235:	c1 e6 10             	shl    esi,0x10
c0023238:	89 e8                	mov    eax,ebp
c002323a:	89 fa                	mov    edx,edi
c002323c:	c1 e0 0b             	shl    eax,0xb
c002323f:	09 f0                	or     eax,esi
c0023241:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023248:	c1 e6 08             	shl    esi,0x8
c002324b:	09 c6                	or     esi,eax
c002324d:	89 f0                	mov    eax,esi
c002324f:	0d 08 00 00 80       	or     eax,0x80000008
c0023254:	ef                   	out    dx,eax
c0023255:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002325a:	89 ca                	mov    edx,ecx
c002325c:	ed                   	in     eax,dx
c002325d:	c1 e8 10             	shr    eax,0x10
c0023260:	3d ff ff 00 00       	cmp    eax,0xffff
c0023265:	0f 84 f5 00 00 00    	je     c0023360 <IDE::open(int, int, void*)+0x1d0>
c002326b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023271:	89 fa                	mov    edx,edi
c0023273:	89 f0                	mov    eax,esi
c0023275:	ef                   	out    dx,eax
c0023276:	b0 fe                	mov    al,0xfe
c0023278:	89 ca                	mov    edx,ecx
c002327a:	ee                   	out    dx,al
c002327b:	89 f0                	mov    eax,esi
c002327d:	89 fa                	mov    edx,edi
c002327f:	ef                   	out    dx,eax
c0023280:	89 ca                	mov    edx,ecx
c0023282:	ed                   	in     eax,dx
c0023283:	3c fe                	cmp    al,0xfe
c0023285:	0f 85 a9 00 00 00    	jne    c0023334 <IDE::open(int, int, void*)+0x1a4>
c002328b:	8b 15 c8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c8
c0023291:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023298:	74 33                	je     c00232cd <IDE::open(int, int, void*)+0x13d>
c002329a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00232a0:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00232a4:	40                   	inc    eax
c00232a5:	83 ec 0c             	sub    esp,0xc
c00232a8:	0f b6 c0             	movzx  eax,al
c00232ab:	50                   	push   eax
c00232ac:	55                   	push   ebp
c00232ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00232b1:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00232b7:	51                   	push   ecx
c00232b8:	e8 4b 48 ff ff       	call   c0017b08 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00232bd:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00232c2:	83 c4 1c             	add    esp,0x1c
c00232c5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00232cb:	eb 0a                	jmp    c00232d7 <IDE::open(int, int, void*)+0x147>
c00232cd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00232d7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00232de:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00232e5:	c1 e1 10             	shl    ecx,0x10
c00232e8:	c1 e0 08             	shl    eax,0x8
c00232eb:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232f0:	09 c1                	or     ecx,eax
c00232f2:	89 fa                	mov    edx,edi
c00232f4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00232fb:	c1 e0 0b             	shl    eax,0xb
c00232fe:	09 c1                	or     ecx,eax
c0023300:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023306:	89 c8                	mov    eax,ecx
c0023308:	ef                   	out    dx,eax
c0023309:	be fc 0c 00 00       	mov    esi,0xcfc
c002330e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023314:	89 f2                	mov    edx,esi
c0023316:	ee                   	out    dx,al
c0023317:	89 c8                	mov    eax,ecx
c0023319:	89 fa                	mov    edx,edi
c002331b:	ef                   	out    dx,eax
c002331c:	89 f2                	mov    edx,esi
c002331e:	ed                   	in     eax,dx
c002331f:	0f b6 c0             	movzx  eax,al
c0023322:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023328:	74 46                	je     c0023370 <IDE::open(int, int, void*)+0x1e0>
c002332a:	83 ec 0c             	sub    esp,0xc
c002332d:	68 20 c1 02 c0       	push   0xc002c120
c0023332:	eb 34                	jmp    c0023368 <IDE::open(int, int, void*)+0x1d8>
c0023334:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002333d:	75 17                	jne    c0023356 <IDE::open(int, int, void*)+0x1c6>
c002333f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023344:	74 07                	je     c002334d <IDE::open(int, int, void*)+0x1bd>
c0023346:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002334b:	75 09                	jne    c0023356 <IDE::open(int, int, void*)+0x1c6>
c002334d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023354:	eb 1a                	jmp    c0023370 <IDE::open(int, int, void*)+0x1e0>
c0023356:	83 ec 0c             	sub    esp,0xc
c0023359:	68 28 c1 02 c0       	push   0xc002c128
c002335e:	eb 08                	jmp    c0023368 <IDE::open(int, int, void*)+0x1d8>
c0023360:	83 ec 0c             	sub    esp,0xc
c0023363:	68 59 c1 02 c0       	push   0xc002c159
c0023368:	e8 e2 6a ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c002336d:	83 c4 10             	add    esp,0x10
c0023370:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023377:	79 1a                	jns    c0023393 <IDE::open(int, int, void*)+0x203>
c0023379:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002337f:	83 e0 fc             	and    eax,0xfffffffc
c0023382:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023389:	83 c0 08             	add    eax,0x8
c002338c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023393:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023399:	89 c2                	mov    edx,eax
c002339b:	83 e2 0f             	and    edx,0xf
c002339e:	66 83 fa 08          	cmp    dx,0x8
c00233a2:	75 0a                	jne    c00233ae <IDE::open(int, int, void*)+0x21e>
c00233a4:	83 e8 02             	sub    eax,0x2
c00233a7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00233ae:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00233b4:	89 c2                	mov    edx,eax
c00233b6:	83 e2 0f             	and    edx,0xf
c00233b9:	66 83 fa 08          	cmp    dx,0x8
c00233bd:	75 0a                	jne    c00233c9 <IDE::open(int, int, void*)+0x239>
c00233bf:	83 e8 02             	sub    eax,0x2
c00233c2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00233c9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00233d0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00233d7:	89 d0                	mov    eax,edx
c00233d9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233dc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233e0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00233e4:	8d 4a 01             	lea    ecx,[edx+0x1]
c00233e7:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233ec:	0f b6 c9             	movzx  ecx,cl
c00233ef:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00233f6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233f9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233fd:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023401:	8d 50 02             	lea    edx,[eax+0x2]
c0023404:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023409:	0f b6 d2             	movzx  edx,dl
c002340c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023412:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023415:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023419:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002341d:	8d 48 03             	lea    ecx,[eax+0x3]
c0023420:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023425:	0f b6 c9             	movzx  ecx,cl
c0023428:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002342e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023431:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023435:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023439:	8d 50 04             	lea    edx,[eax+0x4]
c002343c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023442:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023447:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002344e:	66 85 f6             	test   si,si
c0023451:	74 5b                	je     c00234ae <IDE::open(int, int, void*)+0x31e>
c0023453:	0f b6 d2             	movzx  edx,dl
c0023456:	83 c0 05             	add    eax,0x5
c0023459:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002345c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023460:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023464:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002346a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002346f:	eb 3d                	jmp    c00234ae <IDE::open(int, int, void*)+0x31e>
c0023471:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023477:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002347e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023485:	66 05 06 02          	add    ax,0x206
c0023489:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023490:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023497:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002349e:	66 05 06 02          	add    ax,0x206
c00234a2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234a9:	e9 e5 fe ff ff       	jmp    c0023393 <IDE::open(int, int, void*)+0x203>
c00234ae:	50                   	push   eax
c00234af:	50                   	push   eax
c00234b0:	6a 00                	push   0x0
c00234b2:	53                   	push   ebx
c00234b3:	e8 60 fa ff ff       	call   c0022f18 <IDE::prepareInterrupt(unsigned char)>
c00234b8:	5a                   	pop    edx
c00234b9:	59                   	pop    ecx
c00234ba:	6a 01                	push   0x1
c00234bc:	53                   	push   ebx
c00234bd:	e8 56 fa ff ff       	call   c0022f18 <IDE::prepareInterrupt(unsigned char)>
c00234c2:	83 c4 0c             	add    esp,0xc
c00234c5:	6a 00                	push   0x0
c00234c7:	6a 00                	push   0x0
c00234c9:	53                   	push   ebx
c00234ca:	e8 7b fc ff ff       	call   c002314a <IDE::enableIRQs(unsigned char, bool)>
c00234cf:	83 c4 0c             	add    esp,0xc
c00234d2:	6a 00                	push   0x0
c00234d4:	6a 01                	push   0x1
c00234d6:	53                   	push   ebx
c00234d7:	e8 6e fc ff ff       	call   c002314a <IDE::enableIRQs(unsigned char, bool)>
c00234dc:	83 c4 10             	add    esp,0x10
c00234df:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00234e6:	74 34                	je     c002351c <IDE::open(int, int, void*)+0x38c>
c00234e8:	83 ec 0c             	sub    esp,0xc
c00234eb:	53                   	push   ebx
c00234ec:	6a 01                	push   0x1
c00234ee:	68 12 31 02 c0       	push   0xc0023112
c00234f3:	6a 0e                	push   0xe
c00234f5:	53                   	push   ebx
c00234f6:	e8 99 05 ff ff       	call   c0013a94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234fb:	83 c4 14             	add    esp,0x14
c00234fe:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023504:	53                   	push   ebx
c0023505:	6a 01                	push   0x1
c0023507:	68 2e 31 02 c0       	push   0xc002312e
c002350c:	6a 0f                	push   0xf
c002350e:	53                   	push   ebx
c002350f:	e8 80 05 ff ff       	call   c0013a94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023514:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002351a:	eb 38                	jmp    c0023554 <IDE::open(int, int, void*)+0x3c4>
c002351c:	83 ec 0c             	sub    esp,0xc
c002351f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023529:	53                   	push   ebx
c002352a:	6a 00                	push   0x0
c002352c:	68 12 31 02 c0       	push   0xc0023112
c0023531:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023537:	53                   	push   ebx
c0023538:	e8 57 05 ff ff       	call   c0013a94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002353d:	83 c4 14             	add    esp,0x14
c0023540:	53                   	push   ebx
c0023541:	6a 00                	push   0x0
c0023543:	68 2e 31 02 c0       	push   0xc002312e
c0023548:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002354e:	53                   	push   ebx
c002354f:	e8 40 05 ff ff       	call   c0013a94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023554:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023556:	83 c4 20             	add    esp,0x20
c0023559:	83 ec 0c             	sub    esp,0xc
c002355c:	53                   	push   ebx
c002355d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023560:	83 c4 0c             	add    esp,0xc
c0023563:	6a 07                	push   0x7
c0023565:	6a 00                	push   0x0
c0023567:	53                   	push   ebx
c0023568:	e8 91 fa ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c002356d:	83 c4 0c             	add    esp,0xc
c0023570:	6a 07                	push   0x7
c0023572:	6a 01                	push   0x1
c0023574:	53                   	push   ebx
c0023575:	e8 84 fa ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c002357a:	83 c4 0c             	add    esp,0xc
c002357d:	6a 01                	push   0x1
c002357f:	6a 00                	push   0x0
c0023581:	53                   	push   ebx
c0023582:	e8 c3 fb ff ff       	call   c002314a <IDE::enableIRQs(unsigned char, bool)>
c0023587:	83 c4 0c             	add    esp,0xc
c002358a:	6a 01                	push   0x1
c002358c:	6a 01                	push   0x1
c002358e:	53                   	push   ebx
c002358f:	e8 b6 fb ff ff       	call   c002314a <IDE::enableIRQs(unsigned char, bool)>
c0023594:	83 c4 2c             	add    esp,0x2c
c0023597:	31 c0                	xor    eax,eax
c0023599:	5b                   	pop    ebx
c002359a:	5e                   	pop    esi
c002359b:	5f                   	pop    edi
c002359c:	5d                   	pop    ebp
c002359d:	c3                   	ret    

c002359e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002359e:	55                   	push   ebp
c002359f:	57                   	push   edi
c00235a0:	56                   	push   esi
c00235a1:	53                   	push   ebx
c00235a2:	83 ec 1c             	sub    esp,0x1c
c00235a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00235a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00235ad:	8d 50 f8             	lea    edx,[eax-0x8]
c00235b0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00235b4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00235b8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00235bc:	80 fa 03             	cmp    dl,0x3
c00235bf:	77 5d                	ja     c002361e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00235c1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00235c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00235c9:	0f b6 db             	movzx  ebx,bl
c00235cc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00235cf:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00235d3:	83 ca 80             	or     edx,0xffffff80
c00235d6:	0f b6 d2             	movzx  edx,dl
c00235d9:	52                   	push   edx
c00235da:	6a 0c                	push   0xc
c00235dc:	53                   	push   ebx
c00235dd:	56                   	push   esi
c00235de:	e8 5b f9 ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235e3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00235e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00235f0:	0f b6 c0             	movzx  eax,al
c00235f3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00235f7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235f9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00235fe:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023602:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023606:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002360a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023612:	83 c4 2c             	add    esp,0x2c
c0023615:	5b                   	pop    ebx
c0023616:	5e                   	pop    esi
c0023617:	5f                   	pop    edi
c0023618:	5d                   	pop    ebp
c0023619:	e9 20 f9 ff ff       	jmp    c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002361e:	3c 07                	cmp    al,0x7
c0023620:	77 10                	ja     c0023632 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023622:	0f b6 db             	movzx  ebx,bl
c0023625:	0f b6 d0             	movzx  edx,al
c0023628:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023630:	eb 2d                	jmp    c002365f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023632:	3c 0d                	cmp    al,0xd
c0023634:	77 13                	ja     c0023649 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023636:	0f b6 db             	movzx  ebx,bl
c0023639:	0f b6 c0             	movzx  eax,al
c002363c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023643:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023647:	eb 16                	jmp    c002365f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023649:	3c 15                	cmp    al,0x15
c002364b:	77 14                	ja     c0023661 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002364d:	0f b6 db             	movzx  ebx,bl
c0023650:	0f b6 c0             	movzx  eax,al
c0023653:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002365b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002365f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023661:	83 c4 1c             	add    esp,0x1c
c0023664:	5b                   	pop    ebx
c0023665:	5e                   	pop    esi
c0023666:	5f                   	pop    edi
c0023667:	5d                   	pop    ebp
c0023668:	c3                   	ret    
c0023669:	90                   	nop

c002366a <IDE::detect()>:
c002366a:	55                   	push   ebp
c002366b:	57                   	push   edi
c002366c:	56                   	push   esi
c002366d:	53                   	push   ebx
c002366e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023674:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002367b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023682:	0f 85 9d 02 00 00    	jne    c0023925 <IDE::detect()+0x2bb>
c0023688:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002368f:	31 f6                	xor    esi,esi
c0023691:	31 ed                	xor    ebp,ebp
c0023693:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002369b:	89 e8                	mov    eax,ebp
c002369d:	c1 e0 06             	shl    eax,0x6
c00236a0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00236a8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00236ac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00236b0:	c1 e0 04             	shl    eax,0x4
c00236b3:	83 c8 a0             	or     eax,0xffffffa0
c00236b6:	0f b6 c0             	movzx  eax,al
c00236b9:	50                   	push   eax
c00236ba:	6a 06                	push   0x6
c00236bc:	56                   	push   esi
c00236bd:	53                   	push   ebx
c00236be:	e8 7b f8 ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236c3:	83 c4 0c             	add    esp,0xc
c00236c6:	6a 0c                	push   0xc
c00236c8:	56                   	push   esi
c00236c9:	53                   	push   ebx
c00236ca:	e8 2f f9 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c00236cf:	83 c4 0c             	add    esp,0xc
c00236d2:	6a 0c                	push   0xc
c00236d4:	56                   	push   esi
c00236d5:	53                   	push   ebx
c00236d6:	e8 23 f9 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c00236db:	83 c4 0c             	add    esp,0xc
c00236de:	6a 0c                	push   0xc
c00236e0:	56                   	push   esi
c00236e1:	53                   	push   ebx
c00236e2:	e8 17 f9 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c00236e7:	83 c4 0c             	add    esp,0xc
c00236ea:	6a 0c                	push   0xc
c00236ec:	56                   	push   esi
c00236ed:	53                   	push   ebx
c00236ee:	e8 0b f9 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c00236f3:	68 ec 00 00 00       	push   0xec
c00236f8:	6a 07                	push   0x7
c00236fa:	56                   	push   esi
c00236fb:	53                   	push   ebx
c00236fc:	e8 3d f8 ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023701:	83 c4 1c             	add    esp,0x1c
c0023704:	6a 0c                	push   0xc
c0023706:	56                   	push   esi
c0023707:	53                   	push   ebx
c0023708:	e8 f1 f8 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c002370d:	83 c4 0c             	add    esp,0xc
c0023710:	6a 0c                	push   0xc
c0023712:	56                   	push   esi
c0023713:	53                   	push   ebx
c0023714:	e8 e5 f8 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c0023719:	83 c4 0c             	add    esp,0xc
c002371c:	6a 0c                	push   0xc
c002371e:	56                   	push   esi
c002371f:	53                   	push   ebx
c0023720:	e8 d9 f8 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c0023725:	83 c4 0c             	add    esp,0xc
c0023728:	6a 0c                	push   0xc
c002372a:	56                   	push   esi
c002372b:	53                   	push   ebx
c002372c:	e8 cd f8 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c0023731:	83 c4 0c             	add    esp,0xc
c0023734:	6a 0c                	push   0xc
c0023736:	56                   	push   esi
c0023737:	53                   	push   ebx
c0023738:	e8 c1 f8 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c002373d:	83 c4 10             	add    esp,0x10
c0023740:	84 c0                	test   al,al
c0023742:	0f 84 63 01 00 00    	je     c00238ab <IDE::detect()+0x241>
c0023748:	31 ff                	xor    edi,edi
c002374a:	50                   	push   eax
c002374b:	6a 0c                	push   0xc
c002374d:	56                   	push   esi
c002374e:	53                   	push   ebx
c002374f:	e8 aa f8 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c0023754:	83 c4 10             	add    esp,0x10
c0023757:	a8 01                	test   al,0x1
c0023759:	0f 85 6d 01 00 00    	jne    c00238cc <IDE::detect()+0x262>
c002375f:	84 c0                	test   al,al
c0023761:	78 04                	js     c0023767 <IDE::detect()+0xfd>
c0023763:	a8 08                	test   al,0x8
c0023765:	75 27                	jne    c002378e <IDE::detect()+0x124>
c0023767:	47                   	inc    edi
c0023768:	81 ff 17 01 00 00    	cmp    edi,0x117
c002376e:	7e da                	jle    c002374a <IDE::detect()+0xe0>
c0023770:	50                   	push   eax
c0023771:	50                   	push   eax
c0023772:	6a 00                	push   0x0
c0023774:	68 40 4b 4c 00       	push   0x4c4b40
c0023779:	e8 3d a5 ff ff       	call   c001dcbb <nanoSleep(unsigned long long)>
c002377e:	83 c4 10             	add    esp,0x10
c0023781:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023787:	75 c1                	jne    c002374a <IDE::detect()+0xe0>
c0023789:	e9 3e 01 00 00       	jmp    c00238cc <IDE::detect()+0x262>
c002378e:	31 c9                	xor    ecx,ecx
c0023790:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023794:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023798:	83 ec 0c             	sub    esp,0xc
c002379b:	68 80 00 00 00       	push   0x80
c00237a0:	57                   	push   edi
c00237a1:	6a 00                	push   0x0
c00237a3:	56                   	push   esi
c00237a4:	53                   	push   ebx
c00237a5:	e8 f4 fd ff ff       	call   c002359e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00237aa:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00237af:	89 e8                	mov    eax,ebp
c00237b1:	89 d1                	mov    ecx,edx
c00237b3:	c1 e0 06             	shl    eax,0x6
c00237b6:	01 d8                	add    eax,ebx
c00237b8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00237bf:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00237c6:	89 f2                	mov    edx,esi
c00237c8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00237ce:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00237d2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00237d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00237dc:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00237e3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00237eb:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00237f2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00237fa:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023800:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023807:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002380d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023811:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023815:	83 c4 20             	add    esp,0x20
c0023818:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002381b:	83 c0 02             	add    eax,0x2
c002381e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023824:	83 c7 02             	add    edi,0x2
c0023827:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002382a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023830:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023834:	75 e2                	jne    c0023818 <IDE::detect()+0x1ae>
c0023836:	89 e8                	mov    eax,ebp
c0023838:	c1 e0 06             	shl    eax,0x6
c002383b:	01 d8                	add    eax,ebx
c002383d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023843:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002384a:	66 c1 ea 09          	shr    dx,0x9
c002384e:	83 e2 01             	and    edx,0x1
c0023851:	84 c9                	test   cl,cl
c0023853:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023859:	75 22                	jne    c002387d <IDE::detect()+0x213>
c002385b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023862:	74 46                	je     c00238aa <IDE::detect()+0x240>
c0023864:	83 ec 0c             	sub    esp,0xc
c0023867:	68 7c 01 00 00       	push   0x17c
c002386c:	e8 28 bd fe ff       	call   c000f599 <malloc>
c0023871:	89 c7                	mov    edi,eax
c0023873:	89 04 24             	mov    DWORD PTR [esp],eax
c0023876:	e8 15 05 00 00       	call   c0023d90 <ATA::ATA()>
c002387b:	eb 17                	jmp    c0023894 <IDE::detect()+0x22a>
c002387d:	83 ec 0c             	sub    esp,0xc
c0023880:	68 80 01 00 00       	push   0x180
c0023885:	e8 0f bd fe ff       	call   c000f599 <malloc>
c002388a:	89 c7                	mov    edi,eax
c002388c:	89 04 24             	mov    DWORD PTR [esp],eax
c002388f:	e8 04 0b 00 00       	call   c0024398 <ATAPI::ATAPI()>
c0023894:	5a                   	pop    edx
c0023895:	59                   	pop    ecx
c0023896:	57                   	push   edi
c0023897:	53                   	push   ebx
c0023898:	e8 7f 02 ff ff       	call   c0013b1c <Device::addChild(Device*)>
c002389d:	8b 07                	mov    eax,DWORD PTR [edi]
c002389f:	53                   	push   ebx
c00238a0:	55                   	push   ebp
c00238a1:	6a 00                	push   0x0
c00238a3:	57                   	push   edi
c00238a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00238a7:	83 c4 20             	add    esp,0x20
c00238aa:	45                   	inc    ebp
c00238ab:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00238b0:	74 0d                	je     c00238bf <IDE::detect()+0x255>
c00238b2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00238ba:	e9 dc fd ff ff       	jmp    c002369b <IDE::detect()+0x31>
c00238bf:	4e                   	dec    esi
c00238c0:	74 63                	je     c0023925 <IDE::detect()+0x2bb>
c00238c2:	be 01 00 00 00       	mov    esi,0x1
c00238c7:	e9 c7 fd ff ff       	jmp    c0023693 <IDE::detect()+0x29>
c00238cc:	50                   	push   eax
c00238cd:	6a 04                	push   0x4
c00238cf:	56                   	push   esi
c00238d0:	53                   	push   ebx
c00238d1:	e8 28 f7 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c00238d6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238da:	83 c4 0c             	add    esp,0xc
c00238dd:	6a 05                	push   0x5
c00238df:	56                   	push   esi
c00238e0:	53                   	push   ebx
c00238e1:	e8 18 f7 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c00238e6:	83 c4 10             	add    esp,0x10
c00238e9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00238ed:	80 fa 14             	cmp    dl,0x14
c00238f0:	75 04                	jne    c00238f6 <IDE::detect()+0x28c>
c00238f2:	3c eb                	cmp    al,0xeb
c00238f4:	eb 07                	jmp    c00238fd <IDE::detect()+0x293>
c00238f6:	3c 96                	cmp    al,0x96
c00238f8:	75 b1                	jne    c00238ab <IDE::detect()+0x241>
c00238fa:	80 fa 69             	cmp    dl,0x69
c00238fd:	75 ac                	jne    c00238ab <IDE::detect()+0x241>
c00238ff:	68 a1 00 00 00       	push   0xa1
c0023904:	6a 07                	push   0x7
c0023906:	56                   	push   esi
c0023907:	53                   	push   ebx
c0023908:	e8 31 f6 ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002390d:	5f                   	pop    edi
c002390e:	58                   	pop    eax
c002390f:	6a 00                	push   0x0
c0023911:	68 40 42 0f 00       	push   0xf4240
c0023916:	e8 a0 a3 ff ff       	call   c001dcbb <nanoSleep(unsigned long long)>
c002391b:	83 c4 10             	add    esp,0x10
c002391e:	b1 01                	mov    cl,0x1
c0023920:	e9 6b fe ff ff       	jmp    c0023790 <IDE::detect()+0x126>
c0023925:	81 c4 1c 02 00 00    	add    esp,0x21c
c002392b:	5b                   	pop    ebx
c002392c:	5e                   	pop    esi
c002392d:	5f                   	pop    edi
c002392e:	5d                   	pop    ebp
c002392f:	c3                   	ret    

c0023930 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023930:	55                   	push   ebp
c0023931:	57                   	push   edi
c0023932:	56                   	push   esi
c0023933:	53                   	push   ebx
c0023934:	83 ec 1c             	sub    esp,0x1c
c0023937:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002393b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002393f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023943:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023947:	88 c3                	mov    bl,al
c0023949:	84 c0                	test   al,al
c002394b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002394f:	0f 84 81 00 00 00    	je     c00239d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023955:	83 ec 0c             	sub    esp,0xc
c0023958:	68 83 c1 02 c0       	push   0xc002c183
c002395d:	e8 81 ed fe ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0023962:	83 c4 10             	add    esp,0x10
c0023965:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023969:	3c 01                	cmp    al,0x1
c002396b:	74 63                	je     c00239d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c002396d:	3c 02                	cmp    al,0x2
c002396f:	75 53                	jne    c00239c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023971:	d1 e6                	shl    esi,1
c0023973:	09 ee                	or     esi,ebp
c0023975:	50                   	push   eax
c0023976:	89 f0                	mov    eax,esi
c0023978:	6a 01                	push   0x1
c002397a:	0f b6 f0             	movzx  esi,al
c002397d:	c1 e6 06             	shl    esi,0x6
c0023980:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023988:	50                   	push   eax
c0023989:	57                   	push   edi
c002398a:	e8 6f f6 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c002398f:	83 c4 10             	add    esp,0x10
c0023992:	a8 01                	test   al,0x1
c0023994:	74 02                	je     c0023998 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023996:	b3 07                	mov    bl,0x7
c0023998:	a8 02                	test   al,0x2
c002399a:	74 02                	je     c002399e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c002399c:	b3 03                	mov    bl,0x3
c002399e:	a8 04                	test   al,0x4
c00239a0:	74 02                	je     c00239a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00239a2:	b3 14                	mov    bl,0x14
c00239a4:	a8 08                	test   al,0x8
c00239a6:	74 02                	je     c00239aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00239a8:	b3 03                	mov    bl,0x3
c00239aa:	a8 10                	test   al,0x10
c00239ac:	74 02                	je     c00239b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00239ae:	b3 15                	mov    bl,0x15
c00239b0:	a8 20                	test   al,0x20
c00239b2:	74 02                	je     c00239b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00239b4:	b3 03                	mov    bl,0x3
c00239b6:	a8 40                	test   al,0x40
c00239b8:	74 02                	je     c00239bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00239ba:	b3 16                	mov    bl,0x16
c00239bc:	84 c0                	test   al,al
c00239be:	79 16                	jns    c00239d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239c0:	b3 0d                	mov    bl,0xd
c00239c2:	eb 12                	jmp    c00239d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239c4:	3c 03                	cmp    al,0x3
c00239c6:	74 0c                	je     c00239d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00239c8:	3c 04                	cmp    al,0x4
c00239ca:	75 0a                	jne    c00239d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239cc:	b3 08                	mov    bl,0x8
c00239ce:	eb 06                	jmp    c00239d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239d0:	b3 13                	mov    bl,0x13
c00239d2:	eb 02                	jmp    c00239d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239d4:	b3 17                	mov    bl,0x17
c00239d6:	83 c4 1c             	add    esp,0x1c
c00239d9:	88 d8                	mov    al,bl
c00239db:	5b                   	pop    ebx
c00239dc:	5e                   	pop    esi
c00239dd:	5f                   	pop    edi
c00239de:	5d                   	pop    ebp
c00239df:	c3                   	ret    

c00239e0 <IDE::polling(unsigned char, unsigned int)>:
c00239e0:	57                   	push   edi
c00239e1:	56                   	push   esi
c00239e2:	53                   	push   ebx
c00239e3:	bb 04 00 00 00       	mov    ebx,0x4
c00239e8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00239ec:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00239f1:	52                   	push   edx
c00239f2:	6a 0c                	push   0xc
c00239f4:	56                   	push   esi
c00239f5:	57                   	push   edi
c00239f6:	e8 03 f6 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c00239fb:	83 c4 10             	add    esp,0x10
c00239fe:	4b                   	dec    ebx
c00239ff:	75 f0                	jne    c00239f1 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023a01:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023a06:	50                   	push   eax
c0023a07:	6a 0c                	push   0xc
c0023a09:	56                   	push   esi
c0023a0a:	57                   	push   edi
c0023a0b:	e8 ee f5 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c0023a10:	83 c4 10             	add    esp,0x10
c0023a13:	a8 01                	test   al,0x1
c0023a15:	75 17                	jne    c0023a2e <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a17:	a8 20                	test   al,0x20
c0023a19:	75 0f                	jne    c0023a2a <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023a1b:	4b                   	dec    ebx
c0023a1c:	74 10                	je     c0023a2e <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a1e:	84 c0                	test   al,al
c0023a20:	78 e4                	js     c0023a06 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a22:	a8 08                	test   al,0x8
c0023a24:	74 e0                	je     c0023a06 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a26:	31 c0                	xor    eax,eax
c0023a28:	eb 06                	jmp    c0023a30 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a2a:	b0 01                	mov    al,0x1
c0023a2c:	eb 02                	jmp    c0023a30 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a2e:	b0 02                	mov    al,0x2
c0023a30:	5b                   	pop    ebx
c0023a31:	5e                   	pop    esi
c0023a32:	5f                   	pop    edi
c0023a33:	c3                   	ret    

c0023a34 <SATABus::close(int, int, void*)>:
c0023a34:	31 c0                	xor    eax,eax
c0023a36:	c3                   	ret    
c0023a37:	90                   	nop

c0023a38 <SATABus::detect()>:
c0023a38:	c3                   	ret    
c0023a39:	90                   	nop

c0023a3a <SATABus::SATABus()>:
c0023a3a:	83 ec 0c             	sub    esp,0xc
c0023a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a41:	83 ec 08             	sub    esp,0x8
c0023a44:	68 bc c1 02 c0       	push   0xc002c1bc
c0023a49:	50                   	push   eax
c0023a4a:	e8 7b 04 ff ff       	call   c0013eca <HardDiskController::HardDiskController(char const*)>
c0023a4f:	83 c4 10             	add    esp,0x10
c0023a52:	ba 10 c2 02 c0       	mov    edx,0xc002c210
c0023a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a5b:	89 10                	mov    DWORD PTR [eax],edx
c0023a5d:	83 ec 0c             	sub    esp,0xc
c0023a60:	6a 50                	push   0x50
c0023a62:	e8 26 c0 fe ff       	call   c000fa8d <Phys::allocateContiguousPages(int)>
c0023a67:	83 c4 10             	add    esp,0x10
c0023a6a:	89 c2                	mov    edx,eax
c0023a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a70:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023a76:	83 ec 0c             	sub    esp,0xc
c0023a79:	6a 50                	push   0x50
c0023a7b:	e8 9f d7 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0023a80:	83 c4 10             	add    esp,0x10
c0023a83:	89 c2                	mov    edx,eax
c0023a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a89:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023a8f:	a1 30 db 02 c0       	mov    eax,ds:0xc002db30
c0023a94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a98:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023a9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023aa2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023aa8:	83 ec 0c             	sub    esp,0xc
c0023aab:	6a 03                	push   0x3
c0023aad:	6a 50                	push   0x50
c0023aaf:	51                   	push   ecx
c0023ab0:	52                   	push   edx
c0023ab1:	50                   	push   eax
c0023ab2:	e8 1b e2 fe ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023ab7:	83 c4 20             	add    esp,0x20
c0023aba:	90                   	nop
c0023abb:	83 c4 0c             	add    esp,0xc
c0023abe:	c3                   	ret    
c0023abf:	90                   	nop

c0023ac0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023ac0:	83 ec 0c             	sub    esp,0xc
c0023ac3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ac7:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023aca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023acd:	09 c2                	or     edx,eax
c0023acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ad3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023ad9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023adb:	31 c0                	xor    eax,eax
c0023add:	c1 e9 08             	shr    ecx,0x8
c0023ae0:	83 e1 0f             	and    ecx,0xf
c0023ae3:	39 c8                	cmp    eax,ecx
c0023ae5:	74 0a                	je     c0023af1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023ae7:	f6 c2 01             	test   dl,0x1
c0023aea:	74 18                	je     c0023b04 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023aec:	d1 ea                	shr    edx,1
c0023aee:	40                   	inc    eax
c0023aef:	eb f2                	jmp    c0023ae3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023af1:	83 ec 0c             	sub    esp,0xc
c0023af4:	68 e0 c1 02 c0       	push   0xc002c1e0
c0023af9:	e8 51 63 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0023afe:	83 c4 10             	add    esp,0x10
c0023b01:	83 c8 ff             	or     eax,0xffffffff
c0023b04:	83 c4 0c             	add    esp,0xc
c0023b07:	c3                   	ret    

c0023b08 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023b08:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023b0c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023b0f:	89 c2                	mov    edx,eax
c0023b11:	c1 ea 08             	shr    edx,0x8
c0023b14:	83 e2 0f             	and    edx,0xf
c0023b17:	fe ca                	dec    dl
c0023b19:	75 31                	jne    c0023b4c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b1b:	83 e0 0f             	and    eax,0xf
c0023b1e:	3c 03                	cmp    al,0x3
c0023b20:	75 2a                	jne    c0023b4c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b22:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023b25:	b8 02 00 00 00       	mov    eax,0x2
c0023b2a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023b30:	74 1c                	je     c0023b4e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b32:	b8 04 00 00 00       	mov    eax,0x4
c0023b37:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023b3d:	74 0f                	je     c0023b4e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b3f:	31 c0                	xor    eax,eax
c0023b41:	83 fa 03             	cmp    edx,0x3
c0023b44:	0f 94 c0             	sete   al
c0023b47:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023b4b:	c3                   	ret    
c0023b4c:	31 c0                	xor    eax,eax
c0023b4e:	c3                   	ret    
c0023b4f:	90                   	nop

c0023b50 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b54:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b57:	0f ba e2 0f          	bt     edx,0xf
c0023b5b:	72 f7                	jb     c0023b54 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023b5d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b60:	83 ca 10             	or     edx,0x10
c0023b63:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b66:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b69:	83 ca 01             	or     edx,0x1
c0023b6c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b6f:	c3                   	ret    

c0023b70 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b74:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b77:	83 e2 fe             	and    edx,0xfffffffe
c0023b7a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b7d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b80:	83 e2 ef             	and    edx,0xffffffef
c0023b83:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b86:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b89:	0f ba e2 0e          	bt     edx,0xe
c0023b8d:	72 f7                	jb     c0023b86 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b8f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b92:	0f ba e2 0f          	bt     edx,0xf
c0023b96:	72 ee                	jb     c0023b86 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b98:	c3                   	ret    
c0023b99:	90                   	nop

c0023b9a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023b9a:	55                   	push   ebp
c0023b9b:	57                   	push   edi
c0023b9c:	56                   	push   esi
c0023b9d:	53                   	push   ebx
c0023b9e:	83 ec 1c             	sub    esp,0x1c
c0023ba1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023ba5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023ba9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023bad:	53                   	push   ebx
c0023bae:	89 fd                	mov    ebp,edi
c0023bb0:	56                   	push   esi
c0023bb1:	c1 e5 0a             	shl    ebp,0xa
c0023bb4:	e8 b7 ff ff ff       	call   c0023b70 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023bb9:	83 ec 0c             	sub    esp,0xc
c0023bbc:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023bc2:	01 e8                	add    eax,ebp
c0023bc4:	89 03                	mov    DWORD PTR [ebx],eax
c0023bc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023bc8:	68 00 04 00 00       	push   0x400
c0023bcd:	6a 00                	push   0x0
c0023bcf:	50                   	push   eax
c0023bd0:	e8 7b cb fd ff       	call   c0000750 <memset>
c0023bd5:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023bdb:	89 fa                	mov    edx,edi
c0023bdd:	01 e8                	add    eax,ebp
c0023bdf:	c1 e7 0d             	shl    edi,0xd
c0023be2:	89 03                	mov    DWORD PTR [ebx],eax
c0023be4:	c1 e2 08             	shl    edx,0x8
c0023be7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023bee:	81 c2 00 80 00 00    	add    edx,0x8000
c0023bf4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023bf8:	89 d0                	mov    eax,edx
c0023bfa:	83 c4 1c             	add    esp,0x1c
c0023bfd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023c06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023c09:	68 00 01 00 00       	push   0x100
c0023c0e:	6a 00                	push   0x0
c0023c10:	50                   	push   eax
c0023c11:	e8 3a cb fd ff       	call   c0000750 <memset>
c0023c16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c1a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023c20:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023c26:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023c2a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023c2d:	83 c4 10             	add    esp,0x10
c0023c30:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023c37:	31 ff                	xor    edi,edi
c0023c39:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023c3f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c49:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c4f:	83 c5 20             	add    ebp,0x20
c0023c52:	01 f8                	add    eax,edi
c0023c54:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c57:	52                   	push   edx
c0023c58:	68 00 01 00 00       	push   0x100
c0023c5d:	6a 00                	push   0x0
c0023c5f:	50                   	push   eax
c0023c60:	e8 eb ca fd ff       	call   c0000750 <memset>
c0023c65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c69:	83 c4 10             	add    esp,0x10
c0023c6c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023c72:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023c79:	01 f8                	add    eax,edi
c0023c7b:	81 c7 00 01 00 00    	add    edi,0x100
c0023c81:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c84:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023c8a:	75 b3                	jne    c0023c3f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023c8c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023c90:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023c94:	83 c4 1c             	add    esp,0x1c
c0023c97:	5b                   	pop    ebx
c0023c98:	5e                   	pop    esi
c0023c99:	5f                   	pop    edi
c0023c9a:	5d                   	pop    ebp
c0023c9b:	e9 b0 fe ff ff       	jmp    c0023b50 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023ca0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023ca0:	55                   	push   ebp
c0023ca1:	57                   	push   edi
c0023ca2:	56                   	push   esi
c0023ca3:	53                   	push   ebx
c0023ca4:	31 db                	xor    ebx,ebx
c0023ca6:	83 ec 0c             	sub    esp,0xc
c0023ca9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023cad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023cb1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023cb4:	f7 c7 01 00 00 00    	test   edi,0x1
c0023cba:	74 7a                	je     c0023d36 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023cbc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023cc0:	89 d8                	mov    eax,ebx
c0023cc2:	c1 e0 07             	shl    eax,0x7
c0023cc5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023ccc:	55                   	push   ebp
c0023ccd:	56                   	push   esi
c0023cce:	e8 35 fe ff ff       	call   c0023b08 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023cd3:	5a                   	pop    edx
c0023cd4:	83 f8 01             	cmp    eax,0x1
c0023cd7:	59                   	pop    ecx
c0023cd8:	75 21                	jne    c0023cfb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023cda:	50                   	push   eax
c0023cdb:	53                   	push   ebx
c0023cdc:	55                   	push   ebp
c0023cdd:	56                   	push   esi
c0023cde:	e8 b7 fe ff ff       	call   c0023b9a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ce3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023cea:	e8 aa b8 fe ff       	call   c000f599 <malloc>
c0023cef:	89 c5                	mov    ebp,eax
c0023cf1:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cf4:	e8 03 0d 00 00       	call   c00249fc <SATA::SATA()>
c0023cf9:	eb 24                	jmp    c0023d1f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023cfb:	83 f8 04             	cmp    eax,0x4
c0023cfe:	75 36                	jne    c0023d36 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023d00:	51                   	push   ecx
c0023d01:	53                   	push   ebx
c0023d02:	55                   	push   ebp
c0023d03:	56                   	push   esi
c0023d04:	e8 91 fe ff ff       	call   c0023b9a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023d09:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023d10:	e8 84 b8 fe ff       	call   c000f599 <malloc>
c0023d15:	89 c5                	mov    ebp,eax
c0023d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d1a:	e8 53 10 00 00       	call   c0024d72 <SATAPI::SATAPI()>
c0023d1f:	58                   	pop    eax
c0023d20:	5a                   	pop    edx
c0023d21:	55                   	push   ebp
c0023d22:	56                   	push   esi
c0023d23:	e8 f4 fd fe ff       	call   c0013b1c <Device::addChild(Device*)>
c0023d28:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023d2b:	56                   	push   esi
c0023d2c:	6a 00                	push   0x0
c0023d2e:	53                   	push   ebx
c0023d2f:	55                   	push   ebp
c0023d30:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023d33:	83 c4 20             	add    esp,0x20
c0023d36:	d1 ef                	shr    edi,1
c0023d38:	43                   	inc    ebx
c0023d39:	83 fb 20             	cmp    ebx,0x20
c0023d3c:	0f 85 72 ff ff ff    	jne    c0023cb4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023d42:	83 c4 0c             	add    esp,0xc
c0023d45:	5b                   	pop    ebx
c0023d46:	5e                   	pop    esi
c0023d47:	5f                   	pop    edi
c0023d48:	5d                   	pop    ebp
c0023d49:	c3                   	ret    

c0023d4a <SATABus::open(int, int, void*)>:
c0023d4a:	83 ec 14             	sub    esp,0x14
c0023d4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d51:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023d57:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d5d:	52                   	push   edx
c0023d5e:	50                   	push   eax
c0023d5f:	e8 3c ff ff ff       	call   c0023ca0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023d64:	31 c0                	xor    eax,eax
c0023d66:	83 c4 1c             	add    esp,0x1c
c0023d69:	c3                   	ret    

c0023d6a <ATA::close(int, int, void*)>:
c0023d6a:	83 ec 0c             	sub    esp,0xc
c0023d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d71:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d77:	85 c0                	test   eax,eax
c0023d79:	74 0c                	je     c0023d87 <ATA::close(int, int, void*)+0x1d>
c0023d7b:	83 ec 0c             	sub    esp,0xc
c0023d7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d80:	50                   	push   eax
c0023d81:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d84:	83 c4 10             	add    esp,0x10
c0023d87:	31 c0                	xor    eax,eax
c0023d89:	83 c4 0c             	add    esp,0xc
c0023d8c:	c3                   	ret    
c0023d8d:	90                   	nop

c0023d8e <ATA::powerSaving(PowerSavingLevel)>:
c0023d8e:	c3                   	ret    
c0023d8f:	90                   	nop

c0023d90 <ATA::ATA()>:
c0023d90:	83 ec 0c             	sub    esp,0xc
c0023d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d97:	83 ec 04             	sub    esp,0x4
c0023d9a:	68 00 02 00 00       	push   0x200
c0023d9f:	68 d9 c2 02 c0       	push   0xc002c2d9
c0023da4:	50                   	push   eax
c0023da5:	e8 a8 01 ff ff       	call   c0013f52 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023daa:	83 c4 10             	add    esp,0x10
c0023dad:	ba 5c c2 02 c0       	mov    edx,0xc002c25c
c0023db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023db6:	89 10                	mov    DWORD PTR [eax],edx
c0023db8:	90                   	nop
c0023db9:	83 c4 0c             	add    esp,0xc
c0023dbc:	c3                   	ret    
c0023dbd:	90                   	nop

c0023dbe <ATA::flush(bool)>:
c0023dbe:	53                   	push   ebx
c0023dbf:	83 ec 08             	sub    esp,0x8
c0023dc2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023dc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023dcb:	19 c0                	sbb    eax,eax
c0023dcd:	83 e0 fd             	and    eax,0xfffffffd
c0023dd0:	05 ea 00 00 00       	add    eax,0xea
c0023dd5:	50                   	push   eax
c0023dd6:	6a 07                	push   0x7
c0023dd8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ddf:	50                   	push   eax
c0023de0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023de6:	e8 53 f1 ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023deb:	83 c4 0c             	add    esp,0xc
c0023dee:	6a 00                	push   0x0
c0023df0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023df7:	50                   	push   eax
c0023df8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dfe:	e8 dd fb ff ff       	call   c00239e0 <IDE::polling(unsigned char, unsigned int)>
c0023e03:	83 c4 18             	add    esp,0x18
c0023e06:	5b                   	pop    ebx
c0023e07:	c3                   	ret    

c0023e08 <ATA::readyForCommand()>:
c0023e08:	56                   	push   esi
c0023e09:	53                   	push   ebx
c0023e0a:	31 db                	xor    ebx,ebx
c0023e0c:	50                   	push   eax
c0023e0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023e11:	50                   	push   eax
c0023e12:	6a 0c                	push   0xc
c0023e14:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023e1b:	50                   	push   eax
c0023e1c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023e22:	e8 d7 f1 ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c0023e27:	83 c4 10             	add    esp,0x10
c0023e2a:	a8 88                	test   al,0x88
c0023e2c:	74 23                	je     c0023e51 <ATA::readyForCommand()+0x49>
c0023e2e:	43                   	inc    ebx
c0023e2f:	83 fb 63             	cmp    ebx,0x63
c0023e32:	7e dd                	jle    c0023e11 <ATA::readyForCommand()+0x9>
c0023e34:	51                   	push   ecx
c0023e35:	51                   	push   ecx
c0023e36:	6a 00                	push   0x0
c0023e38:	68 40 42 0f 00       	push   0xf4240
c0023e3d:	e8 79 9e ff ff       	call   c001dcbb <nanoSleep(unsigned long long)>
c0023e42:	83 c4 10             	add    esp,0x10
c0023e45:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023e4b:	75 c4                	jne    c0023e11 <ATA::readyForCommand()+0x9>
c0023e4d:	31 c0                	xor    eax,eax
c0023e4f:	eb 02                	jmp    c0023e53 <ATA::readyForCommand()+0x4b>
c0023e51:	b0 01                	mov    al,0x1
c0023e53:	5a                   	pop    edx
c0023e54:	5b                   	pop    ebx
c0023e55:	5e                   	pop    esi
c0023e56:	c3                   	ret    
c0023e57:	90                   	nop

c0023e58 <ATA::access(unsigned long long, int, void*, bool)>:
c0023e58:	55                   	push   ebp
c0023e59:	57                   	push   edi
c0023e5a:	56                   	push   esi
c0023e5b:	53                   	push   ebx
c0023e5c:	83 ec 2c             	sub    esp,0x2c
c0023e5f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023e63:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023e67:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023e6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023e6f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023e73:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023e77:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023e7b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023e81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e85:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023e8b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e8f:	c1 e0 06             	shl    eax,0x6
c0023e92:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023e9a:	74 5d                	je     c0023ef9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023e9c:	89 fa                	mov    edx,edi
c0023e9e:	89 f0                	mov    eax,esi
c0023ea0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023ea4:	c1 ea 1c             	shr    edx,0x1c
c0023ea7:	89 d1                	mov    ecx,edx
c0023ea9:	09 c1                	or     ecx,eax
c0023eab:	74 25                	je     c0023ed2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023ead:	31 ed                	xor    ebp,ebp
c0023eaf:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023eb6:	89 fa                	mov    edx,edi
c0023eb8:	89 f0                	mov    eax,esi
c0023eba:	0f ad d0             	shrd   eax,edx,cl
c0023ebd:	d3 ea                	shr    edx,cl
c0023ebf:	f6 c1 20             	test   cl,0x20
c0023ec2:	74 02                	je     c0023ec6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023ec4:	89 d0                	mov    eax,edx
c0023ec6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023eca:	45                   	inc    ebp
c0023ecb:	83 fd 06             	cmp    ebp,0x6
c0023ece:	75 df                	jne    c0023eaf <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023ed0:	eb 76                	jmp    c0023f48 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023ed2:	89 f0                	mov    eax,esi
c0023ed4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023ed9:	89 fa                	mov    edx,edi
c0023edb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023ee2:	0f ac d0 10          	shrd   eax,edx,0x10
c0023ee6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023eeb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023eef:	c1 ee 18             	shr    esi,0x18
c0023ef2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023ef7:	eb 56                	jmp    c0023f4f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023ef9:	6a 00                	push   0x0
c0023efb:	6a 3f                	push   0x3f
c0023efd:	57                   	push   edi
c0023efe:	56                   	push   esi
c0023eff:	e8 20 29 00 00       	call   c0026824 <__umoddi3>
c0023f04:	83 c4 10             	add    esp,0x10
c0023f07:	40                   	inc    eax
c0023f08:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023f0c:	6a 00                	push   0x0
c0023f0e:	68 f0 03 00 00       	push   0x3f0
c0023f13:	57                   	push   edi
c0023f14:	56                   	push   esi
c0023f15:	e8 0a 28 00 00       	call   c0026724 <__udivdi3>
c0023f1a:	83 c4 10             	add    esp,0x10
c0023f1d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023f22:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f29:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f2e:	6a 00                	push   0x0
c0023f30:	6a 3f                	push   0x3f
c0023f32:	57                   	push   edi
c0023f33:	56                   	push   esi
c0023f34:	e8 eb 27 00 00       	call   c0026724 <__udivdi3>
c0023f39:	83 c4 10             	add    esp,0x10
c0023f3c:	89 c6                	mov    esi,eax
c0023f3e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023f43:	83 e6 0f             	and    esi,0xf
c0023f46:	eb 07                	jmp    c0023f4f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f48:	31 f6                	xor    esi,esi
c0023f4a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023f4f:	bf 01 00 00 00       	mov    edi,0x1
c0023f54:	50                   	push   eax
c0023f55:	6a 00                	push   0x0
c0023f57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f5e:	50                   	push   eax
c0023f5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f63:	e8 e2 f1 ff ff       	call   c002314a <IDE::enableIRQs(unsigned char, bool)>
c0023f68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f6b:	e8 98 fe ff ff       	call   c0023e08 <ATA::readyForCommand()>
c0023f70:	83 c4 10             	add    esp,0x10
c0023f73:	84 c0                	test   al,al
c0023f75:	0f 84 5a 02 00 00    	je     c00241d5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023f7b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023f81:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023f87:	c1 e0 04             	shl    eax,0x4
c0023f8a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023f91:	09 c6                	or     esi,eax
c0023f93:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023f98:	75 05                	jne    c0023f9f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023f9a:	83 ce a0             	or     esi,0xffffffa0
c0023f9d:	eb 03                	jmp    c0023fa2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023f9f:	83 ce e0             	or     esi,0xffffffe0
c0023fa2:	89 f0                	mov    eax,esi
c0023fa4:	0f b6 f0             	movzx  esi,al
c0023fa7:	56                   	push   esi
c0023fa8:	6a 06                	push   0x6
c0023faa:	51                   	push   ecx
c0023fab:	52                   	push   edx
c0023fac:	e8 8d ef ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fb1:	83 c4 10             	add    esp,0x10
c0023fb4:	6a 00                	push   0x0
c0023fb6:	6a 01                	push   0x1
c0023fb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fbf:	50                   	push   eax
c0023fc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fc6:	e8 73 ef ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fcb:	83 c4 10             	add    esp,0x10
c0023fce:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023fd3:	75 6e                	jne    c0024043 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023fd5:	6a 00                	push   0x0
c0023fd7:	6a 08                	push   0x8
c0023fd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fe0:	50                   	push   eax
c0023fe1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fe7:	e8 52 ef ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fec:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023ff1:	50                   	push   eax
c0023ff2:	6a 09                	push   0x9
c0023ff4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ffb:	50                   	push   eax
c0023ffc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024002:	e8 37 ef ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024007:	83 c4 20             	add    esp,0x20
c002400a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002400f:	50                   	push   eax
c0024010:	6a 0a                	push   0xa
c0024012:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024019:	50                   	push   eax
c002401a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024020:	e8 19 ef ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024025:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002402a:	50                   	push   eax
c002402b:	6a 0b                	push   0xb
c002402d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024034:	50                   	push   eax
c0024035:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002403b:	e8 fe ee ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024040:	83 c4 20             	add    esp,0x20
c0024043:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024048:	50                   	push   eax
c0024049:	6a 02                	push   0x2
c002404b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024052:	50                   	push   eax
c0024053:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024059:	e8 e0 ee ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002405e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024063:	50                   	push   eax
c0024064:	6a 03                	push   0x3
c0024066:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002406d:	50                   	push   eax
c002406e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024074:	e8 c5 ee ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024079:	83 c4 20             	add    esp,0x20
c002407c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024081:	50                   	push   eax
c0024082:	6a 04                	push   0x4
c0024084:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002408b:	50                   	push   eax
c002408c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024092:	e8 a7 ee ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024097:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002409c:	50                   	push   eax
c002409d:	6a 05                	push   0x5
c002409f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240a6:	50                   	push   eax
c00240a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ad:	e8 8c ee ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240b2:	83 c4 20             	add    esp,0x20
c00240b5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00240ba:	0f 94 c0             	sete   al
c00240bd:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00240c2:	74 09                	je     c00240cd <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00240c4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00240cb:	eb 07                	jmp    c00240d4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00240cd:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00240d4:	0f b6 c0             	movzx  eax,al
c00240d7:	50                   	push   eax
c00240d8:	6a 07                	push   0x7
c00240da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240e1:	50                   	push   eax
c00240e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240e8:	e8 51 ee ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240ed:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00240f1:	83 c4 10             	add    esp,0x10
c00240f4:	85 f6                	test   esi,esi
c00240f6:	0f 84 ba 00 00 00    	je     c00241b6 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00240fc:	50                   	push   eax
c00240fd:	6a 01                	push   0x1
c00240ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024106:	50                   	push   eax
c0024107:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002410d:	e8 ce f8 ff ff       	call   c00239e0 <IDE::polling(unsigned char, unsigned int)>
c0024112:	83 c4 10             	add    esp,0x10
c0024115:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002411b:	84 c0                	test   al,al
c002411d:	74 2c                	je     c002414b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002411f:	0f b6 f8             	movzx  edi,al
c0024122:	0f b6 d2             	movzx  edx,dl
c0024125:	57                   	push   edi
c0024126:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002412d:	50                   	push   eax
c002412e:	52                   	push   edx
c002412f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024135:	e8 f6 f7 ff ff       	call   c0023930 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002413a:	c7 04 24 34 c2 02 c0 	mov    DWORD PTR [esp],0xc002c234
c0024141:	e8 9d e5 fe ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0024146:	e9 87 00 00 00       	jmp    c00241d2 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002414b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024150:	74 33                	je     c0024185 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024152:	31 ed                	xor    ebp,ebp
c0024154:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024158:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002415c:	50                   	push   eax
c002415d:	50                   	push   eax
c002415e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024165:	50                   	push   eax
c0024166:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002416c:	e8 bb ed ff ff       	call   c0022f2c <IDE::getBase(unsigned char)>
c0024171:	89 c2                	mov    edx,eax
c0024173:	89 f8                	mov    eax,edi
c0024175:	66 ef                	out    dx,ax
c0024177:	45                   	inc    ebp
c0024178:	83 c4 10             	add    esp,0x10
c002417b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024181:	75 d1                	jne    c0024154 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024183:	eb 23                	jmp    c00241a8 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024185:	0f b6 d2             	movzx  edx,dl
c0024188:	51                   	push   ecx
c0024189:	51                   	push   ecx
c002418a:	52                   	push   edx
c002418b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024191:	e8 96 ed ff ff       	call   c0022f2c <IDE::getBase(unsigned char)>
c0024196:	b9 00 01 00 00       	mov    ecx,0x100
c002419b:	89 c2                	mov    edx,eax
c002419d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00241a1:	fc                   	cld    
c00241a2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00241a5:	83 c4 10             	add    esp,0x10
c00241a8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00241b0:	4e                   	dec    esi
c00241b1:	e9 3e ff ff ff       	jmp    c00240f4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00241b6:	31 ff                	xor    edi,edi
c00241b8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00241bd:	74 16                	je     c00241d5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241bf:	50                   	push   eax
c00241c0:	50                   	push   eax
c00241c1:	31 c0                	xor    eax,eax
c00241c3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00241c8:	0f 94 c0             	sete   al
c00241cb:	50                   	push   eax
c00241cc:	53                   	push   ebx
c00241cd:	e8 ec fb ff ff       	call   c0023dbe <ATA::flush(bool)>
c00241d2:	83 c4 10             	add    esp,0x10
c00241d5:	83 c4 2c             	add    esp,0x2c
c00241d8:	89 f8                	mov    eax,edi
c00241da:	5b                   	pop    ebx
c00241db:	5e                   	pop    esi
c00241dc:	5f                   	pop    edi
c00241dd:	5d                   	pop    ebp
c00241de:	c3                   	ret    
c00241df:	90                   	nop

c00241e0 <ATA::read(unsigned long long, int, void*)>:
c00241e0:	57                   	push   edi
c00241e1:	b8 04 00 00 00       	mov    eax,0x4
c00241e6:	56                   	push   esi
c00241e7:	53                   	push   ebx
c00241e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00241f0:	8d 7a ff             	lea    edi,[edx-0x1]
c00241f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00241f7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00241fb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024201:	77 25                	ja     c0024228 <ATA::read(unsigned long long, int, void*)+0x48>
c0024203:	b8 06 00 00 00       	mov    eax,0x6
c0024208:	85 f6                	test   esi,esi
c002420a:	74 1c                	je     c0024228 <ATA::read(unsigned long long, int, void*)+0x48>
c002420c:	50                   	push   eax
c002420d:	50                   	push   eax
c002420e:	6a 00                	push   0x0
c0024210:	56                   	push   esi
c0024211:	52                   	push   edx
c0024212:	53                   	push   ebx
c0024213:	51                   	push   ecx
c0024214:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024218:	e8 3b fc ff ff       	call   c0023e58 <ATA::access(unsigned long long, int, void*, bool)>
c002421d:	83 c4 20             	add    esp,0x20
c0024220:	85 c0                	test   eax,eax
c0024222:	0f 95 c0             	setne  al
c0024225:	0f b6 c0             	movzx  eax,al
c0024228:	5b                   	pop    ebx
c0024229:	5e                   	pop    esi
c002422a:	5f                   	pop    edi
c002422b:	c3                   	ret    

c002422c <ATA::write(unsigned long long, int, void*)>:
c002422c:	57                   	push   edi
c002422d:	b8 04 00 00 00       	mov    eax,0x4
c0024232:	56                   	push   esi
c0024233:	53                   	push   ebx
c0024234:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024238:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002423c:	8d 7a ff             	lea    edi,[edx-0x1]
c002423f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024243:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024247:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002424d:	77 25                	ja     c0024274 <ATA::write(unsigned long long, int, void*)+0x48>
c002424f:	b8 06 00 00 00       	mov    eax,0x6
c0024254:	85 f6                	test   esi,esi
c0024256:	74 1c                	je     c0024274 <ATA::write(unsigned long long, int, void*)+0x48>
c0024258:	50                   	push   eax
c0024259:	50                   	push   eax
c002425a:	6a 01                	push   0x1
c002425c:	56                   	push   esi
c002425d:	52                   	push   edx
c002425e:	53                   	push   ebx
c002425f:	51                   	push   ecx
c0024260:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024264:	e8 ef fb ff ff       	call   c0023e58 <ATA::access(unsigned long long, int, void*, bool)>
c0024269:	83 c4 20             	add    esp,0x20
c002426c:	85 c0                	test   eax,eax
c002426e:	0f 95 c0             	setne  al
c0024271:	0f b6 c0             	movzx  eax,al
c0024274:	5b                   	pop    ebx
c0024275:	5e                   	pop    esi
c0024276:	5f                   	pop    edi
c0024277:	c3                   	ret    

c0024278 <ATA::detectCHS()>:
c0024278:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002427c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024282:	c1 e0 06             	shl    eax,0x6
c0024285:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002428b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024295:	c7 44 24 04 3f c2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c23f
c002429d:	e9 ad 5b ff ff       	jmp    c0019e4f <Krnl::panic(char const*)>

c00242a2 <ATA::open(int, int, void*)>:
c00242a2:	53                   	push   ebx
c00242a3:	83 ec 08             	sub    esp,0x8
c00242a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00242aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00242ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00242b2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00242b8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00242be:	c1 e0 06             	shl    eax,0x6
c00242c1:	01 d0                	add    eax,edx
c00242c3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00242ca:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00242d0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00242d7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00242e1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00242e7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00242ee:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00242f5:	75 0c                	jne    c0024303 <ATA::open(int, int, void*)+0x61>
c00242f7:	83 ec 0c             	sub    esp,0xc
c00242fa:	53                   	push   ebx
c00242fb:	e8 78 ff ff ff       	call   c0024278 <ATA::detectCHS()>
c0024300:	83 c4 10             	add    esp,0x10
c0024303:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024309:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002430f:	c1 e0 06             	shl    eax,0x6
c0024312:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024319:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024323:	d1 e8                	shr    eax,1
c0024325:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002432b:	6a 04                	push   0x4
c002432d:	6a 0c                	push   0xc
c002432f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024336:	50                   	push   eax
c0024337:	52                   	push   edx
c0024338:	e8 01 ec ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002433d:	90                   	nop
c002433e:	90                   	nop
c002433f:	6a 00                	push   0x0
c0024341:	6a 0c                	push   0xc
c0024343:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002434a:	50                   	push   eax
c002434b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024351:	e8 e8 eb ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024356:	83 c4 14             	add    esp,0x14
c0024359:	53                   	push   ebx
c002435a:	e8 5b fc fe ff       	call   c0013fba <PhysicalDisk::startCache()>
c002435f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024362:	e8 d5 1e ff ff       	call   c001623c <createPartitionsForDisk(PhysicalDisk*)>
c0024367:	31 c0                	xor    eax,eax
c0024369:	83 c4 18             	add    esp,0x18
c002436c:	5b                   	pop    ebx
c002436d:	c3                   	ret    

c002436e <ATAPI::write(unsigned long long, int, void*)>:
c002436e:	b8 03 00 00 00       	mov    eax,0x3
c0024373:	c3                   	ret    

c0024374 <ATAPI::close(int, int, void*)>:
c0024374:	83 ec 0c             	sub    esp,0xc
c0024377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002437b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024381:	85 c0                	test   eax,eax
c0024383:	74 0c                	je     c0024391 <ATAPI::close(int, int, void*)+0x1d>
c0024385:	83 ec 0c             	sub    esp,0xc
c0024388:	8b 10                	mov    edx,DWORD PTR [eax]
c002438a:	50                   	push   eax
c002438b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002438e:	83 c4 10             	add    esp,0x10
c0024391:	31 c0                	xor    eax,eax
c0024393:	83 c4 0c             	add    esp,0xc
c0024396:	c3                   	ret    
c0024397:	90                   	nop

c0024398 <ATAPI::ATAPI()>:
c0024398:	83 ec 0c             	sub    esp,0xc
c002439b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002439f:	83 ec 04             	sub    esp,0x4
c00243a2:	68 00 08 00 00       	push   0x800
c00243a7:	68 79 c3 02 c0       	push   0xc002c379
c00243ac:	50                   	push   eax
c00243ad:	e8 a0 fb fe ff       	call   c0013f52 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00243b2:	83 c4 10             	add    esp,0x10
c00243b5:	ba 94 c2 02 c0       	mov    edx,0xc002c294
c00243ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243be:	89 10                	mov    DWORD PTR [eax],edx
c00243c0:	90                   	nop
c00243c1:	83 c4 0c             	add    esp,0xc
c00243c4:	c3                   	ret    
c00243c5:	90                   	nop

c00243c6 <ATAPI::readyForCommand()>:
c00243c6:	56                   	push   esi
c00243c7:	53                   	push   ebx
c00243c8:	31 db                	xor    ebx,ebx
c00243ca:	50                   	push   eax
c00243cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00243cf:	50                   	push   eax
c00243d0:	6a 0c                	push   0xc
c00243d2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00243d9:	50                   	push   eax
c00243da:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00243e0:	e8 19 ec ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c00243e5:	83 c4 10             	add    esp,0x10
c00243e8:	a8 88                	test   al,0x88
c00243ea:	74 23                	je     c002440f <ATAPI::readyForCommand()+0x49>
c00243ec:	43                   	inc    ebx
c00243ed:	83 fb 63             	cmp    ebx,0x63
c00243f0:	7e dd                	jle    c00243cf <ATAPI::readyForCommand()+0x9>
c00243f2:	51                   	push   ecx
c00243f3:	51                   	push   ecx
c00243f4:	6a 00                	push   0x0
c00243f6:	68 40 42 0f 00       	push   0xf4240
c00243fb:	e8 bb 98 ff ff       	call   c001dcbb <nanoSleep(unsigned long long)>
c0024400:	83 c4 10             	add    esp,0x10
c0024403:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024409:	75 c4                	jne    c00243cf <ATAPI::readyForCommand()+0x9>
c002440b:	31 c0                	xor    eax,eax
c002440d:	eb 02                	jmp    c0024411 <ATAPI::readyForCommand()+0x4b>
c002440f:	b0 01                	mov    al,0x1
c0024411:	5a                   	pop    edx
c0024412:	5b                   	pop    ebx
c0024413:	5e                   	pop    esi
c0024414:	c3                   	ret    
c0024415:	90                   	nop

c0024416 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024416:	55                   	push   ebp
c0024417:	57                   	push   edi
c0024418:	56                   	push   esi
c0024419:	53                   	push   ebx
c002441a:	83 ec 20             	sub    esp,0x20
c002441d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024421:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024425:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024429:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002442d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024431:	6a 01                	push   0x1
c0024433:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002443a:	50                   	push   eax
c002443b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024441:	e8 04 ed ff ff       	call   c002314a <IDE::enableIRQs(unsigned char, bool)>
c0024446:	5e                   	pop    esi
c0024447:	58                   	pop    eax
c0024448:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002444f:	50                   	push   eax
c0024450:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024456:	e8 bd ea ff ff       	call   c0022f18 <IDE::prepareInterrupt(unsigned char)>
c002445b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002445e:	e8 63 ff ff ff       	call   c00243c6 <ATAPI::readyForCommand()>
c0024463:	83 c4 10             	add    esp,0x10
c0024466:	84 c0                	test   al,al
c0024468:	75 0a                	jne    c0024474 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002446a:	bb 01 00 00 00       	mov    ebx,0x1
c002446f:	e9 57 02 00 00       	jmp    c00246cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024474:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002447a:	c1 e0 04             	shl    eax,0x4
c002447d:	0f b6 c0             	movzx  eax,al
c0024480:	50                   	push   eax
c0024481:	6a 06                	push   0x6
c0024483:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002448a:	50                   	push   eax
c002448b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024491:	e8 a8 ea ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024496:	6a 00                	push   0x0
c0024498:	6a 01                	push   0x1
c002449a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244a1:	50                   	push   eax
c00244a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244a8:	e8 91 ea ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244ad:	83 c4 20             	add    esp,0x20
c00244b0:	0f b6 c3             	movzx  eax,bl
c00244b3:	0f b6 df             	movzx  ebx,bh
c00244b6:	50                   	push   eax
c00244b7:	6a 04                	push   0x4
c00244b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244c0:	50                   	push   eax
c00244c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244c7:	e8 72 ea ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244cc:	53                   	push   ebx
c00244cd:	6a 05                	push   0x5
c00244cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244d6:	50                   	push   eax
c00244d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244dd:	e8 5c ea ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244e2:	83 c4 20             	add    esp,0x20
c00244e5:	68 a0 00 00 00       	push   0xa0
c00244ea:	6a 07                	push   0x7
c00244ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244f3:	50                   	push   eax
c00244f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244fa:	e8 3f ea ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244ff:	83 c4 0c             	add    esp,0xc
c0024502:	6a 01                	push   0x1
c0024504:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002450b:	50                   	push   eax
c002450c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024512:	e8 c9 f4 ff ff       	call   c00239e0 <IDE::polling(unsigned char, unsigned int)>
c0024517:	83 c4 10             	add    esp,0x10
c002451a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024520:	84 c0                	test   al,al
c0024522:	74 23                	je     c0024547 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024524:	0f b6 d8             	movzx  ebx,al
c0024527:	0f b6 d2             	movzx  edx,dl
c002452a:	53                   	push   ebx
c002452b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024532:	50                   	push   eax
c0024533:	52                   	push   edx
c0024534:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002453a:	e8 f1 f3 ff ff       	call   c0023930 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002453f:	83 c4 10             	add    esp,0x10
c0024542:	e9 84 01 00 00       	jmp    c00246cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024547:	0f b6 d2             	movzx  edx,dl
c002454a:	53                   	push   ebx
c002454b:	53                   	push   ebx
c002454c:	52                   	push   edx
c002454d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024553:	e8 d4 e9 ff ff       	call   c0022f2c <IDE::getBase(unsigned char)>
c0024558:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002455c:	b9 06 00 00 00       	mov    ecx,0x6
c0024561:	89 c2                	mov    edx,eax
c0024563:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024566:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002456a:	83 c4 10             	add    esp,0x10
c002456d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024573:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002457a:	85 db                	test   ebx,ebx
c002457c:	0f 84 ec 00 00 00    	je     c002466e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024582:	51                   	push   ecx
c0024583:	51                   	push   ecx
c0024584:	52                   	push   edx
c0024585:	50                   	push   eax
c0024586:	e8 21 eb ff ff       	call   c00230ac <IDE::waitInterrupt(unsigned char)>
c002458b:	83 c4 10             	add    esp,0x10
c002458e:	84 c0                	test   al,al
c0024590:	0f 84 d4 fe ff ff    	je     c002446a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024596:	56                   	push   esi
c0024597:	56                   	push   esi
c0024598:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002459f:	50                   	push   eax
c00245a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245a6:	e8 6d e9 ff ff       	call   c0022f18 <IDE::prepareInterrupt(unsigned char)>
c00245ab:	83 c4 0c             	add    esp,0xc
c00245ae:	6a 04                	push   0x4
c00245b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245b7:	50                   	push   eax
c00245b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245be:	e8 3b ea ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c00245c3:	83 c4 0c             	add    esp,0xc
c00245c6:	89 c6                	mov    esi,eax
c00245c8:	6a 05                	push   0x5
c00245ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245d1:	50                   	push   eax
c00245d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245d8:	e8 21 ea ff ff       	call   c0022ffe <IDE::read(unsigned char, unsigned char)>
c00245dd:	89 f1                	mov    ecx,esi
c00245df:	0f b6 c0             	movzx  eax,al
c00245e2:	0f b6 f1             	movzx  esi,cl
c00245e5:	c1 e0 08             	shl    eax,0x8
c00245e8:	09 c6                	or     esi,eax
c00245ea:	d1 fe                	sar    esi,1
c00245ec:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00245f0:	83 c4 10             	add    esp,0x10
c00245f3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00245f8:	74 41                	je     c002463b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00245fa:	31 c9                	xor    ecx,ecx
c00245fc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024602:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024609:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002460d:	75 0a                	jne    c0024619 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002460f:	01 c9                	add    ecx,ecx
c0024611:	01 cd                	add    ebp,ecx
c0024613:	4b                   	dec    ebx
c0024614:	e9 54 ff ff ff       	jmp    c002456d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024619:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002461e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024622:	51                   	push   ecx
c0024623:	51                   	push   ecx
c0024624:	52                   	push   edx
c0024625:	50                   	push   eax
c0024626:	e8 01 e9 ff ff       	call   c0022f2c <IDE::getBase(unsigned char)>
c002462b:	89 c2                	mov    edx,eax
c002462d:	89 f0                	mov    eax,esi
c002462f:	66 ef                	out    dx,ax
c0024631:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024635:	83 c4 10             	add    esp,0x10
c0024638:	41                   	inc    ecx
c0024639:	eb c1                	jmp    c00245fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002463b:	31 f6                	xor    esi,esi
c002463d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024643:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002464a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002464e:	75 06                	jne    c0024656 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024650:	01 f6                	add    esi,esi
c0024652:	01 f5                	add    ebp,esi
c0024654:	eb bd                	jmp    c0024613 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024656:	51                   	push   ecx
c0024657:	51                   	push   ecx
c0024658:	52                   	push   edx
c0024659:	50                   	push   eax
c002465a:	e8 cd e8 ff ff       	call   c0022f2c <IDE::getBase(unsigned char)>
c002465f:	89 c2                	mov    edx,eax
c0024661:	66 ed                	in     ax,dx
c0024663:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024668:	83 c4 10             	add    esp,0x10
c002466b:	46                   	inc    esi
c002466c:	eb cf                	jmp    c002463d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002466e:	51                   	push   ecx
c002466f:	51                   	push   ecx
c0024670:	52                   	push   edx
c0024671:	50                   	push   eax
c0024672:	e8 35 ea ff ff       	call   c00230ac <IDE::waitInterrupt(unsigned char)>
c0024677:	83 c4 10             	add    esp,0x10
c002467a:	84 c0                	test   al,al
c002467c:	0f 84 e8 fd ff ff    	je     c002446a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024682:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024687:	52                   	push   edx
c0024688:	52                   	push   edx
c0024689:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024690:	50                   	push   eax
c0024691:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024697:	e8 7c e8 ff ff       	call   c0022f18 <IDE::prepareInterrupt(unsigned char)>
c002469c:	83 c4 10             	add    esp,0x10
c002469f:	50                   	push   eax
c00246a0:	50                   	push   eax
c00246a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a8:	50                   	push   eax
c00246a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246af:	e8 78 e8 ff ff       	call   c0022f2c <IDE::getBase(unsigned char)>
c00246b4:	8d 50 07             	lea    edx,[eax+0x7]
c00246b7:	ec                   	in     al,dx
c00246b8:	83 c4 10             	add    esp,0x10
c00246bb:	a8 88                	test   al,0x88
c00246bd:	74 0a                	je     c00246c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00246bf:	4b                   	dec    ebx
c00246c0:	75 dd                	jne    c002469f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00246c2:	bb 02 00 00 00       	mov    ebx,0x2
c00246c7:	eb 02                	jmp    c00246cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246c9:	31 db                	xor    ebx,ebx
c00246cb:	83 c4 1c             	add    esp,0x1c
c00246ce:	89 d8                	mov    eax,ebx
c00246d0:	5b                   	pop    ebx
c00246d1:	5e                   	pop    esi
c00246d2:	5f                   	pop    edi
c00246d3:	5d                   	pop    ebp
c00246d4:	c3                   	ret    
c00246d5:	90                   	nop

c00246d6 <ATAPI::diskRemoved()>:
c00246d6:	83 ec 18             	sub    esp,0x18
c00246d9:	68 85 c3 02 c0       	push   0xc002c385
c00246de:	e8 00 e0 fe ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00246e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246e7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00246ee:	83 c4 1c             	add    esp,0x1c
c00246f1:	c3                   	ret    

c00246f2 <ATAPI::eject()>:
c00246f2:	57                   	push   edi
c00246f3:	b9 03 00 00 00       	mov    ecx,0x3
c00246f8:	53                   	push   ebx
c00246f9:	83 ec 14             	sub    esp,0x14
c00246fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024700:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024704:	fc                   	cld    
c0024705:	31 c0                	xor    eax,eax
c0024707:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024709:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002470e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024713:	50                   	push   eax
c0024714:	50                   	push   eax
c0024715:	6a 00                	push   0x0
c0024717:	6a 00                	push   0x0
c0024719:	6a 00                	push   0x0
c002471b:	6a 02                	push   0x2
c002471d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024721:	50                   	push   eax
c0024722:	53                   	push   ebx
c0024723:	e8 ee fc ff ff       	call   c0024416 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024728:	83 c4 14             	add    esp,0x14
c002472b:	53                   	push   ebx
c002472c:	e8 a5 ff ff ff       	call   c00246d6 <ATAPI::diskRemoved()>
c0024731:	83 c4 24             	add    esp,0x24
c0024734:	31 c0                	xor    eax,eax
c0024736:	5b                   	pop    ebx
c0024737:	5f                   	pop    edi
c0024738:	c3                   	ret    
c0024739:	90                   	nop

c002473a <ATAPI::diskInserted()>:
c002473a:	53                   	push   ebx
c002473b:	83 ec 14             	sub    esp,0x14
c002473e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024742:	68 9c c3 02 c0       	push   0xc002c39c
c0024747:	e8 97 df fe ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c002474c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024753:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024756:	e8 5f f8 fe ff       	call   c0013fba <PhysicalDisk::startCache()>
c002475b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002475f:	83 c4 18             	add    esp,0x18
c0024762:	5b                   	pop    ebx
c0024763:	e9 d4 1a ff ff       	jmp    c001623c <createPartitionsForDisk(PhysicalDisk*)>

c0024768 <ATAPI::detectMedia()>:
c0024768:	56                   	push   esi
c0024769:	53                   	push   ebx
c002476a:	83 ec 28             	sub    esp,0x28
c002476d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024771:	6a 0c                	push   0xc
c0024773:	6a 00                	push   0x0
c0024775:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024779:	56                   	push   esi
c002477a:	e8 d1 bf fd ff       	call   c0000750 <memset>
c002477f:	58                   	pop    eax
c0024780:	5a                   	pop    edx
c0024781:	6a 00                	push   0x0
c0024783:	6a 00                	push   0x0
c0024785:	6a 00                	push   0x0
c0024787:	6a 00                	push   0x0
c0024789:	56                   	push   esi
c002478a:	53                   	push   ebx
c002478b:	e8 86 fc ff ff       	call   c0024416 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024790:	83 c4 1c             	add    esp,0x1c
c0024793:	6a 0c                	push   0xc
c0024795:	6a 00                	push   0x0
c0024797:	56                   	push   esi
c0024798:	e8 b3 bf fd ff       	call   c0000750 <memset>
c002479d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00247a2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00247a7:	59                   	pop    ecx
c00247a8:	58                   	pop    eax
c00247a9:	6a 01                	push   0x1
c00247ab:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00247af:	50                   	push   eax
c00247b0:	6a 00                	push   0x0
c00247b2:	6a 12                	push   0x12
c00247b4:	56                   	push   esi
c00247b5:	53                   	push   ebx
c00247b6:	e8 5b fc ff ff       	call   c0024416 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247bb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00247bf:	83 c4 20             	add    esp,0x20
c00247c2:	83 e0 7f             	and    eax,0x7f
c00247c5:	3c 70                	cmp    al,0x70
c00247c7:	74 15                	je     c00247de <ATAPI::detectMedia()+0x76>
c00247c9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247d0:	75 0c                	jne    c00247de <ATAPI::detectMedia()+0x76>
c00247d2:	83 ec 0c             	sub    esp,0xc
c00247d5:	53                   	push   ebx
c00247d6:	e8 5f ff ff ff       	call   c002473a <ATAPI::diskInserted()>
c00247db:	83 c4 10             	add    esp,0x10
c00247de:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00247e2:	83 e0 0f             	and    eax,0xf
c00247e5:	3c 02                	cmp    al,0x2
c00247e7:	75 1b                	jne    c0024804 <ATAPI::detectMedia()+0x9c>
c00247e9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00247ee:	75 2d                	jne    c002481d <ATAPI::detectMedia()+0xb5>
c00247f0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247f7:	74 24                	je     c002481d <ATAPI::detectMedia()+0xb5>
c00247f9:	83 ec 0c             	sub    esp,0xc
c00247fc:	53                   	push   ebx
c00247fd:	e8 d4 fe ff ff       	call   c00246d6 <ATAPI::diskRemoved()>
c0024802:	eb 16                	jmp    c002481a <ATAPI::detectMedia()+0xb2>
c0024804:	84 c0                	test   al,al
c0024806:	75 15                	jne    c002481d <ATAPI::detectMedia()+0xb5>
c0024808:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002480f:	75 0c                	jne    c002481d <ATAPI::detectMedia()+0xb5>
c0024811:	83 ec 0c             	sub    esp,0xc
c0024814:	53                   	push   ebx
c0024815:	e8 20 ff ff ff       	call   c002473a <ATAPI::diskInserted()>
c002481a:	83 c4 10             	add    esp,0x10
c002481d:	83 c4 24             	add    esp,0x24
c0024820:	5b                   	pop    ebx
c0024821:	5e                   	pop    esi
c0024822:	c3                   	ret    
c0024823:	90                   	nop

c0024824 <ATAPI::open(int, int, void*)>:
c0024824:	53                   	push   ebx
c0024825:	83 ec 08             	sub    esp,0x8
c0024828:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002482c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024830:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024834:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002483a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024840:	c1 e0 06             	shl    eax,0x6
c0024843:	01 d0                	add    eax,edx
c0024845:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002484c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024852:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024859:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024863:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024869:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024870:	6a 04                	push   0x4
c0024872:	6a 0c                	push   0xc
c0024874:	51                   	push   ecx
c0024875:	52                   	push   edx
c0024876:	e8 c3 e6 ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002487b:	90                   	nop
c002487c:	90                   	nop
c002487d:	6a 00                	push   0x0
c002487f:	6a 0c                	push   0xc
c0024881:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024888:	50                   	push   eax
c0024889:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002488f:	e8 aa e6 ff ff       	call   c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024894:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002489b:	83 c4 14             	add    esp,0x14
c002489e:	53                   	push   ebx
c002489f:	e8 c4 fe ff ff       	call   c0024768 <ATAPI::detectMedia()>
c00248a4:	31 c0                	xor    eax,eax
c00248a6:	83 c4 18             	add    esp,0x18
c00248a9:	5b                   	pop    ebx
c00248aa:	c3                   	ret    
c00248ab:	90                   	nop

c00248ac <ATAPI::read(unsigned long long, int, void*)>:
c00248ac:	55                   	push   ebp
c00248ad:	57                   	push   edi
c00248ae:	56                   	push   esi
c00248af:	53                   	push   ebx
c00248b0:	83 ec 1c             	sub    esp,0x1c
c00248b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00248b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00248bb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00248bf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00248c6:	74 41                	je     c0024909 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00248c8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00248cc:	b9 03 00 00 00       	mov    ecx,0x3
c00248d1:	fc                   	cld    
c00248d2:	31 c0                	xor    eax,eax
c00248d4:	86 fb                	xchg   bl,bh
c00248d6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00248d8:	c1 c3 10             	rol    ebx,0x10
c00248db:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00248e0:	89 e8                	mov    eax,ebp
c00248e2:	86 fb                	xchg   bl,bh
c00248e4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00248e8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00248ec:	50                   	push   eax
c00248ed:	50                   	push   eax
c00248ee:	55                   	push   ebp
c00248ef:	c1 e5 0b             	shl    ebp,0xb
c00248f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00248f6:	6a 00                	push   0x0
c00248f8:	55                   	push   ebp
c00248f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00248fd:	50                   	push   eax
c00248fe:	56                   	push   esi
c00248ff:	e8 12 fb ff ff       	call   c0024416 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024904:	83 c4 20             	add    esp,0x20
c0024907:	eb 1a                	jmp    c0024923 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024909:	83 ec 0c             	sub    esp,0xc
c002490c:	56                   	push   esi
c002490d:	e8 56 fe ff ff       	call   c0024768 <ATAPI::detectMedia()>
c0024912:	83 c4 10             	add    esp,0x10
c0024915:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002491c:	75 aa                	jne    c00248c8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002491e:	b8 02 00 00 00       	mov    eax,0x2
c0024923:	83 c4 1c             	add    esp,0x1c
c0024926:	5b                   	pop    ebx
c0024927:	5e                   	pop    esi
c0024928:	5f                   	pop    edi
c0024929:	5d                   	pop    ebp
c002492a:	c3                   	ret    
c002492b:	90                   	nop

c002492c <SATA::close(int, int, void*)>:
c002492c:	83 ec 0c             	sub    esp,0xc
c002492f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024933:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024939:	85 c0                	test   eax,eax
c002493b:	74 0c                	je     c0024949 <SATA::close(int, int, void*)+0x1d>
c002493d:	83 ec 0c             	sub    esp,0xc
c0024940:	8b 10                	mov    edx,DWORD PTR [eax]
c0024942:	50                   	push   eax
c0024943:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024946:	83 c4 10             	add    esp,0x10
c0024949:	31 c0                	xor    eax,eax
c002494b:	83 c4 0c             	add    esp,0xc
c002494e:	c3                   	ret    
c002494f:	90                   	nop

c0024950 <SATA::powerSaving(PowerSavingLevel)>:
c0024950:	c3                   	ret    
c0024951:	90                   	nop

c0024952 <SATA::open(int, int, void*)>:
c0024952:	56                   	push   esi
c0024953:	53                   	push   ebx
c0024954:	50                   	push   eax
c0024955:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024959:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002495d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024967:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002496d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024977:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002497b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024985:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002498b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024992:	e8 fe af fe ff       	call   c000f995 <Phys::allocatePage()>
c0024997:	89 c6                	mov    esi,eax
c0024999:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002499f:	81 c6 00 10 00 00    	add    esi,0x1000
c00249a5:	e8 eb af fe ff       	call   c000f995 <Phys::allocatePage()>
c00249aa:	39 c6                	cmp    esi,eax
c00249ac:	74 10                	je     c00249be <SATA::open(int, int, void*)+0x6c>
c00249ae:	83 ec 0c             	sub    esp,0xc
c00249b1:	68 c4 c2 02 c0       	push   0xc002c2c4
c00249b6:	e8 94 54 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c00249bb:	83 c4 10             	add    esp,0x10
c00249be:	83 ec 0c             	sub    esp,0xc
c00249c1:	6a 02                	push   0x2
c00249c3:	e8 57 c8 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c00249c8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00249ce:	6a 03                	push   0x3
c00249d0:	50                   	push   eax
c00249d1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00249d7:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c00249dd:	e8 fa cf fe ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c00249e2:	83 c4 14             	add    esp,0x14
c00249e5:	53                   	push   ebx
c00249e6:	e8 cf f5 fe ff       	call   c0013fba <PhysicalDisk::startCache()>
c00249eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249ee:	e8 49 18 ff ff       	call   c001623c <createPartitionsForDisk(PhysicalDisk*)>
c00249f3:	83 c4 14             	add    esp,0x14
c00249f6:	31 c0                	xor    eax,eax
c00249f8:	5b                   	pop    ebx
c00249f9:	5e                   	pop    esi
c00249fa:	c3                   	ret    
c00249fb:	90                   	nop

c00249fc <SATA::SATA()>:
c00249fc:	83 ec 0c             	sub    esp,0xc
c00249ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a03:	83 ec 04             	sub    esp,0x4
c0024a06:	68 00 02 00 00       	push   0x200
c0024a0b:	68 d8 c2 02 c0       	push   0xc002c2d8
c0024a10:	50                   	push   eax
c0024a11:	e8 3c f5 fe ff       	call   c0013f52 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a16:	83 c4 10             	add    esp,0x10
c0024a19:	ba 48 c3 02 c0       	mov    edx,0xc002c348
c0024a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a22:	89 10                	mov    DWORD PTR [eax],edx
c0024a24:	90                   	nop
c0024a25:	83 c4 0c             	add    esp,0xc
c0024a28:	c3                   	ret    
c0024a29:	90                   	nop

c0024a2a <SATA::access(unsigned long long, int, void*, bool)>:
c0024a2a:	55                   	push   ebp
c0024a2b:	57                   	push   edi
c0024a2c:	56                   	push   esi
c0024a2d:	53                   	push   ebx
c0024a2e:	83 ec 2c             	sub    esp,0x2c
c0024a31:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024a35:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024a3d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a41:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a45:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024a4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a4e:	7e 10                	jle    c0024a60 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024a50:	83 ec 0c             	sub    esp,0xc
c0024a53:	68 e8 c2 02 c0       	push   0xc002c2e8
c0024a58:	e8 f2 53 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0024a5d:	83 c4 10             	add    esp,0x10
c0024a60:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a66:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024a6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024a72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a76:	89 d0                	mov    eax,edx
c0024a78:	c1 e0 07             	shl    eax,0x7
c0024a7b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024a7f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024a89:	51                   	push   ecx
c0024a8a:	8d 42 02             	lea    eax,[edx+0x2]
c0024a8d:	51                   	push   ecx
c0024a8e:	c1 e0 07             	shl    eax,0x7
c0024a91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024a95:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024a99:	50                   	push   eax
c0024a9a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024aa0:	e8 1b f0 ff ff       	call   c0023ac0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024aa9:	83 c4 10             	add    esp,0x10
c0024aac:	b8 01 00 00 00       	mov    eax,0x1
c0024ab1:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024ab6:	0f 84 cb 01 00 00    	je     c0024c87 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024abc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ac0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ac4:	c1 e0 09             	shl    eax,0x9
c0024ac7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024acc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024ad0:	74 0e                	je     c0024ae0 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024ad2:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024ad8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024adc:	89 c1                	mov    ecx,eax
c0024ade:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ae0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024ae4:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024aea:	8d 42 02             	lea    eax,[edx+0x2]
c0024aed:	c1 e0 07             	shl    eax,0x7
c0024af0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024af4:	8b 00                	mov    eax,DWORD PTR [eax]
c0024af6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024afc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024b02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024b06:	c1 e1 05             	shl    ecx,0x5
c0024b09:	01 c8                	add    eax,ecx
c0024b0b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024b0f:	83 e1 01             	and    ecx,0x1
c0024b12:	89 ce                	mov    esi,ecx
c0024b14:	8a 08                	mov    cl,BYTE PTR [eax]
c0024b16:	c1 e6 06             	shl    esi,0x6
c0024b19:	83 e1 bf             	and    ecx,0xffffffbf
c0024b1c:	09 f1                	or     ecx,esi
c0024b1e:	88 08                	mov    BYTE PTR [eax],cl
c0024b20:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024b22:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024b28:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024b2e:	89 08                	mov    DWORD PTR [eax],ecx
c0024b30:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b36:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024b3c:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024b42:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024b45:	50                   	push   eax
c0024b46:	68 90 00 00 00       	push   0x90
c0024b4b:	6a 00                	push   0x0
c0024b4d:	56                   	push   esi
c0024b4e:	e8 fd bb fd ff       	call   c0000750 <memset>
c0024b53:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b59:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024b5d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024b63:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024b67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024b6b:	83 c4 10             	add    esp,0x10
c0024b6e:	48                   	dec    eax
c0024b6f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024b74:	89 c1                	mov    ecx,eax
c0024b76:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024b7c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024b81:	09 c8                	or     eax,ecx
c0024b83:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024b89:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024b8c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024b93:	66 25 00 7f          	and    ax,0x7f00
c0024b97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b9b:	66 0d 27 80          	or     ax,0x8027
c0024b9f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024ba4:	66 89 06             	mov    WORD PTR [esi],ax
c0024ba7:	19 c0                	sbb    eax,eax
c0024ba9:	83 e0 f0             	and    eax,0xfffffff0
c0024bac:	83 c0 35             	add    eax,0x35
c0024baf:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024bb2:	89 e8                	mov    eax,ebp
c0024bb4:	c1 e8 10             	shr    eax,0x10
c0024bb7:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024bba:	89 e8                	mov    eax,ebp
c0024bbc:	c1 e8 18             	shr    eax,0x18
c0024bbf:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024bc2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024bc6:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024bc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024bcd:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024bd0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024bd4:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024bd8:	89 d6                	mov    esi,edx
c0024bda:	31 c0                	xor    eax,eax
c0024bdc:	c1 e6 07             	shl    esi,0x7
c0024bdf:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024be3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024be9:	80 e1 88             	and    cl,0x88
c0024bec:	74 0a                	je     c0024bf8 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024bee:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bf3:	74 0a                	je     c0024bff <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024bf5:	40                   	inc    eax
c0024bf6:	eb eb                	jmp    c0024be3 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024bf8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bfd:	75 0a                	jne    c0024c09 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024bff:	83 ec 0c             	sub    esp,0xc
c0024c02:	68 21 c3 02 c0       	push   0xc002c321
c0024c07:	eb 56                	jmp    c0024c5f <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024c09:	b8 01 00 00 00       	mov    eax,0x1
c0024c0e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024c12:	c1 e2 07             	shl    edx,0x7
c0024c15:	d3 e0                	shl    eax,cl
c0024c17:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024c1b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024c21:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024c27:	85 c8                	test   eax,ecx
c0024c29:	74 20                	je     c0024c4b <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024c2b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024c31:	0f ba e1 1e          	bt     ecx,0x1e
c0024c35:	73 ea                	jae    c0024c21 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024c37:	83 ec 0c             	sub    esp,0xc
c0024c3a:	68 2f c3 02 c0       	push   0xc002c32f
c0024c3f:	e8 0b 52 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0024c44:	83 c4 10             	add    esp,0x10
c0024c47:	31 c0                	xor    eax,eax
c0024c49:	eb 3c                	jmp    c0024c87 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c4b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024c51:	0f ba e0 1e          	bt     eax,0x1e
c0024c55:	73 17                	jae    c0024c6e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024c57:	83 ec 0c             	sub    esp,0xc
c0024c5a:	68 2f c3 02 c0       	push   0xc002c32f
c0024c5f:	e8 eb 51 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0024c64:	83 c4 10             	add    esp,0x10
c0024c67:	b8 01 00 00 00       	mov    eax,0x1
c0024c6c:	eb 19                	jmp    c0024c87 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c6e:	31 c0                	xor    eax,eax
c0024c70:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024c75:	75 10                	jne    c0024c87 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c77:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024c7d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024c81:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024c87:	83 c4 2c             	add    esp,0x2c
c0024c8a:	5b                   	pop    ebx
c0024c8b:	5e                   	pop    esi
c0024c8c:	5f                   	pop    edi
c0024c8d:	5d                   	pop    ebp
c0024c8e:	c3                   	ret    
c0024c8f:	90                   	nop

c0024c90 <SATA::read(unsigned long long, int, void*)>:
c0024c90:	57                   	push   edi
c0024c91:	b8 04 00 00 00       	mov    eax,0x4
c0024c96:	56                   	push   esi
c0024c97:	53                   	push   ebx
c0024c98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c9c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024ca0:	8d 7a ff             	lea    edi,[edx-0x1]
c0024ca3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024ca7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024cab:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024cb1:	77 25                	ja     c0024cd8 <SATA::read(unsigned long long, int, void*)+0x48>
c0024cb3:	b8 06 00 00 00       	mov    eax,0x6
c0024cb8:	85 f6                	test   esi,esi
c0024cba:	74 1c                	je     c0024cd8 <SATA::read(unsigned long long, int, void*)+0x48>
c0024cbc:	50                   	push   eax
c0024cbd:	50                   	push   eax
c0024cbe:	6a 00                	push   0x0
c0024cc0:	56                   	push   esi
c0024cc1:	52                   	push   edx
c0024cc2:	53                   	push   ebx
c0024cc3:	51                   	push   ecx
c0024cc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cc8:	e8 5d fd ff ff       	call   c0024a2a <SATA::access(unsigned long long, int, void*, bool)>
c0024ccd:	83 c4 20             	add    esp,0x20
c0024cd0:	85 c0                	test   eax,eax
c0024cd2:	0f 95 c0             	setne  al
c0024cd5:	0f b6 c0             	movzx  eax,al
c0024cd8:	5b                   	pop    ebx
c0024cd9:	5e                   	pop    esi
c0024cda:	5f                   	pop    edi
c0024cdb:	c3                   	ret    

c0024cdc <SATA::write(unsigned long long, int, void*)>:
c0024cdc:	55                   	push   ebp
c0024cdd:	b8 04 00 00 00       	mov    eax,0x4
c0024ce2:	57                   	push   edi
c0024ce3:	56                   	push   esi
c0024ce4:	53                   	push   ebx
c0024ce5:	83 ec 0c             	sub    esp,0xc
c0024ce8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024cec:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024cf0:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024cf3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024cf7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024cfb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024d01:	77 3d                	ja     c0024d40 <SATA::write(unsigned long long, int, void*)+0x64>
c0024d03:	b8 06 00 00 00       	mov    eax,0x6
c0024d08:	85 ed                	test   ebp,ebp
c0024d0a:	74 34                	je     c0024d40 <SATA::write(unsigned long long, int, void*)+0x64>
c0024d0c:	c1 e3 09             	shl    ebx,0x9
c0024d0f:	01 eb                	add    ebx,ebp
c0024d11:	89 d6                	mov    esi,edx
c0024d13:	89 cf                	mov    edi,ecx
c0024d15:	83 c6 01             	add    esi,0x1
c0024d18:	83 d7 00             	adc    edi,0x0
c0024d1b:	50                   	push   eax
c0024d1c:	50                   	push   eax
c0024d1d:	6a 01                	push   0x1
c0024d1f:	55                   	push   ebp
c0024d20:	81 c5 00 02 00 00    	add    ebp,0x200
c0024d26:	6a 01                	push   0x1
c0024d28:	51                   	push   ecx
c0024d29:	52                   	push   edx
c0024d2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d2e:	e8 f7 fc ff ff       	call   c0024a2a <SATA::access(unsigned long long, int, void*, bool)>
c0024d33:	83 c4 20             	add    esp,0x20
c0024d36:	89 f2                	mov    edx,esi
c0024d38:	89 f9                	mov    ecx,edi
c0024d3a:	39 dd                	cmp    ebp,ebx
c0024d3c:	75 d3                	jne    c0024d11 <SATA::write(unsigned long long, int, void*)+0x35>
c0024d3e:	31 c0                	xor    eax,eax
c0024d40:	83 c4 0c             	add    esp,0xc
c0024d43:	5b                   	pop    ebx
c0024d44:	5e                   	pop    esi
c0024d45:	5f                   	pop    edi
c0024d46:	5d                   	pop    ebp
c0024d47:	c3                   	ret    

c0024d48 <SATAPI::write(unsigned long long, int, void*)>:
c0024d48:	b8 03 00 00 00       	mov    eax,0x3
c0024d4d:	c3                   	ret    

c0024d4e <SATAPI::close(int, int, void*)>:
c0024d4e:	83 ec 0c             	sub    esp,0xc
c0024d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d5b:	85 c0                	test   eax,eax
c0024d5d:	74 0c                	je     c0024d6b <SATAPI::close(int, int, void*)+0x1d>
c0024d5f:	83 ec 0c             	sub    esp,0xc
c0024d62:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d64:	50                   	push   eax
c0024d65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d68:	83 c4 10             	add    esp,0x10
c0024d6b:	31 c0                	xor    eax,eax
c0024d6d:	83 c4 0c             	add    esp,0xc
c0024d70:	c3                   	ret    
c0024d71:	90                   	nop

c0024d72 <SATAPI::SATAPI()>:
c0024d72:	83 ec 0c             	sub    esp,0xc
c0024d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d79:	83 ec 04             	sub    esp,0x4
c0024d7c:	68 00 08 00 00       	push   0x800
c0024d81:	68 78 c3 02 c0       	push   0xc002c378
c0024d86:	50                   	push   eax
c0024d87:	e8 c6 f1 fe ff       	call   c0013f52 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d8c:	83 c4 10             	add    esp,0x10
c0024d8f:	ba 24 c4 02 c0       	mov    edx,0xc002c424
c0024d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d98:	89 10                	mov    DWORD PTR [eax],edx
c0024d9a:	90                   	nop
c0024d9b:	83 c4 0c             	add    esp,0xc
c0024d9e:	c3                   	ret    
c0024d9f:	90                   	nop

c0024da0 <SATAPI::diskRemoved()>:
c0024da0:	83 ec 18             	sub    esp,0x18
c0024da3:	68 84 c3 02 c0       	push   0xc002c384
c0024da8:	e8 36 d9 fe ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0024dad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024db1:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024db8:	83 c4 1c             	add    esp,0x1c
c0024dbb:	c3                   	ret    

c0024dbc <SATAPI::diskInserted()>:
c0024dbc:	53                   	push   ebx
c0024dbd:	83 ec 14             	sub    esp,0x14
c0024dc0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024dc4:	68 9b c3 02 c0       	push   0xc002c39b
c0024dc9:	e8 15 d9 fe ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0024dce:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024dd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dd8:	e8 dd f1 fe ff       	call   c0013fba <PhysicalDisk::startCache()>
c0024ddd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024de1:	83 c4 18             	add    esp,0x18
c0024de4:	5b                   	pop    ebx
c0024de5:	e9 52 14 ff ff       	jmp    c001623c <createPartitionsForDisk(PhysicalDisk*)>

c0024dea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024dea:	55                   	push   ebp
c0024deb:	57                   	push   edi
c0024dec:	56                   	push   esi
c0024ded:	53                   	push   ebx
c0024dee:	83 ec 34             	sub    esp,0x34
c0024df1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024df5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024df9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024dfd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e01:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024e05:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024e0b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024e11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024e15:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024e1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024e1f:	c1 e0 07             	shl    eax,0x7
c0024e22:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024e26:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024e2a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024e34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e38:	8d 58 02             	lea    ebx,[eax+0x2]
c0024e3b:	c1 e3 07             	shl    ebx,0x7
c0024e3e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024e42:	53                   	push   ebx
c0024e43:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e49:	e8 72 ec ff ff       	call   c0023ac0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e52:	83 c4 10             	add    esp,0x10
c0024e55:	b8 01 00 00 00       	mov    eax,0x1
c0024e5a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024e5f:	0f 84 85 01 00 00    	je     c0024fea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e65:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024e6d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e73:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e7d:	c1 e1 05             	shl    ecx,0x5
c0024e80:	01 c8                	add    eax,ecx
c0024e82:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e84:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024e8a:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024e90:	89 08                	mov    DWORD PTR [eax],ecx
c0024e92:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e98:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e9e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024ea4:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024ea7:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024eaa:	50                   	push   eax
c0024eab:	68 90 00 00 00       	push   0x90
c0024eb0:	6a 00                	push   0x0
c0024eb2:	53                   	push   ebx
c0024eb3:	e8 98 b8 fd ff       	call   c0000750 <memset>
c0024eb8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024ebc:	b9 0c 00 00 00       	mov    ecx,0xc
c0024ec1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ec3:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024ec9:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024ecd:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024ed3:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024ed7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024edb:	48                   	dec    eax
c0024edc:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024ee1:	89 c1                	mov    ecx,eax
c0024ee3:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024ee9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024eee:	09 c8                	or     eax,ecx
c0024ef0:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ef6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ef9:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024f00:	66 25 00 7f          	and    ax,0x7f00
c0024f04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024f08:	66 0d 27 80          	or     ax,0x8027
c0024f0c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024f10:	66 89 03             	mov    WORD PTR [ebx],ax
c0024f13:	89 d0                	mov    eax,edx
c0024f15:	c1 ea 18             	shr    edx,0x18
c0024f18:	c1 e8 10             	shr    eax,0x10
c0024f1b:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024f1e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024f21:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024f25:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024f2c:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f2f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024f33:	83 c4 10             	add    esp,0x10
c0024f36:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f3a:	31 c0                	xor    eax,eax
c0024f3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024f40:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024f46:	80 e2 88             	and    dl,0x88
c0024f49:	74 0a                	je     c0024f55 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024f4b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f50:	74 0a                	je     c0024f5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024f52:	40                   	inc    eax
c0024f53:	eb eb                	jmp    c0024f40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024f55:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f5a:	75 0f                	jne    c0024f6b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024f5c:	83 ec 0c             	sub    esp,0xc
c0024f5f:	68 21 c3 02 c0       	push   0xc002c321
c0024f64:	e8 e6 4e ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0024f69:	eb 3f                	jmp    c0024faa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024f6b:	ba 01 00 00 00       	mov    edx,0x1
c0024f70:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024f74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f78:	d3 e2                	shl    edx,cl
c0024f7a:	c1 e0 07             	shl    eax,0x7
c0024f7d:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024f83:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f87:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024f8d:	85 ca                	test   edx,ecx
c0024f8f:	74 23                	je     c0024fb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024f91:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024f97:	0f ba e1 1e          	bt     ecx,0x1e
c0024f9b:	73 ea                	jae    c0024f87 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024f9d:	83 ec 0c             	sub    esp,0xc
c0024fa0:	68 b3 c3 02 c0       	push   0xc002c3b3
c0024fa5:	e8 39 d7 fe ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0024faa:	83 c4 10             	add    esp,0x10
c0024fad:	b8 01 00 00 00       	mov    eax,0x1
c0024fb2:	eb 36                	jmp    c0024fea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024fb4:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024fba:	0f ba e0 1e          	bt     eax,0x1e
c0024fbe:	73 0a                	jae    c0024fca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024fc0:	83 ec 0c             	sub    esp,0xc
c0024fc3:	68 c6 c3 02 c0       	push   0xc002c3c6
c0024fc8:	eb db                	jmp    c0024fa5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024fca:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024fcf:	74 17                	je     c0024fe8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fd1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024fd6:	74 10                	je     c0024fe8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fd8:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024fde:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024fe2:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024fe6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024fe8:	31 c0                	xor    eax,eax
c0024fea:	83 c4 2c             	add    esp,0x2c
c0024fed:	5b                   	pop    ebx
c0024fee:	5e                   	pop    esi
c0024fef:	5f                   	pop    edi
c0024ff0:	5d                   	pop    ebp
c0024ff1:	c3                   	ret    

c0024ff2 <SATAPI::eject()>:
c0024ff2:	57                   	push   edi
c0024ff3:	b9 03 00 00 00       	mov    ecx,0x3
c0024ff8:	53                   	push   ebx
c0024ff9:	83 ec 14             	sub    esp,0x14
c0024ffc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025000:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025004:	fc                   	cld    
c0025005:	31 c0                	xor    eax,eax
c0025007:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025009:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002500e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025013:	50                   	push   eax
c0025014:	6a 00                	push   0x0
c0025016:	6a 00                	push   0x0
c0025018:	6a 00                	push   0x0
c002501a:	6a 00                	push   0x0
c002501c:	6a 02                	push   0x2
c002501e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025022:	50                   	push   eax
c0025023:	53                   	push   ebx
c0025024:	e8 c1 fd ff ff       	call   c0024dea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025029:	83 c4 14             	add    esp,0x14
c002502c:	53                   	push   ebx
c002502d:	e8 6e fd ff ff       	call   c0024da0 <SATAPI::diskRemoved()>
c0025032:	83 c4 24             	add    esp,0x24
c0025035:	31 c0                	xor    eax,eax
c0025037:	5b                   	pop    ebx
c0025038:	5f                   	pop    edi
c0025039:	c3                   	ret    

c002503a <SATAPI::detectMedia()>:
c002503a:	56                   	push   esi
c002503b:	53                   	push   ebx
c002503c:	83 ec 28             	sub    esp,0x28
c002503f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025043:	6a 0c                	push   0xc
c0025045:	6a 00                	push   0x0
c0025047:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002504b:	56                   	push   esi
c002504c:	e8 ff b6 fd ff       	call   c0000750 <memset>
c0025051:	83 c4 0c             	add    esp,0xc
c0025054:	6a 00                	push   0x0
c0025056:	6a 00                	push   0x0
c0025058:	6a 00                	push   0x0
c002505a:	6a 00                	push   0x0
c002505c:	6a 00                	push   0x0
c002505e:	56                   	push   esi
c002505f:	53                   	push   ebx
c0025060:	e8 85 fd ff ff       	call   c0024dea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025065:	83 c4 1c             	add    esp,0x1c
c0025068:	6a 0c                	push   0xc
c002506a:	6a 00                	push   0x0
c002506c:	56                   	push   esi
c002506d:	e8 de b6 fd ff       	call   c0000750 <memset>
c0025072:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025077:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002507c:	83 c4 0c             	add    esp,0xc
c002507f:	6a 01                	push   0x1
c0025081:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025085:	50                   	push   eax
c0025086:	6a 00                	push   0x0
c0025088:	6a 00                	push   0x0
c002508a:	6a 12                	push   0x12
c002508c:	56                   	push   esi
c002508d:	53                   	push   ebx
c002508e:	e8 57 fd ff ff       	call   c0024dea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025093:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025097:	83 c4 20             	add    esp,0x20
c002509a:	83 e0 7f             	and    eax,0x7f
c002509d:	3c 70                	cmp    al,0x70
c002509f:	74 15                	je     c00250b6 <SATAPI::detectMedia()+0x7c>
c00250a1:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250a8:	75 0c                	jne    c00250b6 <SATAPI::detectMedia()+0x7c>
c00250aa:	83 ec 0c             	sub    esp,0xc
c00250ad:	53                   	push   ebx
c00250ae:	e8 09 fd ff ff       	call   c0024dbc <SATAPI::diskInserted()>
c00250b3:	83 c4 10             	add    esp,0x10
c00250b6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00250ba:	83 e0 0f             	and    eax,0xf
c00250bd:	3c 02                	cmp    al,0x2
c00250bf:	75 1b                	jne    c00250dc <SATAPI::detectMedia()+0xa2>
c00250c1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00250c6:	75 2d                	jne    c00250f5 <SATAPI::detectMedia()+0xbb>
c00250c8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250cf:	74 24                	je     c00250f5 <SATAPI::detectMedia()+0xbb>
c00250d1:	83 ec 0c             	sub    esp,0xc
c00250d4:	53                   	push   ebx
c00250d5:	e8 c6 fc ff ff       	call   c0024da0 <SATAPI::diskRemoved()>
c00250da:	eb 16                	jmp    c00250f2 <SATAPI::detectMedia()+0xb8>
c00250dc:	84 c0                	test   al,al
c00250de:	75 15                	jne    c00250f5 <SATAPI::detectMedia()+0xbb>
c00250e0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250e7:	75 0c                	jne    c00250f5 <SATAPI::detectMedia()+0xbb>
c00250e9:	83 ec 0c             	sub    esp,0xc
c00250ec:	53                   	push   ebx
c00250ed:	e8 ca fc ff ff       	call   c0024dbc <SATAPI::diskInserted()>
c00250f2:	83 c4 10             	add    esp,0x10
c00250f5:	83 c4 24             	add    esp,0x24
c00250f8:	5b                   	pop    ebx
c00250f9:	5e                   	pop    esi
c00250fa:	c3                   	ret    
c00250fb:	90                   	nop

c00250fc <SATAPI::open(int, int, void*)>:
c00250fc:	56                   	push   esi
c00250fd:	53                   	push   ebx
c00250fe:	50                   	push   eax
c00250ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025103:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025107:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025111:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025117:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025121:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025125:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002512f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025135:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002513c:	e8 54 a8 fe ff       	call   c000f995 <Phys::allocatePage()>
c0025141:	89 c6                	mov    esi,eax
c0025143:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025149:	81 c6 00 10 00 00    	add    esi,0x1000
c002514f:	e8 41 a8 fe ff       	call   c000f995 <Phys::allocatePage()>
c0025154:	39 c6                	cmp    esi,eax
c0025156:	74 10                	je     c0025168 <SATAPI::open(int, int, void*)+0x6c>
c0025158:	83 ec 0c             	sub    esp,0xc
c002515b:	68 db c3 02 c0       	push   0xc002c3db
c0025160:	e8 ea 4c ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0025165:	83 c4 10             	add    esp,0x10
c0025168:	83 ec 0c             	sub    esp,0xc
c002516b:	6a 02                	push   0x2
c002516d:	e8 ad c0 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0025172:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025178:	6a 03                	push   0x3
c002517a:	50                   	push   eax
c002517b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025181:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c0025187:	e8 50 c8 fe ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c002518c:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025193:	83 c4 14             	add    esp,0x14
c0025196:	53                   	push   ebx
c0025197:	e8 9e fe ff ff       	call   c002503a <SATAPI::detectMedia()>
c002519c:	83 c4 14             	add    esp,0x14
c002519f:	31 c0                	xor    eax,eax
c00251a1:	5b                   	pop    ebx
c00251a2:	5e                   	pop    esi
c00251a3:	c3                   	ret    

c00251a4 <SATAPI::read(unsigned long long, int, void*)>:
c00251a4:	55                   	push   ebp
c00251a5:	57                   	push   edi
c00251a6:	56                   	push   esi
c00251a7:	53                   	push   ebx
c00251a8:	83 ec 1c             	sub    esp,0x1c
c00251ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00251af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251b3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00251b7:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251be:	74 19                	je     c00251d9 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00251c0:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00251c5:	7e 2e                	jle    c00251f5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251c7:	83 ec 0c             	sub    esp,0xc
c00251ca:	68 f1 c3 02 c0       	push   0xc002c3f1
c00251cf:	e8 7b 4c ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c00251d4:	83 c4 10             	add    esp,0x10
c00251d7:	eb 1c                	jmp    c00251f5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251d9:	83 ec 0c             	sub    esp,0xc
c00251dc:	55                   	push   ebp
c00251dd:	e8 58 fe ff ff       	call   c002503a <SATAPI::detectMedia()>
c00251e2:	83 c4 10             	add    esp,0x10
c00251e5:	b8 02 00 00 00       	mov    eax,0x2
c00251ea:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251f1:	75 cd                	jne    c00251c0 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00251f3:	eb 49                	jmp    c002523e <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00251f5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251f9:	b9 03 00 00 00       	mov    ecx,0x3
c00251fe:	fc                   	cld    
c00251ff:	31 c0                	xor    eax,eax
c0025201:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025203:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025208:	89 d8                	mov    eax,ebx
c002520a:	86 e0                	xchg   al,ah
c002520c:	c1 c0 10             	rol    eax,0x10
c002520f:	86 e0                	xchg   al,ah
c0025211:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025215:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025219:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002521d:	50                   	push   eax
c002521e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025222:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025226:	56                   	push   esi
c0025227:	53                   	push   ebx
c0025228:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002522c:	c1 e0 0b             	shl    eax,0xb
c002522f:	50                   	push   eax
c0025230:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025234:	50                   	push   eax
c0025235:	55                   	push   ebp
c0025236:	e8 af fb ff ff       	call   c0024dea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002523b:	83 c4 20             	add    esp,0x20
c002523e:	83 c4 1c             	add    esp,0x1c
c0025241:	5b                   	pop    ebx
c0025242:	5e                   	pop    esi
c0025243:	5f                   	pop    edi
c0025244:	5d                   	pop    ebp
c0025245:	c3                   	ret    

c0025246 <AVX::open(int, int, void*)>:
c0025246:	83 ec 0c             	sub    esp,0xc
c0025249:	e8 3a 11 00 00       	call   c0026388 <avxInit>
c002524e:	b8 00 00 00 00       	mov    eax,0x0
c0025253:	83 c4 0c             	add    esp,0xc
c0025256:	c3                   	ret    
c0025257:	90                   	nop

c0025258 <AVX::close(int, int, void*)>:
c0025258:	83 ec 0c             	sub    esp,0xc
c002525b:	e8 29 11 00 00       	call   c0026389 <avxClose>
c0025260:	b8 00 00 00 00       	mov    eax,0x0
c0025265:	83 c4 0c             	add    esp,0xc
c0025268:	c3                   	ret    
c0025269:	90                   	nop

c002526a <AVX::available()>:
c002526a:	83 ec 0c             	sub    esp,0xc
c002526d:	e8 0e 11 00 00       	call   c0026380 <avxDetect>
c0025272:	85 c0                	test   eax,eax
c0025274:	0f 95 c0             	setne  al
c0025277:	83 c4 0c             	add    esp,0xc
c002527a:	c3                   	ret    
c002527b:	90                   	nop

c002527c <AVX::save(void*)>:
c002527c:	83 ec 0c             	sub    esp,0xc
c002527f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025283:	83 ec 0c             	sub    esp,0xc
c0025286:	50                   	push   eax
c0025287:	e8 fa 10 00 00       	call   c0026386 <avxSave>
c002528c:	83 c4 10             	add    esp,0x10
c002528f:	90                   	nop
c0025290:	83 c4 0c             	add    esp,0xc
c0025293:	c3                   	ret    

c0025294 <AVX::load(void*)>:
c0025294:	83 ec 0c             	sub    esp,0xc
c0025297:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002529b:	83 ec 0c             	sub    esp,0xc
c002529e:	50                   	push   eax
c002529f:	e8 e3 10 00 00       	call   c0026387 <avxLoad>
c00252a4:	83 c4 10             	add    esp,0x10
c00252a7:	90                   	nop
c00252a8:	83 c4 0c             	add    esp,0xc
c00252ab:	c3                   	ret    

c00252ac <AVX::AVX()>:
c00252ac:	83 ec 0c             	sub    esp,0xc
c00252af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252b3:	83 ec 08             	sub    esp,0x8
c00252b6:	68 54 c4 02 c0       	push   0xc002c454
c00252bb:	50                   	push   eax
c00252bc:	e8 6f ed fe ff       	call   c0014030 <FPU::FPU(char const*)>
c00252c1:	83 c4 10             	add    esp,0x10
c00252c4:	ba 64 c4 02 c0       	mov    edx,0xc002c464
c00252c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252cd:	89 10                	mov    DWORD PTR [eax],edx
c00252cf:	90                   	nop
c00252d0:	83 c4 0c             	add    esp,0xc
c00252d3:	c3                   	ret    

c00252d4 <MMX::available()>:
c00252d4:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00252d9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00252df:	83 e0 20             	and    eax,0x20
c00252e2:	84 c0                	test   al,al
c00252e4:	0f 95 c0             	setne  al
c00252e7:	c3                   	ret    

c00252e8 <MMX::open(int, int, void*)>:
c00252e8:	83 ec 0c             	sub    esp,0xc
c00252eb:	e8 22 11 00 00       	call   c0026412 <x87Init>
c00252f0:	b8 00 00 00 00       	mov    eax,0x0
c00252f5:	83 c4 0c             	add    esp,0xc
c00252f8:	c3                   	ret    
c00252f9:	90                   	nop

c00252fa <MMX::close(int, int, void*)>:
c00252fa:	83 ec 0c             	sub    esp,0xc
c00252fd:	e8 2a 11 00 00       	call   c002642c <x87Close>
c0025302:	b8 00 00 00 00       	mov    eax,0x0
c0025307:	83 c4 0c             	add    esp,0xc
c002530a:	c3                   	ret    
c002530b:	90                   	nop

c002530c <MMX::save(void*)>:
c002530c:	83 ec 0c             	sub    esp,0xc
c002530f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025313:	83 ec 0c             	sub    esp,0xc
c0025316:	50                   	push   eax
c0025317:	e8 e5 10 00 00       	call   c0026401 <x87Save>
c002531c:	83 c4 10             	add    esp,0x10
c002531f:	90                   	nop
c0025320:	83 c4 0c             	add    esp,0xc
c0025323:	c3                   	ret    

c0025324 <MMX::load(void*)>:
c0025324:	83 ec 0c             	sub    esp,0xc
c0025327:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002532b:	83 ec 0c             	sub    esp,0xc
c002532e:	50                   	push   eax
c002532f:	e8 d6 10 00 00       	call   c002640a <x87Load>
c0025334:	83 c4 10             	add    esp,0x10
c0025337:	90                   	nop
c0025338:	83 c4 0c             	add    esp,0xc
c002533b:	c3                   	ret    

c002533c <MMX::MMX()>:
c002533c:	83 ec 0c             	sub    esp,0xc
c002533f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025343:	83 ec 08             	sub    esp,0x8
c0025346:	68 94 c4 02 c0       	push   0xc002c494
c002534b:	50                   	push   eax
c002534c:	e8 df ec fe ff       	call   c0014030 <FPU::FPU(char const*)>
c0025351:	83 c4 10             	add    esp,0x10
c0025354:	ba a4 c4 02 c0       	mov    edx,0xc002c4a4
c0025359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002535d:	89 10                	mov    DWORD PTR [eax],edx
c002535f:	90                   	nop
c0025360:	83 c4 0c             	add    esp,0xc
c0025363:	c3                   	ret    

c0025364 <SSE::open(int, int, void*)>:
c0025364:	83 ec 0c             	sub    esp,0xc
c0025367:	e8 58 10 00 00       	call   c00263c4 <sseInit>
c002536c:	b8 00 00 00 00       	mov    eax,0x0
c0025371:	83 c4 0c             	add    esp,0xc
c0025374:	c3                   	ret    
c0025375:	90                   	nop

c0025376 <SSE::close(int, int, void*)>:
c0025376:	83 ec 0c             	sub    esp,0xc
c0025379:	e8 56 10 00 00       	call   c00263d4 <sseClose>
c002537e:	b8 00 00 00 00       	mov    eax,0x0
c0025383:	83 c4 0c             	add    esp,0xc
c0025386:	c3                   	ret    
c0025387:	90                   	nop

c0025388 <SSE::available()>:
c0025388:	83 ec 1c             	sub    esp,0x1c
c002538b:	e8 10 10 00 00       	call   c00263a0 <absolutelyNoChanceInHell>
c0025390:	85 c0                	test   eax,eax
c0025392:	0f 95 c0             	setne  al
c0025395:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025399:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002539d:	83 c4 1c             	add    esp,0x1c
c00253a0:	c3                   	ret    
c00253a1:	90                   	nop

c00253a2 <SSE::save(void*)>:
c00253a2:	83 ec 0c             	sub    esp,0xc
c00253a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253a9:	83 ec 0c             	sub    esp,0xc
c00253ac:	50                   	push   eax
c00253ad:	e8 06 10 00 00       	call   c00263b8 <sseSave>
c00253b2:	83 c4 10             	add    esp,0x10
c00253b5:	90                   	nop
c00253b6:	83 c4 0c             	add    esp,0xc
c00253b9:	c3                   	ret    

c00253ba <SSE::load(void*)>:
c00253ba:	83 ec 0c             	sub    esp,0xc
c00253bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253c1:	83 ec 0c             	sub    esp,0xc
c00253c4:	50                   	push   eax
c00253c5:	e8 f4 0f 00 00       	call   c00263be <sseLoad>
c00253ca:	83 c4 10             	add    esp,0x10
c00253cd:	90                   	nop
c00253ce:	83 c4 0c             	add    esp,0xc
c00253d1:	c3                   	ret    

c00253d2 <SSE::SSE()>:
c00253d2:	83 ec 0c             	sub    esp,0xc
c00253d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d9:	83 ec 08             	sub    esp,0x8
c00253dc:	68 d4 c4 02 c0       	push   0xc002c4d4
c00253e1:	50                   	push   eax
c00253e2:	e8 49 ec fe ff       	call   c0014030 <FPU::FPU(char const*)>
c00253e7:	83 c4 10             	add    esp,0x10
c00253ea:	ba e4 c4 02 c0       	mov    edx,0xc002c4e4
c00253ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253f3:	89 10                	mov    DWORD PTR [eax],edx
c00253f5:	90                   	nop
c00253f6:	83 c4 0c             	add    esp,0xc
c00253f9:	c3                   	ret    

c00253fa <x87::open(int, int, void*)>:
c00253fa:	83 ec 0c             	sub    esp,0xc
c00253fd:	e8 10 10 00 00       	call   c0026412 <x87Init>
c0025402:	b8 00 00 00 00       	mov    eax,0x0
c0025407:	83 c4 0c             	add    esp,0xc
c002540a:	c3                   	ret    
c002540b:	90                   	nop

c002540c <x87::close(int, int, void*)>:
c002540c:	83 ec 0c             	sub    esp,0xc
c002540f:	e8 18 10 00 00       	call   c002642c <x87Close>
c0025414:	b8 00 00 00 00       	mov    eax,0x0
c0025419:	83 c4 0c             	add    esp,0xc
c002541c:	c3                   	ret    
c002541d:	90                   	nop

c002541e <x87::available()>:
c002541e:	83 ec 0c             	sub    esp,0xc
c0025421:	e8 c0 0f 00 00       	call   c00263e6 <x87Detect>
c0025426:	85 c0                	test   eax,eax
c0025428:	0f 95 c0             	setne  al
c002542b:	83 c4 0c             	add    esp,0xc
c002542e:	c3                   	ret    
c002542f:	90                   	nop

c0025430 <x87::save(void*)>:
c0025430:	83 ec 0c             	sub    esp,0xc
c0025433:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025437:	83 ec 0c             	sub    esp,0xc
c002543a:	50                   	push   eax
c002543b:	e8 c1 0f 00 00       	call   c0026401 <x87Save>
c0025440:	83 c4 10             	add    esp,0x10
c0025443:	90                   	nop
c0025444:	83 c4 0c             	add    esp,0xc
c0025447:	c3                   	ret    

c0025448 <x87::load(void*)>:
c0025448:	83 ec 0c             	sub    esp,0xc
c002544b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002544f:	83 ec 0c             	sub    esp,0xc
c0025452:	50                   	push   eax
c0025453:	e8 b2 0f 00 00       	call   c002640a <x87Load>
c0025458:	83 c4 10             	add    esp,0x10
c002545b:	90                   	nop
c002545c:	83 c4 0c             	add    esp,0xc
c002545f:	c3                   	ret    

c0025460 <x87::x87()>:
c0025460:	83 ec 0c             	sub    esp,0xc
c0025463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025467:	83 ec 08             	sub    esp,0x8
c002546a:	68 14 c5 02 c0       	push   0xc002c514
c002546f:	50                   	push   eax
c0025470:	e8 bb eb fe ff       	call   c0014030 <FPU::FPU(char const*)>
c0025475:	83 c4 10             	add    esp,0x10
c0025478:	ba 24 c5 02 c0       	mov    edx,0xc002c524
c002547d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025481:	89 10                	mov    DWORD PTR [eax],edx
c0025483:	90                   	nop
c0025484:	83 c4 0c             	add    esp,0xc
c0025487:	c3                   	ret    

c0025488 <APIC::disable()>:
c0025488:	90                   	nop
c0025489:	c3                   	ret    

c002548a <APIC::close(int, int, void*)>:
c002548a:	55                   	push   ebp
c002548b:	89 e5                	mov    ebp,esp
c002548d:	83 ec 08             	sub    esp,0x8
c0025490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025493:	8b 00                	mov    eax,DWORD PTR [eax]
c0025495:	83 c0 3c             	add    eax,0x3c
c0025498:	8b 00                	mov    eax,DWORD PTR [eax]
c002549a:	83 ec 0c             	sub    esp,0xc
c002549d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254a0:	ff d0                	call   eax
c00254a2:	83 c4 10             	add    esp,0x10
c00254a5:	b8 00 00 00 00       	mov    eax,0x0
c00254aa:	c9                   	leave  
c00254ab:	c3                   	ret    

c00254ac <IOAPIC::close(int, int, void*)>:
c00254ac:	b8 00 00 00 00       	mov    eax,0x0
c00254b1:	c3                   	ret    

c00254b2 <APIC::io_wait()>:
c00254b2:	eb 00                	jmp    c00254b4 <APIC::io_wait()+0x2>
c00254b4:	eb 00                	jmp    c00254b6 <APIC::io_wait()+0x4>
c00254b6:	90                   	nop
c00254b7:	c3                   	ret    

c00254b8 <APIC::getBase()>:
c00254b8:	55                   	push   ebp
c00254b9:	89 e5                	mov    ebp,esp
c00254bb:	83 ec 18             	sub    esp,0x18
c00254be:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00254c3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00254c9:	83 e0 08             	and    eax,0x8
c00254cc:	84 c0                	test   al,al
c00254ce:	75 07                	jne    c00254d7 <APIC::getBase()+0x1f>
c00254d0:	b8 00 00 00 00       	mov    eax,0x0
c00254d5:	eb 21                	jmp    c00254f8 <APIC::getBase()+0x40>
c00254d7:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00254dc:	83 ec 08             	sub    esp,0x8
c00254df:	6a 1b                	push   0x1b
c00254e1:	50                   	push   eax
c00254e2:	e8 59 96 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00254e7:	83 c4 10             	add    esp,0x10
c00254ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254ed:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00254f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00254f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00254f8:	c9                   	leave  
c00254f9:	c3                   	ret    

c00254fa <APIC::eoi(unsigned char)>:
c00254fa:	55                   	push   ebp
c00254fb:	89 e5                	mov    ebp,esp
c00254fd:	83 ec 28             	sub    esp,0x28
c0025500:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025503:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025506:	83 ec 0c             	sub    esp,0xc
c0025509:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002550c:	e8 a7 ff ff ff       	call   c00254b8 <APIC::getBase()>
c0025511:	83 c4 10             	add    esp,0x10
c0025514:	05 b0 00 00 00       	add    eax,0xb0
c0025519:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002551c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002551f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025525:	90                   	nop
c0025526:	c9                   	leave  
c0025527:	c3                   	ret    

c0025528 <APIC::open(int, int, void*)>:
c0025528:	55                   	push   ebp
c0025529:	89 e5                	mov    ebp,esp
c002552b:	57                   	push   edi
c002552c:	56                   	push   esi
c002552d:	53                   	push   ebx
c002552e:	83 ec 2c             	sub    esp,0x2c
c0025531:	83 ec 0c             	sub    esp,0xc
c0025534:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025537:	e8 7c ff ff ff       	call   c00254b8 <APIC::getBase()>
c002553c:	83 c4 10             	add    esp,0x10
c002553f:	89 c2                	mov    edx,eax
c0025541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025544:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002554a:	0f b6 f8             	movzx  edi,al
c002554d:	89 d0                	mov    eax,edx
c002554f:	ba 00 00 00 00       	mov    edx,0x0
c0025554:	89 c1                	mov    ecx,eax
c0025556:	80 e5 ff             	and    ch,0xff
c0025559:	89 cb                	mov    ebx,ecx
c002555b:	0f b6 f2             	movzx  esi,dl
c002555e:	89 d8                	mov    eax,ebx
c0025560:	89 f2                	mov    edx,esi
c0025562:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025565:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025568:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002556c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025570:	83 e0 00             	and    eax,0x0
c0025573:	09 d0                	or     eax,edx
c0025575:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002557c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025582:	8d 50 01             	lea    edx,[eax+0x1]
c0025585:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025588:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002558e:	0f b6 d0             	movzx  edx,al
c0025591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025594:	83 c2 08             	add    edx,0x8
c0025597:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002559b:	0f b6 c9             	movzx  ecx,cl
c002559e:	81 c9 00 00 01 00    	or     ecx,0x10000
c00255a4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00255a8:	83 ec 0c             	sub    esp,0xc
c00255ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255ae:	e8 05 ff ff ff       	call   c00254b8 <APIC::getBase()>
c00255b3:	83 c4 10             	add    esp,0x10
c00255b6:	05 f0 00 00 00       	add    eax,0xf0
c00255bb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00255be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00255c3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00255c6:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00255cd:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00255d4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255d7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00255da:	89 10                	mov    DWORD PTR [eax],edx
c00255dc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00255e3:	a1 90 02 03 c0       	mov    eax,ds:0xc0030290
c00255e8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00255eb:	7d 7c                	jge    c0025669 <APIC::open(int, int, void*)+0x141>
c00255ed:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255f0:	8b 04 85 a0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd60]
c00255f7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00255fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255fd:	8b 04 85 a0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd60]
c0025604:	c1 e8 08             	shr    eax,0x8
c0025607:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002560b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002560e:	8b 04 85 a0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd60]
c0025615:	c1 e8 18             	shr    eax,0x18
c0025618:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002561b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002561f:	75 40                	jne    c0025661 <APIC::open(int, int, void*)+0x139>
c0025621:	83 ec 0c             	sub    esp,0xc
c0025624:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025627:	e8 8c fe ff ff       	call   c00254b8 <APIC::getBase()>
c002562c:	83 c4 10             	add    esp,0x10
c002562f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025633:	75 07                	jne    c002563c <APIC::open(int, int, void*)+0x114>
c0025635:	ba 60 03 00 00       	mov    edx,0x360
c002563a:	eb 05                	jmp    c0025641 <APIC::open(int, int, void*)+0x119>
c002563c:	ba 50 03 00 00       	mov    edx,0x350
c0025641:	01 d0                	add    eax,edx
c0025643:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025646:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025649:	8b 00                	mov    eax,DWORD PTR [eax]
c002564b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002564e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025655:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025659:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002565c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002565f:	89 10                	mov    DWORD PTR [eax],edx
c0025661:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025664:	e9 7a ff ff ff       	jmp    c00255e3 <APIC::open(int, int, void*)+0xbb>
c0025669:	b8 00 00 00 00       	mov    eax,0x0
c002566e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025671:	5b                   	pop    ebx
c0025672:	5e                   	pop    esi
c0025673:	5f                   	pop    edi
c0025674:	5d                   	pop    ebp
c0025675:	c3                   	ret    

c0025676 <IOAPIC::IOAPIC()>:
c0025676:	83 ec 0c             	sub    esp,0xc
c0025679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002567d:	83 ec 08             	sub    esp,0x8
c0025680:	68 54 c5 02 c0       	push   0xc002c554
c0025685:	50                   	push   eax
c0025686:	e8 95 e6 fe ff       	call   c0013d20 <Device::Device(char const*)>
c002568b:	83 c4 10             	add    esp,0x10
c002568e:	ba 7c c6 02 c0       	mov    edx,0xc002c67c
c0025693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025697:	89 10                	mov    DWORD PTR [eax],edx
c0025699:	90                   	nop
c002569a:	83 c4 0c             	add    esp,0xc
c002569d:	c3                   	ret    

c002569e <APIC::APIC()>:
c002569e:	53                   	push   ebx
c002569f:	83 ec 18             	sub    esp,0x18
c00256a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00256a6:	83 ec 08             	sub    esp,0x8
c00256a9:	68 5c c5 02 c0       	push   0xc002c55c
c00256ae:	50                   	push   eax
c00256af:	e8 d6 ed fe ff       	call   c001448a <InterruptController::InterruptController(char const*)>
c00256b4:	83 c4 10             	add    esp,0x10
c00256b7:	ba 34 c6 02 c0       	mov    edx,0xc002c634
c00256bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00256c0:	89 10                	mov    DWORD PTR [eax],edx
c00256c2:	a0 60 1d 03 c0       	mov    al,ds:0xc0031d60
c00256c7:	83 f0 01             	xor    eax,0x1
c00256ca:	84 c0                	test   al,al
c00256cc:	0f 84 a1 00 00 00    	je     c0025773 <APIC::APIC()+0xd5>
c00256d2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00256d7:	a0 40 03 03 c0       	mov    al,ds:0xc0030340
c00256dc:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00256e0:	0f 83 86 00 00 00    	jae    c002576c <APIC::APIC()+0xce>
c00256e6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00256ee:	83 ec 0c             	sub    esp,0xc
c00256f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00256f5:	e8 9f 9e fe ff       	call   c000f599 <malloc>
c00256fa:	83 c4 10             	add    esp,0x10
c00256fd:	89 c3                	mov    ebx,eax
c00256ff:	83 ec 0c             	sub    esp,0xc
c0025702:	53                   	push   ebx
c0025703:	e8 6e ff ff ff       	call   c0025676 <IOAPIC::IOAPIC()>
c0025708:	83 c4 10             	add    esp,0x10
c002570b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002570f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025718:	89 14 85 40 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2c0],edx
c002571f:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c0025724:	40                   	inc    eax
c0025725:	a3 20 1d 03 c0       	mov    ds:0xc0031d20,eax
c002572a:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c002572f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025735:	83 ec 08             	sub    esp,0x8
c0025738:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002573c:	50                   	push   eax
c002573d:	e8 da e3 fe ff       	call   c0013b1c <Device::addChild(Device*)>
c0025742:	83 c4 10             	add    esp,0x10
c0025745:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025749:	8b 00                	mov    eax,DWORD PTR [eax]
c002574b:	83 c0 08             	add    eax,0x8
c002574e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025750:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025755:	6a 00                	push   0x0
c0025757:	6a 00                	push   0x0
c0025759:	52                   	push   edx
c002575a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002575e:	ff d0                	call   eax
c0025760:	83 c4 10             	add    esp,0x10
c0025763:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025767:	e9 6b ff ff ff       	jmp    c00256d7 <APIC::APIC()+0x39>
c002576c:	c6 05 60 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d60,0x1
c0025773:	90                   	nop
c0025774:	83 c4 18             	add    esp,0x18
c0025777:	5b                   	pop    ebx
c0025778:	c3                   	ret    
c0025779:	90                   	nop

c002577a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002577a:	55                   	push   ebp
c002577b:	89 e5                	mov    ebp,esp
c002577d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025780:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025786:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025789:	72 1d                	jb     c00257a8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002578b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002578e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025797:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002579d:	01 d0                	add    eax,edx
c002579f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00257a2:	73 04                	jae    c00257a8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00257a4:	b0 01                	mov    al,0x1
c00257a6:	eb 02                	jmp    c00257aa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00257a8:	b0 00                	mov    al,0x0
c00257aa:	5d                   	pop    ebp
c00257ab:	c3                   	ret    

c00257ac <IOAPIC::read(int)>:
c00257ac:	55                   	push   ebp
c00257ad:	89 e5                	mov    ebp,esp
c00257af:	83 ec 10             	sub    esp,0x10
c00257b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257bb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257c1:	0f b6 d0             	movzx  edx,al
c00257c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257c7:	89 10                	mov    DWORD PTR [eax],edx
c00257c9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257cc:	83 c0 10             	add    eax,0x10
c00257cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00257d1:	c9                   	leave  
c00257d2:	c3                   	ret    
c00257d3:	90                   	nop

c00257d4 <IOAPIC::open(int, int, void*)>:
c00257d4:	55                   	push   ebp
c00257d5:	89 e5                	mov    ebp,esp
c00257d7:	57                   	push   edi
c00257d8:	56                   	push   esi
c00257d9:	53                   	push   ebx
c00257da:	83 ec 0c             	sub    esp,0xc
c00257dd:	83 ec 0c             	sub    esp,0xc
c00257e0:	68 87 c5 02 c0       	push   0xc002c587
c00257e5:	e8 f9 ce fe ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c00257ea:	83 c4 10             	add    esp,0x10
c00257ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00257f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00257f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257fc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025802:	8b 14 85 80 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfc80]
c0025809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002580c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025815:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002581b:	8b 14 85 00 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfc00]
c0025822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025825:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002582b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002582e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025837:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002583d:	0f b6 f8             	movzx  edi,al
c0025840:	89 d0                	mov    eax,edx
c0025842:	ba 00 00 00 00       	mov    edx,0x0
c0025847:	89 c1                	mov    ecx,eax
c0025849:	80 e5 ff             	and    ch,0xff
c002584c:	89 cb                	mov    ebx,ecx
c002584e:	0f b6 f2             	movzx  esi,dl
c0025851:	89 d8                	mov    eax,ebx
c0025853:	89 f2                	mov    edx,esi
c0025855:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025858:	8d 5f 08             	lea    ebx,[edi+0x8]
c002585b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002585f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025863:	83 e0 00             	and    eax,0x0
c0025866:	09 d0                	or     eax,edx
c0025868:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002586c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002586f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025875:	8d 50 01             	lea    edx,[eax+0x1]
c0025878:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002587b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025881:	0f b6 d0             	movzx  edx,al
c0025884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025887:	83 c2 08             	add    edx,0x8
c002588a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002588e:	0f b6 c9             	movzx  ecx,cl
c0025891:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025897:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002589b:	83 ec 08             	sub    esp,0x8
c002589e:	6a 01                	push   0x1
c00258a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258a3:	e8 04 ff ff ff       	call   c00257ac <IOAPIC::read(int)>
c00258a8:	83 c4 10             	add    esp,0x10
c00258ab:	c1 f8 10             	sar    eax,0x10
c00258ae:	0f b6 c0             	movzx  eax,al
c00258b1:	8d 50 01             	lea    edx,[eax+0x1]
c00258b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258b7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00258bd:	b8 00 00 00 00       	mov    eax,0x0
c00258c2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258c5:	5b                   	pop    ebx
c00258c6:	5e                   	pop    esi
c00258c7:	5f                   	pop    edi
c00258c8:	5d                   	pop    ebp
c00258c9:	c3                   	ret    

c00258ca <IOAPIC::write(int, int)>:
c00258ca:	55                   	push   ebp
c00258cb:	89 e5                	mov    ebp,esp
c00258cd:	83 ec 10             	sub    esp,0x10
c00258d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00258d9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00258dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258df:	0f b6 d0             	movzx  edx,al
c00258e2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258e5:	89 10                	mov    DWORD PTR [eax],edx
c00258e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258ea:	8d 50 10             	lea    edx,[eax+0x10]
c00258ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258f0:	89 02                	mov    DWORD PTR [edx],eax
c00258f2:	90                   	nop
c00258f3:	c9                   	leave  
c00258f4:	c3                   	ret    
c00258f5:	90                   	nop

c00258f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00258f6:	55                   	push   ebp
c00258f7:	89 e5                	mov    ebp,esp
c00258f9:	53                   	push   ebx
c00258fa:	83 ec 2c             	sub    esp,0x2c
c00258fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025900:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025903:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025906:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025909:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002590c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002590f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025912:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025915:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025918:	88 d8                	mov    al,bl
c002591a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002591d:	88 c8                	mov    al,cl
c002591f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025922:	88 d0                	mov    al,dl
c0025924:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025927:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002592b:	83 c0 08             	add    eax,0x8
c002592e:	01 c0                	add    eax,eax
c0025930:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025933:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025937:	83 c0 08             	add    eax,0x8
c002593a:	01 c0                	add    eax,eax
c002593c:	40                   	inc    eax
c002593d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025940:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025943:	50                   	push   eax
c0025944:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025947:	e8 60 fe ff ff       	call   c00257ac <IOAPIC::read(int)>
c002594c:	83 c4 08             	add    esp,0x8
c002594f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025952:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025959:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002595c:	c1 e0 18             	shl    eax,0x18
c002595f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025962:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025965:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025968:	52                   	push   edx
c0025969:	50                   	push   eax
c002596a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002596d:	e8 58 ff ff ff       	call   c00258ca <IOAPIC::write(int, int)>
c0025972:	83 c4 0c             	add    esp,0xc
c0025975:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025978:	50                   	push   eax
c0025979:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002597c:	e8 2b fe ff ff       	call   c00257ac <IOAPIC::read(int)>
c0025981:	83 c4 08             	add    esp,0x8
c0025984:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025987:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002598e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025995:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002599c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00259a0:	74 09                	je     c00259ab <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00259a2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00259a9:	eb 07                	jmp    c00259b2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00259ab:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00259b2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00259b6:	74 09                	je     c00259c1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00259b8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00259bf:	eb 07                	jmp    c00259c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00259c1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00259c8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00259cf:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00259d3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00259d6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00259d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259dc:	52                   	push   edx
c00259dd:	50                   	push   eax
c00259de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259e1:	e8 e4 fe ff ff       	call   c00258ca <IOAPIC::write(int, int)>
c00259e6:	83 c4 0c             	add    esp,0xc
c00259e9:	90                   	nop
c00259ea:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00259ed:	c9                   	leave  
c00259ee:	c3                   	ret    
c00259ef:	90                   	nop

c00259f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00259f0:	55                   	push   ebp
c00259f1:	89 e5                	mov    ebp,esp
c00259f3:	57                   	push   edi
c00259f4:	56                   	push   esi
c00259f5:	53                   	push   ebx
c00259f6:	83 ec 2c             	sub    esp,0x2c
c00259f9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00259fc:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00259ff:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a03:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025a07:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025a0b:	74 5a                	je     c0025a67 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a0d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025a11:	7f 44                	jg     c0025a57 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025a13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a16:	05 20 cc 02 c0       	add    eax,0xc002cc20
c0025a1b:	8a 00                	mov    al,BYTE PTR [eax]
c0025a1d:	0f b6 c0             	movzx  eax,al
c0025a20:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025a23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a26:	66 8b 84 00 20 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfce0]
c0025a2e:	0f b7 c0             	movzx  eax,ax
c0025a31:	83 e0 02             	and    eax,0x2
c0025a34:	85 c0                	test   eax,eax
c0025a36:	74 04                	je     c0025a3c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025a38:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025a3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a3f:	66 8b 84 00 20 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfce0]
c0025a47:	0f b7 c0             	movzx  eax,ax
c0025a4a:	83 e0 08             	and    eax,0x8
c0025a4d:	85 c0                	test   eax,eax
c0025a4f:	74 16                	je     c0025a67 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a51:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a55:	eb 10                	jmp    c0025a67 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a57:	83 ec 0c             	sub    esp,0xc
c0025a5a:	68 98 c5 02 c0       	push   0xc002c598
c0025a5f:	e8 eb 43 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0025a64:	83 c4 10             	add    esp,0x10
c0025a67:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025a6b:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c0025a70:	83 ec 08             	sub    esp,0x8
c0025a73:	50                   	push   eax
c0025a74:	68 d0 c5 02 c0       	push   0xc002c5d0
c0025a79:	e8 65 cc fe ff       	call   c00126e3 <Dbg::kprintf(char const*, ...)>
c0025a7e:	83 c4 10             	add    esp,0x10
c0025a81:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025a88:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c0025a8d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025a90:	7d 67                	jge    c0025af9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a92:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a95:	8b 04 85 40 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce2c0]
c0025a9c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a9f:	83 ec 08             	sub    esp,0x8
c0025aa2:	52                   	push   edx
c0025aa3:	50                   	push   eax
c0025aa4:	e8 d1 fc ff ff       	call   c002577a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025aa9:	83 c4 10             	add    esp,0x10
c0025aac:	84 c0                	test   al,al
c0025aae:	74 44                	je     c0025af4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025ab0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025ab3:	8b 1c 85 40 1d 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce2c0]
c0025aba:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025abe:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025ac1:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025ac5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ac8:	83 c0 20             	add    eax,0x20
c0025acb:	0f b6 f0             	movzx  esi,al
c0025ace:	b8 00 00 00 00       	mov    eax,0x0
c0025ad3:	99                   	cdq    
c0025ad4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025ad7:	0f b6 c9             	movzx  ecx,cl
c0025ada:	83 ec 04             	sub    esp,0x4
c0025add:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025ae0:	57                   	push   edi
c0025ae1:	56                   	push   esi
c0025ae2:	52                   	push   edx
c0025ae3:	50                   	push   eax
c0025ae4:	51                   	push   ecx
c0025ae5:	53                   	push   ebx
c0025ae6:	e8 0b fe ff ff       	call   c00258f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025aeb:	83 c4 20             	add    esp,0x20
c0025aee:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025af2:	eb 05                	jmp    c0025af9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025af4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025af7:	eb 8f                	jmp    c0025a88 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025af9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025afc:	83 f0 01             	xor    eax,0x1
c0025aff:	84 c0                	test   al,al
c0025b01:	74 10                	je     c0025b13 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025b03:	83 ec 0c             	sub    esp,0xc
c0025b06:	68 e7 c5 02 c0       	push   0xc002c5e7
c0025b0b:	e8 3f 43 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0025b10:	83 c4 10             	add    esp,0x10
c0025b13:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025b17:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025b1e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025b22:	7f 65                	jg     c0025b89 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b27:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b2a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b31:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b34:	01 ca                	add    edx,ecx
c0025b36:	83 c2 54             	add    edx,0x54
c0025b39:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025b3d:	85 c0                	test   eax,eax
c0025b3f:	75 43                	jne    c0025b84 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b44:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b47:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b4e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b51:	01 ca                	add    edx,ecx
c0025b53:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025b56:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025b59:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b60:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b63:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b6a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b6d:	01 ca                	add    edx,ecx
c0025b6f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025b75:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025b78:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b7f:	83 e8 20             	sub    eax,0x20
c0025b82:	eb 1a                	jmp    c0025b9e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025b84:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025b87:	eb 95                	jmp    c0025b1e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025b89:	83 ec 0c             	sub    esp,0xc
c0025b8c:	68 f4 c5 02 c0       	push   0xc002c5f4
c0025b91:	e8 b9 42 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0025b96:	83 c4 10             	add    esp,0x10
c0025b99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025b9e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ba1:	5b                   	pop    ebx
c0025ba2:	5e                   	pop    esi
c0025ba3:	5f                   	pop    edi
c0025ba4:	5d                   	pop    ebp
c0025ba5:	c3                   	ret    

c0025ba6 <PIC::disable()>:
c0025ba6:	55                   	push   ebp
c0025ba7:	89 e5                	mov    ebp,esp
c0025ba9:	83 ec 10             	sub    esp,0x10
c0025bac:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025bb2:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025bb6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025bb9:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025bbd:	ee                   	out    dx,al
c0025bbe:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025bc4:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025bc8:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025bcb:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025bcf:	ee                   	out    dx,al
c0025bd0:	90                   	nop
c0025bd1:	c9                   	leave  
c0025bd2:	c3                   	ret    
c0025bd3:	90                   	nop

c0025bd4 <PIC::close(int, int, void*)>:
c0025bd4:	55                   	push   ebp
c0025bd5:	89 e5                	mov    ebp,esp
c0025bd7:	83 ec 08             	sub    esp,0x8
c0025bda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bdf:	83 c0 3c             	add    eax,0x3c
c0025be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025be4:	83 ec 0c             	sub    esp,0xc
c0025be7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bea:	ff d0                	call   eax
c0025bec:	83 c4 10             	add    esp,0x10
c0025bef:	b8 00 00 00 00       	mov    eax,0x0
c0025bf4:	c9                   	leave  
c0025bf5:	c3                   	ret    

c0025bf6 <PIC::PIC()>:
c0025bf6:	83 ec 0c             	sub    esp,0xc
c0025bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bfd:	83 ec 08             	sub    esp,0x8
c0025c00:	68 a0 c6 02 c0       	push   0xc002c6a0
c0025c05:	50                   	push   eax
c0025c06:	e8 7f e8 fe ff       	call   c001448a <InterruptController::InterruptController(char const*)>
c0025c0b:	83 c4 10             	add    esp,0x10
c0025c0e:	ba cc c6 02 c0       	mov    edx,0xc002c6cc
c0025c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c17:	89 10                	mov    DWORD PTR [eax],edx
c0025c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c1d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c23:	0f b6 d0             	movzx  edx,al
c0025c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c2a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c35:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c3b:	0f b6 d0             	movzx  edx,al
c0025c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c42:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c51:	8d 50 01             	lea    edx,[eax+0x1]
c0025c54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c58:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c5e:	0f b6 d0             	movzx  edx,al
c0025c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c65:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c69:	83 e1 3f             	and    ecx,0x3f
c0025c6c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c74:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c7a:	0f b6 d0             	movzx  edx,al
c0025c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c81:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c92:	0f b6 d0             	movzx  edx,al
c0025c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c99:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ca8:	8d 50 01             	lea    edx,[eax+0x1]
c0025cab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025caf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025cb5:	0f b6 d0             	movzx  edx,al
c0025cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cbc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025cc0:	83 e1 3f             	and    ecx,0x3f
c0025cc3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025cc7:	90                   	nop
c0025cc8:	83 c4 0c             	add    esp,0xc
c0025ccb:	c3                   	ret    

c0025ccc <PIC::ioWait()>:
c0025ccc:	eb 00                	jmp    c0025cce <PIC::ioWait()+0x2>
c0025cce:	eb 00                	jmp    c0025cd0 <PIC::ioWait()+0x4>
c0025cd0:	90                   	nop
c0025cd1:	c3                   	ret    

c0025cd2 <PIC::getIRQReg(int)>:
c0025cd2:	55                   	push   ebp
c0025cd3:	89 e5                	mov    ebp,esp
c0025cd5:	83 ec 10             	sub    esp,0x10
c0025cd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cdb:	0f b6 c0             	movzx  eax,al
c0025cde:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025ce4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025ce7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025cea:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025cee:	ee                   	out    dx,al
c0025cef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cf2:	0f b6 c0             	movzx  eax,al
c0025cf5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025cfb:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025cfe:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d01:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d05:	ee                   	out    dx,al
c0025d06:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025d0c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025d10:	89 c2                	mov    edx,eax
c0025d12:	ec                   	in     al,dx
c0025d13:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025d16:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d19:	0f b6 c0             	movzx  eax,al
c0025d1c:	c1 e0 08             	shl    eax,0x8
c0025d1f:	89 c1                	mov    ecx,eax
c0025d21:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025d27:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025d2b:	89 c2                	mov    edx,eax
c0025d2d:	ec                   	in     al,dx
c0025d2e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025d31:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d34:	0f b6 c0             	movzx  eax,al
c0025d37:	09 c8                	or     eax,ecx
c0025d39:	c9                   	leave  
c0025d3a:	c3                   	ret    
c0025d3b:	90                   	nop

c0025d3c <PIC::eoi(unsigned char)>:
c0025d3c:	55                   	push   ebp
c0025d3d:	89 e5                	mov    ebp,esp
c0025d3f:	83 ec 14             	sub    esp,0x14
c0025d42:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d45:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025d48:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d4c:	75 1e                	jne    c0025d6c <PIC::eoi(unsigned char)+0x30>
c0025d4e:	6a 0b                	push   0xb
c0025d50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d53:	e8 7a ff ff ff       	call   c0025cd2 <PIC::getIRQReg(int)>
c0025d58:	83 c4 08             	add    esp,0x8
c0025d5b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025d5f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025d63:	25 80 00 00 00       	and    eax,0x80
c0025d68:	85 c0                	test   eax,eax
c0025d6a:	74 5f                	je     c0025dcb <PIC::eoi(unsigned char)+0x8f>
c0025d6c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025d70:	75 2d                	jne    c0025d9f <PIC::eoi(unsigned char)+0x63>
c0025d72:	6a 0b                	push   0xb
c0025d74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d77:	e8 56 ff ff ff       	call   c0025cd2 <PIC::getIRQReg(int)>
c0025d7c:	83 c4 08             	add    esp,0x8
c0025d7f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025d83:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d86:	66 85 c0             	test   ax,ax
c0025d89:	78 14                	js     c0025d9f <PIC::eoi(unsigned char)+0x63>
c0025d8b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025d91:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025d95:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d98:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d9c:	ee                   	out    dx,al
c0025d9d:	eb 2d                	jmp    c0025dcc <PIC::eoi(unsigned char)+0x90>
c0025d9f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025da3:	76 12                	jbe    c0025db7 <PIC::eoi(unsigned char)+0x7b>
c0025da5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025dab:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025daf:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025db2:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025db6:	ee                   	out    dx,al
c0025db7:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025dbd:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025dc1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025dc4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025dc8:	ee                   	out    dx,al
c0025dc9:	eb 01                	jmp    c0025dcc <PIC::eoi(unsigned char)+0x90>
c0025dcb:	90                   	nop
c0025dcc:	c9                   	leave  
c0025dcd:	c3                   	ret    

c0025dce <PIC::remap()>:
c0025dce:	55                   	push   ebp
c0025dcf:	89 e5                	mov    ebp,esp
c0025dd1:	83 ec 48             	sub    esp,0x48
c0025dd4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025ddb:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025de2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025de8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025deb:	89 c2                	mov    edx,eax
c0025ded:	ec                   	in     al,dx
c0025dee:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025df1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025df4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025df7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025dfd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025e00:	89 c2                	mov    edx,eax
c0025e02:	ec                   	in     al,dx
c0025e03:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025e06:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025e09:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025e0c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025e12:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025e16:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025e19:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025e1c:	ee                   	out    dx,al
c0025e1d:	83 ec 0c             	sub    esp,0xc
c0025e20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e23:	e8 a4 fe ff ff       	call   c0025ccc <PIC::ioWait()>
c0025e28:	83 c4 10             	add    esp,0x10
c0025e2b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025e31:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025e35:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025e38:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025e3b:	ee                   	out    dx,al
c0025e3c:	83 ec 0c             	sub    esp,0xc
c0025e3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e42:	e8 85 fe ff ff       	call   c0025ccc <PIC::ioWait()>
c0025e47:	83 c4 10             	add    esp,0x10
c0025e4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025e4d:	0f b6 c0             	movzx  eax,al
c0025e50:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025e56:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025e59:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025e5c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025e5f:	ee                   	out    dx,al
c0025e60:	83 ec 0c             	sub    esp,0xc
c0025e63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e66:	e8 61 fe ff ff       	call   c0025ccc <PIC::ioWait()>
c0025e6b:	83 c4 10             	add    esp,0x10
c0025e6e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e71:	0f b6 c0             	movzx  eax,al
c0025e74:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025e7a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025e7d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025e80:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025e83:	ee                   	out    dx,al
c0025e84:	83 ec 0c             	sub    esp,0xc
c0025e87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e8a:	e8 3d fe ff ff       	call   c0025ccc <PIC::ioWait()>
c0025e8f:	83 c4 10             	add    esp,0x10
c0025e92:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025e98:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025e9c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025e9f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025ea2:	ee                   	out    dx,al
c0025ea3:	83 ec 0c             	sub    esp,0xc
c0025ea6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ea9:	e8 1e fe ff ff       	call   c0025ccc <PIC::ioWait()>
c0025eae:	83 c4 10             	add    esp,0x10
c0025eb1:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025eb7:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025ebb:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025ebe:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ec1:	ee                   	out    dx,al
c0025ec2:	83 ec 0c             	sub    esp,0xc
c0025ec5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ec8:	e8 ff fd ff ff       	call   c0025ccc <PIC::ioWait()>
c0025ecd:	83 c4 10             	add    esp,0x10
c0025ed0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025ed6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025eda:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025edd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025ee0:	ee                   	out    dx,al
c0025ee1:	83 ec 0c             	sub    esp,0xc
c0025ee4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ee7:	e8 e0 fd ff ff       	call   c0025ccc <PIC::ioWait()>
c0025eec:	83 c4 10             	add    esp,0x10
c0025eef:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025ef5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025ef9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025efc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025eff:	ee                   	out    dx,al
c0025f00:	83 ec 0c             	sub    esp,0xc
c0025f03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f06:	e8 c1 fd ff ff       	call   c0025ccc <PIC::ioWait()>
c0025f0b:	83 c4 10             	add    esp,0x10
c0025f0e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025f12:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025f18:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025f1b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025f1e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025f21:	ee                   	out    dx,al
c0025f22:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025f26:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025f2c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025f2f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025f32:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025f35:	ee                   	out    dx,al
c0025f36:	90                   	nop
c0025f37:	c9                   	leave  
c0025f38:	c3                   	ret    
c0025f39:	90                   	nop

c0025f3a <PIC::open(int, int, void*)>:
c0025f3a:	55                   	push   ebp
c0025f3b:	89 e5                	mov    ebp,esp
c0025f3d:	83 ec 18             	sub    esp,0x18
c0025f40:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025f46:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025f4a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f4d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f51:	ee                   	out    dx,al
c0025f52:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025f58:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025f5c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f5f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f63:	ee                   	out    dx,al
c0025f64:	83 ec 0c             	sub    esp,0xc
c0025f67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f6a:	e8 5f fe ff ff       	call   c0025dce <PIC::remap()>
c0025f6f:	83 c4 10             	add    esp,0x10
c0025f72:	b8 00 00 00 00       	mov    eax,0x0
c0025f77:	c9                   	leave  
c0025f78:	c3                   	ret    
c0025f79:	90                   	nop

c0025f7a <APICTimer::close(int, int, void*)>:
c0025f7a:	b8 00 00 00 00       	mov    eax,0x0
c0025f7f:	c3                   	ret    

c0025f80 <apicTimerHandler(regs*, void*)>:
c0025f80:	83 ec 0c             	sub    esp,0xc
c0025f83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f87:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f89:	99                   	cdq    
c0025f8a:	52                   	push   edx
c0025f8b:	50                   	push   eax
c0025f8c:	6a 00                	push   0x0
c0025f8e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025f93:	e8 8c 07 00 00       	call   c0026724 <__udivdi3>
c0025f98:	83 c4 10             	add    esp,0x10
c0025f9b:	83 ec 08             	sub    esp,0x8
c0025f9e:	52                   	push   edx
c0025f9f:	50                   	push   eax
c0025fa0:	e8 3c 06 ff ff       	call   c00165e1 <timerHandler(unsigned long long)>
c0025fa5:	83 c4 10             	add    esp,0x10
c0025fa8:	90                   	nop
c0025fa9:	83 c4 0c             	add    esp,0xc
c0025fac:	c3                   	ret    
c0025fad:	90                   	nop

c0025fae <APICTimer::write(int)>:
c0025fae:	53                   	push   ebx
c0025faf:	83 ec 28             	sub    esp,0x28
c0025fb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025fb6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025fba:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025fc0:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0025fc5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025fcb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025fd1:	83 ec 0c             	sub    esp,0xc
c0025fd4:	50                   	push   eax
c0025fd5:	e8 de f4 ff ff       	call   c00254b8 <APIC::getBase()>
c0025fda:	83 c4 10             	add    esp,0x10
c0025fdd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025fe1:	a1 30 e0 02 c0       	mov    eax,ds:0xc002e030
c0025fe6:	8b 15 34 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e034
c0025fec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025ff0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ff8:	05 e0 03 00 00       	add    eax,0x3e0
c0025ffd:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026003:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026007:	05 80 03 00 00       	add    eax,0x380
c002600c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026012:	fb                   	sti    
c0026013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026017:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002601b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026020:	83 d2 00             	adc    edx,0x0
c0026023:	89 c1                	mov    ecx,eax
c0026025:	89 d3                	mov    ebx,edx
c0026027:	a1 30 e0 02 c0       	mov    eax,ds:0xc002e030
c002602c:	8b 15 34 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e034
c0026032:	39 c8                	cmp    eax,ecx
c0026034:	89 d0                	mov    eax,edx
c0026036:	19 d8                	sbb    eax,ebx
c0026038:	73 02                	jae    c002603c <APICTimer::write(int)+0x8e>
c002603a:	eb d7                	jmp    c0026013 <APICTimer::write(int)+0x65>
c002603c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026040:	05 20 03 00 00       	add    eax,0x320
c0026045:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002604b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002604f:	05 90 03 00 00       	add    eax,0x390
c0026054:	8b 00                	mov    eax,DWORD PTR [eax]
c0026056:	f7 d0                	not    eax
c0026058:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002605c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026060:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026064:	ba 00 00 00 00       	mov    edx,0x0
c0026069:	f7 f3                	div    ebx
c002606b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002606f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026073:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026079:	0d 00 00 02 00       	or     eax,0x20000
c002607e:	89 c2                	mov    edx,eax
c0026080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026084:	05 20 03 00 00       	add    eax,0x320
c0026089:	89 10                	mov    DWORD PTR [eax],edx
c002608b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002608f:	05 e0 03 00 00       	add    eax,0x3e0
c0026094:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002609a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002609e:	05 80 03 00 00       	add    eax,0x380
c00260a3:	89 c2                	mov    edx,eax
c00260a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00260a9:	89 02                	mov    DWORD PTR [edx],eax
c00260ab:	90                   	nop
c00260ac:	83 c4 28             	add    esp,0x28
c00260af:	5b                   	pop    ebx
c00260b0:	c3                   	ret    
c00260b1:	90                   	nop

c00260b2 <APICTimer::open(int, int, void*)>:
c00260b2:	57                   	push   edi
c00260b3:	56                   	push   esi
c00260b4:	53                   	push   ebx
c00260b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00260bb:	83 c0 24             	add    eax,0x24
c00260be:	8b 00                	mov    eax,DWORD PTR [eax]
c00260c0:	83 ec 08             	sub    esp,0x8
c00260c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260cb:	ff d0                	call   eax
c00260cd:	83 c4 10             	add    esp,0x10
c00260d0:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00260d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00260db:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00260e1:	83 ec 0c             	sub    esp,0xc
c00260e4:	50                   	push   eax
c00260e5:	e8 ce f3 ff ff       	call   c00254b8 <APIC::getBase()>
c00260ea:	83 c4 10             	add    esp,0x10
c00260ed:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00260f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260f7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260fd:	0f b6 f8             	movzx  edi,al
c0026100:	89 d0                	mov    eax,edx
c0026102:	ba 00 00 00 00       	mov    edx,0x0
c0026107:	89 c1                	mov    ecx,eax
c0026109:	80 e5 ff             	and    ch,0xff
c002610c:	89 cb                	mov    ebx,ecx
c002610e:	0f b6 f2             	movzx  esi,dl
c0026111:	89 d8                	mov    eax,ebx
c0026113:	89 f2                	mov    edx,esi
c0026115:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026119:	8d 5f 08             	lea    ebx,[edi+0x8]
c002611c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026120:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026124:	83 e0 00             	and    eax,0x0
c0026127:	09 d0                	or     eax,edx
c0026129:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002612d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026131:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026137:	8d 50 01             	lea    edx,[eax+0x1]
c002613a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002613e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026144:	0f b6 d0             	movzx  edx,al
c0026147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002614b:	83 c2 08             	add    edx,0x8
c002614e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026152:	0f b6 c9             	movzx  ecx,cl
c0026155:	81 c9 00 00 01 00    	or     ecx,0x10000
c002615b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002615f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026163:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026167:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002616d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026171:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026175:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002617b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002617f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026185:	83 ec 0c             	sub    esp,0xc
c0026188:	51                   	push   ecx
c0026189:	6a 01                	push   0x1
c002618b:	68 80 5f 02 c0       	push   0xc0025f80
c0026190:	52                   	push   edx
c0026191:	50                   	push   eax
c0026192:	e8 fd d8 fe ff       	call   c0013a94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026197:	83 c4 20             	add    esp,0x20
c002619a:	89 c2                	mov    edx,eax
c002619c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261a0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00261a6:	b8 00 00 00 00       	mov    eax,0x0
c00261ab:	5b                   	pop    ebx
c00261ac:	5e                   	pop    esi
c00261ad:	5f                   	pop    edi
c00261ae:	c3                   	ret    
c00261af:	90                   	nop

c00261b0 <APICTimer::APICTimer()>:
c00261b0:	83 ec 0c             	sub    esp,0xc
c00261b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b7:	83 ec 08             	sub    esp,0x8
c00261ba:	68 0c c7 02 c0       	push   0xc002c70c
c00261bf:	50                   	push   eax
c00261c0:	e8 8d 03 ff ff       	call   c0016552 <Timer::Timer(char const*)>
c00261c5:	83 c4 10             	add    esp,0x10
c00261c8:	ba 20 c7 02 c0       	mov    edx,0xc002c720
c00261cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261d1:	89 10                	mov    DWORD PTR [eax],edx
c00261d3:	90                   	nop
c00261d4:	83 c4 0c             	add    esp,0xc
c00261d7:	c3                   	ret    

c00261d8 <PIT::write(int)>:
c00261d8:	83 ec 10             	sub    esp,0x10
c00261db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00261e3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00261e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00261ed:	a3 64 1d 03 c0       	mov    ds:0xc0031d64,eax
c00261f2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00261f7:	99                   	cdq    
c00261f8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00261fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026200:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026207:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002620c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026210:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026215:	ee                   	out    dx,al
c0026216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002621a:	0f b6 c0             	movzx  eax,al
c002621d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026224:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026228:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002622c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026231:	ee                   	out    dx,al
c0026232:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026236:	c1 f8 08             	sar    eax,0x8
c0026239:	0f b6 c0             	movzx  eax,al
c002623c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026243:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026247:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002624b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026250:	ee                   	out    dx,al
c0026251:	90                   	nop
c0026252:	83 c4 10             	add    esp,0x10
c0026255:	c3                   	ret    

c0026256 <pitHandler(regs*, void*)>:
c0026256:	83 ec 0c             	sub    esp,0xc
c0026259:	a1 64 1d 03 c0       	mov    eax,ds:0xc0031d64
c002625e:	99                   	cdq    
c002625f:	52                   	push   edx
c0026260:	50                   	push   eax
c0026261:	6a 00                	push   0x0
c0026263:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026268:	e8 b7 04 00 00       	call   c0026724 <__udivdi3>
c002626d:	83 c4 10             	add    esp,0x10
c0026270:	83 ec 08             	sub    esp,0x8
c0026273:	52                   	push   edx
c0026274:	50                   	push   eax
c0026275:	e8 67 03 ff ff       	call   c00165e1 <timerHandler(unsigned long long)>
c002627a:	83 c4 10             	add    esp,0x10
c002627d:	90                   	nop
c002627e:	83 c4 0c             	add    esp,0xc
c0026281:	c3                   	ret    

c0026282 <PIT::open(int, int, void*)>:
c0026282:	83 ec 0c             	sub    esp,0xc
c0026285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026289:	8b 00                	mov    eax,DWORD PTR [eax]
c002628b:	83 c0 24             	add    eax,0x24
c002628e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026290:	83 ec 08             	sub    esp,0x8
c0026293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026297:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002629b:	ff d0                	call   eax
c002629d:	83 c4 10             	add    esp,0x10
c00262a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a4:	83 ec 0c             	sub    esp,0xc
c00262a7:	6a 00                	push   0x0
c00262a9:	6a 01                	push   0x1
c00262ab:	68 56 62 02 c0       	push   0xc0026256
c00262b0:	6a 00                	push   0x0
c00262b2:	50                   	push   eax
c00262b3:	e8 dc d7 fe ff       	call   c0013a94 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00262b8:	83 c4 20             	add    esp,0x20
c00262bb:	89 c2                	mov    edx,eax
c00262bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c1:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00262c7:	b8 00 00 00 00       	mov    eax,0x0
c00262cc:	83 c4 0c             	add    esp,0xc
c00262cf:	c3                   	ret    

c00262d0 <PIT::close(int, int, void*)>:
c00262d0:	83 ec 0c             	sub    esp,0xc
c00262d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00262e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e5:	6a 01                	push   0x1
c00262e7:	68 56 62 02 c0       	push   0xc0026256
c00262ec:	6a 00                	push   0x0
c00262ee:	50                   	push   eax
c00262ef:	e8 ea d7 fe ff       	call   c0013ade <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00262f4:	83 c4 10             	add    esp,0x10
c00262f7:	b8 00 00 00 00       	mov    eax,0x0
c00262fc:	83 c4 0c             	add    esp,0xc
c00262ff:	c3                   	ret    

c0026300 <PIT::PIT()>:
c0026300:	83 ec 0c             	sub    esp,0xc
c0026303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026307:	83 ec 08             	sub    esp,0x8
c002630a:	68 48 c7 02 c0       	push   0xc002c748
c002630f:	50                   	push   eax
c0026310:	e8 3d 02 ff ff       	call   c0016552 <Timer::Timer(char const*)>
c0026315:	83 c4 10             	add    esp,0x10
c0026318:	ba 70 c7 02 c0       	mov    edx,0xc002c770
c002631d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026321:	89 10                	mov    DWORD PTR [eax],edx
c0026323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026327:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002632d:	0f b6 d0             	movzx  edx,al
c0026330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026334:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002633b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002633f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026345:	0f b6 d0             	movzx  edx,al
c0026348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026355:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002635b:	8d 50 01             	lea    edx,[eax+0x1]
c002635e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026362:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026368:	0f b6 d0             	movzx  edx,al
c002636b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002636f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026373:	83 e1 3f             	and    ecx,0x3f
c0026376:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002637a:	90                   	nop
c002637b:	83 c4 0c             	add    esp,0xc
c002637e:	c3                   	ret    
c002637f:	90                   	nop

c0026380 <avxDetect>:
c0026380:	b8 00 00 00 00       	mov    eax,0x0
c0026385:	c3                   	ret    

c0026386 <avxSave>:
c0026386:	c3                   	ret    

c0026387 <avxLoad>:
c0026387:	c3                   	ret    

c0026388 <avxInit>:
c0026388:	c3                   	ret    

c0026389 <avxClose>:
c0026389:	c3                   	ret    

c002638a <wouldSheSayYes>:
c002638a:	c3                   	ret    
c002638b:	49                   	dec    ecx
c002638c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026390:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026394:	75 20                	jne    c00263b6 <sseDetect.noSSE+0x1>
c0026396:	4e                   	dec    esi
c0026397:	79 61                	jns    c00263fa <x87Detect+0x14>
c0026399:	68 2e 2e 2e 00       	push   0x2e2e2e
c002639e:	66 90                	xchg   ax,ax

c00263a0 <absolutelyNoChanceInHell>:
c00263a0:	b8 01 00 00 00       	mov    eax,0x1
c00263a5:	0f a2                	cpuid  
c00263a7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00263ad:	74 06                	je     c00263b5 <sseDetect.noSSE>
c00263af:	b8 01 00 00 00       	mov    eax,0x1
c00263b4:	c3                   	ret    

c00263b5 <sseDetect.noSSE>:
c00263b5:	31 c0                	xor    eax,eax
c00263b7:	c3                   	ret    

c00263b8 <sseSave>:
c00263b8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00263bd:	c3                   	ret    

c00263be <sseLoad>:
c00263be:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00263c3:	c3                   	ret    

c00263c4 <sseInit>:
c00263c4:	e8 49 00 00 00       	call   c0026412 <x87Init>
c00263c9:	0f 20 e0             	mov    eax,cr4
c00263cc:	66 0d 00 06          	or     ax,0x600
c00263d0:	0f 22 e0             	mov    cr4,eax
c00263d3:	c3                   	ret    

c00263d4 <sseClose>:
c00263d4:	c3                   	ret    
c00263d5:	66 90                	xchg   ax,ax
c00263d7:	66 90                	xchg   ax,ax
c00263d9:	66 90                	xchg   ax,ax
c00263db:	66 90                	xchg   ax,ax
c00263dd:	66 90                	xchg   ax,ax
c00263df:	90                   	nop

c00263e0 <value_37F>:
c00263e0:	7f 03                	jg     c00263e5 <value_37A+0x1>

c00263e2 <value_37E>:
c00263e2:	7e 03                	jle    c00263e7 <x87Detect+0x1>

c00263e4 <value_37A>:
c00263e4:	7a 03                	jp     c00263e9 <x87Detect+0x3>

c00263e6 <x87Detect>:
c00263e6:	b8 01 00 00 00       	mov    eax,0x1
c00263eb:	0f a2                	cpuid  
c00263ed:	f7 c2 01 00 00 00    	test   edx,0x1
c00263f3:	74 06                	je     c00263fb <x87Detect.nox87>
c00263f5:	b8 01 00 00 00       	mov    eax,0x1
c00263fa:	c3                   	ret    

c00263fb <x87Detect.nox87>:
c00263fb:	b8 00 00 00 00       	mov    eax,0x0
c0026400:	c3                   	ret    

c0026401 <x87Save>:
c0026401:	55                   	push   ebp
c0026402:	89 e5                	mov    ebp,esp
c0026404:	9b dd 75 08          	fsave  [ebp+0x8]
c0026408:	c9                   	leave  
c0026409:	c3                   	ret    

c002640a <x87Load>:
c002640a:	55                   	push   ebp
c002640b:	89 e5                	mov    ebp,esp
c002640d:	dd 65 08             	frstor [ebp+0x8]
c0026410:	c9                   	leave  
c0026411:	c3                   	ret    

c0026412 <x87Init>:
c0026412:	9b db e3             	finit  
c0026415:	0f 20 c0             	mov    eax,cr0
c0026418:	66 25 fb ff          	and    ax,0xfffb
c002641c:	66 0d 22 00          	or     ax,0x22
c0026420:	0f 22 c0             	mov    cr0,eax
c0026423:	0f 06                	clts   
c0026425:	d9 2d e4 63 02 c0    	fldcw  WORD PTR ds:0xc00263e4
c002642b:	c3                   	ret    

c002642c <x87Close>:
c002642c:	c3                   	ret    
c002642d:	66 90                	xchg   ax,ax
c002642f:	90                   	nop

c0026430 <__do_global_ctors_aux>:
c0026430:	a1 24 90 02 c0       	mov    eax,ds:0xc0029024
c0026435:	83 f8 ff             	cmp    eax,0xffffffff
c0026438:	74 1a                	je     c0026454 <__do_global_ctors_aux+0x24>
c002643a:	55                   	push   ebp
c002643b:	89 e5                	mov    ebp,esp
c002643d:	53                   	push   ebx
c002643e:	52                   	push   edx
c002643f:	bb 24 90 02 c0       	mov    ebx,0xc0029024
c0026444:	ff d0                	call   eax
c0026446:	83 eb 04             	sub    ebx,0x4
c0026449:	8b 03                	mov    eax,DWORD PTR [ebx]
c002644b:	83 f8 ff             	cmp    eax,0xffffffff
c002644e:	75 f4                	jne    c0026444 <__do_global_ctors_aux+0x14>
c0026450:	58                   	pop    eax
c0026451:	5b                   	pop    ebx
c0026452:	5d                   	pop    ebp
c0026453:	c3                   	ret    
c0026454:	c3                   	ret    
c0026455:	66 90                	xchg   ax,ax
c0026457:	90                   	nop

c0026458 <__divdi3>:
c0026458:	55                   	push   ebp
c0026459:	57                   	push   edi
c002645a:	56                   	push   esi
c002645b:	53                   	push   ebx
c002645c:	83 ec 1c             	sub    esp,0x1c
c002645f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026463:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026467:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002646a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002646e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026472:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026476:	85 db                	test   ebx,ebx
c0026478:	0f 88 8e 00 00 00    	js     c002650c <__divdi3+0xb4>
c002647e:	89 dd                	mov    ebp,ebx
c0026480:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026488:	89 d3                	mov    ebx,edx
c002648a:	85 d2                	test   edx,edx
c002648c:	79 0d                	jns    c002649b <__divdi3+0x43>
c002648e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026492:	f7 d8                	neg    eax
c0026494:	83 d2 00             	adc    edx,0x0
c0026497:	f7 da                	neg    edx
c0026499:	89 d3                	mov    ebx,edx
c002649b:	89 c7                	mov    edi,eax
c002649d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264a0:	85 db                	test   ebx,ebx
c00264a2:	75 48                	jne    c00264ec <__divdi3+0x94>
c00264a4:	39 ef                	cmp    edi,ebp
c00264a6:	76 24                	jbe    c00264cc <__divdi3+0x74>
c00264a8:	89 ea                	mov    edx,ebp
c00264aa:	f7 f7                	div    edi
c00264ac:	89 c1                	mov    ecx,eax
c00264ae:	31 f6                	xor    esi,esi
c00264b0:	89 c8                	mov    eax,ecx
c00264b2:	89 f2                	mov    edx,esi
c00264b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00264b8:	85 c9                	test   ecx,ecx
c00264ba:	74 07                	je     c00264c3 <__divdi3+0x6b>
c00264bc:	f7 d8                	neg    eax
c00264be:	83 d2 00             	adc    edx,0x0
c00264c1:	f7 da                	neg    edx
c00264c3:	83 c4 1c             	add    esp,0x1c
c00264c6:	5b                   	pop    ebx
c00264c7:	5e                   	pop    esi
c00264c8:	5f                   	pop    edi
c00264c9:	5d                   	pop    ebp
c00264ca:	c3                   	ret    
c00264cb:	90                   	nop
c00264cc:	85 ff                	test   edi,edi
c00264ce:	75 0b                	jne    c00264db <__divdi3+0x83>
c00264d0:	b8 01 00 00 00       	mov    eax,0x1
c00264d5:	31 d2                	xor    edx,edx
c00264d7:	f7 f3                	div    ebx
c00264d9:	89 c7                	mov    edi,eax
c00264db:	31 d2                	xor    edx,edx
c00264dd:	89 e8                	mov    eax,ebp
c00264df:	f7 f7                	div    edi
c00264e1:	89 c6                	mov    esi,eax
c00264e3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264e6:	f7 f7                	div    edi
c00264e8:	89 c1                	mov    ecx,eax
c00264ea:	eb c4                	jmp    c00264b0 <__divdi3+0x58>
c00264ec:	39 eb                	cmp    ebx,ebp
c00264ee:	77 3c                	ja     c002652c <__divdi3+0xd4>
c00264f0:	0f bd f3             	bsr    esi,ebx
c00264f3:	83 f6 1f             	xor    esi,0x1f
c00264f6:	75 40                	jne    c0026538 <__divdi3+0xe0>
c00264f8:	39 eb                	cmp    ebx,ebp
c00264fa:	72 09                	jb     c0026505 <__divdi3+0xad>
c00264fc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00264ff:	0f 87 97 00 00 00    	ja     c002659c <__divdi3+0x144>
c0026505:	b9 01 00 00 00       	mov    ecx,0x1
c002650a:	eb a4                	jmp    c00264b0 <__divdi3+0x58>
c002650c:	f7 d9                	neg    ecx
c002650e:	83 d3 00             	adc    ebx,0x0
c0026511:	f7 db                	neg    ebx
c0026513:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026516:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002651a:	89 dd                	mov    ebp,ebx
c002651c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026524:	e9 5f ff ff ff       	jmp    c0026488 <__divdi3+0x30>
c0026529:	8d 76 00             	lea    esi,[esi+0x0]
c002652c:	31 f6                	xor    esi,esi
c002652e:	31 c9                	xor    ecx,ecx
c0026530:	e9 7b ff ff ff       	jmp    c00264b0 <__divdi3+0x58>
c0026535:	8d 76 00             	lea    esi,[esi+0x0]
c0026538:	b8 20 00 00 00       	mov    eax,0x20
c002653d:	29 f0                	sub    eax,esi
c002653f:	89 f1                	mov    ecx,esi
c0026541:	d3 e3                	shl    ebx,cl
c0026543:	89 fa                	mov    edx,edi
c0026545:	88 c1                	mov    cl,al
c0026547:	d3 ea                	shr    edx,cl
c0026549:	09 da                	or     edx,ebx
c002654b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002654f:	89 f1                	mov    ecx,esi
c0026551:	d3 e7                	shl    edi,cl
c0026553:	89 eb                	mov    ebx,ebp
c0026555:	88 c1                	mov    cl,al
c0026557:	d3 eb                	shr    ebx,cl
c0026559:	89 f1                	mov    ecx,esi
c002655b:	d3 e5                	shl    ebp,cl
c002655d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026560:	88 c1                	mov    cl,al
c0026562:	d3 ea                	shr    edx,cl
c0026564:	09 d5                	or     ebp,edx
c0026566:	89 e8                	mov    eax,ebp
c0026568:	89 da                	mov    edx,ebx
c002656a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002656e:	89 d3                	mov    ebx,edx
c0026570:	89 c5                	mov    ebp,eax
c0026572:	f7 e7                	mul    edi
c0026574:	39 d3                	cmp    ebx,edx
c0026576:	72 18                	jb     c0026590 <__divdi3+0x138>
c0026578:	74 0a                	je     c0026584 <__divdi3+0x12c>
c002657a:	89 e9                	mov    ecx,ebp
c002657c:	31 f6                	xor    esi,esi
c002657e:	e9 2d ff ff ff       	jmp    c00264b0 <__divdi3+0x58>
c0026583:	90                   	nop
c0026584:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026587:	89 f1                	mov    ecx,esi
c0026589:	d3 e7                	shl    edi,cl
c002658b:	39 c7                	cmp    edi,eax
c002658d:	73 eb                	jae    c002657a <__divdi3+0x122>
c002658f:	90                   	nop
c0026590:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026593:	31 f6                	xor    esi,esi
c0026595:	e9 16 ff ff ff       	jmp    c00264b0 <__divdi3+0x58>
c002659a:	66 90                	xchg   ax,ax
c002659c:	31 c9                	xor    ecx,ecx
c002659e:	e9 0d ff ff ff       	jmp    c00264b0 <__divdi3+0x58>
c00265a3:	90                   	nop

c00265a4 <__moddi3>:
c00265a4:	55                   	push   ebp
c00265a5:	57                   	push   edi
c00265a6:	56                   	push   esi
c00265a7:	53                   	push   ebx
c00265a8:	83 ec 2c             	sub    esp,0x2c
c00265ab:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00265af:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00265b3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00265b7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00265bb:	85 db                	test   ebx,ebx
c00265bd:	0f 88 85 00 00 00    	js     c0026648 <__moddi3+0xa4>
c00265c3:	89 de                	mov    esi,ebx
c00265c5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00265cd:	89 d7                	mov    edi,edx
c00265cf:	85 d2                	test   edx,edx
c00265d1:	79 09                	jns    c00265dc <__moddi3+0x38>
c00265d3:	f7 d8                	neg    eax
c00265d5:	83 d2 00             	adc    edx,0x0
c00265d8:	f7 da                	neg    edx
c00265da:	89 d7                	mov    edi,edx
c00265dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265e0:	89 cd                	mov    ebp,ecx
c00265e2:	85 ff                	test   edi,edi
c00265e4:	75 52                	jne    c0026638 <__moddi3+0x94>
c00265e6:	89 c3                	mov    ebx,eax
c00265e8:	39 f0                	cmp    eax,esi
c00265ea:	76 24                	jbe    c0026610 <__moddi3+0x6c>
c00265ec:	89 c8                	mov    eax,ecx
c00265ee:	89 f2                	mov    edx,esi
c00265f0:	f7 f3                	div    ebx
c00265f2:	89 d6                	mov    esi,edx
c00265f4:	89 f0                	mov    eax,esi
c00265f6:	31 d2                	xor    edx,edx
c00265f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265fc:	85 c9                	test   ecx,ecx
c00265fe:	74 07                	je     c0026607 <__moddi3+0x63>
c0026600:	f7 d8                	neg    eax
c0026602:	83 d2 00             	adc    edx,0x0
c0026605:	f7 da                	neg    edx
c0026607:	83 c4 2c             	add    esp,0x2c
c002660a:	5b                   	pop    ebx
c002660b:	5e                   	pop    esi
c002660c:	5f                   	pop    edi
c002660d:	5d                   	pop    ebp
c002660e:	c3                   	ret    
c002660f:	90                   	nop
c0026610:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026614:	85 db                	test   ebx,ebx
c0026616:	75 0d                	jne    c0026625 <__moddi3+0x81>
c0026618:	b8 01 00 00 00       	mov    eax,0x1
c002661d:	31 d2                	xor    edx,edx
c002661f:	f7 f7                	div    edi
c0026621:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026625:	89 f0                	mov    eax,esi
c0026627:	31 d2                	xor    edx,edx
c0026629:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002662d:	f7 f7                	div    edi
c002662f:	89 e8                	mov    eax,ebp
c0026631:	f7 f7                	div    edi
c0026633:	89 d6                	mov    esi,edx
c0026635:	eb bd                	jmp    c00265f4 <__moddi3+0x50>
c0026637:	90                   	nop
c0026638:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002663c:	39 f7                	cmp    edi,esi
c002663e:	76 20                	jbe    c0026660 <__moddi3+0xbc>
c0026640:	89 c8                	mov    eax,ecx
c0026642:	89 f2                	mov    edx,esi
c0026644:	eb b2                	jmp    c00265f8 <__moddi3+0x54>
c0026646:	66 90                	xchg   ax,ax
c0026648:	f7 d9                	neg    ecx
c002664a:	83 d3 00             	adc    ebx,0x0
c002664d:	f7 db                	neg    ebx
c002664f:	89 de                	mov    esi,ebx
c0026651:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026659:	e9 6f ff ff ff       	jmp    c00265cd <__moddi3+0x29>
c002665e:	66 90                	xchg   ax,ax
c0026660:	0f bd c7             	bsr    eax,edi
c0026663:	83 f0 1f             	xor    eax,0x1f
c0026666:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002666a:	75 24                	jne    c0026690 <__moddi3+0xec>
c002666c:	39 f7                	cmp    edi,esi
c002666e:	72 06                	jb     c0026676 <__moddi3+0xd2>
c0026670:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026674:	77 0c                	ja     c0026682 <__moddi3+0xde>
c0026676:	89 e9                	mov    ecx,ebp
c0026678:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002667c:	19 fe                	sbb    esi,edi
c002667e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026682:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026686:	89 f2                	mov    edx,esi
c0026688:	e9 6b ff ff ff       	jmp    c00265f8 <__moddi3+0x54>
c002668d:	8d 76 00             	lea    esi,[esi+0x0]
c0026690:	b8 20 00 00 00       	mov    eax,0x20
c0026695:	89 c2                	mov    edx,eax
c0026697:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002669b:	29 da                	sub    edx,ebx
c002669d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00266a1:	88 d9                	mov    cl,bl
c00266a3:	d3 e7                	shl    edi,cl
c00266a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00266a9:	88 d1                	mov    cl,dl
c00266ab:	d3 e8                	shr    eax,cl
c00266ad:	09 c7                	or     edi,eax
c00266af:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00266b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00266b7:	89 d8                	mov    eax,ebx
c00266b9:	88 d9                	mov    cl,bl
c00266bb:	d3 e7                	shl    edi,cl
c00266bd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266c1:	89 f3                	mov    ebx,esi
c00266c3:	88 d1                	mov    cl,dl
c00266c5:	d3 eb                	shr    ebx,cl
c00266c7:	89 c7                	mov    edi,eax
c00266c9:	88 c1                	mov    cl,al
c00266cb:	d3 e6                	shl    esi,cl
c00266cd:	89 e8                	mov    eax,ebp
c00266cf:	88 d1                	mov    cl,dl
c00266d1:	d3 e8                	shr    eax,cl
c00266d3:	09 f0                	or     eax,esi
c00266d5:	89 f9                	mov    ecx,edi
c00266d7:	d3 e5                	shl    ebp,cl
c00266d9:	89 da                	mov    edx,ebx
c00266db:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00266df:	89 d3                	mov    ebx,edx
c00266e1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266e5:	89 c6                	mov    esi,eax
c00266e7:	89 d1                	mov    ecx,edx
c00266e9:	39 d3                	cmp    ebx,edx
c00266eb:	72 27                	jb     c0026714 <__moddi3+0x170>
c00266ed:	74 21                	je     c0026710 <__moddi3+0x16c>
c00266ef:	29 f5                	sub    ebp,esi
c00266f1:	19 cb                	sbb    ebx,ecx
c00266f3:	89 de                	mov    esi,ebx
c00266f5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00266f9:	d3 e6                	shl    esi,cl
c00266fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00266ff:	89 f9                	mov    ecx,edi
c0026701:	d3 ed                	shr    ebp,cl
c0026703:	09 ee                	or     esi,ebp
c0026705:	89 f0                	mov    eax,esi
c0026707:	d3 eb                	shr    ebx,cl
c0026709:	89 da                	mov    edx,ebx
c002670b:	e9 e8 fe ff ff       	jmp    c00265f8 <__moddi3+0x54>
c0026710:	39 c5                	cmp    ebp,eax
c0026712:	73 db                	jae    c00266ef <__moddi3+0x14b>
c0026714:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026718:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002671c:	89 d1                	mov    ecx,edx
c002671e:	89 c6                	mov    esi,eax
c0026720:	eb cd                	jmp    c00266ef <__moddi3+0x14b>
c0026722:	66 90                	xchg   ax,ax

c0026724 <__udivdi3>:
c0026724:	55                   	push   ebp
c0026725:	57                   	push   edi
c0026726:	56                   	push   esi
c0026727:	53                   	push   ebx
c0026728:	83 ec 1c             	sub    esp,0x1c
c002672b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002672f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026733:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026737:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002673b:	85 d2                	test   edx,edx
c002673d:	75 41                	jne    c0026780 <__udivdi3+0x5c>
c002673f:	39 f7                	cmp    edi,esi
c0026741:	76 15                	jbe    c0026758 <__udivdi3+0x34>
c0026743:	89 e8                	mov    eax,ebp
c0026745:	89 f2                	mov    edx,esi
c0026747:	f7 f7                	div    edi
c0026749:	31 db                	xor    ebx,ebx
c002674b:	89 da                	mov    edx,ebx
c002674d:	83 c4 1c             	add    esp,0x1c
c0026750:	5b                   	pop    ebx
c0026751:	5e                   	pop    esi
c0026752:	5f                   	pop    edi
c0026753:	5d                   	pop    ebp
c0026754:	c3                   	ret    
c0026755:	8d 76 00             	lea    esi,[esi+0x0]
c0026758:	89 f9                	mov    ecx,edi
c002675a:	85 ff                	test   edi,edi
c002675c:	75 0b                	jne    c0026769 <__udivdi3+0x45>
c002675e:	b8 01 00 00 00       	mov    eax,0x1
c0026763:	31 d2                	xor    edx,edx
c0026765:	f7 f7                	div    edi
c0026767:	89 c1                	mov    ecx,eax
c0026769:	31 d2                	xor    edx,edx
c002676b:	89 f0                	mov    eax,esi
c002676d:	f7 f1                	div    ecx
c002676f:	89 c3                	mov    ebx,eax
c0026771:	89 e8                	mov    eax,ebp
c0026773:	f7 f1                	div    ecx
c0026775:	89 da                	mov    edx,ebx
c0026777:	83 c4 1c             	add    esp,0x1c
c002677a:	5b                   	pop    ebx
c002677b:	5e                   	pop    esi
c002677c:	5f                   	pop    edi
c002677d:	5d                   	pop    ebp
c002677e:	c3                   	ret    
c002677f:	90                   	nop
c0026780:	39 f2                	cmp    edx,esi
c0026782:	77 1c                	ja     c00267a0 <__udivdi3+0x7c>
c0026784:	0f bd da             	bsr    ebx,edx
c0026787:	83 f3 1f             	xor    ebx,0x1f
c002678a:	75 24                	jne    c00267b0 <__udivdi3+0x8c>
c002678c:	39 f2                	cmp    edx,esi
c002678e:	72 08                	jb     c0026798 <__udivdi3+0x74>
c0026790:	39 ef                	cmp    edi,ebp
c0026792:	0f 87 84 00 00 00    	ja     c002681c <__udivdi3+0xf8>
c0026798:	b8 01 00 00 00       	mov    eax,0x1
c002679d:	eb ac                	jmp    c002674b <__udivdi3+0x27>
c002679f:	90                   	nop
c00267a0:	31 db                	xor    ebx,ebx
c00267a2:	31 c0                	xor    eax,eax
c00267a4:	89 da                	mov    edx,ebx
c00267a6:	83 c4 1c             	add    esp,0x1c
c00267a9:	5b                   	pop    ebx
c00267aa:	5e                   	pop    esi
c00267ab:	5f                   	pop    edi
c00267ac:	5d                   	pop    ebp
c00267ad:	c3                   	ret    
c00267ae:	66 90                	xchg   ax,ax
c00267b0:	b8 20 00 00 00       	mov    eax,0x20
c00267b5:	29 d8                	sub    eax,ebx
c00267b7:	88 d9                	mov    cl,bl
c00267b9:	d3 e2                	shl    edx,cl
c00267bb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00267bf:	89 fa                	mov    edx,edi
c00267c1:	88 c1                	mov    cl,al
c00267c3:	d3 ea                	shr    edx,cl
c00267c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267c9:	09 d1                	or     ecx,edx
c00267cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267cf:	88 d9                	mov    cl,bl
c00267d1:	d3 e7                	shl    edi,cl
c00267d3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267d7:	89 f7                	mov    edi,esi
c00267d9:	88 c1                	mov    cl,al
c00267db:	d3 ef                	shr    edi,cl
c00267dd:	88 d9                	mov    cl,bl
c00267df:	d3 e6                	shl    esi,cl
c00267e1:	89 ea                	mov    edx,ebp
c00267e3:	88 c1                	mov    cl,al
c00267e5:	d3 ea                	shr    edx,cl
c00267e7:	09 d6                	or     esi,edx
c00267e9:	89 f0                	mov    eax,esi
c00267eb:	89 fa                	mov    edx,edi
c00267ed:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00267f1:	89 d7                	mov    edi,edx
c00267f3:	89 c6                	mov    esi,eax
c00267f5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267f9:	39 d7                	cmp    edi,edx
c00267fb:	72 13                	jb     c0026810 <__udivdi3+0xec>
c00267fd:	74 09                	je     c0026808 <__udivdi3+0xe4>
c00267ff:	89 f0                	mov    eax,esi
c0026801:	31 db                	xor    ebx,ebx
c0026803:	e9 43 ff ff ff       	jmp    c002674b <__udivdi3+0x27>
c0026808:	88 d9                	mov    cl,bl
c002680a:	d3 e5                	shl    ebp,cl
c002680c:	39 c5                	cmp    ebp,eax
c002680e:	73 ef                	jae    c00267ff <__udivdi3+0xdb>
c0026810:	8d 46 ff             	lea    eax,[esi-0x1]
c0026813:	31 db                	xor    ebx,ebx
c0026815:	e9 31 ff ff ff       	jmp    c002674b <__udivdi3+0x27>
c002681a:	66 90                	xchg   ax,ax
c002681c:	31 c0                	xor    eax,eax
c002681e:	e9 28 ff ff ff       	jmp    c002674b <__udivdi3+0x27>
c0026823:	90                   	nop

c0026824 <__umoddi3>:
c0026824:	55                   	push   ebp
c0026825:	57                   	push   edi
c0026826:	56                   	push   esi
c0026827:	53                   	push   ebx
c0026828:	83 ec 1c             	sub    esp,0x1c
c002682b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002682f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026833:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026837:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002683b:	89 da                	mov    edx,ebx
c002683d:	85 c0                	test   eax,eax
c002683f:	75 37                	jne    c0026878 <__umoddi3+0x54>
c0026841:	39 df                	cmp    edi,ebx
c0026843:	76 13                	jbe    c0026858 <__umoddi3+0x34>
c0026845:	89 f0                	mov    eax,esi
c0026847:	f7 f7                	div    edi
c0026849:	89 d0                	mov    eax,edx
c002684b:	31 d2                	xor    edx,edx
c002684d:	83 c4 1c             	add    esp,0x1c
c0026850:	5b                   	pop    ebx
c0026851:	5e                   	pop    esi
c0026852:	5f                   	pop    edi
c0026853:	5d                   	pop    ebp
c0026854:	c3                   	ret    
c0026855:	8d 76 00             	lea    esi,[esi+0x0]
c0026858:	89 fd                	mov    ebp,edi
c002685a:	85 ff                	test   edi,edi
c002685c:	75 0b                	jne    c0026869 <__umoddi3+0x45>
c002685e:	b8 01 00 00 00       	mov    eax,0x1
c0026863:	31 d2                	xor    edx,edx
c0026865:	f7 f7                	div    edi
c0026867:	89 c5                	mov    ebp,eax
c0026869:	89 d8                	mov    eax,ebx
c002686b:	31 d2                	xor    edx,edx
c002686d:	f7 f5                	div    ebp
c002686f:	89 f0                	mov    eax,esi
c0026871:	f7 f5                	div    ebp
c0026873:	89 d0                	mov    eax,edx
c0026875:	eb d4                	jmp    c002684b <__umoddi3+0x27>
c0026877:	90                   	nop
c0026878:	89 f1                	mov    ecx,esi
c002687a:	39 d8                	cmp    eax,ebx
c002687c:	76 0a                	jbe    c0026888 <__umoddi3+0x64>
c002687e:	89 f0                	mov    eax,esi
c0026880:	83 c4 1c             	add    esp,0x1c
c0026883:	5b                   	pop    ebx
c0026884:	5e                   	pop    esi
c0026885:	5f                   	pop    edi
c0026886:	5d                   	pop    ebp
c0026887:	c3                   	ret    
c0026888:	0f bd e8             	bsr    ebp,eax
c002688b:	83 f5 1f             	xor    ebp,0x1f
c002688e:	75 1c                	jne    c00268ac <__umoddi3+0x88>
c0026890:	39 d8                	cmp    eax,ebx
c0026892:	72 04                	jb     c0026898 <__umoddi3+0x74>
c0026894:	39 f7                	cmp    edi,esi
c0026896:	77 08                	ja     c00268a0 <__umoddi3+0x7c>
c0026898:	89 da                	mov    edx,ebx
c002689a:	29 fe                	sub    esi,edi
c002689c:	19 c2                	sbb    edx,eax
c002689e:	89 f1                	mov    ecx,esi
c00268a0:	89 c8                	mov    eax,ecx
c00268a2:	83 c4 1c             	add    esp,0x1c
c00268a5:	5b                   	pop    ebx
c00268a6:	5e                   	pop    esi
c00268a7:	5f                   	pop    edi
c00268a8:	5d                   	pop    ebp
c00268a9:	c3                   	ret    
c00268aa:	66 90                	xchg   ax,ax
c00268ac:	ba 20 00 00 00       	mov    edx,0x20
c00268b1:	29 ea                	sub    edx,ebp
c00268b3:	89 e9                	mov    ecx,ebp
c00268b5:	d3 e0                	shl    eax,cl
c00268b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00268bb:	89 f8                	mov    eax,edi
c00268bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00268c1:	88 d1                	mov    cl,dl
c00268c3:	d3 e8                	shr    eax,cl
c00268c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00268c9:	09 c1                	or     ecx,eax
c00268cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00268cf:	89 e9                	mov    ecx,ebp
c00268d1:	d3 e7                	shl    edi,cl
c00268d3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00268d7:	89 d8                	mov    eax,ebx
c00268d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00268dd:	88 d1                	mov    cl,dl
c00268df:	d3 e8                	shr    eax,cl
c00268e1:	89 c7                	mov    edi,eax
c00268e3:	89 e9                	mov    ecx,ebp
c00268e5:	d3 e3                	shl    ebx,cl
c00268e7:	89 f0                	mov    eax,esi
c00268e9:	88 d1                	mov    cl,dl
c00268eb:	d3 e8                	shr    eax,cl
c00268ed:	09 d8                	or     eax,ebx
c00268ef:	89 e9                	mov    ecx,ebp
c00268f1:	d3 e6                	shl    esi,cl
c00268f3:	89 f3                	mov    ebx,esi
c00268f5:	89 fa                	mov    edx,edi
c00268f7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00268fb:	89 d1                	mov    ecx,edx
c00268fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026901:	89 c6                	mov    esi,eax
c0026903:	89 d7                	mov    edi,edx
c0026905:	39 d1                	cmp    ecx,edx
c0026907:	72 27                	jb     c0026930 <__umoddi3+0x10c>
c0026909:	74 21                	je     c002692c <__umoddi3+0x108>
c002690b:	89 ca                	mov    edx,ecx
c002690d:	29 f3                	sub    ebx,esi
c002690f:	19 fa                	sbb    edx,edi
c0026911:	89 d0                	mov    eax,edx
c0026913:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026917:	d3 e0                	shl    eax,cl
c0026919:	89 e9                	mov    ecx,ebp
c002691b:	d3 eb                	shr    ebx,cl
c002691d:	09 d8                	or     eax,ebx
c002691f:	d3 ea                	shr    edx,cl
c0026921:	83 c4 1c             	add    esp,0x1c
c0026924:	5b                   	pop    ebx
c0026925:	5e                   	pop    esi
c0026926:	5f                   	pop    edi
c0026927:	5d                   	pop    ebp
c0026928:	c3                   	ret    
c0026929:	8d 76 00             	lea    esi,[esi+0x0]
c002692c:	39 c3                	cmp    ebx,eax
c002692e:	73 db                	jae    c002690b <__umoddi3+0xe7>
c0026930:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026934:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026938:	89 d7                	mov    edi,edx
c002693a:	89 c6                	mov    esi,eax
c002693c:	eb cd                	jmp    c002690b <__umoddi3+0xe7>

c002693e <__addsf3>:
c002693e:	55                   	push   ebp
c002693f:	89 e5                	mov    ebp,esp
c0026941:	57                   	push   edi
c0026942:	56                   	push   esi
c0026943:	53                   	push   ebx
c0026944:	83 ec 08             	sub    esp,0x8
c0026947:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002694a:	89 fa                	mov    edx,edi
c002694c:	89 f8                	mov    eax,edi
c002694e:	c1 f8 17             	sar    eax,0x17
c0026951:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026954:	c1 e2 08             	shl    edx,0x8
c0026957:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002695d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026960:	89 de                	mov    esi,ebx
c0026962:	c1 fe 17             	sar    esi,0x17
c0026965:	c1 e3 08             	shl    ebx,0x8
c0026968:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002696e:	31 f0                	xor    eax,esi
c0026970:	0f 88 3b 01 00 00    	js     c0026ab1 <__addsf3+0x173>
c0026976:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026979:	29 f1                	sub    ecx,esi
c002697b:	85 c9                	test   ecx,ecx
c002697d:	7e 54                	jle    c00269d3 <__addsf3+0x95>
c002697f:	89 f0                	mov    eax,esi
c0026981:	84 c0                	test   al,al
c0026983:	75 10                	jne    c0026995 <__addsf3+0x57>
c0026985:	85 db                	test   ebx,ebx
c0026987:	0f 84 aa 02 00 00    	je     c0026c37 <__addsf3+0x2f9>
c002698d:	49                   	dec    ecx
c002698e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026991:	74 38                	je     c00269cb <__addsf3+0x8d>
c0026993:	eb 13                	jmp    c00269a8 <__addsf3+0x6a>
c0026995:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026998:	f7 d0                	not    eax
c002699a:	84 c0                	test   al,al
c002699c:	0f 84 95 02 00 00    	je     c0026c37 <__addsf3+0x2f9>
c00269a2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00269a8:	83 f9 1f             	cmp    ecx,0x1f
c00269ab:	0f 8f 86 02 00 00    	jg     c0026c37 <__addsf3+0x2f9>
c00269b1:	89 de                	mov    esi,ebx
c00269b3:	d3 ee                	shr    esi,cl
c00269b5:	b8 20 00 00 00       	mov    eax,0x20
c00269ba:	29 c8                	sub    eax,ecx
c00269bc:	89 c1                	mov    ecx,eax
c00269be:	d3 e3                	shl    ebx,cl
c00269c0:	31 c0                	xor    eax,eax
c00269c2:	85 db                	test   ebx,ebx
c00269c4:	0f 95 c0             	setne  al
c00269c7:	09 f0                	or     eax,esi
c00269c9:	01 d0                	add    eax,edx
c00269cb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269ce:	e9 b6 00 00 00       	jmp    c0026a89 <__addsf3+0x14b>
c00269d3:	74 5c                	je     c0026a31 <__addsf3+0xf3>
c00269d5:	89 f1                	mov    ecx,esi
c00269d7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00269da:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269dd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00269e1:	75 14                	jne    c00269f7 <__addsf3+0xb9>
c00269e3:	85 d2                	test   edx,edx
c00269e5:	0f 84 4c 02 00 00    	je     c0026c37 <__addsf3+0x2f9>
c00269eb:	49                   	dec    ecx
c00269ec:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269ef:	0f 84 94 00 00 00    	je     c0026a89 <__addsf3+0x14b>
c00269f5:	eb 12                	jmp    c0026a09 <__addsf3+0xcb>
c00269f7:	89 f0                	mov    eax,esi
c00269f9:	f7 d0                	not    eax
c00269fb:	84 c0                	test   al,al
c00269fd:	0f 84 34 02 00 00    	je     c0026c37 <__addsf3+0x2f9>
c0026a03:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a09:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a0c:	83 f9 1f             	cmp    ecx,0x1f
c0026a0f:	0f 8f 22 02 00 00    	jg     c0026c37 <__addsf3+0x2f9>
c0026a15:	89 d7                	mov    edi,edx
c0026a17:	d3 ef                	shr    edi,cl
c0026a19:	b8 20 00 00 00       	mov    eax,0x20
c0026a1e:	29 c8                	sub    eax,ecx
c0026a20:	89 c1                	mov    ecx,eax
c0026a22:	d3 e2                	shl    edx,cl
c0026a24:	31 c0                	xor    eax,eax
c0026a26:	85 d2                	test   edx,edx
c0026a28:	0f 95 c0             	setne  al
c0026a2b:	09 f8                	or     eax,edi
c0026a2d:	01 d8                	add    eax,ebx
c0026a2f:	eb 58                	jmp    c0026a89 <__addsf3+0x14b>
c0026a31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a34:	8d 70 01             	lea    esi,[eax+0x1]
c0026a37:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026a3d:	75 32                	jne    c0026a71 <__addsf3+0x133>
c0026a3f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a43:	75 1f                	jne    c0026a64 <__addsf3+0x126>
c0026a45:	85 d2                	test   edx,edx
c0026a47:	0f 84 e0 01 00 00    	je     c0026c2d <__addsf3+0x2ef>
c0026a4d:	85 db                	test   ebx,ebx
c0026a4f:	0f 84 e2 01 00 00    	je     c0026c37 <__addsf3+0x2f9>
c0026a55:	89 d0                	mov    eax,edx
c0026a57:	01 d8                	add    eax,ebx
c0026a59:	0f 89 a9 01 00 00    	jns    c0026c08 <__addsf3+0x2ca>
c0026a5f:	e9 9d 01 00 00       	jmp    c0026c01 <__addsf3+0x2c3>
c0026a64:	85 d2                	test   edx,edx
c0026a66:	0f 85 cb 01 00 00    	jne    c0026c37 <__addsf3+0x2f9>
c0026a6c:	e9 bc 01 00 00       	jmp    c0026c2d <__addsf3+0x2ef>
c0026a71:	31 c0                	xor    eax,eax
c0026a73:	89 f1                	mov    ecx,esi
c0026a75:	f7 d1                	not    ecx
c0026a77:	84 c9                	test   cl,cl
c0026a79:	0f 84 90 01 00 00    	je     c0026c0f <__addsf3+0x2d1>
c0026a7f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a82:	d1 e8                	shr    eax,1
c0026a84:	e9 86 01 00 00       	jmp    c0026c0f <__addsf3+0x2d1>
c0026a89:	85 c0                	test   eax,eax
c0026a8b:	0f 89 7e 01 00 00    	jns    c0026c0f <__addsf3+0x2d1>
c0026a91:	46                   	inc    esi
c0026a92:	89 f2                	mov    edx,esi
c0026a94:	f7 d2                	not    edx
c0026a96:	84 d2                	test   dl,dl
c0026a98:	0f 84 6f 01 00 00    	je     c0026c0d <__addsf3+0x2cf>
c0026a9e:	89 c2                	mov    edx,eax
c0026aa0:	83 e2 01             	and    edx,0x1
c0026aa3:	d1 e8                	shr    eax,1
c0026aa5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026aaa:	09 d0                	or     eax,edx
c0026aac:	e9 5e 01 00 00       	jmp    c0026c0f <__addsf3+0x2d1>
c0026ab1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026ab5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026ab8:	89 f0                	mov    eax,esi
c0026aba:	0f b6 c0             	movzx  eax,al
c0026abd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ac0:	29 c1                	sub    ecx,eax
c0026ac2:	85 c9                	test   ecx,ecx
c0026ac4:	7e 55                	jle    c0026b1b <__addsf3+0x1dd>
c0026ac6:	85 c0                	test   eax,eax
c0026ac8:	75 11                	jne    c0026adb <__addsf3+0x19d>
c0026aca:	85 db                	test   ebx,ebx
c0026acc:	0f 84 65 01 00 00    	je     c0026c37 <__addsf3+0x2f9>
c0026ad2:	49                   	dec    ecx
c0026ad3:	75 19                	jne    c0026aee <__addsf3+0x1b0>
c0026ad5:	89 d0                	mov    eax,edx
c0026ad7:	29 d8                	sub    eax,ebx
c0026ad9:	eb 38                	jmp    c0026b13 <__addsf3+0x1d5>
c0026adb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ade:	f7 d0                	not    eax
c0026ae0:	84 c0                	test   al,al
c0026ae2:	0f 84 4f 01 00 00    	je     c0026c37 <__addsf3+0x2f9>
c0026ae8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026aee:	83 f9 1f             	cmp    ecx,0x1f
c0026af1:	0f 8f 40 01 00 00    	jg     c0026c37 <__addsf3+0x2f9>
c0026af7:	89 de                	mov    esi,ebx
c0026af9:	d3 ee                	shr    esi,cl
c0026afb:	b8 20 00 00 00       	mov    eax,0x20
c0026b00:	29 c8                	sub    eax,ecx
c0026b02:	89 c1                	mov    ecx,eax
c0026b04:	d3 e3                	shl    ebx,cl
c0026b06:	31 c0                	xor    eax,eax
c0026b08:	85 db                	test   ebx,ebx
c0026b0a:	0f 95 c0             	setne  al
c0026b0d:	09 f0                	or     eax,esi
c0026b0f:	29 c2                	sub    edx,eax
c0026b11:	89 d0                	mov    eax,edx
c0026b13:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b16:	e9 af 00 00 00       	jmp    c0026bca <__addsf3+0x28c>
c0026b1b:	74 5c                	je     c0026b79 <__addsf3+0x23b>
c0026b1d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026b20:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b23:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b27:	75 14                	jne    c0026b3d <__addsf3+0x1ff>
c0026b29:	85 d2                	test   edx,edx
c0026b2b:	0f 84 06 01 00 00    	je     c0026c37 <__addsf3+0x2f9>
c0026b31:	48                   	dec    eax
c0026b32:	75 1b                	jne    c0026b4f <__addsf3+0x211>
c0026b34:	89 d8                	mov    eax,ebx
c0026b36:	29 d0                	sub    eax,edx
c0026b38:	e9 8d 00 00 00       	jmp    c0026bca <__addsf3+0x28c>
c0026b3d:	89 f1                	mov    ecx,esi
c0026b3f:	f7 d1                	not    ecx
c0026b41:	84 c9                	test   cl,cl
c0026b43:	0f 84 ee 00 00 00    	je     c0026c37 <__addsf3+0x2f9>
c0026b49:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b4f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b52:	83 f8 1f             	cmp    eax,0x1f
c0026b55:	0f 8f dc 00 00 00    	jg     c0026c37 <__addsf3+0x2f9>
c0026b5b:	89 d7                	mov    edi,edx
c0026b5d:	88 c1                	mov    cl,al
c0026b5f:	d3 ef                	shr    edi,cl
c0026b61:	b9 20 00 00 00       	mov    ecx,0x20
c0026b66:	29 c1                	sub    ecx,eax
c0026b68:	d3 e2                	shl    edx,cl
c0026b6a:	31 c0                	xor    eax,eax
c0026b6c:	85 d2                	test   edx,edx
c0026b6e:	0f 95 c0             	setne  al
c0026b71:	09 f8                	or     eax,edi
c0026b73:	29 c3                	sub    ebx,eax
c0026b75:	89 d8                	mov    eax,ebx
c0026b77:	eb 51                	jmp    c0026bca <__addsf3+0x28c>
c0026b79:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b7c:	40                   	inc    eax
c0026b7d:	a8 fe                	test   al,0xfe
c0026b7f:	75 3d                	jne    c0026bbe <__addsf3+0x280>
c0026b81:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b85:	0f 85 a7 00 00 00    	jne    c0026c32 <__addsf3+0x2f4>
c0026b8b:	85 d2                	test   edx,edx
c0026b8d:	75 12                	jne    c0026ba1 <__addsf3+0x263>
c0026b8f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b92:	85 db                	test   ebx,ebx
c0026b94:	0f 85 9d 00 00 00    	jne    c0026c37 <__addsf3+0x2f9>
c0026b9a:	31 ff                	xor    edi,edi
c0026b9c:	e9 96 00 00 00       	jmp    c0026c37 <__addsf3+0x2f9>
c0026ba1:	85 db                	test   ebx,ebx
c0026ba3:	0f 84 8e 00 00 00    	je     c0026c37 <__addsf3+0x2f9>
c0026ba9:	89 d0                	mov    eax,edx
c0026bab:	29 d8                	sub    eax,ebx
c0026bad:	79 06                	jns    c0026bb5 <__addsf3+0x277>
c0026baf:	89 d8                	mov    eax,ebx
c0026bb1:	29 d0                	sub    eax,edx
c0026bb3:	eb 5a                	jmp    c0026c0f <__addsf3+0x2d1>
c0026bb5:	bf 00 00 00 00       	mov    edi,0x0
c0026bba:	74 7b                	je     c0026c37 <__addsf3+0x2f9>
c0026bbc:	eb 4a                	jmp    c0026c08 <__addsf3+0x2ca>
c0026bbe:	89 d0                	mov    eax,edx
c0026bc0:	29 d8                	sub    eax,ebx
c0026bc2:	79 12                	jns    c0026bd6 <__addsf3+0x298>
c0026bc4:	89 d8                	mov    eax,ebx
c0026bc6:	29 d0                	sub    eax,edx
c0026bc8:	eb 09                	jmp    c0026bd3 <__addsf3+0x295>
c0026bca:	85 c0                	test   eax,eax
c0026bcc:	79 41                	jns    c0026c0f <__addsf3+0x2d1>
c0026bce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bd3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026bd6:	31 f6                	xor    esi,esi
c0026bd8:	85 c0                	test   eax,eax
c0026bda:	74 33                	je     c0026c0f <__addsf3+0x2d1>
c0026bdc:	0f bd c8             	bsr    ecx,eax
c0026bdf:	83 f1 1f             	xor    ecx,0x1f
c0026be2:	d3 e0                	shl    eax,cl
c0026be4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026be8:	39 ca                	cmp    edx,ecx
c0026bea:	7f 10                	jg     c0026bfc <__addsf3+0x2be>
c0026bec:	29 d1                	sub    ecx,edx
c0026bee:	41                   	inc    ecx
c0026bef:	d3 e8                	shr    eax,cl
c0026bf1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bf4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026bfa:	eb 13                	jmp    c0026c0f <__addsf3+0x2d1>
c0026bfc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bff:	29 ce                	sub    esi,ecx
c0026c01:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c06:	eb 07                	jmp    c0026c0f <__addsf3+0x2d1>
c0026c08:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c0b:	eb 02                	jmp    c0026c0f <__addsf3+0x2d1>
c0026c0d:	31 c0                	xor    eax,eax
c0026c0f:	89 c2                	mov    edx,eax
c0026c11:	c1 ea 08             	shr    edx,0x8
c0026c14:	a8 7f                	test   al,0x7f
c0026c16:	0f 95 c1             	setne  cl
c0026c19:	09 d1                	or     ecx,edx
c0026c1b:	83 e1 01             	and    ecx,0x1
c0026c1e:	c1 e8 07             	shr    eax,0x7
c0026c21:	21 c8                	and    eax,ecx
c0026c23:	c1 e6 17             	shl    esi,0x17
c0026c26:	09 d6                	or     esi,edx
c0026c28:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026c2b:	eb 0a                	jmp    c0026c37 <__addsf3+0x2f9>
c0026c2d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c30:	eb 05                	jmp    c0026c37 <__addsf3+0x2f9>
c0026c32:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026c37:	89 f8                	mov    eax,edi
c0026c39:	5a                   	pop    edx
c0026c3a:	59                   	pop    ecx
c0026c3b:	5b                   	pop    ebx
c0026c3c:	5e                   	pop    esi
c0026c3d:	5f                   	pop    edi
c0026c3e:	5d                   	pop    ebp
c0026c3f:	c3                   	ret    

c0026c40 <__subsf3>:
c0026c40:	55                   	push   ebp
c0026c41:	89 e5                	mov    ebp,esp
c0026c43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c46:	05 00 00 00 80       	add    eax,0x80000000
c0026c4b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026c4e:	5d                   	pop    ebp
c0026c4f:	e9 ea fc ff ff       	jmp    c002693e <__addsf3>

c0026c54 <__negsf2>:
c0026c54:	55                   	push   ebp
c0026c55:	89 e5                	mov    ebp,esp
c0026c57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c5a:	05 00 00 00 80       	add    eax,0x80000000
c0026c5f:	5d                   	pop    ebp
c0026c60:	c3                   	ret    

c0026c61 <__mulsf3>:
c0026c61:	55                   	push   ebp
c0026c62:	89 e5                	mov    ebp,esp
c0026c64:	57                   	push   edi
c0026c65:	56                   	push   esi
c0026c66:	53                   	push   ebx
c0026c67:	83 ec 1c             	sub    esp,0x1c
c0026c6a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026c6d:	89 f0                	mov    eax,esi
c0026c6f:	89 f1                	mov    ecx,esi
c0026c71:	c1 f9 17             	sar    ecx,0x17
c0026c74:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c77:	c1 e0 08             	shl    eax,0x8
c0026c7a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c7f:	89 c1                	mov    ecx,eax
c0026c81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c84:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c87:	89 c7                	mov    edi,eax
c0026c89:	c1 ff 17             	sar    edi,0x17
c0026c8c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c90:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c93:	89 f8                	mov    eax,edi
c0026c95:	0f b6 c0             	movzx  eax,al
c0026c98:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026c9b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026c9f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026ca2:	42                   	inc    edx
c0026ca3:	80 e2 fe             	and    dl,0xfe
c0026ca6:	75 7b                	jne    c0026d23 <__mulsf3+0xc2>
c0026ca8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026cac:	74 54                	je     c0026d02 <__mulsf3+0xa1>
c0026cae:	85 c9                	test   ecx,ecx
c0026cb0:	0f 85 64 01 00 00    	jne    c0026e1a <__mulsf3+0x1b9>
c0026cb6:	8d 57 01             	lea    edx,[edi+0x1]
c0026cb9:	80 e2 fe             	and    dl,0xfe
c0026cbc:	75 1f                	jne    c0026cdd <__mulsf3+0x7c>
c0026cbe:	85 c0                	test   eax,eax
c0026cc0:	b8 00 00 00 00       	mov    eax,0x0
c0026cc5:	74 29                	je     c0026cf0 <__mulsf3+0x8f>
c0026cc7:	53                   	push   ebx
c0026cc8:	53                   	push   ebx
c0026cc9:	50                   	push   eax
c0026cca:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ccd:	e8 96 05 00 00       	call   c0027268 <__nesf2>
c0026cd2:	83 c4 10             	add    esp,0x10
c0026cd5:	85 c0                	test   eax,eax
c0026cd7:	0f 85 3a 01 00 00    	jne    c0026e17 <__mulsf3+0x1b6>
c0026cdd:	85 ff                	test   edi,edi
c0026cdf:	0f 89 35 01 00 00    	jns    c0026e1a <__mulsf3+0x1b9>
c0026ce5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026ceb:	e9 2a 01 00 00       	jmp    c0026e1a <__mulsf3+0x1b9>
c0026cf0:	51                   	push   ecx
c0026cf1:	51                   	push   ecx
c0026cf2:	50                   	push   eax
c0026cf3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cf6:	e8 6d 05 00 00       	call   c0027268 <__nesf2>
c0026cfb:	83 c4 10             	add    esp,0x10
c0026cfe:	85 c0                	test   eax,eax
c0026d00:	eb 15                	jmp    c0026d17 <__mulsf3+0xb6>
c0026d02:	85 c9                	test   ecx,ecx
c0026d04:	74 0b                	je     c0026d11 <__mulsf3+0xb0>
c0026d06:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026d09:	01 c9                	add    ecx,ecx
c0026d0b:	78 16                	js     c0026d23 <__mulsf3+0xc2>
c0026d0d:	89 d3                	mov    ebx,edx
c0026d0f:	eb f5                	jmp    c0026d06 <__mulsf3+0xa5>
c0026d11:	89 f8                	mov    eax,edi
c0026d13:	f7 d0                	not    eax
c0026d15:	84 c0                	test   al,al
c0026d17:	75 c4                	jne    c0026cdd <__mulsf3+0x7c>
c0026d19:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026d1e:	e9 f7 00 00 00       	jmp    c0026e1a <__mulsf3+0x1b9>
c0026d23:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d26:	c1 e6 08             	shl    esi,0x8
c0026d29:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026d2f:	8d 57 01             	lea    edx,[edi+0x1]
c0026d32:	80 e2 fe             	and    dl,0xfe
c0026d35:	75 63                	jne    c0026d9a <__mulsf3+0x139>
c0026d37:	85 c0                	test   eax,eax
c0026d39:	74 2f                	je     c0026d6a <__mulsf3+0x109>
c0026d3b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d3f:	0f 89 d2 00 00 00    	jns    c0026e17 <__mulsf3+0x1b6>
c0026d45:	52                   	push   edx
c0026d46:	52                   	push   edx
c0026d47:	6a 00                	push   0x0
c0026d49:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d4c:	e8 dc 04 00 00       	call   c002722d <__eqsf2>
c0026d51:	83 c4 10             	add    esp,0x10
c0026d54:	85 c0                	test   eax,eax
c0026d56:	0f 85 bb 00 00 00    	jne    c0026e17 <__mulsf3+0x1b6>
c0026d5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d5f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026d65:	e9 b0 00 00 00       	jmp    c0026e1a <__mulsf3+0x1b9>
c0026d6a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d6d:	50                   	push   eax
c0026d6e:	50                   	push   eax
c0026d6f:	6a 00                	push   0x0
c0026d71:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d74:	e8 b4 04 00 00       	call   c002722d <__eqsf2>
c0026d79:	83 c4 10             	add    esp,0x10
c0026d7c:	85 c0                	test   eax,eax
c0026d7e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d81:	75 0c                	jne    c0026d8f <__mulsf3+0x12e>
c0026d83:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d87:	0f 89 8a 00 00 00    	jns    c0026e17 <__mulsf3+0x1b6>
c0026d8d:	eb cd                	jmp    c0026d5c <__mulsf3+0xfb>
c0026d8f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026d92:	01 f6                	add    esi,esi
c0026d94:	78 04                	js     c0026d9a <__mulsf3+0x139>
c0026d96:	89 c3                	mov    ebx,eax
c0026d98:	eb f5                	jmp    c0026d8f <__mulsf3+0x12e>
c0026d9a:	89 c8                	mov    eax,ecx
c0026d9c:	0d 00 00 00 80       	or     eax,0x80000000
c0026da1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026da7:	f7 e6                	mul    esi
c0026da9:	85 c0                	test   eax,eax
c0026dab:	0f 95 c0             	setne  al
c0026dae:	0f b6 c0             	movzx  eax,al
c0026db1:	09 c2                	or     edx,eax
c0026db3:	78 03                	js     c0026db8 <__mulsf3+0x157>
c0026db5:	01 d2                	add    edx,edx
c0026db7:	4b                   	dec    ebx
c0026db8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026dbe:	7f 22                	jg     c0026de2 <__mulsf3+0x181>
c0026dc0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026dc6:	85 db                	test   ebx,ebx
c0026dc8:	7f 23                	jg     c0026ded <__mulsf3+0x18c>
c0026dca:	83 fb e9             	cmp    ebx,0xffffffe9
c0026dcd:	7c 1a                	jl     c0026de9 <__mulsf3+0x188>
c0026dcf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026dd5:	b9 01 00 00 00       	mov    ecx,0x1
c0026dda:	29 d9                	sub    ecx,ebx
c0026ddc:	d3 ea                	shr    edx,cl
c0026dde:	31 db                	xor    ebx,ebx
c0026de0:	eb 0b                	jmp    c0026ded <__mulsf3+0x18c>
c0026de2:	bb ff 00 00 00       	mov    ebx,0xff
c0026de7:	eb 02                	jmp    c0026deb <__mulsf3+0x18a>
c0026de9:	31 db                	xor    ebx,ebx
c0026deb:	31 d2                	xor    edx,edx
c0026ded:	89 d0                	mov    eax,edx
c0026def:	c1 e8 08             	shr    eax,0x8
c0026df2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026df5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026dfb:	09 fb                	or     ebx,edi
c0026dfd:	c1 e3 17             	shl    ebx,0x17
c0026e00:	09 c3                	or     ebx,eax
c0026e02:	f6 c2 7f             	test   dl,0x7f
c0026e05:	0f 95 c1             	setne  cl
c0026e08:	09 c8                	or     eax,ecx
c0026e0a:	83 e0 01             	and    eax,0x1
c0026e0d:	c1 ea 07             	shr    edx,0x7
c0026e10:	21 c2                	and    edx,eax
c0026e12:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026e15:	eb 03                	jmp    c0026e1a <__mulsf3+0x1b9>
c0026e17:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026e1a:	89 f0                	mov    eax,esi
c0026e1c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e1f:	5b                   	pop    ebx
c0026e20:	5e                   	pop    esi
c0026e21:	5f                   	pop    edi
c0026e22:	5d                   	pop    ebp
c0026e23:	c3                   	ret    

c0026e24 <__divsf3>:
c0026e24:	55                   	push   ebp
c0026e25:	89 e5                	mov    ebp,esp
c0026e27:	57                   	push   edi
c0026e28:	56                   	push   esi
c0026e29:	53                   	push   ebx
c0026e2a:	83 ec 1c             	sub    esp,0x1c
c0026e2d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e30:	89 d8                	mov    eax,ebx
c0026e32:	89 d9                	mov    ecx,ebx
c0026e34:	c1 f9 17             	sar    ecx,0x17
c0026e37:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e3a:	c1 e0 08             	shl    eax,0x8
c0026e3d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e42:	89 c1                	mov    ecx,eax
c0026e44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e47:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e4a:	89 c7                	mov    edi,eax
c0026e4c:	c1 ff 17             	sar    edi,0x17
c0026e4f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e53:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e56:	89 f8                	mov    eax,edi
c0026e58:	0f b6 c0             	movzx  eax,al
c0026e5b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e5e:	29 c6                	sub    esi,eax
c0026e60:	83 c6 7f             	add    esi,0x7f
c0026e63:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e66:	42                   	inc    edx
c0026e67:	80 e2 fe             	and    dl,0xfe
c0026e6a:	0f 85 9c 00 00 00    	jne    c0026f0c <__divsf3+0xe8>
c0026e70:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e74:	74 33                	je     c0026ea9 <__divsf3+0x85>
c0026e76:	85 c9                	test   ecx,ecx
c0026e78:	0f 85 c7 01 00 00    	jne    c0027045 <__divsf3+0x221>
c0026e7e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e81:	80 e2 fe             	and    dl,0xfe
c0026e84:	75 2f                	jne    c0026eb5 <__divsf3+0x91>
c0026e86:	85 c0                	test   eax,eax
c0026e88:	74 2b                	je     c0026eb5 <__divsf3+0x91>
c0026e8a:	51                   	push   ecx
c0026e8b:	51                   	push   ecx
c0026e8c:	6a 00                	push   0x0
c0026e8e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e91:	e8 d2 03 00 00       	call   c0027268 <__nesf2>
c0026e96:	83 c4 10             	add    esp,0x10
c0026e99:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e9c:	85 c0                	test   eax,eax
c0026e9e:	0f 85 a1 01 00 00    	jne    c0027045 <__divsf3+0x221>
c0026ea4:	e9 92 01 00 00       	jmp    c002703b <__divsf3+0x217>
c0026ea9:	85 c9                	test   ecx,ecx
c0026eab:	75 1b                	jne    c0026ec8 <__divsf3+0xa4>
c0026ead:	8d 57 01             	lea    edx,[edi+0x1]
c0026eb0:	80 e2 fe             	and    dl,0xfe
c0026eb3:	74 1e                	je     c0026ed3 <__divsf3+0xaf>
c0026eb5:	85 ff                	test   edi,edi
c0026eb7:	0f 89 88 01 00 00    	jns    c0027045 <__divsf3+0x221>
c0026ebd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026ec3:	e9 7d 01 00 00       	jmp    c0027045 <__divsf3+0x221>
c0026ec8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026ecb:	01 c9                	add    ecx,ecx
c0026ecd:	78 3d                	js     c0026f0c <__divsf3+0xe8>
c0026ecf:	89 d6                	mov    esi,edx
c0026ed1:	eb f5                	jmp    c0026ec8 <__divsf3+0xa4>
c0026ed3:	85 c0                	test   eax,eax
c0026ed5:	b8 00 00 00 00       	mov    eax,0x0
c0026eda:	74 18                	je     c0026ef4 <__divsf3+0xd0>
c0026edc:	52                   	push   edx
c0026edd:	52                   	push   edx
c0026ede:	50                   	push   eax
c0026edf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ee2:	e8 81 03 00 00       	call   c0027268 <__nesf2>
c0026ee7:	83 c4 10             	add    esp,0x10
c0026eea:	85 c0                	test   eax,eax
c0026eec:	0f 85 50 01 00 00    	jne    c0027042 <__divsf3+0x21e>
c0026ef2:	eb c1                	jmp    c0026eb5 <__divsf3+0x91>
c0026ef4:	56                   	push   esi
c0026ef5:	56                   	push   esi
c0026ef6:	50                   	push   eax
c0026ef7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026efa:	e8 69 03 00 00       	call   c0027268 <__nesf2>
c0026eff:	83 c4 10             	add    esp,0x10
c0026f02:	85 c0                	test   eax,eax
c0026f04:	0f 84 31 01 00 00    	je     c002703b <__divsf3+0x217>
c0026f0a:	eb a9                	jmp    c0026eb5 <__divsf3+0x91>
c0026f0c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026f0f:	c1 e3 08             	shl    ebx,0x8
c0026f12:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026f18:	8d 57 01             	lea    edx,[edi+0x1]
c0026f1b:	80 e2 fe             	and    dl,0xfe
c0026f1e:	75 71                	jne    c0026f91 <__divsf3+0x16d>
c0026f20:	85 c0                	test   eax,eax
c0026f22:	ba 00 00 00 00       	mov    edx,0x0
c0026f27:	74 2f                	je     c0026f58 <__divsf3+0x134>
c0026f29:	51                   	push   ecx
c0026f2a:	51                   	push   ecx
c0026f2b:	52                   	push   edx
c0026f2c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f2f:	e8 f9 02 00 00       	call   c002722d <__eqsf2>
c0026f34:	83 c4 10             	add    esp,0x10
c0026f37:	85 c0                	test   eax,eax
c0026f39:	0f 85 03 01 00 00    	jne    c0027042 <__divsf3+0x21e>
c0026f3f:	31 d2                	xor    edx,edx
c0026f41:	89 d3                	mov    ebx,edx
c0026f43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f46:	31 f8                	xor    eax,edi
c0026f48:	0f 89 f7 00 00 00    	jns    c0027045 <__divsf3+0x221>
c0026f4e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026f53:	e9 ed 00 00 00       	jmp    c0027045 <__divsf3+0x221>
c0026f58:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f5b:	50                   	push   eax
c0026f5c:	50                   	push   eax
c0026f5d:	52                   	push   edx
c0026f5e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f61:	e8 c7 02 00 00       	call   c002722d <__eqsf2>
c0026f66:	83 c4 10             	add    esp,0x10
c0026f69:	85 c0                	test   eax,eax
c0026f6b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f6e:	75 16                	jne    c0026f86 <__divsf3+0x162>
c0026f70:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026f73:	31 fb                	xor    ebx,edi
c0026f75:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026f7b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026f81:	e9 bf 00 00 00       	jmp    c0027045 <__divsf3+0x221>
c0026f86:	8d 46 01             	lea    eax,[esi+0x1]
c0026f89:	01 db                	add    ebx,ebx
c0026f8b:	78 04                	js     c0026f91 <__divsf3+0x16d>
c0026f8d:	89 c6                	mov    esi,eax
c0026f8f:	eb f5                	jmp    c0026f86 <__divsf3+0x162>
c0026f91:	89 c8                	mov    eax,ecx
c0026f93:	0d 00 00 00 80       	or     eax,0x80000000
c0026f98:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026f9e:	31 d2                	xor    edx,edx
c0026fa0:	39 d8                	cmp    eax,ebx
c0026fa2:	72 07                	jb     c0026fab <__divsf3+0x187>
c0026fa4:	29 d8                	sub    eax,ebx
c0026fa6:	ba 01 00 00 00       	mov    edx,0x1
c0026fab:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026fb2:	01 d2                	add    edx,edx
c0026fb4:	89 c1                	mov    ecx,eax
c0026fb6:	01 c0                	add    eax,eax
c0026fb8:	85 c9                	test   ecx,ecx
c0026fba:	78 04                	js     c0026fc0 <__divsf3+0x19c>
c0026fbc:	39 c3                	cmp    ebx,eax
c0026fbe:	77 05                	ja     c0026fc5 <__divsf3+0x1a1>
c0026fc0:	29 d8                	sub    eax,ebx
c0026fc2:	83 ca 01             	or     edx,0x1
c0026fc5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026fc8:	75 e8                	jne    c0026fb2 <__divsf3+0x18e>
c0026fca:	85 c0                	test   eax,eax
c0026fcc:	0f 95 c0             	setne  al
c0026fcf:	0f b6 c0             	movzx  eax,al
c0026fd2:	c1 e2 06             	shl    edx,0x6
c0026fd5:	09 c2                	or     edx,eax
c0026fd7:	78 03                	js     c0026fdc <__divsf3+0x1b8>
c0026fd9:	01 d2                	add    edx,edx
c0026fdb:	4e                   	dec    esi
c0026fdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026fe2:	7f 22                	jg     c0027006 <__divsf3+0x1e2>
c0026fe4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026fea:	85 f6                	test   esi,esi
c0026fec:	7f 23                	jg     c0027011 <__divsf3+0x1ed>
c0026fee:	83 fe e9             	cmp    esi,0xffffffe9
c0026ff1:	7c 1a                	jl     c002700d <__divsf3+0x1e9>
c0026ff3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ff9:	b9 01 00 00 00       	mov    ecx,0x1
c0026ffe:	29 f1                	sub    ecx,esi
c0027000:	d3 ea                	shr    edx,cl
c0027002:	31 f6                	xor    esi,esi
c0027004:	eb 0b                	jmp    c0027011 <__divsf3+0x1ed>
c0027006:	be ff 00 00 00       	mov    esi,0xff
c002700b:	eb 02                	jmp    c002700f <__divsf3+0x1eb>
c002700d:	31 f6                	xor    esi,esi
c002700f:	31 d2                	xor    edx,edx
c0027011:	89 d0                	mov    eax,edx
c0027013:	c1 e8 08             	shr    eax,0x8
c0027016:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027019:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002701f:	09 fe                	or     esi,edi
c0027021:	c1 e6 17             	shl    esi,0x17
c0027024:	09 c6                	or     esi,eax
c0027026:	f6 c2 7f             	test   dl,0x7f
c0027029:	0f 95 c1             	setne  cl
c002702c:	09 c8                	or     eax,ecx
c002702e:	83 e0 01             	and    eax,0x1
c0027031:	c1 ea 07             	shr    edx,0x7
c0027034:	21 c2                	and    edx,eax
c0027036:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027039:	eb 0a                	jmp    c0027045 <__divsf3+0x221>
c002703b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027040:	eb 03                	jmp    c0027045 <__divsf3+0x221>
c0027042:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027045:	89 d8                	mov    eax,ebx
c0027047:	8d 65 f4             	lea    esp,[ebp-0xc]
c002704a:	5b                   	pop    ebx
c002704b:	5e                   	pop    esi
c002704c:	5f                   	pop    edi
c002704d:	5d                   	pop    ebp
c002704e:	c3                   	ret    

c002704f <__floatsisf>:
c002704f:	55                   	push   ebp
c0027050:	89 e5                	mov    ebp,esp
c0027052:	53                   	push   ebx
c0027053:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027056:	85 d2                	test   edx,edx
c0027058:	7e 2b                	jle    c0027085 <__floatsisf+0x36>
c002705a:	0f bd ca             	bsr    ecx,edx
c002705d:	83 f1 1f             	xor    ecx,0x1f
c0027060:	d3 e2                	shl    edx,cl
c0027062:	89 d0                	mov    eax,edx
c0027064:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027069:	89 c3                	mov    ebx,eax
c002706b:	c1 eb 08             	shr    ebx,0x8
c002706e:	80 e2 7f             	and    dl,0x7f
c0027071:	0f 95 c2             	setne  dl
c0027074:	09 da                	or     edx,ebx
c0027076:	83 e2 01             	and    edx,0x1
c0027079:	c1 e8 07             	shr    eax,0x7
c002707c:	21 c2                	and    edx,eax
c002707e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027083:	eb 32                	jmp    c00270b7 <__floatsisf+0x68>
c0027085:	b8 00 00 00 00       	mov    eax,0x0
c002708a:	74 34                	je     c00270c0 <__floatsisf+0x71>
c002708c:	f7 da                	neg    edx
c002708e:	0f bd ca             	bsr    ecx,edx
c0027091:	83 f1 1f             	xor    ecx,0x1f
c0027094:	d3 e2                	shl    edx,cl
c0027096:	89 d0                	mov    eax,edx
c0027098:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002709d:	89 c3                	mov    ebx,eax
c002709f:	c1 eb 08             	shr    ebx,0x8
c00270a2:	80 e2 7f             	and    dl,0x7f
c00270a5:	0f 95 c2             	setne  dl
c00270a8:	09 da                	or     edx,ebx
c00270aa:	83 e2 01             	and    edx,0x1
c00270ad:	c1 e8 07             	shr    eax,0x7
c00270b0:	21 c2                	and    edx,eax
c00270b2:	b8 9e 01 00 00       	mov    eax,0x19e
c00270b7:	29 c8                	sub    eax,ecx
c00270b9:	c1 e0 17             	shl    eax,0x17
c00270bc:	09 d8                	or     eax,ebx
c00270be:	01 d0                	add    eax,edx
c00270c0:	5b                   	pop    ebx
c00270c1:	5d                   	pop    ebp
c00270c2:	c3                   	ret    

c00270c3 <__floatunsisf>:
c00270c3:	55                   	push   ebp
c00270c4:	89 e5                	mov    ebp,esp
c00270c6:	53                   	push   ebx
c00270c7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270ca:	31 c0                	xor    eax,eax
c00270cc:	85 d2                	test   edx,edx
c00270ce:	74 32                	je     c0027102 <__floatunsisf+0x3f>
c00270d0:	0f bd ca             	bsr    ecx,edx
c00270d3:	83 f1 1f             	xor    ecx,0x1f
c00270d6:	d3 e2                	shl    edx,cl
c00270d8:	89 d0                	mov    eax,edx
c00270da:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270df:	89 c3                	mov    ebx,eax
c00270e1:	c1 eb 08             	shr    ebx,0x8
c00270e4:	80 e2 7f             	and    dl,0x7f
c00270e7:	0f 95 c2             	setne  dl
c00270ea:	09 da                	or     edx,ebx
c00270ec:	83 e2 01             	and    edx,0x1
c00270ef:	c1 e8 07             	shr    eax,0x7
c00270f2:	21 c2                	and    edx,eax
c00270f4:	b8 9e 00 00 00       	mov    eax,0x9e
c00270f9:	29 c8                	sub    eax,ecx
c00270fb:	c1 e0 17             	shl    eax,0x17
c00270fe:	09 d8                	or     eax,ebx
c0027100:	01 d0                	add    eax,edx
c0027102:	5b                   	pop    ebx
c0027103:	5d                   	pop    ebp
c0027104:	c3                   	ret    

c0027105 <__fixsfsi>:
c0027105:	55                   	push   ebp
c0027106:	89 e5                	mov    ebp,esp
c0027108:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002710b:	89 d1                	mov    ecx,edx
c002710d:	c1 e1 08             	shl    ecx,0x8
c0027110:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027116:	c1 fa 17             	sar    edx,0x17
c0027119:	78 1c                	js     c0027137 <__fixsfsi+0x32>
c002711b:	83 ea 7f             	sub    edx,0x7f
c002711e:	31 c0                	xor    eax,eax
c0027120:	83 fa 1e             	cmp    edx,0x1e
c0027123:	77 40                	ja     c0027165 <__fixsfsi+0x60>
c0027125:	89 c8                	mov    eax,ecx
c0027127:	0d 00 00 00 80       	or     eax,0x80000000
c002712c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027131:	29 d1                	sub    ecx,edx
c0027133:	d3 e8                	shr    eax,cl
c0027135:	eb 2e                	jmp    c0027165 <__fixsfsi+0x60>
c0027137:	31 c0                	xor    eax,eax
c0027139:	81 c2 81 00 00 00    	add    edx,0x81
c002713f:	78 24                	js     c0027165 <__fixsfsi+0x60>
c0027141:	83 fa 1e             	cmp    edx,0x1e
c0027144:	7e 09                	jle    c002714f <__fixsfsi+0x4a>
c0027146:	83 fa 1f             	cmp    edx,0x1f
c0027149:	75 18                	jne    c0027163 <__fixsfsi+0x5e>
c002714b:	85 c9                	test   ecx,ecx
c002714d:	75 14                	jne    c0027163 <__fixsfsi+0x5e>
c002714f:	89 c8                	mov    eax,ecx
c0027151:	0d 00 00 00 80       	or     eax,0x80000000
c0027156:	b9 1f 00 00 00       	mov    ecx,0x1f
c002715b:	29 d1                	sub    ecx,edx
c002715d:	d3 e8                	shr    eax,cl
c002715f:	f7 d8                	neg    eax
c0027161:	eb 02                	jmp    c0027165 <__fixsfsi+0x60>
c0027163:	31 c0                	xor    eax,eax
c0027165:	5d                   	pop    ebp
c0027166:	c3                   	ret    

c0027167 <__fixunssfsi>:
c0027167:	55                   	push   ebp
c0027168:	89 e5                	mov    ebp,esp
c002716a:	53                   	push   ebx
c002716b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002716e:	89 d3                	mov    ebx,edx
c0027170:	c1 fb 17             	sar    ebx,0x17
c0027173:	83 eb 7f             	sub    ebx,0x7f
c0027176:	31 c0                	xor    eax,eax
c0027178:	83 fb 1f             	cmp    ebx,0x1f
c002717b:	77 18                	ja     c0027195 <__fixunssfsi+0x2e>
c002717d:	89 d0                	mov    eax,edx
c002717f:	c1 e0 08             	shl    eax,0x8
c0027182:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027187:	0d 00 00 00 80       	or     eax,0x80000000
c002718c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027191:	29 d9                	sub    ecx,ebx
c0027193:	d3 e8                	shr    eax,cl
c0027195:	5b                   	pop    ebx
c0027196:	5d                   	pop    ebp
c0027197:	c3                   	ret    

c0027198 <__cmpsf2>:
c0027198:	55                   	push   ebp
c0027199:	89 e5                	mov    ebp,esp
c002719b:	57                   	push   edi
c002719c:	56                   	push   esi
c002719d:	53                   	push   ebx
c002719e:	83 ec 24             	sub    esp,0x24
c00271a1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00271a7:	e8 4f 10 00 00       	call   c00281fb <__truncdfsf2>
c00271ac:	5a                   	pop    edx
c00271ad:	59                   	pop    ecx
c00271ae:	89 c3                	mov    ebx,eax
c00271b0:	c1 e8 17             	shr    eax,0x17
c00271b3:	0f b6 f0             	movzx  esi,al
c00271b6:	89 d8                	mov    eax,ebx
c00271b8:	c1 e8 1f             	shr    eax,0x1f
c00271bb:	31 c6                	xor    esi,eax
c00271bd:	c1 e3 08             	shl    ebx,0x8
c00271c0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00271c3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00271c6:	e8 30 10 00 00       	call   c00281fb <__truncdfsf2>
c00271cb:	83 c4 10             	add    esp,0x10
c00271ce:	89 c1                	mov    ecx,eax
c00271d0:	c1 e9 17             	shr    ecx,0x17
c00271d3:	0f b6 c9             	movzx  ecx,cl
c00271d6:	89 c7                	mov    edi,eax
c00271d8:	c1 ef 1f             	shr    edi,0x1f
c00271db:	89 ca                	mov    edx,ecx
c00271dd:	31 fa                	xor    edx,edi
c00271df:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00271e2:	c1 e0 08             	shl    eax,0x8
c00271e5:	89 c2                	mov    edx,eax
c00271e7:	89 d8                	mov    eax,ebx
c00271e9:	09 d0                	or     eax,edx
c00271eb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271f0:	09 f0                	or     eax,esi
c00271f2:	75 08                	jne    c00271fc <__cmpsf2+0x64>
c00271f4:	31 c0                	xor    eax,eax
c00271f6:	39 f9                	cmp    ecx,edi
c00271f8:	75 0c                	jne    c0027206 <__cmpsf2+0x6e>
c00271fa:	eb 29                	jmp    c0027225 <__cmpsf2+0x8d>
c00271fc:	b8 01 00 00 00       	mov    eax,0x1
c0027201:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027204:	7f 1f                	jg     c0027225 <__cmpsf2+0x8d>
c0027206:	83 c8 ff             	or     eax,0xffffffff
c0027209:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002720c:	7c 17                	jl     c0027225 <__cmpsf2+0x8d>
c002720e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027214:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002721a:	b8 01 00 00 00       	mov    eax,0x1
c002721f:	39 d3                	cmp    ebx,edx
c0027221:	77 02                	ja     c0027225 <__cmpsf2+0x8d>
c0027223:	19 c0                	sbb    eax,eax
c0027225:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027228:	5b                   	pop    ebx
c0027229:	5e                   	pop    esi
c002722a:	5f                   	pop    edi
c002722b:	5d                   	pop    ebp
c002722c:	c3                   	ret    

c002722d <__eqsf2>:
c002722d:	55                   	push   ebp
c002722e:	89 e5                	mov    ebp,esp
c0027230:	83 ec 24             	sub    esp,0x24
c0027233:	6a 01                	push   0x1
c0027235:	83 ec 0c             	sub    esp,0xc
c0027238:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002723b:	e8 df 10 00 00       	call   c002831f <__extendsfdf2>
c0027240:	83 c4 10             	add    esp,0x10
c0027243:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027246:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027249:	52                   	push   edx
c002724a:	50                   	push   eax
c002724b:	50                   	push   eax
c002724c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002724f:	e8 cb 10 00 00       	call   c002831f <__extendsfdf2>
c0027254:	59                   	pop    ecx
c0027255:	59                   	pop    ecx
c0027256:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027259:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002725c:	52                   	push   edx
c002725d:	50                   	push   eax
c002725e:	e8 35 ff ff ff       	call   c0027198 <__cmpsf2>
c0027263:	83 c4 20             	add    esp,0x20
c0027266:	c9                   	leave  
c0027267:	c3                   	ret    

c0027268 <__nesf2>:
c0027268:	eb c3                	jmp    c002722d <__eqsf2>

c002726a <__gtsf2>:
c002726a:	55                   	push   ebp
c002726b:	89 e5                	mov    ebp,esp
c002726d:	83 ec 24             	sub    esp,0x24
c0027270:	6a ff                	push   0xffffffff
c0027272:	83 ec 0c             	sub    esp,0xc
c0027275:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027278:	e8 a2 10 00 00       	call   c002831f <__extendsfdf2>
c002727d:	83 c4 10             	add    esp,0x10
c0027280:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027283:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027286:	52                   	push   edx
c0027287:	50                   	push   eax
c0027288:	50                   	push   eax
c0027289:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002728c:	e8 8e 10 00 00       	call   c002831f <__extendsfdf2>
c0027291:	59                   	pop    ecx
c0027292:	59                   	pop    ecx
c0027293:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027296:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027299:	52                   	push   edx
c002729a:	50                   	push   eax
c002729b:	e8 f8 fe ff ff       	call   c0027198 <__cmpsf2>
c00272a0:	83 c4 20             	add    esp,0x20
c00272a3:	c9                   	leave  
c00272a4:	c3                   	ret    

c00272a5 <__gesf2>:
c00272a5:	eb c3                	jmp    c002726a <__gtsf2>

c00272a7 <__ltsf2>:
c00272a7:	eb 84                	jmp    c002722d <__eqsf2>

c00272a9 <__lesf2>:
c00272a9:	eb 82                	jmp    c002722d <__eqsf2>

c00272ab <__adddf3>:
c00272ab:	55                   	push   ebp
c00272ac:	89 e5                	mov    ebp,esp
c00272ae:	57                   	push   edi
c00272af:	56                   	push   esi
c00272b0:	53                   	push   ebx
c00272b1:	83 ec 24             	sub    esp,0x24
c00272b4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00272b7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00272ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00272bd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00272c0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00272c3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00272c6:	89 c8                	mov    eax,ecx
c00272c8:	89 ce                	mov    esi,ecx
c00272ca:	c1 fe 14             	sar    esi,0x14
c00272cd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00272d0:	89 fb                	mov    ebx,edi
c00272d2:	89 fa                	mov    edx,edi
c00272d4:	c1 e2 0b             	shl    edx,0xb
c00272d7:	c1 e0 0b             	shl    eax,0xb
c00272da:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00272df:	c1 eb 15             	shr    ebx,0x15
c00272e2:	09 d8                	or     eax,ebx
c00272e4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00272e7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00272ea:	c1 fe 14             	sar    esi,0x14
c00272ed:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00272f0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00272f3:	89 f3                	mov    ebx,esi
c00272f5:	c1 e3 0b             	shl    ebx,0xb
c00272f8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00272fb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00272fe:	c1 e3 0b             	shl    ebx,0xb
c0027301:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027307:	c1 ee 15             	shr    esi,0x15
c002730a:	09 f3                	or     ebx,esi
c002730c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002730f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027312:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027315:	0f 88 5f 02 00 00    	js     c002757a <__adddf3+0x2cf>
c002731b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002731e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027321:	85 db                	test   ebx,ebx
c0027323:	0f 8e c7 00 00 00    	jle    c00273f0 <__adddf3+0x145>
c0027329:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027330:	75 1a                	jne    c002734c <__adddf3+0xa1>
c0027332:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027335:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027338:	0f 84 b2 05 00 00    	je     c00278f0 <__adddf3+0x645>
c002733e:	4b                   	dec    ebx
c002733f:	75 23                	jne    c0027364 <__adddf3+0xb9>
c0027341:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027344:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027347:	e9 99 00 00 00       	jmp    c00273e5 <__adddf3+0x13a>
c002734c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002734f:	f7 d6                	not    esi
c0027351:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027357:	0f 84 93 05 00 00    	je     c00278f0 <__adddf3+0x645>
c002735d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027364:	83 fb 1f             	cmp    ebx,0x1f
c0027367:	7e 42                	jle    c00273ab <__adddf3+0x100>
c0027369:	83 fb 3f             	cmp    ebx,0x3f
c002736c:	0f 8f 7e 05 00 00    	jg     c00278f0 <__adddf3+0x645>
c0027372:	83 e3 1f             	and    ebx,0x1f
c0027375:	89 d9                	mov    ecx,ebx
c0027377:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002737a:	d3 ef                	shr    edi,cl
c002737c:	31 db                	xor    ebx,ebx
c002737e:	85 c9                	test   ecx,ecx
c0027380:	74 15                	je     c0027397 <__adddf3+0xec>
c0027382:	be 20 00 00 00       	mov    esi,0x20
c0027387:	29 ce                	sub    esi,ecx
c0027389:	89 f1                	mov    ecx,esi
c002738b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002738e:	d3 e6                	shl    esi,cl
c0027390:	31 db                	xor    ebx,ebx
c0027392:	85 f6                	test   esi,esi
c0027394:	0f 95 c3             	setne  bl
c0027397:	31 c9                	xor    ecx,ecx
c0027399:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002739d:	0f 95 c1             	setne  cl
c00273a0:	09 cf                	or     edi,ecx
c00273a2:	09 fb                	or     ebx,edi
c00273a4:	01 da                	add    edx,ebx
c00273a6:	83 d0 00             	adc    eax,0x0
c00273a9:	eb 3a                	jmp    c00273e5 <__adddf3+0x13a>
c00273ab:	bf 20 00 00 00       	mov    edi,0x20
c00273b0:	29 df                	sub    edi,ebx
c00273b2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273b5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273b8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273bb:	d3 e6                	shl    esi,cl
c00273bd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273c0:	88 d9                	mov    cl,bl
c00273c2:	d3 ef                	shr    edi,cl
c00273c4:	09 fe                	or     esi,edi
c00273c6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00273c9:	88 d9                	mov    cl,bl
c00273cb:	d3 ef                	shr    edi,cl
c00273cd:	89 fb                	mov    ebx,edi
c00273cf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273d2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273d5:	d3 e7                	shl    edi,cl
c00273d7:	85 ff                	test   edi,edi
c00273d9:	0f 95 c1             	setne  cl
c00273dc:	0f b6 c9             	movzx  ecx,cl
c00273df:	09 ce                	or     esi,ecx
c00273e1:	01 f2                	add    edx,esi
c00273e3:	11 d8                	adc    eax,ebx
c00273e5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273e8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273eb:	e9 52 01 00 00       	jmp    c0027542 <__adddf3+0x297>
c00273f0:	0f 84 d5 00 00 00    	je     c00274cb <__adddf3+0x220>
c00273f6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00273f9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00273fc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00273ff:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027402:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027409:	75 20                	jne    c002742b <__adddf3+0x180>
c002740b:	89 d6                	mov    esi,edx
c002740d:	09 c6                	or     esi,eax
c002740f:	0f 84 db 04 00 00    	je     c00278f0 <__adddf3+0x645>
c0027415:	4b                   	dec    ebx
c0027416:	75 29                	jne    c0027441 <__adddf3+0x196>
c0027418:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002741b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002741e:	01 d1                	add    ecx,edx
c0027420:	11 c6                	adc    esi,eax
c0027422:	89 f0                	mov    eax,esi
c0027424:	89 ca                	mov    edx,ecx
c0027426:	e9 17 01 00 00       	jmp    c0027542 <__adddf3+0x297>
c002742b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002742e:	f7 d6                	not    esi
c0027430:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027436:	0f 84 b4 04 00 00    	je     c00278f0 <__adddf3+0x645>
c002743c:	0d 00 00 00 80       	or     eax,0x80000000
c0027441:	83 fb 1f             	cmp    ebx,0x1f
c0027444:	7e 48                	jle    c002748e <__adddf3+0x1e3>
c0027446:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027449:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002744c:	83 fb 3f             	cmp    ebx,0x3f
c002744f:	0f 8f 9b 04 00 00    	jg     c00278f0 <__adddf3+0x645>
c0027455:	83 e3 1f             	and    ebx,0x1f
c0027458:	89 d9                	mov    ecx,ebx
c002745a:	89 c7                	mov    edi,eax
c002745c:	d3 ef                	shr    edi,cl
c002745e:	31 db                	xor    ebx,ebx
c0027460:	85 c9                	test   ecx,ecx
c0027462:	74 12                	je     c0027476 <__adddf3+0x1cb>
c0027464:	be 20 00 00 00       	mov    esi,0x20
c0027469:	29 ce                	sub    esi,ecx
c002746b:	89 f1                	mov    ecx,esi
c002746d:	d3 e0                	shl    eax,cl
c002746f:	31 db                	xor    ebx,ebx
c0027471:	85 c0                	test   eax,eax
c0027473:	0f 95 c3             	setne  bl
c0027476:	31 c0                	xor    eax,eax
c0027478:	85 d2                	test   edx,edx
c002747a:	0f 95 c0             	setne  al
c002747d:	09 c7                	or     edi,eax
c002747f:	09 fb                	or     ebx,edi
c0027481:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027484:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027487:	01 da                	add    edx,ebx
c0027489:	83 d6 00             	adc    esi,0x0
c002748c:	eb 39                	jmp    c00274c7 <__adddf3+0x21c>
c002748e:	be 20 00 00 00       	mov    esi,0x20
c0027493:	29 de                	sub    esi,ebx
c0027495:	89 c7                	mov    edi,eax
c0027497:	89 f1                	mov    ecx,esi
c0027499:	d3 e7                	shl    edi,cl
c002749b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002749e:	89 d7                	mov    edi,edx
c00274a0:	88 d9                	mov    cl,bl
c00274a2:	d3 ef                	shr    edi,cl
c00274a4:	89 f9                	mov    ecx,edi
c00274a6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00274a9:	09 cf                	or     edi,ecx
c00274ab:	88 d9                	mov    cl,bl
c00274ad:	d3 e8                	shr    eax,cl
c00274af:	89 f1                	mov    ecx,esi
c00274b1:	d3 e2                	shl    edx,cl
c00274b3:	85 d2                	test   edx,edx
c00274b5:	0f 95 c2             	setne  dl
c00274b8:	0f b6 d2             	movzx  edx,dl
c00274bb:	09 d7                	or     edi,edx
c00274bd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274c0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274c3:	01 fa                	add    edx,edi
c00274c5:	11 c6                	adc    esi,eax
c00274c7:	89 f0                	mov    eax,esi
c00274c9:	eb 77                	jmp    c0027542 <__adddf3+0x297>
c00274cb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274ce:	46                   	inc    esi
c00274cf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00274d2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00274d8:	75 41                	jne    c002751b <__adddf3+0x270>
c00274da:	89 d3                	mov    ebx,edx
c00274dc:	09 c3                	or     ebx,eax
c00274de:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00274e5:	75 27                	jne    c002750e <__adddf3+0x263>
c00274e7:	85 db                	test   ebx,ebx
c00274e9:	0f 84 fb 03 00 00    	je     c00278ea <__adddf3+0x63f>
c00274ef:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274f2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00274f5:	0f 84 f5 03 00 00    	je     c00278f0 <__adddf3+0x645>
c00274fb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274fe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027501:	85 c0                	test   eax,eax
c0027503:	0f 89 91 03 00 00    	jns    c002789a <__adddf3+0x5ef>
c0027509:	e9 85 03 00 00       	jmp    c0027893 <__adddf3+0x5e8>
c002750e:	85 db                	test   ebx,ebx
c0027510:	0f 85 da 03 00 00    	jne    c00278f0 <__adddf3+0x645>
c0027516:	e9 cf 03 00 00       	jmp    c00278ea <__adddf3+0x63f>
c002751b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002751e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027521:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027524:	f7 d1                	not    ecx
c0027526:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002752c:	0f 84 70 03 00 00    	je     c00278a2 <__adddf3+0x5f7>
c0027532:	d1 ea                	shr    edx,1
c0027534:	89 c1                	mov    ecx,eax
c0027536:	c1 e1 1f             	shl    ecx,0x1f
c0027539:	09 ca                	or     edx,ecx
c002753b:	d1 e8                	shr    eax,1
c002753d:	e9 6f 03 00 00       	jmp    c00278b1 <__adddf3+0x606>
c0027542:	85 c0                	test   eax,eax
c0027544:	0f 89 67 03 00 00    	jns    c00278b1 <__adddf3+0x606>
c002754a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002754d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027550:	f7 d1                	not    ecx
c0027552:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027558:	0f 84 44 03 00 00    	je     c00278a2 <__adddf3+0x5f7>
c002755e:	89 d1                	mov    ecx,edx
c0027560:	d1 e9                	shr    ecx,1
c0027562:	83 e2 01             	and    edx,0x1
c0027565:	09 ca                	or     edx,ecx
c0027567:	89 c1                	mov    ecx,eax
c0027569:	c1 e1 1f             	shl    ecx,0x1f
c002756c:	09 ca                	or     edx,ecx
c002756e:	d1 e8                	shr    eax,1
c0027570:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027575:	e9 37 03 00 00       	jmp    c00278b1 <__adddf3+0x606>
c002757a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002757d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027583:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027586:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027589:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002758f:	29 de                	sub    esi,ebx
c0027591:	85 f6                	test   esi,esi
c0027593:	0f 8e bd 00 00 00    	jle    c0027656 <__adddf3+0x3ab>
c0027599:	85 db                	test   ebx,ebx
c002759b:	75 17                	jne    c00275b4 <__adddf3+0x309>
c002759d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00275a0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00275a3:	0f 84 47 03 00 00    	je     c00278f0 <__adddf3+0x645>
c00275a9:	4e                   	dec    esi
c00275aa:	75 20                	jne    c00275cc <__adddf3+0x321>
c00275ac:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00275af:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00275b2:	eb 5b                	jmp    c002760f <__adddf3+0x364>
c00275b4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275b7:	f7 d3                	not    ebx
c00275b9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00275bf:	0f 84 2b 03 00 00    	je     c00278f0 <__adddf3+0x645>
c00275c5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275cc:	83 fe 1f             	cmp    esi,0x1f
c00275cf:	7e 49                	jle    c002761a <__adddf3+0x36f>
c00275d1:	83 fe 3f             	cmp    esi,0x3f
c00275d4:	0f 8f 16 03 00 00    	jg     c00278f0 <__adddf3+0x645>
c00275da:	83 e6 1f             	and    esi,0x1f
c00275dd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275e0:	89 f1                	mov    ecx,esi
c00275e2:	d3 ef                	shr    edi,cl
c00275e4:	31 db                	xor    ebx,ebx
c00275e6:	85 f6                	test   esi,esi
c00275e8:	74 13                	je     c00275fd <__adddf3+0x352>
c00275ea:	b9 20 00 00 00       	mov    ecx,0x20
c00275ef:	29 f1                	sub    ecx,esi
c00275f1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275f4:	d3 e6                	shl    esi,cl
c00275f6:	31 db                	xor    ebx,ebx
c00275f8:	85 f6                	test   esi,esi
c00275fa:	0f 95 c3             	setne  bl
c00275fd:	31 c9                	xor    ecx,ecx
c00275ff:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027603:	0f 95 c1             	setne  cl
c0027606:	09 cf                	or     edi,ecx
c0027608:	09 fb                	or     ebx,edi
c002760a:	29 da                	sub    edx,ebx
c002760c:	83 d8 00             	sbb    eax,0x0
c002760f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027612:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027615:	e9 aa 01 00 00       	jmp    c00277c4 <__adddf3+0x519>
c002761a:	bf 20 00 00 00       	mov    edi,0x20
c002761f:	29 f7                	sub    edi,esi
c0027621:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027624:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027627:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002762a:	d3 e3                	shl    ebx,cl
c002762c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002762f:	89 f1                	mov    ecx,esi
c0027631:	d3 ef                	shr    edi,cl
c0027633:	09 fb                	or     ebx,edi
c0027635:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027638:	89 f1                	mov    ecx,esi
c002763a:	d3 ef                	shr    edi,cl
c002763c:	89 fe                	mov    esi,edi
c002763e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027641:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027644:	d3 e7                	shl    edi,cl
c0027646:	85 ff                	test   edi,edi
c0027648:	0f 95 c1             	setne  cl
c002764b:	0f b6 c9             	movzx  ecx,cl
c002764e:	09 cb                	or     ebx,ecx
c0027650:	29 da                	sub    edx,ebx
c0027652:	19 f0                	sbb    eax,esi
c0027654:	eb b9                	jmp    c002760f <__adddf3+0x364>
c0027656:	0f 84 cd 00 00 00    	je     c0027729 <__adddf3+0x47e>
c002765c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002765f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027662:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027665:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027669:	75 1b                	jne    c0027686 <__adddf3+0x3db>
c002766b:	89 d6                	mov    esi,edx
c002766d:	09 c6                	or     esi,eax
c002766f:	0f 84 7b 02 00 00    	je     c00278f0 <__adddf3+0x645>
c0027675:	4b                   	dec    ebx
c0027676:	75 24                	jne    c002769c <__adddf3+0x3f1>
c0027678:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002767b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002767e:	29 d1                	sub    ecx,edx
c0027680:	19 c6                	sbb    esi,eax
c0027682:	89 ca                	mov    edx,ecx
c0027684:	eb 61                	jmp    c00276e7 <__adddf3+0x43c>
c0027686:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027689:	f7 d6                	not    esi
c002768b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027691:	0f 84 59 02 00 00    	je     c00278f0 <__adddf3+0x645>
c0027697:	0d 00 00 00 80       	or     eax,0x80000000
c002769c:	83 fb 1f             	cmp    ebx,0x1f
c002769f:	7e 4d                	jle    c00276ee <__adddf3+0x443>
c00276a1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276a4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276a7:	83 fb 3f             	cmp    ebx,0x3f
c00276aa:	0f 8f 40 02 00 00    	jg     c00278f0 <__adddf3+0x645>
c00276b0:	83 e3 1f             	and    ebx,0x1f
c00276b3:	89 d9                	mov    ecx,ebx
c00276b5:	89 c7                	mov    edi,eax
c00276b7:	d3 ef                	shr    edi,cl
c00276b9:	31 db                	xor    ebx,ebx
c00276bb:	85 c9                	test   ecx,ecx
c00276bd:	74 12                	je     c00276d1 <__adddf3+0x426>
c00276bf:	be 20 00 00 00       	mov    esi,0x20
c00276c4:	29 ce                	sub    esi,ecx
c00276c6:	89 f1                	mov    ecx,esi
c00276c8:	d3 e0                	shl    eax,cl
c00276ca:	31 db                	xor    ebx,ebx
c00276cc:	85 c0                	test   eax,eax
c00276ce:	0f 95 c3             	setne  bl
c00276d1:	31 c0                	xor    eax,eax
c00276d3:	85 d2                	test   edx,edx
c00276d5:	0f 95 c0             	setne  al
c00276d8:	09 c7                	or     edi,eax
c00276da:	09 fb                	or     ebx,edi
c00276dc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276df:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276e2:	29 da                	sub    edx,ebx
c00276e4:	83 de 00             	sbb    esi,0x0
c00276e7:	89 f0                	mov    eax,esi
c00276e9:	e9 d6 00 00 00       	jmp    c00277c4 <__adddf3+0x519>
c00276ee:	be 20 00 00 00       	mov    esi,0x20
c00276f3:	29 de                	sub    esi,ebx
c00276f5:	89 c7                	mov    edi,eax
c00276f7:	89 f1                	mov    ecx,esi
c00276f9:	d3 e7                	shl    edi,cl
c00276fb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276fe:	89 d7                	mov    edi,edx
c0027700:	88 d9                	mov    cl,bl
c0027702:	d3 ef                	shr    edi,cl
c0027704:	89 f9                	mov    ecx,edi
c0027706:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027709:	09 cf                	or     edi,ecx
c002770b:	88 d9                	mov    cl,bl
c002770d:	d3 e8                	shr    eax,cl
c002770f:	89 f1                	mov    ecx,esi
c0027711:	d3 e2                	shl    edx,cl
c0027713:	85 d2                	test   edx,edx
c0027715:	0f 95 c2             	setne  dl
c0027718:	0f b6 d2             	movzx  edx,dl
c002771b:	09 d7                	or     edi,edx
c002771d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027720:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027723:	29 fa                	sub    edx,edi
c0027725:	19 c6                	sbb    esi,eax
c0027727:	eb be                	jmp    c00276e7 <__adddf3+0x43c>
c0027729:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002772c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002772f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027735:	75 6a                	jne    c00277a1 <__adddf3+0x4f6>
c0027737:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002773b:	75 58                	jne    c0027795 <__adddf3+0x4ea>
c002773d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027740:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027743:	89 d6                	mov    esi,edx
c0027745:	09 c6                	or     esi,eax
c0027747:	75 17                	jne    c0027760 <__adddf3+0x4b5>
c0027749:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002774c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002774f:	85 db                	test   ebx,ebx
c0027751:	0f 85 99 01 00 00    	jne    c00278f0 <__adddf3+0x645>
c0027757:	31 ff                	xor    edi,edi
c0027759:	31 c9                	xor    ecx,ecx
c002775b:	e9 90 01 00 00       	jmp    c00278f0 <__adddf3+0x645>
c0027760:	85 db                	test   ebx,ebx
c0027762:	0f 84 88 01 00 00    	je     c00278f0 <__adddf3+0x645>
c0027768:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002776b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002776e:	85 c0                	test   eax,eax
c0027770:	79 10                	jns    c0027782 <__adddf3+0x4d7>
c0027772:	31 c9                	xor    ecx,ecx
c0027774:	f7 da                	neg    edx
c0027776:	0f 95 c1             	setne  cl
c0027779:	01 c8                	add    eax,ecx
c002777b:	f7 d8                	neg    eax
c002777d:	e9 2f 01 00 00       	jmp    c00278b1 <__adddf3+0x606>
c0027782:	31 ff                	xor    edi,edi
c0027784:	31 c9                	xor    ecx,ecx
c0027786:	89 c3                	mov    ebx,eax
c0027788:	09 d3                	or     ebx,edx
c002778a:	0f 84 60 01 00 00    	je     c00278f0 <__adddf3+0x645>
c0027790:	e9 05 01 00 00       	jmp    c002789a <__adddf3+0x5ef>
c0027795:	31 ff                	xor    edi,edi
c0027797:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002779c:	e9 4f 01 00 00       	jmp    c00278f0 <__adddf3+0x645>
c00277a1:	89 c1                	mov    ecx,eax
c00277a3:	89 d0                	mov    eax,edx
c00277a5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00277a8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00277ab:	89 ca                	mov    edx,ecx
c00277ad:	85 c9                	test   ecx,ecx
c00277af:	79 2c                	jns    c00277dd <__adddf3+0x532>
c00277b1:	31 c9                	xor    ecx,ecx
c00277b3:	f7 d8                	neg    eax
c00277b5:	0f 95 c1             	setne  cl
c00277b8:	01 ca                	add    edx,ecx
c00277ba:	f7 da                	neg    edx
c00277bc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00277bf:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277c2:	eb 19                	jmp    c00277dd <__adddf3+0x532>
c00277c4:	85 c0                	test   eax,eax
c00277c6:	0f 89 e5 00 00 00    	jns    c00278b1 <__adddf3+0x606>
c00277cc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277d1:	89 c1                	mov    ecx,eax
c00277d3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00277d6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00277d9:	89 d0                	mov    eax,edx
c00277db:	89 ca                	mov    edx,ecx
c00277dd:	85 d2                	test   edx,edx
c00277df:	74 59                	je     c002783a <__adddf3+0x58f>
c00277e1:	0f bd da             	bsr    ebx,edx
c00277e4:	83 f3 1f             	xor    ebx,0x1f
c00277e7:	88 d9                	mov    cl,bl
c00277e9:	d3 e2                	shl    edx,cl
c00277eb:	bf 20 00 00 00       	mov    edi,0x20
c00277f0:	89 f9                	mov    ecx,edi
c00277f2:	29 d9                	sub    ecx,ebx
c00277f4:	89 c6                	mov    esi,eax
c00277f6:	d3 ee                	shr    esi,cl
c00277f8:	09 d6                	or     esi,edx
c00277fa:	88 d9                	mov    cl,bl
c00277fc:	d3 e0                	shl    eax,cl
c00277fe:	89 c2                	mov    edx,eax
c0027800:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027803:	25 ff 07 00 00       	and    eax,0x7ff
c0027808:	39 d8                	cmp    eax,ebx
c002780a:	7f 22                	jg     c002782e <__adddf3+0x583>
c002780c:	29 c3                	sub    ebx,eax
c002780e:	43                   	inc    ebx
c002780f:	88 d9                	mov    cl,bl
c0027811:	d3 ea                	shr    edx,cl
c0027813:	29 df                	sub    edi,ebx
c0027815:	89 f9                	mov    ecx,edi
c0027817:	89 f0                	mov    eax,esi
c0027819:	d3 e0                	shl    eax,cl
c002781b:	09 c2                	or     edx,eax
c002781d:	89 f0                	mov    eax,esi
c002781f:	88 d9                	mov    cl,bl
c0027821:	d3 e8                	shr    eax,cl
c0027823:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027826:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002782c:	eb 6f                	jmp    c002789d <__adddf3+0x5f2>
c002782e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027831:	29 d8                	sub    eax,ebx
c0027833:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027836:	89 f0                	mov    eax,esi
c0027838:	eb 59                	jmp    c0027893 <__adddf3+0x5e8>
c002783a:	85 c0                	test   eax,eax
c002783c:	74 6a                	je     c00278a8 <__adddf3+0x5fd>
c002783e:	0f bd c8             	bsr    ecx,eax
c0027841:	83 f1 1f             	xor    ecx,0x1f
c0027844:	d3 e0                	shl    eax,cl
c0027846:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027849:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002784f:	83 c1 20             	add    ecx,0x20
c0027852:	39 cb                	cmp    ebx,ecx
c0027854:	7f 35                	jg     c002788b <__adddf3+0x5e0>
c0027856:	29 d9                	sub    ecx,ebx
c0027858:	8d 71 01             	lea    esi,[ecx+0x1]
c002785b:	83 fe 1f             	cmp    esi,0x1f
c002785e:	7e 09                	jle    c0027869 <__adddf3+0x5be>
c0027860:	83 e9 1f             	sub    ecx,0x1f
c0027863:	d3 e8                	shr    eax,cl
c0027865:	89 c3                	mov    ebx,eax
c0027867:	eb 11                	jmp    c002787a <__adddf3+0x5cf>
c0027869:	b9 20 00 00 00       	mov    ecx,0x20
c002786e:	29 f1                	sub    ecx,esi
c0027870:	89 c3                	mov    ebx,eax
c0027872:	d3 e3                	shl    ebx,cl
c0027874:	89 f1                	mov    ecx,esi
c0027876:	d3 e8                	shr    eax,cl
c0027878:	89 c2                	mov    edx,eax
c002787a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002787d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027882:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027885:	89 d0                	mov    eax,edx
c0027887:	89 da                	mov    edx,ebx
c0027889:	eb 26                	jmp    c00278b1 <__adddf3+0x606>
c002788b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002788e:	29 cf                	sub    edi,ecx
c0027890:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027893:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027898:	eb 17                	jmp    c00278b1 <__adddf3+0x606>
c002789a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002789d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278a0:	eb 0f                	jmp    c00278b1 <__adddf3+0x606>
c00278a2:	31 d2                	xor    edx,edx
c00278a4:	31 c0                	xor    eax,eax
c00278a6:	eb 09                	jmp    c00278b1 <__adddf3+0x606>
c00278a8:	89 c2                	mov    edx,eax
c00278aa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00278b1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278b4:	c1 e1 14             	shl    ecx,0x14
c00278b7:	89 c3                	mov    ebx,eax
c00278b9:	c1 eb 0b             	shr    ebx,0xb
c00278bc:	09 d9                	or     ecx,ebx
c00278be:	89 d3                	mov    ebx,edx
c00278c0:	c1 eb 0b             	shr    ebx,0xb
c00278c3:	c1 e0 15             	shl    eax,0x15
c00278c6:	09 d8                	or     eax,ebx
c00278c8:	89 c7                	mov    edi,eax
c00278ca:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00278d0:	0f 95 c0             	setne  al
c00278d3:	89 c6                	mov    esi,eax
c00278d5:	09 f3                	or     ebx,esi
c00278d7:	83 e3 01             	and    ebx,0x1
c00278da:	c1 ea 0a             	shr    edx,0xa
c00278dd:	21 da                	and    edx,ebx
c00278df:	89 f8                	mov    eax,edi
c00278e1:	01 d0                	add    eax,edx
c00278e3:	83 d1 00             	adc    ecx,0x0
c00278e6:	89 c7                	mov    edi,eax
c00278e8:	eb 06                	jmp    c00278f0 <__adddf3+0x645>
c00278ea:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278ed:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278f0:	89 f8                	mov    eax,edi
c00278f2:	89 ca                	mov    edx,ecx
c00278f4:	83 c4 24             	add    esp,0x24
c00278f7:	5b                   	pop    ebx
c00278f8:	5e                   	pop    esi
c00278f9:	5f                   	pop    edi
c00278fa:	5d                   	pop    ebp
c00278fb:	c3                   	ret    

c00278fc <__subdf3>:
c00278fc:	55                   	push   ebp
c00278fd:	89 e5                	mov    ebp,esp
c00278ff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027902:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027905:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002790b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002790e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027911:	5d                   	pop    ebp
c0027912:	e9 94 f9 ff ff       	jmp    c00272ab <__adddf3>

c0027917 <__negdf2>:
c0027917:	55                   	push   ebp
c0027918:	89 e5                	mov    ebp,esp
c002791a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002791d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027920:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027926:	5d                   	pop    ebp
c0027927:	c3                   	ret    

c0027928 <__muldf3>:
c0027928:	55                   	push   ebp
c0027929:	89 e5                	mov    ebp,esp
c002792b:	57                   	push   edi
c002792c:	56                   	push   esi
c002792d:	53                   	push   ebx
c002792e:	83 ec 24             	sub    esp,0x24
c0027931:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027934:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027937:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002793a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002793d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027940:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027943:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027946:	89 c8                	mov    eax,ecx
c0027948:	c1 f8 14             	sar    eax,0x14
c002794b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002794e:	89 f8                	mov    eax,edi
c0027950:	89 fb                	mov    ebx,edi
c0027952:	c1 e3 0b             	shl    ebx,0xb
c0027955:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027958:	c1 e1 0b             	shl    ecx,0xb
c002795b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027961:	c1 e8 15             	shr    eax,0x15
c0027964:	09 c1                	or     ecx,eax
c0027966:	89 d6                	mov    esi,edx
c0027968:	89 d0                	mov    eax,edx
c002796a:	c1 f8 14             	sar    eax,0x14
c002796d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027970:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027973:	89 c3                	mov    ebx,eax
c0027975:	c1 e3 0b             	shl    ebx,0xb
c0027978:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002797b:	c1 e6 0b             	shl    esi,0xb
c002797e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027984:	c1 e8 15             	shr    eax,0x15
c0027987:	09 c6                	or     esi,eax
c0027989:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002798c:	25 ff 07 00 00       	and    eax,0x7ff
c0027991:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027994:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027997:	25 ff 07 00 00       	and    eax,0x7ff
c002799c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002799f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00279a2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00279a5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00279ac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00279af:	40                   	inc    eax
c00279b0:	a9 fe 07 00 00       	test   eax,0x7fe
c00279b5:	0f 85 8d 00 00 00    	jne    c0027a48 <__muldf3+0x120>
c00279bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279be:	09 c8                	or     eax,ecx
c00279c0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00279c4:	74 44                	je     c0027a0a <__muldf3+0xe2>
c00279c6:	85 c0                	test   eax,eax
c00279c8:	0f 85 31 02 00 00    	jne    c0027bff <__muldf3+0x2d7>
c00279ce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279d1:	40                   	inc    eax
c00279d2:	a9 fe 07 00 00       	test   eax,0x7fe
c00279d7:	75 13                	jne    c00279ec <__muldf3+0xc4>
c00279d9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279dc:	09 f1                	or     ecx,esi
c00279de:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279e2:	74 22                	je     c0027a06 <__muldf3+0xde>
c00279e4:	85 c9                	test   ecx,ecx
c00279e6:	0f 85 0d 02 00 00    	jne    c0027bf9 <__muldf3+0x2d1>
c00279ec:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00279f0:	0f 89 09 02 00 00    	jns    c0027bff <__muldf3+0x2d7>
c00279f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279f9:	05 00 00 00 80       	add    eax,0x80000000
c00279fe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a01:	e9 f9 01 00 00       	jmp    c0027bff <__muldf3+0x2d7>
c0027a06:	85 c9                	test   ecx,ecx
c0027a08:	eb 2e                	jmp    c0027a38 <__muldf3+0x110>
c0027a0a:	85 c0                	test   eax,eax
c0027a0c:	74 20                	je     c0027a2e <__muldf3+0x106>
c0027a0e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027a11:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a14:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a17:	c1 ef 1f             	shr    edi,0x1f
c0027a1a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027a1d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027a20:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a23:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a26:	09 f9                	or     ecx,edi
c0027a28:	78 1e                	js     c0027a48 <__muldf3+0x120>
c0027a2a:	89 c3                	mov    ebx,eax
c0027a2c:	eb e0                	jmp    c0027a0e <__muldf3+0xe6>
c0027a2e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a31:	f7 d0                	not    eax
c0027a33:	a9 ff 07 00 00       	test   eax,0x7ff
c0027a38:	75 b2                	jne    c00279ec <__muldf3+0xc4>
c0027a3a:	31 ff                	xor    edi,edi
c0027a3c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027a43:	e9 b7 01 00 00       	jmp    c0027bff <__muldf3+0x2d7>
c0027a48:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a4b:	40                   	inc    eax
c0027a4c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a51:	75 57                	jne    c0027aaa <__muldf3+0x182>
c0027a53:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027a56:	09 f0                	or     eax,esi
c0027a58:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a5c:	74 23                	je     c0027a81 <__muldf3+0x159>
c0027a5e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a62:	0f 89 91 01 00 00    	jns    c0027bf9 <__muldf3+0x2d1>
c0027a68:	85 c0                	test   eax,eax
c0027a6a:	0f 85 89 01 00 00    	jne    c0027bf9 <__muldf3+0x2d1>
c0027a70:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a73:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027a79:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a7c:	e9 7e 01 00 00       	jmp    c0027bff <__muldf3+0x2d7>
c0027a81:	85 c0                	test   eax,eax
c0027a83:	75 0c                	jne    c0027a91 <__muldf3+0x169>
c0027a85:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a89:	0f 89 6a 01 00 00    	jns    c0027bf9 <__muldf3+0x2d1>
c0027a8f:	eb df                	jmp    c0027a70 <__muldf3+0x148>
c0027a91:	01 f6                	add    esi,esi
c0027a93:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a96:	c1 ea 1f             	shr    edx,0x1f
c0027a99:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a9c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027a9f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027aa2:	09 d6                	or     esi,edx
c0027aa4:	78 04                	js     c0027aaa <__muldf3+0x182>
c0027aa6:	89 c3                	mov    ebx,eax
c0027aa8:	eb e7                	jmp    c0027a91 <__muldf3+0x169>
c0027aaa:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027ab0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ab6:	89 c8                	mov    eax,ecx
c0027ab8:	f7 e6                	mul    esi
c0027aba:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027abd:	89 c7                	mov    edi,eax
c0027abf:	89 c8                	mov    eax,ecx
c0027ac1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ac4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027ac7:	89 c1                	mov    ecx,eax
c0027ac9:	89 f0                	mov    eax,esi
c0027acb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027ace:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027ad1:	89 c6                	mov    esi,eax
c0027ad3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ad6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ad9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027adc:	31 c0                	xor    eax,eax
c0027ade:	01 f1                	add    ecx,esi
c0027ae0:	0f 92 c0             	setb   al
c0027ae3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027ae6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027ae9:	83 d6 00             	adc    esi,0x0
c0027aec:	01 c7                	add    edi,eax
c0027aee:	83 d6 00             	adc    esi,0x0
c0027af1:	01 ca                	add    edx,ecx
c0027af3:	0f 92 c1             	setb   cl
c0027af6:	0f b6 c9             	movzx  ecx,cl
c0027af9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027afc:	83 d6 00             	adc    esi,0x0
c0027aff:	01 cf                	add    edi,ecx
c0027b01:	83 d6 00             	adc    esi,0x0
c0027b04:	31 c9                	xor    ecx,ecx
c0027b06:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027b09:	0f 95 c1             	setne  cl
c0027b0c:	09 cf                	or     edi,ecx
c0027b0e:	85 f6                	test   esi,esi
c0027b10:	78 0c                	js     c0027b1e <__muldf3+0x1f6>
c0027b12:	01 f6                	add    esi,esi
c0027b14:	89 f8                	mov    eax,edi
c0027b16:	c1 e8 1f             	shr    eax,0x1f
c0027b19:	09 c6                	or     esi,eax
c0027b1b:	01 ff                	add    edi,edi
c0027b1d:	4b                   	dec    ebx
c0027b1e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027b24:	0f 8f 85 00 00 00    	jg     c0027baf <__muldf3+0x287>
c0027b2a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027b30:	85 db                	test   ebx,ebx
c0027b32:	0f 8f 84 00 00 00    	jg     c0027bbc <__muldf3+0x294>
c0027b38:	83 fb cc             	cmp    ebx,0xffffffcc
c0027b3b:	7c 79                	jl     c0027bb6 <__muldf3+0x28e>
c0027b3d:	ba 01 00 00 00       	mov    edx,0x1
c0027b42:	29 da                	sub    edx,ebx
c0027b44:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b4a:	83 fa 1f             	cmp    edx,0x1f
c0027b4d:	7e 30                	jle    c0027b7f <__muldf3+0x257>
c0027b4f:	83 fa 20             	cmp    edx,0x20
c0027b52:	75 0b                	jne    c0027b5f <__muldf3+0x237>
c0027b54:	31 c0                	xor    eax,eax
c0027b56:	85 ff                	test   edi,edi
c0027b58:	0f 95 c0             	setne  al
c0027b5b:	89 c7                	mov    edi,eax
c0027b5d:	eb 1a                	jmp    c0027b79 <__muldf3+0x251>
c0027b5f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027b62:	89 f0                	mov    eax,esi
c0027b64:	d3 e0                	shl    eax,cl
c0027b66:	09 f8                	or     eax,edi
c0027b68:	0f 95 c0             	setne  al
c0027b6b:	0f b6 c0             	movzx  eax,al
c0027b6e:	89 c7                	mov    edi,eax
c0027b70:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027b75:	29 d9                	sub    ecx,ebx
c0027b77:	d3 ee                	shr    esi,cl
c0027b79:	09 f7                	or     edi,esi
c0027b7b:	31 db                	xor    ebx,ebx
c0027b7d:	eb 3b                	jmp    c0027bba <__muldf3+0x292>
c0027b7f:	83 c3 1f             	add    ebx,0x1f
c0027b82:	89 f0                	mov    eax,esi
c0027b84:	88 d9                	mov    cl,bl
c0027b86:	d3 e0                	shl    eax,cl
c0027b88:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b8b:	89 f8                	mov    eax,edi
c0027b8d:	88 d1                	mov    cl,dl
c0027b8f:	d3 e8                	shr    eax,cl
c0027b91:	89 c1                	mov    ecx,eax
c0027b93:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b96:	09 c8                	or     eax,ecx
c0027b98:	88 d9                	mov    cl,bl
c0027b9a:	d3 e7                	shl    edi,cl
c0027b9c:	31 db                	xor    ebx,ebx
c0027b9e:	85 ff                	test   edi,edi
c0027ba0:	0f 95 c3             	setne  bl
c0027ba3:	89 df                	mov    edi,ebx
c0027ba5:	09 c7                	or     edi,eax
c0027ba7:	88 d1                	mov    cl,dl
c0027ba9:	d3 ee                	shr    esi,cl
c0027bab:	31 db                	xor    ebx,ebx
c0027bad:	eb 0d                	jmp    c0027bbc <__muldf3+0x294>
c0027baf:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027bb4:	eb 02                	jmp    c0027bb8 <__muldf3+0x290>
c0027bb6:	31 db                	xor    ebx,ebx
c0027bb8:	31 ff                	xor    edi,edi
c0027bba:	31 f6                	xor    esi,esi
c0027bbc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bbf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027bc2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bc7:	09 c3                	or     ebx,eax
c0027bc9:	c1 e3 14             	shl    ebx,0x14
c0027bcc:	89 f0                	mov    eax,esi
c0027bce:	c1 e8 0b             	shr    eax,0xb
c0027bd1:	09 c3                	or     ebx,eax
c0027bd3:	89 f8                	mov    eax,edi
c0027bd5:	c1 e8 0b             	shr    eax,0xb
c0027bd8:	c1 e6 15             	shl    esi,0x15
c0027bdb:	09 c6                	or     esi,eax
c0027bdd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027be3:	0f 95 c1             	setne  cl
c0027be6:	09 c8                	or     eax,ecx
c0027be8:	83 e0 01             	and    eax,0x1
c0027beb:	c1 ef 0a             	shr    edi,0xa
c0027bee:	21 c7                	and    edi,eax
c0027bf0:	01 f7                	add    edi,esi
c0027bf2:	83 d3 00             	adc    ebx,0x0
c0027bf5:	89 da                	mov    edx,ebx
c0027bf7:	eb 03                	jmp    c0027bfc <__muldf3+0x2d4>
c0027bf9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bfc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027bff:	89 f8                	mov    eax,edi
c0027c01:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027c04:	83 c4 24             	add    esp,0x24
c0027c07:	5b                   	pop    ebx
c0027c08:	5e                   	pop    esi
c0027c09:	5f                   	pop    edi
c0027c0a:	5d                   	pop    ebp
c0027c0b:	c3                   	ret    

c0027c0c <__divdf3>:
c0027c0c:	55                   	push   ebp
c0027c0d:	89 e5                	mov    ebp,esp
c0027c0f:	57                   	push   edi
c0027c10:	56                   	push   esi
c0027c11:	53                   	push   ebx
c0027c12:	83 ec 2c             	sub    esp,0x2c
c0027c15:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c18:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c1b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c1e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c21:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027c24:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c27:	89 ce                	mov    esi,ecx
c0027c29:	89 c8                	mov    eax,ecx
c0027c2b:	c1 f8 14             	sar    eax,0x14
c0027c2e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c31:	89 f8                	mov    eax,edi
c0027c33:	89 fb                	mov    ebx,edi
c0027c35:	c1 e3 0b             	shl    ebx,0xb
c0027c38:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027c3b:	c1 e6 0b             	shl    esi,0xb
c0027c3e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c44:	c1 e8 15             	shr    eax,0x15
c0027c47:	09 c6                	or     esi,eax
c0027c49:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027c4c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c4f:	89 c2                	mov    edx,eax
c0027c51:	c1 fa 14             	sar    edx,0x14
c0027c54:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c57:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c5a:	89 de                	mov    esi,ebx
c0027c5c:	c1 e6 0b             	shl    esi,0xb
c0027c5f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027c62:	c1 e0 0b             	shl    eax,0xb
c0027c65:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c6a:	c1 eb 15             	shr    ebx,0x15
c0027c6d:	09 d8                	or     eax,ebx
c0027c6f:	89 c2                	mov    edx,eax
c0027c71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c74:	25 ff 07 00 00       	and    eax,0x7ff
c0027c79:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027c7c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c7f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c85:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027c88:	29 d8                	sub    eax,ebx
c0027c8a:	05 ff 03 00 00       	add    eax,0x3ff
c0027c8f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027c92:	46                   	inc    esi
c0027c93:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027c99:	0f 85 a5 00 00 00    	jne    c0027d44 <__divdf3+0x138>
c0027c9f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ca2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027ca5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ca9:	74 2a                	je     c0027cd5 <__divdf3+0xc9>
c0027cab:	85 f6                	test   esi,esi
c0027cad:	0f 85 cc 02 00 00    	jne    c0027f7f <__divdf3+0x373>
c0027cb3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cb6:	40                   	inc    eax
c0027cb7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cbc:	75 26                	jne    c0027ce4 <__divdf3+0xd8>
c0027cbe:	85 db                	test   ebx,ebx
c0027cc0:	74 22                	je     c0027ce4 <__divdf3+0xd8>
c0027cc2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027cc5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027cc8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ccb:	09 d0                	or     eax,edx
c0027ccd:	0f 85 ac 02 00 00    	jne    c0027f7f <__divdf3+0x373>
c0027cd3:	eb 63                	jmp    c0027d38 <__divdf3+0x12c>
c0027cd5:	85 f6                	test   esi,esi
c0027cd7:	75 22                	jne    c0027cfb <__divdf3+0xef>
c0027cd9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cdc:	40                   	inc    eax
c0027cdd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ce2:	74 36                	je     c0027d1a <__divdf3+0x10e>
c0027ce4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ce8:	0f 89 91 02 00 00    	jns    c0027f7f <__divdf3+0x373>
c0027cee:	89 f8                	mov    eax,edi
c0027cf0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027cf6:	e9 80 02 00 00       	jmp    c0027f7b <__divdf3+0x36f>
c0027cfb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027cfe:	01 f6                	add    esi,esi
c0027d00:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027d03:	c1 ef 1f             	shr    edi,0x1f
c0027d06:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027d09:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027d0c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027d0f:	09 f7                	or     edi,esi
c0027d11:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027d14:	78 2e                	js     c0027d44 <__divdf3+0x138>
c0027d16:	89 c8                	mov    eax,ecx
c0027d18:	eb e1                	jmp    c0027cfb <__divdf3+0xef>
c0027d1a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d1d:	09 d0                	or     eax,edx
c0027d1f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d23:	74 0f                	je     c0027d34 <__divdf3+0x128>
c0027d25:	85 c0                	test   eax,eax
c0027d27:	74 bb                	je     c0027ce4 <__divdf3+0xd8>
c0027d29:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d2c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d2f:	e9 4b 02 00 00       	jmp    c0027f7f <__divdf3+0x373>
c0027d34:	85 c0                	test   eax,eax
c0027d36:	75 ac                	jne    c0027ce4 <__divdf3+0xd8>
c0027d38:	31 ff                	xor    edi,edi
c0027d3a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027d3f:	e9 3b 02 00 00       	jmp    c0027f7f <__divdf3+0x373>
c0027d44:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d47:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027d4a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027d50:	75 6b                	jne    c0027dbd <__divdf3+0x1b1>
c0027d52:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d55:	09 d6                	or     esi,edx
c0027d57:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d5b:	74 28                	je     c0027d85 <__divdf3+0x179>
c0027d5d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d60:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d63:	85 f6                	test   esi,esi
c0027d65:	0f 85 14 02 00 00    	jne    c0027f7f <__divdf3+0x373>
c0027d6b:	31 ff                	xor    edi,edi
c0027d6d:	31 c9                	xor    ecx,ecx
c0027d6f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d72:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d75:	0f 89 04 02 00 00    	jns    c0027f7f <__divdf3+0x373>
c0027d7b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027d80:	e9 fa 01 00 00       	jmp    c0027f7f <__divdf3+0x373>
c0027d85:	85 f6                	test   esi,esi
c0027d87:	75 1b                	jne    c0027da4 <__divdf3+0x198>
c0027d89:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d8c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d8f:	25 00 00 00 80       	and    eax,0x80000000
c0027d94:	31 c9                	xor    ecx,ecx
c0027d96:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027d9b:	89 cf                	mov    edi,ecx
c0027d9d:	89 c1                	mov    ecx,eax
c0027d9f:	e9 db 01 00 00       	jmp    c0027f7f <__divdf3+0x373>
c0027da4:	01 d2                	add    edx,edx
c0027da6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027da9:	c1 eb 1f             	shr    ebx,0x1f
c0027dac:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027daf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027db2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027db5:	09 da                	or     edx,ebx
c0027db7:	78 04                	js     c0027dbd <__divdf3+0x1b1>
c0027db9:	89 c8                	mov    eax,ecx
c0027dbb:	eb e7                	jmp    c0027da4 <__divdf3+0x198>
c0027dbd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027dc0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dc6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027dcc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027dcf:	39 d6                	cmp    esi,edx
c0027dd1:	77 0d                	ja     c0027de0 <__divdf3+0x1d4>
c0027dd3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027dd6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027dd9:	72 1b                	jb     c0027df6 <__divdf3+0x1ea>
c0027ddb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027dde:	75 16                	jne    c0027df6 <__divdf3+0x1ea>
c0027de0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027de3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027de6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027de9:	83 de 00             	sbb    esi,0x0
c0027dec:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027def:	ba 01 00 00 00       	mov    edx,0x1
c0027df4:	eb 02                	jmp    c0027df8 <__divdf3+0x1ec>
c0027df6:	31 d2                	xor    edx,edx
c0027df8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027dff:	31 ff                	xor    edi,edi
c0027e01:	01 ff                	add    edi,edi
c0027e03:	89 d1                	mov    ecx,edx
c0027e05:	c1 e9 1f             	shr    ecx,0x1f
c0027e08:	09 cf                	or     edi,ecx
c0027e0a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027e0d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027e10:	89 da                	mov    edx,ebx
c0027e12:	89 f3                	mov    ebx,esi
c0027e14:	8d 34 36             	lea    esi,[esi+esi*1]
c0027e17:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e1a:	c1 e9 1f             	shr    ecx,0x1f
c0027e1d:	09 ce                	or     esi,ecx
c0027e1f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e22:	01 c9                	add    ecx,ecx
c0027e24:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027e27:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e2a:	85 db                	test   ebx,ebx
c0027e2c:	78 29                	js     c0027e57 <__divdf3+0x24b>
c0027e2e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027e31:	72 07                	jb     c0027e3a <__divdf3+0x22e>
c0027e33:	75 3c                	jne    c0027e71 <__divdf3+0x265>
c0027e35:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e38:	77 37                	ja     c0027e71 <__divdf3+0x265>
c0027e3a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e3d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027e40:	31 d2                	xor    edx,edx
c0027e42:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027e45:	0f 97 c2             	seta   dl
c0027e48:	29 d6                	sub    esi,edx
c0027e4a:	89 d9                	mov    ecx,ebx
c0027e4c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027e4f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e52:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027e55:	eb 17                	jmp    c0027e6e <__divdf3+0x262>
c0027e57:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e5a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e5d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e60:	0f 97 c1             	seta   cl
c0027e63:	0f b6 c9             	movzx  ecx,cl
c0027e66:	29 ce                	sub    esi,ecx
c0027e68:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027e6b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027e6e:	83 ca 01             	or     edx,0x1
c0027e71:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027e74:	75 8b                	jne    c0027e01 <__divdf3+0x1f5>
c0027e76:	c1 e7 09             	shl    edi,0x9
c0027e79:	89 d1                	mov    ecx,edx
c0027e7b:	c1 e9 17             	shr    ecx,0x17
c0027e7e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e81:	09 f3                	or     ebx,esi
c0027e83:	0f 95 c3             	setne  bl
c0027e86:	0f b6 db             	movzx  ebx,bl
c0027e89:	c1 e2 09             	shl    edx,0x9
c0027e8c:	09 d3                	or     ebx,edx
c0027e8e:	89 ca                	mov    edx,ecx
c0027e90:	09 fa                	or     edx,edi
c0027e92:	78 0c                	js     c0027ea0 <__divdf3+0x294>
c0027e94:	01 d2                	add    edx,edx
c0027e96:	89 d9                	mov    ecx,ebx
c0027e98:	c1 e9 1f             	shr    ecx,0x1f
c0027e9b:	09 ca                	or     edx,ecx
c0027e9d:	01 db                	add    ebx,ebx
c0027e9f:	48                   	dec    eax
c0027ea0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027ea5:	0f 8f 83 00 00 00    	jg     c0027f2e <__divdf3+0x322>
c0027eab:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027eb1:	85 c0                	test   eax,eax
c0027eb3:	0f 8f 82 00 00 00    	jg     c0027f3b <__divdf3+0x32f>
c0027eb9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027ebc:	7c 77                	jl     c0027f35 <__divdf3+0x329>
c0027ebe:	be 01 00 00 00       	mov    esi,0x1
c0027ec3:	29 c6                	sub    esi,eax
c0027ec5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ecb:	83 fe 1f             	cmp    esi,0x1f
c0027ece:	7e 2f                	jle    c0027eff <__divdf3+0x2f3>
c0027ed0:	83 fe 20             	cmp    esi,0x20
c0027ed3:	75 0a                	jne    c0027edf <__divdf3+0x2d3>
c0027ed5:	85 db                	test   ebx,ebx
c0027ed7:	0f 95 c3             	setne  bl
c0027eda:	0f b6 db             	movzx  ebx,bl
c0027edd:	eb 1a                	jmp    c0027ef9 <__divdf3+0x2ed>
c0027edf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027ee2:	89 d7                	mov    edi,edx
c0027ee4:	d3 e7                	shl    edi,cl
c0027ee6:	89 f9                	mov    ecx,edi
c0027ee8:	09 d9                	or     ecx,ebx
c0027eea:	0f 95 c3             	setne  bl
c0027eed:	0f b6 db             	movzx  ebx,bl
c0027ef0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ef5:	29 c1                	sub    ecx,eax
c0027ef7:	d3 ea                	shr    edx,cl
c0027ef9:	09 d3                	or     ebx,edx
c0027efb:	31 c0                	xor    eax,eax
c0027efd:	eb 3a                	jmp    c0027f39 <__divdf3+0x32d>
c0027eff:	83 c0 1f             	add    eax,0x1f
c0027f02:	89 d7                	mov    edi,edx
c0027f04:	88 c1                	mov    cl,al
c0027f06:	d3 e7                	shl    edi,cl
c0027f08:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f0b:	89 df                	mov    edi,ebx
c0027f0d:	89 f1                	mov    ecx,esi
c0027f0f:	d3 ef                	shr    edi,cl
c0027f11:	89 f9                	mov    ecx,edi
c0027f13:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f16:	09 cf                	or     edi,ecx
c0027f18:	88 c1                	mov    cl,al
c0027f1a:	d3 e3                	shl    ebx,cl
c0027f1c:	85 db                	test   ebx,ebx
c0027f1e:	0f 95 c3             	setne  bl
c0027f21:	0f b6 db             	movzx  ebx,bl
c0027f24:	09 fb                	or     ebx,edi
c0027f26:	89 f1                	mov    ecx,esi
c0027f28:	d3 ea                	shr    edx,cl
c0027f2a:	31 c0                	xor    eax,eax
c0027f2c:	eb 0d                	jmp    c0027f3b <__divdf3+0x32f>
c0027f2e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027f33:	eb 02                	jmp    c0027f37 <__divdf3+0x32b>
c0027f35:	31 c0                	xor    eax,eax
c0027f37:	31 db                	xor    ebx,ebx
c0027f39:	31 d2                	xor    edx,edx
c0027f3b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027f3e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027f41:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027f47:	09 c8                	or     eax,ecx
c0027f49:	c1 e0 14             	shl    eax,0x14
c0027f4c:	89 d1                	mov    ecx,edx
c0027f4e:	c1 e9 0b             	shr    ecx,0xb
c0027f51:	09 c8                	or     eax,ecx
c0027f53:	89 c6                	mov    esi,eax
c0027f55:	89 d9                	mov    ecx,ebx
c0027f57:	c1 e9 0b             	shr    ecx,0xb
c0027f5a:	c1 e2 15             	shl    edx,0x15
c0027f5d:	09 ca                	or     edx,ecx
c0027f5f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027f65:	0f 95 c0             	setne  al
c0027f68:	09 c1                	or     ecx,eax
c0027f6a:	83 e1 01             	and    ecx,0x1
c0027f6d:	c1 eb 0a             	shr    ebx,0xa
c0027f70:	21 cb                	and    ebx,ecx
c0027f72:	01 d3                	add    ebx,edx
c0027f74:	89 d8                	mov    eax,ebx
c0027f76:	83 d6 00             	adc    esi,0x0
c0027f79:	89 f2                	mov    edx,esi
c0027f7b:	89 c7                	mov    edi,eax
c0027f7d:	89 d1                	mov    ecx,edx
c0027f7f:	89 f8                	mov    eax,edi
c0027f81:	89 ca                	mov    edx,ecx
c0027f83:	83 c4 2c             	add    esp,0x2c
c0027f86:	5b                   	pop    ebx
c0027f87:	5e                   	pop    esi
c0027f88:	5f                   	pop    edi
c0027f89:	5d                   	pop    ebp
c0027f8a:	c3                   	ret    

c0027f8b <__floatsidf>:
c0027f8b:	55                   	push   ebp
c0027f8c:	89 e5                	mov    ebp,esp
c0027f8e:	56                   	push   esi
c0027f8f:	53                   	push   ebx
c0027f90:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f93:	85 db                	test   ebx,ebx
c0027f95:	7e 15                	jle    c0027fac <__floatsidf+0x21>
c0027f97:	0f bd cb             	bsr    ecx,ebx
c0027f9a:	83 f1 1f             	xor    ecx,0x1f
c0027f9d:	d3 e3                	shl    ebx,cl
c0027f9f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fa5:	b8 1e 04 00 00       	mov    eax,0x41e
c0027faa:	eb 21                	jmp    c0027fcd <__floatsidf+0x42>
c0027fac:	b8 00 00 00 00       	mov    eax,0x0
c0027fb1:	ba 00 00 00 00       	mov    edx,0x0
c0027fb6:	74 2a                	je     c0027fe2 <__floatsidf+0x57>
c0027fb8:	f7 db                	neg    ebx
c0027fba:	0f bd cb             	bsr    ecx,ebx
c0027fbd:	83 f1 1f             	xor    ecx,0x1f
c0027fc0:	d3 e3                	shl    ebx,cl
c0027fc2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fc8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027fcd:	29 c8                	sub    eax,ecx
c0027fcf:	c1 e0 14             	shl    eax,0x14
c0027fd2:	89 c1                	mov    ecx,eax
c0027fd4:	89 de                	mov    esi,ebx
c0027fd6:	c1 ee 0b             	shr    esi,0xb
c0027fd9:	09 f1                	or     ecx,esi
c0027fdb:	89 ca                	mov    edx,ecx
c0027fdd:	c1 e3 15             	shl    ebx,0x15
c0027fe0:	89 d8                	mov    eax,ebx
c0027fe2:	5b                   	pop    ebx
c0027fe3:	5e                   	pop    esi
c0027fe4:	5d                   	pop    ebp
c0027fe5:	c3                   	ret    

c0027fe6 <__floatunsidf>:
c0027fe6:	55                   	push   ebp
c0027fe7:	89 e5                	mov    ebp,esp
c0027fe9:	56                   	push   esi
c0027fea:	53                   	push   ebx
c0027feb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fee:	85 db                	test   ebx,ebx
c0027ff0:	74 2a                	je     c002801c <__floatunsidf+0x36>
c0027ff2:	0f bd cb             	bsr    ecx,ebx
c0027ff5:	83 f1 1f             	xor    ecx,0x1f
c0027ff8:	d3 e3                	shl    ebx,cl
c0027ffa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028000:	b8 1e 04 00 00       	mov    eax,0x41e
c0028005:	29 c8                	sub    eax,ecx
c0028007:	c1 e0 14             	shl    eax,0x14
c002800a:	89 c1                	mov    ecx,eax
c002800c:	89 de                	mov    esi,ebx
c002800e:	c1 ee 0b             	shr    esi,0xb
c0028011:	09 f1                	or     ecx,esi
c0028013:	89 ca                	mov    edx,ecx
c0028015:	c1 e3 15             	shl    ebx,0x15
c0028018:	89 d8                	mov    eax,ebx
c002801a:	eb 04                	jmp    c0028020 <__floatunsidf+0x3a>
c002801c:	31 c0                	xor    eax,eax
c002801e:	31 d2                	xor    edx,edx
c0028020:	5b                   	pop    ebx
c0028021:	5e                   	pop    esi
c0028022:	5d                   	pop    ebp
c0028023:	c3                   	ret    

c0028024 <__fixdfsi>:
c0028024:	55                   	push   ebp
c0028025:	89 e5                	mov    ebp,esp
c0028027:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002802a:	89 d1                	mov    ecx,edx
c002802c:	c1 e1 0b             	shl    ecx,0xb
c002802f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028038:	c1 e8 15             	shr    eax,0x15
c002803b:	09 c1                	or     ecx,eax
c002803d:	c1 fa 14             	sar    edx,0x14
c0028040:	78 1f                	js     c0028061 <__fixdfsi+0x3d>
c0028042:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028048:	31 c0                	xor    eax,eax
c002804a:	83 fa 1e             	cmp    edx,0x1e
c002804d:	77 40                	ja     c002808f <__fixdfsi+0x6b>
c002804f:	89 c8                	mov    eax,ecx
c0028051:	0d 00 00 00 80       	or     eax,0x80000000
c0028056:	b9 1f 00 00 00       	mov    ecx,0x1f
c002805b:	29 d1                	sub    ecx,edx
c002805d:	d3 e8                	shr    eax,cl
c002805f:	eb 2e                	jmp    c002808f <__fixdfsi+0x6b>
c0028061:	31 c0                	xor    eax,eax
c0028063:	81 c2 01 04 00 00    	add    edx,0x401
c0028069:	78 24                	js     c002808f <__fixdfsi+0x6b>
c002806b:	83 fa 1e             	cmp    edx,0x1e
c002806e:	7e 09                	jle    c0028079 <__fixdfsi+0x55>
c0028070:	83 fa 1f             	cmp    edx,0x1f
c0028073:	75 18                	jne    c002808d <__fixdfsi+0x69>
c0028075:	85 c9                	test   ecx,ecx
c0028077:	75 14                	jne    c002808d <__fixdfsi+0x69>
c0028079:	89 c8                	mov    eax,ecx
c002807b:	0d 00 00 00 80       	or     eax,0x80000000
c0028080:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028085:	29 d1                	sub    ecx,edx
c0028087:	d3 e8                	shr    eax,cl
c0028089:	f7 d8                	neg    eax
c002808b:	eb 02                	jmp    c002808f <__fixdfsi+0x6b>
c002808d:	31 c0                	xor    eax,eax
c002808f:	5d                   	pop    ebp
c0028090:	c3                   	ret    

c0028091 <__fixunsdfsi>:
c0028091:	55                   	push   ebp
c0028092:	89 e5                	mov    ebp,esp
c0028094:	53                   	push   ebx
c0028095:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028098:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002809b:	89 d3                	mov    ebx,edx
c002809d:	c1 fb 14             	sar    ebx,0x14
c00280a0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00280a6:	31 c0                	xor    eax,eax
c00280a8:	83 fb 1f             	cmp    ebx,0x1f
c00280ab:	77 1d                	ja     c00280ca <__fixunsdfsi+0x39>
c00280ad:	89 d0                	mov    eax,edx
c00280af:	c1 e0 0b             	shl    eax,0xb
c00280b2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00280b7:	c1 e9 15             	shr    ecx,0x15
c00280ba:	09 c8                	or     eax,ecx
c00280bc:	0d 00 00 00 80       	or     eax,0x80000000
c00280c1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00280c6:	29 d9                	sub    ecx,ebx
c00280c8:	d3 e8                	shr    eax,cl
c00280ca:	5b                   	pop    ebx
c00280cb:	5d                   	pop    ebp
c00280cc:	c3                   	ret    

c00280cd <__cmpdf2>:
c00280cd:	55                   	push   ebp
c00280ce:	89 e5                	mov    ebp,esp
c00280d0:	57                   	push   edi
c00280d1:	56                   	push   esi
c00280d2:	53                   	push   ebx
c00280d3:	83 ec 0c             	sub    esp,0xc
c00280d6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00280d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00280dc:	89 ca                	mov    edx,ecx
c00280de:	c1 ea 14             	shr    edx,0x14
c00280e1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00280e7:	89 cb                	mov    ebx,ecx
c00280e9:	c1 fb 1f             	sar    ebx,0x1f
c00280ec:	31 da                	xor    edx,ebx
c00280ee:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280f1:	89 df                	mov    edi,ebx
c00280f3:	c1 e7 0b             	shl    edi,0xb
c00280f6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280f9:	c1 e1 0b             	shl    ecx,0xb
c00280fc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028102:	c1 eb 15             	shr    ebx,0x15
c0028105:	09 d9                	or     ecx,ebx
c0028107:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002810a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002810d:	89 ce                	mov    esi,ecx
c002810f:	c1 ee 14             	shr    esi,0x14
c0028112:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028118:	89 cb                	mov    ebx,ecx
c002811a:	c1 fb 1f             	sar    ebx,0x1f
c002811d:	31 de                	xor    esi,ebx
c002811f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028122:	89 df                	mov    edi,ebx
c0028124:	c1 e7 0b             	shl    edi,0xb
c0028127:	c1 e1 0b             	shl    ecx,0xb
c002812a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028130:	c1 eb 15             	shr    ebx,0x15
c0028133:	09 d9                	or     ecx,ebx
c0028135:	89 d3                	mov    ebx,edx
c0028137:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002813d:	43                   	inc    ebx
c002813e:	83 fb 01             	cmp    ebx,0x1
c0028141:	77 08                	ja     c002814b <__cmpdf2+0x7e>
c0028143:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028146:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028149:	75 68                	jne    c00281b3 <__cmpdf2+0xe6>
c002814b:	89 f3                	mov    ebx,esi
c002814d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028153:	43                   	inc    ebx
c0028154:	83 fb 01             	cmp    ebx,0x1
c0028157:	77 06                	ja     c002815f <__cmpdf2+0x92>
c0028159:	89 fb                	mov    ebx,edi
c002815b:	09 cb                	or     ebx,ecx
c002815d:	75 54                	jne    c00281b3 <__cmpdf2+0xe6>
c002815f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028162:	09 f8                	or     eax,edi
c0028164:	09 c8                	or     eax,ecx
c0028166:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028169:	75 12                	jne    c002817d <__cmpdf2+0xb0>
c002816b:	8d 42 01             	lea    eax,[edx+0x1]
c002816e:	83 f8 01             	cmp    eax,0x1
c0028171:	77 0a                	ja     c002817d <__cmpdf2+0xb0>
c0028173:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028176:	31 c0                	xor    eax,eax
c0028178:	83 fb 01             	cmp    ebx,0x1
c002817b:	76 36                	jbe    c00281b3 <__cmpdf2+0xe6>
c002817d:	b8 01 00 00 00       	mov    eax,0x1
c0028182:	39 f2                	cmp    edx,esi
c0028184:	7f 2d                	jg     c00281b3 <__cmpdf2+0xe6>
c0028186:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002818b:	7c 26                	jl     c00281b3 <__cmpdf2+0xe6>
c002818d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028190:	77 07                	ja     c0028199 <__cmpdf2+0xcc>
c0028192:	72 16                	jb     c00281aa <__cmpdf2+0xdd>
c0028194:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028197:	76 0a                	jbe    c00281a3 <__cmpdf2+0xd6>
c0028199:	89 d0                	mov    eax,edx
c002819b:	c1 f8 1f             	sar    eax,0x1f
c002819e:	83 c8 01             	or     eax,0x1
c00281a1:	eb 10                	jmp    c00281b3 <__cmpdf2+0xe6>
c00281a3:	b8 00 00 00 00       	mov    eax,0x0
c00281a8:	73 09                	jae    c00281b3 <__cmpdf2+0xe6>
c00281aa:	89 d0                	mov    eax,edx
c00281ac:	c1 f8 1f             	sar    eax,0x1f
c00281af:	83 e0 02             	and    eax,0x2
c00281b2:	48                   	dec    eax
c00281b3:	83 c4 0c             	add    esp,0xc
c00281b6:	5b                   	pop    ebx
c00281b7:	5e                   	pop    esi
c00281b8:	5f                   	pop    edi
c00281b9:	5d                   	pop    ebp
c00281ba:	c3                   	ret    

c00281bb <__eqdf2>:
c00281bb:	55                   	push   ebp
c00281bc:	89 e5                	mov    ebp,esp
c00281be:	50                   	push   eax
c00281bf:	6a 01                	push   0x1
c00281c1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281c4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281c7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281cd:	e8 fb fe ff ff       	call   c00280cd <__cmpdf2>
c00281d2:	83 c4 18             	add    esp,0x18
c00281d5:	c9                   	leave  
c00281d6:	c3                   	ret    

c00281d7 <__nedf2>:
c00281d7:	eb e2                	jmp    c00281bb <__eqdf2>

c00281d9 <__gtdf2>:
c00281d9:	55                   	push   ebp
c00281da:	89 e5                	mov    ebp,esp
c00281dc:	50                   	push   eax
c00281dd:	6a ff                	push   0xffffffff
c00281df:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281e2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281e5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281eb:	e8 dd fe ff ff       	call   c00280cd <__cmpdf2>
c00281f0:	83 c4 18             	add    esp,0x18
c00281f3:	c9                   	leave  
c00281f4:	c3                   	ret    

c00281f5 <__gedf2>:
c00281f5:	eb e2                	jmp    c00281d9 <__gtdf2>

c00281f7 <__ltdf2>:
c00281f7:	eb c2                	jmp    c00281bb <__eqdf2>

c00281f9 <__ledf2>:
c00281f9:	eb c0                	jmp    c00281bb <__eqdf2>

c00281fb <__truncdfsf2>:
c00281fb:	55                   	push   ebp
c00281fc:	89 e5                	mov    ebp,esp
c00281fe:	57                   	push   edi
c00281ff:	56                   	push   esi
c0028200:	53                   	push   ebx
c0028201:	83 ec 0c             	sub    esp,0xc
c0028204:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028207:	89 d1                	mov    ecx,edx
c0028209:	c1 f9 14             	sar    ecx,0x14
c002820c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002820f:	89 df                	mov    edi,ebx
c0028211:	c1 e7 0b             	shl    edi,0xb
c0028214:	89 d0                	mov    eax,edx
c0028216:	c1 e0 0b             	shl    eax,0xb
c0028219:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002821e:	c1 eb 15             	shr    ebx,0x15
c0028221:	09 d8                	or     eax,ebx
c0028223:	89 cb                	mov    ebx,ecx
c0028225:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002822b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028231:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028237:	0f 86 9e 00 00 00    	jbe    c00282db <__truncdfsf2+0xe0>
c002823d:	85 db                	test   ebx,ebx
c002823f:	75 0a                	jne    c002824b <__truncdfsf2+0x50>
c0028241:	c1 fa 17             	sar    edx,0x17
c0028244:	30 d2                	xor    dl,dl
c0028246:	e9 84 00 00 00       	jmp    c00282cf <__truncdfsf2+0xd4>
c002824b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028251:	83 fe 83             	cmp    esi,0xffffff83
c0028254:	7d 4b                	jge    c00282a1 <__truncdfsf2+0xa6>
c0028256:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002825b:	29 f1                	sub    ecx,esi
c002825d:	83 f9 1f             	cmp    ecx,0x1f
c0028260:	7f 6b                	jg     c00282cd <__truncdfsf2+0xd2>
c0028262:	0d 00 00 00 80       	or     eax,0x80000000
c0028267:	89 c3                	mov    ebx,eax
c0028269:	d3 eb                	shr    ebx,cl
c002826b:	be 01 00 00 00       	mov    esi,0x1
c0028270:	d3 e6                	shl    esi,cl
c0028272:	4e                   	dec    esi
c0028273:	21 f0                	and    eax,esi
c0028275:	09 f8                	or     eax,edi
c0028277:	0f 95 c0             	setne  al
c002827a:	0f b6 c0             	movzx  eax,al
c002827d:	09 c3                	or     ebx,eax
c002827f:	89 d9                	mov    ecx,ebx
c0028281:	c1 e9 08             	shr    ecx,0x8
c0028284:	f6 c3 7f             	test   bl,0x7f
c0028287:	0f 95 c0             	setne  al
c002828a:	09 c8                	or     eax,ecx
c002828c:	83 e0 01             	and    eax,0x1
c002828f:	c1 eb 07             	shr    ebx,0x7
c0028292:	21 c3                	and    ebx,eax
c0028294:	81 e2 00 00 00 80    	and    edx,0x80000000
c002829a:	09 d1                	or     ecx,edx
c002829c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002829f:	eb 76                	jmp    c0028317 <__truncdfsf2+0x11c>
c00282a1:	83 c6 80             	add    esi,0xffffff80
c00282a4:	7e 1d                	jle    c00282c3 <__truncdfsf2+0xc8>
c00282a6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00282ac:	75 0b                	jne    c00282b9 <__truncdfsf2+0xbe>
c00282ae:	09 f8                	or     eax,edi
c00282b0:	74 09                	je     c00282bb <__truncdfsf2+0xc0>
c00282b2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00282b7:	eb 02                	jmp    c00282bb <__truncdfsf2+0xc0>
c00282b9:	31 c0                	xor    eax,eax
c00282bb:	c1 fa 17             	sar    edx,0x17
c00282be:	80 ca ff             	or     dl,0xff
c00282c1:	eb 0e                	jmp    c00282d1 <__truncdfsf2+0xd6>
c00282c3:	c1 fa 1f             	sar    edx,0x1f
c00282c6:	c1 e2 08             	shl    edx,0x8
c00282c9:	09 ca                	or     edx,ecx
c00282cb:	eb 04                	jmp    c00282d1 <__truncdfsf2+0xd6>
c00282cd:	31 d2                	xor    edx,edx
c00282cf:	31 c0                	xor    eax,eax
c00282d1:	c1 e2 17             	shl    edx,0x17
c00282d4:	c1 e8 08             	shr    eax,0x8
c00282d7:	09 d0                	or     eax,edx
c00282d9:	eb 3c                	jmp    c0028317 <__truncdfsf2+0x11c>
c00282db:	81 e9 80 03 00 00    	sub    ecx,0x380
c00282e1:	89 ca                	mov    edx,ecx
c00282e3:	c1 fa 0b             	sar    edx,0xb
c00282e6:	c1 e2 08             	shl    edx,0x8
c00282e9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00282ec:	31 db                	xor    ebx,ebx
c00282ee:	85 ff                	test   edi,edi
c00282f0:	0f 95 c3             	setne  bl
c00282f3:	09 d8                	or     eax,ebx
c00282f5:	89 c3                	mov    ebx,eax
c00282f7:	c1 eb 08             	shr    ebx,0x8
c00282fa:	a8 7f                	test   al,0x7f
c00282fc:	0f 95 c2             	setne  dl
c00282ff:	89 d6                	mov    esi,edx
c0028301:	09 de                	or     esi,ebx
c0028303:	83 e6 01             	and    esi,0x1
c0028306:	c1 e8 07             	shr    eax,0x7
c0028309:	21 f0                	and    eax,esi
c002830b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002830e:	09 ca                	or     edx,ecx
c0028310:	c1 e2 17             	shl    edx,0x17
c0028313:	09 da                	or     edx,ebx
c0028315:	01 d0                	add    eax,edx
c0028317:	83 c4 0c             	add    esp,0xc
c002831a:	5b                   	pop    ebx
c002831b:	5e                   	pop    esi
c002831c:	5f                   	pop    edi
c002831d:	5d                   	pop    ebp
c002831e:	c3                   	ret    

c002831f <__extendsfdf2>:
c002831f:	55                   	push   ebp
c0028320:	89 e5                	mov    ebp,esp
c0028322:	57                   	push   edi
c0028323:	56                   	push   esi
c0028324:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028327:	89 d1                	mov    ecx,edx
c0028329:	c1 f9 17             	sar    ecx,0x17
c002832c:	c1 e2 08             	shl    edx,0x8
c002832f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028335:	89 c8                	mov    eax,ecx
c0028337:	80 e4 f8             	and    ah,0xf8
c002833a:	8d 71 01             	lea    esi,[ecx+0x1]
c002833d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028343:	75 27                	jne    c002836c <__extendsfdf2+0x4d>
c0028345:	81 e1 ff 00 00 00    	and    ecx,0xff
c002834b:	75 18                	jne    c0028365 <__extendsfdf2+0x46>
c002834d:	85 d2                	test   edx,edx
c002834f:	74 20                	je     c0028371 <__extendsfdf2+0x52>
c0028351:	41                   	inc    ecx
c0028352:	01 d2                	add    edx,edx
c0028354:	79 fb                	jns    c0028351 <__extendsfdf2+0x32>
c0028356:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002835c:	29 c8                	sub    eax,ecx
c002835e:	05 81 03 00 00       	add    eax,0x381
c0028363:	eb 0c                	jmp    c0028371 <__extendsfdf2+0x52>
c0028365:	05 00 07 00 00       	add    eax,0x700
c002836a:	eb 05                	jmp    c0028371 <__extendsfdf2+0x52>
c002836c:	05 80 03 00 00       	add    eax,0x380
c0028371:	c1 e0 14             	shl    eax,0x14
c0028374:	89 c1                	mov    ecx,eax
c0028376:	89 d0                	mov    eax,edx
c0028378:	c1 e8 0b             	shr    eax,0xb
c002837b:	09 c1                	or     ecx,eax
c002837d:	c1 e2 15             	shl    edx,0x15
c0028380:	89 d0                	mov    eax,edx
c0028382:	89 ca                	mov    edx,ecx
c0028384:	5e                   	pop    esi
c0028385:	5f                   	pop    edi
c0028386:	5d                   	pop    ebp
c0028387:	c3                   	ret    
c0028388:	66 90                	xchg   ax,ax
c002838a:	66 90                	xchg   ax,ax
c002838c:	66 90                	xchg   ax,ax
c002838e:	66 90                	xchg   ax,ax

c0028390 <fabs>:
c0028390:	83 ec 0c             	sub    esp,0xc
c0028393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028397:	89 04 24             	mov    DWORD PTR [esp],eax
c002839a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002839e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00283a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00283a7:	dd 04 24             	fld    QWORD PTR [esp]
c00283aa:	83 c4 0c             	add    esp,0xc
c00283ad:	c3                   	ret    
c00283ae:	66 90                	xchg   ax,ax

c00283b0 <lrint>:
c00283b0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00283b4:	83 ec 04             	sub    esp,0x4
c00283b7:	db 1c 24             	fistp  DWORD PTR [esp]
c00283ba:	58                   	pop    eax
c00283bb:	c3                   	ret    

c00283bc <lrintf>:
c00283bc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00283c0:	83 ec 04             	sub    esp,0x4
c00283c3:	db 1c 24             	fistp  DWORD PTR [esp]
c00283c6:	58                   	pop    eax
c00283c7:	c3                   	ret    

Disassembly of section .init:

c00283c8 <_init>:
c00283c8:	55                   	push   ebp
c00283c9:	89 e5                	mov    ebp,esp
c00283cb:	e8 48 7d fd ff       	call   c0000118 <frame_dummy>
c00283d0:	e8 5b e0 ff ff       	call   c0026430 <__do_global_ctors_aux>
c00283d5:	5d                   	pop    ebp
c00283d6:	c3                   	ret    

Disassembly of section .fini:

c00283d7 <_fini>:
c00283d7:	55                   	push   ebp
c00283d8:	89 e5                	mov    ebp,esp
c00283da:	e8 c9 7c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00283df:	5d                   	pop    ebp
c00283e0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00283e2 <Computer::~Computer()>:
c00283e2:	83 ec 0c             	sub    esp,0xc
c00283e5:	ba 5c 9f 02 c0       	mov    edx,0xc0029f5c
c00283ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ee:	89 10                	mov    DWORD PTR [eax],edx
c00283f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f4:	83 ec 0c             	sub    esp,0xc
c00283f7:	50                   	push   eax
c00283f8:	e8 ed b5 fe ff       	call   c00139ea <Device::~Device()>
c00283fd:	83 c4 10             	add    esp,0x10
c0028400:	90                   	nop
c0028401:	83 c4 0c             	add    esp,0xc
c0028404:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028406 <Computer::~Computer()>:
c0028406:	83 ec 0c             	sub    esp,0xc
c0028409:	83 ec 0c             	sub    esp,0xc
c002840c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028410:	e8 cd ff ff ff       	call   c00283e2 <Computer::~Computer()>
c0028415:	83 c4 10             	add    esp,0x10
c0028418:	83 ec 08             	sub    esp,0x8
c002841b:	68 ec 01 00 00       	push   0x1ec
c0028420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028424:	e8 e2 a1 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028429:	83 c4 10             	add    esp,0x10
c002842c:	83 c4 0c             	add    esp,0xc
c002842f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028430 <idleCommon()>:
c0028430:	83 ec 0c             	sub    esp,0xc
c0028433:	fa                   	cli    
c0028434:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c002843a:	e8 a2 55 ff ff       	call   c001d9e1 <schedule()>
c002843f:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0028444:	48                   	dec    eax
c0028445:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c002844a:	75 01                	jne    c002844d <idleCommon()+0x1d>
c002844c:	fb                   	sti    
c002844d:	83 c4 0c             	add    esp,0xc
c0028450:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028452 <LinkedList<UnixFile>::~LinkedList()>:
c0028452:	90                   	nop
c0028453:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028454 <LinkedList<UnixFile>::LinkedList()>:
c0028454:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028458:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002845e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028462:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028469:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002846d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028478:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002847e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028482:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002848d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028494:	90                   	nop
c0028495:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028496 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028496:	83 ec 0c             	sub    esp,0xc
c0028499:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002849e:	75 10                	jne    c00284b0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00284a0:	83 ec 0c             	sub    esp,0xc
c00284a3:	68 14 a2 02 c0       	push   0xc002a214
c00284a8:	e8 a2 19 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c00284ad:	83 c4 10             	add    esp,0x10
c00284b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00284b6:	85 c0                	test   eax,eax
c00284b8:	74 34                	je     c00284ee <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284c1:	85 c0                	test   eax,eax
c00284c3:	74 29                	je     c00284ee <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284ec:	eb 65                	jmp    c0028553 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00284f4:	85 c0                	test   eax,eax
c00284f6:	75 4b                	jne    c0028543 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284ff:	85 c0                	test   eax,eax
c0028501:	75 40                	jne    c0028543 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028507:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002850b:	89 10                	mov    DWORD PTR [eax],edx
c002850d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028511:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028515:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002851c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002851f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002852a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002852d:	85 c0                	test   eax,eax
c002852f:	74 22                	je     c0028553 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028531:	83 ec 0c             	sub    esp,0xc
c0028534:	68 36 a2 02 c0       	push   0xc002a236
c0028539:	e8 11 19 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c002853e:	83 c4 10             	add    esp,0x10
c0028541:	eb 10                	jmp    c0028553 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028543:	83 ec 0c             	sub    esp,0xc
c0028546:	68 40 a2 02 c0       	push   0xc002a240
c002854b:	e8 ff 18 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0028550:	83 c4 10             	add    esp,0x10
c0028553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028557:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002855a:	8d 50 01             	lea    edx,[eax+0x1]
c002855d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028561:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028564:	90                   	nop
c0028565:	83 c4 0c             	add    esp,0xc
c0028568:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002856a <LinkedList<UnixFile>::getFirstElement()>:
c002856a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002856e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028570:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028572 <LinkedList<UnixFile>::removeFirst()>:
c0028572:	83 ec 0c             	sub    esp,0xc
c0028575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028579:	8b 00                	mov    eax,DWORD PTR [eax]
c002857b:	85 c0                	test   eax,eax
c002857d:	75 12                	jne    c0028591 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002857f:	83 ec 0c             	sub    esp,0xc
c0028582:	68 4c a2 02 c0       	push   0xc002a24c
c0028587:	e8 c3 18 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c002858c:	83 c4 10             	add    esp,0x10
c002858f:	eb 7e                	jmp    c002860f <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028595:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028598:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002859b:	85 c0                	test   eax,eax
c002859d:	74 10                	je     c00285af <LinkedList<UnixFile>::removeFirst()+0x3d>
c002859f:	83 ec 0c             	sub    esp,0xc
c00285a2:	68 97 a2 02 c0       	push   0xc002a297
c00285a7:	e8 a3 18 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c00285ac:	83 c4 10             	add    esp,0x10
c00285af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285b8:	85 c0                	test   eax,eax
c00285ba:	75 33                	jne    c00285ef <LinkedList<UnixFile>::removeFirst()+0x7d>
c00285bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285d8:	83 f8 01             	cmp    eax,0x1
c00285db:	74 21                	je     c00285fe <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285dd:	83 ec 0c             	sub    esp,0xc
c00285e0:	68 70 a2 02 c0       	push   0xc002a270
c00285e5:	e8 65 18 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c00285ea:	83 c4 10             	add    esp,0x10
c00285ed:	eb 0f                	jmp    c00285fe <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285f5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00285f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285fc:	89 10                	mov    DWORD PTR [eax],edx
c00285fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028602:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028605:	8d 50 ff             	lea    edx,[eax-0x1]
c0028608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002860f:	83 c4 0c             	add    esp,0xc
c0028612:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028614 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028614:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028618:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002861b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002861c <DriverlessDevice::~DriverlessDevice()>:
c002861c:	ba fc aa 02 c0       	mov    edx,0xc002aafc
c0028621:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028625:	89 10                	mov    DWORD PTR [eax],edx
c0028627:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002862b:	50                   	push   eax
c002862c:	e8 b9 b3 fe ff       	call   c00139ea <Device::~Device()>
c0028631:	83 c4 04             	add    esp,0x4
c0028634:	90                   	nop
c0028635:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028636 <DriverlessDevice::~DriverlessDevice()>:
c0028636:	83 ec 0c             	sub    esp,0xc
c0028639:	83 ec 0c             	sub    esp,0xc
c002863c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028640:	e8 d7 ff ff ff       	call   c002861c <DriverlessDevice::~DriverlessDevice()>
c0028645:	83 c4 10             	add    esp,0x10
c0028648:	83 ec 08             	sub    esp,0x8
c002864b:	68 58 01 00 00       	push   0x158
c0028650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028654:	e8 b2 9f fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028659:	83 c4 10             	add    esp,0x10
c002865c:	83 c4 0c             	add    esp,0xc
c002865f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028660 <LinkedList<Device>::addElement(Device*)>:
c0028660:	83 ec 0c             	sub    esp,0xc
c0028663:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028668:	75 10                	jne    c002867a <LinkedList<Device>::addElement(Device*)+0x1a>
c002866a:	83 ec 0c             	sub    esp,0xc
c002866d:	68 14 a2 02 c0       	push   0xc002a214
c0028672:	e8 d8 17 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0028677:	83 c4 10             	add    esp,0x10
c002867a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028680:	85 c0                	test   eax,eax
c0028682:	74 3a                	je     c00286be <LinkedList<Device>::addElement(Device*)+0x5e>
c0028684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028688:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002868b:	85 c0                	test   eax,eax
c002868d:	74 2f                	je     c00286be <LinkedList<Device>::addElement(Device*)+0x5e>
c002868f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028693:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028696:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002869a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00286a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286b2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286bc:	eb 68                	jmp    c0028726 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00286c4:	85 c0                	test   eax,eax
c00286c6:	75 4e                	jne    c0028716 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286cf:	85 c0                	test   eax,eax
c00286d1:	75 43                	jne    c0028716 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286db:	89 10                	mov    DWORD PTR [eax],edx
c00286dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286ef:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028700:	85 c0                	test   eax,eax
c0028702:	74 22                	je     c0028726 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028704:	83 ec 0c             	sub    esp,0xc
c0028707:	68 36 a2 02 c0       	push   0xc002a236
c002870c:	e8 3e 17 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0028711:	83 c4 10             	add    esp,0x10
c0028714:	eb 10                	jmp    c0028726 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028716:	83 ec 0c             	sub    esp,0xc
c0028719:	68 40 a2 02 c0       	push   0xc002a240
c002871e:	e8 2c 17 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0028723:	83 c4 10             	add    esp,0x10
c0028726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002872d:	8d 50 01             	lea    edx,[eax+0x1]
c0028730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028734:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028737:	90                   	nop
c0028738:	83 c4 0c             	add    esp,0xc
c002873b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002873c <LinkedList<Device>::LinkedList()>:
c002873c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028740:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002874a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028755:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002875c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028760:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002876a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028771:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028775:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002877c:	90                   	nop
c002877d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002877e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002877e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028782:	8b 00                	mov    eax,DWORD PTR [eax]
c0028784:	85 c0                	test   eax,eax
c0028786:	75 0e                	jne    c0028796 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002878c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002878f:	85 c0                	test   eax,eax
c0028791:	75 03                	jne    c0028796 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028793:	b0 01                	mov    al,0x1
c0028795:	c3                   	ret    
c0028796:	b0 00                	mov    al,0x0
c0028798:	90                   	nop
c0028799:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002879a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002879a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002879e:	8b 00                	mov    eax,DWORD PTR [eax]
c00287a0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00287a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00287a2:	83 ec 0c             	sub    esp,0xc
c00287a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ab:	85 c0                	test   eax,eax
c00287ad:	75 15                	jne    c00287c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00287af:	83 ec 0c             	sub    esp,0xc
c00287b2:	68 4c a2 02 c0       	push   0xc002a24c
c00287b7:	e8 93 16 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c00287bc:	83 c4 10             	add    esp,0x10
c00287bf:	e9 88 00 00 00       	jmp    c002884c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00287c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287ce:	85 c0                	test   eax,eax
c00287d0:	0f 95 c0             	setne  al
c00287d3:	84 c0                	test   al,al
c00287d5:	74 10                	je     c00287e7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00287d7:	83 ec 0c             	sub    esp,0xc
c00287da:	68 97 a2 02 c0       	push   0xc002a297
c00287df:	e8 6b 16 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c00287e4:	83 c4 10             	add    esp,0x10
c00287e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287f0:	85 c0                	test   eax,eax
c00287f2:	0f 94 c0             	sete   al
c00287f5:	84 c0                	test   al,al
c00287f7:	74 33                	je     c002882c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00287f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028807:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002880e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028812:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028815:	83 f8 01             	cmp    eax,0x1
c0028818:	74 21                	je     c002883b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002881a:	83 ec 0c             	sub    esp,0xc
c002881d:	68 70 a2 02 c0       	push   0xc002a270
c0028822:	e8 28 16 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0028827:	83 c4 10             	add    esp,0x10
c002882a:	eb 0f                	jmp    c002883b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002882c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028830:	8b 00                	mov    eax,DWORD PTR [eax]
c0028832:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028839:	89 10                	mov    DWORD PTR [eax],edx
c002883b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028842:	8d 50 ff             	lea    edx,[eax-0x1]
c0028845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028849:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002884c:	83 c4 0c             	add    esp,0xc
c002884f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028850:	83 ec 0c             	sub    esp,0xc
c0028853:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028858:	75 10                	jne    c002886a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002885a:	83 ec 0c             	sub    esp,0xc
c002885d:	68 14 a2 02 c0       	push   0xc002a214
c0028862:	e8 e8 15 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0028867:	83 c4 10             	add    esp,0x10
c002886a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028870:	85 c0                	test   eax,eax
c0028872:	74 34                	je     c00288a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028878:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002887b:	85 c0                	test   eax,eax
c002887d:	74 29                	je     c00288a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002887f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028883:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028886:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002888a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002888d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028891:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028895:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002889f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288a6:	eb 65                	jmp    c002890d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ae:	85 c0                	test   eax,eax
c00288b0:	75 4b                	jne    c00288fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288b9:	85 c0                	test   eax,eax
c00288bb:	75 40                	jne    c00288fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288c5:	89 10                	mov    DWORD PTR [eax],edx
c00288c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288d9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288e7:	85 c0                	test   eax,eax
c00288e9:	74 22                	je     c002890d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288eb:	83 ec 0c             	sub    esp,0xc
c00288ee:	68 36 a2 02 c0       	push   0xc002a236
c00288f3:	e8 57 15 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c00288f8:	83 c4 10             	add    esp,0x10
c00288fb:	eb 10                	jmp    c002890d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288fd:	83 ec 0c             	sub    esp,0xc
c0028900:	68 40 a2 02 c0       	push   0xc002a240
c0028905:	e8 45 15 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c002890a:	83 c4 10             	add    esp,0x10
c002890d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028911:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028914:	8d 50 01             	lea    edx,[eax+0x1]
c0028917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002891e:	90                   	nop
c002891f:	83 c4 0c             	add    esp,0xc
c0028922:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028924 <ACPI::~ACPI()>:
c0028924:	83 ec 0c             	sub    esp,0xc
c0028927:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c002892c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028930:	89 10                	mov    DWORD PTR [eax],edx
c0028932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028936:	83 ec 0c             	sub    esp,0xc
c0028939:	50                   	push   eax
c002893a:	e8 ab b0 fe ff       	call   c00139ea <Device::~Device()>
c002893f:	83 c4 10             	add    esp,0x10
c0028942:	90                   	nop
c0028943:	83 c4 0c             	add    esp,0xc
c0028946:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028948 <ACPI::~ACPI()>:
c0028948:	83 ec 0c             	sub    esp,0xc
c002894b:	83 ec 0c             	sub    esp,0xc
c002894e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028952:	e8 cd ff ff ff       	call   c0028924 <ACPI::~ACPI()>
c0028957:	83 c4 10             	add    esp,0x10
c002895a:	83 ec 08             	sub    esp,0x8
c002895d:	68 64 12 00 00       	push   0x1264
c0028962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028966:	e8 a0 9c fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c002896b:	83 c4 10             	add    esp,0x10
c002896e:	83 c4 0c             	add    esp,0xc
c0028971:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028972 <LinkedList<Device>::~LinkedList()>:
c0028972:	90                   	nop
c0028973:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028974 <LinkedList<Device>::isEmpty()>:
c0028974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028978:	8b 00                	mov    eax,DWORD PTR [eax]
c002897a:	85 c0                	test   eax,eax
c002897c:	75 0e                	jne    c002898c <LinkedList<Device>::isEmpty()+0x18>
c002897e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028982:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028985:	85 c0                	test   eax,eax
c0028987:	75 03                	jne    c002898c <LinkedList<Device>::isEmpty()+0x18>
c0028989:	b0 01                	mov    al,0x1
c002898b:	c3                   	ret    
c002898c:	b0 00                	mov    al,0x0
c002898e:	90                   	nop
c002898f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028990 <LinkedList<Device>::getFirstElement()>:
c0028990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028994:	8b 00                	mov    eax,DWORD PTR [eax]
c0028996:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028998 <LinkedList<Device>::removeFirst()>:
c0028998:	83 ec 0c             	sub    esp,0xc
c002899b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899f:	8b 00                	mov    eax,DWORD PTR [eax]
c00289a1:	85 c0                	test   eax,eax
c00289a3:	75 15                	jne    c00289ba <LinkedList<Device>::removeFirst()+0x22>
c00289a5:	83 ec 0c             	sub    esp,0xc
c00289a8:	68 4c a2 02 c0       	push   0xc002a24c
c00289ad:	e8 9d 14 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c00289b2:	83 c4 10             	add    esp,0x10
c00289b5:	e9 87 00 00 00       	jmp    c0028a41 <LinkedList<Device>::removeFirst()+0xa9>
c00289ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289c1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289c7:	85 c0                	test   eax,eax
c00289c9:	74 10                	je     c00289db <LinkedList<Device>::removeFirst()+0x43>
c00289cb:	83 ec 0c             	sub    esp,0xc
c00289ce:	68 97 a2 02 c0       	push   0xc002a297
c00289d3:	e8 77 14 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c00289d8:	83 c4 10             	add    esp,0x10
c00289db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289df:	8b 00                	mov    eax,DWORD PTR [eax]
c00289e1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289e7:	85 c0                	test   eax,eax
c00289e9:	75 33                	jne    c0028a1e <LinkedList<Device>::removeFirst()+0x86>
c00289eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a07:	83 f8 01             	cmp    eax,0x1
c0028a0a:	74 24                	je     c0028a30 <LinkedList<Device>::removeFirst()+0x98>
c0028a0c:	83 ec 0c             	sub    esp,0xc
c0028a0f:	68 70 a2 02 c0       	push   0xc002a270
c0028a14:	e8 36 14 ff ff       	call   c0019e4f <Krnl::panic(char const*)>
c0028a19:	83 c4 10             	add    esp,0x10
c0028a1c:	eb 12                	jmp    c0028a30 <LinkedList<Device>::removeFirst()+0x98>
c0028a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a24:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2e:	89 10                	mov    DWORD PTR [eax],edx
c0028a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a37:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a41:	83 c4 0c             	add    esp,0xc
c0028a44:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028a46 <CPU::~CPU()>:
c0028a46:	83 ec 0c             	sub    esp,0xc
c0028a49:	ba b8 b5 02 c0       	mov    edx,0xc002b5b8
c0028a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a52:	89 10                	mov    DWORD PTR [eax],edx
c0028a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a58:	83 ec 0c             	sub    esp,0xc
c0028a5b:	50                   	push   eax
c0028a5c:	e8 89 af fe ff       	call   c00139ea <Device::~Device()>
c0028a61:	83 c4 10             	add    esp,0x10
c0028a64:	90                   	nop
c0028a65:	83 c4 0c             	add    esp,0xc
c0028a68:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028a6a <CPU::~CPU()>:
c0028a6a:	83 ec 0c             	sub    esp,0xc
c0028a6d:	83 ec 0c             	sub    esp,0xc
c0028a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a74:	e8 cd ff ff ff       	call   c0028a46 <CPU::~CPU()>
c0028a79:	83 c4 10             	add    esp,0x10
c0028a7c:	83 ec 08             	sub    esp,0x8
c0028a7f:	68 98 11 00 00       	push   0x1198
c0028a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a88:	e8 7e 9b fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028a8d:	83 c4 10             	add    esp,0x10
c0028a90:	83 c4 0c             	add    esp,0xc
c0028a93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028a94 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028a94:	90                   	nop
c0028a95:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028a96 <ThreadControlBlock::ThreadControlBlock()>:
c0028a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a9a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028aa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aa5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028abb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028acd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ad5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028add:	90                   	nop
c0028ade:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ae0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028af5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b19:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b20:	90                   	nop
c0028b21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028b22 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028b22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b29:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028b2a <Vm::_FPUState::_FPUState()>:
c0028b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b2e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028b35:	90                   	nop
c0028b36:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028b38 <PCI::~PCI()>:
c0028b38:	83 ec 0c             	sub    esp,0xc
c0028b3b:	ba e4 c0 02 c0       	mov    edx,0xc002c0e4
c0028b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b44:	89 10                	mov    DWORD PTR [eax],edx
c0028b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4a:	83 ec 0c             	sub    esp,0xc
c0028b4d:	50                   	push   eax
c0028b4e:	e8 67 a8 fe ff       	call   c00133ba <Bus::~Bus()>
c0028b53:	83 c4 10             	add    esp,0x10
c0028b56:	90                   	nop
c0028b57:	83 c4 0c             	add    esp,0xc
c0028b5a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028b5c <PCI::~PCI()>:
c0028b5c:	83 ec 0c             	sub    esp,0xc
c0028b5f:	83 ec 0c             	sub    esp,0xc
c0028b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b66:	e8 cd ff ff ff       	call   c0028b38 <PCI::~PCI()>
c0028b6b:	83 c4 10             	add    esp,0x10
c0028b6e:	83 ec 08             	sub    esp,0x8
c0028b71:	68 5c 01 00 00       	push   0x15c
c0028b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b7a:	e8 8c 9a fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028b7f:	83 c4 10             	add    esp,0x10
c0028b82:	83 c4 0c             	add    esp,0xc
c0028b85:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028b86 <IDE::~IDE()>:
c0028b86:	83 ec 0c             	sub    esp,0xc
c0028b89:	ba 98 c1 02 c0       	mov    edx,0xc002c198
c0028b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b92:	89 10                	mov    DWORD PTR [eax],edx
c0028b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b98:	83 ec 0c             	sub    esp,0xc
c0028b9b:	50                   	push   eax
c0028b9c:	e8 5f b3 fe ff       	call   c0013f00 <HardDiskController::~HardDiskController()>
c0028ba1:	83 c4 10             	add    esp,0x10
c0028ba4:	90                   	nop
c0028ba5:	83 c4 0c             	add    esp,0xc
c0028ba8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028baa <IDE::~IDE()>:
c0028baa:	83 ec 0c             	sub    esp,0xc
c0028bad:	83 ec 0c             	sub    esp,0xc
c0028bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bb4:	e8 cd ff ff ff       	call   c0028b86 <IDE::~IDE()>
c0028bb9:	83 c4 10             	add    esp,0x10
c0028bbc:	83 ec 08             	sub    esp,0x8
c0028bbf:	68 70 02 00 00       	push   0x270
c0028bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bc8:	e8 3e 9a fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028bcd:	83 c4 10             	add    esp,0x10
c0028bd0:	83 c4 0c             	add    esp,0xc
c0028bd3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028bd4 <SATABus::~SATABus()>:
c0028bd4:	83 ec 0c             	sub    esp,0xc
c0028bd7:	ba 10 c2 02 c0       	mov    edx,0xc002c210
c0028bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be0:	89 10                	mov    DWORD PTR [eax],edx
c0028be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be6:	83 ec 0c             	sub    esp,0xc
c0028be9:	50                   	push   eax
c0028bea:	e8 11 b3 fe ff       	call   c0013f00 <HardDiskController::~HardDiskController()>
c0028bef:	83 c4 10             	add    esp,0x10
c0028bf2:	90                   	nop
c0028bf3:	83 c4 0c             	add    esp,0xc
c0028bf6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028bf8 <SATABus::~SATABus()>:
c0028bf8:	83 ec 0c             	sub    esp,0xc
c0028bfb:	83 ec 0c             	sub    esp,0xc
c0028bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c02:	e8 cd ff ff ff       	call   c0028bd4 <SATABus::~SATABus()>
c0028c07:	83 c4 10             	add    esp,0x10
c0028c0a:	83 ec 08             	sub    esp,0x8
c0028c0d:	68 64 01 00 00       	push   0x164
c0028c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c16:	e8 f0 99 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028c1b:	83 c4 10             	add    esp,0x10
c0028c1e:	83 c4 0c             	add    esp,0xc
c0028c21:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028c22 <ATA::~ATA()>:
c0028c22:	83 ec 0c             	sub    esp,0xc
c0028c25:	ba 5c c2 02 c0       	mov    edx,0xc002c25c
c0028c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2e:	89 10                	mov    DWORD PTR [eax],edx
c0028c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c34:	83 ec 0c             	sub    esp,0xc
c0028c37:	50                   	push   eax
c0028c38:	e8 a5 b3 fe ff       	call   c0013fe2 <PhysicalDisk::~PhysicalDisk()>
c0028c3d:	83 c4 10             	add    esp,0x10
c0028c40:	90                   	nop
c0028c41:	83 c4 0c             	add    esp,0xc
c0028c44:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028c46 <ATA::~ATA()>:
c0028c46:	83 ec 0c             	sub    esp,0xc
c0028c49:	83 ec 0c             	sub    esp,0xc
c0028c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c50:	e8 cd ff ff ff       	call   c0028c22 <ATA::~ATA()>
c0028c55:	83 c4 10             	add    esp,0x10
c0028c58:	83 ec 08             	sub    esp,0x8
c0028c5b:	68 7c 01 00 00       	push   0x17c
c0028c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c64:	e8 a2 99 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028c69:	83 c4 10             	add    esp,0x10
c0028c6c:	83 c4 0c             	add    esp,0xc
c0028c6f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028c70 <ATAPI::~ATAPI()>:
c0028c70:	83 ec 0c             	sub    esp,0xc
c0028c73:	ba 94 c2 02 c0       	mov    edx,0xc002c294
c0028c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7c:	89 10                	mov    DWORD PTR [eax],edx
c0028c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c82:	83 ec 0c             	sub    esp,0xc
c0028c85:	50                   	push   eax
c0028c86:	e8 57 b3 fe ff       	call   c0013fe2 <PhysicalDisk::~PhysicalDisk()>
c0028c8b:	83 c4 10             	add    esp,0x10
c0028c8e:	90                   	nop
c0028c8f:	83 c4 0c             	add    esp,0xc
c0028c92:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028c94 <ATAPI::~ATAPI()>:
c0028c94:	83 ec 0c             	sub    esp,0xc
c0028c97:	83 ec 0c             	sub    esp,0xc
c0028c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c9e:	e8 cd ff ff ff       	call   c0028c70 <ATAPI::~ATAPI()>
c0028ca3:	83 c4 10             	add    esp,0x10
c0028ca6:	83 ec 08             	sub    esp,0x8
c0028ca9:	68 80 01 00 00       	push   0x180
c0028cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb2:	e8 54 99 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028cb7:	83 c4 10             	add    esp,0x10
c0028cba:	83 c4 0c             	add    esp,0xc
c0028cbd:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028cbe <SATA::~SATA()>:
c0028cbe:	83 ec 0c             	sub    esp,0xc
c0028cc1:	ba 48 c3 02 c0       	mov    edx,0xc002c348
c0028cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cca:	89 10                	mov    DWORD PTR [eax],edx
c0028ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd0:	83 ec 0c             	sub    esp,0xc
c0028cd3:	50                   	push   eax
c0028cd4:	e8 09 b3 fe ff       	call   c0013fe2 <PhysicalDisk::~PhysicalDisk()>
c0028cd9:	83 c4 10             	add    esp,0x10
c0028cdc:	90                   	nop
c0028cdd:	83 c4 0c             	add    esp,0xc
c0028ce0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ce2 <SATA::~SATA()>:
c0028ce2:	83 ec 0c             	sub    esp,0xc
c0028ce5:	83 ec 0c             	sub    esp,0xc
c0028ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cec:	e8 cd ff ff ff       	call   c0028cbe <SATA::~SATA()>
c0028cf1:	83 c4 10             	add    esp,0x10
c0028cf4:	83 ec 08             	sub    esp,0x8
c0028cf7:	68 7c 01 00 00       	push   0x17c
c0028cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d00:	e8 06 99 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028d05:	83 c4 10             	add    esp,0x10
c0028d08:	83 c4 0c             	add    esp,0xc
c0028d0b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028d0c <SATAPI::~SATAPI()>:
c0028d0c:	83 ec 0c             	sub    esp,0xc
c0028d0f:	ba 24 c4 02 c0       	mov    edx,0xc002c424
c0028d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d18:	89 10                	mov    DWORD PTR [eax],edx
c0028d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1e:	83 ec 0c             	sub    esp,0xc
c0028d21:	50                   	push   eax
c0028d22:	e8 bb b2 fe ff       	call   c0013fe2 <PhysicalDisk::~PhysicalDisk()>
c0028d27:	83 c4 10             	add    esp,0x10
c0028d2a:	90                   	nop
c0028d2b:	83 c4 0c             	add    esp,0xc
c0028d2e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028d30 <SATAPI::~SATAPI()>:
c0028d30:	83 ec 0c             	sub    esp,0xc
c0028d33:	83 ec 0c             	sub    esp,0xc
c0028d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d3a:	e8 cd ff ff ff       	call   c0028d0c <SATAPI::~SATAPI()>
c0028d3f:	83 c4 10             	add    esp,0x10
c0028d42:	83 ec 08             	sub    esp,0x8
c0028d45:	68 80 01 00 00       	push   0x180
c0028d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4e:	e8 b8 98 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028d53:	83 c4 10             	add    esp,0x10
c0028d56:	83 c4 0c             	add    esp,0xc
c0028d59:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028d5a <AVX::~AVX()>:
c0028d5a:	83 ec 0c             	sub    esp,0xc
c0028d5d:	ba 64 c4 02 c0       	mov    edx,0xc002c464
c0028d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d66:	89 10                	mov    DWORD PTR [eax],edx
c0028d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6c:	83 ec 0c             	sub    esp,0xc
c0028d6f:	50                   	push   eax
c0028d70:	e8 f1 b2 fe ff       	call   c0014066 <FPU::~FPU()>
c0028d75:	83 c4 10             	add    esp,0x10
c0028d78:	90                   	nop
c0028d79:	83 c4 0c             	add    esp,0xc
c0028d7c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028d7e <AVX::~AVX()>:
c0028d7e:	83 ec 0c             	sub    esp,0xc
c0028d81:	83 ec 0c             	sub    esp,0xc
c0028d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d88:	e8 cd ff ff ff       	call   c0028d5a <AVX::~AVX()>
c0028d8d:	83 c4 10             	add    esp,0x10
c0028d90:	83 ec 08             	sub    esp,0x8
c0028d93:	68 58 01 00 00       	push   0x158
c0028d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9c:	e8 6a 98 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028da1:	83 c4 10             	add    esp,0x10
c0028da4:	83 c4 0c             	add    esp,0xc
c0028da7:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028da8 <MMX::~MMX()>:
c0028da8:	83 ec 0c             	sub    esp,0xc
c0028dab:	ba a4 c4 02 c0       	mov    edx,0xc002c4a4
c0028db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db4:	89 10                	mov    DWORD PTR [eax],edx
c0028db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dba:	83 ec 0c             	sub    esp,0xc
c0028dbd:	50                   	push   eax
c0028dbe:	e8 a3 b2 fe ff       	call   c0014066 <FPU::~FPU()>
c0028dc3:	83 c4 10             	add    esp,0x10
c0028dc6:	90                   	nop
c0028dc7:	83 c4 0c             	add    esp,0xc
c0028dca:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028dcc <MMX::~MMX()>:
c0028dcc:	83 ec 0c             	sub    esp,0xc
c0028dcf:	83 ec 0c             	sub    esp,0xc
c0028dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd6:	e8 cd ff ff ff       	call   c0028da8 <MMX::~MMX()>
c0028ddb:	83 c4 10             	add    esp,0x10
c0028dde:	83 ec 08             	sub    esp,0x8
c0028de1:	68 58 01 00 00       	push   0x158
c0028de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dea:	e8 1c 98 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028def:	83 c4 10             	add    esp,0x10
c0028df2:	83 c4 0c             	add    esp,0xc
c0028df5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028df6 <SSE::~SSE()>:
c0028df6:	83 ec 0c             	sub    esp,0xc
c0028df9:	ba e4 c4 02 c0       	mov    edx,0xc002c4e4
c0028dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e02:	89 10                	mov    DWORD PTR [eax],edx
c0028e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e08:	83 ec 0c             	sub    esp,0xc
c0028e0b:	50                   	push   eax
c0028e0c:	e8 55 b2 fe ff       	call   c0014066 <FPU::~FPU()>
c0028e11:	83 c4 10             	add    esp,0x10
c0028e14:	90                   	nop
c0028e15:	83 c4 0c             	add    esp,0xc
c0028e18:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028e1a <SSE::~SSE()>:
c0028e1a:	83 ec 0c             	sub    esp,0xc
c0028e1d:	83 ec 0c             	sub    esp,0xc
c0028e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e24:	e8 cd ff ff ff       	call   c0028df6 <SSE::~SSE()>
c0028e29:	83 c4 10             	add    esp,0x10
c0028e2c:	83 ec 08             	sub    esp,0x8
c0028e2f:	68 58 01 00 00       	push   0x158
c0028e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e38:	e8 ce 97 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028e3d:	83 c4 10             	add    esp,0x10
c0028e40:	83 c4 0c             	add    esp,0xc
c0028e43:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028e44 <x87::~x87()>:
c0028e44:	83 ec 0c             	sub    esp,0xc
c0028e47:	ba 24 c5 02 c0       	mov    edx,0xc002c524
c0028e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e50:	89 10                	mov    DWORD PTR [eax],edx
c0028e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e56:	83 ec 0c             	sub    esp,0xc
c0028e59:	50                   	push   eax
c0028e5a:	e8 07 b2 fe ff       	call   c0014066 <FPU::~FPU()>
c0028e5f:	83 c4 10             	add    esp,0x10
c0028e62:	90                   	nop
c0028e63:	83 c4 0c             	add    esp,0xc
c0028e66:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028e68 <x87::~x87()>:
c0028e68:	83 ec 0c             	sub    esp,0xc
c0028e6b:	83 ec 0c             	sub    esp,0xc
c0028e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e72:	e8 cd ff ff ff       	call   c0028e44 <x87::~x87()>
c0028e77:	83 c4 10             	add    esp,0x10
c0028e7a:	83 ec 08             	sub    esp,0x8
c0028e7d:	68 58 01 00 00       	push   0x158
c0028e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e86:	e8 80 97 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028e8b:	83 c4 10             	add    esp,0x10
c0028e8e:	83 c4 0c             	add    esp,0xc
c0028e91:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028e92 <IOAPIC::~IOAPIC()>:
c0028e92:	83 ec 0c             	sub    esp,0xc
c0028e95:	ba 7c c6 02 c0       	mov    edx,0xc002c67c
c0028e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e9e:	89 10                	mov    DWORD PTR [eax],edx
c0028ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea4:	83 ec 0c             	sub    esp,0xc
c0028ea7:	50                   	push   eax
c0028ea8:	e8 3d ab fe ff       	call   c00139ea <Device::~Device()>
c0028ead:	83 c4 10             	add    esp,0x10
c0028eb0:	90                   	nop
c0028eb1:	83 c4 0c             	add    esp,0xc
c0028eb4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028eb6 <IOAPIC::~IOAPIC()>:
c0028eb6:	83 ec 0c             	sub    esp,0xc
c0028eb9:	83 ec 0c             	sub    esp,0xc
c0028ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec0:	e8 cd ff ff ff       	call   c0028e92 <IOAPIC::~IOAPIC()>
c0028ec5:	83 c4 10             	add    esp,0x10
c0028ec8:	83 ec 08             	sub    esp,0x8
c0028ecb:	68 68 01 00 00       	push   0x168
c0028ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed4:	e8 32 97 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028ed9:	83 c4 10             	add    esp,0x10
c0028edc:	83 c4 0c             	add    esp,0xc
c0028edf:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028ee0 <APIC::~APIC()>:
c0028ee0:	83 ec 0c             	sub    esp,0xc
c0028ee3:	ba 34 c6 02 c0       	mov    edx,0xc002c634
c0028ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eec:	89 10                	mov    DWORD PTR [eax],edx
c0028eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef2:	83 ec 0c             	sub    esp,0xc
c0028ef5:	50                   	push   eax
c0028ef6:	e8 35 b6 fe ff       	call   c0014530 <InterruptController::~InterruptController()>
c0028efb:	83 c4 10             	add    esp,0x10
c0028efe:	90                   	nop
c0028eff:	83 c4 0c             	add    esp,0xc
c0028f02:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028f04 <APIC::~APIC()>:
c0028f04:	83 ec 0c             	sub    esp,0xc
c0028f07:	83 ec 0c             	sub    esp,0xc
c0028f0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f0e:	e8 cd ff ff ff       	call   c0028ee0 <APIC::~APIC()>
c0028f13:	83 c4 10             	add    esp,0x10
c0028f16:	83 ec 08             	sub    esp,0x8
c0028f19:	68 58 21 00 00       	push   0x2158
c0028f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f22:	e8 e4 96 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028f27:	83 c4 10             	add    esp,0x10
c0028f2a:	83 c4 0c             	add    esp,0xc
c0028f2d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028f2e <PIC::~PIC()>:
c0028f2e:	83 ec 0c             	sub    esp,0xc
c0028f31:	ba cc c6 02 c0       	mov    edx,0xc002c6cc
c0028f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3a:	89 10                	mov    DWORD PTR [eax],edx
c0028f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f40:	83 ec 0c             	sub    esp,0xc
c0028f43:	50                   	push   eax
c0028f44:	e8 e7 b5 fe ff       	call   c0014530 <InterruptController::~InterruptController()>
c0028f49:	83 c4 10             	add    esp,0x10
c0028f4c:	90                   	nop
c0028f4d:	83 c4 0c             	add    esp,0xc
c0028f50:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028f52 <PIC::~PIC()>:
c0028f52:	83 ec 0c             	sub    esp,0xc
c0028f55:	83 ec 0c             	sub    esp,0xc
c0028f58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f5c:	e8 cd ff ff ff       	call   c0028f2e <PIC::~PIC()>
c0028f61:	83 c4 10             	add    esp,0x10
c0028f64:	83 ec 08             	sub    esp,0x8
c0028f67:	68 58 21 00 00       	push   0x2158
c0028f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f70:	e8 96 96 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028f75:	83 c4 10             	add    esp,0x10
c0028f78:	83 c4 0c             	add    esp,0xc
c0028f7b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028f7c <APICTimer::~APICTimer()>:
c0028f7c:	83 ec 0c             	sub    esp,0xc
c0028f7f:	ba 20 c7 02 c0       	mov    edx,0xc002c720
c0028f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f88:	89 10                	mov    DWORD PTR [eax],edx
c0028f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8e:	83 ec 0c             	sub    esp,0xc
c0028f91:	50                   	push   eax
c0028f92:	e8 f1 d5 fe ff       	call   c0016588 <Timer::~Timer()>
c0028f97:	83 c4 10             	add    esp,0x10
c0028f9a:	90                   	nop
c0028f9b:	83 c4 0c             	add    esp,0xc
c0028f9e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028fa0 <APICTimer::~APICTimer()>:
c0028fa0:	83 ec 0c             	sub    esp,0xc
c0028fa3:	83 ec 0c             	sub    esp,0xc
c0028fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028faa:	e8 cd ff ff ff       	call   c0028f7c <APICTimer::~APICTimer()>
c0028faf:	83 c4 10             	add    esp,0x10
c0028fb2:	83 ec 08             	sub    esp,0x8
c0028fb5:	68 60 01 00 00       	push   0x160
c0028fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fbe:	e8 48 96 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0028fc3:	83 c4 10             	add    esp,0x10
c0028fc6:	83 c4 0c             	add    esp,0xc
c0028fc9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028fca <PIT::~PIT()>:
c0028fca:	83 ec 0c             	sub    esp,0xc
c0028fcd:	ba 70 c7 02 c0       	mov    edx,0xc002c770
c0028fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd6:	89 10                	mov    DWORD PTR [eax],edx
c0028fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fdc:	83 ec 0c             	sub    esp,0xc
c0028fdf:	50                   	push   eax
c0028fe0:	e8 a3 d5 fe ff       	call   c0016588 <Timer::~Timer()>
c0028fe5:	83 c4 10             	add    esp,0x10
c0028fe8:	90                   	nop
c0028fe9:	83 c4 0c             	add    esp,0xc
c0028fec:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028fee <PIT::~PIT()>:
c0028fee:	83 ec 0c             	sub    esp,0xc
c0028ff1:	83 ec 0c             	sub    esp,0xc
c0028ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff8:	e8 cd ff ff ff       	call   c0028fca <PIT::~PIT()>
c0028ffd:	83 c4 10             	add    esp,0x10
c0029000:	83 ec 08             	sub    esp,0x8
c0029003:	68 5c 01 00 00       	push   0x15c
c0029008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900c:	e8 fa 95 fe ff       	call   c001260b <operator delete(void*, unsigned long)>
c0029011:	83 c4 10             	add    esp,0x10
c0029014:	83 c4 0c             	add    esp,0xc
c0029017:	c3                   	ret    
